WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -Naur linux.org/include/linux/evlog.h linux.evlog.patched/include/linux/evlog.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: include/linux/evlog.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#63: FILE: include/linux/evlog.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: include/linux/evlog.h:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: include/linux/evlog.h:70:
+}; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/evlog.h:89:
+extern int evl_write(const char *facility, int event_type,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: include/linux/evlog.h:90:
+extern int evl_write(const char *facility, int event_type,
+	int severity, const void *buf, size_t len, int format);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/evlog.h:91:
+extern int evl_printf(const char *facility, int event_type, int sev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: include/linux/evlog.h:92:
+extern int evl_printf(const char *facility, int event_type, int sev,
+	const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/evlog.h:93:
+extern int evl_vprintf(const char *facility, int event_type, int sev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: include/linux/evlog.h:94:
+extern int evl_vprintf(const char *facility, int event_type, int sev,
+	const char *fmt, va_list args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: include/linux/evlog.h:97:
+static inline int evl_write(const char *facility, int event_type,
+	int severity, const void *buf, size_t len, int format)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#145: FILE: include/linux/evlog.h:98:
+	{ return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: include/linux/evlog.h:100:
+static inline int evl_printf(const char *facility, int event_type, int sev,
+	const char *fmt, ...);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#148: FILE: include/linux/evlog.h:101:
+	{ return -ENOSYS; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/linux/evlog.h:103:
+static inline int evl_vprintf(const char *facility, int event_type, int sev,
+	const char *fmt, va_list args)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#151: FILE: include/linux/evlog.h:104:
+	{ return -ENOSYS; }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#172: FILE: kernel/evlog.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#187: FILE: kernel/evlog.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#188: FILE: kernel/evlog.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: kernel/evlog.c:49:
+static void mk_rec_header(struct kern_log_entry *rec_hdr,
+		const char *facility,

CHECK:SPACING: No space is necessary after a cast
#229: FILE: kernel/evlog.c:58:
+	rec_hdr->log_size		=  (__u16) size;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#230: FILE: kernel/evlog.c:59:
+	rec_hdr->log_format		=  (__s8) format;

CHECK:SPACING: No space is necessary after a cast
#231: FILE: kernel/evlog.c:60:
+	rec_hdr->log_event_type		=  (__s32) event_type;

CHECK:SPACING: No space is necessary after a cast
#232: FILE: kernel/evlog.c:61:
+	rec_hdr->log_severity		=  (__s8) severity;

CHECK:SPACING: No space is necessary after a cast
#237: FILE: kernel/evlog.c:66:
+	rec_hdr->log_flags		=  (__u32) flags;

CHECK:SPACING: No space is necessary after a cast
#238: FILE: kernel/evlog.c:67:
+	rec_hdr->log_processor		=  (__s32) smp_processor_id();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#241: FILE: kernel/evlog.c:70:
+	rec_hdr->log_facility[FACILITY_MAXLEN-1] = '\0';
 	                                     ^

CHECK:SPACING: No space is necessary after a cast
#255: FILE: kernel/evlog.c:84:
+		{ (void*) vardata, hdr->log_size }

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#255: FILE: kernel/evlog.c:84:
+		{ (void*) vardata, hdr->log_size }

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#259: FILE: kernel/evlog.c:88:
+	if (hdr->log_severity < 0 || hdr->log_severity > LOG_DEBUG) {
+		hdr->log_severity = LOG_WARNING;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vardata"
#262: FILE: kernel/evlog.c:91:
+	if (vardata == NULL || hdr->log_size == 0) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#269: FILE: kernel/evlog.c:98:
+	if (in_interrupt()) {
+		hdr->log_flags |= EVL_INTERRUPT;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#273: FILE: kernel/evlog.c:102:
+		iov[1].iov_len = hdr->log_size = EVL_ENTRY_MAXLEN;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: kernel/evlog.c:116:
+int evl_write(const char *fac, int event_type, int severity, const void *buf,
+		size_t size, int format)

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: kernel/evlog.c:119:
+	struct kern_log_entry hdr;
+	mk_rec_header(&hdr, fac, event_type, severity, size, 0, format);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: kernel/evlog.c:151:
+	ptrdiff_t room = b->b_end - b->b_tail;
+	if (room > 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#322: FILE: kernel/evlog.c:151:
+	if (room > 0) {
+		(void) memcpy(b->b_tail, data, min(datasz, (size_t)room));
+	}

CHECK:SPACING: No space is necessary after a cast
#323: FILE: kernel/evlog.c:152:
+		(void) memcpy(b->b_tail, data, min(datasz, (size_t)room));

WARNING:MINMAX: min() should probably be min_t(size_t, datasz, room)
#323: FILE: kernel/evlog.c:152:
+		(void) memcpy(b->b_tail, data, min(datasz, (size_t)room));

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: kernel/evlog.c:171:
+	char *old_tail = b->b_tail;
+	evl_put(b, s, strlen(s) + null);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#343: FILE: kernel/evlog.c:172:
+	if (b->b_tail > b->b_end && old_tail < b->b_end) {
+		*(b->b_end - 1) = '\0';
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#350: FILE: kernel/evlog.c:179:
+	while (isdigit(**s)) {
+		(*s)++;
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#381: FILE: kernel/evlog.c:210:
+	repeat:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#383: FILE: kernel/evlog.c:212:
+		switch (*fmt) {
+			case '-':
+			case '+':
+			case ' ':
+			case '#':
+			case '0':

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: braces {} should be used on all arms of this statement
#393: FILE: kernel/evlog.c:222:
+	if (isdigit(*fmt))
[...]
+	else if (*fmt == '*') {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#404: FILE: kernel/evlog.c:233:
+		if (isdigit(*fmt))
[...]
+		else if (*fmt == '*') {
[...]

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#414: FILE: kernel/evlog.c:243:
+	if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt =='Z') {
 	                                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: kernel/evlog.c:269:
+    do { type v=va_arg(args,type); evl_put(b,&v,sizeof(v)); } while(0)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#440: FILE: kernel/evlog.c:269:
+    do { type v=va_arg(args,type); evl_put(b,&v,sizeof(v)); } while(0)
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: kernel/evlog.c:269:
+    do { type v=va_arg(args,type); evl_put(b,&v,sizeof(v)); } while(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#440: FILE: kernel/evlog.c:269:
+    do { type v=va_arg(args,type); evl_put(b,&v,sizeof(v)); } while(0)
                                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#440: FILE: kernel/evlog.c:269:
+    do { type v=va_arg(args,type); evl_put(b,&v,sizeof(v)); } while(0)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: kernel/evlog.c:269:
+    do { type v=va_arg(args,type); evl_put(b,&v,sizeof(v)); } while(0)
                                                ^

ERROR:SPACING: space required before the open parenthesis '('
#440: FILE: kernel/evlog.c:269:
+    do { type v=va_arg(args,type); evl_put(b,&v,sizeof(v)); } while(0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: kernel/evlog.c:276:
+		int wp = 0x0;
+		if (*fmt != '%') {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#447: FILE: kernel/evlog.c:276:
+		if (*fmt != '%') {
+			continue;
+		}

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#461: FILE: kernel/evlog.c:290:
+		switch (*fmt) {
+			case 'c':
[...]
+			case 's':
[...]
+			case 'p':
[...]
+			case 'n':
[...]
+			case '%':
[...]
+			case 'o':
+			case 'X':
+			case 'x':
+			case 'd':
+			case 'i':
+			case 'u':
[...]
+			default:

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#472: FILE: kernel/evlog.c:301:
+				COPYARG(void*);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#477: FILE: kernel/evlog.c:306:
+				if (qualifier == 'l') {
[...]
+				} else if (qualifier == 'Z') {
[...]
+				} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#478: FILE: kernel/evlog.c:307:
+					(void) va_arg(args, long *);

CHECK:SPACING: No space is necessary after a cast
#480: FILE: kernel/evlog.c:309:
+					(void) va_arg(args, size_t *);

CHECK:SPACING: No space is necessary after a cast
#482: FILE: kernel/evlog.c:311:
+					(void) va_arg(args, int *);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#504: FILE: kernel/evlog.c:333:
+		if (qualifier == 'L') {
[...]
+		} else if (qualifier == 'l') {
[...]
+		} else if (qualifier == 'Z') {
[...]
+		} else if (qualifier == 'h') {
[...]
+		} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#567: FILE: kernel/evlog.c:396:
+		argsz = (int) (b.b_tail - pargs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: kernel/evlog.c:405:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: kernel/evlog.c:420:
+evl_vprintf(const char *facility, int event_type, int severity,
+	const char *fmt, va_list args)

WARNING:LINE_SPACING: Missing a blank line after declarations
#595: FILE: kernel/evlog.c:424:
+	unsigned int flags = 0;
+	if (event_type == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#595: FILE: kernel/evlog.c:424:
+	if (event_type == 0) {
+		flags |= EVL_EVTYCRC;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: kernel/evlog.c:428:
+	mk_rec_header(&hdr, facility, event_type, severity, 0, flags,
+		EVL_PRINTF);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: kernel/evlog.c:429:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: kernel/evlog.c:440:
+evl_printf(const char *facility, int event_type, int severity,
+	const char *fmt, ...)

WARNING:LINE_SPACING: Missing a blank line after declarations
#615: FILE: kernel/evlog.c:444:
+	int ret;
+	va_start(args, fmt);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#621: FILE: kernel/evlog.c:450:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#622: FILE: kernel/evlog.c:451:
+EXPORT_SYMBOL(evl_write);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#623: FILE: kernel/evlog.c:452:
+EXPORT_SYMBOL(evl_printf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#624: FILE: kernel/evlog.c:453:
+EXPORT_SYMBOL(evl_vprintf);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000356802.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 27 warnings, 32 checks, 569 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000356802.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
