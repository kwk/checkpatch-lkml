WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
For those who didn't read the first couple threads, this patch adds multicast 

WARNING:TYPO_SPELLING: 'consistant' may be misspelled - perhaps 'consistent'?
#63: 
results from a number of runs, but the numbers are fairly consistant across runs.
                                                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'definately' may be misspelled - perhaps 'definitely'?
#80: 
The numbers definately favour a kernel-space solution.  That said, it would be 
            ^^^^^^^^^^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#110: 
--- a/include/linux/un.h	Thu Mar 27 01:53:11 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: include/linux/un.h:18:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#135: FILE: include/net/af_unix.h:67:
+struct unix_mcast
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#167: FILE: net/Kconfig:160:
+config UNIX_MULTICAST
+	bool "Unix domain multicasting (EXPERIMENTAL)"
+	depends on UNIX && EXPERIMENTAL
+	---help---
+	  If you say Y here you will include support for multicast unix domain
+	  sockets.  Multiple sockets can add themselves to a multicast address 
+	  group, and any packet sent to the multicast address will be distributed
+	  to all unix sockets that have associated themselves with the multicast
+	  address.
+
+	  This code is experimental.  Say N unless you want to try efficient
+	  one-sender many-listeners messaging.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: net/Kconfig:165:
+^I  sockets.  Multiple sockets can add themselves to a multicast address $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#194: FILE: net/unix/af_unix.c:179:
+	if (node->prevlistener==NULL)
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->prevlistener"
#194: FILE: net/unix/af_unix.c:179:
+	if (node->prevlistener==NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: net/unix/af_unix.c:183:
+^I^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#199: FILE: net/unix/af_unix.c:184:
+	if (node->nextlistener!=NULL)
 	                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->nextlistener"
#199: FILE: net/unix/af_unix.c:184:
+	if (node->nextlistener!=NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: net/unix/af_unix.c:186:
+^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#202: FILE: net/unix/af_unix.c:187:
+	if (node->prevaddr==NULL)
 	                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->prevaddr"
#202: FILE: net/unix/af_unix.c:187:
+	if (node->prevaddr==NULL)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#206: FILE: net/unix/af_unix.c:191:
+	if (node->nextaddr!=NULL)
 	                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->nextaddr"
#206: FILE: net/unix/af_unix.c:191:
+	if (node->nextaddr!=NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: net/unix/af_unix.c:196:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: net/unix/af_unix.c:367:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: net/unix/af_unix.c:398:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: net/unix/af_unix.c:401:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: net/unix/af_unix.c:405:
+^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#246: FILE: net/unix/af_unix.c:406:
+	while(node!=NULL){
 	          ^

ERROR:SPACING: space required before the open brace '{'
#246: FILE: net/unix/af_unix.c:406:
+	while(node!=NULL){

ERROR:SPACING: space required before the open parenthesis '('
#246: FILE: net/unix/af_unix.c:406:
+	while(node!=NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#246: FILE: net/unix/af_unix.c:406:
+	while(node!=NULL){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#247: FILE: net/unix/af_unix.c:407:
+		other=node->addr;
 		     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: net/unix/af_unix.c:410:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: net/unix/af_unix.c:412:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: net/unix/af_unix.c:415:
+^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#258: FILE: net/unix/af_unix.c:418:
+			releasesock=o->sk.socket;
 			           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#260: FILE: net/unix/af_unix.c:420:
+			releasesock=NULL;
 			           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: net/unix/af_unix.c:421:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: net/unix/af_unix.c:423:
+^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#264: FILE: net/unix/af_unix.c:424:
+		oldnode=node;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#265: FILE: net/unix/af_unix.c:425:
+		node=node->nextaddr;
 		    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: net/unix/af_unix.c:426:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: net/unix/af_unix.c:429:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: net/unix/af_unix.c:435:
+^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#277: FILE: net/unix/af_unix.c:437:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: net/unix/af_unix.c:440:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: net/unix/af_unix.c:455:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: net/unix/af_unix.c:595:
+#endif^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#313: FILE: net/unix/af_unix.c:1293:
+	struct unix_mcast *node=NULL;
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: net/unix/af_unix.c:1294:
+	unix_socket *addr=NULL;
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#315: FILE: net/unix/af_unix.c:1295:
+	int sentmsgs=0;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#316: FILE: net/unix/af_unix.c:1296:
+	struct sk_buff *dupskb=NULL;
 	                      ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#341: FILE: net/unix/af_unix.c:1387:
+		if (addr!=NULL)
 		        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "addr"
#341: FILE: net/unix/af_unix.c:1387:
+		if (addr!=NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#362: FILE: net/unix/af_unix.c:1405:
+			printk("unable to send to socket\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#367: FILE: net/unix/af_unix.c:1410:
+		other=NULL;
 		     ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#374: FILE: net/unix/af_unix.c:1417:
+		if (addr!=NULL)
 		        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "addr"
#374: FILE: net/unix/af_unix.c:1417:
+		if (addr!=NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: net/unix/af_unix.c:1422:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#382: FILE: net/unix/af_unix.c:1425:
+	o=unix_sk(other);
 	 ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#384: FILE: net/unix/af_unix.c:1427:
+		if ((addr==NULL) && (o->is_mcast_addr)) {
 		         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr==NULL'
#384: FILE: net/unix/af_unix.c:1427:
+		if ((addr==NULL) && (o->is_mcast_addr)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'o->is_mcast_addr'
#384: FILE: net/unix/af_unix.c:1427:
+		if ((addr==NULL) && (o->is_mcast_addr)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#384: FILE: net/unix/af_unix.c:1427:
+		if ((addr==NULL) && (o->is_mcast_addr)) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#386: FILE: net/unix/af_unix.c:1429:
+			addr=other;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#387: FILE: net/unix/af_unix.c:1430:
+			node=o->mcastnode;
 			    ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#388: FILE: net/unix/af_unix.c:1431:
+			if (node!=NULL) {
 			        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#388: FILE: net/unix/af_unix.c:1431:
+			if (node!=NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#389: FILE: net/unix/af_unix.c:1432:
+				other=node->listener;
 				     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#393: FILE: net/unix/af_unix.c:1436:
+				err=-ECONNREFUSED;
 				   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#393: FILE: net/unix/af_unix.c:1436:
+				err=-ECONNREFUSED;
 				    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: net/unix/af_unix.c:1439:
+^I^I}^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->nextlistener"
#398: FILE: net/unix/af_unix.c:1441:
+		if (node->nextlistener != NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#400: FILE: net/unix/af_unix.c:1443:
+			dupskb=skb_clone(skb,GFP_ATOMIC);
 			      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#400: FILE: net/unix/af_unix.c:1443:
+			dupskb=skb_clone(skb,GFP_ATOMIC);
 			                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: net/unix/af_unix.c:1444:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#406: FILE: net/unix/af_unix.c:1449:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: net/unix/af_unix.c:1458:
+^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#417: FILE: net/unix/af_unix.c:1460:
+	if (addr!=NULL) {
 	        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "addr"
#417: FILE: net/unix/af_unix.c:1460:
+	if (addr!=NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: net/unix/af_unix.c:1463:
+^I^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#421: FILE: net/unix/af_unix.c:1464:
+		if (dupskb!=NULL) {
 		          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dupskb"
#421: FILE: net/unix/af_unix.c:1464:
+		if (dupskb!=NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#422: FILE: net/unix/af_unix.c:1465:
+			node=node->nextlistener;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#423: FILE: net/unix/af_unix.c:1466:
+			other=node->listener;
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#424: FILE: net/unix/af_unix.c:1467:
+			skb=dupskb;
 			   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#425: FILE: net/unix/af_unix.c:1468:
+			dupskb=NULL;
 			      ^

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#426: FILE: net/unix/af_unix.c:1469:
+			//printk("setting skb to dup, going to next listener, back to mcastrestart\n");

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: net/unix/af_unix.c:1471:
+^I^I}^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#429: FILE: net/unix/af_unix.c:1472:
+		other=addr;
 		     ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#441: FILE: net/unix/af_unix.c:1484:
+	if (addr!=NULL) {
 	        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "addr"
#441: FILE: net/unix/af_unix.c:1484:
+	if (addr!=NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->nextlistener"
#448: FILE: net/unix/af_unix.c:1491:
+		if (node->nextlistener != NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#450: FILE: net/unix/af_unix.c:1493:
+			node=node->nextlistener;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#451: FILE: net/unix/af_unix.c:1494:
+			other=node->listener;
 			     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: net/unix/af_unix.c:1496:
+^I^I^Igoto mcastrestart;^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#458: FILE: net/unix/af_unix.c:1501:
+			other=addr;
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#461: FILE: net/unix/af_unix.c:1504:
+				err=len;
 				   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#489: FILE: net/unix/af_unix.c:2074:
+static int unix_mc_attach(unix_socket *sk , int optlen, struct sockaddr_un *mreq)
                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#491: FILE: net/unix/af_unix.c:2076:
+	int err=0;
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: net/unix/af_unix.c:2083:
+^Iunsigned hash;^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#498: FILE: net/unix/af_unix.c:2083:
+	unsigned hash;	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: net/unix/af_unix.c:2084:
+^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#501: FILE: net/unix/af_unix.c:2086:
+	sunaddr=mreq;
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: net/unix/af_unix.c:2090:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: net/unix/af_unix.c:2091:
+^Inamelen = err;^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#509: FILE: net/unix/af_unix.c:2094:
+	if (other==NULL) {
 	         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!other"
#509: FILE: net/unix/af_unix.c:2094:
+	if (other==NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#511: FILE: net/unix/af_unix.c:2096:
+		err=sock_create(AF_UNIX, SOCK_DGRAM, 0, &newsocket);
 		   ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#512: FILE: net/unix/af_unix.c:2097:
+		if (err<0)
 		       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: net/unix/af_unix.c:2099:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: net/unix/af_unix.c:2101:
+^I^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#518: FILE: net/unix/af_unix.c:2103:
+		err = newsocket->ops->bind(newsocket,(struct sockaddr*) sunaddr, optlen);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#518: FILE: net/unix/af_unix.c:2103:
+		err = newsocket->ops->bind(newsocket,(struct sockaddr*) sunaddr, optlen);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#518: FILE: net/unix/af_unix.c:2103:
+		err = newsocket->ops->bind(newsocket,(struct sockaddr*) sunaddr, optlen);
 		                                    ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#519: FILE: net/unix/af_unix.c:2104:
+		if (err<0)
 		       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: net/unix/af_unix.c:2106:
+^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#522: FILE: net/unix/af_unix.c:2107:
+		other=newsocket->sk;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#524: FILE: net/unix/af_unix.c:2109:
+		unix_sk(other)->mcastnode=NULL;
 		                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#525: FILE: net/unix/af_unix.c:2110:
+		unix_sk(other)->is_mcast_addr=1;
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: net/unix/af_unix.c:2117:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#534: FILE: net/unix/af_unix.c:2119:
+	node=(struct unix_mcast *)kmalloc(sizeof(struct unix_mcast), GFP_KERNEL);
 	    ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#534: FILE: net/unix/af_unix.c:2119:
+	node=(struct unix_mcast *)kmalloc(sizeof(struct unix_mcast), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*node)...) over kmalloc(sizeof(struct unix_mcast)...)
#534: FILE: net/unix/af_unix.c:2119:
+	node=(struct unix_mcast *)kmalloc(sizeof(struct unix_mcast), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: net/unix/af_unix.c:2124:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: net/unix/af_unix.c:2126:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: net/unix/af_unix.c:2132:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: net/unix/af_unix.c:2136:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: net/unix/af_unix.c:2139:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: net/unix/af_unix.c:2142:
+^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#562: FILE: net/unix/af_unix.c:2147:
+	if (node->nextlistener!=NULL)
 	                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->nextlistener"
#562: FILE: net/unix/af_unix.c:2147:
+	if (node->nextlistener!=NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: net/unix/af_unix.c:2149:
+^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#569: FILE: net/unix/af_unix.c:2154:
+	if (node->nextaddr!=NULL)
 	                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->nextaddr"
#569: FILE: net/unix/af_unix.c:2154:
+	if (node->nextaddr!=NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: net/unix/af_unix.c:2156:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: net/unix/af_unix.c:2159:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: net/unix/af_unix.c:2161:
+^I$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#584: FILE: net/unix/af_unix.c:2169:
+static int unix_mc_detach(unix_socket *sk , int optlen, struct sockaddr_un *mreq)
                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#586: FILE: net/unix/af_unix.c:2171:
+	int err=0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#588: FILE: net/unix/af_unix.c:2173:
+	struct socket *releasesock=NULL;
 	                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#593: FILE: net/unix/af_unix.c:2178:
+	unsigned hash;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: net/unix/af_unix.c:2179:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#596: FILE: net/unix/af_unix.c:2181:
+	sunaddr=mreq;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#603: FILE: net/unix/af_unix.c:2188:
+	o=unix_sk(other);
 	 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#604: FILE: net/unix/af_unix.c:2189:
+^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#605: FILE: net/unix/af_unix.c:2190:
+	if (other==NULL) {
 	         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!other"
#605: FILE: net/unix/af_unix.c:2190:
+	if (other==NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#609: FILE: net/unix/af_unix.c:2194:
+		return 0;
+	} else {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#612: FILE: net/unix/af_unix.c:2197:
+			err=-ENOENT;
 			   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#612: FILE: net/unix/af_unix.c:2197:
+			err=-ENOENT;
 			    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: net/unix/af_unix.c:2201:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: net/unix/af_unix.c:2202:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#617: FILE: net/unix/af_unix.c:2202:
+	
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: net/unix/af_unix.c:2205:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: net/unix/af_unix.c:2207:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#623: FILE: net/unix/af_unix.c:2208:
+	while(node)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#623: FILE: net/unix/af_unix.c:2208:
+	while(node)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#627: FILE: net/unix/af_unix.c:2212:
+		node=node->nextlistener;
 		    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: net/unix/af_unix.c:2214:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: net/unix/af_unix.c:2215:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#630: FILE: net/unix/af_unix.c:2215:
+	
+	

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#633: FILE: net/unix/af_unix.c:2218:
+		err=-EINVAL;
 		   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#633: FILE: net/unix/af_unix.c:2218:
+		err=-EINVAL;
 		    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#636: FILE: net/unix/af_unix.c:2221:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: net/unix/af_unix.c:2223:
+^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#639: FILE: net/unix/af_unix.c:2224:
+	if (o->mcastnode==NULL)
 	                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!o->mcastnode"
#639: FILE: net/unix/af_unix.c:2224:
+	if (o->mcastnode==NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#642: FILE: net/unix/af_unix.c:2227:
+		releasesock=o->sk.socket;
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: net/unix/af_unix.c:2231:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#650: FILE: net/unix/af_unix.c:2235:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: net/unix/af_unix.c:2237:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: net/unix/af_unix.c:2240:
+^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#661: FILE: net/unix/af_unix.c:2246:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: net/unix/af_unix.c:2248:
+                    char *optval, int optlen)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: net/unix/af_unix.c:2248:
+static int unix_setsockopt(struct socket *sock, int level, int optname,
+                    char *optval, int optlen)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: net/unix/af_unix.c:2248:
+                    char *optval, int optlen)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#668: FILE: net/unix/af_unix.c:2253:
+	int err=0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#669: FILE: net/unix/af_unix.c:2254:
+	struct sock *sk=sock->sk;
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#670: FILE: net/unix/af_unix.c:2255:
+	struct sock *sk=sock->sk;
+	lock_sock(sk);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: net/unix/af_unix.c:2256:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#675: FILE: net/unix/af_unix.c:2260:
+	switch (optname) {
+		case UNIX_ADD_MEMBERSHIP:
+		case UNIX_DROP_MEMBERSHIP:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#686: FILE: net/unix/af_unix.c:2271:
+			if (copy_from_user(&mreq,optval,optlen))
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#686: FILE: net/unix/af_unix.c:2271:
+			if (copy_from_user(&mreq,optval,optlen))
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#690: FILE: net/unix/af_unix.c:2275:
+				err = unix_mc_attach(sk,optlen,&mreq);
 				                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#690: FILE: net/unix/af_unix.c:2275:
+				err = unix_mc_attach(sk,optlen,&mreq);
 				                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#690: FILE: net/unix/af_unix.c:2275:
+				err = unix_mc_attach(sk,optlen,&mreq);
 				                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#692: FILE: net/unix/af_unix.c:2277:
+				err = unix_mc_detach(sk,optlen,&mreq);
 				                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#692: FILE: net/unix/af_unix.c:2277:
+				err = unix_mc_detach(sk,optlen,&mreq);
 				                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#692: FILE: net/unix/af_unix.c:2277:
+				err = unix_mc_detach(sk,optlen,&mreq);
 				                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: net/unix/af_unix.c:2290:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: net/unix/af_unix.c:2294:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#711: FILE: net/unix/af_unix.c:2296:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382257.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 143 errors, 13 warnings, 33 checks, 589 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382257.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
