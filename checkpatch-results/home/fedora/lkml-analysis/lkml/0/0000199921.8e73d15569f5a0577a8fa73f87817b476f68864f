WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: drivers/serial/jsm/jsm_tty.c:1:
+/************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: drivers/serial/jsm/jsm_tty.c:10:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: drivers/serial/jsm/jsm_tty.c:12:
+ * but WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED; without even the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: drivers/serial/jsm/jsm_tty.c:13:
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: drivers/serial/jsm/jsm_tty.c:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: drivers/serial/jsm/jsm_tty.c:16:
+ * You should have received a copy of the GNU General Public License $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: drivers/serial/jsm/jsm_tty.c:17:
+ * along with this program; if not, write to the Free Software $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: drivers/serial/jsm/jsm_tty.c:17:
+ * along with this program; if not, write to the Free Software $

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: drivers/serial/jsm/jsm_tty.c:30:
+#include <linux/pci.h>^I$

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#158: FILE: drivers/serial/jsm/jsm_tty.c:111:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: No space is necessary after a cast
#237: FILE: drivers/serial/jsm/jsm_tty.c:190:
+		channel->ch_rqueue = (u8 *) kmalloc(RQUEUESIZE, GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#237: FILE: drivers/serial/jsm/jsm_tty.c:190:
+		channel->ch_rqueue = (u8 *) kmalloc(RQUEUESIZE, GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#239: FILE: drivers/serial/jsm/jsm_tty.c:192:
+		if (!channel->ch_rqueue) {
+			jsm_printk(INIT, ERR, &channel->ch_bd->pci_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: drivers/serial/jsm/jsm_tty.c:193:
+			jsm_printk(INIT, ERR, &channel->ch_bd->pci_dev,
+				"unable to allocate read queue buf");

CHECK:SPACING: No space is necessary after a cast
#246: FILE: drivers/serial/jsm/jsm_tty.c:199:
+		channel->ch_equeue = (u8 *) kmalloc(EQUEUESIZE, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#246: FILE: drivers/serial/jsm/jsm_tty.c:199:
+		channel->ch_equeue = (u8 *) kmalloc(EQUEUESIZE, GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#248: FILE: drivers/serial/jsm/jsm_tty.c:201:
+		if (!channel->ch_equeue) {
+			jsm_printk(INIT, ERR, &channel->ch_bd->pci_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: drivers/serial/jsm/jsm_tty.c:202:
+			jsm_printk(INIT, ERR, &channel->ch_bd->pci_dev,
+				"unable to allocate error queue buf");

CHECK:SPACING: No space is necessary after a cast
#255: FILE: drivers/serial/jsm/jsm_tty.c:208:
+		channel->ch_wqueue = (u8 *) kmalloc(WQUEUESIZE, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#255: FILE: drivers/serial/jsm/jsm_tty.c:208:
+		channel->ch_wqueue = (u8 *) kmalloc(WQUEUESIZE, GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#257: FILE: drivers/serial/jsm/jsm_tty.c:210:
+		if (!channel->ch_wqueue) {
+			jsm_printk(INIT, ERR, &channel->ch_bd->pci_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: drivers/serial/jsm/jsm_tty.c:211:
+			jsm_printk(INIT, ERR, &channel->ch_bd->pci_dev,
+				"unable to allocate write queue buf");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: drivers/serial/jsm/jsm_tty.c:222:
+	jsm_printk(OPEN, INFO, &channel->ch_bd->pci_dev,
+		"jsm_open: initializing channel in open...\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#274: FILE: drivers/serial/jsm/jsm_tty.c:227:
+	channel->ch_r_head = channel->ch_r_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#275: FILE: drivers/serial/jsm/jsm_tty.c:228:
+	channel->ch_e_head = channel->ch_e_tail = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#276: FILE: drivers/serial/jsm/jsm_tty.c:229:
+	channel->ch_w_head = channel->ch_w_tail = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: drivers/serial/jsm/jsm_tty.c:281:
+		jsm_printk(CLOSE, INFO, &channel->ch_bd->pci_dev,
+			"Close. HUPCL set, dropping DTR/RTS\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: drivers/serial/jsm/jsm_tty.c:297:
+static void jsm_tty_set_termios(struct uart_port *port,
+				 struct termios *termios,

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#382: FILE: drivers/serial/jsm/jsm_tty.c:335:
+static struct uart_ops jsm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#431: FILE: drivers/serial/jsm/jsm_tty.c:384:
+		if (!brd->channels[i]) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*brd->channels[i])...) over kmalloc(sizeof(struct jsm_channel)...)
#436: FILE: drivers/serial/jsm/jsm_tty.c:389:
+			brd->channels[i] = kmalloc(sizeof(struct jsm_channel), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#438: FILE: drivers/serial/jsm/jsm_tty.c:391:
+			if (!brd->channels[i]) {
+				jsm_printk(CORE, ERR, &brd->pci_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: drivers/serial/jsm/jsm_tty.c:392:
+				jsm_printk(CORE, ERR, &brd->pci_dev,
+					"%s:%d Unable to allocate memory for channel struct\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#451: FILE: drivers/serial/jsm/jsm_tty.c:404:
+	for (i = 0; i < brd->nasync; i++, ch = brd->channels[i]) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: drivers/serial/jsm/jsm_tty.c:411:
+^I^I^Ich->ch_neo_uart = (struct neo_uart_struct *) ((u64) vaddr $

CHECK:SPACING: No space is necessary after a cast
#458: FILE: drivers/serial/jsm/jsm_tty.c:411:
+			ch->ch_neo_uart = (struct neo_uart_struct *) ((u64) vaddr 

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#494: FILE: drivers/serial/jsm/jsm_tty.c:447:
+	for (i = 0; i < brd->nasync; i++, ch = brd->channels[i]) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: drivers/serial/jsm/jsm_tty.c:458:
+^I^Iif (uart_add_one_port (&jsm_uart_driver, &brd->channels[i]->uart_port)) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#505: FILE: drivers/serial/jsm/jsm_tty.c:458:
+		if (uart_add_one_port (&jsm_uart_driver, &brd->channels[i]->uart_port)) 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#506: FILE: drivers/serial/jsm/jsm_tty.c:459:
+			printk(KERN_INFO "Added device failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#508: FILE: drivers/serial/jsm/jsm_tty.c:461:
+			printk(KERN_INFO "Added device \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#508: FILE: drivers/serial/jsm/jsm_tty.c:461:
+			printk(KERN_INFO "Added device \n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#533: FILE: drivers/serial/jsm/jsm_tty.c:486:
+	for (i = 0; i < brd->nasync; i++) {
+

ERROR:SPACING: space required before the open parenthesis '('
#571: FILE: drivers/serial/jsm/jsm_tty.c:524:
+	if(!bd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: drivers/serial/jsm/jsm_tty.c:529:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#598: FILE: drivers/serial/jsm/jsm_tty.c:551:
+^Iif (!tp || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/serial/jsm/jsm_tty.c:552:
+	if (!tp || 
+		!(tp->termios->c_cflag & CREAD) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#599: FILE: drivers/serial/jsm/jsm_tty.c:552:
+		!(tp->termios->c_cflag & CREAD) ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#600: FILE: drivers/serial/jsm/jsm_tty.c:553:
+		!(tp->termios->c_cflag & CREAD) ) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/serial/jsm/jsm_tty.c:555:
+		jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+			"input. dropping %d bytes on port %d...\n", data_len, ch->ch_portnum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: drivers/serial/jsm/jsm_tty.c:571:
+		jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+			"Port %d throttled, not reading any data. head: %x tail: %x\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: drivers/serial/jsm/jsm_tty.c:580:
+^I * as we can directly into the linux TTY flip buffer.  $

CHECK:BRACES: braces {} should be used on all arms of this statement
#636: FILE: drivers/serial/jsm/jsm_tty.c:589:
+	if (jsm_rawreadok) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#641: FILE: drivers/serial/jsm/jsm_tty.c:594:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'jsm_input', this function's name, in a string
#649: FILE: drivers/serial/jsm/jsm_tty.c:602:
+		jsm_printk(READ, INFO, &ch->ch_bd->pci_dev, "jsm_input 1\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: drivers/serial/jsm/jsm_tty.c:609:
+^I */ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: drivers/serial/jsm/jsm_tty.c:614:
+				jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+					"JSM - FLIPBUF in use. delaying input\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: drivers/serial/jsm/jsm_tty.c:659:
+^I/*  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: drivers/serial/jsm/jsm_tty.c:676:
+^I^I^I^Ielse $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#734: FILE: drivers/serial/jsm/jsm_tty.c:687:
+	}
+	else if (!tp->real_raw) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#735: FILE: drivers/serial/jsm/jsm_tty.c:688:
+		if (I_PARMRK(tp) || I_BRKINT(tp) || I_INPCK(tp)) {
[...]
+		} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: drivers/serial/jsm/jsm_tty.c:700:
+^I^I^I^Ielse $

CHECK:BRACES: Unbalanced braces around else statement
#750: FILE: drivers/serial/jsm/jsm_tty.c:703:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: drivers/serial/jsm/jsm_tty.c:723:
+			jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+				"jsm_input. %d real_raw len:%d calling receive_buf for board %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'jsm_input', this function's name, in a string
#770: FILE: drivers/serial/jsm/jsm_tty.c:723:
+				"jsm_input. %d real_raw len:%d calling receive_buf for board %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: drivers/serial/jsm/jsm_tty.c:742:
+^I^I^I^I"jsm_input. %d not real_raw len:%d calling receive_buf for board %d\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#789: FILE: drivers/serial/jsm/jsm_tty.c:742:
+			jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+				"jsm_input. %d not real_raw len:%d calling receive_buf for board %d\n", 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'jsm_input', this function's name, in a string
#789: FILE: drivers/serial/jsm/jsm_tty.c:742:
+				"jsm_input. %d not real_raw len:%d calling receive_buf for board %d\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: drivers/serial/jsm/jsm_tty.c:756:
+^I^I^I"jsm_input. %d not jsm_read raw okay scheduling flip\n", __LINE__); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/serial/jsm/jsm_tty.c:756:
+		jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+			"jsm_input. %d not jsm_read raw okay scheduling flip\n", __LINE__); 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'jsm_input', this function's name, in a string
#803: FILE: drivers/serial/jsm/jsm_tty.c:756:
+			"jsm_input. %d not jsm_read raw okay scheduling flip\n", __LINE__); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: drivers/serial/jsm/jsm_tty.c:769:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: drivers/serial/jsm/jsm_tty.c:769:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: drivers/serial/jsm/jsm_tty.c:781:
+		jsm_printk(CARR, INFO, &ch->ch_bd->pci_dev,
+			"mistat: %x D_CD: %x\n", ch->ch_mistat, ch->ch_mistat & UART_MSR_DCD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/serial/jsm/jsm_tty.c:789:
+	jsm_printk(CARR, INFO, &ch->ch_bd->pci_dev,
+		"DCD: physical: %d virt: %d\n", phys_carrier, virt_carrier);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'virt_carrier == 1'
#841: FILE: drivers/serial/jsm/jsm_tty.c:794:
+	if (((ch->ch_flags & CH_FCAR) == 0) && (virt_carrier == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#842: FILE: drivers/serial/jsm/jsm_tty.c:795:
+	if (((ch->ch_flags & CH_FCAR) == 0) && (virt_carrier == 1)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/serial/jsm/jsm_tty.c:802:
+		jsm_printk(CARR, INFO, &ch->ch_bd->pci_dev,
+			"carrier: virt DCD rose\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ch->ch_flags_wait
#851: FILE: drivers/serial/jsm/jsm_tty.c:804:
+		if (waitqueue_active(&(ch->ch_flags_wait)))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#851: FILE: drivers/serial/jsm/jsm_tty.c:804:
+		if (waitqueue_active(&(ch->ch_flags_wait)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_carrier == 1'
#858: FILE: drivers/serial/jsm/jsm_tty.c:811:
+	if (((ch->ch_flags & CH_CD) == 0) && (phys_carrier == 1)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#859: FILE: drivers/serial/jsm/jsm_tty.c:812:
+	if (((ch->ch_flags & CH_CD) == 0) && (phys_carrier == 1)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: drivers/serial/jsm/jsm_tty.c:819:
+		jsm_printk(CARR, INFO, &ch->ch_bd->pci_dev,
+			"carrier: physical DCD rose\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ch->ch_flags_wait
#868: FILE: drivers/serial/jsm/jsm_tty.c:821:
+		if (waitqueue_active(&(ch->ch_flags_wait)))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#868: FILE: drivers/serial/jsm/jsm_tty.c:821:
+		if (waitqueue_active(&(ch->ch_flags_wait)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: drivers/serial/jsm/jsm_tty.c:834:
+^Iif ((virt_carrier == 0) && ((ch->ch_flags & CH_CD) != 0) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'virt_carrier == 0'
#881: FILE: drivers/serial/jsm/jsm_tty.c:834:
+	if ((virt_carrier == 0) && ((ch->ch_flags & CH_CD) != 0) 
+			&& (phys_carrier == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_carrier == 0'
#881: FILE: drivers/serial/jsm/jsm_tty.c:834:
+	if ((virt_carrier == 0) && ((ch->ch_flags & CH_CD) != 0) 
+			&& (phys_carrier == 0)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#882: FILE: drivers/serial/jsm/jsm_tty.c:835:
+	if ((virt_carrier == 0) && ((ch->ch_flags & CH_CD) != 0) 
+			&& (phys_carrier == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ch->ch_flags_wait
#895: FILE: drivers/serial/jsm/jsm_tty.c:848:
+		if (waitqueue_active(&(ch->ch_flags_wait)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#913: FILE: drivers/serial/jsm/jsm_tty.c:866:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#919: FILE: drivers/serial/jsm/jsm_tty.c:872:
+	if ((qleft = ch->ch_r_tail - ch->ch_r_head - 1) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open parenthesis '('
#940: FILE: drivers/serial/jsm/jsm_tty.c:893:
+			if(!(ch->ch_flags & CH_RECEIVER_OFF)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#944: FILE: drivers/serial/jsm/jsm_tty.c:897:
+				jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+					"Internal queue hit hilevel mark (%d)! Turning off interrupts.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: drivers/serial/jsm/jsm_tty.c:907:
+				jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+					"Sending stop char! Times sent: %x\n", ch->ch_stops_sent);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: drivers/serial/jsm/jsm_tty.c:934:
+				jsm_printk(READ, INFO, &ch->ch_bd->pci_dev,
+					"Internal queue hit lowlevel mark (%d)! Turning on interrupts.\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1003: FILE: drivers/serial/jsm/jsm_tty.c:956:
+	int data_count = 0,data_count1 =0;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1003: FILE: drivers/serial/jsm/jsm_tty.c:956:
+	int data_count = 0,data_count1 =0;
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1015: FILE: drivers/serial/jsm/jsm_tty.c:968:
+	if ((bufcount = tail - head - 1) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: drivers/serial/jsm/jsm_tty.c:980:
+		while ((port->info->xmit.head != temp_tail) &&
+		(data_count < remain)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1035: FILE: drivers/serial/jsm/jsm_tty.c:988:
+		if (data_count == remain) head = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: drivers/serial/jsm/jsm_tty.c:995:
+		while ((port->info->xmit.head != temp_tail) &&
+			(data_count1 < remain)) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1050: FILE: drivers/serial/jsm/jsm_tty.c:1003:
+
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1061: FILE: drivers/serial/jsm/jsm_tty.c:1014:
+	if (data_count) {
+		channel->ch_bd->bd_ops->copy_data_from_queue_to_uart(channel);
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1072: FILE: drivers/serial/jsm/jsm_tty.c:1025:
+static DRIVER_ATTR(version, S_IRUSR, jsm_driver_version_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1078: FILE: drivers/serial/jsm/jsm_tty.c:1031:
+static DRIVER_ATTR(state, S_IRUSR, jsm_driver_state_show, NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 23 warnings, 53 checks, 1043 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
