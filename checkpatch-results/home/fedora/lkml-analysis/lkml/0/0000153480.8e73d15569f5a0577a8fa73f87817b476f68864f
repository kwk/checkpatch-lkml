ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#75: FILE: mount/swapon.c:176:
+static int
+swap_is_swsuspend(const char *device) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: mount/swapon.c:179:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#79: FILE: mount/swapon.c:180:
+	if (type && strcmp(type, "swsuspend")==0)
 	                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#84: FILE: mount/swapon.c:185:
+static int
+swap_is_swsuspend(const char *device) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: mount/swapon.c:189:
+^I$

WARNING:SIZEOF_PARENTHESIS: sizeof buf should be sizeof(buf)
#94: FILE: mount/swapon.c:195:
+	    read(fd, buf, sizeof buf) == sizeof buf &&

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#95: FILE: mount/swapon.c:196:
+	    (memcmp("S1SUSPEND", buf, 9)==0 ||
 	                                ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#96: FILE: mount/swapon.c:197:
+			memcmp("S2SUSPEND", buf, 9)==0))
 			                           ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#105: FILE: mount/swapon.c:206:
+static int
+swap_reinitialize(const char *device) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: mount/swapon.c:210:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#110: FILE: mount/swapon.c:211:
+	switch((pid=fork())) {
+		case -1: /* fork error */
[...]
+		case 0:	/* child */
[...]
+		default: /* parent */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#110: FILE: mount/swapon.c:211:
+	switch((pid=fork())) {
 	           ^

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: mount/swapon.c:211:
+	switch((pid=fork())) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: mount/swapon.c:216:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: mount/swapon.c:223:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: mount/swapon.c:230:
+^I^I^I^Iif ((ret = waitpid(pid, &status, 0)) < 0 $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#129: FILE: mount/swapon.c:230:
+				if ((ret = waitpid(pid, &status, 0)) < 0 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#130: FILE: mount/swapon.c:231:
+				if ((ret = waitpid(pid, &status, 0)) < 0 
+						&& errno == EINTR)

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: mount/swapon.c:237:
+^I^I      ^I^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: mount/swapon.c:237:
+^I^I      ^I^I}$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#140: FILE: mount/swapon.c:241:
+			if (WIFEXITED(status) && WEXITSTATUS(status)==0)
 			                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: mount/swapon.c:247:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: mount/swapon.c:271:
+^I/* We have to reinitialize swap with old (=useless) software suspend $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: mount/swapon.c:272:
+^I * data. The problem is that if we don't do it, then we get data $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#158: FILE: mount/swapon.c:275:
+	if (swap_is_swsuspend(special)==0) {
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: mount/swapon.c:277:
+^I^I^I^I^I"Reinitializing the swap.\n"), $

WARNING:SPLIT_STRING: quoted string split across lines
#160: FILE: mount/swapon.c:277:
+		fprintf(stdout, _("%s: %s: software suspend data detected. "
+					"Reinitializing the swap.\n"), 

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: mount/swapon.c:282:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#177: FILE: mount/get_label_uuid.c:97:
+static int
+is_swsuspend_partition(int fd, char **label, char *uuid) {

CHECK:SPACING: No space is necessary after a cast
#181: FILE: mount/get_label_uuid.c:101:
+	struct swap_header_v1_2 *p = (struct swap_header_v1_2 *) buf;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#184: FILE: mount/get_label_uuid.c:104:
+	if (lseek(fd, 0, SEEK_SET) == 0
+	    && read(fd, buf, n) == n

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: mount/get_label_uuid.c:105:
+^I    && (strncmp(buf+n-10, "S1SUSPEND", 9)==0 || $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#185: FILE: mount/get_label_uuid.c:105:
+	    && read(fd, buf, n) == n
+	    && (strncmp(buf+n-10, "S1SUSPEND", 9)==0 || 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#185: FILE: mount/get_label_uuid.c:105:
+	    && (strncmp(buf+n-10, "S1SUSPEND", 9)==0 || 
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#185: FILE: mount/get_label_uuid.c:105:
+	    && (strncmp(buf+n-10, "S1SUSPEND", 9)==0 || 
 	                     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#185: FILE: mount/get_label_uuid.c:105:
+	    && (strncmp(buf+n-10, "S1SUSPEND", 9)==0 || 
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: mount/get_label_uuid.c:106:
+		    strncmp(buf+n-10, "S2SUSPEND", 9)==0)
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#186: FILE: mount/get_label_uuid.c:106:
+		    strncmp(buf+n-10, "S2SUSPEND", 9)==0)
 		                 ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#186: FILE: mount/get_label_uuid.c:106:
+		    strncmp(buf+n-10, "S2SUSPEND", 9)==0)
 		                                     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#187: FILE: mount/get_label_uuid.c:107:
+		    strncmp(buf+n-10, "S2SUSPEND", 9)==0)
+	    && p->version == 1) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000153480.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 3 warnings, 9 checks, 151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000153480.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
