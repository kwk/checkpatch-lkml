WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#68: FILE: security/inode.c:335:
+	int (*get)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#69: FILE: security/inode.c:336:
+	int (*set)(void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#69: FILE: security/inode.c:336:
+	int (*set)(void *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: security/inode.c:345:
+int open_file_int(struct inode *inode, struct file *file,
+		     int (*get)(void *), int (*set)(void *, int),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: security/inode.c:372:
+ssize_t read_file_int(struct file *file, char __user *user_buf,
+			      size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: security/inode.c:397:
+ssize_t write_file_int(struct file *file, const char __user *user_buf,
+			       size_t count, loff_t *ppos)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#149: FILE: security/inode.c:416:
+	val = simple_strtol(attr->set_buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#169: FILE: security/inode.c:436:
+EXPORT_SYMBOL_GPL(read_file_int);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#170: FILE: security/inode.c:437:
+EXPORT_SYMBOL_GPL(close_file_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#171: FILE: security/inode.c:438:
+EXPORT_SYMBOL_GPL(open_file_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#172: FILE: security/inode.c:439:
+EXPORT_SYMBOL_GPL(write_file_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#173: FILE: security/inode.c:440:
+EXPORT_SYMBOL_GPL(secfs_int_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#174: FILE: security/inode.c:441:
+EXPORT_SYMBOL_GPL(secfs_int_get);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#187: FILE: include/linux/security.h:1980:
+#define SECFS_DEFINE_INT_FILE(__fops, __get, __set, __fmt)		\
+static int __fops ## _open(struct inode *inode, struct file *file)	\
+{									\
+	return open_file_int(inode, file, __get, __set, __fmt);		\
+}									\
+static struct file_operations __fops = {				\
+	.owner	 = THIS_MODULE,						\
+	.open	 = __fops ## _open,					\
+	.release = close_file_int,					\
+	.read	 = read_file_int,					\
+	.write	 = write_file_int,					\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#192: FILE: include/linux/security.h:1985:
+static struct file_operations __fops = {				\

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: include/linux/security.h:1994:
+int open_file_int(struct inode *inode, struct file *file,
+		     int (*get)(void *), int (*set)(void *, int),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: include/linux/security.h:1998:
+ssize_t read_file_int(struct file *file, char __user *user_buf,
+			      size_t count, loff_t *ppos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: include/linux/security.h:2000:
+ssize_t write_file_int(struct file *file, const char __user *user_buf,
+			       size_t count, loff_t *ppos);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: security/seclvl.c:161:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: security/seclvl.c:180:
+SECFS_DEFINE_INT_FILE(seclvl_file_ops,secfs_int_get,do_seclvl_advance,"%d\n");
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: security/seclvl.c:180:
+SECFS_DEFINE_INT_FILE(seclvl_file_ops,secfs_int_get,do_seclvl_advance,"%d\n");
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: security/seclvl.c:180:
+SECFS_DEFINE_INT_FILE(seclvl_file_ops,secfs_int_get,do_seclvl_advance,"%d\n");
                                                                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170115.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 12 warnings, 6 checks, 254 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170115.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
