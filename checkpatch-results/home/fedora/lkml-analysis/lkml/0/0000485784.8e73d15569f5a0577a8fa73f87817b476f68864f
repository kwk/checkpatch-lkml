WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
same type of patch as the fs patches.   This one works it's magic in the mm 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#40: FILE: mm//bootmem.c:85:
+	BUG_ON(!size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#41: FILE: mm//bootmem.c:86:
+	BUG_ON(sidx < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#42: FILE: mm//bootmem.c:87:
+	BUG_ON(eidx < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#43: FILE: mm//bootmem.c:88:
+	BUG_ON(sidx >= eidx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#44: FILE: mm//bootmem.c:89:
+	BUG_ON((addr >> PAGE_SHIFT) >= bdata->node_low_pfn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#45: FILE: mm//bootmem.c:90:
+	BUG_ON(end > bdata->node_low_pfn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#67: FILE: mm//bootmem.c:109:
+	BUG_ON(!size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#68: FILE: mm//bootmem.c:110:
+	BUG_ON(end > bdata->node_low_pfn);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#78: FILE: mm//bootmem.c:119:
+		BUG_ON(!test_and_clear_bit(i, bdata->node_bootmem_map));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: mm//bootmem.c:146:
+	BUG_ON(!size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#91: FILE: mm//bootmem.c:147:
+	BUG_ON(align & (align-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#91: FILE: mm//bootmem.c:147:
+	BUG_ON(align & (align-1));
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: mm//bootmem.c:184:
+	BUG_ON(start >= eidx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: mm//bootmem.c:194:
+		BUG_ON(offset > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: mm//bootmem.c:220:
+		BUG_ON(test_and_set_bit(i, bdata->node_bootmem_map));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#131: FILE: mm//bootmem.c:233:
+	BUG_ON(!bdata->node_bootmem_map);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#147: FILE: mm//filemap.c:117:
+	BUG_ON(PageDirty(page));

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#154: FILE: mm//filemap.c:648:
*mapping, unsigned long index)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#158: FILE: mm//filemap.c:650:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#168: FILE: mm//filemap.c:794:
+	BUG_ON(!test_and_clear_bit(PG_locked, &(page)->flags));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#178: FILE: mm//filemap.c:2096:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#195: FILE: mm//highmem.c:75:
+		BUG_ON(pte_none(pkmap_page_table[i]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: mm//highmem.c:156:
+	BUG_ON(pkmap_count[PKMAP_NR(vaddr)] < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#215: FILE: mm//highmem.c:169:
+	BUG_ON(!vaddr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: mm//highmem.c:212:
+	BUG_ON(!page_pool);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: mm//highmem.c:254:
+	BUG_ON(!isa_page_pool);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#263: FILE: mm//memory.c:374:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: mm//memory.c:522:
+	BUG_ON(!pgcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: mm//memory.c:769:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: mm//memory.c:850:
+	BUG_ON(from >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#304: FILE: mm//memory.c:1434:
+	BUG_ON(addr >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: mm//memory.c:1435:
+	BUG_ON(end > vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: mm//mempool.c:101:
+	BUG_ON(new_min_nr <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#332: FILE: mm//mempool.c:111:
+			BUG_ON(tmp == &pool->elements);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#342: FILE: mm//mempool.c:165:
+	BUG_ON(pool->curr_nr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#359: FILE: mm//mmap.c:238:
+	BUG_ON(bug);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#369: FILE: mm//mmap.c:707:
+			BUG_ON((rb_prev ? (*pprev)->vm_next : mm->mmap) != vma);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#379: FILE: mm//mmap.c:1137:
+	BUG_ON(mm->map_count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: mm//mmap.c:1152:
+	BUG_ON(__vma && __vma->vm_start < vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#399: FILE: mm//mmap.c:1164:
+	BUG_ON(__vma && __vma->vm_start < vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#416: FILE: mm//mprotect.c:82:
+	BUG_ON(start >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: mm//mremap.c:143:
+			BUG_ON(next != prev->vm_next);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: mm//page_alloc.c:73:
+	BUG_ON(page->buffers);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#464: FILE: mm//page_alloc.c:74:
+	BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: mm//page_alloc.c:75:
+	BUG_ON(!VALID_PAGE(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#466: FILE: mm//page_alloc.c:76:
+	BUG_ON(PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: mm//page_alloc.c:77:
+	BUG_ON(PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: mm//page_alloc.c:78:
+	BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: mm//page_alloc.c:79:
+	BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: mm//page_alloc.c:92:
+	BUG_ON(page_idx & ~mask);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: mm//page_alloc.c:104:
+		BUG_ON(area >= zone->free_area + MAX_ORDER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: mm//page_alloc.c:115:
+		BUG_ON(BAD_RANGE(zone,buddy1));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#502: FILE: mm//page_alloc.c:115:
+		BUG_ON(BAD_RANGE(zone,buddy1));
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: mm//page_alloc.c:116:
+		BUG_ON(BAD_RANGE(zone,buddy2));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: mm//page_alloc.c:116:
+		BUG_ON(BAD_RANGE(zone,buddy2));
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#513: FILE: mm//page_alloc.c:149:
+		BUG_ON(BAD_RANGE(zone,page));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: mm//page_alloc.c:149:
+		BUG_ON(BAD_RANGE(zone,page));
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#523: FILE: mm//page_alloc.c:158:
+	BUG_ON(BAD_RANGE(zone,page));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: mm//page_alloc.c:158:
+	BUG_ON(BAD_RANGE(zone,page));
 	                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: mm//page_alloc.c:180:
+			BUG_ON(BAD_RANGE(zone,page));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#533: FILE: mm//page_alloc.c:180:
+			BUG_ON(BAD_RANGE(zone,page));
 			                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#547: FILE: mm//page_alloc.c:191:
+			BUG_ON(BAD_RANGE(zone,page));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#547: FILE: mm//page_alloc.c:191:
+			BUG_ON(BAD_RANGE(zone,page));
 			                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#548: FILE: mm//page_alloc.c:192:
+			BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: mm//page_alloc.c:193:
+			BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#559: FILE: mm//page_alloc.c:220:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: mm//page_alloc.c:247:
+					BUG_ON(page->buffers);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#584: FILE: mm//page_alloc.c:248:
+					BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#585: FILE: mm//page_alloc.c:249:
+					BUG_ON(!VALID_PAGE(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#586: FILE: mm//page_alloc.c:250:
+					BUG_ON(PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: mm//page_alloc.c:251:
+					BUG_ON(PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#588: FILE: mm//page_alloc.c:252:
+					BUG_ON(PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#589: FILE: mm//page_alloc.c:253:
+					BUG_ON(PageActive(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#590: FILE: mm//page_alloc.c:254:
+					BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: mm//page_alloc.c:267:
+			BUG_ON(!nr_pages--);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#610: FILE: mm//page_alloc.c:619:
+	BUG_ON(zone_start_paddr & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#627: FILE: mm//shmem.c:294:
+		BUG_ON(max >= ENTRIES_PER_PAGE*ENTRIES_PER_PAGE*ENTRIES_PER_PAGE/2);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#627: FILE: mm//shmem.c:294:
+		BUG_ON(max >= ENTRIES_PER_PAGE*ENTRIES_PER_PAGE*ENTRIES_PER_PAGE/2);
 		                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#627: FILE: mm//shmem.c:294:
+		BUG_ON(max >= ENTRIES_PER_PAGE*ENTRIES_PER_PAGE*ENTRIES_PER_PAGE/2);
 		                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#627: FILE: mm//shmem.c:294:
+		BUG_ON(max >= ENTRIES_PER_PAGE*ENTRIES_PER_PAGE*ENTRIES_PER_PAGE/2);
 		                                                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#638: FILE: mm//shmem.c:428:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#648: FILE: mm//shmem.c:445:
+	BUG_ON(IS_ERR(entry));	/* this had been allocated on page allocation */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#652: FILE: mm//shmem.c:447:
+	BUG_ON(entry->val);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#669: FILE: mm//slab.c:426:
+	BUG_ON(!cache_cache.num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#678: FILE: mm//slab.c:453:
+		BUG_ON(!(sizes->cs_cachep =

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: mm//slab.c:465:
+		BUG_ON(!sizes->cs_dmacachep);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#706: FILE: mm//slab.c:564:
+				BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#706: FILE: mm//slab.c:564:
+				BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#707: FILE: mm//slab.c:565:
+				BUG_ON(*((unsigned long*)(objp + cachep->objsize

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#707: FILE: mm//slab.c:565:
+				BUG_ON(*((unsigned long*)(objp + cachep->objsize

CHECK:SPACING: spaces preferred around that '-' (ctx:ExV)
#708: FILE: mm//slab.c:566:
+						-BYTES_PER_WORD)) != RED_MAGIC1);
 						^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#719: FILE: mm//slab.c:576:
+			BUG_ON((cachep->flags & SLAB_POISON)  &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: mm//slab.c:577:
+			BUG_ON((cachep->flags & SLAB_POISON)  &&
+				kmem_check_poison_obj(cachep, objp));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#729: FILE: mm//slab.c:627:
+	BUG_ON((!name) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#730: FILE: mm//slab.c:628:
+	BUG_ON((!name) ||
 		((strlen(name) >= CACHE_NAMELEN - 1)) ||

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#747: FILE: mm//slab.c:663:
+	BUG_ON(flags & ~CREATE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: mm//slab.c:807:
+			BUG_ON(!strcmp(pc->name, name));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: mm//slab.c:857:
+	BUG_ON(smp_call_function(func, arg, 1, 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: mm//slab.c:924:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#787: FILE: mm//slab.c:946:
+	BUG_ON(!cachep || in_interrupt() || !is_chained_kmem_cache(cachep));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#797: FILE: mm//slab.c:968:
+	BUG_ON(!cachep || in_interrupt() || cachep->growing);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#810: FILE: mm//slab.c:1056:
+			BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#810: FILE: mm//slab.c:1056:
+			BUG_ON(*((unsigned long*)(objp)) != RED_MAGIC1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#811: FILE: mm//slab.c:1057:
+			BUG_ON(*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#811: FILE: mm//slab.c:1057:
+			BUG_ON(*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#822: FILE: mm//slab.c:1084:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#822: FILE: mm//slab.c:1084:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));
 	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#822: FILE: mm//slab.c:1084:
+	BUG_ON(flags & ~(SLAB_DMA|SLAB_LEVEL_MASK|SLAB_NO_GROW));
 	                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#832: FILE: mm//slab.c:1094:
+	BUG_ON(in_interrupt() && (flags & SLAB_LEVEL_MASK) != SLAB_ATOMIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#844: FILE: mm//slab.c:1181:
+	BUG_ON(objnr >= cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#845: FILE: mm//slab.c:1182:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#845: FILE: mm//slab.c:1182:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);
 	                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#851: FILE: mm//slab.c:1186:
+		BUG_ON(i == objnr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#861: FILE: mm//slab.c:1195:
+		BUG_ON(!(cachep->gfpflags & GFP_DMA));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#865: FILE: mm//slab.c:1197:
+		BUG_ON(cachep->gfpflags & GFP_DMA);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#875: FILE: mm//slab.c:1221:
+		BUG_ON(kmem_check_poison_obj(cachep, objp));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#884: FILE: mm//slab.c:1224:
+		BUG_ON(xchg((unsigned long *)objp, RED_MAGIC2) !=

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#886: FILE: mm//slab.c:1226:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#886: FILE: mm//slab.c:1226:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -
 		                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#914: FILE: mm//slab.c:1394:
+		BUG_ON(xchg((unsigned long *)objp, RED_MAGIC1) != RED_MAGIC2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#919: FILE: mm//slab.c:1396:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#919: FILE: mm//slab.c:1396:
+		BUG_ON(xchg((unsigned long *)(objp+cachep->objsize -
 		                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#932: FILE: mm//slab.c:1536:
+	BUG_ON(cachep != GET_PAGE_CACHE(virt_to_page(objp)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#942: FILE: mm//slab.c:1734:
+			BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#952: FILE: mm//slab.c:1786:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#962: FILE: mm//slab.c:1857:
+			BUG_ON(slabp->inuse != cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#970: FILE: mm//slab.c:1863:
+			BUG_ON(slabp->inuse == cachep->num || !slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#978: FILE: mm//slab.c:1869:
+			BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#995: FILE: mm//swap_state.c:72:
+	BUG_ON(page->mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1007: FILE: mm//swap_state.c:83:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1008: FILE: mm//swap_state.c:84:
+	BUG_ON(!PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1020: FILE: mm//swap_state.c:95:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1021: FILE: mm//swap_state.c:96:
+	BUG_ON(!PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1031: FILE: mm//swap_state.c:112:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1048: FILE: mm//swapfile.c:265:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1058: FILE: mm//swapfile.c:294:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1068: FILE: mm//swapfile.c:429:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1078: FILE: mm//swapfile.c:444:
+	BUG_ON(start >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1088: FILE: mm//swapfile.c:673:
+		BUG_ON((swcount > 0) != PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1121: FILE: mm//vmscan.c:238:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1133: FILE: mm//vmscan.c:357:
+		BUG_ON(!PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1134: FILE: mm//vmscan.c:358:
+		BUG_ON(PageActive(page));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485784.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 120 warnings, 12 checks, 919 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485784.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
