WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
> [This is an email copy of a Usenet post to "mailinglists.external.linux-kernel"]

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#	           ChangeSet	1.454   ->        

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#	  arch/ppc/config.in	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#	 arch/mips/config.in	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#	include/linux/sched.h	1.44    -> 1.45   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#	arch/arm/kernel/ptrace.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#	arch/sh/kernel/ptrace.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#	  arch/arm/config.in	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#	      kernel/sched.c	1.51    -> 1.53   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#	arch/ppc/kernel/ptrace.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#	arch/i386/kernel/ptrace.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
#	 arch/i386/config.in	1.27    -> 1.28   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
#	arch/arm/kernel/process.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
#	           fs/exec.c	1.22    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
#	arch/mips/kernel/process.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
#	     fs/binfmt_elf.c	1.18    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
#	arch/ppc/kernel/process.c	1.15    -> 1.16   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
#	arch/mips/kernel/ptrace.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
#	arch/i386/kernel/i387.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
#	   arch/sh/config.in	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
#	arch/sh/kernel/process.c	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#118: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
# 02/03/09	drow@nevyn.them.org	1.455

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
# Support for multithreaded core dumps.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
# 02/03/09	drow@nevyn.them.org	1.456

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
# Minor fixes for multihteaded core dumps.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#127: 
--- a/arch/arm/config.in	Sat Mar  9 16:10:39 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#145: FILE: arch/arm/kernel/process.c:336:
+int dump_task_fpu (struct pt_regs *regs, struct task_struct *tsk,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: arch/arm/kernel/process.c:337:
+int dump_task_fpu (struct pt_regs *regs, struct task_struct *tsk,
+	struct user_fp *fp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#159: FILE: arch/arm/kernel/process.c:348:
+int dump_fpu (struct pt_regs *regs, struct user_fp *fp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#172: FILE: arch/arm/kernel/ptrace.c:51:
+struct pt_regs *get_task_registers (struct task_struct *task)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#174: FILE: arch/arm/kernel/ptrace.c:53:
+	return get_user_regs (task);

ERROR:SPACING: space prohibited after that open parenthesis '('
#199: FILE: arch/i386/kernel/i387.c:491:
+int dump_task_fpu( struct pt_regs *regs, struct task_struct *tsk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: arch/i386/kernel/i387.c:492:
+int dump_task_fpu( struct pt_regs *regs, struct task_struct *tsk,
+		   struct user_i387_struct *fpu )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#200: FILE: arch/i386/kernel/i387.c:492:
+		   struct user_i387_struct *fpu )

ERROR:SPACING: space prohibited after that open parenthesis '('
#213: FILE: arch/i386/kernel/i387.c:509:
+int dump_fpu( struct pt_regs *regs, struct user_i387_struct *fpu )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#213: FILE: arch/i386/kernel/i387.c:509:
+int dump_fpu( struct pt_regs *regs, struct user_i387_struct *fpu )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: arch/i386/kernel/i387.c:511:
+	return dump_task_fpu (regs, current, fpu);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#226: FILE: arch/i386/kernel/ptrace.c:444:
+struct pt_regs *get_task_registers(struct task_struct* task)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: arch/mips/kernel/process.c:125:
+extern struct pt_regs *get_task_registers (struct task_struct *task);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#256: FILE: arch/mips/kernel/process.c:126:
+extern void save_fp(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#256: FILE: arch/mips/kernel/process.c:126:
+extern void save_fp(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: space required before the open parenthesis '('
#267: FILE: arch/mips/kernel/process.c:135:
+	if(!(mips_cpu.options & MIPS_CPU_FPU)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#275: FILE: arch/mips/kernel/process.c:143:
+			save_fp (task);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#289: FILE: arch/mips/kernel/process.c:154:
+	for (i = 0; i < 32; i++)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#294: FILE: arch/mips/kernel/process.c:159:
+		else
[...]
+		if (i & 1)

CHECK:SPACING: No space is necessary after a cast
#297: FILE: arch/mips/kernel/process.c:162:
+			tmp = (unsigned long) (fregs[(i & ~1)] >> 32);

CHECK:SPACING: No space is necessary after a cast
#299: FILE: arch/mips/kernel/process.c:164:
+			tmp = (unsigned long) (fregs[i] & 0xffffffff);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: arch/mips/kernel/process.c:180:
+	return dump_task_fpu (regs, current, r);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#327: FILE: arch/mips/kernel/ptrace.c:326:
+struct pt_regs *get_task_registers(struct task_struct* task)

CHECK:SPACING: No space is necessary after a cast
#331: FILE: arch/mips/kernel/ptrace.c:330:
+	regs = (struct pt_regs *) ((unsigned long) task +

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#357: FILE: arch/ppc/kernel/process.c:52:
+int dump_task_fpu(struct pt_regs *regs, struct task_struct *tsk,

WARNING:TYPO_SPELLING: 'fpr' may be misspelled - perhaps 'for'?
#375: FILE: arch/ppc/kernel/process.c:208:
+	memcpy(fpregs, &tsk->thread.fpr[0], sizeof(*fpregs));
 	                            ^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#389: FILE: arch/ppc/kernel/ptrace.c:353:
+struct pt_regs *get_task_registers(struct task_struct* task)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#432: FILE: arch/sh/kernel/process.c:195:
+	return dump_task_fpu (regs, current, fpu);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: arch/sh/kernel/ptrace.c:379:
+struct pt_regs *get_task_registers (struct task_struct *task)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#459: FILE: fs/binfmt_elf.c:49:
+extern int dump_task_fpu (struct pt_regs *, struct task_struct *, elf_fpregset_t *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#459: FILE: fs/binfmt_elf.c:49:
+extern int dump_task_fpu (struct pt_regs *, struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#459: FILE: fs/binfmt_elf.c:49:
+extern int dump_task_fpu (struct pt_regs *, struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#459: FILE: fs/binfmt_elf.c:49:
+extern int dump_task_fpu (struct pt_regs *, struct task_struct *, elf_fpregset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_fpregset_t *' should also have an identifier name
#459: FILE: fs/binfmt_elf.c:49:
+extern int dump_task_fpu (struct pt_regs *, struct task_struct *, elf_fpregset_t *);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#461: FILE: fs/binfmt_elf.c:51:
+extern struct pt_regs *get_task_registers(struct task_struct* task);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#461: FILE: fs/binfmt_elf.c:51:
+extern struct pt_regs *get_task_registers(struct task_struct* task);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#470: FILE: fs/binfmt_elf.c:964:
+^I^I^I^I struct memelfnote *note, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#481: FILE: fs/binfmt_elf.c:975:
+	prstatus->pr_info.si_signo = prstatus->pr_cursig = signr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: fs/binfmt_elf.c:994:
+^I * coredump arrangement, whatever that is.  If the regs are $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#504: FILE: fs/binfmt_elf.c:998:
+	if (regs == 0)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#504: FILE: fs/binfmt_elf.c:998:
+	if (regs == 0)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#505: FILE: fs/binfmt_elf.c:999:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#507: FILE: fs/binfmt_elf.c:1001:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#512: FILE: fs/binfmt_elf.c:1006:
+	if (sizeof(elf_gregset_t) != sizeof(struct pt_regs))
+	{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#514: FILE: fs/binfmt_elf.c:1008:
+		printk("sizeof(elf_gregset_t) (%ld) != sizeof(struct pt_regs) (%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: fs/binfmt_elf.c:1009:
+		printk("sizeof(elf_gregset_t) (%ld) != sizeof(struct pt_regs) (%ld)\n",
+			(long)sizeof(elf_gregset_t), (long)sizeof(struct pt_regs));

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#517: FILE: fs/binfmt_elf.c:1011:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#566: FILE: fs/binfmt_elf.c:1093:
+        /* Count the total number of tasks */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: fs/binfmt_elf.c:1097:
+^I        if (p->mm == current->mm) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#570: FILE: fs/binfmt_elf.c:1097:
+	        if (p->mm == current->mm) {
+			n_pids++;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#579: FILE: fs/binfmt_elf.c:1104:
+	printk("Multithreaded core dump with %d threads.\n", n_pids);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#580: FILE: fs/binfmt_elf.c:1105:
+	printk("[%d]", current->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: fs/binfmt_elf.c:1112:
+^Inotes = (struct memelfnote *)kmalloc(sizeof(struct memelfnote) * $

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#587: FILE: fs/binfmt_elf.c:1112:
+	notes = (struct memelfnote *)kmalloc(sizeof(struct memelfnote) * 

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*notes)...) over kmalloc(sizeof(struct memelfnote)...)
#587: FILE: fs/binfmt_elf.c:1112:
+	notes = (struct memelfnote *)kmalloc(sizeof(struct memelfnote) * 

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#594: FILE: fs/binfmt_elf.c:1119:
+	prstatus = (struct elf_prstatus *)kmalloc(sizeof(struct elf_prstatus) *

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*prstatus)...) over kmalloc(sizeof(struct elf_prstatus)...)
#594: FILE: fs/binfmt_elf.c:1119:
+	prstatus = (struct elf_prstatus *)kmalloc(sizeof(struct elf_prstatus) *

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#594: FILE: fs/binfmt_elf.c:1119:
+	prstatus = (struct elf_prstatus *)kmalloc(sizeof(struct elf_prstatus) *
+						  n_pids, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#600: FILE: fs/binfmt_elf.c:1125:
+	fpu = (elf_fpregset_t *)kmalloc(sizeof(elf_fpregset_t)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#600: FILE: fs/binfmt_elf.c:1125:
+	fpu = (elf_fpregset_t *)kmalloc(sizeof(elf_fpregset_t)
+					       * n_pids, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#660: FILE: fs/binfmt_elf.c:1203:
+	prstatus[0].pr_fpvalid = dump_fpu (regs, &fpu[0]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#661: FILE: fs/binfmt_elf.c:1204:
+	if (!prstatus[0].pr_fpvalid)
 	{
 		numnote--;
 	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#683: FILE: fs/binfmt_elf.c:1223:
+			printk (KERN_ERR " Task forked under us!");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#683: FILE: fs/binfmt_elf.c:1223:
+			printk (KERN_ERR " Task forked under us!");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: fs/binfmt_elf.c:1224:
+			BUG ();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#684: FILE: fs/binfmt_elf.c:1224:
+			BUG ();

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: fs/binfmt_elf.c:1227:
+^I        if (p->mm == current->mm && p != current) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: fs/binfmt_elf.c:1229:
+^I^I        printk("[%d]", p->pid);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#689: FILE: fs/binfmt_elf.c:1229:
+		        printk("[%d]", p->pid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: fs/binfmt_elf.c:1231:
+^I^I        create_prstatus_note(p, 0, &notes[note],$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#694: FILE: fs/binfmt_elf.c:1234:
+			prstatus[prcount].pr_fpvalid
+				= dump_task_fpu (get_task_registers (p), p, &fpu[prcount]);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#694: FILE: fs/binfmt_elf.c:1234:
+				= dump_task_fpu (get_task_registers (p), p, &fpu[prcount]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#694: FILE: fs/binfmt_elf.c:1234:
+				= dump_task_fpu (get_task_registers (p), p, &fpu[prcount]);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#697: FILE: fs/binfmt_elf.c:1237:
+			if (prstatus[prcount].pr_fpvalid)
+			{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#712: FILE: fs/binfmt_elf.c:1252:
+	printk("\n");

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#730: FILE: fs/binfmt_elf.c:1357:
+	if (notes)
+		kfree(notes);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#732: FILE: fs/binfmt_elf.c:1359:
+	if (prstatus)
+		kfree(prstatus);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#734: FILE: fs/binfmt_elf.c:1361:
+	if (fpu)
+		kfree(fpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: fs/exec.c:961:
+  ^Iif (core_uses_pid || atomic_read(&current->mm->mm_users) != 1)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#748: FILE: fs/exec.c:961:
+  ^Iif (core_uses_pid || atomic_read(&current->mm->mm_users) != 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: fs/exec.c:961:
+  ^Iif (core_uses_pid || atomic_read(&current->mm->mm_users) != 1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: fs/exec.c:964:
+  ^Iif (core_uses_pid)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#751: FILE: fs/exec.c:964:
+  ^Iif (core_uses_pid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: fs/exec.c:964:
+  ^Iif (core_uses_pid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: fs/exec.c:965:
+ ^I^Isprintf(&corename[4], ".%d", current->pid);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#752: FILE: fs/exec.c:965:
+ ^I^Isprintf(&corename[4], ".%d", current->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: fs/exec.c:965:
+ ^I^Isprintf(&corename[4], ".%d", current->pid);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#764: FILE: fs/exec.c:988:
+	/* Stop our siblings.  We have the kernel lock, but schedule() will
+	   nicely release it for us.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#764: FILE: fs/exec.c:988:
+	   nicely release it for us.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#765: FILE: fs/exec.c:989:
+	if (stop_all_threads (current->mm) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->mm'
#765: FILE: fs/exec.c:989:
+	if (stop_all_threads (current->mm) != 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#771: FILE: fs/exec.c:995:
+	start_all_threads (current->mm);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#784: FILE: include/linux/sched.h:657:
+/* Used by core dumps to make sure all the threads the core is taken for
+   are not running.  This just sends SIGSTOP to all the threads.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#784: FILE: include/linux/sched.h:657:
+   are not running.  This just sends SIGSTOP to all the threads.  */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#785: FILE: include/linux/sched.h:658:
+extern int stop_all_threads(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#786: FILE: include/linux/sched.h:659:
+extern void start_all_threads(struct mm_struct *mm);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#802: FILE: kernel/sched.c:741:
+	struct task_struct * p;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#807: FILE: kernel/sched.c:746:
+		if (p->mm == mm && p != current && p->state != TASK_STOPPED) {
+			send_sig (SIGSTOP, p, 1);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#808: FILE: kernel/sched.c:747:
+			send_sig (SIGSTOP, p, 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#814: FILE: kernel/sched.c:753:
+	/* Beware: this loop might not terminate in the face of a malicious
+	   program sending SIGCONT to threads.  But it is still killable, and

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#815: FILE: kernel/sched.c:754:
+	   only moderately disruptive (because of the tasklist_lock).  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#833: FILE: kernel/sched.c:772:
+	for_each_task (p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#835: FILE: kernel/sched.c:774:
+			wait_task_inactive (p);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#843: FILE: kernel/sched.c:782:
+/* Restart all the tasks with the given mm.  Hope none of them were in state
+   TASK_STOPPED for some other reason...  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#843: FILE: kernel/sched.c:782:
+   TASK_STOPPED for some other reason...  */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#846: FILE: kernel/sched.c:785:
+	struct task_struct * p;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#850: FILE: kernel/sched.c:789:
+		if (p->mm == mm && p != current) {
+			send_sig (SIGCONT, p, 1);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#851: FILE: kernel/sched.c:790:
+			send_sig (SIGCONT, p, 1);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000471185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 103 warnings, 13 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000471185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
