WARNING:SPACING: space prohibited between function name and open parenthesis '('
#55: FILE: drivers/ata/libata-scsi.c:306:
+static void ide_fixstring (u8 *s, const int bytecount)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#63: FILE: drivers/ata/libata-scsi.c:314:
+		unsigned short *pp = (unsigned short *) (p -= 2);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#76: FILE: drivers/ata/libata-scsi.c:327:
+			*p++ = *(s-1);
 			          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#83: FILE: drivers/ata/libata-scsi.c:334:
+static void ide_fix_driveid (struct hd_driveid *id)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#101: FILE: drivers/ata/libata-scsi.c:352:
+	for (i = 0; i < (20/2); i++)
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#107: FILE: drivers/ata/libata-scsi.c:358:
+	for (i = 0; i < (8/2); i++)
 	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#110: FILE: drivers/ata/libata-scsi.c:361:
+	for (i = 0; i < (40/2); i++)
 	                   ^

CHECK:CAMELCASE: Avoid CamelCase: <trsEuc>
#145: FILE: drivers/ata/libata-scsi.c:396:
+	id->trsEuc         = __le16_to_cpu(id->trsEuc);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <CurAPMvalues>
#146: FILE: drivers/ata/libata-scsi.c:397:
+	id->CurAPMvalues   = __le16_to_cpu(id->CurAPMvalues);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#205: FILE: drivers/ata/libata-scsi.c:456:
+	scsi_cmd[2]  = 0x0e;     /* no off.line or cc, read from dev,
+				    block count in sector count field */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#205: FILE: drivers/ata/libata-scsi.c:456:
+				    block count in sector count field */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#209: FILE: drivers/ata/libata-scsi.c:460:
+	/* Good values for timeout and retries?  Values below
+	   from scsi_ioctl_send_command() for default case... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#209: FILE: drivers/ata/libata-scsi.c:460:
+	   from scsi_ioctl_send_command() for default case... */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/ata/libata-scsi.c:462:
+	if (scsi_execute_req(scsidev, scsi_cmd, DMA_FROM_DEVICE,
+				argbuf, SECTOR_SIZE, &sshdr, (10*HZ), 5))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: drivers/ata/libata-scsi.c:462:
+				argbuf, SECTOR_SIZE, &sshdr, (10*HZ), 5))
 				                                ^

CHECK:SPACING: No space is necessary after a cast
#215: FILE: drivers/ata/libata-scsi.c:466:
+	id = (struct hd_driveid *) argbuf;

CHECK:SPACING: No space is necessary after a cast
#239: FILE: drivers/ata/libata-scsi.c:510:
+			ap = (struct ata_port *) &scsidev->host->hostdata[0];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#248: FILE: drivers/ata/libata-scsi.c:519:
+			if (NULL == (void *)argbuf) {
+				return -ENOMEM;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#253: FILE: drivers/ata/libata-scsi.c:524:
+			if (!atapi_enabled && dev->class == ATA_DEV_ATAPI) {
+				idcmd = WIN_PIDENTIFY;
+			}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#257: FILE: drivers/ata/libata-scsi.c:528:
+			if (ret!=0 || copy_to_user((char *)arg, (char *)argbuf,
+					(cmd == HDIO_GET_IDENTITY) ?
+					sizeof(struct hd_driveid) : 142))
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#257: FILE: drivers/ata/libata-scsi.c:528:
+			if (ret!=0 || copy_to_user((char *)arg, (char *)argbuf,
 			       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == HDIO_GET_IDENTITY'
#257: FILE: drivers/ata/libata-scsi.c:528:
+			if (ret!=0 || copy_to_user((char *)arg, (char *)argbuf,
+					(cmd == HDIO_GET_IDENTITY) ?
+					sizeof(struct hd_driveid) : 142))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: drivers/ata/libata-scsi.c:529:
+			if (ret!=0 || copy_to_user((char *)arg, (char *)argbuf,
+					(cmd == HDIO_GET_IDENTITY) ?

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000009122.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 8 warnings, 13 checks, 217 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000009122.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
