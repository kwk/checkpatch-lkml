WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:BRACES: Unbalanced braces around else statement
#86: FILE: mm/page_alloc.c:197:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#96: FILE: mm/page_alloc.c:218:
+		if (PageBooked(buddy1) != PageBooked(buddy2)) {
+			break;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: mm/page_alloc.c:595:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#142: FILE: mm/page_alloc.c:604:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#142: FILE: mm/page_alloc.c:604:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#142: FILE: mm/page_alloc.c:604:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#142: FILE: mm/page_alloc.c:604:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#142: FILE: mm/page_alloc.c:604:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#142: FILE: mm/page_alloc.c:604:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#142: FILE: mm/page_alloc.c:604:
+	    !(page->flags & (1<<PG_reserved|1<<PG_compound|1<<PG_booked|1<<PG_slab));
 	                                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#148: FILE: mm/page_alloc.c:610:
+		page->mapping != NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#150: FILE: mm/page_alloc.c:612:
+		(page->flags & (

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#151: FILE: mm/page_alloc.c:613:
+			1 << PG_reserved|
 			                ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#152: FILE: mm/page_alloc.c:614:
+			1 << PG_compound|
 			                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#161: FILE: mm/page_alloc.c:623:
+			1 << PG_writeback )));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#173: FILE: mm/page_alloc.c:635:
+	for (p = page; p < &page[1<<order]; p++) {
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#187: FILE: mm/page_alloc.c:649:
+	for (p--; p >= page; p--) {
+		ClearPageBooked(p);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: mm/page_alloc.c:657:
+ * Mark PG_booked on all pages in a specified section to reserve $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#201: FILE: mm/page_alloc.c:663:
+	unsigned long	num = 1<<order;
 	             	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: mm/page_alloc.c:666:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: mm/page_alloc.c:686:
+	struct page	*p;
+	for (p = page; p < &page[1<<order]; p++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#224: FILE: mm/page_alloc.c:686:
+	for (p = page; p < &page[1<<order]; p++) {
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#224: FILE: mm/page_alloc.c:686:
+	for (p = page; p < &page[1<<order]; p++) {
+		ClearPageBooked(p);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#249: FILE: mm/page_alloc.c:711:
+		if (!PageBooked(page)) {
+			printk(KERN_ERR "ERROR sweepout_pages: page:%p isn't booked.\n", page);
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#250: FILE: mm/page_alloc.c:712:
+			printk(KERN_ERR "ERROR sweepout_pages: page:%p isn't booked.\n", page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!steal_page_from_lru"
#252: FILE: mm/page_alloc.c:714:
+		if (!PageLRU(page) || steal_page_from_lru(zone, page) == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: mm/page_alloc.c:726:
+ * sweepout_pages() might not work well as the booked pages $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#274: FILE: mm/page_alloc.c:736:
+	on_each_cpu((void (*)(void*))drain_local_pages, NULL, 1, 1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#282: FILE: mm/page_alloc.c:744:
+		schedule_timeout(HZ/4);
 		                   ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#287: FILE: mm/page_alloc.c:749:
+	on_each_cpu((void (*)(void*))drain_local_pages, NULL, 1, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: mm/page_alloc.c:759:
+force_alloc_pages(unsigned int gfp_mask, unsigned int order,
+			struct zonelist *zonelist)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zones[i]"
#310: FILE: mm/page_alloc.c:772:
+	for (i = 0; zones[i] != NULL; i++) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#317: FILE: mm/page_alloc.c:779:
+			ret = sweepout_pages(zone, page, 1<<order);
 			                                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000267937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 7 warnings, 20 checks, 365 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000267937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
