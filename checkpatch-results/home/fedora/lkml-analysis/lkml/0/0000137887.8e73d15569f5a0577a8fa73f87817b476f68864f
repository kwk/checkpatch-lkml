CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pa)...) over kzalloc(sizeof(struct platform_object)...)
#97: FILE: drivers/base/platform.c:160:
+	pa = kzalloc(sizeof(struct platform_object) + strlen(name), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: drivers/base/platform.c:169:
+^Ireturn pa ? &pa->pdev : NULL;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#120: FILE: drivers/base/platform.c:183:
+int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*r)...) over kmalloc(sizeof(struct resource)...)
#124: FILE: drivers/base/platform.c:187:
+	r = kmalloc(sizeof(struct resource) * num, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#124: FILE: drivers/base/platform.c:187:
+	r = kmalloc(sizeof(struct resource) * num, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: drivers/base/platform.c:287:
+int platform_device_register(struct platform_device * pdev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/platform_device.h:40:
+extern struct platform_device *platform_device_alloc(const char *name, unsigned int id);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#258: FILE: include/linux/platform_device.h:41:
+extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/platform_device.h:41:
+extern int platform_device_add_resources(struct platform_device *pdev, struct resource *res, unsigned int num);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/linux/platform_device.h:42:
+extern int platform_device_add_data(struct platform_device *pdev, void *data, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/platform_device.h:43:
+extern int platform_device_add(struct platform_device *pdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/linux/platform_device.h:44:
+extern void platform_device_put(struct platform_device *pdev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 3 warnings, 7 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
