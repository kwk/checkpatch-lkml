WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH 24/28] UML - sparse annotations

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:SPACING: No space is necessary after a cast
#59: FILE: arch/um/drivers/ubd_kern.c:1090:
+	struct hd_geometry __user *loc = (struct hd_geometry __user *) arg;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: arch/um/drivers/ubd_kern.c:1111:
+^I^Iif(copy_to_user((char __user *) arg, (char *) &ubd_id, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#68: FILE: arch/um/drivers/ubd_kern.c:1111:
+		if(copy_to_user((char __user *) arg, (char *) &ubd_id, 

ERROR:SPACING: space required before the open parenthesis '('
#68: FILE: arch/um/drivers/ubd_kern.c:1111:
+		if(copy_to_user((char __user *) arg, (char *) &ubd_id, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#69: FILE: arch/um/drivers/ubd_kern.c:1112:
+		if(copy_to_user((char __user *) arg, (char *) &ubd_id, 
 				 sizeof(ubd_id)))

CHECK:SPACING: No space is necessary after a cast
#75: FILE: arch/um/drivers/ubd_kern.c:1117:
+		if(copy_from_user(&volume, (char __user *) arg, sizeof(volume)))

ERROR:SPACING: space required before the open parenthesis '('
#75: FILE: arch/um/drivers/ubd_kern.c:1117:
+		if(copy_from_user(&volume, (char __user *) arg, sizeof(volume)))

CHECK:SPACING: No space is necessary after a cast
#82: FILE: arch/um/drivers/ubd_kern.c:1123:
+		if(copy_to_user((char __user *) arg, &volume, sizeof(volume)))

ERROR:SPACING: space required before the open parenthesis '('
#82: FILE: arch/um/drivers/ubd_kern.c:1123:
+		if(copy_to_user((char __user *) arg, &volume, sizeof(volume)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: arch/um/include/um_uaccess.h:26:
+	return (CHOOSE_MODE_PROC(verify_area_tt, verify_area_skas, type, addr,
 				size));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: arch/um/kernel/checksum.c:14:
+unsigned int csum_partial_copy_to(const char *src, char __user *dst, int len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: arch/um/kernel/checksum.c:25:
+unsigned int csum_partial_copy_from(const char __user *src, char *dst, int len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/um/kernel/exec_kern.c:37:
+static long execve1(char *file, char __user * __user *argv, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: arch/um/kernel/exec_kern.c:65:
+long sys_execve(char *file, char __user *__user *argv, $

CHECK:SPACING: No space is necessary after a cast
#233: FILE: arch/um/kernel/exec_kern.c:72:
+	filename = getname((char __user *) file);

CHECK:SPACING: No space is necessary after a cast
#288: FILE: arch/um/kernel/mem.c:238:
+		if(__do_copy_to_user((void __user *) addr, &zero,

ERROR:SPACING: space required before the open parenthesis '('
#288: FILE: arch/um/kernel/mem.c:238:
+		if(__do_copy_to_user((void __user *) addr, &zero,

CHECK:SPACING: No space is necessary after a cast
#332: FILE: arch/um/kernel/ptrace.c:84:
+		ret = put_user(tmp, (unsigned long __user *) data);

CHECK:SPACING: No space is necessary after a cast
#341: FILE: arch/um/kernel/ptrace.c:106:
+		ret = put_user(tmp, (unsigned long __user *) data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: arch/um/kernel/ptrace.c:204:
+^I^I^I__put_user(getreg(child, i), $

CHECK:SPACING: No space is necessary after a cast
#351: FILE: arch/um/kernel/ptrace.c:205:
+				   (unsigned long __user *) data);

CHECK:SPACING: No space is necessary after a cast
#360: FILE: arch/um/kernel/ptrace.c:221:
+			__get_user(tmp, (unsigned long __user *) data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: arch/um/kernel/ptrace.c:255:
+^I^Iret = copy_to_user((unsigned long __user *) data, &fault, $

CHECK:SPACING: No space is necessary after a cast
#369: FILE: arch/um/kernel/ptrace.c:255:
+		ret = copy_to_user((unsigned long __user *) data, &fault, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: arch/um/kernel/ptrace.c:262:
+^I^Iret = copy_to_user((unsigned long __user *) data, $

CHECK:SPACING: No space is necessary after a cast
#377: FILE: arch/um/kernel/ptrace.c:262:
+		ret = copy_to_user((unsigned long __user *) data, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: arch/um/kernel/ptrace.c:270:
+^I^Iif(copy_from_user(&ldt, (unsigned long __user *) data, $

CHECK:SPACING: No space is necessary after a cast
#386: FILE: arch/um/kernel/ptrace.c:270:
+		if(copy_from_user(&ldt, (unsigned long __user *) data, 

ERROR:SPACING: space required before the open parenthesis '('
#386: FILE: arch/um/kernel/ptrace.c:270:
+		if(copy_from_user(&ldt, (unsigned long __user *) data, 

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#416: FILE: arch/um/kernel/skas/uaccess.c:138:
+		memcpy(to, (__force void*)from, n);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#429: FILE: arch/um/kernel/skas/uaccess.c:159:
+		memcpy((__force void*)to, from, n);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#445: FILE: arch/um/kernel/skas/uaccess.c:188:
+		strncpy(dst, (__force void*)src, count);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#464: FILE: arch/um/kernel/skas/uaccess.c:216:
+		memset((__force void*)mem, 0, len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#479: FILE: arch/um/kernel/skas/uaccess.c:241:
+		return(strnlen((__force char*)str, len) + 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#493: FILE: arch/um/kernel/syscall_kern.c:30:
+long um_mount(char __user * dev_name, char __user * dir_name, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: arch/um/kernel/syscall_kern.c:30:
+long um_mount(char __user * dev_name, char __user * dir_name, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: arch/um/kernel/syscall_kern.c:30:
+long um_mount(char __user * dev_name, char __user * dir_name, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#494: FILE: arch/um/kernel/syscall_kern.c:31:
+	      char __user * type, unsigned long new_flags, void __user * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#494: FILE: arch/um/kernel/syscall_kern.c:31:
+	      char __user * type, unsigned long new_flags, void __user * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: arch/um/kernel/syscall_kern.c:98:
+long sys_pipe(unsigned long __user * fildes)

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: arch/um/kernel/time_kern.c:120:
+ ^I^Iif (put_user(now.tv_sec, tloc))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#525: FILE: arch/um/kernel/time_kern.c:120:
+ ^I^Iif (put_user(now.tv_sec, tloc))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: arch/um/kernel/time_kern.c:120:
+ ^I^Iif (put_user(now.tv_sec, tloc))$

CHECK:SPACING: No space is necessary after a cast
#649: FILE: arch/um/sys-i386/ptrace.c:27:
+	n = copy_from_user(&instr, (void __user *) addr, sizeof(instr));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: arch/um/sys-i386/ptrace.c:258:
+^Ierr = convert_fxsr_to_user((struct _fpstate __user *) buf, $

CHECK:SPACING: No space is necessary after a cast
#706: FILE: arch/um/sys-i386/ptrace.c:258:
+	err = convert_fxsr_to_user((struct _fpstate __user *) buf, 

CHECK:SPACING: No space is necessary after a cast
#715: FILE: arch/um/sys-i386/ptrace.c:269:
+				     (struct _fpstate __user *) buf);

CHECK:SPACING: No space is necessary after a cast
#724: FILE: arch/um/sys-i386/ptrace.c:281:
+	err = __copy_to_user((void __user *) buf, fxsave,

CHECK:SPACING: No space is necessary after a cast
#733: FILE: arch/um/sys-i386/ptrace.c:300:
+	err = __copy_from_user(fxsave, (void __user *) buf,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: arch/um/sys-i386/syscalls.c:67:
+long sys_clone(unsigned long clone_flags, unsigned long newsp, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#836: FILE: include/asm-um/uaccess.h:58:
+        const __typeof__((*(ptr))) __user *private_ptr = (ptr); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: include/asm-um/uaccess.h:58:
+        const __typeof__((*(ptr))) __user *private_ptr = (ptr); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#845: FILE: include/asm-um/uaccess.h:78:
+        __typeof__(*(ptr)) __user *private_ptr = (ptr); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: include/asm-um/uaccess.h:78:
+        __typeof__(*(ptr)) __user *private_ptr = (ptr); \$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 5 warnings, 20 checks, 667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
