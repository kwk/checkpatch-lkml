WARNING:TYPO_SPELLING: 'apropriate' may be misspelled - perhaps 'appropriate'?
#71: 
     page walker API, where apropriate.
                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#95: 
Science is what we can tell a computer. Art is everything else. --- D.E.Knuth

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#109: FILE: kernel/ksyms.c:138:
+EXPORT_SYMBOL_GPL(walk_user_pages);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: include/linux/mm.h:401:
+typedef int (*custom_page_walker_t)(struct vm_area_struct *vma, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: include/linux/mm.h:406:
+struct page *get_one_user_page(struct task_struct *tsk, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/linux/mm.h:407:
+struct page *get_one_user_page(struct task_struct *tsk, 
+		struct mm_struct *mm, struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: include/linux/mm.h:411:
+int walk_user_pages(struct task_struct *tsk, struct mm_struct *mm,
+		unsigned long start, int write, int force,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: include/linux/mm.h:414:
+int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: include/linux/mm.h:415:
+^I^Iunsigned long start, int len, int write, int force, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/linux/mm.h:415:
+int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, 
+		unsigned long start, int len, int write, int force, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: mm/memory.c:38:
+/* 04.11.02  -  Page walker API added by Ingo Oeser $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: mm/memory.c:39:
+ * ^I^I<ioe@informatik.tu-chemnitz.de>$

WARNING:TYPO_SPELLING: 'intial' may be misspelled - perhaps 'initial'?
#175: FILE: mm/memory.c:40:
+ * 		Thanks go to Andrew Morton for his intial idea and general help.
    		                                   ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: mm/memory.c:40:
+ * ^I^IThanks go to Andrew Morton for his intial idea and general help.$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#206: FILE: mm/memory.c:540:
+	while (gup->count--) {
+		page_cache_release(gup->pages[gup->count]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: mm/memory.c:547:
+static int gup_add_pages(struct vm_area_struct *vma, struct page *page,
+	      unsigned long virt_addr, void *customdata)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#215: FILE: mm/memory.c:549:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#218: FILE: mm/memory.c:552:
+	BUG_ON(!customdata);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#250: FILE: mm/memory.c:584:
+	while (gup->page_count--) {
+		page_cache_release(gup->pages[gup->page_count]);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: mm/memory.c:591:
+static int gup_add_pv(struct vm_area_struct *vma, struct page *page,
+	   unsigned long virt_addr, void *customdata)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#259: FILE: mm/memory.c:593:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#263: FILE: mm/memory.c:597:
+	BUG_ON(!customdata);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: mm/memory.c:602:
+^I^I^I * uniquely, this simple check is enough. -ioe $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#271: FILE: mm/memory.c:605:
+			if (!gup->vma_count
+			    || gup->vmas[gup->vma_count - 1] != vma) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: mm/memory.c:636:
+ * called with mm->page_table_lock held $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#332: FILE: mm/memory.c:666:
+			BUG();

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#339: FILE: mm/memory.c:673:
+ * (e.g. find_vma_extend(mm,start) has been called sucessfully already 
                                                    ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: mm/memory.c:673:
+ * (e.g. find_vma_extend(mm,start) has been called sucessfully already $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: mm/memory.c:676:
+struct page *get_one_user_page(struct task_struct *tsk,
+			   struct mm_struct *mm, struct vm_area_struct *vma,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: mm/memory.c:682:
+^I/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#360: FILE: mm/memory.c:694:
+	/*
+	   if (is_vm_hugetlb_page(vma)) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: mm/memory.c:719:
+int walk_user_pages(struct task_struct *tsk, struct mm_struct *mm,
+		unsigned long start, int write, int force,

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: mm/memory.c:736:
+ ^I^Iif (!vma || (vma->vm_flags & VM_IO)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: mm/memory.c:736:
+ ^I^Iif (!vma || (vma->vm_flags & VM_IO)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: mm/memory.c:736:
+ ^I^Iif (!vma || (vma->vm_flags & VM_IO)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: mm/memory.c:737:
+ ^I^I    || !(flags & vma->vm_flags))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#454: FILE: mm/memory.c:737:
+ ^I^I    || !(flags & vma->vm_flags))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#454: FILE: mm/memory.c:737:
+ 		if (!vma || (vma->vm_flags & VM_IO)
+ 		    || !(flags & vma->vm_flags))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: mm/memory.c:737:
+ ^I^I    || !(flags & vma->vm_flags))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: mm/memory.c:738:
+ ^I^I^Ireturn walker(ERR_PTR(EFAULT), ERR_PTR(EFAULT), start,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#455: FILE: mm/memory.c:738:
+ ^I^I^Ireturn walker(ERR_PTR(EFAULT), ERR_PTR(EFAULT), start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: mm/memory.c:738:
+ ^I^I^Ireturn walker(ERR_PTR(EFAULT), ERR_PTR(EFAULT), start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: mm/memory.c:739:
+ ^I^I^I^I      customdata);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#456: FILE: mm/memory.c:739:
+ ^I^I^I^I      customdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: mm/memory.c:739:
+ ^I^I^I^I      customdata);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: mm/memory.c:740:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: mm/memory.c:740:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: mm/memory.c:741:
+ ^I^I/* FIXME: These are not handled, yet. -ioe */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#458: FILE: mm/memory.c:741:
+ ^I^I/* FIXME: These are not handled, yet. -ioe */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: mm/memory.c:741:
+ ^I^I/* FIXME: These are not handled, yet. -ioe */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: mm/memory.c:742:
+ ^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#459: FILE: mm/memory.c:742:
+ ^I^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: mm/memory.c:742:
+ ^I^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: mm/memory.c:743:
+ ^I^I   if (is_vm_hugetlb_page(vma)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#460: FILE: mm/memory.c:743:
+ ^I^I   if (is_vm_hugetlb_page(vma)) {$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#460: FILE: mm/memory.c:743:
+ 		/*
+ 		   if (is_vm_hugetlb_page(vma)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: mm/memory.c:744:
+ ^I^I   int i=0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: mm/memory.c:744:
+ ^I^I   int i=0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: mm/memory.c:745:
+ ^I^I   i = follow_hugetlb_page(mm, vma, pages, vmas,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#462: FILE: mm/memory.c:745:
+ ^I^I   i = follow_hugetlb_page(mm, vma, pages, vmas,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: mm/memory.c:746:
+ ^I^I   &start, &len, i);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#463: FILE: mm/memory.c:746:
+ ^I^I   &start, &len, i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: mm/memory.c:747:
+ ^I^I   continue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#464: FILE: mm/memory.c:747:
+ ^I^I   continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: mm/memory.c:748:
+ ^I^I   }$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: mm/memory.c:748:
+ ^I^I   }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: mm/memory.c:749:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#466: FILE: mm/memory.c:749:
+ ^I^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: mm/memory.c:750:
+  ^I^Ispin_lock(&mm->page_table_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#467: FILE: mm/memory.c:750:
+  ^I^Ispin_lock(&mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: mm/memory.c:750:
+  ^I^Ispin_lock(&mm->page_table_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: mm/memory.c:751:
+  ^I^Ido {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#468: FILE: mm/memory.c:751:
+  ^I^Ido {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: mm/memory.c:751:
+  ^I^Ido {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: mm/memory.c:753:
+ ^I^I^Istruct page *page;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#470: FILE: mm/memory.c:753:
+ ^I^I^Istruct page *page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: mm/memory.c:753:
+ ^I^I^Istruct page *page;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: mm/memory.c:754:
+ ^I^I^Ipage = single_page_walk(tsk, mm, vma, start, write);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#471: FILE: mm/memory.c:754:
+ ^I^I^Ipage = single_page_walk(tsk, mm, vma, start, write);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#471: FILE: mm/memory.c:754:
+ 			struct page *page;
+ 			page = single_page_walk(tsk, mm, vma, start, write);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: mm/memory.c:754:
+ ^I^I^Ipage = single_page_walk(tsk, mm, vma, start, write);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: mm/memory.c:755:
+ ^I^I^Iret = walker(vma, page, start, customdata);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#472: FILE: mm/memory.c:755:
+ ^I^I^Iret = walker(vma, page, start, customdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: mm/memory.c:755:
+ ^I^I^Iret = walker(vma, page, start, customdata);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: mm/memory.c:756:
+ ^I^I^Iswitch (ret) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#473: FILE: mm/memory.c:756:
+ ^I^I^Iswitch (ret) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: mm/memory.c:756:
+ ^I^I^Iswitch (ret) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: mm/memory.c:757:
+ ^I^I^I^I/* Common case -> continue walking. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: mm/memory.c:757:
+ ^I^I^I^I/* Common case -> continue walking. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: mm/memory.c:757:
+ ^I^I^I^I/* Common case -> continue walking. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: mm/memory.c:758:
+ ^I^I^Icase 0:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#475: FILE: mm/memory.c:758:
+ ^I^I^Icase 0:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: mm/memory.c:758:
+ ^I^I^Icase 0:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: mm/memory.c:759:
+ ^I^I^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#476: FILE: mm/memory.c:759:
+ ^I^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: mm/memory.c:759:
+ ^I^I^I^Ibreak;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: mm/memory.c:760:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: mm/memory.c:760:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: mm/memory.c:761:
+ ^I^I^I^I/* We are satisfied with our walking. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: mm/memory.c:761:
+ ^I^I^I^I/* We are satisfied with our walking. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: mm/memory.c:761:
+ ^I^I^I^I/* We are satisfied with our walking. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: mm/memory.c:762:
+ ^I^I^Icase 1:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: mm/memory.c:762:
+ ^I^I^Icase 1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: mm/memory.c:762:
+ ^I^I^Icase 1:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: mm/memory.c:763:
+ ^I^I^I^Iret = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: mm/memory.c:763:
+ ^I^I^I^Iret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: mm/memory.c:763:
+ ^I^I^I^Iret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: mm/memory.c:764:
+  ^I^I^I^Ispin_unlock(&mm->page_table_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#481: FILE: mm/memory.c:764:
+  ^I^I^I^Ispin_unlock(&mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: mm/memory.c:764:
+  ^I^I^I^Ispin_unlock(&mm->page_table_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: mm/memory.c:765:
+ ^I^I^I^I/* Fall trough now */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#482: FILE: mm/memory.c:765:
+ ^I^I^I^I/* Fall trough now */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: mm/memory.c:765:
+ ^I^I^I^I/* Fall trough now */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: mm/memory.c:766:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: mm/memory.c:766:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: mm/memory.c:767:
+ ^I^I^I^I/* Bail out because of error. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#484: FILE: mm/memory.c:767:
+ ^I^I^I^I/* Bail out because of error. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: mm/memory.c:767:
+ ^I^I^I^I/* Bail out because of error. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: mm/memory.c:768:
+ ^I^I^Idefault:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#485: FILE: mm/memory.c:768:
+ ^I^I^Idefault:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: mm/memory.c:768:
+ ^I^I^Idefault:$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: mm/memory.c:769:
+ ^I^I^I^I/* Error cases do unlock, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: mm/memory.c:769:
+ ^I^I^I^I/* Error cases do unlock, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#486: FILE: mm/memory.c:769:
+ ^I^I^I^I/* Error cases do unlock, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: mm/memory.c:769:
+ ^I^I^I^I/* Error cases do unlock, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: mm/memory.c:770:
+ ^I^I^I^I * if necessary. -ioe */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#487: FILE: mm/memory.c:770:
+ ^I^I^I^I * if necessary. -ioe */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#487: FILE: mm/memory.c:770:
+ 				 * if necessary. -ioe */

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: mm/memory.c:771:
+ ^I^I^I^Ireturn ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#488: FILE: mm/memory.c:771:
+ ^I^I^I^Ireturn ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: mm/memory.c:771:
+ ^I^I^I^Ireturn ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: mm/memory.c:772:
+  ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#489: FILE: mm/memory.c:772:
+  ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: mm/memory.c:772:
+  ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: mm/memory.c:773:
+  ^I^I^Istart += PAGE_SIZE;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#490: FILE: mm/memory.c:773:
+  ^I^I^Istart += PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: mm/memory.c:773:
+  ^I^I^Istart += PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: mm/memory.c:774:
+ ^I^I} while (start < vma->vm_end);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#491: FILE: mm/memory.c:774:
+ ^I^I} while (start < vma->vm_end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: mm/memory.c:774:
+ ^I^I} while (start < vma->vm_end);$

ERROR:SPACING: space required before the open parenthesis '('
#496: FILE: mm/memory.c:776:
+	} while(1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: mm/memory.c:782:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#502: FILE: mm/memory.c:782:
+
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: mm/memory.c:782:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: mm/memory.c:785:
+int get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
+	       unsigned long start, int len, int write, int force,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#517: FILE: mm/memory.c:797:
+	memset(&gup_u, 0, sizeof (gup_u));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#524: FILE: mm/memory.c:804:
+		printk("Obsolete argument \"vmas\" used!"

WARNING:SPLIT_STRING: quoted string split across lines
#525: FILE: mm/memory.c:805:
+		printk("Obsolete argument \"vmas\" used!"
+		       " Please send this report to linux-mm@vger.kernel.org"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#526: FILE: mm/memory.c:806:
+		       " Please send this report to linux-mm@vger.kernel.org"
+		       " or fix the caller. Stack trace follows...\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#531: FILE: mm/memory.c:811:
+	BUG_ON(vmas);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#543: FILE: mm/memory.c:823:
+	if (ret == 0) {
+		ret = gup_u.pg.count;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: mm/memory.c:1538:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: mm/memory.c:1541:
+static int gup_mk_present(struct vm_area_struct *vma, struct page *page,
+	       unsigned long virt_addr, void *customdata)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#559: FILE: mm/memory.c:1543:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: mm/memory.c:1571:
+^I * also a slight optimization. -ioe $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#650: FILE: arch/i386/mm/hugetlbpage.c:211:
+^I^I^I/* Error cases do unlock, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#651: FILE: arch/i386/mm/hugetlbpage.c:212:
+			 * if necessary. -ioe */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < vma->vm_end'
#660: FILE: arch/i386/mm/hugetlbpage.c:216:
+		if (((start & HPAGE_MASK) == pstart) &&
 				(start < vma->vm_end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: arch/i386/mm/hugetlbpage.c:217:
+		if (((start & HPAGE_MASK) == pstart) &&
 				(start < vma->vm_end))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: arch/ia64/mm/hugetlbpage.c:230:
+follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long *st,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: arch/ia64/mm/hugetlbpage.c:258:
+^I^I^I/* Error cases do unlock, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#719: FILE: arch/ia64/mm/hugetlbpage.c:259:
+			 * if necessary. -ioe */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < vma->vm_end'
#729: FILE: arch/ia64/mm/hugetlbpage.c:263:
+		if (((start & HPAGE_MASK) == pstart) && (start < vma->vm_end))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#750: FILE: arch/sparc64/mm/hugetlbpage.c:272:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: arch/sparc64/mm/hugetlbpage.c:302:
+^I^I^I/* Error cases do unlock, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#787: FILE: arch/sparc64/mm/hugetlbpage.c:303:
+			 * if necessary. -ioe */

WARNING:LONG_LINE_COMMENT: line length of 142 exceeds 100 columns
#820: FILE: include/linux/hugetlb.h:11:
+//int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, int *, int);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: include/linux/hugetlb.h:12:
+/* Sorry for the ugliness, but the other option was to always $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: include/linux/hugetlb.h:15:
+int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#824: FILE: include/linux/hugetlb.h:15:
+int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#824: FILE: include/linux/hugetlb.h:15:
+int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#824: FILE: include/linux/hugetlb.h:15:
+int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#824: FILE: include/linux/hugetlb.h:15:
+int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: include/linux/hugetlb.h:16:
+int follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, 
+		unsigned long *,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: include/linux/hugetlb.h:17:
+^I^Iint (*)(struct vm_area_struct *, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: include/linux/hugetlb.h:18:
+^I^Istruct page *, unsigned long, void *), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: include/linux/hugetlb.h:18:
+		int (*)(struct vm_area_struct *, 
+		struct page *, unsigned long, void *), 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#838: FILE: include/linux/hugetlb.h:31:
+#define follow_hugetlb_page(m,v,a,w,c)		({ BUG(); 0; })

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: include/linux/hugetlb.h:31:
+#define follow_hugetlb_page(m,v,a,w,c)		({ BUG(); 0; })
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: include/linux/hugetlb.h:31:
+#define follow_hugetlb_page(m,v,a,w,c)		({ BUG(); 0; })
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: include/linux/hugetlb.h:31:
+#define follow_hugetlb_page(m,v,a,w,c)		({ BUG(); 0; })
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: include/linux/hugetlb.h:31:
+#define follow_hugetlb_page(m,v,a,w,c)		({ BUG(); 0; })
                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#865: FILE: mm/memory.c:693:
+^I^Istruct gup_add_pages gup = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#867: FILE: mm/memory.c:695:
+^I^I^I.max_pages = 1, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#871: FILE: mm/memory.c:699:
+		int ret;
+		ret = follow_hugetlb_page(mm, vma, &start, gup_add_pages, &gup);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: mm/memory.c:739:
+^I^I^Iret = follow_hugetlb_page(mm, vma, &start, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: mm/memory.c:740:
+			ret = follow_hugetlb_page(mm, vma, &start, 
+					walker, customdata);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#911: FILE: mm/memory.c:742:
+^I^I^Iif (ret == 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#913: FILE: mm/memory.c:744:
+^I^I^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: fs/binfmt_elf.c:1248:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#948: FILE: fs/binfmt_elf.c:1249:
+^I^I^Ipage = get_one_user_page(current, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: fs/binfmt_elf.c:1250:
+			page = get_one_user_page(current, 
+					current->mm, vma, addr, 1, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: kernel/ptrace.c:169:
+^I^I/* TODO: This whole function could be optimized, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1001: FILE: kernel/ptrace.c:170:
+^I^I * ^I by doing the whole stuff of this loop $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1001: FILE: kernel/ptrace.c:170:
+^I^I * ^I by doing the whole stuff of this loop $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1002: FILE: kernel/ptrace.c:171:
+^I^I * ^I in a custom page walker using walk_user_pages(). -ioe $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1002: FILE: kernel/ptrace.c:171:
+^I^I * ^I in a custom page walker using walk_user_pages(). -ioe $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1146: FILE: mm/memory.c:722:
+	memset(&gup, 0, sizeof (gup));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1172: FILE: mm/memory.c:729:
+^I^I/* Warn on non-sense calls, but process them. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1174: FILE: mm/memory.c:731:
+^I^I * Look at gup_mk_present() for an example.   -ioe $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 74 errors, 101 warnings, 25 checks, 1060 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
