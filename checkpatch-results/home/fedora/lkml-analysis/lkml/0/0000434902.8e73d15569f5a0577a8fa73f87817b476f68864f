CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#55: FILE: include/linux/dcache.h:10:
+#define IT_CREAT    (1<<1)
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#55: FILE: include/linux/dcache.h:10:
+#define IT_CREAT    (1<<1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#56: FILE: include/linux/dcache.h:11:
+#define IT_MKDIR    (1<<2)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#56: FILE: include/linux/dcache.h:11:
+#define IT_MKDIR    (1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#57: FILE: include/linux/dcache.h:12:
+#define IT_LINK     (1<<3)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#57: FILE: include/linux/dcache.h:12:
+#define IT_LINK     (1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#58: FILE: include/linux/dcache.h:13:
+#define IT_SYMLINK  (1<<4)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#58: FILE: include/linux/dcache.h:13:
+#define IT_SYMLINK  (1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#59: FILE: include/linux/dcache.h:14:
+#define IT_UNLINK   (1<<5)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#59: FILE: include/linux/dcache.h:14:
+#define IT_UNLINK   (1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#60: FILE: include/linux/dcache.h:15:
+#define IT_RMDIR    (1<<6)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#60: FILE: include/linux/dcache.h:15:
+#define IT_RMDIR    (1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#61: FILE: include/linux/dcache.h:16:
+#define IT_RENAME   (1<<7)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#61: FILE: include/linux/dcache.h:16:
+#define IT_RENAME   (1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#62: FILE: include/linux/dcache.h:17:
+#define IT_RENAME2  (1<<8)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#62: FILE: include/linux/dcache.h:17:
+#define IT_RENAME2  (1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#63: FILE: include/linux/dcache.h:18:
+#define IT_READDIR  (1<<9)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#63: FILE: include/linux/dcache.h:18:
+#define IT_READDIR  (1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#64: FILE: include/linux/dcache.h:19:
+#define IT_GETATTR  (1<<10)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#64: FILE: include/linux/dcache.h:19:
+#define IT_GETATTR  (1<<10)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#65: FILE: include/linux/dcache.h:20:
+#define IT_SETATTR  (1<<11)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#65: FILE: include/linux/dcache.h:20:
+#define IT_SETATTR  (1<<11)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#66: FILE: include/linux/dcache.h:21:
+#define IT_READLINK (1<<12)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#66: FILE: include/linux/dcache.h:21:
+#define IT_READLINK (1<<12)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#67: FILE: include/linux/dcache.h:22:
+#define IT_MKNOD    (1<<13)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#67: FILE: include/linux/dcache.h:22:
+#define IT_MKNOD    (1<<13)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#68: FILE: include/linux/dcache.h:23:
+#define IT_LOOKUP   (1<<14)
                       ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#68: FILE: include/linux/dcache.h:23:
+#define IT_LOOKUP   (1<<14)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#96: FILE: include/linux/dcache.h:122:
+	int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#96: FILE: include/linux/dcache.h:122:
+	int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lookup_intent *' should also have an identifier name
#96: FILE: include/linux/dcache.h:122:
+	int (*d_revalidate2)(struct dentry *, int, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#97: FILE: include/linux/dcache.h:123:
+	void (*d_intent_release)(struct dentry *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/fs.h:784:
+int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry,

WARNING:SPACING: Unnecessary space before function pointer arguments
#126: FILE: include/linux/fs.h:846:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, struct lookup_intent *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#126: FILE: include/linux/fs.h:846:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, struct lookup_intent *);
 	                                          ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#126: FILE: include/linux/fs.h:846:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#126: FILE: include/linux/fs.h:846:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, struct lookup_intent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lookup_intent *' should also have an identifier name
#126: FILE: include/linux/fs.h:846:
+	struct dentry * (*lookup2) (struct inode *,struct dentry *, struct lookup_intent *);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#143: FILE: include/linux/fs.h:1314:
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#143: FILE: include/linux/fs.h:1314:
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/fs.h:1314:
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#143: FILE: include/linux/fs.h:1314:
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#143: FILE: include/linux/fs.h:1314:
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#143: FILE: include/linux/fs.h:1314:
+extern int FASTCALL(__user_walk_it(const char *, unsigned, struct nameidata *, struct lookup_intent *it));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#151: FILE: include/linux/fs.h:1325:
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
                                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#151: FILE: include/linux/fs.h:1325:
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
                                                                                            ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: include/linux/fs.h:1325:
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: include/linux/fs.h:1325:
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#151: FILE: include/linux/fs.h:1325:
+#define user_path_walk_it(name,nd,it)  __user_walk_it(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE, nd, it)
                                                                          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#152: FILE: include/linux/fs.h:1326:
+#define user_path_walk_link_it(name,nd,it) __user_walk_it(name, LOOKUP_POSITIVE, nd, it)
                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#152: FILE: include/linux/fs.h:1326:
+#define user_path_walk_link_it(name,nd,it) __user_walk_it(name, LOOKUP_POSITIVE, nd, it)
                                                                                  ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: include/linux/fs.h:1326:
+#define user_path_walk_link_it(name,nd,it) __user_walk_it(name, LOOKUP_POSITIVE, nd, it)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: include/linux/fs.h:1326:
+#define user_path_walk_link_it(name,nd,it) __user_walk_it(name, LOOKUP_POSITIVE, nd, it)
                                       ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#170: FILE: fs/nfsd/vfs.c:1286:
 	} else
[...]
+	err = vfs_rename(fdir, odentry, tdir, ndentry, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: fs/namei.c:104:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#211: FILE: fs/namei.c:283:
+		return dentry;
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#211: FILE: fs/namei.c:283:
+	} else
 	if (dentry && dentry->d_op && dentry->d_op->d_revalidate) {

CHECK:BRACES: Unbalanced braces around else statement
#211: FILE: fs/namei.c:283:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/namei.c:475:
+int link_path_walk_it(const char *name, struct nameidata *nd,
                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: fs/namei.c:671:
+int link_path_walk(const char * name, struct nameidata *nd)
                                                         ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: fs/namei.c:671:
+int link_path_walk(const char * name, struct nameidata *nd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#321: FILE: fs/namei.c:673:
+	return link_path_walk_it(name, nd, NULL);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#324: FILE: fs/namei.c:676:
+int path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it)
                                                       ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#324: FILE: fs/namei.c:676:
+int path_walk_it(const char * name, struct nameidata *nd, struct lookup_intent *it)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#327: FILE: fs/namei.c:679:
+	return link_path_walk_it(name, nd, it);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#334: FILE: fs/namei.c:685:
+	return link_path_walk_it(name, nd, NULL);
 	                               ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#337: FILE: fs/namei.c:688:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#346: FILE: fs/namei.c:789:
+struct dentry * lookup_hash_it(struct qstr *name, struct dentry * base,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#346: FILE: fs/namei.c:789:
+struct dentry * lookup_hash_it(struct qstr *name, struct dentry * base,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#365: FILE: fs/namei.c:822:
+		else
 		dentry = inode->i_op->lookup(inode, new);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: fs/namei.c:834:
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: fs/namei.c:834:
+struct dentry * lookup_hash(struct qstr *name, struct dentry * base)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#378: FILE: fs/namei.c:839:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#395: FILE: fs/namei.c:893:
+int __user_walk_it(const char *name, unsigned flags, struct nameidata *nd,
                                                                        ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#395: FILE: fs/namei.c:893:
+int __user_walk_it(const char *name, unsigned flags, struct nameidata *nd,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#405: FILE: fs/namei.c:903:
+		if (path_init(tmp, flags, nd))
 		                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#406: FILE: fs/namei.c:904:
+			err = path_walk_it(tmp, nd, it);
 			                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#421: FILE: fs/namei.c:1045:
+		  struct nameidata *nd, struct lookup_intent *it)
 		                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#431: FILE: fs/namei.c:1060:
+			error = path_walk_it(pathname, nd, it);
 			                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#497: FILE: fs/namei.c:1273:
+int open_namei(const char *pathname, int flag, int mode, struct nameidata *nd)
                                                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#499: FILE: fs/namei.c:1275:
+	return open_namei_it(pathname, flag, mode, nd, NULL);
 	                                           ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#502: FILE: fs/namei.c:1278:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: fs/namei.c:1280:
+static struct dentry *lookup_create(struct nameidata *nd, int is_dir,
                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#532: FILE: fs/namei.c:1347:
+	dentry = lookup_create(&nd, 0, &it);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#562: FILE: fs/namei.c:1419:
+		dentry = lookup_create(&nd, 1, &it);
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#585: FILE: fs/namei.c:1530:
+	dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#585: FILE: fs/namei.c:1530:
+	dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#607: FILE: fs/namei.c:1593:
+	dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#607: FILE: fs/namei.c:1593:
+	dentry = lookup_hash_it(&nd.last, nd.dentry, &it);
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#634: FILE: fs/namei.c:1665:
+		dentry = lookup_create(&nd, 0, &it);
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#656: FILE: fs/namei.c:1758:
+		new_dentry = lookup_create(&nd, 0, &it);
 		                            ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: fs/namei.c:1940:
+		error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry,it);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: fs/namei.c:1940:
+		error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry,it);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: fs/namei.c:1940:
+		error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry,it);
 		                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: fs/namei.c:1940:
+		error = vfs_rename_dir(old_dir,old_dentry,new_dir,new_dentry,it);
 		                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: fs/namei.c:1942:
+		error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry,it);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: fs/namei.c:1942:
+		error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry,it);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: fs/namei.c:1942:
+		error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry,it);
 		                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: fs/namei.c:1942:
+		error = vfs_rename_other(old_dir,old_dentry,new_dir,new_dentry,it);
 		                                                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#778: FILE: fs/open.c:22:
+extern int path_walk_it(const char *name, struct nameidata *nd,
                                                             ^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#780: FILE: fs/open.c:24:
+extern void intent_release(struct dentry *de);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#795: FILE: fs/open.c:106:
+	error = user_path_walk_it(path, &nd, &it);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#798: FILE: fs/open.c:109:
+	nd.dentry->d_it = &it;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#806: FILE: fs/open.c:152:
+	intent_release(nd.dentry);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#817: FILE: fs/open.c:246:
+	error = user_path_walk_it(filename, &nd, &it);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#820: FILE: fs/open.c:249:
+	nd.dentry->d_it = &it;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#828: FILE: fs/open.c:273:
+	intent_release(nd.dentry);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#839: FILE: fs/open.c:293:
+	error = user_path_walk_it(filename, &nd, &it);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#843: FILE: fs/open.c:297:
+	nd.dentry->d_it = &it;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#851: FILE: fs/open.c:320:
+	intent_release(nd.dentry);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#868: FILE: fs/open.c:355:
+	res = user_path_walk_it(filename, &nd, &it);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#875: FILE: fs/open.c:362:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#892: FILE: fs/open.c:387:
+		error = path_walk_it(name, &nd, &it);
 		                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#897: FILE: fs/open.c:392:
+	nd.dentry->d_it = &it;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#905: FILE: fs/open.c:400:
+	intent_release(nd.dentry);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#922: FILE: fs/open.c:450:
+	error = path_walk_it(name, &nd, &it);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#927: FILE: fs/open.c:455:
+	nd.dentry->d_it = &it;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#935: FILE: fs/open.c:468:
+	intent_release(nd.dentry);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#946: FILE: fs/open.c:515:
+	error = user_path_walk_it(filename, &nd, &it);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#951: FILE: fs/open.c:520:
+	nd.dentry->d_it = &it;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#959: FILE: fs/open.c:535:
+	intent_release(nd.dentry);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#970: FILE: fs/open.c:607:
+	error = user_path_walk_it(filename, &nd, &it);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#972: FILE: fs/open.c:609:
+		nd.dentry->d_it = &it;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#974: FILE: fs/open.c:611:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#985: FILE: fs/open.c:623:
+	error = user_path_walk_link_it(filename, &nd, &it);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#987: FILE: fs/open.c:625:
+		nd.dentry->d_it = &it;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#989: FILE: fs/open.c:627:
+		intent_release(nd.dentry);
 		               ^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#997: FILE: fs/open.c:661:
+extern int open_namei_it(const char *filename, int namei_flags, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#998: FILE: fs/open.c:662:
+			 struct nameidata *nd, struct lookup_intent *it);
 			                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1017: FILE: fs/open.c:678:
+	error = open_namei_it(filename, namei_flags, mode, &nd, &it);
 	                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1022: FILE: fs/open.c:682:
+	return dentry_open_it(nd.dentry, nd.mnt, flags, &it);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1022: FILE: fs/open.c:682:
+	return dentry_open_it(nd.dentry, nd.mnt, flags, &it);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1075: FILE: fs/stat.c:141:
+	error = user_path_walk_it(filename, &nd, &it);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1080: FILE: fs/stat.c:146:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1092: FILE: fs/stat.c:159:
+	error = user_path_walk_it(filename, &nd, &it);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1097: FILE: fs/stat.c:164:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1109: FILE: fs/stat.c:182:
+	error = user_path_walk_link_it(filename, &nd, &it);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1114: FILE: fs/stat.c:187:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1126: FILE: fs/stat.c:201:
+	error = user_path_walk_link_it(filename, &nd, &it);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1131: FILE: fs/stat.c:206:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1145: FILE: fs/stat.c:263:
+	error = user_path_walk_link_it(path, &nd, &it);
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1155: FILE: fs/stat.c:272:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1166: FILE: fs/stat.c:347:
+	error = user_path_walk_it(filename, &nd, &it);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1171: FILE: fs/stat.c:352:
+		intent_release(nd.dentry);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1182: FILE: fs/stat.c:364:
+	error = user_path_walk_link_it(filename, &nd, &it);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1187: FILE: fs/stat.c:369:
+		intent_release(nd.dentry);
 		               ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434902.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 91 warnings, 36 checks, 1048 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434902.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
