WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal linux-2.5.21.24110/Documentation/DocBook/kernel-hacking.tmpl linux-2.5.21.24110.updated/Documentation/DocBook/kernel-hacking.tmpl

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: drivers/video/fbcon.c:2180:
+    for (x = 0; x < num_online_cpus() * (LOGO_W + 8) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: drivers/video/fbcon.c:2181:
+    for (x = 0; x < num_online_cpus() * (LOGO_W + 8) &&
     	 x < p->var.xres - (LOGO_W + 8); x += (LOGO_W + 8)) {

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#129: FILE: fs/ntfs/compress.c:72:
+	ntfs_compression_buffers =  (u8**)kmalloc(NR_CPUS * sizeof(u8*),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#129: FILE: fs/ntfs/compress.c:72:
+	ntfs_compression_buffers =  (u8**)kmalloc(NR_CPUS * sizeof(u8*),

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#129: FILE: fs/ntfs/compress.c:72:
+	ntfs_compression_buffers =  (u8**)kmalloc(NR_CPUS * sizeof(u8*),

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#129: FILE: fs/ntfs/compress.c:72:
+	ntfs_compression_buffers =  (u8**)kmalloc(NR_CPUS * sizeof(u8*),
 			GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#129: FILE: fs/ntfs/compress.c:72:
+	ntfs_compression_buffers =  (u8**)kmalloc(NR_CPUS * sizeof(u8*),

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#134: FILE: fs/ntfs/compress.c:76:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#140: FILE: fs/ntfs/compress.c:81:
+	if (i == NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#149: FILE: fs/ntfs/compress.c:103:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#161: FILE: fs/proc/array.c:698:
+	for (i = 0 ; i < NR_CPUS; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#162: FILE: fs/proc/array.c:699:
+		if (cpu_online(i))
 		len += sprintf(buffer + len, "cpu%d %lu %lu\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#170: FILE: fs/proc/array.c:705:
 
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#183: FILE: fs/proc/proc_misc.c:284:
+	for (i = 0 ; i < NR_CPUS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#189: FILE: fs/proc/proc_misc.c:287:
+		if(!cpu_online(i)) continue;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#189: FILE: fs/proc/proc_misc.c:287:
+		if(!cpu_online(i)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open brace '{'
#204: FILE: fs/proc/proc_misc.c:299:
+	for (i = 0 ; i < NR_CPUS; i++){

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#204: FILE: fs/proc/proc_misc.c:299:
+	for (i = 0 ; i < NR_CPUS; i++){

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#205: FILE: fs/proc/proc_misc.c:300:
+		if (!cpu_online(i)) continue;

ERROR:SPACING: space prohibited after that open parenthesis '('
#217: FILE: fs/proc/proc_misc.c:306:
+			jif - (  kstat.per_cpu_user[i] \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#217: FILE: fs/proc/proc_misc.c:306:
+			jif - (  kstat.per_cpu_user[i] \

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#245: FILE: include/linux/kernel_stat.h:46:
+	for (i = 0 ; i < NR_CPUS ; i++)

ERROR:SPACING: space required before the open parenthesis '('
#294: FILE: kernel/fork.c:695:
+		for(i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#294: FILE: kernel/fork.c:695:
+		for(i = 0; i < NR_CPUS; i++)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#295: FILE: kernel/fork.c:696:
+			p->per_cpu_utime[i] = p->per_cpu_stime[i] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#308: FILE: kernel/sched.c:437:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#319: FILE: kernel/sched.c:447:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#330: FILE: kernel/sched.c:457:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#341: FILE: kernel/sched.c:533:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq_src->nr_running < this_rq->prev_nr_running[i]'
#348: FILE: kernel/sched.c:538:
+		if (idle || (rq_src->nr_running < this_rq->prev_nr_running[i]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#363: FILE: kernel/sched.c:1705:
+	int cpu = (int) (long) bind_cpu;

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: kernel/sched.c:1715:
+           vanishes with hotplug cpu patch anyway. --RR */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#373: FILE: kernel/sched.c:1715:
+	/* FIXME: First CPU may not be zero, but this crap code
+           vanishes with hotplug cpu patch anyway. --RR */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#373: FILE: kernel/sched.c:1715:
+           vanishes with hotplug cpu patch anyway. --RR */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#391: FILE: kernel/sched.c:1786:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#402: FILE: kernel/sched.c:1795:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

CHECK:SPACING: No space is necessary after a cast
#419: FILE: kernel/softirq.c:366:
+	int cpu = (int) (long) __bind_cpu;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#437: FILE: kernel/softirq.c:404:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: kernel/suspend.c:1017:
+	if(sh->num_cpus != num_online_cpus())

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#482: FILE: lib/brlock.c:27:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#492: FILE: lib/brlock.c:35:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#503: FILE: lib/brlock.c:53:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#516: FILE: mm/page_alloc.c:577:
+	for (pcpu = 0; pcpu < NR_CPUS; pcpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#536: FILE: mm/slab.c:944:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#537: FILE: mm/slab.c:945:
+		cpucache_t* ccold = new.new[i];

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#546: FILE: mm/slab.c:1678:
+		for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#554: FILE: mm/slab.c:1684:
+				for (i--; i >= 0; i--) kfree(new.new[i]);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#570: FILE: mm/slab.c:1699:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#571: FILE: mm/slab.c:1700:
+		cpucache_t* ccold = new.new[i];

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#599: FILE: net/core/dev.c:1823:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#623: FILE: net/ipv4/netfilter/arp_tables.c:708:
+	for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#632: FILE: net/ipv4/netfilter/arp_tables.c:759:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#641: FILE: net/ipv4/netfilter/arp_tables.c:877:
+			  + SMP_ALIGN(tmp.size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#650: FILE: net/ipv4/netfilter/arp_tables.c:1146:
+			  + SMP_ALIGN(table->table->size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#672: FILE: net/ipv4/netfilter/ip_tables.c:867:
+	for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#681: FILE: net/ipv4/netfilter/ip_tables.c:889:
+		for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#690: FILE: net/ipv4/netfilter/ip_tables.c:936:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#699: FILE: net/ipv4/netfilter/ip_tables.c:1074:
+			  + SMP_ALIGN(tmp.size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#708: FILE: net/ipv4/netfilter/ip_tables.c:1387:
+			  + SMP_ALIGN(table->table->size) * NR_CPUS);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#731: FILE: net/ipv4/netfilter/ipchains_core.c:154:
+#define SLOT_NUMBER() (smp_processor_id()*2 + !in_interrupt())
                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#736: FILE: net/ipv4/netfilter/ipchains_core.c:158:
+#define NUM_SLOTS (NR_CPUS*2)
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#758: FILE: net/ipv4/proc.c:58:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#758: FILE: net/ipv4/proc.c:58:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#758: FILE: net/ipv4/proc.c:58:
+	for (cpu=0; cpu<NR_CPUS; cpu++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#770: FILE: net/ipv4/proc.c:106:
+	for (i=0; i<NR_CPUS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#770: FILE: net/ipv4/proc.c:106:
+	for (i=0; i<NR_CPUS; i++) {
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#770: FILE: net/ipv4/proc.c:106:
+	for (i=0; i<NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#771: FILE: net/ipv4/proc.c:107:
+		res += begin[2*i*sz + nr];
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#771: FILE: net/ipv4/proc.c:107:
+		res += begin[2*i*sz + nr];
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#772: FILE: net/ipv4/proc.c:108:
+		res += begin[(2*i+1)*sz + nr];
 		               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#772: FILE: net/ipv4/proc.c:108:
+		res += begin[(2*i+1)*sz + nr];
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#772: FILE: net/ipv4/proc.c:108:
+		res += begin[(2*i+1)*sz + nr];
 		                    ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#790: FILE: net/ipv4/route.c:286:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#806: FILE: net/ipv4/route.c:2443:
+			for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#836: FILE: net/ipv6/netfilter/ip6_tables.c:915:
+	for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#845: FILE: net/ipv6/netfilter/ip6_tables.c:937:
+		for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#854: FILE: net/ipv6/netfilter/ip6_tables.c:984:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#863: FILE: net/ipv6/netfilter/ip6_tables.c:1118:
+			  + SMP_ALIGN(tmp.size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#872: FILE: net/ipv6/netfilter/ip6_tables.c:1431:
+			  + SMP_ALIGN(table->table->size) * NR_CPUS);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#885: FILE: net/ipv6/proc.c:34:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#885: FILE: net/ipv6/proc.c:34:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#885: FILE: net/ipv6/proc.c:34:
+	for (cpu=0; cpu<NR_CPUS; cpu++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#897: FILE: net/ipv6/proc.c:143:
+	for (i=0; i<NR_CPUS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#897: FILE: net/ipv6/proc.c:143:
+	for (i=0; i<NR_CPUS; i++) {
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#897: FILE: net/ipv6/proc.c:143:
+	for (i=0; i<NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#898: FILE: net/ipv6/proc.c:144:
+		res += ptr[2*i*size];
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#898: FILE: net/ipv6/proc.c:144:
+		res += ptr[2*i*size];
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#899: FILE: net/ipv6/proc.c:145:
+		res += ptr[(2*i+1)*size];
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#899: FILE: net/ipv6/proc.c:145:
+		res += ptr[(2*i+1)*size];
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#899: FILE: net/ipv6/proc.c:145:
+		res += ptr[(2*i+1)*size];
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#912: FILE: net/socket.c:1776:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#912: FILE: net/socket.c:1776:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#912: FILE: net/socket.c:1776:
+	for (cpu=0; cpu<NR_CPUS; cpu++)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 53 warnings, 18 checks, 732 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
