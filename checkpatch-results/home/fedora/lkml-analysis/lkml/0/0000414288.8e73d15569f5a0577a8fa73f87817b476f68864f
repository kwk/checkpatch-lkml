WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
diff -urN linux-2.5.47-kprobes/drivers/char/Kconfig linux-2.5.47-patched/drivers/char/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#49: FILE: drivers/char/Kconfig:1273:
+config NOISY
+	tristate "Noisy Interface Support"
+	---help---
+	  If you say Y here and create a character special file /dev/noisy with
+	  major number 10 and minor number 221 using mknod ("man mknod"), you
+	  will get access to an interface for inserting arbitrary printk's
+	  into executing kernel code.
+
+	  This driver is also available as a module ( = code which can be
+	  inserted in and removed from the running kernel whenever you want).
+	  The module is called noisy.o. If you want to compile it as a module,
+	  say M here and read <file:Documentation/modules.txt>.
+
+	  If unsure, say N.
+
 endmenu
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: drivers/char/noisy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#95: FILE: drivers/char/noisy.c:15:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: drivers/char/noisy.c:29:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#116: FILE: drivers/char/noisy.c:36:
+	printk(KERN_CRIT "noisy: noisy_prehandler\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: drivers/char/noisy.c:39:
+		struct nprobe *c = list_entry(tmp, struct nprobe, list);
+		if (&(c->probe) == p) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around c->probe
#119: FILE: drivers/char/noisy.c:39:
+		if (&(c->probe) == p) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#119: FILE: drivers/char/noisy.c:39:
+		if (&(c->probe) == p) {
+			printk(KERN_CRIT "%s\n", c->message);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#120: FILE: drivers/char/noisy.c:40:
+			printk(KERN_CRIT "%s\n", c->message);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: drivers/char/noisy.c:45:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: drivers/char/noisy.c:48:
+static void noisy_post_handler(struct kprobe *p, struct pt_regs *r, $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#131: FILE: drivers/char/noisy.c:51:
+	printk(KERN_INFO "noisy: noisy_posthandler\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: drivers/char/noisy.c:55:
+ * Fault handler that covers the pre_handler, single stepping, and $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#140: FILE: drivers/char/noisy.c:60:
+	printk(KERN_INFO, "noisy: fault_handler\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#154: FILE: drivers/char/noisy.c:74:
+static struct file_operations noisy_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: drivers/char/noisy.c:82:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: drivers/char/noisy.c:84:
+ * the miscdevice subsystem.  $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#167: FILE: drivers/char/noisy.c:87:
+static struct miscdevice noisy_dev =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: drivers/char/noisy.c:94:
+static ssize_t noisy_read(struct file *file, char *buf,
+			size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: drivers/char/noisy.c:95:
+{^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: drivers/char/noisy.c:98:
+^Iprintk(KERN_CRIT "noisy: noisy_read\n");^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#178: FILE: drivers/char/noisy.c:98:
+	printk(KERN_CRIT "noisy: noisy_read\n");	

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'noisy_read', this function's name, in a string
#178: FILE: drivers/char/noisy.c:98:
+	printk(KERN_CRIT "noisy: noisy_read\n");	

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: drivers/char/noisy.c:101:
+		struct nprobe *p = list_entry(tmp, struct nprobe, list);
+		if (p) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: drivers/char/noisy.c:102:
+^I^I^Iprintk(KERN_CRIT "%p: %s\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#182: FILE: drivers/char/noisy.c:102:
+			printk(KERN_CRIT "%p: %s\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: drivers/char/noisy.c:114:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: drivers/char/noisy.c:123:
+ * ... and then go do something that will trigger a sys_fork, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: drivers/char/noisy.c:124:
+ *     and then control-c to stop the cat process (which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: drivers/char/noisy.c:128:
+static ssize_t noisy_write(struct file *file, const char *buf, size_t count, $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#215: FILE: drivers/char/noisy.c:135:
+	printk(KERN_CRIT "noisy: noisy_write\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'noisy_write', this function's name, in a string
#215: FILE: drivers/char/noisy.c:135:
+	printk(KERN_CRIT "noisy: noisy_write\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: drivers/char/noisy.c:137:
+^I^Iprintk(KERN_CRIT $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#217: FILE: drivers/char/noisy.c:137:
+		printk(KERN_CRIT 

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#224: FILE: drivers/char/noisy.c:144:
+	tmp = (char *)kmalloc(count + 1, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#230: FILE: drivers/char/noisy.c:150:
+	n = (struct nprobe *)kmalloc(sizeof(struct nprobe), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*n)...) over kmalloc(sizeof(struct nprobe)...)
#230: FILE: drivers/char/noisy.c:150:
+	n = (struct nprobe *)kmalloc(sizeof(struct nprobe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: drivers/char/noisy.c:156:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: drivers/char/noisy.c:160:
+^I} $

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#243: FILE: drivers/char/noisy.c:163:
+	n = (struct nprobe *)kmalloc(sizeof(struct nprobe), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*n)...) over kmalloc(sizeof(struct nprobe)...)
#243: FILE: drivers/char/noisy.c:163:
+	n = (struct nprobe *)kmalloc(sizeof(struct nprobe), GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->probe
#249: FILE: drivers/char/noisy.c:169:
+	if (2 != sscanf(tmp, "0x%x %s", &(n->probe).addr, n->message)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#249: FILE: drivers/char/noisy.c:169:
+	if (2 != sscanf(tmp, "0x%x %s", &(n->probe).addr, n->message)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: drivers/char/noisy.c:178:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: drivers/char/noisy.c:183:
+^I^I * Although, it appears to work.  I can attempt to setup $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: drivers/char/noisy.c:184:
+^I^I * a probe for 0xfffffff0, and the write operation fails with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: drivers/char/noisy.c:185:
+^I^I * -EINVAL. $

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: drivers/char/noisy.c:188:
+		unsigned short eip;
+		if (__get_user(eip, (unsigned short *)(n->probe).addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n->probe'
#268: FILE: drivers/char/noisy.c:188:
+		if (__get_user(eip, (unsigned short *)(n->probe).addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->probe
#274: FILE: drivers/char/noisy.c:194:
+	if (register_kprobe(&(n->probe))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: drivers/char/noisy.c:195:
+^I^Iprintk(KERN_CRIT "Unable to register probe at %p\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#275: FILE: drivers/char/noisy.c:195:
+		printk(KERN_CRIT "Unable to register probe at %p\n", 

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#278: FILE: drivers/char/noisy.c:198:
+		if (n)
+			kfree(n);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: drivers/char/noisy.c:203:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->list
#284: FILE: drivers/char/noisy.c:204:
+	list_add(&(n->list), &probe_list);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#289: FILE: drivers/char/noisy.c:209:
+	if (tmp)
+		kfree(tmp);

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: drivers/char/noisy.c:210:
+        return ret;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: drivers/char/noisy.c:210:
+        return ret;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#300: FILE: drivers/char/noisy.c:220:
+	printk(KERN_CRIT "noisy: noisy_release\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'noisy_release', this function's name, in a string
#300: FILE: drivers/char/noisy.c:220:
+	printk(KERN_CRIT "noisy: noisy_release\n");

ERROR:SPACING: space required before the open parenthesis '('
#301: FILE: drivers/char/noisy.c:221:
+	while(!list_empty(&probe_list)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/char/noisy.c:225:
+^I^Iprintk("Releasing probe %p: %s\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#305: FILE: drivers/char/noisy.c:225:
+		printk("Releasing probe %p: %s\n", 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->probe
#307: FILE: drivers/char/noisy.c:227:
+		unregister_kprobe(&(p->probe));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#318: FILE: drivers/char/noisy.c:238:
+	printk(KERN_CRIT "noisy: noisy_init\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'noisy_init', this function's name, in a string
#318: FILE: drivers/char/noisy.c:238:
+	printk(KERN_CRIT "noisy: noisy_init\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#320: FILE: drivers/char/noisy.c:240:
+	if (misc_register(&noisy_dev))
+	{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: drivers/char/noisy.c:243:
+^I}^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#329: FILE: drivers/char/noisy.c:249:
+static void __exit noisy_exit (void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#331: FILE: drivers/char/noisy.c:251:
+	printk(KERN_CRIT "noisy: noisy_exit\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'noisy_exit', this function's name, in a string
#331: FILE: drivers/char/noisy.c:251:
+	printk(KERN_CRIT "noisy: noisy_exit\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000414288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 35 warnings, 9 checks, 293 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000414288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
