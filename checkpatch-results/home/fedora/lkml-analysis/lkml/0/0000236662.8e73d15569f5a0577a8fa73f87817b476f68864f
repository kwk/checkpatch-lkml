WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
diff -rwu linux.voluntary.virgin/arch/i386/Kconfig linux.voluntary/arch/i386/Kconfig

CHECK:LINE_SPACING: Please don't use multiple blank lines
#98: FILE: arch/i386/kernel/irq.c:57:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#104: FILE: arch/i386/kernel/irq.c:103:
 	} else
[...]
+	irq_desc[irq].timestamp = get_cycles();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/i386/kernel/kgdb_stub.c:369:
+    {[0 ... MAX_NO_CPUS - 1] = RAW_SPIN_LOCK_UNLOCKED };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#125: FILE: arch/i386/kernel/kgdb_stub.c:369:
+static raw_spinlock_t waitlocks[MAX_NO_CPUS] =
+    {[0 ... MAX_NO_CPUS - 1] = RAW_SPIN_LOCK_UNLOCKED };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: arch/i386/kernel/traps.c:791:
+^I^I--billh^I*/ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: arch/i386/kernel/traps.c:791:
+		--billh	*/ 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#205: FILE: arch/i386/lib/kgdb_serial.c:346:
+extern raw_spinlock_t kgdb_spinlock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#247: FILE: include/asm-i386/timex.h:58:
+			uint32_t eax;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#248: FILE: include/asm-i386/timex.h:59:
+			uint32_t edx;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: include/asm-i386/timex.h:62:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#256: FILE: include/asm-i386/timex.h:67:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#344: FILE: kernel/irq/proc.c:223:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#347: FILE: kernel/irq/proc.c:226:
+#include <asm/delay.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#362: FILE: kernel/irq/proc.c:241:
+typedef struct {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#373: FILE: kernel/irq/proc.c:252:
+	note_latency_histo_vec[NOTE_LATENCY_HISTO_SIZE] =
+		{ {1,  100,  0, 0, NULL},

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#377: FILE: kernel/irq/proc.c:256:
+unsigned int note_latency_n_events = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#379: FILE: kernel/irq/proc.c:258:
+void note_latency_init(void) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#386: FILE: kernel/irq/proc.c:265:
+		t->vec = (unsigned int *) kmalloc(sizeof(unsigned int) * t->n_entries,  GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#386: FILE: kernel/irq/proc.c:265:
+		t->vec = (unsigned int *) kmalloc(sizeof(unsigned int) * t->n_entries,  GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: kernel/irq/proc.c:272:
+	printk("cpu_khz = %d", cpu_khz);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#396: FILE: kernel/irq/proc.c:275:
+void note_latency_destruct(void) {

CHECK:SPACING: No space is necessary after a cast
#401: FILE: kernel/irq/proc.c:280:
+		kfree((void *) t->vec);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: kernel/irq/proc.c:280:
+		note_latency_vec_t *t = &note_latency_histo_vec[i];
+		kfree((void *) t->vec);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#408: FILE: kernel/irq/proc.c:287:
+void note_latency_event(cycles_t start_event_time) {

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#414: FILE: kernel/irq/proc.c:293:
+	t = &note_latency_histo_vec[NOTE_LATENCY_HISTO_SIZE -1];
 	                                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#419: FILE: kernel/irq/proc.c:298:
+/*
+	ss = get_cycles64();

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#425: FILE: kernel/irq/proc.c:304:
+	remainder = do_div(s, cpu_khz / 1000 +1);
 	                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#428: FILE: kernel/irq/proc.c:307:
+/*
+*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: kernel/irq/proc.c:309:
+//^Ievent_time = cycles_2_ns(get_cycles64() - start_event_time); // more accurate $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#433: FILE: kernel/irq/proc.c:312:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't2->usec_lower_bounds <= event_time'
#437: FILE: kernel/irq/proc.c:316:
+		if ((t2->usec_lower_bounds <= event_time) && (event_time < t2->usec_upper_bounds)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_time < t2->usec_upper_bounds'
#437: FILE: kernel/irq/proc.c:316:
+		if ((t2->usec_lower_bounds <= event_time) && (event_time < t2->usec_upper_bounds)) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#445: FILE: kernel/irq/proc.c:324:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#447: FILE: kernel/irq/proc.c:326:
+#if 0

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#459: FILE: kernel/irq/proc.c:338:
+
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#461: FILE: kernel/irq/proc.c:340:
+void note_latency_dump_histogram(struct seq_file *s) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#472: FILE: kernel/irq/proc.c:351:
+			if ( (peak = t->vec[j]) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#472: FILE: kernel/irq/proc.c:351:
+			if ( (peak = t->vec[j]) )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#472: FILE: kernel/irq/proc.c:351:
+			if ( (peak = t->vec[j]) )

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: kernel/irq/proc.c:353:
+				seq_printf(s, "%lld: %d\n",
+					frame_base_time + (j * t->usec_granularity),

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#479: FILE: kernel/irq/proc.c:358:
+//		seq_printf(s, " ----- \n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#484: FILE: kernel/irq/proc.c:363:
+	seq_printf(s, "end\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#490: FILE: kernel/irq/proc.c:369:
+	seq_printf(s, "BEGIN IRQ-task latency histogram (10usec bins)\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#492: FILE: kernel/irq/proc.c:371:
+	seq_printf(s, "END\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#506: FILE: kernel/irq/proc.c:385:
+struct file_operations latency_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: kernel/irq/proc.c:386:
+        .owner   = THIS_MODULE,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: kernel/irq/proc.c:386:
+        .owner   = THIS_MODULE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#508: FILE: kernel/irq/proc.c:387:
+        .open    = note_latency_seq_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: kernel/irq/proc.c:387:
+        .open    = note_latency_seq_open,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: kernel/irq/proc.c:388:
+        .read    = seq_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: kernel/irq/proc.c:388:
+        .read    = seq_read,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#510: FILE: kernel/irq/proc.c:389:
+        .llseek  = seq_lseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: kernel/irq/proc.c:389:
+        .llseek  = seq_lseek,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: kernel/irq/proc.c:390:
+        .release = single_release$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: kernel/irq/proc.c:390:
+        .release = single_release$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#516: FILE: kernel/irq/proc.c:395:
+static
+int note_latency_proc_init(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#517: FILE: kernel/irq/proc.c:396:
+int note_latency_proc_init(void) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: kernel/irq/proc.c:397:
+        struct proc_dir_entry$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: kernel/irq/proc.c:397:
+        struct proc_dir_entry$

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: kernel/irq/proc.c:400:
+        proc_root_object = create_proc_entry(PROC_PATH_ROOT_OBJECT, 0, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: kernel/irq/proc.c:400:
+        proc_root_object = create_proc_entry(PROC_PATH_ROOT_OBJECT, 0, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: kernel/irq/proc.c:401:
+        if (!proc_root_object) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: kernel/irq/proc.c:401:
+        if (!proc_root_object) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: kernel/irq/proc.c:402:
+                printk (KERN_ERR "cannot create /proc/" PROC_PATH_ROOT_OBJECT "\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: kernel/irq/proc.c:402:
+                printk (KERN_ERR "cannot create /proc/" PROC_PATH_ROOT_OBJECT "\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#523: FILE: kernel/irq/proc.c:402:
+                printk (KERN_ERR "cannot create /proc/" PROC_PATH_ROOT_OBJECT "\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#523: FILE: kernel/irq/proc.c:402:
+                printk (KERN_ERR "cannot create /proc/" PROC_PATH_ROOT_OBJECT "\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: kernel/irq/proc.c:403:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: kernel/irq/proc.c:403:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: kernel/irq/proc.c:404:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: kernel/irq/proc.c:404:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: kernel/irq/proc.c:405:
+        proc_root_object->proc_fops = &latency_file_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: kernel/irq/proc.c:405:
+        proc_root_object->proc_fops = &latency_file_ops;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236662.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 33 warnings, 14 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236662.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
