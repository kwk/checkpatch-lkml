WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This patch provides the upcall mechanism that will be used for communicating

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#61: FILE: include/linux/sunrpc/clnt.h:64:
+	struct dentry *		cl_dentry;	/* inode */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: include/linux/sunrpc/rpc_pipe_fs.h:1:
+#ifndef _LINUX_SUNRPC_RPC_PIPE_FS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#83: FILE: include/linux/sunrpc/rpc_pipe_fs.h:15:
+	ssize_t (*upcall)(struct file *, struct rpc_pipe_msg *, char *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_pipe_msg *' should also have an identifier name
#83: FILE: include/linux/sunrpc/rpc_pipe_fs.h:15:
+	ssize_t (*upcall)(struct file *, struct rpc_pipe_msg *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#83: FILE: include/linux/sunrpc/rpc_pipe_fs.h:15:
+	ssize_t (*upcall)(struct file *, struct rpc_pipe_msg *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#83: FILE: include/linux/sunrpc/rpc_pipe_fs.h:15:
+	ssize_t (*upcall)(struct file *, struct rpc_pipe_msg *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#84: FILE: include/linux/sunrpc/rpc_pipe_fs.h:16:
+	ssize_t (*downcall)(struct file *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#84: FILE: include/linux/sunrpc/rpc_pipe_fs.h:16:
+	ssize_t (*downcall)(struct file *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#84: FILE: include/linux/sunrpc/rpc_pipe_fs.h:16:
+	ssize_t (*downcall)(struct file *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_pipe_msg *' should also have an identifier name
#85: FILE: include/linux/sunrpc/rpc_pipe_fs.h:17:
+	void (*destroy_msg)(struct rpc_pipe_msg *);

WARNING:CONST_STRUCT: struct rpc_pipe_ops should normally be const
#95: FILE: include/linux/sunrpc/rpc_pipe_fs.h:27:
+	struct rpc_pipe_ops *ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/sunrpc/rpc_pipe_fs.h:36:
+extern void rpc_inode_setowner(struct inode *, void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/sunrpc/rpc_pipe_fs.h:37:
+extern int rpc_queue_upcall(struct inode *, struct rpc_pipe_msg *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#105: FILE: include/linux/sunrpc/rpc_pipe_fs.h:37:
+extern int rpc_queue_upcall(struct inode *, struct rpc_pipe_msg *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_pipe_msg *' should also have an identifier name
#105: FILE: include/linux/sunrpc/rpc_pipe_fs.h:37:
+extern int rpc_queue_upcall(struct inode *, struct rpc_pipe_msg *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/sunrpc/rpc_pipe_fs.h:39:
+extern struct dentry *rpc_mkdir(char *, struct rpc_clnt *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#107: FILE: include/linux/sunrpc/rpc_pipe_fs.h:39:
+extern struct dentry *rpc_mkdir(char *, struct rpc_clnt *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_clnt *' should also have an identifier name
#107: FILE: include/linux/sunrpc/rpc_pipe_fs.h:39:
+extern struct dentry *rpc_mkdir(char *, struct rpc_clnt *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/sunrpc/rpc_pipe_fs.h:40:
+extern int rpc_rmdir(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#108: FILE: include/linux/sunrpc/rpc_pipe_fs.h:40:
+extern int rpc_rmdir(char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/sunrpc/rpc_pipe_fs.h:41:
+extern struct dentry *rpc_mkpipe(char *, void *, struct rpc_pipe_ops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#109: FILE: include/linux/sunrpc/rpc_pipe_fs.h:41:
+extern struct dentry *rpc_mkpipe(char *, void *, struct rpc_pipe_ops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#109: FILE: include/linux/sunrpc/rpc_pipe_fs.h:41:
+extern struct dentry *rpc_mkpipe(char *, void *, struct rpc_pipe_ops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_pipe_ops *' should also have an identifier name
#109: FILE: include/linux/sunrpc/rpc_pipe_fs.h:41:
+extern struct dentry *rpc_mkpipe(char *, void *, struct rpc_pipe_ops *);

WARNING:CONST_STRUCT: struct rpc_pipe_ops should normally be const
#109: FILE: include/linux/sunrpc/rpc_pipe_fs.h:41:
+extern struct dentry *rpc_mkpipe(char *, void *, struct rpc_pipe_ops *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/sunrpc/rpc_pipe_fs.h:42:
+extern int rpc_unlink(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#110: FILE: include/linux/sunrpc/rpc_pipe_fs.h:42:
+extern int rpc_unlink(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#112: FILE: include/linux/sunrpc/rpc_pipe_fs.h:44:
+void __rpc_purge_current_upcall(struct file *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: net/sunrpc/clnt.c:113:
+	snprintf(clnt->cl_pathname, sizeof(clnt->cl_pathname),
+			"/%s/clnt%p", clnt->cl_protname, clnt);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#136: FILE: net/sunrpc/clnt.c:116:
+		printk(KERN_INFO "RPC: Couldn't create pipefs entry %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: net/sunrpc/clnt.c:117:
+		printk(KERN_INFO "RPC: Couldn't create pipefs entry %s\n",
+				clnt->cl_pathname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#141: FILE: net/sunrpc/clnt.c:121:
+		printk(KERN_INFO "RPC: Couldn't create auth handle (flavor %u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: net/sunrpc/clnt.c:122:
+		printk(KERN_INFO "RPC: Couldn't create auth handle (flavor %u)\n",
+				flavor);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#183: FILE: net/sunrpc/clnt.c:825:
+	switch (status) {
+		case -EPIPE:
[...]
+		case -ETIMEDOUT:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#185: FILE: net/sunrpc/clnt.c:827:
+			rpc_delay(task, 3*HZ);
 			                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#210: FILE: net/sunrpc/rpc_pipe.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#211: FILE: net/sunrpc/rpc_pipe.c:2:
+ * net/sunrpc/rpc_pipe.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: net/sunrpc/rpc_pipe.c:37:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#274: FILE: net/sunrpc/rpc_pipe.c:65:
+/*
+ * XXX should only be called in ->downcall

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#277: FILE: net/sunrpc/rpc_pipe.c:68:
+__rpc_purge_current_upcall(struct file *filp)
                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msg"
#284: FILE: net/sunrpc/rpc_pipe.c:75:
+	if (msg != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#295: FILE: net/sunrpc/rpc_pipe.c:86:
+	if (rpci->nreaders) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#298: FILE: net/sunrpc/rpc_pipe.c:89:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: net/sunrpc/rpc_pipe.c:100:
+	struct rpc_inode *rpci = RPC_I(inode);
+	down(&inode->i_sem);

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: net/sunrpc/rpc_pipe.c:111:
+	struct rpc_inode *rpci;
+	rpci = (struct rpc_inode *)kmem_cache_alloc(rpc_inode_cachep, SLAB_KERNEL);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#333: FILE: net/sunrpc/rpc_pipe.c:124:
+rpc_pipe_open(struct inode *inode, struct file *filp)
                                                 ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rpci->private"
#339: FILE: net/sunrpc/rpc_pipe.c:130:
+	if (rpci->private != NULL) {

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#341: FILE: net/sunrpc/rpc_pipe.c:132:
+			rpci->nreaders ++;
 			               ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#349: FILE: net/sunrpc/rpc_pipe.c:140:
+rpc_pipe_release(struct inode *inode, struct file *filp)
                                                    ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msg"
#355: FILE: net/sunrpc/rpc_pipe.c:146:
+	if (msg != NULL) {

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#361: FILE: net/sunrpc/rpc_pipe.c:152:
+		rpci->nreaders --;
 		               ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#369: FILE: net/sunrpc/rpc_pipe.c:160:
+rpc_pipe_read(struct file *filp, char *buf, size_t len, loff_t *offset)
                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#382: FILE: net/sunrpc/rpc_pipe.c:173:
+	if (msg == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: net/sunrpc/rpc_pipe.c:176:
+			msg = list_entry(rpci->pipe.next,
+					struct rpc_pipe_msg,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#391: FILE: net/sunrpc/rpc_pipe.c:182:
+		if (msg == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#394: FILE: net/sunrpc/rpc_pipe.c:185:
+	res = rpci->ops->upcall(filp, msg, buf, len);
 	                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#406: FILE: net/sunrpc/rpc_pipe.c:197:
+rpc_pipe_write(struct file *filp, const char *buf, size_t len, loff_t *offset)
                             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rpci->private"
#414: FILE: net/sunrpc/rpc_pipe.c:205:
+	if (rpci->private != NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#415: FILE: net/sunrpc/rpc_pipe.c:206:
+		res = rpci->ops->downcall(filp, buf, len);
 		                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#421: FILE: net/sunrpc/rpc_pipe.c:212:
+rpc_pipe_poll(struct file *filp, struct poll_table_struct *wait)
                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#427: FILE: net/sunrpc/rpc_pipe.c:218:
+	poll_wait(filp, &rpci->waitq, wait);
 	          ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rpci->private"
#430: FILE: net/sunrpc/rpc_pipe.c:221:
+	if (rpci->private == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#438: FILE: net/sunrpc/rpc_pipe.c:229:
+rpc_pipe_ioctl(struct inode *ino, struct file *filp,
                                                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: net/sunrpc/rpc_pipe.c:230:
+rpc_pipe_ioctl(struct inode *ino, struct file *filp,
+		unsigned int cmd, unsigned long arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: net/sunrpc/rpc_pipe.c:242:
+			struct rpc_pipe_msg *msg;
+			msg = (struct rpc_pipe_msg *)filp->private_data;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#460: FILE: net/sunrpc/rpc_pipe.c:251:
+struct inode_operations rpc_pipe_iops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#464: FILE: net/sunrpc/rpc_pipe.c:255:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#465: FILE: net/sunrpc/rpc_pipe.c:256:
+struct file_operations rpc_pipe_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: net/sunrpc/rpc_pipe.c:274:
+	seq_printf(m, "service: %s (%d) version %d\n", clnt->cl_protname,
+			clnt->cl_prog, clnt->cl_vers);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: net/sunrpc/rpc_pipe.c:276:
+	seq_printf(m, "address: %u.%u.%u.%u\n",
+			NIPQUAD(clnt->cl_xprt->addr.sin_addr.s_addr));

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: net/sunrpc/rpc_pipe.c:288:
+		struct seq_file *m = file->private_data;
+		down(&inode->i_sem);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#522: FILE: net/sunrpc/rpc_pipe.c:313:
+static struct file_operations rpc_info_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: net/sunrpc/rpc_pipe.c:320:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#531: FILE: net/sunrpc/rpc_pipe.c:322:
+/*
+ * We have a single directory with 1 node in it.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#543: FILE: net/sunrpc/rpc_pipe.c:334:
+/*
+ * Description of fs contents.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#547: FILE: net/sunrpc/rpc_pipe.c:338:
+	struct file_operations *i_fop;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#554: FILE: net/sunrpc/rpc_pipe.c:345:
+		.mode = S_IFDIR | S_IRUSR | S_IXUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#558: FILE: net/sunrpc/rpc_pipe.c:349:
+		.mode = S_IFDIR | S_IRUSR | S_IXUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#562: FILE: net/sunrpc/rpc_pipe.c:353:
+		.mode = S_IFDIR | S_IRUSR | S_IXUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#566: FILE: net/sunrpc/rpc_pipe.c:357:
+		.mode = S_IFDIR | S_IRUSR | S_IXUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#579: FILE: net/sunrpc/rpc_pipe.c:370:
+		.mode = S_IFREG | S_IRUSR,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#586: FILE: net/sunrpc/rpc_pipe.c:377:
+	struct vfsmount * mnt = NULL;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#629: FILE: net/sunrpc/rpc_pipe.c:420:
+rpc_lookup_path(char *path, struct nameidata *nd, int flags)
                                               ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#632: FILE: net/sunrpc/rpc_pipe.c:423:
+		printk(KERN_WARNING "%s: %s failed to mount "

WARNING:SPLIT_STRING: quoted string split across lines
#633: FILE: net/sunrpc/rpc_pipe.c:424:
+		printk(KERN_WARNING "%s: %s failed to mount "
+			       "pseudofilesystem \n", __FILE__, __FUNCTION__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#633: FILE: net/sunrpc/rpc_pipe.c:424:
+			       "pseudofilesystem \n", __FILE__, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#633: FILE: net/sunrpc/rpc_pipe.c:424:
+			       "pseudofilesystem \n", __FILE__, __FUNCTION__);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#641: FILE: net/sunrpc/rpc_pipe.c:432:
+	if (path_walk(path, nd)) {
 	                    ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#642: FILE: net/sunrpc/rpc_pipe.c:433:
+		printk(KERN_WARNING "%s: %s failed to find path %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: net/sunrpc/rpc_pipe.c:434:
+		printk(KERN_WARNING "%s: %s failed to find path %s\n",
+				__FILE__, __FUNCTION__, path);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#643: FILE: net/sunrpc/rpc_pipe.c:434:
+				__FILE__, __FUNCTION__, path);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#651: FILE: net/sunrpc/rpc_pipe.c:442:
+rpc_release_path(struct nameidata *nd)
                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#653: FILE: net/sunrpc/rpc_pipe.c:444:
+	path_release(nd);
 	             ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#661: FILE: net/sunrpc/rpc_pipe.c:452:
+	struct inode *inode = new_inode(sb);
+	if (!inode)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#664: FILE: net/sunrpc/rpc_pipe.c:455:
+	inode->i_uid = inode->i_gid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#667: FILE: net/sunrpc/rpc_pipe.c:458:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#668: FILE: net/sunrpc/rpc_pipe.c:459:
+	switch(mode & S_IFMT) {
+		case S_IFDIR:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#668: FILE: net/sunrpc/rpc_pipe.c:459:
+	switch(mode & S_IFMT) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#680: FILE: net/sunrpc/rpc_pipe.c:471:
+/*
+ * FIXME: This probably has races.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: net/sunrpc/rpc_pipe.c:505:
+rpc_populate(struct dentry *dir,
+		struct rpc_filelist *files,

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: net/sunrpc/rpc_pipe.c:513:
+	int mode, i;
+	for (i = start; i < eof; i++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#746: FILE: net/sunrpc/rpc_pipe.c:537:
+	printk(KERN_WARNING "%s: %s failed to populate directory %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: net/sunrpc/rpc_pipe.c:538:
+	printk(KERN_WARNING "%s: %s failed to populate directory %s\n",
+			__FILE__, __FUNCTION__, dir->d_name.name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#747: FILE: net/sunrpc/rpc_pipe.c:538:
+			__FILE__, __FUNCTION__, dir->d_name.name);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#756: FILE: net/sunrpc/rpc_pipe.c:547:
+	inode = rpc_get_inode(dir->i_sb, S_IFDIR | S_IRUSR | S_IXUSR);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#766: FILE: net/sunrpc/rpc_pipe.c:557:
+	printk(KERN_WARNING "%s: %s failed to allocate inode for dentry %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: net/sunrpc/rpc_pipe.c:558:
+	printk(KERN_WARNING "%s: %s failed to allocate inode for dentry %s\n",
+			__FILE__, __FUNCTION__, dentry->d_name.name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#767: FILE: net/sunrpc/rpc_pipe.c:558:
+			__FILE__, __FUNCTION__, dentry->d_name.name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#777: FILE: net/sunrpc/rpc_pipe.c:568:
+	if ((error = simple_rmdir(dir, dentry)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#788: FILE: net/sunrpc/rpc_pipe.c:579:
+rpc_lookup_negative(char *path, struct nameidata *nd)
                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#794: FILE: net/sunrpc/rpc_pipe.c:585:
+	if ((error = rpc_lookup_path(path, nd, LOOKUP_PARENT)) != 0)
 	                                   ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#794: FILE: net/sunrpc/rpc_pipe.c:585:
+	if ((error = rpc_lookup_path(path, nd, LOOKUP_PARENT)) != 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#809: FILE: net/sunrpc/rpc_pipe.c:600:
+	rpc_release_path(nd);
 	                 ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#813: FILE: net/sunrpc/rpc_pipe.c:604:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#817: FILE: net/sunrpc/rpc_pipe.c:608:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#822: FILE: net/sunrpc/rpc_pipe.c:613:
+	dentry = rpc_lookup_negative(path, &nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#825: FILE: net/sunrpc/rpc_pipe.c:616:
+	dir = nd.dentry->d_inode;
 	      ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#826: FILE: net/sunrpc/rpc_pipe.c:617:
+	if ((error = __rpc_mkdir(dir, dentry)) != 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: net/sunrpc/rpc_pipe.c:621:
+	error = rpc_populate(dentry, authfiles,
+			RPCAUTH_info, RPCAUTH_EOF);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#835: FILE: net/sunrpc/rpc_pipe.c:626:
+	rpc_release_path(&nd);
 	                  ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#842: FILE: net/sunrpc/rpc_pipe.c:633:
+	printk(KERN_WARNING "%s: %s() failed to create directory %s (errno = %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: net/sunrpc/rpc_pipe.c:634:
+	printk(KERN_WARNING "%s: %s() failed to create directory %s (errno = %d)\n",
+			__FILE__, __FUNCTION__, path, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#843: FILE: net/sunrpc/rpc_pipe.c:634:
+			__FILE__, __FUNCTION__, path, error);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#851: FILE: net/sunrpc/rpc_pipe.c:642:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#856: FILE: net/sunrpc/rpc_pipe.c:647:
+	if ((error = rpc_lookup_path(path, &nd, LOOKUP_PARENT)) != 0)
 	                                    ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#856: FILE: net/sunrpc/rpc_pipe.c:647:
+	if ((error = rpc_lookup_path(path, &nd, LOOKUP_PARENT)) != 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#858: FILE: net/sunrpc/rpc_pipe.c:649:
+	dir = nd.dentry->d_inode;
 	      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#860: FILE: net/sunrpc/rpc_pipe.c:651:
+	dentry = lookup_hash(&nd.last, nd.dentry);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#860: FILE: net/sunrpc/rpc_pipe.c:651:
+	dentry = lookup_hash(&nd.last, nd.dentry);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#870: FILE: net/sunrpc/rpc_pipe.c:661:
+	rpc_release_path(&nd);
 	                  ^^

WARNING:CONST_STRUCT: struct rpc_pipe_ops should normally be const
#875: FILE: net/sunrpc/rpc_pipe.c:666:
+rpc_mkpipe(char *path, void *private, struct rpc_pipe_ops *ops)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#877: FILE: net/sunrpc/rpc_pipe.c:668:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#882: FILE: net/sunrpc/rpc_pipe.c:673:
+	dentry = rpc_lookup_negative(path, &nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#885: FILE: net/sunrpc/rpc_pipe.c:676:
+	dir = nd.dentry->d_inode;
 	      ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#886: FILE: net/sunrpc/rpc_pipe.c:677:
+	inode = rpc_get_inode(dir->i_sb, S_IFSOCK | S_IRUSR | S_IXUSR);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#898: FILE: net/sunrpc/rpc_pipe.c:689:
+	rpc_release_path(&nd);
 	                  ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#903: FILE: net/sunrpc/rpc_pipe.c:694:
+	printk(KERN_WARNING "%s: %s() failed to create pipe %s (errno = %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: net/sunrpc/rpc_pipe.c:695:
+	printk(KERN_WARNING "%s: %s() failed to create pipe %s (errno = %d)\n",
+			__FILE__, __FUNCTION__, path, -ENOMEM);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#904: FILE: net/sunrpc/rpc_pipe.c:695:
+			__FILE__, __FUNCTION__, path, -ENOMEM);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#911: FILE: net/sunrpc/rpc_pipe.c:702:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#916: FILE: net/sunrpc/rpc_pipe.c:707:
+	if ((error = rpc_lookup_path(path, &nd, LOOKUP_PARENT)) != 0)
 	                                    ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#916: FILE: net/sunrpc/rpc_pipe.c:707:
+	if ((error = rpc_lookup_path(path, &nd, LOOKUP_PARENT)) != 0)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#918: FILE: net/sunrpc/rpc_pipe.c:709:
+	dir = nd.dentry->d_inode;
 	      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#920: FILE: net/sunrpc/rpc_pipe.c:711:
+	dentry = lookup_hash(&nd.last, nd.dentry);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#920: FILE: net/sunrpc/rpc_pipe.c:711:
+	dentry = lookup_hash(&nd.last, nd.dentry);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#934: FILE: net/sunrpc/rpc_pipe.c:725:
+	rpc_release_path(&nd);
 	                  ^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#939: FILE: net/sunrpc/rpc_pipe.c:730:
+/*
+ * populate the filesystem

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#965: FILE: net/sunrpc/rpc_pipe.c:756:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: net/sunrpc/rpc_pipe.c:771:
+rpc_get_sb(struct file_system_type *fs_type,
+		int flags, char *dev_name, void *data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#993: FILE: net/sunrpc/rpc_pipe.c:784:
+init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#993: FILE: net/sunrpc/rpc_pipe.c:784:
+init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:SPACING: No space is necessary after a cast
#995: FILE: net/sunrpc/rpc_pipe.c:786:
+	struct rpc_inode *rpci = (struct rpc_inode *) foo;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#997: FILE: net/sunrpc/rpc_pipe.c:788:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1012: FILE: net/sunrpc/rpc_pipe.c:803:
+                                             sizeof(struct rpc_inode),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: net/sunrpc/rpc_pipe.c:803:
+	rpc_inode_cachep = kmem_cache_create("rpc_inode_cache",
+                                             sizeof(struct rpc_inode),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: net/sunrpc/rpc_pipe.c:803:
+                                             sizeof(struct rpc_inode),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1013: FILE: net/sunrpc/rpc_pipe.c:804:
+                                             0, SLAB_HWCACHE_ALIGN,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: net/sunrpc/rpc_pipe.c:804:
+                                             0, SLAB_HWCACHE_ALIGN,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1014: FILE: net/sunrpc/rpc_pipe.c:805:
+                                             init_once, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: net/sunrpc/rpc_pipe.c:805:
+                                             init_once, NULL);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1024: FILE: net/sunrpc/rpc_pipe.c:815:
+		printk(KERN_WARNING "RPC: unable to free inode cache\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1051: FILE: net/sunrpc/sunrpc_syms.c:57:
+EXPORT_SYMBOL(rpc_wake_up);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1052: FILE: net/sunrpc/sunrpc_syms.c:58:
+EXPORT_SYMBOL(rpc_queue_upcall);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1053: FILE: net/sunrpc/sunrpc_syms.c:59:
+EXPORT_SYMBOL(rpc_mkpipe);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1054: FILE: net/sunrpc/sunrpc_syms.c:60:
+EXPORT_SYMBOL(__rpc_purge_current_upcall);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1063: FILE: net/sunrpc/sunrpc_syms.c:137:
+extern void unregister_rpc_pipefs(void);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1071: FILE: net/sunrpc/sunrpc_syms.c:143:
+	int err = register_rpc_pipefs();
+	if (err)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 111 warnings, 40 checks, 1018 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
