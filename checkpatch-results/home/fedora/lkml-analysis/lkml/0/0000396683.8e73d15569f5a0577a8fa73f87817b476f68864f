WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#	           ChangeSet	1.956   -> 1.957  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#	   arch/i386/Kconfig	1.34    -> 1.35   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#	arch/i386/kernel/Makefile	1.32    -> 1.33   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#	               (new)	        -> 1.1     include/asm-i386/kirq.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#	               (new)	        -> 1.1     arch/i386/kernel/kirq.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# 03/01/20	rusty@vmhack.(none)	1.957

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# Adds KIRQ implementation which enables arbitrary interrupt callbacks

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# to be hooked into.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#64: 
--- a/arch/i386/Kconfig	Mon Jan 20 08:44:57 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#70: FILE: arch/i386/Kconfig:1548:
+config KIRQ
+	bool "Kernel Irq interceptor for X86(experimental)"
+	depends on DEBUG_KERNEL && EXPERIMENTAL
+	help
+	  This option enable an IRQ interceptor. You can get the control
+	  before any specified ISR is executing and decide whether it
+	  should be executing through "register_kirq/unregister_kirq".
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: arch/i386/kernel/kirq.c:1:
+/* Support for kernel irq interceptor.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#106: FILE: arch/i386/kernel/kirq.c:2:
+/* Support for kernel irq interceptor.
+   (C) 2002 Stanley Wang <stanley.wang@intel.com>.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#120: FILE: arch/i386/kernel/kirq.c:16:
+struct kirq kirq_list[NR_IRQS] =
+	{ [0 ... NR_IRQS-1] = { NULL, NULL, NULL}};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#120: FILE: arch/i386/kernel/kirq.c:16:
+	{ [0 ... NR_IRQS-1] = { NULL, NULL, NULL}};
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: arch/i386/kernel/kirq.c:22:
+	struct kirq *p = kirq_list + irq;
+	if (p->handler != NULL){

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#126: FILE: arch/i386/kernel/kirq.c:22:
+	if (p->handler != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->handler"
#126: FILE: arch/i386/kernel/kirq.c:22:
+	if (p->handler != NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->handler
#127: FILE: arch/i386/kernel/kirq.c:23:
+		i = (*(p->handler))(p, irq, dev_id, regs);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space prohibited after that open parenthesis '('
#128: FILE: arch/i386/kernel/kirq.c:24:
+		if ( i == 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#128: FILE: arch/i386/kernel/kirq.c:24:
+		if ( i == 0 )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->isr
#129: FILE: arch/i386/kernel/kirq.c:25:
+			(*(p->isr))(irq, dev_id, regs);

ERROR:SPACING: space required before the open brace '{'
#130: FILE: arch/i386/kernel/kirq.c:26:
+	}else{

ERROR:SPACING: space required after that close brace '}'
#130: FILE: arch/i386/kernel/kirq.c:26:
+	}else{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#131: FILE: arch/i386/kernel/kirq.c:27:
+		printk(KERN_ERR "%s: Dropping unexpected interrupt #%i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: arch/i386/kernel/kirq.c:28:
+		printk(KERN_ERR "%s: Dropping unexpected interrupt #%i\n",
+				__FUNCTION__, irq);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#132: FILE: arch/i386/kernel/kirq.c:28:
+				__FUNCTION__, irq);

WARNING:RETURN_VOID: void function return statements are not generally useful
#135: FILE: arch/i386/kernel/kirq.c:31:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: arch/i386/kernel/kirq.c:39:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handler"
#144: FILE: arch/i386/kernel/kirq.c:40:
+	if (handler == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#145: FILE: arch/i386/kernel/kirq.c:41:
+		printk(KERN_ERR "%s: Missing handler!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#145: FILE: arch/i386/kernel/kirq.c:41:
+		printk(KERN_ERR "%s: Missing handler!\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#150: FILE: arch/i386/kernel/kirq.c:46:
+		printk(KERN_ERR "%s: KIRQ was regitsered already!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#150: FILE: arch/i386/kernel/kirq.c:46:
+		printk(KERN_ERR "%s: KIRQ was regitsered already!\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: arch/i386/kernel/kirq.c:49:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: arch/i386/kernel/kirq.c:50:
+	spin_lock_irqsave(&desc->lock,flags);
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: arch/i386/kernel/kirq.c:51:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#158: FILE: arch/i386/kernel/kirq.c:54:
+		if (strcmp(action->name,devname)) {
 		                       ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#158: FILE: arch/i386/kernel/kirq.c:54:
+		if (strcmp(action->name,devname)) {
[...]
+		}else{
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#160: FILE: arch/i386/kernel/kirq.c:56:
+		}else{

ERROR:SPACING: space required after that close brace '}'
#160: FILE: arch/i386/kernel/kirq.c:56:
+		}else{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#166: FILE: arch/i386/kernel/kirq.c:62:
+		spin_unlock_irqrestore(&desc->lock,flags);
 		                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: arch/i386/kernel/kirq.c:63:
+^I^Ireturn -1; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: arch/i386/kernel/kirq.c:69:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: arch/i386/kernel/kirq.c:71:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: arch/i386/kernel/kirq.c:72:
+	spin_unlock_irqrestore(&desc->lock,flags);
 	                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: arch/i386/kernel/kirq.c:83:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: arch/i386/kernel/kirq.c:84:
+	spin_lock_irqsave(&desc->lock,flags);
 	                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: arch/i386/kernel/kirq.c:85:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#191: FILE: arch/i386/kernel/kirq.c:87:
+	while ( action && action->dev_id != p->dev_id) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#191: FILE: arch/i386/kernel/kirq.c:87:
+	while ( action && action->dev_id != p->dev_id) {
+		action = action->next;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#196: FILE: arch/i386/kernel/kirq.c:92:
+		printk(KERN_ERR "%s: Unregister KIRQ failed!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#196: FILE: arch/i386/kernel/kirq.c:92:
+		printk(KERN_ERR "%s: Unregister KIRQ failed!\n", __FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#197: FILE: arch/i386/kernel/kirq.c:93:
+		spin_unlock_irqrestore(&desc->lock,flags);
 		                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: arch/i386/kernel/kirq.c:98:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/i386/kernel/kirq.c:102:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: arch/i386/kernel/kirq.c:103:
+	spin_unlock_irqrestore(&desc->lock,flags);
 	                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: arch/i386/kernel/kirq.c:111:
+	struct kirq *p = kirq_list + irq;
+	if (p->isr != NULL){

ERROR:SPACING: space required before the open brace '{'
#215: FILE: arch/i386/kernel/kirq.c:111:
+	if (p->isr != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->isr"
#215: FILE: arch/i386/kernel/kirq.c:111:
+	if (p->isr != NULL){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->isr
#216: FILE: arch/i386/kernel/kirq.c:112:
+		(*(p->isr))(irq, p->dev_id, regs);

ERROR:SPACING: space required before the open brace '{'
#217: FILE: arch/i386/kernel/kirq.c:113:
+	}else{

ERROR:SPACING: space required after that close brace '}'
#217: FILE: arch/i386/kernel/kirq.c:113:
+	}else{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#218: FILE: arch/i386/kernel/kirq.c:114:
+		printk(KERN_ERR "%s: Dropping wrong interrupt #%i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: arch/i386/kernel/kirq.c:115:
+		printk(KERN_ERR "%s: Dropping wrong interrupt #%i\n",
+				__FUNCTION__, irq);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#219: FILE: arch/i386/kernel/kirq.c:115:
+				__FUNCTION__, irq);

WARNING:RETURN_VOID: void function return statements are not generally useful
#222: FILE: arch/i386/kernel/kirq.c:118:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#224: FILE: arch/i386/kernel/kirq.c:120:
+EXPORT_SYMBOL_GPL(register_kirq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#225: FILE: arch/i386/kernel/kirq.c:121:
+EXPORT_SYMBOL_GPL(unregister_kirq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#226: FILE: arch/i386/kernel/kirq.c:122:
+EXPORT_SYMBOL_GPL(dispatch_kirq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#232: FILE: include/asm-i386/kirq.h:1:
+#ifndef _ASM_KIRQ_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: include/asm-i386/kirq.h:11:
+typedef int (*kirq_handler_t)(struct kirq *, int, void *, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#246: FILE: include/asm-i386/kirq.h:15:
+	void (*isr)(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#246: FILE: include/asm-i386/kirq.h:15:
+	void (*isr)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#246: FILE: include/asm-i386/kirq.h:15:
+	void (*isr)(int, void *, struct pt_regs *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: include/asm-i386/kirq.h:20:
+extern int register_kirq(int irq, char *devname, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/asm-i386/kirq.h:20:
+extern int register_kirq(int irq, char *devname, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: include/asm-i386/kirq.h:22:
+extern int unregister_kirq(int irq);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#254: FILE: include/asm-i386/kirq.h:23:
+extern void dispatch_kirq(int irq, struct pt_regs* regs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/asm-i386/kirq.h:23:
+extern void dispatch_kirq(int irq, struct pt_regs* regs);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#256: FILE: include/asm-i386/kirq.h:25:
+void dispatch_kirq(int irq, struct pt_regs* regs) {}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 44 warnings, 12 checks, 179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
