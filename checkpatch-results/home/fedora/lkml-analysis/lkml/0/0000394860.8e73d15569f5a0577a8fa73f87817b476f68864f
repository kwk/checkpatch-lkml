WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
This patch contains several small changes primarly to get in the right position 

WARNING:TYPO_SPELLING: 'primarly' may be misspelled - perhaps 'primarily'?
#26: 
This patch contains several small changes primarly to get in the right position 
                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'remaing' may be misspelled - perhaps 'remaining'?
#27: 
for the remaing patches in the series.  It includes pnp.h and makefile changes.
        ^^^^^^^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#34: 
--- a/drivers/pnp/Makefile	Sun Feb  9 10:18:34 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'ohter' may be misspelled - perhaps 'other'?
#73: FILE: drivers/pnp/base.h:17:
+#define CONFLICT_TYPE_INTERNAL	0x0010	/* resources within the device conflict with each ohter */
                               	      	                                                  ^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: drivers/pnp/base.h:25:
+struct pnp_dev * pnp_check_port_conflicts(struct pnp_dev * dev, int idx, int mode);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: drivers/pnp/base.h:25:
+struct pnp_dev * pnp_check_port_conflicts(struct pnp_dev * dev, int idx, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#82: FILE: drivers/pnp/base.h:26:
+int pnp_check_port(struct pnp_dev * dev, int idx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: drivers/pnp/base.h:27:
+struct pnp_dev * pnp_check_mem_conflicts(struct pnp_dev * dev, int idx, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: drivers/pnp/base.h:27:
+struct pnp_dev * pnp_check_mem_conflicts(struct pnp_dev * dev, int idx, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: drivers/pnp/base.h:28:
+int pnp_check_mem(struct pnp_dev * dev, int idx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: drivers/pnp/base.h:29:
+struct pnp_dev * pnp_check_irq_conflicts(struct pnp_dev * dev, int idx, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: drivers/pnp/base.h:29:
+struct pnp_dev * pnp_check_irq_conflicts(struct pnp_dev * dev, int idx, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: drivers/pnp/base.h:30:
+int pnp_check_irq(struct pnp_dev * dev, int idx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: drivers/pnp/base.h:31:
+struct pnp_dev * pnp_check_dma_conflicts(struct pnp_dev * dev, int idx, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: drivers/pnp/base.h:31:
+struct pnp_dev * pnp_check_dma_conflicts(struct pnp_dev * dev, int idx, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: drivers/pnp/base.h:32:
+int pnp_check_dma(struct pnp_dev * dev, int idx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: drivers/pnp/card.c:25:
+static const struct pnp_card_id * match_card(struct pnpc_driver *drv, struct pnp_card *card)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#117: FILE: drivers/pnp/card.c:223:
+			if(pnp_activate_dev(dev)<0) {
 			                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#117: FILE: drivers/pnp/card.c:223:
+			if(pnp_activate_dev(dev)<0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#181: FILE: drivers/pnp/core.c:173:
+	printk(KERN_INFO "Linux Plug and Play Support v0.95 (c) Adam Belay\n");

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#193: FILE: drivers/pnp/driver.c:98:
+	pnp_dbg("match found with the PnP device '%s' and the driver '%s'", dev->bus_id,pnp_drv->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: drivers/pnp/driver.c:98:
+	pnp_dbg("match found with the PnP device '%s' and the driver '%s'", dev->bus_id,pnp_drv->name);
 	                                                                               ^

CHECK:BRACES: Unbalanced braces around else statement
#318: FILE: drivers/pnp/resource.c:52:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#326: FILE: drivers/pnp/resource.c:58:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#482: FILE: drivers/pnp/resource.c:249:
+ * condition 3: check if b is engulfed by a */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'starta' - possible side-effects?
#484: FILE: drivers/pnp/resource.c:251:
+#define ranged_conflict(starta, enda, startb, endb) \
+((*(starta) >= *(startb) && *(starta) <= *(endb)) || \
+ (*(enda) >= *(startb) && *(enda) <= *(endb)) || \
+ (*(starta) < *(startb) && *(enda) > *(endb)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'enda' - possible side-effects?
#484: FILE: drivers/pnp/resource.c:251:
+#define ranged_conflict(starta, enda, startb, endb) \
+((*(starta) >= *(startb) && *(starta) <= *(endb)) || \
+ (*(enda) >= *(startb) && *(enda) <= *(endb)) || \
+ (*(starta) < *(startb) && *(enda) > *(endb)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'startb' - possible side-effects?
#484: FILE: drivers/pnp/resource.c:251:
+#define ranged_conflict(starta, enda, startb, endb) \
+((*(starta) >= *(startb) && *(starta) <= *(endb)) || \
+ (*(enda) >= *(startb) && *(enda) <= *(endb)) || \
+ (*(starta) < *(startb) && *(enda) > *(endb)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'endb' - possible side-effects?
#484: FILE: drivers/pnp/resource.c:251:
+#define ranged_conflict(starta, enda, startb, endb) \
+((*(starta) >= *(startb) && *(starta) <= *(endb)) || \
+ (*(enda) >= *(startb) && *(enda) <= *(endb)) || \
+ (*(starta) < *(startb) && *(enda) > *(endb)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/pnp/resource.c:253:
+ (*(enda) >= *(startb) && *(enda) <= *(endb)) || \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: drivers/pnp/resource.c:254:
+ (*(starta) < *(startb) && *(enda) > *(endb)))$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#489: FILE: drivers/pnp/resource.c:256:
+struct pnp_dev * pnp_check_port_conflicts(struct pnp_dev * dev, int idx, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#489: FILE: drivers/pnp/resource.c:256:
+struct pnp_dev * pnp_check_port_conflicts(struct pnp_dev * dev, int idx, int mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: drivers/pnp/resource.c:261:
+	struct pnp_dev *tdev;
+	port = &dev->res.port_resource[idx].start;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: drivers/pnp/resource.c:277:
+				if (ranged_conflict(port,end,tport,tend))
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: drivers/pnp/resource.c:277:
+				if (ranged_conflict(port,end,tport,tend))
 				                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: drivers/pnp/resource.c:277:
+				if (ranged_conflict(port,end,tport,tend))
 				                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#549: FILE: drivers/pnp/resource.c:285:
+int pnp_check_port(struct pnp_dev * dev, int idx)

WARNING:LINE_SPACING: Missing a blank line after declarations
#553: FILE: drivers/pnp/resource.c:289:
+	unsigned long *port, *end, *tport, *tend;
+	port = &dev->res.port_resource[idx].start;

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#560: FILE: drivers/pnp/resource.c:296:
+	/* check if the resource is already in use, skip if the device is active because it itself may be in use */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#561: FILE: drivers/pnp/resource.c:297:
+	if(!dev->active) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#562: FILE: drivers/pnp/resource.c:298:
+		if (check_region(*port, length(port,end)))
 		                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#570: FILE: drivers/pnp/resource.c:306:
+		int rend = pnp_reserve_io[(tmp << 1) + 1] + rport - 1;
+		if (ranged_conflict(port,end,&rport,&rend))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#570: FILE: drivers/pnp/resource.c:306:
+		if (ranged_conflict(port,end,&rport,&rend))
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#570: FILE: drivers/pnp/resource.c:306:
+		if (ranged_conflict(port,end,&rport,&rend))
 		                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#570: FILE: drivers/pnp/resource.c:306:
+		if (ranged_conflict(port,end,&rport,&rend))
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#570: FILE: drivers/pnp/resource.c:306:
+		if (ranged_conflict(port,end,&rport,&rend))
 		                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#570: FILE: drivers/pnp/resource.c:306:
+		if (ranged_conflict(port,end,&rport,&rend))
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: drivers/pnp/resource.c:315:
+			if (ranged_conflict(port,end,tport,tend))
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: drivers/pnp/resource.c:315:
+			if (ranged_conflict(port,end,tport,tend))
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: drivers/pnp/resource.c:315:
+			if (ranged_conflict(port,end,tport,tend))
 			                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#592: FILE: drivers/pnp/resource.c:327:
+struct pnp_dev * pnp_check_mem_conflicts(struct pnp_dev * dev, int idx, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#592: FILE: drivers/pnp/resource.c:327:
+struct pnp_dev * pnp_check_mem_conflicts(struct pnp_dev * dev, int idx, int mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#622: FILE: drivers/pnp/resource.c:332:
+	struct pnp_dev *tdev;
+	addr = &dev->res.mem_resource[idx].start;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/pnp/resource.c:348:
+				if (ranged_conflict(addr,end,taddr,tend))
 				                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/pnp/resource.c:348:
+				if (ranged_conflict(addr,end,taddr,tend))
 				                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/pnp/resource.c:348:
+				if (ranged_conflict(addr,end,taddr,tend))
 				                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#655: FILE: drivers/pnp/resource.c:356:
+int pnp_check_mem(struct pnp_dev * dev, int idx)

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: drivers/pnp/resource.c:360:
+	unsigned long *addr, *end, *taddr, *tend;
+	addr = &dev->res.mem_resource[idx].start;

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#666: FILE: drivers/pnp/resource.c:367:
+	/* check if the resource is already in use, skip if the device is active because it itself may be in use */

ERROR:SPACING: space required before the open parenthesis '('
#667: FILE: drivers/pnp/resource.c:368:
+	if(!dev->active) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#668: FILE: drivers/pnp/resource.c:369:
+		if (__check_region(&iomem_resource, *addr, length(addr,end)))
 		                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#676: FILE: drivers/pnp/resource.c:377:
+		int rend = pnp_reserve_mem[(tmp << 1) + 1] + raddr - 1;
+		if (ranged_conflict(addr,end,&raddr,&rend))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#676: FILE: drivers/pnp/resource.c:377:
+		if (ranged_conflict(addr,end,&raddr,&rend))
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#676: FILE: drivers/pnp/resource.c:377:
+		if (ranged_conflict(addr,end,&raddr,&rend))
 		                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#676: FILE: drivers/pnp/resource.c:377:
+		if (ranged_conflict(addr,end,&raddr,&rend))
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#676: FILE: drivers/pnp/resource.c:377:
+		if (ranged_conflict(addr,end,&raddr,&rend))
 		                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#676: FILE: drivers/pnp/resource.c:377:
+		if (ranged_conflict(addr,end,&raddr,&rend))
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: drivers/pnp/resource.c:386:
+			if (ranged_conflict(addr,end,taddr,tend))
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: drivers/pnp/resource.c:386:
+			if (ranged_conflict(addr,end,taddr,tend))
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: drivers/pnp/resource.c:386:
+			if (ranged_conflict(addr,end,taddr,tend))
 			                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#697: FILE: drivers/pnp/resource.c:398:
+struct pnp_dev * pnp_check_irq_conflicts(struct pnp_dev * dev, int idx, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#697: FILE: drivers/pnp/resource.c:398:
+struct pnp_dev * pnp_check_irq_conflicts(struct pnp_dev * dev, int idx, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#700: FILE: drivers/pnp/resource.c:401:
+	struct pnp_dev * tdev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#701: FILE: drivers/pnp/resource.c:402:
+	unsigned long * irq = &dev->res.irq_resource[idx].start;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tdev->res.irq_resource[tmp].start == *irq'
#714: FILE: drivers/pnp/resource.c:415:
+				if ((tdev->res.irq_resource[tmp].start == *irq))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#714: FILE: drivers/pnp/resource.c:415:
+				if ((tdev->res.irq_resource[tmp].start == *irq))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#727: FILE: drivers/pnp/resource.c:427:
+int pnp_check_irq(struct pnp_dev * dev, int idx)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#749: FILE: drivers/pnp/resource.c:430:
+	unsigned long * irq = &dev->res.irq_resource[idx].start;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#780: FILE: drivers/pnp/resource.c:457:
+		struct pci_dev * pci;

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#816: FILE: drivers/pnp/resource.c:465:
+	/* check if the resource is already in use, skip if the device is active because it itself may be in use */

ERROR:SPACING: space required before the open parenthesis '('
#817: FILE: drivers/pnp/resource.c:466:
+	if(!dev->active) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#894: FILE: drivers/pnp/resource.c:480:
+struct pnp_dev * pnp_check_dma_conflicts(struct pnp_dev * dev, int idx, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#894: FILE: drivers/pnp/resource.c:480:
+struct pnp_dev * pnp_check_dma_conflicts(struct pnp_dev * dev, int idx, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#913: FILE: drivers/pnp/resource.c:483:
+	struct pnp_dev * tdev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#914: FILE: drivers/pnp/resource.c:484:
+	unsigned long * dma = &dev->res.dma_resource[idx].start;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tdev->res.dma_resource[tmp].start == *dma'
#933: FILE: drivers/pnp/resource.c:497:
+				if ((tdev->res.dma_resource[tmp].start == *dma))

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#933: FILE: drivers/pnp/resource.c:497:
+				if ((tdev->res.dma_resource[tmp].start == *dma))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#943: FILE: drivers/pnp/resource.c:505:
+int pnp_check_dma(struct pnp_dev * dev, int idx)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#957: FILE: drivers/pnp/resource.c:508:
+	unsigned long * dma = &dev->res.dma_resource[idx].start;

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#1023: FILE: drivers/pnp/resource.c:534:
+	/* check if the resource is already in use, skip if the device is active because it itself may be in use */

ERROR:SPACING: space required before the open parenthesis '('
#1024: FILE: drivers/pnp/resource.c:535:
+	if(!dev->active) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1065: FILE: drivers/pnp/resource.c:547:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1099: FILE: drivers/pnp/resource.c:557:
+	int idx;
+	for (idx = 0; idx < PNP_MAX_IRQ; idx++) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1136: FILE: drivers/pnp/resource.c:592:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1136: FILE: drivers/pnp/resource.c:592:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1378: FILE: drivers/pnp/resource.c:685:
+EXPORT_SYMBOL(pnp_generate_rule);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1391: FILE: drivers/pnp/system.c:56:
+	for (i=0;i<PNP_MAX_PORT;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1391: FILE: drivers/pnp/system.c:56:
+	for (i=0;i<PNP_MAX_PORT;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1391: FILE: drivers/pnp/system.c:56:
+	for (i=0;i<PNP_MAX_PORT;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1391: FILE: drivers/pnp/system.c:56:
+	for (i=0;i<PNP_MAX_PORT;i++) {
 	                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1427: FILE: include/linux/ioport.h:80:
+#define IORESOURCE_MEM_32BIT		(3<<3)
                             		  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1460: FILE: include/linux/pnp.h:32:
+#define pnp_port_start(dev,bar)   ((dev)->res.port_resource[(bar)].start)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1461: FILE: include/linux/pnp.h:33:
+#define pnp_port_end(dev,bar)     ((dev)->res.port_resource[(bar)].end)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1462: FILE: include/linux/pnp.h:34:
+#define pnp_port_flags(dev,bar)   ((dev)->res.port_resource[(bar)].flags)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1463: FILE: include/linux/pnp.h:35:
+#define pnp_port_valid(dev,bar)   (pnp_port_flags((dev),(bar)) & IORESOURCE_IO)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1463: FILE: include/linux/pnp.h:35:
+#define pnp_port_valid(dev,bar)   (pnp_port_flags((dev),(bar)) & IORESOURCE_IO)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1464: FILE: include/linux/pnp.h:36:
+#define pnp_port_len(dev,bar) \
                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1464: FILE: include/linux/pnp.h:36:
+#define pnp_port_len(dev,bar) \
+	((pnp_port_start((dev),(bar)) == 0 &&	\
+	  pnp_port_end((dev),(bar)) ==		\
+	  pnp_port_start((dev),(bar))) ? 0 :	\
+	  					\
+	 (pnp_port_end((dev),(bar)) -		\
+	  pnp_port_start((dev),(bar)) + 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1464: FILE: include/linux/pnp.h:36:
+#define pnp_port_len(dev,bar) \
+	((pnp_port_start((dev),(bar)) == 0 &&	\
+	  pnp_port_end((dev),(bar)) ==		\
+	  pnp_port_start((dev),(bar))) ? 0 :	\
+	  					\
+	 (pnp_port_end((dev),(bar)) -		\
+	  pnp_port_start((dev),(bar)) + 1))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1465: FILE: include/linux/pnp.h:37:
+	((pnp_port_start((dev),(bar)) == 0 &&	\
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1466: FILE: include/linux/pnp.h:38:
+	  pnp_port_end((dev),(bar)) ==		\
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1467: FILE: include/linux/pnp.h:39:
+	  pnp_port_start((dev),(bar))) ? 0 :	\
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1468: FILE: include/linux/pnp.h:40:
+^I  ^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1468: FILE: include/linux/pnp.h:40:
+^I  ^I^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1469: FILE: include/linux/pnp.h:41:
+	 (pnp_port_end((dev),(bar)) -		\
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1470: FILE: include/linux/pnp.h:42:
+	  pnp_port_start((dev),(bar)) + 1))
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1476: FILE: include/linux/pnp.h:44:
+#define pnp_mem_start(dev,bar)   ((dev)->res.mem_resource[(bar)].start)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1477: FILE: include/linux/pnp.h:45:
+#define pnp_mem_end(dev,bar)     ((dev)->res.mem_resource[(bar)].end)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1478: FILE: include/linux/pnp.h:46:
+#define pnp_mem_flags(dev,bar)   ((dev)->res.mem_resource[(bar)].flags)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1479: FILE: include/linux/pnp.h:47:
+#define pnp_mem_valid(dev,bar)   (pnp_mem_flags((dev),(bar)) & IORESOURCE_MEM)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1479: FILE: include/linux/pnp.h:47:
+#define pnp_mem_valid(dev,bar)   (pnp_mem_flags((dev),(bar)) & IORESOURCE_MEM)
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1480: FILE: include/linux/pnp.h:48:
+#define pnp_mem_len(dev,bar) \
                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1480: FILE: include/linux/pnp.h:48:
+#define pnp_mem_len(dev,bar) \
+	((pnp_mem_start((dev),(bar)) == 0 &&	\
+	  pnp_mem_end((dev),(bar)) ==		\
+	  pnp_mem_start((dev),(bar))) ? 0 :	\
+	  					\
+	 (pnp_mem_end((dev),(bar)) -		\
+	  pnp_mem_start((dev),(bar)) + 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bar' - possible side-effects?
#1480: FILE: include/linux/pnp.h:48:
+#define pnp_mem_len(dev,bar) \
+	((pnp_mem_start((dev),(bar)) == 0 &&	\
+	  pnp_mem_end((dev),(bar)) ==		\
+	  pnp_mem_start((dev),(bar))) ? 0 :	\
+	  					\
+	 (pnp_mem_end((dev),(bar)) -		\
+	  pnp_mem_start((dev),(bar)) + 1))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1481: FILE: include/linux/pnp.h:49:
+	((pnp_mem_start((dev),(bar)) == 0 &&	\
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1482: FILE: include/linux/pnp.h:50:
+	  pnp_mem_end((dev),(bar)) ==		\
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1483: FILE: include/linux/pnp.h:51:
+	  pnp_mem_start((dev),(bar))) ? 0 :	\
 	                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1484: FILE: include/linux/pnp.h:52:
+^I  ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1484: FILE: include/linux/pnp.h:52:
+^I  ^I^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1485: FILE: include/linux/pnp.h:53:
+	 (pnp_mem_end((dev),(bar)) -		\
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1486: FILE: include/linux/pnp.h:54:
+	  pnp_mem_start((dev),(bar)) + 1))
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1488: FILE: include/linux/pnp.h:56:
+#define pnp_irq(dev,bar)	 ((dev)->res.irq_resource[(bar)].start)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1489: FILE: include/linux/pnp.h:57:
+#define pnp_irq_flags(dev,bar)	 ((dev)->res.irq_resource[(bar)].flags)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1490: FILE: include/linux/pnp.h:58:
+#define pnp_irq_valid(dev,bar)   (pnp_irq_flags((dev),(bar)) & IORESOURCE_IRQ)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1490: FILE: include/linux/pnp.h:58:
+#define pnp_irq_valid(dev,bar)   (pnp_irq_flags((dev),(bar)) & IORESOURCE_IRQ)
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1492: FILE: include/linux/pnp.h:60:
+#define pnp_dma(dev,bar)	 ((dev)->res.dma_resource[(bar)].start)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1493: FILE: include/linux/pnp.h:61:
+#define pnp_dma_flags(dev,bar)	 ((dev)->res.dma_resource[(bar)].flags)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1494: FILE: include/linux/pnp.h:62:
+#define pnp_dma_valid(dev,bar)   (pnp_dma_flags((dev),(bar)) & IORESOURCE_DMA)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1494: FILE: include/linux/pnp.h:62:
+#define pnp_dma_valid(dev,bar)   (pnp_dma_flags((dev),(bar)) & IORESOURCE_DMA)
                                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1496: FILE: include/linux/pnp.h:64:
+#define PNP_PORT_FLAG_16BITADDR	(1<<0)
                                	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1496: FILE: include/linux/pnp.h:64:
+#define PNP_PORT_FLAG_16BITADDR	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1497: FILE: include/linux/pnp.h:65:
+#define PNP_PORT_FLAG_FIXED	(1<<1)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1497: FILE: include/linux/pnp.h:65:
+#define PNP_PORT_FLAG_FIXED	(1<<1)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1562: FILE: include/linux/pnp.h:130:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1580: FILE: include/linux/pnp.h:145:
+	struct pnpc_driver * driver;

ERROR:POINTER_LOCATION: "foo	      * bar" should be "foo	      *bar"
#1583: FILE: include/linux/pnp.h:148:
+	void	      * protocol_data;	/* Used to store protocol specific data */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1628: FILE: include/linux/pnp.h:197:
+	struct pnp_card * card;		/* card the device is attached to, none if NULL */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1629: FILE: include/linux/pnp.h:198:
+	struct pnp_driver * driver;

ERROR:POINTER_LOCATION: "foo		      * bar" should be "foo		      *bar"
#1631: FILE: include/linux/pnp.h:200:
+	struct pnp_id		      * id;		/* supported EISA IDs*/

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1632: FILE: include/linux/pnp.h:201:
+	struct pnp_resource_table	res;		/* contains the currently chosen resources */

ERROR:POINTER_LOCATION: "foo	      * bar" should be "foo	      *bar"
#1633: FILE: include/linux/pnp.h:202:
+	struct pnp_resources	      * possible;	/* a list of possible resources */

ERROR:POINTER_LOCATION: "foo	      * bar" should be "foo	      *bar"
#1634: FILE: include/linux/pnp.h:203:
+	struct pnp_rule_table	      * rule;		/* the current possible resource set */

WARNING:LONG_LINE_COMMENT: line length of 130 exceeds 100 columns
#1635: FILE: include/linux/pnp.h:204:
+	int 				config_mode;	/* flags that determine how the device's resources should be configured */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1635: FILE: include/linux/pnp.h:204:
+^Iint ^I^I^I^Iconfig_mode;^I/* flags that determine how the device's resources should be configured */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1651: FILE: include/linux/pnp.h:208:
+^Iint ^I^Iflags;^I^I/* used by protocols */$

ERROR:SPACING: space required before the open parenthesis '('
#1662: FILE: include/linux/pnp.h:217:
+	for((dev) = global_to_pnp_dev(pnp_global.next); \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1669: FILE: include/linux/pnp.h:224:
+#define pnp_dev_name(dev) (dev)->dev.name

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1669: FILE: include/linux/pnp.h:224:
+#define pnp_dev_name(dev) (dev)->dev.name

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#1678: FILE: include/linux/pnp.h:252:
+#define PNP_CONFIG_AUTO		0x0001	/* Use the Resource Configuration Engine to determine resource settings */

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#1681: FILE: include/linux/pnp.h:255:
+#define PNP_CONFIG_INVALID	0x0008	/* If this flag is set, the pnp layer will refuse to activate the device */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#1691: FILE: include/linux/pnp.h:270:
+#define pnp_can_configure(dev)	((!(dev)->active) && ((dev)->config_mode & PNP_CONFIG_AUTO) && \
+				 ((dev)->capabilities & PNP_CONFIGURABLE))

WARNING:SPACING: Unnecessary space before function pointer arguments
#1743: FILE: include/linux/pnp.h:323:
+	int  (*probe)  (struct pnp_card *card, const struct pnp_card_id *card_id);

ERROR:POINTER_LOCATION: "foo		      * bar" should be "foo		      *bar"
#1876: FILE: include/linux/pnp.h:337:
+	char		      * name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1904: FILE: include/linux/pnp.h:382:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1904: FILE: include/linux/pnp.h:382:
+int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1923: FILE: include/linux/pnp.h:398:
+int pnp_is_active(struct pnp_dev * dev);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1924: FILE: include/linux/pnp.h:399:
+unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1924: FILE: include/linux/pnp.h:399:
+unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1924: FILE: include/linux/pnp.h:399:
+unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1924: FILE: include/linux/pnp.h:399:
+unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1924: FILE: include/linux/pnp.h:399:
+unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1925: FILE: include/linux/pnp.h:400:
+unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1925: FILE: include/linux/pnp.h:400:
+unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1925: FILE: include/linux/pnp.h:400:
+unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1925: FILE: include/linux/pnp.h:400:
+unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1925: FILE: include/linux/pnp.h:400:
+unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1926: FILE: include/linux/pnp.h:401:
+unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1926: FILE: include/linux/pnp.h:401:
+unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1926: FILE: include/linux/pnp.h:401:
+unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1926: FILE: include/linux/pnp.h:401:
+unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1926: FILE: include/linux/pnp.h:401:
+unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1953: FILE: include/linux/pnp.h:425:
+static inline int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule) { return -ENODEV; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1953: FILE: include/linux/pnp.h:425:
+static inline int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule) { return -ENODEV; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1953: FILE: include/linux/pnp.h:425:
+static inline int pnp_generate_rule(struct pnp_dev * dev, int depnum, struct pnp_rule_table * rule) { return -ENODEV; }

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1960: FILE: include/linux/pnp.h:431:
+static inline int pnp_manual_config_dev(struct pnp_dev *dev, struct pnp_resource_table *res, int mode) { return -ENODEV; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1972: FILE: include/linux/pnp.h:441:
+static inline int pnp_is_active(struct pnp_dev * dev) { return -ENODEV; )

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1972: FILE: include/linux/pnp.h:441:
+static inline int pnp_is_active(struct pnp_dev * dev) { return -ENODEV; )

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1972: FILE: include/linux/pnp.h:441:
+static inline int pnp_is_active(struct pnp_dev * dev) { return -ENODEV; )

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#1973: FILE: include/linux/pnp.h:442:
+static inline unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1973: FILE: include/linux/pnp.h:442:
+static inline unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1973: FILE: include/linux/pnp.h:442:
+static inline unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1973: FILE: include/linux/pnp.h:442:
+static inline unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1973: FILE: include/linux/pnp.h:442:
+static inline unsigned char * pnp_parse_current_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; }

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#1974: FILE: include/linux/pnp.h:443:
+static inline unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1974: FILE: include/linux/pnp.h:443:
+static inline unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1974: FILE: include/linux/pnp.h:443:
+static inline unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1974: FILE: include/linux/pnp.h:443:
+static inline unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1974: FILE: include/linux/pnp.h:443:
+static inline unsigned char * pnp_parse_possible_resources(unsigned char * p, unsigned char * end, struct pnp_dev * dev) { return NULL; }

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#1975: FILE: include/linux/pnp.h:444:
+static inline unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1975: FILE: include/linux/pnp.h:444:
+static inline unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1975: FILE: include/linux/pnp.h:444:
+static inline unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1975: FILE: include/linux/pnp.h:444:
+static inline unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1975: FILE: include/linux/pnp.h:444:
+static inline unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; )

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1975: FILE: include/linux/pnp.h:444:
+static inline unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1975: FILE: include/linux/pnp.h:444:
+static inline unsigned char * pnp_write_resources(unsigned char * p, unsigned char * end, struct pnp_resource_table * res) { return NULL; )

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1996: FILE: include/linux/pnp.h:480:
+#define pnp_err(format, arg...) printk(KERN_ERR "pnp: " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1996: FILE: include/linux/pnp.h:480:
+#define pnp_err(format, arg...) printk(KERN_ERR "pnp: " format "\n" , ## arg)
                                                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1997: FILE: include/linux/pnp.h:481:
+#define pnp_info(format, arg...) printk(KERN_INFO "pnp: " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1997: FILE: include/linux/pnp.h:481:
+#define pnp_info(format, arg...) printk(KERN_INFO "pnp: " format "\n" , ## arg)
                                                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1998: FILE: include/linux/pnp.h:482:
+#define pnp_warn(format, arg...) printk(KERN_WARNING "pnp: " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1998: FILE: include/linux/pnp.h:482:
+#define pnp_warn(format, arg...) printk(KERN_WARNING "pnp: " format "\n" , ## arg)
                                                                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 149 errors, 43 warnings, 21 checks, 1883 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
