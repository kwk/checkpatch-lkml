WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
I assume the task_lock is to prevent another process (on SMP or preempt) from 

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#146: FILE: security/selinux/hooks.c:1749:
+static void selinux_bprm_apply_creds(struct linux_binprm *bprm)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#164: FILE: security/selinux/hooks.c:2564:
+	   upon context transitions. See selinux_bprm_apply_creds. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#184: FILE: security/commoncap.c:124:
+void cap_bprm_apply_creds (struct linux_binprm *bprm)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#184: FILE: security/commoncap.c:124:
+void cap_bprm_apply_creds (struct linux_binprm *bprm)
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: security/commoncap.c:138:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#197: FILE: security/commoncap.c:140:
+		if (must_not_trace_exec(current)
+		    || atomic_read(&current->fs->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#198: FILE: security/commoncap.c:141:
+		    || atomic_read(&current->fs->count) > 1
+		    || atomic_read(&current->files->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#199: FILE: security/commoncap.c:142:
+		    || atomic_read(&current->files->count) > 1
+		    || atomic_read(&current->sighand->count) > 1) {

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: security/commoncap.c:143:
+			if(!capable(CAP_SETUID)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#207: FILE: security/commoncap.c:150:
+	current->suid = current->euid = current->fsuid = bprm->e_uid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#208: FILE: security/commoncap.c:151:
+	current->sgid = current->egid = current->fsgid = bprm->e_gid;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#247: FILE: security/dummy.c:172:
+static void dummy_bprm_apply_creds (struct linux_binprm *bprm)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#247: FILE: security/dummy.c:172:
+static void dummy_bprm_apply_creds (struct linux_binprm *bprm)
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: security/dummy.c:177:
+^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#255: FILE: security/dummy.c:179:
+		if (must_not_trace_exec(current)
+		    || atomic_read(&current->fs->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#256: FILE: security/dummy.c:180:
+		    || atomic_read(&current->fs->count) > 1
+		    || atomic_read(&current->files->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#257: FILE: security/dummy.c:181:
+		    || atomic_read(&current->files->count) > 1
+		    || atomic_read(&current->sighand->count) > 1) {

ERROR:SPACING: space required before the open parenthesis '('
#258: FILE: security/dummy.c:182:
+			if(!capable(CAP_SETUID)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#265: FILE: security/dummy.c:189:
+	current->suid = current->euid = current->fsuid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#266: FILE: security/dummy.c:190:
+	current->sgid = current->egid = current->fsgid = bprm->e_gid;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#285: FILE: include/linux/security.h:44:
*effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#290: FILE: include/linux/security.h:47:
+extern void cap_bprm_apply_creds (struct linux_binprm *bprm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/linux/security.h:47:
+extern void cap_bprm_apply_creds (struct linux_binprm *bprm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: include/linux/security.h:1029:
+	void (*bprm_apply_creds) (struct linux_binprm * bprm);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#327: FILE: include/linux/security.h:1029:
+	void (*bprm_apply_creds) (struct linux_binprm * bprm);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#336: FILE: include/linux/security.h:1293:
+static inline void security_bprm_apply_creds (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#339: FILE: include/linux/security.h:1295:
+	security_ops->bprm_apply_creds (bprm);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: include/linux/security.h:1965:
+static inline void security_bprm_apply_creds (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#351: FILE: include/linux/security.h:1967:
+	cap_bprm_apply_creds (bprm);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 15 warnings, 11 checks, 218 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289440.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
