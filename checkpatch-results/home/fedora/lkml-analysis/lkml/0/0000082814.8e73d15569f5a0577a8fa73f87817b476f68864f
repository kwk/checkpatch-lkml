WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
You can identify which statments are miss labeled from the + or - in front .

WARNING:TYPO_SPELLING: 'statments' may be misspelled - perhaps 'statements'?
#40: 
You can identify which statments are miss labeled from the + or - in front .
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#42: 
Signed-Off-By: Daniel Walker <dwalker@mvista.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: include/linux/compiler.h:62:
+^Iunsigned int count[2]; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/compiler.h:66:
+extern int do_check_likely(struct likeliness *likeliness, int exp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is_likely' may be better as '(is_likely)' to avoid precedence issues
#66: FILE: include/linux/compiler.h:70:
+# define __check_likely(exp, is_likely)							\
+	({										\
+		static __attribute__((__section__(".likely.data")))			\
+			struct likeliness likeliness = {				\
+				.func = __func__,					\
+				.file = __FILE__,					\
+				.line = __LINE__,					\
+				.type = is_likely | LIKELY_UNSEEN,			\
+			};								\
+		do_check_likely(&likeliness, !!(exp));					\
+	})

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".likely.data") over __attribute__((__section__(".likely.data")))
#68: FILE: include/linux/compiler.h:72:
+		static __attribute__((__section__(".likely.data")))			\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: lib/Kconfig.debug:226:
+config^IPROFILE_LIKELY $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#128: FILE: lib/likely_prof.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: lib/likely_prof.c:7:
+ * Daniel Walker <dwalker@mvista.com> $

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#144: FILE: lib/likely_prof.c:17:
+#include <asm/bug.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#145: FILE: lib/likely_prof.c:18:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: lib/likely_prof.c:20:
+#define WAS_UNLIKELY^I0^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: lib/likely_prof.c:23:
+static struct likeliness *likeliness_head = NULL; $

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#150: FILE: lib/likely_prof.c:23:
+static struct likeliness *likeliness_head = NULL; 

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: lib/likely_prof.c:48:
+static void * lp_seq_start(struct seq_file *out, loff_t *pos)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#177: FILE: lib/likely_prof.c:50:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#179: FILE: lib/likely_prof.c:52:
+	if (!*pos) {
+

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#180: FILE: lib/likely_prof.c:53:
+		seq_printf(out, "Likely Profiling Results\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#181: FILE: lib/likely_prof.c:54:
+		seq_printf(out, " --------------------------------------------------------------------\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#182: FILE: lib/likely_prof.c:55:
+		seq_printf(out, "[+- ] Type | # True | # False | Function:Filename@Line\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: lib/likely_prof.c:63:
+static void * lp_seq_next(struct seq_file *out, void *p, loff_t *pos)

CHECK:SPACING: No space is necessary after a cast
#192: FILE: lib/likely_prof.c:65:
+	struct likeliness * entry = (struct likeliness *) p;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: lib/likely_prof.c:65:
+	struct likeliness * entry = (struct likeliness *) p;

CHECK:BRACES: braces {} should be used on all arms of this statement
#194: FILE: lib/likely_prof.c:67:
+	if (entry->next) {
[...]
+	} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: lib/likely_prof.c:70:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#197: FILE: lib/likely_prof.c:70:
+	} else 

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#200: FILE: lib/likely_prof.c:73:
+	return (out->private);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: lib/likely_prof.c:78:
+	struct likeliness * entry = (struct likeliness *)p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: lib/likely_prof.c:80:
+^I$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#210: FILE: lib/likely_prof.c:83:
+			seq_printf(out, "+");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#212: FILE: lib/likely_prof.c:85:
+			seq_printf(out, " ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#214: FILE: lib/likely_prof.c:87:
+		seq_printf(out, "unlikely ");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#216: FILE: lib/likely_prof.c:89:
+	}
+	else if (entry->type == WAS_LIKELY) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#218: FILE: lib/likely_prof.c:91:
+			seq_printf(out, "-");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#220: FILE: lib/likely_prof.c:93:
+			seq_printf(out, " ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#222: FILE: lib/likely_prof.c:95:
+		seq_printf(out, "likely   ");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: lib/likely_prof.c:96:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: lib/likely_prof.c:99:
+^I^I^Ientry->func, entry->file, entry->line); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: lib/likely_prof.c:99:
+	seq_printf(out, "|%9u|%9u\t%s()@:%s@%d\n", true, false,
+			entry->func, entry->file, entry->line); 

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#233: FILE: lib/likely_prof.c:106:
+struct seq_operations likely_profiling_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#245: FILE: lib/likely_prof.c:118:
+static struct file_operations proc_likely_operations  = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: lib/likely_prof.c:128:
+	struct proc_dir_entry *entry;
+	entry = create_proc_entry("likely_prof", 0, &proc_root);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: lib/likely_prof.c:129:
+^Iif (entry) $

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#261: FILE: lib/likely_prof.c:134:
+__initcall(init_likely);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082814.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 20 warnings, 8 checks, 198 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082814.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
