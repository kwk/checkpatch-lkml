ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#67: 
--- a/include/net/ip_fib.h	Sat Oct 19 20:26:53 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:INLINE: plain inline is preferred over __inline__
#201: FILE: net/ipv4/fib_hash.c:70:
+static __inline__ fn_hash_idx_t fn_hash(struct fn_key key, struct fn_zone *fz)

WARNING:INLINE: plain inline is preferred over __inline__
#212: FILE: net/ipv4/fib_hash.c:82:
+static __inline__ struct fn_key fz_key(u32 dst, struct fn_zone *fz)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#221: FILE: net/ipv4/fib_hash.c:89:
+static __inline__ struct fib_node ** fz_chain_p(struct fn_key key,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#221: FILE: net/ipv4/fib_hash.c:89:
+static __inline__ struct fib_node ** fz_chain_p(struct fn_key key,

WARNING:INLINE: plain inline is preferred over __inline__
#228: FILE: net/ipv4/fib_hash.c:95:
+static __inline__ struct fib_node *fz_chain(struct fn_key key,

WARNING:INLINE: plain inline is preferred over __inline__
#235: FILE: net/ipv4/fib_hash.c:101:
+extern __inline__ int fn_key_eq(struct fn_key a, struct fn_key b)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#235: FILE: net/ipv4/fib_hash.c:101:
+extern __inline__ int fn_key_eq(struct fn_key a, struct fn_key b)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:INLINE: plain inline is preferred over __inline__
#241: FILE: net/ipv4/fib_hash.c:106:
+extern __inline__ int fn_key_leq(struct fn_key a, struct fn_key b)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#241: FILE: net/ipv4/fib_hash.c:106:
+extern __inline__ int fn_key_leq(struct fn_key a, struct fn_key b)

WARNING:INLINE: plain inline is preferred over __inline__
#388: FILE: net/ipv4/ip_proc.c:260:
+static __inline__ struct fib_node *fib_get_first(struct seq_file *seq)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#390: FILE: net/ipv4/ip_proc.c:262:
+	struct fib_iter_state* iter = seq->private;

WARNING:INLINE: plain inline is preferred over __inline__
#419: FILE: net/ipv4/ip_proc.c:291:
+static __inline__ struct fib_node *fib_get_next(struct seq_file *seq)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#421: FILE: net/ipv4/ip_proc.c:293:
+	struct fib_iter_state* iter = seq->private;

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#449: FILE: net/ipv4/ip_proc.c:321:
+			if (iter->zone->fz_next);
+				break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#449: FILE: net/ipv4/ip_proc.c:321:
+			if (iter->zone->fz_next);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: net/ipv4/ip_proc.c:324:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#486: FILE: net/ipv4/ip_proc.c:356:
+static unsigned fib_flag_trans(int type, int dead, u32 mask, struct fib_info *fi)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#488: FILE: net/ipv4/ip_proc.c:358:
+	static unsigned type2flags[RTN_MAX + 1] = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#491: FILE: net/ipv4/ip_proc.c:361:
+	unsigned flags = type2flags[type];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#514: FILE: net/ipv4/ip_proc.c:380:
+	struct fib_iter_state* iter;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#517: FILE: net/ipv4/ip_proc.c:383:
+	unsigned flags;

WARNING:SPLIT_STRING: quoted string split across lines
#523: FILE: net/ipv4/ip_proc.c:389:
+		seq_printf(seq, "%-127s\n", "Iface\tDestination\tGateway "
+			   "\tFlags\tRefCnt\tUse\tMetric\tMask\t\tMTU"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#524: FILE: net/ipv4/ip_proc.c:390:
+			   "\tFlags\tRefCnt\tUse\tMetric\tMask\t\tMTU"
+			   "\tWindow\tIRTT");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: net/ipv4/ip_proc.c:573:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: net/ipv4/ip_proc.c:573:
+       $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421610.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 18 warnings, 0 checks, 490 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421610.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
