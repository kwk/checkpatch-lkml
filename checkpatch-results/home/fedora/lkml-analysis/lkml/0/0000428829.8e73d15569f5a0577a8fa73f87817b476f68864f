WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: mm/slab.c:12:
+ * ^I(c) 2002 Manfred Spraul$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: mm/slab.c:49:
+ * The c_cpuarray may not be read with enabled local interrupts - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#180: FILE: mm/slab.c:108:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: mm/slab.c:199:
+	void * entries[BOOT_CPUCACHE_ENTRIES];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: mm/slab.c:208:
+ * ^Iuse the alternate cpudata cache if wrong$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: mm/slab.c:215:
+ * They provide some aging, and hopefully reduce the $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#240: FILE: mm/slab.c:226:
+#define LIST3_INIT(parent) \
+	{ \
+		.slabs_full	= LIST_HEAD_INIT(parent.slabs_full), \
+		.slabs_partial	= LIST_HEAD_INIT(parent.slabs_partial), \
+		.slabs_free	= LIST_HEAD_INIT(parent.slabs_free) \
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: mm/slab.c:244:
+^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#333: FILE: mm/slab.c:319:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#333: FILE: mm/slab.c:319:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#333: FILE: mm/slab.c:319:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#415: FILE: mm/slab.c:506:
+static int __devinit cpuup_callback(struct notifier_block *nfb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: mm/slab.c:507:
+static int __devinit cpuup_callback(struct notifier_block *nfb,
+				  unsigned long action,

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: mm/slab.c:511:
+	int cpu = (int)hcpu;
+	if (action == CPU_ONLINE) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#430: FILE: mm/slab.c:521:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: mm/slab.c:522:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#431: FILE: mm/slab.c:522:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#431: FILE: mm/slab.c:522:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: mm/slab.c:522:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#470: FILE: mm/slab.c:569:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#498: FILE: mm/slab.c:624:
+		void * ptr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: mm/slab.c:625:
+^I^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#500: FILE: mm/slab.c:626:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: mm/slab.c:628:
+		BUG_ON(cc_data(&cache_cache) != &cpuarray_cache.cache);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: mm/slab.c:632:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#507: FILE: mm/slab.c:633:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#509: FILE: mm/slab.c:635:
+		BUG_ON(cc_data(cache_sizes[0].cs_cachep) != &cpuarray_generic.cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: mm/slab.c:637:
+		memcpy(ptr, cc_data(cache_sizes[0].cs_cachep),
+				sizeof(struct cpucache_int));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#532: FILE: mm/slab.c:694:
+static void kmem_poison_obj (kmem_cache_t *cachep, void *addr)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: mm/slab.c:705:
+static int kmem_check_poison_obj (kmem_cache_t *cachep, void *addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#555: FILE: mm/slab.c:728:
+	int i;
+	for (i = 0; i < cachep->num; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#556: FILE: mm/slab.c:729:
+		void* objp = slabp->s_mem+cachep->objsize*i;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#556: FILE: mm/slab.c:729:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#556: FILE: mm/slab.c:729:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#557: FILE: mm/slab.c:730:
+		void* objp = slabp->s_mem+cachep->objsize*i;
+		if (cachep->flags & SLAB_POISON)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#561: FILE: mm/slab.c:734:
+			if (*((unsigned long*)(objp)) != RED_MAGIC1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#562: FILE: mm/slab.c:735:
+				BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#563: FILE: mm/slab.c:736:
+			if (*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: mm/slab.c:738:
+				BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#569: FILE: mm/slab.c:742:
+			(cachep->dtor)(objp, cachep, 0);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#596: FILE: mm/slab.c:749:
+			(cachep->dtor)(objp, cachep, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: mm/slab.c:753:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#611: FILE: mm/slab.c:840:
+	BUG_ON(flags & ~CREATE_MASK);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#655: FILE: mm/slab.c:981:
+			cc_data(cachep) = kmalloc(sizeof(struct cpucache_int),GFP_KERNEL);
 			                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#657: FILE: mm/slab.c:983:
+		BUG_ON(!cc_data(cachep));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#663: FILE: mm/slab.c:989:
+^I} $

ERROR:SPACING: space required before the open parenthesis '('
#774: FILE: mm/slab.c:1041:
+	for(;;) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#789: FILE: mm/slab.c:1049:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#808: FILE: mm/slab.c:1071:
+	BUG_ON(!cachep || in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#818: FILE: mm/slab.c:1093:
+	BUG_ON(!cachep || in_interrupt());

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#902: FILE: mm/slab.c:1189:
+/* FIXME: disable in release
+#if DEBUG

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#909: FILE: mm/slab.c:1196:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#912: FILE: mm/slab.c:1199:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#920: FILE: mm/slab.c:1207:
+	BUG_ON(!irqs_disabled());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1042: FILE: mm/slab.c:1316:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1043: FILE: mm/slab.c:1317:
+^I^I^I(unsigned long)objp);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1043: FILE: mm/slab.c:1317:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",
+			(unsigned long)objp);	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: mm/slab.c:1318:
+^I^IBUG();^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1044: FILE: mm/slab.c:1318:
+		BUG();	

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1048: FILE: mm/slab.c:1322:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n", (unsigned long)objp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1051: FILE: mm/slab.c:1325:
+#endif $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1057: FILE: mm/slab.c:1328:
+static inline void *kmem_cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1057: FILE: mm/slab.c:1328:
+static inline void *kmem_cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1057: FILE: mm/slab.c:1328:
+static inline void *kmem_cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1067: FILE: mm/slab.c:1338:
+	BUG_ON(GET_PAGE_CACHE(page) != cachep);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1074: FILE: mm/slab.c:1345:
+			BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1075: FILE: mm/slab.c:1346:
+		if (xchg((unsigned long *)(objp+cachep->objsize -
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1083: FILE: mm/slab.c:1352:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1083: FILE: mm/slab.c:1352:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1085: FILE: mm/slab.c:1354:
+	BUG_ON(objnr >= cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1086: FILE: mm/slab.c:1355:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1086: FILE: mm/slab.c:1355:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1093: FILE: mm/slab.c:1362:
+		cachep->ctor(objp, cachep, SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_VERIFY);
 		                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1101: FILE: mm/slab.c:1370:
+	if (cachep->flags & SLAB_POISON) {
+		kmem_poison_obj(cachep, objp);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1123: FILE: mm/slab.c:1385:
+		BUG_ON(entries > cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1125: FILE: mm/slab.c:1387:
+	BUG_ON(entries != cachep->num - slabp->inuse);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1184: FILE: mm/slab.c:1411:
+	if (slabp->free == BUFCTL_END) {
[...]
+	} else {
[...]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1193: FILE: mm/slab.c:1418:
+static void* kmem_cache_alloc_refill(kmem_cache_t* cachep, int flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1193: FILE: mm/slab.c:1418:
+static void* kmem_cache_alloc_refill(kmem_cache_t* cachep, int flags)

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#1203: FILE: mm/slab.c:1426:
+	 * it might have reenabled the cpu interrupts
 	                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: mm/slab.c:1459:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1250: FILE: mm/slab.c:1460:
+	if(kmem_cache_grow(cachep, flags))

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1263: FILE: mm/slab.c:1473:
+static inline void *kmem_cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1263: FILE: mm/slab.c:1473:
+static inline void *kmem_cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1268: FILE: mm/slab.c:1478:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1273: FILE: mm/slab.c:1483:
+			BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1274: FILE: mm/slab.c:1484:
+		if (xchg((unsigned long *)(objp+cachep->objsize -
 		                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1276: FILE: mm/slab.c:1486:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1285: FILE: mm/slab.c:1495:
+^I^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1360: FILE: mm/slab.c:1524:
+/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1462: FILE: mm/slab.c:1554:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1462: FILE: mm/slab.c:1554:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1462: FILE: mm/slab.c:1554:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1469: FILE: mm/slab.c:1560:
 
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1470: FILE: mm/slab.c:1561:
+static void kmem_cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1470: FILE: mm/slab.c:1561:
+static void kmem_cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1476: FILE: mm/slab.c:1567:
+	BUG_ON(!batchcount || batchcount > cc->avail);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1487: FILE: mm/slab.c:1577:
+		struct list_head *p;
+		p = list3_data(cachep)->slabs_free.next;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1492: FILE: mm/slab.c:1582:
+			BUG_ON(slabp->inuse);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: mm/slab.c:1594:
+	memcpy(&cc_entry(cc)[0], &cc_entry(cc)[batchcount],
+			sizeof(void*)*cc->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1504: FILE: mm/slab.c:1594:
+			sizeof(void*)*cc->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1504: FILE: mm/slab.c:1594:
+			sizeof(void*)*cc->avail);
 			             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1561: FILE: mm/slab.c:1667:
+		BUG_ON(csizep->cs_cachep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csizep->cs_cachep"
#1561: FILE: mm/slab.c:1667:
+		BUG_ON(csizep->cs_cachep == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1604: FILE: mm/slab.c:1748:
+		BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1611: FILE: mm/slab.c:1753:
+	kmem_cache_t *cachep = (kmem_cache_t*)arg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1638: FILE: mm/slab.c:1769:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1648: FILE: mm/slab.c:1779:
+	cpucache_t *old;
+	old = cc_data(new->cachep);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1649: FILE: mm/slab.c:1780:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1654: FILE: mm/slab.c:1785:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1655: FILE: mm/slab.c:1786:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1655: FILE: mm/slab.c:1786:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1674: FILE: mm/slab.c:1792:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1675: FILE: mm/slab.c:1793:
+		cpucache_t* ccnew;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1677: FILE: mm/slab.c:1795:
+		ccnew = kmalloc(sizeof(void*)*limit+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1677: FILE: mm/slab.c:1795:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                             ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#1677: FILE: mm/slab.c:1795:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1680: FILE: mm/slab.c:1798:
+			for (i--; i >= 0; i--) kfree(new.new[i]);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1691: FILE: mm/slab.c:1809:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1716: FILE: mm/slab.c:1827:
 
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1736: FILE: mm/slab.c:1842:
+	err = do_tune_cpucache(cachep, limit, limit/2);
 	                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1771: FILE: mm/slab.c:1874:
+static int cache_reap (void)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1794: FILE: mm/slab.c:1882:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1794: FILE: mm/slab.c:1882:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1794: FILE: mm/slab.c:1882:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1839: FILE: mm/slab.c:1909:
+			BUG_ON(slabp->inuse);

ERROR:SPACING: space required before the open parenthesis '('
#1863: FILE: mm/slab.c:1915:
+		if(full_free) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1864: FILE: mm/slab.c:1916:
+			full_free = (full_free*4+1)/5;
 			                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1864: FILE: mm/slab.c:1916:
+			full_free = (full_free*4+1)/5;
 			                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1864: FILE: mm/slab.c:1916:
+			full_free = (full_free*4+1)/5;
 			                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1870: FILE: mm/slab.c:1922:
+				BUG_ON(slabp->inuse);

WARNING:TYPO_SPELLING: 'OTHO' may be misspelled - perhaps 'OTOH'?
#1927: FILE: mm/slab.c:1956:
+	// OTHO a rare flush means that e.g.
 	   ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#1929: FILE: mm/slab.c:1958:
+	if(cache_reap() < 0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1932: FILE: mm/slab.c:1961:
+		expires = 2*HZ/REAP_SCANLEN;
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1932: FILE: mm/slab.c:1961:
+		expires = 2*HZ/REAP_SCANLEN;
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1971: FILE: mm/slab.c:2028:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1971: FILE: mm/slab.c:2028:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1979: FILE: mm/slab.c:2035:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1979: FILE: mm/slab.c:2035:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1988: FILE: mm/slab.c:2042:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1988: FILE: mm/slab.c:2042:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2032: FILE: mm/slab.c:2091:
+		seq_printf(m, " : %6lu %7lu %5lu %4lu %4lu %4lu",
+				high, allocs, grown, reaped, errors, max_freeable);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 54 warnings, 41 checks, 1910 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
