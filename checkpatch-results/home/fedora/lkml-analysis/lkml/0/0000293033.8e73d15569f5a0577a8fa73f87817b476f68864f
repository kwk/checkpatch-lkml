WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -urN linux-2.6/arch/s390/kernel/asm-offsets.c linux-2.6-s390/arch/s390/kernel/asm-offsets.c

ERROR:SPACING: space required after that ',' (ctx:VxB)
#56: FILE: arch/s390/kernel/asm-offsets.c:23:
+	       offsetof(struct task_struct, thread.mm_segment),);
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxB)
#65: FILE: arch/s390/kernel/asm-offsets.c:35:
+	DEFINE(__PT_PSW, offsetof(struct pt_regs, psw),);
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#66: FILE: arch/s390/kernel/asm-offsets.c:36:
+	DEFINE(__PT_GPRS, offsetof(struct pt_regs, gprs),);
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#67: FILE: arch/s390/kernel/asm-offsets.c:37:
+	DEFINE(__PT_ORIG_GPR2, offsetof(struct pt_regs, orig_gpr2),);
 	                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#68: FILE: arch/s390/kernel/asm-offsets.c:38:
+	DEFINE(__PT_ILC, offsetof(struct pt_regs, ilc),);
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#69: FILE: arch/s390/kernel/asm-offsets.c:39:
+	DEFINE(__PT_TRAP, offsetof(struct pt_regs, trap),);
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#70: FILE: arch/s390/kernel/asm-offsets.c:40:
+	DEFINE(__PT_SIZE, sizeof(struct pt_regs),);
 	                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr_reg' may be better as '(pr_reg)' to avoid precedence issues
#92: FILE: arch/s390/kernel/binfmt_elf32.c:60:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) dump_regs32(regs, &pr_reg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#92: FILE: arch/s390/kernel/binfmt_elf32.c:60:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) dump_regs32(regs, &pr_reg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: arch/s390/kernel/entry.S:128:
+^Ixc^I0(4,%r1),0(%r1)^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: arch/s390/kernel/entry.S:217:
+__critical_start:^I$

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#466: FILE: arch/s390/kernel/entry.S:341:
+        stosm   24(%r15),0x03     # reenable interrupts
                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#614: FILE: arch/s390/kernel/entry.S:626:
+        stosm   24(%r15),0x03          # reenable interrupts
                                          ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: arch/s390/kernel/entry64.S:202:
+__critical_start:^I$

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1056: FILE: arch/s390/kernel/entry64.S:329:
+        stosm   24(%r15),0x03     # reenable interrupts
                                     ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1307: FILE: arch/s390/kernel/entry64.S:785:
+^I.globl  sys_call_table^I$

CHECK:SPACING: No space is necessary after a cast
#1366: FILE: arch/s390/kernel/process.c:267:
+			p->thread.acrs[0] = (unsigned int) regs->gprs[6];

CHECK:SPACING: No space is necessary after a cast
#1373: FILE: arch/s390/kernel/process.c:270:
+			p->thread.acrs[1] = (unsigned int) regs->gprs[6];

CHECK:SPACING: No space is necessary after a cast
#1391: FILE: arch/s390/kernel/ptrace.c:140:
+	if (addr < (addr_t) &dummy->regs.acrs) {

CHECK:SPACING: No space is necessary after a cast
#1403: FILE: arch/s390/kernel/ptrace.c:149:
+	} else if (addr < (addr_t) &dummy->regs.orig_gpr2) {

CHECK:SPACING: No space is necessary after a cast
#1407: FILE: arch/s390/kernel/ptrace.c:153:
+		offset = addr - (addr_t) &dummy->regs.acrs;

CHECK:SPACING: No space is necessary after a cast
#1408: FILE: arch/s390/kernel/ptrace.c:154:
+		tmp = *(addr_t *)((addr_t) &child->thread.acrs + offset);

CHECK:SPACING: No space is necessary after a cast
#1410: FILE: arch/s390/kernel/ptrace.c:156:
+	} else if (addr == (addr_t) &dummy->regs.orig_gpr2) {

CHECK:SPACING: No space is necessary after a cast
#1414: FILE: arch/s390/kernel/ptrace.c:160:
+		tmp = (addr_t) __KSTK_PTREGS(child)->orig_gpr2;

CHECK:SPACING: No space is necessary after a cast
#1416: FILE: arch/s390/kernel/ptrace.c:162:
+	} else if (addr < (addr_t) (&dummy->regs.fp_regs + 1)) {

CHECK:SPACING: No space is necessary after a cast
#1425: FILE: arch/s390/kernel/ptrace.c:169:
+	} else if (addr < (addr_t) (&dummy->regs.per_info + 1)) {

CHECK:SPACING: No space is necessary after a cast
#1434: FILE: arch/s390/kernel/ptrace.c:201:
+	if (addr < (addr_t) &dummy->regs.acrs) {

CHECK:SPACING: No space is necessary after a cast
#1447: FILE: arch/s390/kernel/ptrace.c:220:
+	} else if (addr < (addr_t) (&dummy->regs.orig_gpr2)) {

CHECK:SPACING: No space is necessary after a cast
#1451: FILE: arch/s390/kernel/ptrace.c:224:
+		offset = addr - (addr_t) &dummy->regs.acrs;

CHECK:SPACING: No space is necessary after a cast
#1452: FILE: arch/s390/kernel/ptrace.c:225:
+		*(addr_t *)((addr_t) &child->thread.acrs + offset) = data;

CHECK:SPACING: No space is necessary after a cast
#1454: FILE: arch/s390/kernel/ptrace.c:227:
+	} else if (addr == (addr_t) &dummy->regs.orig_gpr2) {

CHECK:SPACING: No space is necessary after a cast
#1460: FILE: arch/s390/kernel/ptrace.c:233:
+	} else if (addr < (addr_t) (&dummy->regs.fp_regs + 1)) {

CHECK:SPACING: No space is necessary after a cast
#1470: FILE: arch/s390/kernel/ptrace.c:243:
+	} else if (addr < (addr_t) (&dummy->regs.per_info + 1)) {

CHECK:SPACING: No space is necessary after a cast
#1479: FILE: arch/s390/kernel/ptrace.c:349:
+	if (addr < (addr_t) &dummy32->regs.acrs) {

CHECK:SPACING: No space is necessary after a cast
#1505: FILE: arch/s390/kernel/ptrace.c:366:
+	} else if (addr < (addr_t) (&dummy32->regs.orig_gpr2)) {

CHECK:SPACING: No space is necessary after a cast
#1509: FILE: arch/s390/kernel/ptrace.c:370:
+		offset = addr - (addr_t) &dummy32->regs.acrs;

CHECK:SPACING: No space is necessary after a cast
#1510: FILE: arch/s390/kernel/ptrace.c:371:
+		tmp = *(__u32*)((addr_t) &child->thread.acrs + offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1510: FILE: arch/s390/kernel/ptrace.c:371:
+		tmp = *(__u32*)((addr_t) &child->thread.acrs + offset);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1511: FILE: arch/s390/kernel/ptrace.c:372:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#1512: FILE: arch/s390/kernel/ptrace.c:373:
+	} else if (addr == (addr_t) (&dummy32->regs.orig_gpr2)) {

CHECK:SPACING: No space is necessary after a cast
#1516: FILE: arch/s390/kernel/ptrace.c:377:
+		tmp = *(__u32*)((addr_t) &__KSTK_PTREGS(child)->orig_gpr2 + 4);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1516: FILE: arch/s390/kernel/ptrace.c:377:
+		tmp = *(__u32*)((addr_t) &__KSTK_PTREGS(child)->orig_gpr2 + 4);

CHECK:SPACING: No space is necessary after a cast
#1518: FILE: arch/s390/kernel/ptrace.c:379:
+	} else if (addr < (addr_t) (&dummy32->regs.fp_regs + 1)) {

CHECK:SPACING: No space is necessary after a cast
#1527: FILE: arch/s390/kernel/ptrace.c:386:
+	} else if (addr < (addr_t) (&dummy32->regs.per_info + 1)) {

CHECK:SPACING: No space is necessary after a cast
#1536: FILE: arch/s390/kernel/ptrace.c:425:
+	if (addr < (addr_t) &dummy32->regs.acrs) {

CHECK:SPACING: No space is necessary after a cast
#1558: FILE: arch/s390/kernel/ptrace.c:445:
+	} else if (addr < (addr_t) (&dummy32->regs.orig_gpr2)) {

CHECK:SPACING: No space is necessary after a cast
#1562: FILE: arch/s390/kernel/ptrace.c:449:
+		offset = addr - (addr_t) &dummy32->regs.acrs;

CHECK:SPACING: No space is necessary after a cast
#1563: FILE: arch/s390/kernel/ptrace.c:450:
+		*(__u32*)((addr_t) &child->thread.acrs + offset) = tmp;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1563: FILE: arch/s390/kernel/ptrace.c:450:
+		*(__u32*)((addr_t) &child->thread.acrs + offset) = tmp;

CHECK:SPACING: No space is necessary after a cast
#1565: FILE: arch/s390/kernel/ptrace.c:452:
+	} else if (addr == (addr_t) (&dummy32->regs.orig_gpr2)) {

CHECK:SPACING: No space is necessary after a cast
#1569: FILE: arch/s390/kernel/ptrace.c:456:
+		*(__u32*)((addr_t) &__KSTK_PTREGS(child)->orig_gpr2 + 4) = tmp;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1569: FILE: arch/s390/kernel/ptrace.c:456:
+		*(__u32*)((addr_t) &__KSTK_PTREGS(child)->orig_gpr2 + 4) = tmp;

CHECK:SPACING: No space is necessary after a cast
#1571: FILE: arch/s390/kernel/ptrace.c:458:
+	} else if (addr < (addr_t) (&dummy32->regs.fp_regs + 1)) {

CHECK:SPACING: No space is necessary after a cast
#1581: FILE: arch/s390/kernel/ptrace.c:469:
+	} else if (addr < (addr_t) (&dummy32->regs.per_info + 1)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1593: FILE: arch/s390/kernel/s390_ksyms.c:37:
+EXPORT_SYMBOL_NOVERS(__strnlen_user_asm);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: No space is necessary after a cast
#1613: FILE: arch/s390/kernel/setup.c:515:
+	lc->thread_info = (unsigned long) &init_thread_union;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1631: FILE: arch/s390/kernel/signal.c:160:
+			     sizeof(sregs->regs.psw)+sizeof(sregs->regs.gprs));
 			                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1648: FILE: arch/s390/kernel/signal.c:187:
+			       sizeof(sregs->regs.psw)+sizeof(sregs->regs.gprs));
 			                              ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1668: FILE: arch/s390/kernel/traps.c:176:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1670: FILE: arch/s390/kernel/traps.c:178:
+	 * input. To remove or not to remove ... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1892: FILE: arch/s390/lib/uaccess.S:116:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1980: FILE: arch/s390/lib/uaccess.S:177:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2186: FILE: arch/s390/lib/uaccess64.S:116:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2272: FILE: arch/s390/lib/uaccess64.S:175:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293033.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 8 warnings, 37 checks, 2172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293033.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
