WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
http://domsch.com/linux/edd30/linux/linux-2.4.23-pre4-edd-20030913.patch.gz.asc

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#220: FILE: arch/i386/kernel/edd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#221: FILE: arch/i386/kernel/edd.c:2:
+ * linux/arch/i386/kernel/edd.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Parametes' may be misspelled - perhaps 'Parameters'?
#231: FILE: arch/i386/kernel/edd.c:12:
+ * fn48 - Get Device Parametes with EDD extensions
                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: arch/i386/kernel/edd.c:75:
+	int (*test) (struct edd_device * edev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#294: FILE: arch/i386/kernel/edd.c:75:
+	int (*test) (struct edd_device * edev);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: arch/i386/kernel/edd.c:78:
+#define EDD_DEVICE_ATTR(_name,_show,_test) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: arch/i386/kernel/edd.c:78:
+#define EDD_DEVICE_ATTR(_name,_show,_test) \
                                    ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#297: FILE: arch/i386/kernel/edd.c:78:
+#define EDD_DEVICE_ATTR(_name,_show,_test) \
+struct edd_attribute edd_attr_##_name = { 	\
+	.name = __stringify(_name), \
+	.show	= _show,	    \
+        .test   = _test,            \
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: arch/i386/kernel/edd.c:79:
+struct edd_attribute edd_attr_##_name = { ^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: arch/i386/kernel/edd.c:82:
+        .test   = _test,            \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: arch/i386/kernel/edd.c:82:
+        .test   = _test,            \$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#320: FILE: arch/i386/kernel/edd.c:101:
+	if (len <= off+count) *eof = 1;
 	              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#320: FILE: arch/i386/kernel/edd.c:101:
+	if (len <= off+count) *eof = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#323: FILE: arch/i386/kernel/edd.c:104:
+	if (len>count) len = count;
 	       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#323: FILE: arch/i386/kernel/edd.c:104:
+	if (len>count) len = count;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#324: FILE: arch/i386/kernel/edd.c:105:
+	if (len<0) len = 0;
 	       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#324: FILE: arch/i386/kernel/edd.c:105:
+	if (len<0) len = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: arch/i386/kernel/edd.c:118:
+	const char maxcolumn = 16;
+	while (length_printed < length && count > 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#342: FILE: arch/i386/kernel/edd.c:123:
+			h += sprintf(h, "%02x ", (unsigned char) *p);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#370: FILE: arch/i386/kernel/edd.c:151:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#375: FILE: arch/i386/kernel/edd.c:156:
+		if (isprint(info->params.host_bus_type[i])) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#414: FILE: arch/i386/kernel/edd.c:195:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#419: FILE: arch/i386/kernel/edd.c:200:
+		if (isprint(info->params.interface_type[i])) {
[...]
+		} else {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#475: FILE: arch/i386/kernel/edd.c:256:
+		len = sizeof (*info) - 4;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#476: FILE: arch/i386/kernel/edd.c:257:
+	uint8_t checksum = 0, c = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#477: FILE: arch/i386/kernel/edd.c:258:
+	uint8_t checksum = 0, c = 0;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#477: FILE: arch/i386/kernel/edd.c:258:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

CHECK:SPACING: No space is necessary after a cast
#485: FILE: arch/i386/kernel/edd.c:266:
+	p += edd_dump_raw_data(p, left, ((char *) info) + 4, len);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#488: FILE: arch/i386/kernel/edd.c:269:
+	/* Spec violation.  Adaptec AIC7899 returns 0xDDBE
+	   here, when it should be 0xBEDD.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#496: FILE: arch/i386/kernel/edd.c:277:
+	if (!(info->params.key == 0xBEDD || info->params.key == 0xDDBE)) {
+		goto out;
+	}

CHECK:SPACING: No space is necessary after a cast
#501: FILE: arch/i386/kernel/edd.c:282:
+		c = *(((uint8_t *) info) + i + 4);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#518: FILE: arch/i386/kernel/edd.c:299:
+		if (!isprint(info->params.host_bus_type[i])) {
+			warn_padding++;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#523: FILE: arch/i386/kernel/edd.c:304:
+		if (!isprint(info->params.interface_type[i])) {
+			warn_padding++;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: arch/i386/kernel/edd.c:327:
+	char *p = page;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#546: FILE: arch/i386/kernel/edd.c:327:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#559: FILE: arch/i386/kernel/edd.c:340:
+	char *p = page;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#559: FILE: arch/i386/kernel/edd.c:340:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#563: FILE: arch/i386/kernel/edd.c:344:
+	if (info->interface_support & EDD_EXT_FIXED_DISK_ACCESS) {
+		p += snprintf(p, left, "Fixed disk access\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#566: FILE: arch/i386/kernel/edd.c:347:
+	if (info->interface_support & EDD_EXT_DEVICE_LOCKING_AND_EJECTING) {
+		p += snprintf(p, left, "Device locking and ejecting\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#569: FILE: arch/i386/kernel/edd.c:350:
+	if (info->interface_support & EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT) {
+		p += snprintf(p, left, "Enhanced Disk Drive support\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#572: FILE: arch/i386/kernel/edd.c:353:
+	if (info->interface_support & EDD_EXT_64BIT_EXTENSIONS) {
+		p += snprintf(p, left, "64-bit extensions\n");
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: arch/i386/kernel/edd.c:364:
+	char *p = page;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#583: FILE: arch/i386/kernel/edd.c:364:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#588: FILE: arch/i386/kernel/edd.c:369:
+		p += snprintf(p, left, "DMA boundry error transparent\n");
 		                            ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#611: FILE: arch/i386/kernel/edd.c:392:
+	char *p = page;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#611: FILE: arch/i386/kernel/edd.c:392:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#624: FILE: arch/i386/kernel/edd.c:405:
+	char *p = page;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#624: FILE: arch/i386/kernel/edd.c:405:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#633: FILE: arch/i386/kernel/edd.c:414:
+edd_show_default_sectors_per_track(char *page, char **start, off_t off, int count, int *eof, void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#637: FILE: arch/i386/kernel/edd.c:418:
+	char *p = page;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#637: FILE: arch/i386/kernel/edd.c:418:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#650: FILE: arch/i386/kernel/edd.c:431:
+	char *p = page;
+	if (!info || !page || off) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#650: FILE: arch/i386/kernel/edd.c:431:
+	if (!info || !page || off) {
+		return proc_calc_metrics(page, start, off, count, eof, 0);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#662: FILE: arch/i386/kernel/edd.c:443:
+	struct edd_info *info = edd_dev_get_info(edev);
+	if (!edev || !info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#671: FILE: arch/i386/kernel/edd.c:452:
+	struct edd_info *info = edd_dev_get_info(edev);
+	if (!edev || !info)

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: arch/i386/kernel/edd.c:461:
+	struct edd_info *info = edd_dev_get_info(edev);
+	if (!edev || !info)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#695: FILE: arch/i386/kernel/edd.c:476:
+	if (!(info->params.key == 0xBEDD || info->params.key == 0xDDBE)) {
+		return 0;
+	}

CHECK:SPACING: No space is necessary after a cast
#700: FILE: arch/i386/kernel/edd.c:481:
+		c = *(((uint8_t *) info) + i + 4);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#706: FILE: arch/i386/kernel/edd.c:487:
+	if (!nonzero_path) {
+		return 0;
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#725: FILE: arch/i386/kernel/edd.c:506:
+static EDD_DEVICE_ATTR(interface, edd_show_interface,edd_has_edd30);
                                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#766: FILE: arch/i386/kernel/edd.c:547:
+	for (i = 0; (attr=def_attrs[i]); i++) {
 	                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#768: FILE: arch/i386/kernel/edd.c:549:
+			ae = kmalloc(sizeof (*ae), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ae"
#769: FILE: arch/i386/kernel/edd.c:550:
+			if (ae == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ae->entry"
#778: FILE: arch/i386/kernel/edd.c:559:
+			if (ae->entry == NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#795: FILE: arch/i386/kernel/edd.c:576:
+	int error=1;
 	         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "edev->dir"
#798: FILE: arch/i386/kernel/edd.c:579:
+	if (edev->dir != NULL) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#799: FILE: arch/i386/kernel/edd.c:580:
+		edev->dir->mode = (S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#812: FILE: arch/i386/kernel/edd.c:593:
+	memset(edev, 0, sizeof (*edev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#834: FILE: arch/i386/kernel/edd.c:615:
+	printk(KERN_INFO "BIOS EDD facility v%s, %d devices found\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#838: FILE: arch/i386/kernel/edd.c:619:
+		printk(KERN_INFO "EDD information not available.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bios_dir"
#843: FILE: arch/i386/kernel/edd.c:624:
+	if (bios_dir == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#847: FILE: arch/i386/kernel/edd.c:628:
+		edev = kmalloc(sizeof (*edev), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#854: FILE: arch/i386/kernel/edd.c:635:
+		if (rc) {
+			break;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#862: FILE: arch/i386/kernel/edd.c:643:
+			if ((edev = edd_devices[i])) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#881: FILE: arch/i386/kernel/edd.c:662:
+		if ((edev = edd_devices[i])) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#911: FILE: arch/i386/kernel/i386_ksyms.c:187:
+EXPORT_SYMBOL(eddnr);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: No space is necessary after a cast
#928: FILE: arch/i386/kernel/setup.c:215:
+#define EDD_NR     (*(unsigned char *) (PARAM+EDDNR))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#928: FILE: arch/i386/kernel/setup.c:215:
+#define EDD_NR     (*(unsigned char *) (PARAM+EDDNR))
                                              ^

CHECK:SPACING: No space is necessary after a cast
#929: FILE: arch/i386/kernel/setup.c:216:
+#define EDD_BUF     ((struct edd_info *) (PARAM+EDDBUF))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#929: FILE: arch/i386/kernel/setup.c:216:
+#define EDD_BUF     ((struct edd_info *) (PARAM+EDDBUF))
                                                ^

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#937: FILE: arch/i386/kernel/setup.c:721:
+#if defined(CONFIG_EDD) || defined(CONFIG_EDD_MODULE)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: arch/i386/kernel/setup.c:731:
+     eddnr = EDD_NR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#948: FILE: arch/i386/kernel/setup.c:732:
+     memcpy(edd, EDD_BUF, sizeof(edd));$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#969: FILE: include/asm-i386/edd.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#970: FILE: include/asm-i386/edd.h:2:
+ * linux/include/asm-i386/edd.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1002: FILE: include/asm-i386/edd.h:34:
+#define EDDNR 0x1e9		/* addr of number of edd_info structs at EDDBUF
+				   in empty_zero_block - treat this as 1 byte  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1002: FILE: include/asm-i386/edd.h:34:
+				   in empty_zero_block - treat this as 1 byte  */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1014: FILE: include/asm-i386/edd.h:46:
+#define EDD_EXT_FIXED_DISK_ACCESS           (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1015: FILE: include/asm-i386/edd.h:47:
+#define EDD_EXT_DEVICE_LOCKING_AND_EJECTING (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1016: FILE: include/asm-i386/edd.h:48:
+#define EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1017: FILE: include/asm-i386/edd.h:49:
+#define EDD_EXT_64BIT_EXTENSIONS            (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1019: FILE: include/asm-i386/edd.h:51:
+#define EDD_INFO_DMA_BOUNDRY_ERROR_TRANSPARENT (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1020: FILE: include/asm-i386/edd.h:52:
+#define EDD_INFO_GEOMETRY_VALID                (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1021: FILE: include/asm-i386/edd.h:53:
+#define EDD_INFO_REMOVABLE                     (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1022: FILE: include/asm-i386/edd.h:54:
+#define EDD_INFO_WRITE_VERIFY                  (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1023: FILE: include/asm-i386/edd.h:55:
+#define EDD_INFO_MEDIA_CHANGE_NOTIFICATION     (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1024: FILE: include/asm-i386/edd.h:56:
+#define EDD_INFO_LOCKABLE                      (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1025: FILE: include/asm-i386/edd.h:57:
+#define EDD_INFO_NO_MEDIA_PRESENT              (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1026: FILE: include/asm-i386/edd.h:58:
+#define EDD_INFO_USE_INT13_FN50                (1 << 7)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1048: FILE: include/asm-i386/edd.h:80:
+		} __attribute__ ((packed)) isa;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1055: FILE: include/asm-i386/edd.h:87:
+		} __attribute__ ((packed)) pci;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1059: FILE: include/asm-i386/edd.h:91:
+		} __attribute__ ((packed)) ibnd;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1062: FILE: include/asm-i386/edd.h:94:
+		} __attribute__ ((packed)) xprs;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1065: FILE: include/asm-i386/edd.h:97:
+		} __attribute__ ((packed)) htpt;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1068: FILE: include/asm-i386/edd.h:100:
+		} __attribute__ ((packed)) unknown;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1077: FILE: include/asm-i386/edd.h:109:
+		} __attribute__ ((packed)) ata;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1085: FILE: include/asm-i386/edd.h:117:
+		} __attribute__ ((packed)) atapi;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1091: FILE: include/asm-i386/edd.h:123:
+		} __attribute__ ((packed)) scsi;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1095: FILE: include/asm-i386/edd.h:127:
+		} __attribute__ ((packed)) usb;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1099: FILE: include/asm-i386/edd.h:131:
+		} __attribute__ ((packed)) i1394;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1103: FILE: include/asm-i386/edd.h:135:
+		} __attribute__ ((packed)) fibre;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1107: FILE: include/asm-i386/edd.h:139:
+		} __attribute__ ((packed)) i2o;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1119: FILE: include/asm-i386/edd.h:151:
+		} __attribute__ ((packed)) sata;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1123: FILE: include/asm-i386/edd.h:155:
+		} __attribute__ ((packed)) unknown;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1127: FILE: include/asm-i386/edd.h:159:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1134: FILE: include/asm-i386/edd.h:166:
+} __attribute__ ((packed));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000336977.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 77 warnings, 26 checks, 1044 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000336977.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
