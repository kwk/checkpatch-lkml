WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
http://www.kernel.org/git/gitweb.cgi?p=linux/kernel/git/dwmw2/audit-2.6.git;a=summary

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: kernel/audit.c:287:
+				int err = netlink_unicast(audit_sock, skb, audit_pid, 0);
+				if (err < 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'Shoudn't' may be misspelled - perhaps 'Shouldn't'?
#137: FILE: kernel/audit.c:288:
+					BUG_ON(err != -ECONNREFUSED); /* Shoudn't happen */
 					                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#137: FILE: kernel/audit.c:288:
+					BUG_ON(err != -ECONNREFUSED); /* Shoudn't happen */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#138: FILE: kernel/audit.c:289:
+					printk(KERN_ERR "audit: *NO* daemon at audit_pid=%d\n", audit_pid);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#138: FILE: kernel/audit.c:289:
+					printk(KERN_ERR "audit: *NO* daemon at audit_pid=%d\n", audit_pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#142: FILE: kernel/audit.c:293:
+				printk(KERN_ERR "%s\n", skb->data + NLMSG_SPACE(0));

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: kernel/audit.c:298:
+			DECLARE_WAITQUEUE(wait, current);
+			set_current_state(TASK_INTERRUPTIBLE);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#177: FILE: kernel/audit.c:330:
+	/* Ignore failure. It'll only happen if the sender goes away,
+	   because our timeout is set to infinite. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#177: FILE: kernel/audit.c:330:
+	   because our timeout is set to infinite. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#320: FILE: kernel/audit.c:704:
+ * ascii hex digits. The new string is placed onto the skb. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: kernel/audit.c:705:
+void audit_log_hex(struct audit_buffer *ab, const unsigned char *buf, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: kernel/audit.c:706:
+void audit_log_hex(struct audit_buffer *ab, const unsigned char *buf, 
+		size_t len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#330: FILE: kernel/audit.c:713:
+	BUG_ON(!ab->skb);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#333: FILE: kernel/audit.c:716:
+	new_len = len<<1;
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#336: FILE: kernel/audit.c:719:
+		new_len = AUDIT_BUFSIZ*(((new_len-avail)/AUDIT_BUFSIZ) + 1);
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#336: FILE: kernel/audit.c:719:
+		new_len = AUDIT_BUFSIZ*(((new_len-avail)/AUDIT_BUFSIZ) + 1);
 		                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#336: FILE: kernel/audit.c:719:
+		new_len = AUDIT_BUFSIZ*(((new_len-avail)/AUDIT_BUFSIZ) + 1);
 		                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: kernel/audit.c:726:
+	for (i=0; i<len; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#345: FILE: kernel/audit.c:726:
+	for (i=0; i<len; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#346: FILE: kernel/audit.c:727:
+		*ptr++ = hex[(buf[i] & 0xF0)>>4]; /* Upper nibble */
 		                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: kernel/audit.c:735:
+ * contains a control character, unprintable character, double quote mark, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#356: FILE: kernel/audit.c:737:
+ * Strings that are escaped are printed in hex (2 digits per char). */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#416: FILE: kernel/audit.c:762:
+	path = kmalloc(PATH_MAX+11, GFP_KERNEL);
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#421: FILE: kernel/audit.c:767:
+	p = d_path(dentry, vfsmnt, path, PATH_MAX+11);
 	                                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#422: FILE: kernel/audit.c:768:
+	if (IS_ERR(p)) { /* Should never happen since we send PATH_MAX */
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: kernel/audit.c:771:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#425: FILE: kernel/audit.c:771:
+	} else 

WARNING:LINE_SPACING: Missing a blank line after declarations
#464: FILE: kernel/audit.c:789:
+			struct nlmsghdr *nlh = (struct nlmsghdr *)ab->skb->data;
+			nlh->nlmsg_len = ab->skb->len - NLMSG_SPACE(0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#469: FILE: kernel/audit.c:794:
+			printk("%s\n", ab->skb->data + NLMSG_SPACE(0));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 15 warnings, 10 checks, 413 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
