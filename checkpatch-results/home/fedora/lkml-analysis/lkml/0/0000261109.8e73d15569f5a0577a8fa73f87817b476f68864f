WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#   2004/08/11 16:28:33-05:00 pfg@sgi.com 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#   Move to new directory

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
# arch/ia64/sn/ioif/klconfig/klconflib.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#   2004/08/11 16:27:45-05:00 pfg@sgi.com +0 -0

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
#   Rename: arch/ia64/sn/io/sn2/klconflib.c -> arch/ia64/sn/ioif/klconfig/klconflib.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#   Rename: arch/ia64/sn/io/sn2/klconflib.c -> arch/ia64/sn/ioif/klconfig/klconflib.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# 

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#37: 
--- a/arch/ia64/sn/io/sn2/klconflib.c	2004-08-11 16:29:10 -05:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#616: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#624: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:9:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#641: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:26:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#644: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:29:
+#define DBG(x...) printk(x)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#649: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:34:
+extern int numionodes;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#654: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:39:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#674: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:59:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:61:
+^I^Iif ((start->brd_type == brd_type) && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start->brd_type == brd_type'
#676: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:61:
+		if ((start->brd_type == brd_type) && 
+		    (start->brd_nasid == nasid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start->brd_nasid == nasid'
#676: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:61:
+		if ((start->brd_type == brd_type) && 
+		    (start->brd_nasid == nasid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:78:
+        /* Search all boards stored on this node. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:94:
+^I^Iif (KLCLASS(start->brd_type) == KLCLASS(brd_type) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start->brd_nasid == nasid'
#709: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:94:
+		if (KLCLASS(start->brd_type) == KLCLASS(brd_type) && 
+		    (start->brd_nasid == nasid))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#723: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:108:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_component', this function's name, in a string
#739: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:124:
+			DBG("find_component: Bad pointer: 0x%p\n", kli);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:129:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:130:
+^Ifor (; index < KLCF_NUM_COMPS(brd); index++) {^I^I$

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#747: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:132:
+		DBG("find_component: brd %p kli %p  request type = 0x%x kli type 0x%x\n", brd, kli, kli->struct_type, KLCF_COMP_TYPE(kli));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_component', this function's name, in a string
#747: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:132:
+		DBG("find_component: brd %p kli %p  request type = 0x%x kli type 0x%x\n", brd, kli, kli->struct_type, KLCF_COMP_TYPE(kli));

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:167:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:167:
+        int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:168:
+        char c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:168:
+        char c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:169:
+        char *compare_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:169:
+        char *compare_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:172:
+                strcpy(new_name, EDGE_LBL_XWIDGET);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:172:
+                strcpy(new_name, EDGE_LBL_XWIDGET);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:173:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:173:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#789: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:174:
+                for (i = 0; i < strlen(old_name); i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:174:
+                for (i = 0; i < strlen(old_name); i++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:175:
+                        c = old_name[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:175:
+                        c = old_name[i];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#792: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:177:
+                        if (isalpha(c))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:177:
+                        if (isalpha(c))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:178:
+                                new_name[i] = tolower(c);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:178:
+                                new_name[i] = tolower(c);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#794: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:179:
+                        else if (isdigit(c))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:179:
+                        else if (isdigit(c))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#795: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:180:
+                                new_name[i] = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:180:
+                                new_name[i] = c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#796: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:181:
+                        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:181:
+                        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#797: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:182:
+                                new_name[i] = '_';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:182:
+                                new_name[i] = '_';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:183:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:183:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:184:
+                new_name[i] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:184:
+                new_name[i] = '\0';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#800: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:185:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:185:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:187:
+        /* XXX -$

ERROR:CODE_INDENT: code indent should use tabs where possible
#803: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:188:
+         * Since a bunch of boards made it out with weird names like$

ERROR:CODE_INDENT: code indent should use tabs where possible
#804: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:189:
+         * IO6-fibbbed and IO6P2, we need to look for IO6 in a name and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#805: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:190:
+         * replace it with "baseio" to avoid confusion in the field.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#808: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:193:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#810: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:195:
+        /* Skip underscores at the beginning of the name */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#811: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:196:
+        for (compare_ptr = new_name; (*compare_ptr) == '_'; compare_ptr++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:196:
+        for (compare_ptr = new_name; (*compare_ptr) == '_'; compare_ptr++)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#812: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:197:
+                ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:197:
+                ;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#819: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:204:
+        if (!strncmp(new_name, "io6", 3) || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:204:
+        if (!strncmp(new_name, "io6", 3) || $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:204:
+        if (!strncmp(new_name, "io6", 3) || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:205:
+            !strncmp(new_name, "mio", 3) || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:205:
+            !strncmp(new_name, "mio", 3) || $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:205:
+            !strncmp(new_name, "mio", 3) || $

WARNING:SPACING: space prohibited before semicolon
#824: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:209:
+		strcpy(new_name, "divo") ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#826: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:211:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:216:
+ *^ICompletely disabled brds have their klconfig on $

WARNING:SPACING: space prohibited before semicolon
#839: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:224:
+	klhub_t	*hub ;

WARNING:SPACING: space prohibited before semicolon
#842: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:227:
+		return INVALID_NASID ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#846: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:231:
+        hub  = (klhub_t *)find_first_component(brd, KLSTRUCT_HUB);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:231:
+        hub  = (klhub_t *)find_first_component(brd, KLSTRUCT_HUB);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#848: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:233:
+                return INVALID_NASID ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:233:
+                return INVALID_NASID ;$

WARNING:SPACING: space prohibited before semicolon
#848: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:233:
+                return INVALID_NASID ;

WARNING:SPACING: space prohibited before semicolon
#850: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:235:
+		return hub->hub_info.physid ;

WARNING:SPACING: space prohibited before semicolon
#852: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:237:
+		return brd->brd_nasid ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#865: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:250:
+	if (brd == NULL) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!brd"
#865: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:250:
+	if (brd == NULL) return 0;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#866: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:251:
+^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#867: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:252:
+	if ((xbow_p = (klxbow_t *)find_component(brd, NULL, KLSTRUCT_XBOW))
[...]
+	    return 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#867: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:252:
+	if ((xbow_p = (klxbow_t *)find_component(brd, NULL, KLSTRUCT_XBOW))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TABSTOP: Statements should start on a tabstop
#869: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:254:
+	    return 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#871: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:256:
+	if (!XBOW_PORT_TYPE_IO(xbow_p, link) || !XBOW_PORT_IS_ENABLED(xbow_p, link))
+	    return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#872: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:257:
+	    return 0;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#886: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:271:
+	switch (KLCLASS(brd->brd_type)) {
[...]
+		case KLCLASS_NODE:
[...]
+		case KLCLASS_ROUTER:
[...]
+		case KLCLASS_MIDPLANE:
[...]
+		case KLCLASS_IO:
[...]
+		case KLCLASS_IOBRICK:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#887: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:272:
+	switch (KLCLASS(brd->brd_type)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#892: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:277:
+			if (brd->brd_type == KLTYPE_META_ROUTER) {
[...]
+			} else if (brd->brd_type == KLTYPE_REPEATER_ROUTER) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#898: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:283:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:301:
+^I^I^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:307:
+^I^I^I$

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#926: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:311:
+	sprintf(path, EDGE_LBL_MODULE "/%s/" EDGE_LBL_SLAB "/%d/%s", buffer, geo_slab(brd->brd_geoid), board_name);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#939: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:324:
+component_serial_number_get(lboard_t ^I^I*board,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#940: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:325:
+^I^I^I    klconf_off_t ^Imfg_nic_offset,$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#944: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:329:
+{
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#946: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:331:
+	char	*serial_string,*str;
 	    	              ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#946: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:331:
+	char	*serial_string,*str;
 	    	               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:341:
+^Imfg_nic_string = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:352:
+^Iif (strcmp(key_pattern,"") && $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#967: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:352:
+	if (strcmp(key_pattern,"") && 
 	                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#967: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:352:
+	if (strcmp(key_pattern,"") && 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:353:
+	    !(str = strstr(mfg_nic_string,key_pattern)))
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#974: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:359:
+	if (!(serial_string = strstr(str,serial_pattern)))
 	                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#974: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:359:
+	if (!(serial_string = strstr(str,serial_pattern)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#985: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:370:
+^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#986: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:371:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#988: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:373:
+}
+/*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#995: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:380:
+board_serial_number_get(lboard_t *board,char *serial_number)
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1001: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:386:
+	strcpy(serial_number,"");
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#1002: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:387:
+	switch(KLCLASS(board->brd_type)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1005: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:390:
+^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1017: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:402:
+		if (component_serial_number_get(board,
[...]
+				return(1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:410:
+^I     ^Iklbri_t^I*bridge;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1025: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:410:
+^I     ^Iklbri_t^I*bridge;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1026: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:411:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1036: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:421:
+^I ^I * the bridge's manufacturing nic info$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1036: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:421:
+^I ^I * the bridge's manufacturing nic info$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:424:
+		if (component_serial_number_get(board,
+					bridge->bri_mfg_nic,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1045: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:430:
+^I^Iklrou_t *router;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1046: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:431:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:452:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1086: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:471:
+		strcpy(serial_number,"");
 		                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1098: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:483:
+ *^I^I^I^Ithe actual brick-type as recorded in the $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1122: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:507:
+	if (fmt == MODULE_FORMAT_LCD) {
[...]
+	    switch (brickchar) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1126: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:511:
+^I    switch (brickchar) $

WARNING:TABSTOP: Statements should start on a tabstop
#1126: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:511:
+	    switch (brickchar) 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1126: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:511:
+	    switch (brickchar) 
+	    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#1127: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:512:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#1128: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:513:
+	    case L1_BRICKTYPE_PX:

WARNING:TABSTOP: Statements should start on a tabstop
#1132: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:517:
+	    case L1_BRICKTYPE_IX:

WARNING:TABSTOP: Statements should start on a tabstop
#1135: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:520:
+	    }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1140: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:525:
+	if ((fmt == MODULE_FORMAT_BRIEF) || (fmt == MODULE_FORMAT_LCD)) {
[...]
+	    *buffer++ = '0' + RACK_GET_CLASS(rack);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fmt == MODULE_FORMAT_BRIEF'
#1140: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:525:
+	if ((fmt == MODULE_FORMAT_BRIEF) || (fmt == MODULE_FORMAT_LCD)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fmt == MODULE_FORMAT_LCD'
#1140: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:525:
+	if ((fmt == MODULE_FORMAT_BRIEF) || (fmt == MODULE_FORMAT_LCD)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1151: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:536:
+	else if (fmt == MODULE_FORMAT_LONG) {
[...]
+	    strcpy(buffer, EDGE_LBL_RACK "/");  buffer += strlen(buffer);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1151: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:536:
+	}
+	else if (fmt == MODULE_FORMAT_LONG) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1164: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:549:
+	if (position < 10)
+	    *buffer++ = '0';

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1168: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:553:
+
+}

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1177: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:562:
+	if (module < 0 ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1177: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:562:
+	if (module < 0 ) {
+		return MODULE_CBRICK;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1181: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:566:
+	if ((char)t == 'o') {
[...]
+	} else {
[...]

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 66 warnings, 19 checks, 572 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
