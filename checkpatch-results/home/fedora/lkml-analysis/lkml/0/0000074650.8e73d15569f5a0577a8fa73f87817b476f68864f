WARNING:TYPO_SPELLING: 'build-in' may be misspelled - perhaps 'built-in'?
#51: 
Downside. We are using request_firmware. If the driver is build-in and
                                                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#125: FILE: arch/i386/kernel/microcode.c:139:
+	BUG_ON(raw_smp_processor_id() != cpu_num);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#126: FILE: arch/i386/kernel/microcode.c:140:
+	uci->pf = uci->rev = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#133: FILE: arch/i386/kernel/microcode.c:146:
+		printk(KERN_ERR "microcode: CPU%d not a capable Intel "

WARNING:SPLIT_STRING: quoted string split across lines
#134: FILE: arch/i386/kernel/microcode.c:147:
+		printk(KERN_ERR "microcode: CPU%d not a capable Intel "
+			"processor\n", cpu_num);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model >= 5'
#148: FILE: arch/i386/kernel/microcode.c:154:
+	if ((c->x86_model >= 5) || (c->x86 > 6)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 > 6'
#148: FILE: arch/i386/kernel/microcode.c:154:
+	if ((c->x86_model >= 5) || (c->x86 > 6)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: arch/i386/kernel/microcode.c:170:
+static inline int microcode_update_match(int cpu_num,
+	microcode_header_t *mc_header, int sig, int pf)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#200: FILE: arch/i386/kernel/microcode.c:175:
+	if (!sigmatch(sig, uci->sig, pf, uci->pf)
+		|| mc_header->rev <= uci->rev)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'data_size < DEFAULT_UCODE_DATASIZE'
#229: FILE: arch/i386/kernel/microcode.c:190:
+	if ((data_size + MC_HEADER_SIZE > total_size)
+		|| (data_size < DEFAULT_UCODE_DATASIZE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#230: FILE: arch/i386/kernel/microcode.c:191:
+	if ((data_size + MC_HEADER_SIZE > total_size)
+		|| (data_size < DEFAULT_UCODE_DATASIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#231: FILE: arch/i386/kernel/microcode.c:192:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#232: FILE: arch/i386/kernel/microcode.c:193:
+		printk(KERN_ERR "microcode: error! "
+			"Bad data in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#242: FILE: arch/i386/kernel/microcode.c:198:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#243: FILE: arch/i386/kernel/microcode.c:199:
+		printk(KERN_ERR "microcode: error! "
+			"Unknown microcode update format\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ext_table_size < EXT_HEADER_SIZE'
#248: FILE: arch/i386/kernel/microcode.c:204:
+		if ((ext_table_size < EXT_HEADER_SIZE)
+		 || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#249: FILE: arch/i386/kernel/microcode.c:205:
+		if ((ext_table_size < EXT_HEADER_SIZE)
+		 || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#250: FILE: arch/i386/kernel/microcode.c:206:
+			printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: arch/i386/kernel/microcode.c:207:
+			printk(KERN_ERR "microcode: error! "
+				"Bad data in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#262: FILE: arch/i386/kernel/microcode.c:212:
+			printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: arch/i386/kernel/microcode.c:213:
+			printk(KERN_ERR "microcode: error! "
+				"Bad data in microcode data file\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: arch/i386/kernel/microcode.c:222:
+		int * ext_tablep = (int *)ext_header;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#282: FILE: arch/i386/kernel/microcode.c:228:
+			printk(KERN_WARNING "microcode: aborting, "

WARNING:SPLIT_STRING: quoted string split across lines
#283: FILE: arch/i386/kernel/microcode.c:229:
+			printk(KERN_WARNING "microcode: aborting, "
+				"bad extended signature table checksum\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#301: FILE: arch/i386/kernel/microcode.c:240:
+		printk(KERN_ERR "microcode: aborting, bad checksum\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#314: FILE: arch/i386/kernel/microcode.c:253:
+			printk(KERN_ERR "microcode: aborting, bad checksum\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: arch/i386/kernel/microcode.c:276:
+	if (microcode_update_match(cpu, mc_header,
+			mc_header->sig, mc_header->pf))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: arch/i386/kernel/microcode.c:289:
+		if (microcode_update_match(cpu, mc_header,
+				ext_sig->sig, ext_sig->pf))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#380: FILE: arch/i386/kernel/microcode.c:296:
+		" version 0x%x (current=0x%x)\n", cpu, mc_header->rev,uci->rev);
 		                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#380: FILE: arch/i386/kernel/microcode.c:296:
+	pr_debug("microcode: CPU %d found a matching microcode update with"
+		" version 0x%x (current=0x%x)\n", cpu, mc_header->rev,uci->rev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#383: FILE: arch/i386/kernel/microcode.c:299:
+		printk(KERN_ERR "microcode: error! Can not allocate memory\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: arch/i386/kernel/microcode.c:320:
+	BUG_ON(cpu_num != cpu);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uci->mc"
#483: FILE: arch/i386/kernel/microcode.c:322:
+	if (uci->mc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#498: FILE: arch/i386/kernel/microcode.c:342:
+		printk(KERN_ERR "microcode: CPU%d updated from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#499: FILE: arch/i386/kernel/microcode.c:343:
+		printk(KERN_ERR "microcode: CPU%d updated from revision "
+			"0x%x to 0x%x failed\n", cpu_num, uci->rev, val[1]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#528: FILE: arch/i386/kernel/microcode.c:365:
+		printk(KERN_ERR "microcode: error! Can not read user data\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'total_size < DEFAULT_UCODE_TOTALSIZE'
#536: FILE: arch/i386/kernel/microcode.c:369:
+	if ((offset + total_size > user_buffer_size)
+		|| (total_size < DEFAULT_UCODE_TOTALSIZE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#537: FILE: arch/i386/kernel/microcode.c:370:
+	if ((offset + total_size > user_buffer_size)
+		|| (total_size < DEFAULT_UCODE_TOTALSIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#538: FILE: arch/i386/kernel/microcode.c:371:
+		printk(KERN_ERR "microcode: error! Bad data in microcode "

WARNING:SPLIT_STRING: quoted string split across lines
#539: FILE: arch/i386/kernel/microcode.c:372:
+		printk(KERN_ERR "microcode: error! Bad data in microcode "
+				"data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#546: FILE: arch/i386/kernel/microcode.c:379:
+		printk(KERN_ERR "microcode: error! Can not read user data\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#556: FILE: arch/i386/kernel/microcode.c:386:
+static int do_microcode_update (void)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#560: FILE: arch/i386/kernel/microcode.c:390:
+	void * new_mc;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#612: FILE: arch/i386/kernel/microcode.c:433:
+static int microcode_open (struct inode *unused1, struct file *unused2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#641: FILE: arch/i386/kernel/microcode.c:481:
+static int __init microcode_dev_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#652: FILE: arch/i386/kernel/microcode.c:496:
+static void __exit microcode_dev_exit (void)

ERROR:SPACING: space required before the open parenthesis '('
#660: FILE: arch/i386/kernel/microcode.c:504:
+#define microcode_dev_exit() do { } while(0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: arch/i386/kernel/microcode.c:508:
+static long get_next_ucode_from_buffer(void **mc, void *buf,
+	unsigned long size, long offset)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'total_size < DEFAULT_UCODE_TOTALSIZE'
#675: FILE: arch/i386/kernel/microcode.c:519:
+	if ((offset + total_size > size)
+		|| (total_size < DEFAULT_UCODE_TOTALSIZE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#676: FILE: arch/i386/kernel/microcode.c:520:
+	if ((offset + total_size > size)
+		|| (total_size < DEFAULT_UCODE_TOTALSIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#677: FILE: arch/i386/kernel/microcode.c:521:
+		printk(KERN_ERR "microcode: error! Bad data in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#683: FILE: arch/i386/kernel/microcode.c:527:
+		printk(KERN_ERR "microcode: error! Can not allocate memory\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#695: FILE: arch/i386/kernel/microcode.c:539:
+	void * buf;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#703: FILE: arch/i386/kernel/microcode.c:547:
+	BUG_ON(cpu != raw_smp_processor_id());

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: arch/i386/kernel/microcode.c:548:
+	sprintf(name,"intel-ucode/%02x-%02x-%02x",
 	            ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#768: FILE: arch/i386/kernel/microcode.c:612:
+	unsigned long val = simple_strtoul(buf, &end, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucode_cpu_info *' should also have an identifier name
#801: FILE: arch/i386/kernel/microcode.c:645:
+	ssize_t (*show)(struct ucode_cpu_info *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#801: FILE: arch/i386/kernel/microcode.c:645:
+	ssize_t (*show)(struct ucode_cpu_info *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucode_cpu_info *' should also have an identifier name
#802: FILE: arch/i386/kernel/microcode.c:646:
+	ssize_t (*store)(struct ucode_cpu_info *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#802: FILE: arch/i386/kernel/microcode.c:646:
+	ssize_t (*store)(struct ucode_cpu_info *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#802: FILE: arch/i386/kernel/microcode.c:646:
+	ssize_t (*store)(struct ucode_cpu_info *, const char *, size_t);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#804: FILE: arch/i386/kernel/microcode.c:648:
+};
+#define to_uci(k) container_of(k, struct ucode_cpu_info, kobj)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#809: FILE: arch/i386/kernel/microcode.c:653:
+static struct attribute * mc_default_attrs[] = {

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#837: FILE: arch/i386/kernel/microcode.c:681:
+static struct sysfs_ops mc_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#922: FILE: arch/i386/kernel/microcode.c:766:
+static int __init microcode_init (void)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 40 warnings, 18 checks, 904 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
