WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#39: 
Signed-Off-By: Pavel Emelianiov <xemul@openvz.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#40: 
Signed-Off-By: Kirill Korotaev <dev@openvz.org>

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#81: FILE: ipc/sem.c:93:
+#define sem_lock(ns, id)	((struct sem_array*)ipc_lock(&sem_ids(ns), id))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#83: FILE: ipc/sem.c:95:
+#define sem_rmid(ns, id)	((struct sem_array*)ipc_rmid(&sem_ids(ns), id))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sma' may be better as '(sma)' to avoid precedence issues
#84: FILE: ipc/sem.c:96:
+#define sem_checkid(ns, sma, semid)	\
+	ipc_checkid(&sem_ids(ns),&sma->sem_perm,semid)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#85: FILE: ipc/sem.c:97:
+	ipc_checkid(&sem_ids(ns),&sma->sem_perm,semid)
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#85: FILE: ipc/sem.c:97:
+	ipc_checkid(&sem_ids(ns),&sma->sem_perm,semid)
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: ipc/sem.c:97:
+	ipc_checkid(&sem_ids(ns),&sma->sem_perm,semid)
 	                                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#93: FILE: ipc/sem.c:103:
+static int newary (struct ipc_namespace *, key_t, int, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#94: FILE: ipc/sem.c:104:
+static void freeary (struct ipc_namespace *ns, struct sem_array *sma, int id);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ids)...) over kmalloc(sizeof(struct ipc_ids)...)
#129: FILE: ipc/sem.c:142:
+	ids = kmalloc(sizeof(struct ipc_ids), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ids"
#130: FILE: ipc/sem.c:143:
+	if (ids == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#145: FILE: ipc/sem.c:158:
+		if (sma == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#175: FILE: ipc/sem.c:212:
+static int newary (struct ipc_namespace *ns, key_t key, int nsems, int semflg)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#225: FILE: ipc/sem.c:275:
+	} else if ((id = ipc_findkey(&sem_ids(ns), key)) == -1) {  /* key not used */

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#261: FILE: ipc/sem.c:497:
+static void freeary (struct ipc_namespace *ns, struct sem_array *sma, int id)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: ipc/sem.c:557:
+static int semctl_nolock(struct ipc_namespace *ns, int semid, int semnum,
+		int cmd, int version, union semun arg)

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: ipc/sem.c:601:
+		if(semid >= sem_ids(ns).entries->size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: ipc/sem.c:639:
+static int semctl_main(struct ipc_namespace *ns, int semid, int semnum,
+		int cmd, int version, union semun arg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: ipc/sem.c:655:
+	if (sem_checkid(ns,sma,semid))
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: ipc/sem.c:655:
+	if (sem_checkid(ns,sma,semid))
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: ipc/sem.c:858:
+static int semctl_down(struct ipc_namespace *ns, int semid, int semnum,
+		int cmd, int version, union semun arg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: ipc/sem.c:873:
+	if (sem_checkid(ns,sma,semid)) {
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: ipc/sem.c:873:
+	if (sem_checkid(ns,sma,semid)) {
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: ipc/sem.c:940:
+		err = semctl_nolock(ns,semid,semnum,cmd,version,arg);
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: ipc/sem.c:940:
+		err = semctl_nolock(ns,semid,semnum,cmd,version,arg);
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: ipc/sem.c:940:
+		err = semctl_nolock(ns,semid,semnum,cmd,version,arg);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: ipc/sem.c:940:
+		err = semctl_nolock(ns,semid,semnum,cmd,version,arg);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: ipc/sem.c:940:
+		err = semctl_nolock(ns,semid,semnum,cmd,version,arg);
 		                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: ipc/sem.c:950:
+		err = semctl_main(ns,semid,semnum,cmd,version,arg);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: ipc/sem.c:950:
+		err = semctl_main(ns,semid,semnum,cmd,version,arg);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: ipc/sem.c:950:
+		err = semctl_main(ns,semid,semnum,cmd,version,arg);
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: ipc/sem.c:950:
+		err = semctl_main(ns,semid,semnum,cmd,version,arg);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: ipc/sem.c:950:
+		err = semctl_main(ns,semid,semnum,cmd,version,arg);
 		                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: ipc/sem.c:955:
+		err = semctl_down(ns,semid,semnum,cmd,version,arg);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: ipc/sem.c:955:
+		err = semctl_down(ns,semid,semnum,cmd,version,arg);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: ipc/sem.c:955:
+		err = semctl_down(ns,semid,semnum,cmd,version,arg);
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: ipc/sem.c:955:
+		err = semctl_down(ns,semid,semnum,cmd,version,arg);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: ipc/sem.c:955:
+		err = semctl_down(ns,semid,semnum,cmd,version,arg);
 		                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#465: FILE: ipc/sem.c:1068:
+	if (sem_checkid(ns,sma,semid)) {
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#465: FILE: ipc/sem.c:1068:
+	if (sem_checkid(ns,sma,semid)) {
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: ipc/sem.c:1183:
+	if (sem_checkid(ns,sma,semid))
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: ipc/sem.c:1183:
+	if (sem_checkid(ns,sma,semid))
 	                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#546: FILE: ipc/sem.c:1358:
+		BUG_ON(sem_checkid(ns,sma,u->semid));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: ipc/sem.c:1358:
+		BUG_ON(sem_checkid(ns,sma,u->semid));
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: ipc/sem.c:1358:
+		BUG_ON(sem_checkid(ns,sma,u->semid));
 		                         ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000070598.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 8 warnings, 7 checks, 469 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000070598.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
