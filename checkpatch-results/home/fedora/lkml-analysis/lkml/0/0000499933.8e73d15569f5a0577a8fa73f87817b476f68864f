WARNING:REPEATED_WORD: Possible repeated word: 'the'
#57: 
MAX_DRIVES.  Thus, kstat_read_proc() will print the the statistics for

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#88: 
diff -urN -X dontdiff linux-2.4.14/drivers/block/ll_rw_blk.c linux-test/drivers/block/ll_rw_blk.c

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#100: FILE: drivers/block/ll_rw_blk.c:190:
+	if (q->dk_stat)
+		kfree(q->dk_stat);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: drivers/block/ll_rw_blk.c:191:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: drivers/block/ll_rw_blk.c:401:
+^Idisk_stat * new;^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: drivers/block/ll_rw_blk.c:401:
+	disk_stat * new;	

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: drivers/block/ll_rw_blk.c:423:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: drivers/block/ll_rw_blk.c:424:
+^I * At last, allocate and initialize the statistics $

ERROR:POINTER_LOCATION: "(foo * )" should be "(foo *)"
#121: FILE: drivers/block/ll_rw_blk.c:426:
+	new = (disk_stat * )kmalloc(sizeof(disk_stat), GFP_KERNEL);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#121: FILE: drivers/block/ll_rw_blk.c:426:
+	new = (disk_stat * )kmalloc(sizeof(disk_stat), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#121: FILE: drivers/block/ll_rw_blk.c:426:
+	new = (disk_stat * )kmalloc(sizeof(disk_stat), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#122: FILE: drivers/block/ll_rw_blk.c:427:
+	if (new == NULL) {
+		printk(KERN_ERR "blk_init_queue:error allocating statisitcs\n");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#122: FILE: drivers/block/ll_rw_blk.c:427:
+	if (new == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#123: FILE: drivers/block/ll_rw_blk.c:428:
+		printk(KERN_ERR "blk_init_queue:error allocating statisitcs\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#123: FILE: drivers/block/ll_rw_blk.c:428:
+	if (new == NULL) {
+		printk(KERN_ERR "blk_init_queue:error allocating statisitcs\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: drivers/block/ll_rw_blk.c:516:
+inline void drive_stat_acct (disk_stat * ds, int rw,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#135: FILE: drivers/block/ll_rw_blk.c:516:
+inline void drive_stat_acct (disk_stat * ds, int rw,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ds"
#143: FILE: drivers/block/ll_rw_blk.c:519:
+	if (ds == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#196: FILE: drivers/ide/ide.c:1454:
+	if (DEVICE_NR(dev) >= MAX_DRIVES)
+		 return NULL;

WARNING:TABSTOP: Statements should start on a tabstop
#197: FILE: drivers/ide/ide.c:1455:
+		 return NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: drivers/ide/ide.c:1456:
+^Ielse $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: drivers/md/md.c:3305:
+		request_queue_t * rq = blk_get_queue(rdev->dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: drivers/md/md.c:3306:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: drivers/md/md.c:3309:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->dk_stat == NULL'
#219: FILE: drivers/md/md.c:3310:
+		if (rq == NULL || (rq->dk_stat == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq"
#219: FILE: drivers/md/md.c:3310:
+		if (rq == NULL || (rq->dk_stat == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq->dk_stat"
#219: FILE: drivers/md/md.c:3310:
+		if (rq == NULL || (rq->dk_stat == NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: drivers/md/md.c:3312:
+^I^Icurr_events = rq->dk_stat->dk_drive_rblk + $

WARNING:SPACING: space prohibited before semicolon
#222: FILE: drivers/md/md.c:3313:
+			rq->dk_stat->dk_drive_wblk ;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: fs/proc/proc_misc.c:262:
+static inline int show_disk_stat(char * page, int len, disk_stat * ds,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: fs/proc/proc_misc.c:262:
+static inline int show_disk_stat(char * page, int len, disk_stat * ds,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: fs/proc/proc_misc.c:263:
+static inline int show_disk_stat(char * page, int len, disk_stat * ds,
+					int major, int disk)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: fs/proc/proc_misc.c:329:
+		disk_stat * ds;

ERROR:SPACING: space required before the open brace '{'
#290: FILE: fs/proc/proc_misc.c:331:
+		if (!(blk_dev[major].queue)){

ERROR:SPACING: space required after that close brace '}'
#294: FILE: fs/proc/proc_misc.c:335:
+		}else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: fs/proc/proc_misc.c:336:
+			request_queue_t * q;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#296: FILE: fs/proc/proc_misc.c:337:
+			struct gendisk * hd = get_gendisk(MKDEV(major,0));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#296: FILE: fs/proc/proc_misc.c:337:
+			struct gendisk * hd = get_gendisk(MKDEV(major,0));
 			                                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#297: FILE: fs/proc/proc_misc.c:338:
+			int max_disk = MINORMASK>>hd->minor_shift;
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#300: FILE: fs/proc/proc_misc.c:341:
+				q = blk_get_queue(MKDEV(major,disk<<hd->minor_shift));
 				                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#300: FILE: fs/proc/proc_misc.c:341:
+				q = blk_get_queue(MKDEV(major,disk<<hd->minor_shift));
 				                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: fs/proc/proc_misc.c:347:
+				len = show_disk_stat(page, len, ds, major,disk);
 				                                         ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#318: FILE: include/linux/blkdev.h:74:
+typedef struct disk_stat{

WARNING:SPACING: missing space after struct definition
#318: FILE: include/linux/blkdev.h:74:
+typedef struct disk_stat{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#335: FILE: include/linux/blkdev.h:135:
+	disk_stat * dk_stat;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#344: FILE: include/linux/blkdev.h:204:
+extern void drive_stat_acct (disk_stat *, int rw,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: include/linux/blkdev.h:204:
+extern void drive_stat_acct (disk_stat *, int rw,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'disk_stat *' should also have an identifier name
#344: FILE: include/linux/blkdev.h:204:
+extern void drive_stat_acct (disk_stat *, int rw,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: include/linux/blkdev.h:205:
+extern void drive_stat_acct (disk_stat *, int rw,
 					unsigned long nr_sectors, int new_io);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499933.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 15 warnings, 10 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499933.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
