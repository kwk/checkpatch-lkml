CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#182: FILE: arch/i386/mm/highmem.c:42:
+	if (!pte_none(get_pte(kmap_pte-idx)))
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: arch/i386/mm/hugetlbpage.c:31:
+	BUG_ON(pte && !pte_none(get_pte(pte)) && !pte_huge(get_pte(pte)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#228: FILE: arch/i386/mm/hugetlbpage.c:82:
+	page = &pte_page(get_pte(pte))[vpfn % (HPAGE_SIZE/PAGE_SIZE)];
 	                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: arch/i386/mm/init.c:119:
+^I^Iif (pgd_none(get_pgd(pgd))) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: arch/i386/mm/init.c:124:
+^I^I^Iif (pmd_none(get_pmd(pmd))) $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#274: FILE: arch/i386/mm/init.c:342:
+	pgd_t *pgd_base = (pgd_t*)swapper_pg_dir;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: arch/i386/mm/ioremap.c:35:
+		BUG_ON(!pte_none(get_pte(pte)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: arch/i386/mm/pageattr.c:132:
+^I^Iif ((pte_val(get_pte(kpte)) & _PAGE_PSE) == 0) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: arch/i386/mm/pageattr.c:148:
+^I} else if ((pte_val(get_pte(kpte)) & _PAGE_PSE) == 0) { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: arch/i386/mm/pgtable.c:271:
+		pgd_t pgdent = get_pgd(&pgd[i]);
+		mach_release_pmd(pgd_val(pgdent) >> PAGE_SHIFT);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#404: FILE: arch/i386/mm/pgtable.c:272:
+		kmem_cache_free(pmd_cache, (void *)__va(pgd_val(pgdent)-1));
 		                                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: arch/i386/mm/pgtable.c:287:
+			pgd_t pgdent = get_pgd(&pgd[i]);
+			mach_release_pmd(pgd_val(pgdent) >> PAGE_SHIFT);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#416: FILE: arch/i386/mm/pgtable.c:288:
+			kmem_cache_free(pmd_cache, (void *)__va(pgd_val(pgdent)-1));
 			                                                       ^

CHECK:SPACING: No space is necessary after a cast
#570: FILE: include/asm-i386/pgtable-3level.h:55:
+#define pmd_offset(pud, address) ((pmd_t *) pud_page(get_pud(pud)) + \

CHECK:SPACING: No space is necessary after a cast
#609: FILE: include/asm-i386/pgtable.h:388:
+	((pte_t *) pmd_page_kernel(get_pmd(dir)) +  pte_index(address))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#618: FILE: include/asm-i386/pgtable.h:422:
+	unsigned pfn = pmd_val(get_pmd(dir)) >> PAGE_SHIFT;		\

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#627: FILE: include/asm-i386/pgtable.h:431:
+	unsigned pfn = pmd_val(get_pmd(dir)) >> PAGE_SHIFT;		\

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#731: FILE: include/linux/mm.h:805:
+	return (unlikely(pgd_none(get_pgd(pgd))) && __pud_alloc(mm, pgd, address))?
 	                                                                          ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#738: FILE: include/linux/mm.h:811:
+	return (unlikely(pud_none(get_pud(pud))) && __pmd_alloc(mm, pud, address))?
 	                                                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#747: FILE: include/linux/mm.h:828:
+#define pte_lockptr(mm, pmd)	({(void)(mm); __pte_lockptr(pmd_page(get_pmd(pmd)));})
                             	                                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#756: FILE: include/linux/mm.h:853:
+	((unlikely(!pmd_present(get_pmd(pmd))) && __pte_alloc(mm, pmd, address))? \
 	                                                                        ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#761: FILE: include/linux/mm.h:857:
+	((unlikely(!pmd_present(get_pmd(pmd))) && __pte_alloc(mm, pmd, address))? \
 	                                                                        ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#766: FILE: include/linux/mm.h:861:
+	((unlikely(!pmd_present(get_pmd(pmd))) && __pte_alloc_kernel(pmd, address))? \
 	                                                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#913: FILE: mm/hugetlb.c:556:
+			page = &pte_page(get_pte(pte))[vpfn % (HPAGE_SIZE/PAGE_SIZE)];
 			                                                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1044: FILE: mm/memory.c:996:
+			BUG_ON(pgd_none(get_pgd(pgd)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1047: FILE: mm/memory.c:998:
+			BUG_ON(pud_none(get_pud(pud)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1069: FILE: mm/memory.c:1104:
+		BUG_ON(!pte_none(get_pte(pte)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1087: FILE: mm/memory.c:1262:
+		BUG_ON(!pte_none(get_pte(pte)));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1159: FILE: mm/memory.c:2209:
+	old_entry = entry = get_pte(pte);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1326: FILE: mm/rmap.c:636:
+		BUG_ON(pte_file(get_pte(pte)));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093751.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 11 warnings, 8 checks, 1079 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093751.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
