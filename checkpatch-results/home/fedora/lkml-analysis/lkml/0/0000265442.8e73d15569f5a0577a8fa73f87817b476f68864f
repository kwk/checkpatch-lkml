WARNING:REPEATED_WORD: Possible repeated word: 'the'
#42: 
functions for the the SAL services used by the driver have been added

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#81: FILE: drivers/char/Kconfig:427:
+config SGI_SNSC
+	bool "SGI Altix system controller communication support"
+	help
+	  If you have an SGI Altix and you want to enable system
+	  controller communication from user space (you want this!),
+	  say Y.  Otherwise, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: drivers/char/snsc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: drivers/char/snsc.c:28:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#139: FILE: drivers/char/snsc.c:34:
+#define DPRINTF(x...)	printk(x)

ERROR:SPACING: space required before the open parenthesis '('
#141: FILE: drivers/char/snsc.c:36:
+#define DPRINTF(x...)	do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#151: FILE: drivers/char/snsc.c:46:
+static struct file_operations scdrv_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#152: FILE: drivers/char/snsc.c:47:
+	owner:THIS_MODULE,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#153: FILE: drivers/char/snsc.c:48:
+	read:scdrv_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#153: FILE: drivers/char/snsc.c:48:
+	read:scdrv_read,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#154: FILE: drivers/char/snsc.c:49:
+	write:scdrv_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#154: FILE: drivers/char/snsc.c:49:
+	write:scdrv_write,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#155: FILE: drivers/char/snsc.c:50:
+	poll:scdrv_poll,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#155: FILE: drivers/char/snsc.c:50:
+	poll:scdrv_poll,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#156: FILE: drivers/char/snsc.c:51:
+	open:scdrv_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#156: FILE: drivers/char/snsc.c:51:
+	open:scdrv_open,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#157: FILE: drivers/char/snsc.c:52:
+	release:scdrv_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#157: FILE: drivers/char/snsc.c:52:
+	release:scdrv_release,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: drivers/char/snsc.c:64:
+scdrv_wait(wait_queue_head_t * waitq_head, spinlock_t * waitq_lock,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: drivers/char/snsc.c:64:
+scdrv_wait(wait_queue_head_t * waitq_head, spinlock_t * waitq_lock,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#179: FILE: drivers/char/snsc.c:74:
+	if (timeout) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#187: FILE: drivers/char/snsc.c:82:
+	if (signal_pending(current)) {
+		return (timeout ? -ret : -1);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#188: FILE: drivers/char/snsc.c:83:
+		return (timeout ? -ret : -1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#213: FILE: drivers/char/snsc.c:108:
+	if (alloc_chrdev_region(&first_dev, 0, (MAX_SLABS*nummodules), "snsc")
 	                                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#215: FILE: drivers/char/snsc.c:110:
+		printk("%s: failed to register SN system controller device\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#216: FILE: drivers/char/snsc.c:111:
+		       __FUNCTION__);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#224: FILE: drivers/char/snsc.c:119:
+		for (i = 0; i <= MAX_SLABS; i++) {
+

CHECK:SPACING: No space is necessary after a cast
#239: FILE: drivers/char/snsc.c:134:
+			    (struct sysctl_data_s *) kmalloc

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#239: FILE: drivers/char/snsc.c:134:
+			    (struct sysctl_data_s *) kmalloc

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#240: FILE: drivers/char/snsc.c:135:
+				(sizeof (struct sysctl_data_s), GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#242: FILE: drivers/char/snsc.c:137:
+				printk("%s: failed to allocate device info"

WARNING:SPLIT_STRING: quoted string split across lines
#243: FILE: drivers/char/snsc.c:138:
+				printk("%s: failed to allocate device info"
+				       "for %s/%s\n", __FUNCTION__,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#243: FILE: drivers/char/snsc.c:138:
+				printk("%s: failed to allocate device info"
+				       "for %s/%s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#243: FILE: drivers/char/snsc.c:138:
+				       "for %s/%s\n", __FUNCTION__,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#247: FILE: drivers/char/snsc.c:142:
+			memset(scd, 0, sizeof (struct sysctl_data_s));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#251: FILE: drivers/char/snsc.c:146:
+			if (!(salbuf = kmalloc(SCDRV_BUFSZ, GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#252: FILE: drivers/char/snsc.c:147:
+				printk("%s: failed to allocate driver buffer"

WARNING:SPLIT_STRING: quoted string split across lines
#253: FILE: drivers/char/snsc.c:148:
+				printk("%s: failed to allocate driver buffer"
+				       "(%s%s)\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#253: FILE: drivers/char/snsc.c:148:
+				       "(%s%s)\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: drivers/char/snsc.c:158:
+				    ("%s: failed to initialize SAL for"
+				     " system controller communication"

WARNING:SPLIT_STRING: quoted string split across lines
#264: FILE: drivers/char/snsc.c:159:
+				     " system controller communication"
+				     " (%s/%s): outdated PROM?\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#265: FILE: drivers/char/snsc.c:160:
+				     __FUNCTION__, SYSCTL_BASENAME, devname);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#274: FILE: drivers/char/snsc.c:169:
+				printk("%s: failed to register system"

WARNING:SPLIT_STRING: quoted string split across lines
#275: FILE: drivers/char/snsc.c:170:
+				printk("%s: failed to register system"
+				       " controller device (%s%s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#276: FILE: drivers/char/snsc.c:171:
+				       __FUNCTION__, SYSCTL_BASENAME, devname);

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#286: FILE: drivers/char/snsc.c:181:
+						 0 /*ignored */ ,
 						                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: drivers/char/snsc.c:205:
+		printk("%s: no such device\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#310: FILE: drivers/char/snsc.c:205:
+		printk("%s: no such device\n", __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: drivers/char/snsc.c:211:
+		kmalloc(sizeof (struct subch_data_s), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sd"
#317: FILE: drivers/char/snsc.c:212:
+	if (sd == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#318: FILE: drivers/char/snsc.c:213:
+		printk("%s: couldn't allocate subchannel data\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#319: FILE: drivers/char/snsc.c:214:
+		       __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#324: FILE: drivers/char/snsc.c:219:
+	memset(sd, 0, sizeof (struct subch_data_s));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: drivers/char/snsc.c:225:
+		printk("%s: couldn't allocate subchannel\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#330: FILE: drivers/char/snsc.c:225:
+		printk("%s: couldn't allocate subchannel\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#350: FILE: drivers/char/snsc.c:245:
+		printk("%s: irq request failed (%d)\n", __FUNCTION__, rv);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#350: FILE: drivers/char/snsc.c:245:
+		printk("%s: irq request failed (%d)\n", __FUNCTION__, rv);

CHECK:SPACING: No space is necessary after a cast
#366: FILE: drivers/char/snsc.c:261:
+	struct subch_data_s *sd = (struct subch_data_s *) file->private_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#387: FILE: drivers/char/snsc.c:282:
+read_status_check(struct subch_data_s * sd, int *len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: drivers/char/snsc.c:288:
+scdrv_read(struct file *file, char *buf, size_t count, loff_t * f_pos)

CHECK:SPACING: No space is necessary after a cast
#398: FILE: drivers/char/snsc.c:293:
+	struct subch_data_s *sd = (struct subch_data_s *) file->private_data;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#405: FILE: drivers/char/snsc.c:300:
+		if (file->f_flags & O_NONBLOCK) {
+			return -EAGAIN;
+		}

CHECK:SPACING: No space is necessary after a cast
#443: FILE: drivers/char/snsc.c:338:
+				__FUNCTION__, (int) count, len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#443: FILE: drivers/char/snsc.c:338:
+				__FUNCTION__, (int) count, len);

CHECK:SPACING: No space is necessary after a cast
#445: FILE: drivers/char/snsc.c:340:
+		len = min((int) count, len);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#466: FILE: drivers/char/snsc.c:361:
+write_status_check(struct subch_data_s * sd, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: drivers/char/snsc.c:367:
+scdrv_write(struct file *file, const char *buf, size_t count, loff_t * f_pos)

CHECK:SPACING: No space is necessary after a cast
#476: FILE: drivers/char/snsc.c:371:
+	struct subch_data_s *sd = (struct subch_data_s *) file->private_data;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#483: FILE: drivers/char/snsc.c:378:
+		if (file->f_flags & O_NONBLOCK) {
+			return -EAGAIN;
+		}

CHECK:SPACING: No space is necessary after a cast
#493: FILE: drivers/char/snsc.c:388:
+	count = min((int) count, CHUNKSIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status >= 0'
#523: FILE: drivers/char/snsc.c:418:
+	if ((status >= 0) && (status < count)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status < count'
#523: FILE: drivers/char/snsc.c:418:
+	if ((status >= 0) && (status < count)) {

CHECK:SPACING: No space is necessary after a cast
#525: FILE: drivers/char/snsc.c:420:
+			status, (int) count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#531: FILE: drivers/char/snsc.c:426:
+scdrv_lock_all(struct subch_data_s * sd, unsigned long *flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#538: FILE: drivers/char/snsc.c:433:
+scdrv_unlock_all(struct subch_data_s * sd, unsigned long flags)

CHECK:SPACING: No space is necessary after a cast
#549: FILE: drivers/char/snsc.c:444:
+	struct subch_data_s *sd = (struct subch_data_s *) file->private_data;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#560: FILE: drivers/char/snsc.c:455:
+		if (status & SAL_IROUTER_INTR_RECV) {
+			mask |= POLLIN | POLLRDNORM;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#563: FILE: drivers/char/snsc.c:458:
+		if (status & SAL_IROUTER_INTR_XMIT) {
+			mask |= POLLOUT | POLLWRNORM;
+		}

CHECK:SPACING: No space is necessary after a cast
#574: FILE: drivers/char/snsc.c:469:
+	struct subch_data_s *sd = (struct subch_data_s *) subch_data;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#582: FILE: drivers/char/snsc.c:477:
+		if (status & SAL_IROUTER_INTR_RECV) {
+			wake_up_all(&sd->sd_rq);
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#601: FILE: drivers/char/snsc.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#705: FILE: include/asm-ia64/sn/sn_sal.h:107:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#724: FILE: include/asm-ia64/sn/sn_sal.h:737:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_OPEN, nasid,

CHECK:SPACING: No space is necessary after a cast
#726: FILE: include/asm-ia64/sn/sn_sal.h:739:
+	return (int) rv.v0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#736: FILE: include/asm-ia64/sn/sn_sal.h:749:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_CLOSE,

CHECK:SPACING: No space is necessary after a cast
#737: FILE: include/asm-ia64/sn/sn_sal.h:750:
+			   (u64) nasid, (u64) subch, 0, 0, 0, 0);

CHECK:SPACING: No space is necessary after a cast
#738: FILE: include/asm-ia64/sn/sn_sal.h:751:
+	return (int) rv.status;

WARNING:LINE_SPACING: Missing a blank line after declarations
#753: FILE: include/asm-ia64/sn/sn_sal.h:766:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_RECV,

CHECK:SPACING: No space is necessary after a cast
#754: FILE: include/asm-ia64/sn/sn_sal.h:767:
+			   (u64) nasid, (u64) subch, (u64) buf, (u64) len,

CHECK:SPACING: No space is necessary after a cast
#756: FILE: include/asm-ia64/sn/sn_sal.h:769:
+	return (int) rv.status;

WARNING:LINE_SPACING: Missing a blank line after declarations
#771: FILE: include/asm-ia64/sn/sn_sal.h:784:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_SEND,

CHECK:SPACING: No space is necessary after a cast
#772: FILE: include/asm-ia64/sn/sn_sal.h:785:
+			   (u64) nasid, (u64) subch, (u64) buf, (u64) len,

CHECK:SPACING: No space is necessary after a cast
#774: FILE: include/asm-ia64/sn/sn_sal.h:787:
+	return (int) rv.v0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#787: FILE: include/asm-ia64/sn/sn_sal.h:800:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_INTR_STATUS,

CHECK:SPACING: No space is necessary after a cast
#788: FILE: include/asm-ia64/sn/sn_sal.h:801:
+			   (u64) nasid, (u64) subch, 0, 0, 0, 0);

CHECK:SPACING: No space is necessary after a cast
#789: FILE: include/asm-ia64/sn/sn_sal.h:802:
+	return (int) rv.v0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#800: FILE: include/asm-ia64/sn/sn_sal.h:813:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_INTR_ON,

CHECK:SPACING: No space is necessary after a cast
#801: FILE: include/asm-ia64/sn/sn_sal.h:814:
+			   (u64) nasid, (u64) subch, intr, 0, 0, 0);

CHECK:SPACING: No space is necessary after a cast
#802: FILE: include/asm-ia64/sn/sn_sal.h:815:
+	return (int) rv.v0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#813: FILE: include/asm-ia64/sn/sn_sal.h:826:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_INTR_OFF,

CHECK:SPACING: No space is necessary after a cast
#814: FILE: include/asm-ia64/sn/sn_sal.h:827:
+			   (u64) nasid, (u64) subch, intr, 0, 0, 0);

CHECK:SPACING: No space is necessary after a cast
#815: FILE: include/asm-ia64/sn/sn_sal.h:828:
+	return (int) rv.v0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#829: FILE: include/asm-ia64/sn/sn_sal.h:842:
+	struct ia64_sal_retval rv;
+	SAL_CALL_REENTRANT(rv, SN_SAL_IROUTER_OP, SAL_IROUTER_INIT,

CHECK:SPACING: No space is necessary after a cast
#830: FILE: include/asm-ia64/sn/sn_sal.h:843:
+			   (u64) nasid, (u64) buf, (u64) len, 0, 0, 0);

CHECK:SPACING: No space is necessary after a cast
#831: FILE: include/asm-ia64/sn/sn_sal.h:844:
+	return (int) rv.status;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 56 warnings, 37 checks, 741 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
