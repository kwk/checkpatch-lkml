WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
A debugfs file named `readahead/events' is created according to advices from

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
## Compile with CONFIG_DEBUG_FS('Kernel hacking  --->  Debug Filesystem')

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# echo > /var/log/kern.log # you may want to backup it first

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# echo 5 > /debug/readahead/debug_level # show verbose printk traces

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
## do one benchmark/task

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# echo 0 > /debug/readahead/debug_level # revert to normal value

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# bzip2 -c /var/log/kern.log > kern.log-`date +'%F_%R'`.bz2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# cat /debug/readahead/events

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: mm/readahead.c:112:
+extern struct file_operations ra_debug_fops;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#109: FILE: mm/readahead.c:112:
+extern struct file_operations ra_debug_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: mm/readahead.c:125:
+	readahead_events_dentry = debugfs_create_file("events",
+					0644, root, NULL, &ra_debug_fops);

WARNING:TYPO_SPELLING: 'contexta' may be misspelled - perhaps 'context'?
#140: FILE: mm/readahead.c:156:
+	"contexta",
 	 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: mm/readahead.c:182:
+static unsigned long ra_event_count[RA_CLASS_END+1][RA_EVENT_END+1][2];
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: mm/readahead.c:182:
+static unsigned long ra_event_count[RA_CLASS_END+1][RA_EVENT_END+1][2];
                                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: mm/readahead.c:185:
+static inline void ra_account(struct file_ra_state *ra,
+				enum ra_event e, int pages)

CHECK:BRACES: braces {} should be used on all arms of this statement
#173: FILE: mm/readahead.c:189:
+	if (e == RA_EVENT_READAHEAD_HIT && pages < 0) {
[...]
+	} else if (ra)
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: mm/readahead.c:243:
+				seq_printf(s, item_fmt,
+						ra_event_count[c][e][i]);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#238: FILE: mm/readahead.c:254:
+	seq_printf(s, event_fmt, "random_rate");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: mm/readahead.c:257:
+		seq_printf(s, percent_format,
+			(ra_event_count[c][RA_EVENT_READRANDOM][0] * 100) /

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#246: FILE: mm/readahead.c:262:
+	seq_printf(s, event_fmt, "ra_hit_rate");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: mm/readahead.c:265:
+		seq_printf(s, percent_format,
+			(ra_event_count[c][RA_EVENT_READAHEAD_HIT][1] * 100) /

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#253: FILE: mm/readahead.c:269:
+	seq_printf(s, event_fmt, "la_hit_rate");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/readahead.c:272:
+		seq_printf(s, percent_format,
+			(ra_event_count[c][RA_EVENT_LOOKAHEAD_HIT][0] * 100) /

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#260: FILE: mm/readahead.c:276:
+	seq_printf(s, event_fmt, "var_ra_size");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: mm/readahead.c:279:
+		seq_printf(s, item_fmt,
+			(ra_event_count[c][RA_EVENT_END][1] -

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#270: FILE: mm/readahead.c:286:
+	seq_printf(s, event_fmt, "avg_ra_size");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: mm/readahead.c:289:
+		seq_printf(s, item_fmt,
+			(ra_event_count[c][RA_EVENT_READAHEAD][1] +

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#278: FILE: mm/readahead.c:294:
+	seq_printf(s, event_fmt, "avg_la_size");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: mm/readahead.c:297:
+		seq_printf(s, item_fmt,
+			(ra_event_count[c][RA_EVENT_LOOKAHEAD][1] +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: mm/readahead.c:311:
+static ssize_t ra_debug_write(struct file *file, const char __user *buf,
+				size_t size, loff_t *offset)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#302: FILE: mm/readahead.c:318:
+struct file_operations ra_debug_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: mm/readahead.c:330:
+static inline void ra_account(struct file_ra_state *ra,
+				enum ra_event e, int pages)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#341: FILE: mm/readahead.c:714:
+	ret = __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: mm/readahead.c:1904:
+			ra_account(ra, RA_EVENT_IO_CONGESTION,
+							end_index - index);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124727.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 19 warnings, 15 checks, 267 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124727.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
