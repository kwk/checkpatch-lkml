WARNING:TYPO_SPELLING: 'conjuction' may be misspelled - perhaps 'conjunction'?
#78: FILE: Documentation/Configure.help:142:
+  This option is currently experimental if used in conjuction with SMP
                                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#122: FILE: arch/i386/kernel/entry.S:85:
+         * byte boundry (we put that here as a shift count)
                 ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: arch/i386/kernel/entry.S:90:
+irq_stat_softirq_mask           = 4        $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#200: FILE: arch/i386/kernel/traps.c:976:
+	set_intr_gate(14,&page_fault);
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#200: FILE: arch/i386/kernel/traps.c:976:
+	set_intr_gate(14,&page_fault);
 	                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: include/asm-i386/mmu_context.h:32:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ';' (ctx:OxV)
#355: FILE: include/asm-i386/softirq.h:8:
+#define cpu_bh_enable(cpu)	do { barrier(); local_bh_count(cpu)--;ctx_sw_on(); } while (0)
                           	                                     ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#413: FILE: include/asm-i386/spinlock.h:164:
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#413: FILE: include/asm-i386/spinlock.h:164:
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")
                             		                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#413: FILE: include/asm-i386/spinlock.h:164:
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#414: FILE: include/asm-i386/spinlock.h:165:
+#define _raw_write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#414: FILE: include/asm-i386/spinlock.h:165:
+#define _raw_write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")
                              	                                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#414: FILE: include/asm-i386/spinlock.h:165:
+#define _raw_write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: include/linux/brlock.h:173:
+#else ^I/* CONFIG_SMP */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: include/linux/dcache.h:271:
+static __inline__ void d_drop(struct dentry * dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#505: FILE: include/linux/dcache.h:271:
+static __inline__ void d_drop(struct dentry * dentry)

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: include/linux/sched.h:288:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: include/linux/sched.h:289:
+         * We want the preempt_count in this cache line, but we$

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: include/linux/sched.h:290:
+         * a) don't want to mess up the offsets in asm code and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: include/linux/sched.h:291:
+         * b) the alignment of the next line below so$

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: include/linux/sched.h:292:
+         * we move "flags" down$

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: include/linux/sched.h:293:
+         */$

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#575: FILE: include/linux/sched.h:294:
+	atomic_t preempt_count;          /* 0=> preemptable, < 0 => BUG */
 	                                        ^^^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#647: FILE: include/linux/spinlock.h:61:
+#define _raw_spin_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#653: FILE: include/linux/spinlock.h:65:
+#define _raw_spin_unlock(lock)	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#665: FILE: include/linux/spinlock.h:124:
+#define _raw_read_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#666: FILE: include/linux/spinlock.h:125:
+#define _raw_read_unlock(lock)	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#667: FILE: include/linux/spinlock.h:126:
+#define _raw_write_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#668: FILE: include/linux/spinlock.h:127:
+#define _raw_write_unlock(lock)	do { } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#679: FILE: include/linux/spinlock.h:138:
+#define ctx_sw_off() \
+do { \
+	atomic_inc(atomic_ptr_in_ctx_sw_off());  \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#684: FILE: include/linux/spinlock.h:143:
+#define ctx_sw_on_no_preempt() \
+do { \
+	atomic_dec(atomic_ptr_in_ctx_sw_off()); \
+} while (0)

ERROR:SPACING: space required before the open parenthesis '('
#700: FILE: include/linux/spinlock.h:159:
+} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#702: FILE: include/linux/spinlock.h:161:
+					1 : ({ctx_sw_on(); 0;});})
 					                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#702: FILE: include/linux/spinlock.h:161:
+					1 : ({ctx_sw_on(); 0;});})
 					                       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#709: FILE: include/linux/spinlock.h:168:
+#define read_lock(lock)		({ctx_sw_off(); _raw_read_lock(lock);})
                        		                                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#710: FILE: include/linux/spinlock.h:169:
+#define read_unlock(lock)	({_raw_read_unlock(lock); ctx_sw_on();})
                          	                                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#711: FILE: include/linux/spinlock.h:170:
+#define write_lock(lock)	({ctx_sw_off(); _raw_write_lock(lock);})
                         	                                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#712: FILE: include/linux/spinlock.h:171:
+#define write_unlock(lock)	({_raw_write_unlock(lock); ctx_sw_on();})
                           	                                      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#714: FILE: include/linux/spinlock.h:173:
+					1 : ({ctx_sw_on(); 0;});})
 					                    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#714: FILE: include/linux/spinlock.h:173:
+					1 : ({ctx_sw_on(); 0;});})
 					                       ^

WARNING:TYPO_SPELLING: 'halfs' may be misspelled - perhaps 'halves'?
#743: FILE: include/linux/tqueue.h:78:
+ * Call all "bottom halfs" on a given list.
                     ^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: include/linux/tqueue.h:81:
+extern void __run_task_queue(task_queue *list);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#790: FILE: kernel/exit.c:281:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: kernel/exit.c:296:
+		BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: kernel/fork.c:598:
+        /* Since we are keeping the context switch off state as part$

ERROR:CODE_INDENT: code indent should use tabs where possible
#825: FILE: kernel/fork.c:599:
+         * of the context, make sure we start with it off.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#826: FILE: kernel/fork.c:600:
+         */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: kernel/sched.c:512:
+^Ictx_sw_off(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: kernel/sched.c:664:
+^Ictx_sw_on_no_preempt(); $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#925: FILE: kernel/sched.c:1251:
 }
+#ifdef CONFIG_PREEMPT

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 13 warnings, 3 checks, 769 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
