CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#63: FILE: include/asm-generic/pgtable.h:144:
+#define pgd_addr_end(addr, end)						\
+({	unsigned long __boundary = ((addr) + PGDIR_SIZE) & PGDIR_MASK;	\
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
+})

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#65: FILE: include/asm-generic/pgtable.h:146:
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#65: FILE: include/asm-generic/pgtable.h:146:
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
 	                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#68: FILE: include/asm-generic/pgtable.h:149:
+#define pud_addr_end(addr, end)						\
+({	unsigned long __boundary = ((addr) + PUD_SIZE) & PUD_MASK;	\
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
+})

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#70: FILE: include/asm-generic/pgtable.h:151:
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#70: FILE: include/asm-generic/pgtable.h:151:
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
 	                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#73: FILE: include/asm-generic/pgtable.h:154:
+#define pmd_addr_end(addr, end)						\
+({	unsigned long __boundary = ((addr) + PMD_SIZE) & PMD_MASK;	\
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
+})

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#75: FILE: include/asm-generic/pgtable.h:156:
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#75: FILE: include/asm-generic/pgtable.h:156:
+	(__boundary - 1 < (end) - 1)? __boundary: (end);		\
 	                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: mm/mprotect.c:29:
+static inline void change_pte_range(struct mm_struct *mm, pmd_t *pmd,
+		unsigned long addr, unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: mm/mprotect.c:52:
+static inline void change_pmd_range(struct mm_struct *mm, pud_t *pud,
+		unsigned long addr, unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: mm/mprotect.c:67:
+static inline void change_pud_range(struct mm_struct *mm, pgd_t *pgd,
+		unsigned long addr, unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: mm/mprotect.c:82:
+static void change_protection(struct vm_area_struct *vma,
+		unsigned long addr, unsigned long end, pgprot_t newprot)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: mm/mprotect.c:89:
+	BUG_ON(addr >= end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 1 warnings, 7 checks, 176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
