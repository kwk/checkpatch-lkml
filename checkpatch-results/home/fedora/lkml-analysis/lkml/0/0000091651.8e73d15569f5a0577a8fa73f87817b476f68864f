WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#30: 
From: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: mm/cart.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#56: FILE: mm/cart.c:2:
+ * mm/cart.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#58: FILE: mm/cart.c:4:
+ * Written by Peter Zijlstra <a.p.zijlstra@chello.nl>
                                            ^^^^^^

WARNING:TYPO_SPELLING: 'refernce' may be misspelled - perhaps 'reference'?
#73: FILE: mm/cart.c:19:
+ *  - expensive refernce check.
                 ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: mm/cart.c:51:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#159: FILE: mm/cart.c:105:
+		unsigned long target = 2*nonresident_total() - T2B(zone->policy.nr_T1);
 		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: mm/cart.c:112:
+			unsigned long tmp = nr_q - target;
+			__get_cpu_var(cart_nr_q) -= tmp;

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: mm/cart.c:133:
+		unsigned long tmp = target - nr_q;
+		__get_cpu_var(cart_nr_q) += tmp;

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: mm/cart.c:140:
+	unsigned long q;
+	preempt_disable();

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: mm/cart.c:150:
+	unsigned long ratio;
+	ratio = (zone->policy.nr_shortterm /

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: mm/cart.c:161:
+	unsigned long ratio;
+	ratio = (cart_longterm(zone) /

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: mm/cart.c:173:
+	struct page *page;
+	list_for_each_entry(page, list, lru) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#236: FILE: mm/cart.c:182:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: mm/cart.c:186:
+	unsigned long cnt1 = list_count(&zone->policy.list_T1, PG_lru, 1);
+	if (cnt1 != zone->policy.nr_T1) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#241: FILE: mm/cart.c:187:
+		printk(KERN_ERR "__validate_zone: T1: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#241: FILE: mm/cart.c:187:
+		printk(KERN_ERR "__validate_zone: T1: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T1);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__validate_zone', this function's name, in a string
#241: FILE: mm/cart.c:187:
+		printk(KERN_ERR "__validate_zone: T1: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T1);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#248: FILE: mm/cart.c:194:
+		printk(KERN_ERR "__validate_zone: T2: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#248: FILE: mm/cart.c:194:
+		printk(KERN_ERR "__validate_zone: T2: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T2);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__validate_zone', this function's name, in a string
#248: FILE: mm/cart.c:194:
+		printk(KERN_ERR "__validate_zone: T2: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T2);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#257: FILE: mm/cart.c:203:
+		printk(KERN_ERR "__validate_zone: shortterm: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_shortterm);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#257: FILE: mm/cart.c:203:
+		printk(KERN_ERR "__validate_zone: shortterm: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_shortterm);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__validate_zone', this function's name, in a string
#257: FILE: mm/cart.c:203:
+		printk(KERN_ERR "__validate_zone: shortterm: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_shortterm);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#264: FILE: mm/cart.c:210:
+		printk(KERN_ERR "__validate_zone: longterm: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#264: FILE: mm/cart.c:210:
+		printk(KERN_ERR "__validate_zone: longterm: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T2);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__validate_zone', this function's name, in a string
#264: FILE: mm/cart.c:210:
+		printk(KERN_ERR "__validate_zone: longterm: %lu,%lu,%lu\n", cnt0, cnt1, zone->policy.nr_T2);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#268: FILE: mm/cart.c:214:
+	if (bug) {
+		BUG();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#269: FILE: mm/cart.c:215:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#310: FILE: mm/cart.c:256:
+	BUG_ON(!PageLRU(page));

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: mm/cart.c:322:
+		struct zone *zone = page_zone(page);
+		spin_lock_irq(&zone->lru_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: mm/cart.c:350:
+static inline void __page_release(struct zone *zone, struct page *page,
+				       struct pagevec *pvec)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#407: FILE: mm/cart.c:353:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: mm/cart.c:379:
+		struct zone *pagezone = page_zone(page);
+		if (pagezone != zone) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: mm/cart.c:427:
+			BUG();

CHECK:CAMELCASE: Avoid CamelCase: <TestClearZoneSaturated>
#512: FILE: mm/cart.c:458:
+	int sat = TestClearZoneSaturated(zone);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ZoneReclaimedT1>
#513: FILE: mm/cart.c:459:
+	int rec = ZoneReclaimedT1(zone);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#526: FILE: mm/cart.c:472:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: mm/cart.c:474:
+void page_replace_candidates(struct zone *zone, int nr_to_scan,
+		struct list_head *page_list)

CHECK:CAMELCASE: Avoid CamelCase: <SetZoneReclaimedT1>
#539: FILE: mm/cart.c:485:
+		SetZoneReclaimedT1(zone);

CHECK:CAMELCASE: Avoid CamelCase: <ClearZoneReclaimedT1>
#542: FILE: mm/cart.c:488:
+		ClearZoneReclaimedT1(zone);

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: mm/cart.c:492:
+^I^I^I         &nr_scan);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: mm/cart.c:492:
+	nr_taken = isolate_pages(zone, nr_to_scan, list, page_list,
+			         &nr_scan);

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: mm/cart.c:504:
+^I^I^I^I         page_list, &nr_scan);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#558: FILE: mm/cart.c:504:
+		nr_taken = isolate_pages(zone, nr_to_scan, list,
+				         page_list, &nr_scan);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#582: FILE: mm/cart.c:528:
+		struct page * page = lru_to_page(page_list);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: mm/cart.c:529:
+		struct page * page = lru_to_page(page_list);
+		prefetchw_prev_lru_page(page, page_list, flags);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#614: FILE: mm/cart.c:560:
+	if (!nr_freed) SetZoneSaturated(zone);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <SetZoneSaturated>
#614: FILE: mm/cart.c:560:
+	if (!nr_freed) SetZoneSaturated(zone);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: mm/cart.c:583:
+				BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#658: FILE: mm/cart.c:604:
+#define K(x) ((x) << (PAGE_SHIFT-10))
                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#662: FILE: mm/cart.c:608:
+	printk("%s"

WARNING:SPLIT_STRING: quoted string split across lines
#663: FILE: mm/cart.c:609:
+	printk("%s"
+	       " free:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#664: FILE: mm/cart.c:610:
+	       " free:%lukB"
+	       " min:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#665: FILE: mm/cart.c:611:
+	       " min:%lukB"
+	       " low:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#666: FILE: mm/cart.c:612:
+	       " low:%lukB"
+	       " high:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#667: FILE: mm/cart.c:613:
+	       " high:%lukB"
+	       " T1:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#668: FILE: mm/cart.c:614:
+	       " T1:%lukB"
+	       " T2:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#669: FILE: mm/cart.c:615:
+	       " T2:%lukB"
+	       " shortterm:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#670: FILE: mm/cart.c:616:
+	       " shortterm:%lukB"
+	       " present:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#671: FILE: mm/cart.c:617:
+	       " present:%lukB"
+	       " pages_scanned:%lu"

WARNING:SPLIT_STRING: quoted string split across lines
#672: FILE: mm/cart.c:618:
+	       " pages_scanned:%lu"
+	       " all_unreclaimable? %s"

WARNING:SPLIT_STRING: quoted string split across lines
#673: FILE: mm/cart.c:619:
+	       " all_unreclaimable? %s"
+	       "\n",

WARNING:SPLIT_STRING: quoted string split across lines
#692: FILE: mm/cart.c:638:
+		   "\n  pages free       %lu"
+		   "\n        min        %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#693: FILE: mm/cart.c:639:
+		   "\n        min        %lu"
+		   "\n        low        %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#694: FILE: mm/cart.c:640:
+		   "\n        low        %lu"
+		   "\n        high       %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#695: FILE: mm/cart.c:641:
+		   "\n        high       %lu"
+		   "\n        T1         %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#696: FILE: mm/cart.c:642:
+		   "\n        T1         %lu"
+		   "\n        T2         %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#697: FILE: mm/cart.c:643:
+		   "\n        T2         %lu"
+		   "\n        shortterm  %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#698: FILE: mm/cart.c:644:
+		   "\n        shortterm  %lu"
+		   "\n        p          %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#699: FILE: mm/cart.c:645:
+		   "\n        p          %lu"
+		   "\n        flags      %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#700: FILE: mm/cart.c:646:
+		   "\n        flags      %lu"
+		   "\n        scanned    %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#701: FILE: mm/cart.c:647:
+		   "\n        scanned    %lu"
+		   "\n        spanned    %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#702: FILE: mm/cart.c:648:
+		   "\n        spanned    %lu"
+		   "\n        present    %lu",

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#779: FILE: mm/Kconfig:150:
+config MM_POLICY_CART
+	bool "CART"
+	help
+	  This option selects a CART based policy
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#804: FILE: include/linux/mm_cart_data.h:1:
+#ifndef _LINUX_CART_DATA_H_

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#809: FILE: include/linux/mm_cart_data.h:6:
+#include <asm/bitops.h>

CHECK:CAMELCASE: Avoid CamelCase: <ZoneSaturated>
#829: FILE: include/linux/mm_cart_data.h:26:
+#define ZoneSaturated(z)	test_bit(CART_SATURATED, &((z)->policy.flags))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#840: FILE: include/linux/mm_cart_policy.h:1:
+#ifndef _LINUX_MM_CART_POLICY_H

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#877: FILE: include/linux/mm_cart_policy.h:38:
+		BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: include/linux/mm_cart_policy.h:42:
+extern void __page_replace_add(struct zone *, struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#950: FILE: include/linux/mm_cart_policy.h:111:
+extern void __page_replace_rotate_reclaimable(struct zone *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#959: FILE: include/linux/mm_cart_policy.h:120:
+extern void page_replace_remember(struct zone *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#959: FILE: include/linux/mm_cart_policy.h:120:
+extern void page_replace_remember(struct zone *, struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#959: FILE: include/linux/mm_cart_policy.h:120:
+extern void page_replace_remember(struct zone *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#960: FILE: include/linux/mm_cart_policy.h:121:
+extern void page_replace_forget(struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#960: FILE: include/linux/mm_cart_policy.h:121:
+extern void page_replace_forget(struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#960: FILE: include/linux/mm_cart_policy.h:121:
+extern void page_replace_forget(struct address_space *, unsigned long);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 66 warnings, 18 checks, 889 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
