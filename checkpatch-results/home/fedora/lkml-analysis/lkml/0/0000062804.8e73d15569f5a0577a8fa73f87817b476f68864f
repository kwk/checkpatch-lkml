WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: fs/ext3/extents.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#97: FILE: fs/ext3/extents.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#98: FILE: fs/ext3/extents.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#122: FILE: fs/ext3/extents.c:44:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: fs/ext3/extents.c:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: fs/ext3/extents.c:48:
+static int ext3_ext_check_header(const char *function, struct inode *inode,
+				struct ext3_extent_header *eh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: fs/ext3/extents.c:68:
+	ext3_error(inode->i_sb, function,
+			"bad header in inode #%lu: %s - magic %x, "

WARNING:SPLIT_STRING: quoted string split across lines
#147: FILE: fs/ext3/extents.c:69:
+			"bad header in inode #%lu: %s - magic %x, "
+			"entries %u, max %u, depth %u",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: fs/ext3/extents.c:96:
+static int ext3_ext_get_access(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: fs/ext3/extents.c:114:
+static int ext3_ext_dirty(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path)

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: fs/ext3/extents.c:117:
+	int err;
+	if (path->p_bh) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: fs/ext3/extents.c:138:
+		struct ext3_extent *ex;
+		depth = path->p_depth;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: fs/ext3/extents.c:141:
+		if ((ex = path[depth].p_ext))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#224: FILE: fs/ext3/extents.c:146:
+		 * try to find starting from index itself */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: fs/ext3/extents.c:161:
+ext3_ext_new_block(handle_t *handle, struct inode *inode,
+			struct ext3_ext_path *path,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#310: FILE: fs/ext3/extents.c:232:
+		if (path->p_idx) {
+		  ext_debug("  %d->%d", le32_to_cpu(path->p_idx->ei_block),

CHECK:BRACES: braces {} should be used on all arms of this statement
#310: FILE: fs/ext3/extents.c:232:
+		if (path->p_idx) {
[...]
+		} else if (path->p_ext) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#318: FILE: fs/ext3/extents.c:240:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: fs/ext3/extents.c:267:
+#define ext3_ext_show_path(inode,path)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: fs/ext3/extents.c:268:
+#define ext3_ext_show_leaf(inode,path)
                                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#370: FILE: fs/ext3/extents.c:292:
+	BUG_ON(eh->eh_magic != EXT3_EXT_MAGIC);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: fs/ext3/extents.c:293:
+	BUG_ON(le16_to_cpu(eh->eh_entries) > le16_to_cpu(eh->eh_max));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: fs/ext3/extents.c:294:
+	BUG_ON(le16_to_cpu(eh->eh_entries) <= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: fs/ext3/extents.c:307:
+		ext_debug("%p(%u):%p(%u):%p(%u) ", l, l->ei_block,
+				m, m->ei_block, r, r->ei_block);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#397: FILE: fs/ext3/extents.c:319:
+		chix = ix = EXT_FIRST_INDEX(eh);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#398: FILE: fs/ext3/extents.c:320:
+		for (k = 0; k < le16_to_cpu(eh->eh_entries); k++, ix++) {
+		  if (k != 0 &&

WARNING:TABSTOP: Statements should start on a tabstop
#399: FILE: fs/ext3/extents.c:321:
+		  if (k != 0 &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 32)
#399: FILE: fs/ext3/extents.c:321:
+		  if (k != 0 &&
[...]
+				printk("k=%d, ix=0x%p, first=0x%p\n", k,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: fs/ext3/extents.c:323:
+				printk("k=%d, ix=0x%p, first=0x%p\n", k,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: fs/ext3/extents.c:324:
+				printk("k=%d, ix=0x%p, first=0x%p\n", k,
+					ix, EXT_FIRST_INDEX(eh));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#403: FILE: fs/ext3/extents.c:325:
+				printk("%u <= %u\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#407: FILE: fs/ext3/extents.c:329:
+			BUG_ON(k && le32_to_cpu(ix->ei_block)

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: fs/ext3/extents.c:330:
+^I^I^I^I           <= le32_to_cpu(ix[-1].ei_block));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: fs/ext3/extents.c:335:
+		BUG_ON(chix != path->p_idx);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#417: FILE: fs/ext3/extents.c:339:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#428: FILE: fs/ext3/extents.c:350:
+	BUG_ON(eh->eh_magic != EXT3_EXT_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: fs/ext3/extents.c:351:
+	BUG_ON(le16_to_cpu(eh->eh_entries) > le16_to_cpu(eh->eh_max));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: fs/ext3/extents.c:373:
+		ext_debug("%p(%u):%p(%u):%p(%u) ", l, l->ee_block,
+				m, m->ee_block, r, r->ee_block);

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: fs/ext3/extents.c:378:
+^I^I        le32_to_cpu(path->p_ext->ee_block),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: fs/ext3/extents.c:378:
+	ext_debug("  -> %d:%d:%d ",
+		        le32_to_cpu(path->p_ext->ee_block),

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: fs/ext3/extents.c:379:
+^I^I        le32_to_cpu(path->p_ext->ee_start),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: fs/ext3/extents.c:380:
+^I^I        le16_to_cpu(path->p_ext->ee_len));$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#465: FILE: fs/ext3/extents.c:387:
+		chex = ex = EXT_FIRST_EXTENT(eh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: fs/ext3/extents.c:389:
+			BUG_ON(k && le32_to_cpu(ex->ee_block)

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: fs/ext3/extents.c:390:
+^I^I^I^I          <= le32_to_cpu(ex[-1].ee_block));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: fs/ext3/extents.c:395:
+		BUG_ON(chex != path->p_ext);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#477: FILE: fs/ext3/extents.c:399:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: fs/ext3/extents.c:423:
+	BUG_ON(eh == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!eh"
#501: FILE: fs/ext3/extents.c:423:
+	BUG_ON(eh == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#502: FILE: fs/ext3/extents.c:424:
+	if (ext3_ext_check_header(__FUNCTION__, inode, eh))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#505: FILE: fs/ext3/extents.c:427:
+	i = depth = ext_depth(inode);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*path)...) over kmalloc(sizeof(struct ext3_ext_path)...)
#509: FILE: fs/ext3/extents.c:431:
+		path = kmalloc(sizeof(struct ext3_ext_path) * (depth + 2),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: fs/ext3/extents.c:432:
+		path = kmalloc(sizeof(struct ext3_ext_path) * (depth + 2),
+				GFP_NOFS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: fs/ext3/extents.c:455:
+		BUG_ON(ppos > depth);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#538: FILE: fs/ext3/extents.c:460:
+		if (ext3_ext_check_header(__FUNCTION__, inode, eh))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#547: FILE: fs/ext3/extents.c:469:
+	if (ext3_ext_check_header(__FUNCTION__, inode, eh))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: fs/ext3/extents.c:491:
+static int ext3_ext_insert_index(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *curp,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#575: FILE: fs/ext3/extents.c:497:
+	if ((err = ext3_ext_get_access(handle, inode, curp)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#578: FILE: fs/ext3/extents.c:500:
+	BUG_ON(logical == le32_to_cpu(curp->p_idx->ei_block));

WARNING:SPLIT_STRING: quoted string split across lines
#586: FILE: fs/ext3/extents.c:508:
+			ext_debug("insert new index %d after: %d. "
+					"move %d from 0x%p to 0x%p\n",

WARNING:SPLIT_STRING: quoted string split across lines
#597: FILE: fs/ext3/extents.c:519:
+		ext_debug("insert new index %d before: %d. "
+				"move %d from 0x%p to 0x%p\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#606: FILE: fs/ext3/extents.c:528:
+	curp->p_hdr->eh_entries = cpu_to_le16(le16_to_cpu(curp->p_hdr->eh_entries)+1);
 	                                                                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: fs/ext3/extents.c:530:
+	BUG_ON(le16_to_cpu(curp->p_hdr->eh_entries)

ERROR:CODE_INDENT: code indent should use tabs where possible
#609: FILE: fs/ext3/extents.c:531:
+^I                     > le16_to_cpu(curp->p_hdr->eh_max));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#610: FILE: fs/ext3/extents.c:532:
+	BUG_ON(ix > EXT_LAST_INDEX(curp->p_hdr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: fs/ext3/extents.c:550:
+static int ext3_ext_split(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path,

WARNING:TYPO_SPELLING: 'desicion' may be misspelled - perhaps 'decision'?
#643: FILE: fs/ext3/extents.c:565:
+	/* FIXME: now desicion is simplest: at current extent */
 	              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#645: FILE: fs/ext3/extents.c:567:
+	/* if current leaf will be splitted, then we should use
 	                           ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#646: FILE: fs/ext3/extents.c:568:
+	 * border from split point */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#647: FILE: fs/ext3/extents.c:569:
+	BUG_ON(path[depth].p_ext > EXT_MAX_EXTENT(path[depth].p_hdr));

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#650: FILE: fs/ext3/extents.c:572:
+		ext_debug("leaf will be splitted."
 		                        ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#651: FILE: fs/ext3/extents.c:573:
+		ext_debug("leaf will be splitted."
+				" next leaf starts at %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: fs/ext3/extents.c:574:
+^I^I^I          le32_to_cpu(border));$

WARNING:SPLIT_STRING: quoted string split across lines
#656: FILE: fs/ext3/extents.c:578:
+		ext_debug("leaf will be added."
+				" next leaf starts at %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: fs/ext3/extents.c:579:
+^I^I^I        le32_to_cpu(border));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#688: FILE: fs/ext3/extents.c:610:
+	BUG_ON(newblock == 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#696: FILE: fs/ext3/extents.c:618:
+	if ((err = ext3_journal_get_create_access(handle, bh)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#707: FILE: fs/ext3/extents.c:629:
+	BUG_ON(path[depth].p_hdr->eh_entries != path[depth].p_hdr->eh_max);

ERROR:CODE_INDENT: code indent should use tabs where possible
#715: FILE: fs/ext3/extents.c:637:
+^I^I^I        le32_to_cpu(path[depth].p_ext->ee_block),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: fs/ext3/extents.c:637:
+		ext_debug("move %d:%d:%d in new leaf %lu\n",
+			        le32_to_cpu(path[depth].p_ext->ee_block),

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: fs/ext3/extents.c:638:
+^I^I^I        le32_to_cpu(path[depth].p_ext->ee_start),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: fs/ext3/extents.c:639:
+^I^I^I        le16_to_cpu(path[depth].p_ext->ee_len),$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#720: FILE: fs/ext3/extents.c:642:
+		/*memmove(ex++, path[depth].p_ext++,
+				sizeof(struct ext3_extent));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#721: FILE: fs/ext3/extents.c:643:
+		neh->eh_entries++;*/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#726: FILE: fs/ext3/extents.c:648:
+		memmove(ex, path[depth].p_ext-m, sizeof(struct ext3_extent)*m);
 		                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#726: FILE: fs/ext3/extents.c:648:
+		memmove(ex, path[depth].p_ext-m, sizeof(struct ext3_extent)*m);
 		                                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#727: FILE: fs/ext3/extents.c:649:
+		neh->eh_entries = cpu_to_le16(le16_to_cpu(neh->eh_entries)+m);
 		                                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#733: FILE: fs/ext3/extents.c:655:
+	if ((err = ext3_journal_dirty_metadata(handle, bh)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#740: FILE: fs/ext3/extents.c:662:
+		if ((err = ext3_ext_get_access(handle, inode, path + depth)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#743: FILE: fs/ext3/extents.c:665:
+		     cpu_to_le16(le16_to_cpu(path[depth].p_hdr->eh_entries)-m);
 		                                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#744: FILE: fs/ext3/extents.c:666:
+		if ((err = ext3_ext_dirty(handle, inode, path + depth)))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#747: FILE: fs/ext3/extents.c:669:
+
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#751: FILE: fs/ext3/extents.c:673:
+	BUG_ON(k < 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#767: FILE: fs/ext3/extents.c:689:
+		if ((err = ext3_journal_get_create_access(handle, bh)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: fs/ext3/extents.c:702:
+		ext_debug("int.index at %d (block %lu): %lu -> %lu\n", i,
+				newblock, (unsigned long) le32_to_cpu(border),

CHECK:SPACING: No space is necessary after a cast
#780: FILE: fs/ext3/extents.c:702:
+				newblock, (unsigned long) le32_to_cpu(border),

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: fs/ext3/extents.c:703:
+^I^I^I  ^Ioldblock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#781: FILE: fs/ext3/extents.c:703:
+^I^I^I  ^Ioldblock);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: fs/ext3/extents.c:709:
+		ext_debug("cur 0x%p, last 0x%p\n", path[i].p_idx,
+				EXT_MAX_INDEX(path[i].p_hdr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: fs/ext3/extents.c:710:
+		BUG_ON(EXT_MAX_INDEX(path[i].p_hdr) !=

ERROR:CODE_INDENT: code indent should use tabs where possible
#792: FILE: fs/ext3/extents.c:714:
+^I^I^I^I        le32_to_cpu(path[i].p_idx->ei_block),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: fs/ext3/extents.c:714:
+			ext_debug("%d: move %d:%d in new index %lu\n", i,
+				        le32_to_cpu(path[i].p_idx->ei_block),

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: fs/ext3/extents.c:715:
+^I^I^I^I        le32_to_cpu(path[i].p_idx->ei_leaf),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#794: FILE: fs/ext3/extents.c:716:
+^I^I^I^I        newblock);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#796: FILE: fs/ext3/extents.c:718:
+			/*memmove(++fidx, path[i].p_idx++,
+					sizeof(struct ext3_extent_idx));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#798: FILE: fs/ext3/extents.c:720:
+			BUG_ON(neh->eh_entries > neh->eh_max);*/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#811: FILE: fs/ext3/extents.c:733:
+		if ((err = ext3_journal_dirty_metadata(handle, bh)))

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#821: FILE: fs/ext3/extents.c:743:
+			path[i].p_hdr->eh_entries = cpu_to_le16(le16_to_cpu(path[i].p_hdr->eh_entries)-m);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#821: FILE: fs/ext3/extents.c:743:
+			path[i].p_hdr->eh_entries = cpu_to_le16(le16_to_cpu(path[i].p_hdr->eh_entries)-m);
 			                                                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: fs/ext3/extents.c:787:
+static int ext3_ext_grow_indepth(handle_t *handle, struct inode *inode,
+					struct ext3_ext_path *path,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#887: FILE: fs/ext3/extents.c:809:
+	if ((err = ext3_journal_get_create_access(handle, bh))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#898: FILE: fs/ext3/extents.c:820:
+	 * so calculate e_max right way */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#899: FILE: fs/ext3/extents.c:821:
+	if (ext_depth(inode))
+	  neh->eh_max = cpu_to_le16(ext3_ext_space_block_idx(inode));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#901: FILE: fs/ext3/extents.c:823:
+	else
+	  neh->eh_max = cpu_to_le16(ext3_ext_space_block(inode));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#907: FILE: fs/ext3/extents.c:829:
+	if ((err = ext3_journal_dirty_metadata(handle, bh)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#911: FILE: fs/ext3/extents.c:833:
+	if ((err = ext3_ext_get_access(handle, inode, curp)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: fs/ext3/extents.c:863:
+static int ext3_ext_create_new_leaf(handle_t *handle, struct inode *inode,
+					struct ext3_ext_path *path,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#948: FILE: fs/ext3/extents.c:870:
+	i = depth = ext_depth(inode);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#958: FILE: fs/ext3/extents.c:880:
+	 * so, subsequent data blocks should be contigoues */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#961: FILE: fs/ext3/extents.c:883:
+		 * entry: create all needed subtree and add new leaf */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1013: FILE: fs/ext3/extents.c:935:
+	BUG_ON(path == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#1013: FILE: fs/ext3/extents.c:935:
+	BUG_ON(path == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path->p_ext"
#1016: FILE: fs/ext3/extents.c:938:
+	if (depth == 0 && path->p_ext == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#1022: FILE: fs/ext3/extents.c:944:
+			if (path[depth].p_ext !=
[...]
+			  return le32_to_cpu(path[depth].p_ext[1].ee_block);

WARNING:TABSTOP: Statements should start on a tabstop
#1024: FILE: fs/ext3/extents.c:946:
+			  return le32_to_cpu(path[depth].p_ext[1].ee_block);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#1027: FILE: fs/ext3/extents.c:949:
+			if (path[depth].p_idx !=
[...]
+			  return le32_to_cpu(path[depth].p_idx[1].ei_block);

WARNING:TABSTOP: Statements should start on a tabstop
#1029: FILE: fs/ext3/extents.c:951:
+			  return le32_to_cpu(path[depth].p_idx[1].ei_block);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1040: FILE: fs/ext3/extents.c:962:
+static unsigned ext3_ext_next_leaf_block(struct inode *inode,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1041: FILE: fs/ext3/extents.c:963:
+                                               struct ext3_ext_path *path)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1041: FILE: fs/ext3/extents.c:963:
+static unsigned ext3_ext_next_leaf_block(struct inode *inode,
+                                               struct ext3_ext_path *path)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: fs/ext3/extents.c:963:
+                                               struct ext3_ext_path *path)$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1045: FILE: fs/ext3/extents.c:967:
+	BUG_ON(path == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#1045: FILE: fs/ext3/extents.c:967:
+	BUG_ON(path == NULL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1056: FILE: fs/ext3/extents.c:978:
+		if (path[depth].p_idx !=
[...]
+		  return le32_to_cpu(path[depth].p_idx[1].ei_block);

WARNING:TABSTOP: Statements should start on a tabstop
#1058: FILE: fs/ext3/extents.c:980:
+		  return le32_to_cpu(path[depth].p_idx[1].ei_block);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1071: FILE: fs/ext3/extents.c:993:
+int ext3_ext_correct_indexes(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1081: FILE: fs/ext3/extents.c:1003:
+	BUG_ON(ex == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ex"
#1081: FILE: fs/ext3/extents.c:1003:
+	BUG_ON(ex == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1082: FILE: fs/ext3/extents.c:1004:
+	BUG_ON(eh == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!eh"
#1082: FILE: fs/ext3/extents.c:1004:
+	BUG_ON(eh == NULL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1099: FILE: fs/ext3/extents.c:1021:
+	if ((err = ext3_ext_get_access(handle, inode, path + k)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1102: FILE: fs/ext3/extents.c:1024:
+	if ((err = ext3_ext_dirty(handle, inode, path + k)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1107: FILE: fs/ext3/extents.c:1029:
+		if (path[k+1].p_idx != EXT_FIRST_INDEX(path[k+1].p_hdr))
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1107: FILE: fs/ext3/extents.c:1029:
+		if (path[k+1].p_idx != EXT_FIRST_INDEX(path[k+1].p_hdr))
 		                                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1109: FILE: fs/ext3/extents.c:1031:
+		if ((err = ext3_ext_get_access(handle, inode, path + k)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1112: FILE: fs/ext3/extents.c:1034:
+		if ((err = ext3_ext_dirty(handle, inode, path + k)))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1119: FILE: fs/ext3/extents.c:1041:
+static int inline

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1121: FILE: fs/ext3/extents.c:1043:
+ext3_can_extents_be_merged(struct inode *inode, struct ext3_extent *ex1,
+				struct ext3_extent *ex2)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1124: FILE: fs/ext3/extents.c:1046:
+        if (le32_to_cpu(ex1->ee_block) + le16_to_cpu(ex1->ee_len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1124: FILE: fs/ext3/extents.c:1046:
+        if (le32_to_cpu(ex1->ee_block) + le16_to_cpu(ex1->ee_len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1133: FILE: fs/ext3/extents.c:1055:
+        if (le32_to_cpu(ex1->ee_start) + le16_to_cpu(ex1->ee_len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: fs/ext3/extents.c:1055:
+        if (le32_to_cpu(ex1->ee_start) + le16_to_cpu(ex1->ee_len)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1134: FILE: fs/ext3/extents.c:1056:
+^I    ^I^I== le32_to_cpu(ex2->ee_start))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1134: FILE: fs/ext3/extents.c:1056:
+^I    ^I^I== le32_to_cpu(ex2->ee_start))$

WARNING:TYPO_SPELLING: 'requsted' may be misspelled - perhaps 'requested'?
#1140: FILE: fs/ext3/extents.c:1062:
+ * this routine tries to merge requsted extent into the existing
                                ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1145: FILE: fs/ext3/extents.c:1067:
+int ext3_ext_insert_extent(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1148: FILE: fs/ext3/extents.c:1070:
+	struct ext3_extent_header * eh;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1154: FILE: fs/ext3/extents.c:1076:
+	BUG_ON(newext->ee_len == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1157: FILE: fs/ext3/extents.c:1079:
+	BUG_ON(path[depth].p_hdr == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path[depth].p_hdr"
#1157: FILE: fs/ext3/extents.c:1079:
+	BUG_ON(path[depth].p_hdr == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1162: FILE: fs/ext3/extents.c:1084:
+		ext_debug("append %d block to %d:%d (from %d)\n",
+				le16_to_cpu(newext->ee_len),

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1166: FILE: fs/ext3/extents.c:1088:
+		if ((err = ext3_ext_get_access(handle, inode, path + depth)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1185: FILE: fs/ext3/extents.c:1107:
+	if (le32_to_cpu(newext->ee_block) > le32_to_cpu(fex->ee_block)
+	    && next != EXT_MAX_BLOCK) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1187: FILE: fs/ext3/extents.c:1109:
+		BUG_ON(npath != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "npath"
#1187: FILE: fs/ext3/extents.c:1109:
+		BUG_ON(npath != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1191: FILE: fs/ext3/extents.c:1113:
+		BUG_ON(npath->p_depth != path->p_depth);

WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#1194: FILE: fs/ext3/extents.c:1116:
+			ext_debug("next leaf isnt full(%d)\n",
 			                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1216: FILE: fs/ext3/extents.c:1138:
+	if ((err = ext3_ext_get_access(handle, inode, path + depth)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1222: FILE: fs/ext3/extents.c:1144:
+^I^I^I        le32_to_cpu(newext->ee_block),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: fs/ext3/extents.c:1144:
+		ext_debug("first extent in the leaf: %d:%d:%d\n",
+			        le32_to_cpu(newext->ee_block),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1223: FILE: fs/ext3/extents.c:1145:
+^I^I^I        le32_to_cpu(newext->ee_start),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1224: FILE: fs/ext3/extents.c:1146:
+^I^I^I        le16_to_cpu(newext->ee_len));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1227: FILE: fs/ext3/extents.c:1149:
+^I^I           > le32_to_cpu(nearex->ee_block)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1228: FILE: fs/ext3/extents.c:1150:
+/* ^I^IBUG_ON(newext->ee_block == nearex->ee_block); */$

WARNING:SPLIT_STRING: quoted string split across lines
#1234: FILE: fs/ext3/extents.c:1156:
+			ext_debug("insert %d:%d:%d after: nearest 0x%p, "
+					"move %d from 0x%p to 0x%p\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1235: FILE: fs/ext3/extents.c:1157:
+^I^I^I^I        le32_to_cpu(newext->ee_block),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1236: FILE: fs/ext3/extents.c:1158:
+^I^I^I^I        le32_to_cpu(newext->ee_start),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1237: FILE: fs/ext3/extents.c:1159:
+^I^I^I^I        le16_to_cpu(newext->ee_len),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1243: FILE: fs/ext3/extents.c:1165:
+ ^I^IBUG_ON(newext->ee_block == nearex->ee_block);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1243: FILE: fs/ext3/extents.c:1165:
+ ^I^IBUG_ON(newext->ee_block == nearex->ee_block);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1243: FILE: fs/ext3/extents.c:1165:
+ ^I^IBUG_ON(newext->ee_block == nearex->ee_block);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1243: FILE: fs/ext3/extents.c:1165:
+ 		BUG_ON(newext->ee_block == nearex->ee_block);

WARNING:SPLIT_STRING: quoted string split across lines
#1247: FILE: fs/ext3/extents.c:1169:
+		ext_debug("insert %d:%d:%d before: nearest 0x%p, "
+				"move %d from 0x%p to 0x%p\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1256: FILE: fs/ext3/extents.c:1178:
+	eh->eh_entries = cpu_to_le16(le16_to_cpu(eh->eh_entries)+1);
 	                                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1277: FILE: fs/ext3/extents.c:1199:
+		eh->eh_entries = cpu_to_le16(le16_to_cpu(eh->eh_entries)-1);
 		                                                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1278: FILE: fs/ext3/extents.c:1200:
+		BUG_ON(eh->eh_entries == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1311: FILE: fs/ext3/extents.c:1233:
+	BUG_ON(func == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!func"
#1311: FILE: fs/ext3/extents.c:1233:
+	BUG_ON(func == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1312: FILE: fs/ext3/extents.c:1234:
+	BUG_ON(inode == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#1312: FILE: fs/ext3/extents.c:1234:
+	BUG_ON(inode == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1325: FILE: fs/ext3/extents.c:1247:
+		BUG_ON(path[depth].p_hdr == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path[depth].p_hdr"
#1325: FILE: fs/ext3/extents.c:1247:
+		BUG_ON(path[depth].p_hdr == NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1332: FILE: fs/ext3/extents.c:1254:
+			 * all requested space */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1359: FILE: fs/ext3/extents.c:1281:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1361: FILE: fs/ext3/extents.c:1283:
+		BUG_ON(end <= start);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1369: FILE: fs/ext3/extents.c:1291:
+^I^I        cbex.ec_block = le32_to_cpu(ex->ee_block);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1370: FILE: fs/ext3/extents.c:1292:
+^I^I        cbex.ec_len = le16_to_cpu(ex->ee_len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1371: FILE: fs/ext3/extents.c:1293:
+^I^I        cbex.ec_start = le32_to_cpu(ex->ee_start);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1375: FILE: fs/ext3/extents.c:1297:
+		BUG_ON(cbex.ec_len == 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1381: FILE: fs/ext3/extents.c:1303:
+		if (err == EXT_REPEAT)
[...]
+		else if (err == EXT_BREAK) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: fs/ext3/extents.c:1329:
+ext3_ext_put_in_cache(struct inode *inode, __u32 block,
+			__u32 len, __u32 start, int type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1410: FILE: fs/ext3/extents.c:1332:
+	struct ext3_ext_cache *cex;
+	BUG_ON(len == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1410: FILE: fs/ext3/extents.c:1332:
+	BUG_ON(len == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1424: FILE: fs/ext3/extents.c:1346:
+ext3_ext_put_gap_in_cache(struct inode *inode, struct ext3_ext_path *path,
+				unsigned long block)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ex"
#1431: FILE: fs/ext3/extents.c:1353:
+	if (ex == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1440: FILE: fs/ext3/extents.c:1362:
+		ext_debug("cache gap(before): %lu [%lu:%lu]",
+				(unsigned long) block,

CHECK:SPACING: No space is necessary after a cast
#1440: FILE: fs/ext3/extents.c:1362:
+				(unsigned long) block,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1441: FILE: fs/ext3/extents.c:1363:
+^I^I^I        (unsigned long) le32_to_cpu(ex->ee_block),$

CHECK:SPACING: No space is necessary after a cast
#1441: FILE: fs/ext3/extents.c:1363:
+			        (unsigned long) le32_to_cpu(ex->ee_block),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1442: FILE: fs/ext3/extents.c:1364:
+^I^I^I        (unsigned long) le16_to_cpu(ex->ee_len));$

CHECK:SPACING: No space is necessary after a cast
#1442: FILE: fs/ext3/extents.c:1364:
+			        (unsigned long) le16_to_cpu(ex->ee_len));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1444: FILE: fs/ext3/extents.c:1366:
+^I^I            + le16_to_cpu(ex->ee_len)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1445: FILE: fs/ext3/extents.c:1367:
+^I        lblock = le32_to_cpu(ex->ee_block)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1446: FILE: fs/ext3/extents.c:1368:
+^I^I         + le16_to_cpu(ex->ee_len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1449: FILE: fs/ext3/extents.c:1371:
+^I^I^I        (unsigned long) le32_to_cpu(ex->ee_block),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: fs/ext3/extents.c:1371:
+		ext_debug("cache gap(after): [%lu:%lu] %lu",
+			        (unsigned long) le32_to_cpu(ex->ee_block),

CHECK:SPACING: No space is necessary after a cast
#1449: FILE: fs/ext3/extents.c:1371:
+			        (unsigned long) le32_to_cpu(ex->ee_block),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1450: FILE: fs/ext3/extents.c:1372:
+^I^I^I        (unsigned long) le16_to_cpu(ex->ee_len),$

CHECK:SPACING: No space is necessary after a cast
#1450: FILE: fs/ext3/extents.c:1372:
+			        (unsigned long) le16_to_cpu(ex->ee_len),

CHECK:SPACING: No space is necessary after a cast
#1451: FILE: fs/ext3/extents.c:1373:
+				(unsigned long) block);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1452: FILE: fs/ext3/extents.c:1374:
+		BUG_ON(len == lblock);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1455: FILE: fs/ext3/extents.c:1377:
+		lblock = len = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1456: FILE: fs/ext3/extents.c:1378:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#1459: FILE: fs/ext3/extents.c:1381:
+	ext_debug(" -> %lu:%lu\n", (unsigned long) lblock, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1465: FILE: fs/ext3/extents.c:1387:
+ext3_ext_in_cache(struct inode *inode, unsigned long block,
+			struct ext3_extent *ex)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1475: FILE: fs/ext3/extents.c:1397:
+	BUG_ON(cex->ec_type != EXT3_EXT_CACHE_GAP &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1476: FILE: fs/ext3/extents.c:1398:
+	BUG_ON(cex->ec_type != EXT3_EXT_CACHE_GAP &&
+			cex->ec_type != EXT3_EXT_CACHE_EXTENT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1478: FILE: fs/ext3/extents.c:1400:
+^I        ex->ee_block = cpu_to_le32(cex->ec_block);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1479: FILE: fs/ext3/extents.c:1401:
+^I        ex->ee_start = cpu_to_le32(cex->ec_start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1480: FILE: fs/ext3/extents.c:1402:
+^I        ex->ee_len = cpu_to_le16(cex->ec_len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1482: FILE: fs/ext3/extents.c:1404:
+		ext_debug("%lu cached by %lu:%lu:%lu\n",
+				(unsigned long) block,

CHECK:SPACING: No space is necessary after a cast
#1482: FILE: fs/ext3/extents.c:1404:
+				(unsigned long) block,

CHECK:SPACING: No space is necessary after a cast
#1483: FILE: fs/ext3/extents.c:1405:
+				(unsigned long) cex->ec_block,

CHECK:SPACING: No space is necessary after a cast
#1484: FILE: fs/ext3/extents.c:1406:
+				(unsigned long) cex->ec_len,

CHECK:SPACING: No space is necessary after a cast
#1485: FILE: fs/ext3/extents.c:1407:
+				(unsigned long) cex->ec_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1499: FILE: fs/ext3/extents.c:1421:
+int ext3_ext_rm_idx(handle_t *handle, struct inode *inode,
+			struct ext3_ext_path *path)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1508: FILE: fs/ext3/extents.c:1430:
+	BUG_ON(path->p_hdr->eh_entries == 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1509: FILE: fs/ext3/extents.c:1431:
+	if ((err = ext3_ext_get_access(handle, inode, path)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1511: FILE: fs/ext3/extents.c:1433:
+	path->p_hdr->eh_entries = cpu_to_le16(le16_to_cpu(path->p_hdr->eh_entries)-1);
 	                                                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1512: FILE: fs/ext3/extents.c:1434:
+	if ((err = ext3_ext_dirty(handle, inode, path)))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1528: FILE: fs/ext3/extents.c:1450:
+int inline ext3_ext_calc_credits_for_insert(struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1529: FILE: fs/ext3/extents.c:1451:
+int inline ext3_ext_calc_credits_for_insert(struct inode *inode,
+						struct ext3_ext_path *path)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1571: FILE: fs/ext3/extents.c:1493:
+static int ext3_remove_blocks(handle_t *handle, struct inode *inode,
+				struct ext3_extent *ex,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1581: FILE: fs/ext3/extents.c:1503:
+		unsigned short ee_len =  le16_to_cpu(ex->ee_len);
+		spin_lock(&sbi->s_ext_stats_lock);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1594: FILE: fs/ext3/extents.c:1516:
+	if (from >= le32_to_cpu(ex->ee_block)
+	    && to == le32_to_cpu(ex->ee_block) + le16_to_cpu(ex->ee_len) - 1) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1597: FILE: fs/ext3/extents.c:1519:
+		unsigned long num, start;
+		num = le32_to_cpu(ex->ee_block) + le16_to_cpu(ex->ee_len) - from;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1606: FILE: fs/ext3/extents.c:1528:
+	} else if (from == le32_to_cpu(ex->ee_block)
+		   && to <= le32_to_cpu(ex->ee_block) + le16_to_cpu(ex->ee_len) - 1) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1607: FILE: fs/ext3/extents.c:1529:
+		printk("strange request: removal %lu-%lu from %u:%u\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1610: FILE: fs/ext3/extents.c:1532:
+		printk("strange request: removal(2) %lu-%lu from %u:%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1618: FILE: fs/ext3/extents.c:1540:
+ext3_ext_rm_leaf(handle_t *handle, struct inode *inode,
+		struct ext3_ext_path *path, unsigned long start)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1623: FILE: fs/ext3/extents.c:1545:
+	unsigned a, b, block, num;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1632: FILE: fs/ext3/extents.c:1554:
+	BUG_ON(eh == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!eh"
#1632: FILE: fs/ext3/extents.c:1554:
+	BUG_ON(eh == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1633: FILE: fs/ext3/extents.c:1555:
+	BUG_ON(le16_to_cpu(eh->eh_entries) > le16_to_cpu(eh->eh_max));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1634: FILE: fs/ext3/extents.c:1556:
+	BUG_ON(eh->eh_magic != EXT3_EXT_MAGIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1643: FILE: fs/ext3/extents.c:1565:
+	while (ex >= EXT_FIRST_EXTENT(eh) &&
+			ex_ee_block + ex_ee_len > start) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1656: FILE: fs/ext3/extents.c:1578:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1666: FILE: fs/ext3/extents.c:1588:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1671: FILE: fs/ext3/extents.c:1593:
+			BUG_ON(a != ex_ee_block);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1672: FILE: fs/ext3/extents.c:1594:
+			BUG_ON(b != ex_ee_block + ex_ee_len - 1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1703: FILE: fs/ext3/extents.c:1625:
+			eh->eh_entries = cpu_to_le16(le16_to_cpu(eh->eh_entries)-1);
 			                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1714: FILE: fs/ext3/extents.c:1636:
+		ext_debug("new extent: %u:%u:%u\n", block, num,
+				le32_to_cpu(ex->ee_start));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1724: FILE: fs/ext3/extents.c:1646:
+	 * remove it from index block above */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "path[depth].p_bh"
#1725: FILE: fs/ext3/extents.c:1647:
+	if (err == 0 && eh->eh_entries == 0 && path[depth].p_bh != NULL)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1735: FILE: fs/ext3/extents.c:1657:
+static int inline

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1738: FILE: fs/ext3/extents.c:1660:
+	BUG_ON(path->p_idx == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path->p_idx"
#1738: FILE: fs/ext3/extents.c:1660:
+	BUG_ON(path->p_idx == NULL);

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#1744: FILE: fs/ext3/extents.c:1666:
+	 * if truncate on deeper level happened it it wasn't partial

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*path)...) over kmalloc(sizeof(struct ext3_ext_path)...)
#1773: FILE: fs/ext3/extents.c:1695:
+	path = kmalloc(sizeof(struct ext3_ext_path) * (depth + 1), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#1774: FILE: fs/ext3/extents.c:1696:
+	if (path == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1780: FILE: fs/ext3/extents.c:1702:
+	if (ext3_ext_check_header(__FUNCTION__, inode, path[0].p_hdr)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1801: FILE: fs/ext3/extents.c:1723:
+			if (ext3_ext_check_header(__FUNCTION__, inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1802: FILE: fs/ext3/extents.c:1724:
+			if (ext3_ext_check_header(__FUNCTION__, inode,
+							path[i].p_hdr)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1808: FILE: fs/ext3/extents.c:1730:
+		BUG_ON(le16_to_cpu(path[i].p_hdr->eh_entries)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1810: FILE: fs/ext3/extents.c:1732:
+		BUG_ON(path[i].p_hdr->eh_magic != EXT3_EXT_MAGIC);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1815: FILE: fs/ext3/extents.c:1737:
+			path[i].p_block = le16_to_cpu(path[i].p_hdr->eh_entries)+1;
 			                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1825: FILE: fs/ext3/extents.c:1747:
+		ext_debug("level %d - index, first 0x%p, cur 0x%p\n",
+				i, EXT_FIRST_INDEX(path[i].p_hdr),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1832: FILE: fs/ext3/extents.c:1754:
+			path[i+1].p_bh =
 			      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1834: FILE: fs/ext3/extents.c:1756:
+			if (!path[i+1].p_bh) {
 			           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1841: FILE: fs/ext3/extents.c:1763:
+			 * number got changed at the next iteration */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1849: FILE: fs/ext3/extents.c:1771:
+				 * truncatei_leaf() */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1893: FILE: fs/ext3/extents.c:1815:
+		printk("EXT3-fs: file extents enabled");

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#1895: FILE: fs/ext3/extents.c:1817:
+		printk(", agressive tests");
 		          ^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1895: FILE: fs/ext3/extents.c:1817:
+		printk(", agressive tests");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1898: FILE: fs/ext3/extents.c:1820:
+		printk(", check binsearch");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1901: FILE: fs/ext3/extents.c:1823:
+		printk(", stats");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1903: FILE: fs/ext3/extents.c:1825:
+		printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1923: FILE: fs/ext3/extents.c:1845:
+		struct ext3_sb_info *sbi = EXT3_SB(sb);
+		printk(KERN_ERR "EXT3-fs: %lu blocks in %lu extents (%lu ave)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1923: FILE: fs/ext3/extents.c:1845:
+		printk(KERN_ERR "EXT3-fs: %lu blocks in %lu extents (%lu ave)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1924: FILE: fs/ext3/extents.c:1846:
+		printk(KERN_ERR "EXT3-fs: %lu blocks in %lu extents (%lu ave)\n",
+			sbi->s_ext_blocks, sbi->s_ext_extents,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1926: FILE: fs/ext3/extents.c:1848:
+		printk(KERN_ERR "EXT3-fs: extents: %lu min, %lu max, max depth %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1927: FILE: fs/ext3/extents.c:1849:
+		printk(KERN_ERR "EXT3-fs: extents: %lu min, %lu max, max depth %lu\n",
+			sbi->s_ext_min, sbi->s_ext_max, sbi->s_depth_max);

CHECK:SPACING: No space is necessary after a cast
#1942: FILE: fs/ext3/extents.c:1864:
+	ext_debug("blocks %d/%lu requested for inode %u\n", (int) iblock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1943: FILE: fs/ext3/extents.c:1865:
+	ext_debug("blocks %d/%lu requested for inode %u\n", (int) iblock,
+			max_blocks, (unsigned) inode->i_ino);

CHECK:SPACING: No space is necessary after a cast
#1943: FILE: fs/ext3/extents.c:1865:
+			max_blocks, (unsigned) inode->i_ino);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1943: FILE: fs/ext3/extents.c:1865:
+			max_blocks, (unsigned) inode->i_ino);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1947: FILE: fs/ext3/extents.c:1869:
+	if ((goal = ext3_ext_in_cache(inode, iblock, &newex))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1951: FILE: fs/ext3/extents.c:1873:
+				 * user don't want to allocate it */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1957: FILE: fs/ext3/extents.c:1879:
+^I^I        newblock = iblock$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1958: FILE: fs/ext3/extents.c:1880:
+^I^I                   - le32_to_cpu(newex.ee_block)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1959: FILE: fs/ext3/extents.c:1881:
+^I^I^I           + le32_to_cpu(newex.ee_start);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1965: FILE: fs/ext3/extents.c:1887:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1984: FILE: fs/ext3/extents.c:1906:
+	BUG_ON(path[depth].p_ext == NULL && depth != 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path[depth].p_ext"
#1984: FILE: fs/ext3/extents.c:1906:
+	BUG_ON(path[depth].p_ext == NULL && depth != 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1986: FILE: fs/ext3/extents.c:1908:
+	if ((ex = path[depth].p_ext)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1987: FILE: fs/ext3/extents.c:1909:
+^I        unsigned long ee_block = le32_to_cpu(ex->ee_block);$

WARNING:TYPO_SPELLING: 'exent' may be misspelled - perhaps 'extent'?
#1990: FILE: fs/ext3/extents.c:1912:
+		/* if found exent covers block, simple return it */
 		            ^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1991: FILE: fs/ext3/extents.c:1913:
+^I        if (iblock >= ee_block && iblock < ee_block + ee_len) {$

CHECK:SPACING: No space is necessary after a cast
#1995: FILE: fs/ext3/extents.c:1917:
+			ext_debug("%d fit into %lu:%d -> %d\n", (int) iblock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1996: FILE: fs/ext3/extents.c:1918:
+			ext_debug("%d fit into %lu:%d -> %d\n", (int) iblock,
+					ee_block, ee_len, newblock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1998: FILE: fs/ext3/extents.c:1920:
+			ext3_ext_put_in_cache(inode, ee_block, ee_len,
+						ee_start, EXT3_EXT_CACHE_EXTENT);

WARNING:TYPO_SPELLING: 'subsequest' may be misspelled - perhaps 'subsequent'?
#2008: FILE: fs/ext3/extents.c:1930:
+		/* put just found gap into cache to speedup subsequest reqs */
 		                                            ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2020: FILE: fs/ext3/extents.c:1942:
+	ext_debug("allocate new block: goal %d, found %d/%lu\n",
+			goal, newblock, allocated);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2038: FILE: fs/ext3/extents.c:1960:
+	ext3_ext_put_in_cache(inode, iblock, allocated, newblock,
+				EXT3_EXT_CACHE_EXTENT);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2056: FILE: fs/ext3/extents.c:1978:
+void ext3_ext_truncate(struct inode * inode, struct page *page)

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#2087: FILE: fs/ext3/extents.c:2009:
+	 * probably we need not scaning at all,
 	                        ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2102: FILE: fs/ext3/extents.c:2024:
+	 * transaction synchronous */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2141: FILE: fs/ext3/extents.c:2063:
+EXPORT_SYMBOL(ext3_mark_inode_dirty);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2142: FILE: fs/ext3/extents.c:2064:
+EXPORT_SYMBOL(ext3_ext_invalidate_cache);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2143: FILE: fs/ext3/extents.c:2065:
+EXPORT_SYMBOL(ext3_ext_insert_extent);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2144: FILE: fs/ext3/extents.c:2066:
+EXPORT_SYMBOL(ext3_ext_walk_space);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2145: FILE: fs/ext3/extents.c:2067:
+EXPORT_SYMBOL(ext3_ext_find_goal);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2146: FILE: fs/ext3/extents.c:2068:
+EXPORT_SYMBOL(ext3_ext_calc_credits_for_insert);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2160: FILE: fs/ext3/ialloc.c:624:
+			if (err) goto fail;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2195: FILE: fs/ext3/inode.c:986:
+		ret = ext3_get_blocks_wrap(handle, inode, iblock,
 					max_blocks, bh_result, create, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2204: FILE: fs/ext3/inode.c:1010:
+	err = ext3_get_blocks_wrap(handle, inode, block, 1,
 					&dummy, create, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2213: FILE: fs/ext3/inode.c:1758:
+int ext3_block_truncate_page(handle_t *handle, struct page *page,
 		struct address_space *mapping, loff_t from)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2237: FILE: fs/ext3/inode.c:3012:
+ ^Iif (EXT3_I(inode)->i_flags & EXT3_EXTENTS_FL)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2237: FILE: fs/ext3/inode.c:3012:
+ ^Iif (EXT3_I(inode)->i_flags & EXT3_EXTENTS_FL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2237: FILE: fs/ext3/inode.c:3012:
+ ^Iif (EXT3_I(inode)->i_flags & EXT3_EXTENTS_FL)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2238: FILE: fs/ext3/inode.c:3013:
+ ^I^Ireturn ext3_ext_writepage_trans_blocks(inode, bpp);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2238: FILE: fs/ext3/inode.c:3013:
+ ^I^Ireturn ext3_ext_writepage_trans_blocks(inode, bpp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2238: FILE: fs/ext3/inode.c:3013:
+ ^I^Ireturn ext3_ext_writepage_trans_blocks(inode, bpp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2273: FILE: fs/ext3/super.c:393:
+ ^Iext3_ext_release(sb);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2273: FILE: fs/ext3/super.c:393:
+ ^Iext3_ext_release(sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2273: FILE: fs/ext3/super.c:393:
+ ^Iext3_ext_release(sb);$

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#2290: FILE: fs/ext3/super.c:641:
+	Opt_grpquota, Opt_extents,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_extents>
#2290: FILE: fs/ext3/super.c:641:
+	Opt_grpquota, Opt_extents,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2307: FILE: fs/ext3/super.c:1025:
+			set_opt (sbi->s_mount_opt, EXTENTS);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2325: FILE: include/linux/ext3_fs_extents.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2339: FILE: include/linux/ext3_fs_extents.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2340: FILE: include/linux/ext3_fs_extents.h:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2375: FILE: include/linux/ext3_fs_extents.h:51:
+#define ext_debug(a...)		printk(a)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2386: FILE: include/linux/ext3_fs_extents.h:62:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2411: FILE: include/linux/ext3_fs_extents.h:87:
+				 * level. leaf or next index could bet here */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2411: FILE: include/linux/ext3_fs_extents.h:87:
+	__le32	ei_leaf;	/* pointer to the physical block of the next *
+				 * level. leaf or next index could bet here */

WARNING:TYPO_SPELLING: 'underlaying' may be misspelled - perhaps 'underlying'?
#2423: FILE: include/linux/ext3_fs_extents.h:99:
+	__le16	eh_depth;	/* has tree real underlaying blocks? */
 	      	         	                 ^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2465: FILE: include/linux/ext3_fs_extents.h:141:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2468: FILE: include/linux/ext3_fs_extents.h:144:
+
+

CHECK:SPACING: No space is necessary after a cast
#2470: FILE: include/linux/ext3_fs_extents.h:146:
+	((struct ext3_extent *) (((char *) (__hdr__)) +		\

CHECK:SPACING: No space is necessary after a cast
#2473: FILE: include/linux/ext3_fs_extents.h:149:
+	((struct ext3_extent_idx *) (((char *) (__hdr__)) +	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__path__' - possible side-effects?
#2475: FILE: include/linux/ext3_fs_extents.h:151:
+#define EXT_HAS_FREE_INDEX(__path__) \
+        (le16_to_cpu((__path__)->p_hdr->eh_entries) \
+	                             < le16_to_cpu((__path__)->p_hdr->eh_max))

ERROR:CODE_INDENT: code indent should use tabs where possible
#2476: FILE: include/linux/ext3_fs_extents.h:152:
+        (le16_to_cpu((__path__)->p_hdr->eh_entries) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2476: FILE: include/linux/ext3_fs_extents.h:152:
+        (le16_to_cpu((__path__)->p_hdr->eh_entries) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2477: FILE: include/linux/ext3_fs_extents.h:153:
+^I                             < le16_to_cpu((__path__)->p_hdr->eh_max))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#2478: FILE: include/linux/ext3_fs_extents.h:154:
+#define EXT_LAST_EXTENT(__hdr__) \
+	(EXT_FIRST_EXTENT((__hdr__)) + le16_to_cpu((__hdr__)->eh_entries) - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#2480: FILE: include/linux/ext3_fs_extents.h:156:
+#define EXT_LAST_INDEX(__hdr__) \
+	(EXT_FIRST_INDEX((__hdr__)) + le16_to_cpu((__hdr__)->eh_entries) - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#2482: FILE: include/linux/ext3_fs_extents.h:158:
+#define EXT_MAX_EXTENT(__hdr__) \
+	(EXT_FIRST_EXTENT((__hdr__)) + le16_to_cpu((__hdr__)->eh_max) - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#2484: FILE: include/linux/ext3_fs_extents.h:160:
+#define EXT_MAX_INDEX(__hdr__) \
+	(EXT_FIRST_INDEX((__hdr__)) + le16_to_cpu((__hdr__)->eh_max) - 1)

CHECK:SPACING: No space is necessary after a cast
#2489: FILE: include/linux/ext3_fs_extents.h:165:
+	return (struct ext3_extent_header *) EXT3_I(inode)->i_data;

CHECK:SPACING: No space is necessary after a cast
#2494: FILE: include/linux/ext3_fs_extents.h:170:
+	return (struct ext3_extent_header *) bh->b_data;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2513: FILE: include/linux/ext3_fs_extents.h:189:
+extern int ext3_extent_tree_init(handle_t *, struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2514: FILE: include/linux/ext3_fs_extents.h:190:
+extern int ext3_ext_calc_credits_for_insert(struct inode *, struct ext3_ext_path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2514: FILE: include/linux/ext3_fs_extents.h:190:
+extern int ext3_ext_calc_credits_for_insert(struct inode *, struct ext3_ext_path *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext3_ext_path *' should also have an identifier name
#2514: FILE: include/linux/ext3_fs_extents.h:190:
+extern int ext3_ext_calc_credits_for_insert(struct inode *, struct ext3_ext_path *);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#2515: FILE: include/linux/ext3_fs_extents.h:191:
+extern int ext3_ext_insert_extent(handle_t *, struct inode *, struct ext3_ext_path *, struct ext3_extent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2515: FILE: include/linux/ext3_fs_extents.h:191:
+extern int ext3_ext_insert_extent(handle_t *, struct inode *, struct ext3_ext_path *, struct ext3_extent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#2515: FILE: include/linux/ext3_fs_extents.h:191:
+extern int ext3_ext_insert_extent(handle_t *, struct inode *, struct ext3_ext_path *, struct ext3_extent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2515: FILE: include/linux/ext3_fs_extents.h:191:
+extern int ext3_ext_insert_extent(handle_t *, struct inode *, struct ext3_ext_path *, struct ext3_extent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext3_ext_path *' should also have an identifier name
#2515: FILE: include/linux/ext3_fs_extents.h:191:
+extern int ext3_ext_insert_extent(handle_t *, struct inode *, struct ext3_ext_path *, struct ext3_extent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext3_extent *' should also have an identifier name
#2515: FILE: include/linux/ext3_fs_extents.h:191:
+extern int ext3_ext_insert_extent(handle_t *, struct inode *, struct ext3_ext_path *, struct ext3_extent *);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2516: FILE: include/linux/ext3_fs_extents.h:192:
+extern int ext3_ext_walk_space(struct inode *, unsigned long, unsigned long, ext_prepare_callback, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2516: FILE: include/linux/ext3_fs_extents.h:192:
+extern int ext3_ext_walk_space(struct inode *, unsigned long, unsigned long, ext_prepare_callback, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2516: FILE: include/linux/ext3_fs_extents.h:192:
+extern int ext3_ext_walk_space(struct inode *, unsigned long, unsigned long, ext_prepare_callback, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2516: FILE: include/linux/ext3_fs_extents.h:192:
+extern int ext3_ext_walk_space(struct inode *, unsigned long, unsigned long, ext_prepare_callback, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2516: FILE: include/linux/ext3_fs_extents.h:192:
+extern int ext3_ext_walk_space(struct inode *, unsigned long, unsigned long, ext_prepare_callback, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext_prepare_callback' should also have an identifier name
#2516: FILE: include/linux/ext3_fs_extents.h:192:
+extern int ext3_ext_walk_space(struct inode *, unsigned long, unsigned long, ext_prepare_callback, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2516: FILE: include/linux/ext3_fs_extents.h:192:
+extern int ext3_ext_walk_space(struct inode *, unsigned long, unsigned long, ext_prepare_callback, void *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2517: FILE: include/linux/ext3_fs_extents.h:193:
+extern struct ext3_ext_path * ext3_ext_find_extent(struct inode *, int, struct ext3_ext_path *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2517: FILE: include/linux/ext3_fs_extents.h:193:
+extern struct ext3_ext_path * ext3_ext_find_extent(struct inode *, int, struct ext3_ext_path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2517: FILE: include/linux/ext3_fs_extents.h:193:
+extern struct ext3_ext_path * ext3_ext_find_extent(struct inode *, int, struct ext3_ext_path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2517: FILE: include/linux/ext3_fs_extents.h:193:
+extern struct ext3_ext_path * ext3_ext_find_extent(struct inode *, int, struct ext3_ext_path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext3_ext_path *' should also have an identifier name
#2517: FILE: include/linux/ext3_fs_extents.h:193:
+extern struct ext3_ext_path * ext3_ext_find_extent(struct inode *, int, struct ext3_ext_path *);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#2553: FILE: include/linux/ext3_fs.h:570:
+					 EXT3_FEATURE_INCOMPAT_META_BG| \
 					                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2562: FILE: include/linux/ext3_fs.h:810:
+extern int ext3_writepage_trans_blocks(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2562: FILE: include/linux/ext3_fs.h:810:
+extern int ext3_writepage_trans_blocks(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2563: FILE: include/linux/ext3_fs.h:811:
+extern int ext3_block_truncate_page(handle_t *handle, struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2564: FILE: include/linux/ext3_fs.h:812:
+extern int ext3_block_truncate_page(handle_t *handle, struct page *page,
+		struct address_space *mapping, loff_t from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2573: FILE: include/linux/ext3_fs.h:867:
+extern int ext3_ext_tree_init(handle_t *handle, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2573: FILE: include/linux/ext3_fs.h:867:
+extern int ext3_ext_tree_init(handle_t *handle, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2574: FILE: include/linux/ext3_fs.h:868:
+extern int ext3_ext_writepage_trans_blocks(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2574: FILE: include/linux/ext3_fs.h:868:
+extern int ext3_ext_writepage_trans_blocks(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2574: FILE: include/linux/ext3_fs.h:868:
+extern int ext3_ext_writepage_trans_blocks(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2575: FILE: include/linux/ext3_fs.h:869:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2576: FILE: include/linux/ext3_fs.h:870:
+extern int ext3_ext_get_blocks(handle_t *, struct inode *, sector_t,
+				unsigned long, struct buffer_head *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2577: FILE: include/linux/ext3_fs.h:871:
+extern void ext3_ext_truncate(struct inode *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2577: FILE: include/linux/ext3_fs.h:871:
+extern void ext3_ext_truncate(struct inode *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2577: FILE: include/linux/ext3_fs.h:871:
+extern void ext3_ext_truncate(struct inode *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2578: FILE: include/linux/ext3_fs.h:872:
+extern void ext3_ext_init(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2578: FILE: include/linux/ext3_fs.h:872:
+extern void ext3_ext_init(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2579: FILE: include/linux/ext3_fs.h:873:
+extern void ext3_ext_release(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2579: FILE: include/linux/ext3_fs.h:873:
+extern void ext3_ext_release(struct super_block *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2582: FILE: include/linux/ext3_fs.h:876:
+ext3_get_blocks_wrap(handle_t *handle, struct inode *inode, sector_t block,
+			unsigned long max_blocks, struct buffer_head *bh,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2621: FILE: include/linux/ext3_fs_i.h:157:
+ ^Istruct ext3_ext_cache i_cached_extent;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2621: FILE: include/linux/ext3_fs_i.h:157:
+ ^Istruct ext3_ext_cache i_cached_extent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2621: FILE: include/linux/ext3_fs_i.h:157:
+ ^Istruct ext3_ext_cache i_cached_extent;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2638: FILE: include/linux/ext3_fs_sb.h:87:
+	spinlock_t s_ext_stats_lock;

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#2657: FILE: include/linux/ext3_jbd.h:31:
+ * For extents-enabled fs we may have to allocate and modify upto
                                                              ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2658: FILE: include/linux/ext3_jbd.h:32:
+ * 5 levels of tree + root which is stored in inode. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sb' - possible side-effects?
#2660: FILE: include/linux/ext3_jbd.h:34:
+#define EXT3_SINGLEDATA_TRANS_BLOCKS(sb)				\
+	(EXT3_HAS_INCOMPAT_FEATURE(sb, EXT3_FEATURE_INCOMPAT_EXTENTS)	\
+	 	|| test_opt(sb, EXTENTS) ? 27U : 8U)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2662: FILE: include/linux/ext3_jbd.h:36:
+^I ^I|| test_opt(sb, EXTENTS) ? 27U : 8U)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2662: FILE: include/linux/ext3_jbd.h:36:
+^I ^I|| test_opt(sb, EXTENTS) ? 27U : 8U)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2662: FILE: include/linux/ext3_jbd.h:36:
+	(EXT3_HAS_INCOMPAT_FEATURE(sb, EXT3_FEATURE_INCOMPAT_EXTENTS)	\
+	 	|| test_opt(sb, EXTENTS) ? 27U : 8U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sb' - possible side-effects?
#2671: FILE: include/linux/ext3_jbd.h:50:
+#define EXT3_DATA_TRANS_BLOCKS(sb)	(EXT3_SINGLEDATA_TRANS_BLOCKS(sb) + \
 					 EXT3_XATTR_TRANS_BLOCKS - 2 + \
 					 2*EXT3_QUOTA_TRANS_BLOCKS(sb))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2680: FILE: include/linux/ext3_jbd.h:86:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS(sb)-3)+3+DQUOT_INIT_REWRITE) : 0)
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2680: FILE: include/linux/ext3_jbd.h:86:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS(sb)-3)+3+DQUOT_INIT_REWRITE) : 0)
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2680: FILE: include/linux/ext3_jbd.h:86:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS(sb)-3)+3+DQUOT_INIT_REWRITE) : 0)
 		                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2683: FILE: include/linux/ext3_jbd.h:88:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS(sb)-3)+3+DQUOT_DEL_REWRITE) : 0)
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2683: FILE: include/linux/ext3_jbd.h:88:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS(sb)-3)+3+DQUOT_DEL_REWRITE) : 0)
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2683: FILE: include/linux/ext3_jbd.h:88:
+		(EXT3_SINGLEDATA_TRANS_BLOCKS(sb)-3)+3+DQUOT_DEL_REWRITE) : 0)
 		                                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062804.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 86 errors, 187 warnings, 154 checks, 2559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062804.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
