WARNING:REPEATED_WORD: Possible repeated word: 'that'
#38: 
suggest that that multithreaded application is not providing the proper

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#111: FILE: fs/locks.c:1592:
+int fcntl_setlk(unsigned int fd, struct file *filp, unsigned int cmd,
                                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#129: FILE: fs/locks.c:1651:
+	if (filp->f_op && filp->f_op->lock != NULL)
[...]
-		goto out;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "filp->f_op->lock"
#129: FILE: fs/locks.c:1651:
+	if (filp->f_op && filp->f_op->lock != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#137: FILE: fs/locks.c:1653:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == F_SETLK'
#140: FILE: fs/locks.c:1656:
+			if ((error != -EAGAIN) || (cmd == F_SETLK))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: fs/locks.c:1659:
+			error = wait_event_interruptible(file_lock->fl_wait,
+					!file_lock->fl_next);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: fs/locks.c:1662:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#163: FILE: fs/locks.c:1673:
+	    cmd != F_UNLCK && fcheck(fd) != filp && flock.l_type != F_UNLCK) {
 	                                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#178: FILE: fs/locks.c:1736:
+int fcntl_setlk64(unsigned int fd, struct file *filp, unsigned int cmd,
                                                 ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: fs/locks.c:1737:
+int fcntl_setlk64(unsigned int fd, struct file *filp, unsigned int cmd,
+		struct flock64 __user *l)

CHECK:BRACES: braces {} should be used on all arms of this statement
#196: FILE: fs/locks.c:1795:
+	if (filp->f_op && filp->f_op->lock != NULL)
[...]
-		goto out;
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "filp->f_op->lock"
#196: FILE: fs/locks.c:1795:
+	if (filp->f_op && filp->f_op->lock != NULL)

CHECK:BRACES: Unbalanced braces around else statement
#204: FILE: fs/locks.c:1797:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == F_SETLK64'
#207: FILE: fs/locks.c:1800:
+			if ((error != -EAGAIN) || (cmd == F_SETLK64))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: fs/locks.c:1803:
+			error = wait_event_interruptible(file_lock->fl_wait,
+					!file_lock->fl_next);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: fs/locks.c:1806:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#230: FILE: fs/locks.c:1817:
+	    cmd != F_UNLCK && fcheck(fd) != filp && flock.l_type != F_UNLCK) {
 	                                    ^^^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#257: FILE: fs/fcntl.c:293:
+		err = fcntl_setlk(fd, filp, cmd, (struct flock __user *) arg);
 		                      ^^^^

CHECK:SPACING: No space is necessary after a cast
#257: FILE: fs/fcntl.c:293:
+		err = fcntl_setlk(fd, filp, cmd, (struct flock __user *) arg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#266: FILE: fs/fcntl.c:381:
+			err = fcntl_setlk64(fd, filp, cmd,
 			                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: fs/fcntl.c:382:
+			err = fcntl_setlk64(fd, filp, cmd,
+					(struct flock64 __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#267: FILE: fs/fcntl.c:382:
+					(struct flock64 __user *) arg);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/linux/fs.h:694:
+extern int fcntl_setlk(unsigned int, struct file *, unsigned int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#278: FILE: include/linux/fs.h:694:
+extern int fcntl_setlk(unsigned int, struct file *, unsigned int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#278: FILE: include/linux/fs.h:694:
+extern int fcntl_setlk(unsigned int, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#278: FILE: include/linux/fs.h:694:
+extern int fcntl_setlk(unsigned int, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct flock __user *' should also have an identifier name
#278: FILE: include/linux/fs.h:694:
+extern int fcntl_setlk(unsigned int, struct file *, unsigned int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: include/linux/fs.h:695:
+extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
+			struct flock __user *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/fs.h:699:
+extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#284: FILE: include/linux/fs.h:699:
+extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#284: FILE: include/linux/fs.h:699:
+extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#284: FILE: include/linux/fs.h:699:
+extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct flock64 __user *' should also have an identifier name
#284: FILE: include/linux/fs.h:699:
+extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: include/linux/fs.h:700:
+extern int fcntl_setlk64(unsigned int, struct file *, unsigned int,
+			struct flock64 __user *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000172612.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 18 warnings, 18 checks, 169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000172612.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
