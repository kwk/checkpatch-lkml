WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
diff -urNp linux-2.5.26/include/asm-arm/system.h linux-2.5.26-schedfix/include/asm-arm/system.h

ERROR:SPACING: space required before the open parenthesis '('
#62: FILE: include/asm-arm/system.h:67:
+#define prepare_arch_switch(rq, next)	do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#79: FILE: include/asm-i386/system.h:14:
+#define prepare_arch_switch(rq, next)	do { } while(0)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#92: FILE: include/asm-ia64/system.h:432:
+#define prepare_arch_switch(rq, next)	do {spin_lock(&(next)->switch_lock); spin_unlock(&(rq)->lock);} while(0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ';' (ctx:VxV)
#92: FILE: include/asm-ia64/system.h:432:
+#define prepare_arch_switch(rq, next)	do {spin_lock(&(next)->switch_lock); spin_unlock(&(rq)->lock);} while(0)
                                      	                                                             ^

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: include/asm-ia64/system.h:432:
+#define prepare_arch_switch(rq, next)	do {spin_lock(&(next)->switch_lock); spin_unlock(&(rq)->lock);} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#93: FILE: include/asm-ia64/system.h:433:
+#define finish_arch_switch(rq, prev)	do {spin_unlock_irq(&(prev)->switch_lock);} while(0)
                                     	                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#93: FILE: include/asm-ia64/system.h:433:
+#define finish_arch_switch(rq, prev)	do {spin_unlock_irq(&(prev)->switch_lock);} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#93: FILE: include/asm-ia64/system.h:433:
+#define finish_arch_switch(rq, prev)	do {spin_unlock_irq(&(prev)->switch_lock);} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#94: FILE: include/asm-ia64/system.h:434:
+#define task_running(rq, p)	(((rq)->curr == (p)) || spin_is_locked(&(p)->switch_lock))

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#94: FILE: include/asm-ia64/system.h:434:
+#define task_running(rq, p)	(((rq)->curr == (p)) || spin_is_locked(&(p)->switch_lock))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: include/asm-ppc/system.h:86:
+#define prepare_arch_switch(rq, next)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#127: FILE: include/asm-s390/system.h:21:
+#define prepare_arch_switch(rq, next)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#144: FILE: include/asm-s390x/system.h:21:
+#define prepare_arch_switch(rq, next)	do { } while(0)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#164: FILE: include/asm-sparc64/system.h:147:
+#define prepare_arch_switch(rq, next)	do {spin_lock(&(next)->switch_lock); \
+					    spin_unlock(&(rq)->lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#166: FILE: include/asm-sparc64/system.h:149:
+					    flushw_all(); \

ERROR:SPACING: space required before the open parenthesis '('
#167: FILE: include/asm-sparc64/system.h:150:
+					} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#168: FILE: include/asm-sparc64/system.h:151:
+#define finish_arch_switch(rq, prev)	do {spin_unlock_irq(&(prev)->switch_lock);} while(0)
                                     	                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#168: FILE: include/asm-sparc64/system.h:151:
+#define finish_arch_switch(rq, prev)	do {spin_unlock_irq(&(prev)->switch_lock);} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#168: FILE: include/asm-sparc64/system.h:151:
+#define finish_arch_switch(rq, prev)	do {spin_unlock_irq(&(prev)->switch_lock);} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#169: FILE: include/asm-sparc64/system.h:152:
+#define task_running(rq, p)	(((rq)->curr == (p)) || spin_is_locked(&(p)->switch_lock))

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#169: FILE: include/asm-sparc64/system.h:152:
+#define task_running(rq, p)	(((rq)->curr == (p)) || spin_is_locked(&(p)->switch_lock))

ERROR:SPACING: space required before the open parenthesis '('
#184: FILE: include/asm-x86_64/system.h:16:
+#define prepare_arch_switch(rq, next)	do { } while(0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#197: FILE: include/linux/init_task.h:81:
+    switch_lock:	SPIN_LOCK_UNLOCKED,				\
                ^

WARNING:INDENTED_LABEL: labels should not be indented
#197: FILE: include/linux/init_task.h:81:
+    switch_lock:	SPIN_LOCK_UNLOCKED,				\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->cpu != smp_processor_id()'
#250: FILE: kernel/sched.c:340:
+	if ((task_running(task_rq(p), p)) && (p->cpu != smp_processor_id()))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: kernel/sched.c:369:
+		if (unlikely(sync && !task_running(rq, p) &&
 			(task_cpu(p) != smp_processor_id()) &&

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446130.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 9 warnings, 4 checks, 214 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446130.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
