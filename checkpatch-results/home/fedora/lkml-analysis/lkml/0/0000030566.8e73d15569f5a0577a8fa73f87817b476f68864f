WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/rename.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#83: FILE: fs/unionfs/rename.c:41:
+			printk(KERN_DEBUG "error creating directory tree for"

WARNING:SPLIT_STRING: quoted string split across lines
#84: FILE: fs/unionfs/rename.c:42:
+			printk(KERN_DEBUG "error creating directory tree for"
+					  " rename, bindex = %d, err = %ld\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: fs/unionfs/rename.c:43:
+^I^I^I^I          bindex, PTR_ERR(hidden_new_dentry));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: braces {} should be used on all arms of this statement
#105: FILE: fs/unionfs/rename.c:63:
+	if (hidden_wh_dentry->d_inode) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#108: FILE: fs/unionfs/rename.c:66:
+			printk(KERN_WARNING "Both a whiteout and a dentry"

WARNING:SPLIT_STRING: quoted string split across lines
#109: FILE: fs/unionfs/rename.c:67:
+			printk(KERN_WARNING "Both a whiteout and a dentry"
+					" exist when doing a rename!\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#117: FILE: fs/unionfs/rename.c:75:
+		if (!(err = is_robranch_super(old_dentry->d_sb, bindex))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: fs/unionfs/rename.c:77:
+			err = vfs_unlink(hidden_wh_dir_dentry->d_inode,
+					       hidden_wh_dentry);

CHECK:BRACES: Unbalanced braces around else statement
#125: FILE: fs/unionfs/rename.c:83:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#139: FILE: fs/unionfs/rename.c:97:
+	/* ready to whiteout for old_dentry.
+	   caller will create the actual whiteout,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#140: FILE: fs/unionfs/rename.c:98:
+	   and must dput(*wh_old) */

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: fs/unionfs/rename.c:101:
+		char *whname;
+		whname = alloc_whname(old_dentry->d_name.name,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: fs/unionfs/rename.c:141:
+static int do_unionfs_rename(struct inode *old_dir,
+				   struct dentry *old_dentry,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#210: FILE: fs/unionfs/rename.c:168:
+		if (!IS_COPYUP_ERR(err)) {
+			goto out;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#226: FILE: fs/unionfs/rename.c:184:
+		if (!unlink_dentry) {
+			continue;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#231: FILE: fs/unionfs/rename.c:189:
+		if (!(err = is_robranch_super(old_dir->i_sb, bindex))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_bstart != old_bend'
#286: FILE: fs/unionfs/rename.c:244:
+	if ((old_bstart != old_bend) || (do_copyup != -1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: fs/unionfs/rename.c:246:
+		struct dentry *hidden_parent;
+		BUG_ON(!wh_old || IS_ERR(wh_old) || wh_old->d_inode

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#288: FILE: fs/unionfs/rename.c:246:
+		BUG_ON(!wh_old || IS_ERR(wh_old) || wh_old->d_inode

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#289: FILE: fs/unionfs/rename.c:247:
+		BUG_ON(!wh_old || IS_ERR(wh_old) || wh_old->d_inode
+		       || bwh_old < 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#291: FILE: fs/unionfs/rename.c:249:
+		local_err = vfs_create(hidden_parent->d_inode, wh_old, S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: braces {} should be used on all arms of this statement
#294: FILE: fs/unionfs/rename.c:252:
+		if (!local_err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#296: FILE: fs/unionfs/rename.c:254:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: fs/unionfs/rename.c:256:
+			printk("<0>We can't create a whiteout for the source in rename!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#311: FILE: fs/unionfs/rename.c:269:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#318: FILE: fs/unionfs/rename.c:276:
+		printk(KERN_WARNING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#325: FILE: fs/unionfs/rename.c:283:
+	if (!dtohd_index(new_dentry, bindex)
+	    || !dtohd_index(new_dentry, bindex)->d_inode) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#326: FILE: fs/unionfs/rename.c:284:
+		printk(KERN_WARNING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#333: FILE: fs/unionfs/rename.c:291:
+	if (dtohd_index(old_dentry, bindex)
+	    && dtohd_index(old_dentry, bindex)->d_inode) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#334: FILE: fs/unionfs/rename.c:292:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#346: FILE: fs/unionfs/rename.c:304:
+		printk(KERN_WARNING "Revert failed in rename!\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#431: FILE: fs/unionfs/rename.c:389:
+	if (err == -ENOTEMPTY) {
[...]
+	} else if (err)
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#474: FILE: fs/unionfs/rename.c:432:
+	if (!IS_ERR(wh_dentry))
[...]
+	else if (new_dentry->d_inode) {
[...]

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'old_dentry->d_inode->i_mode'
#481: FILE: fs/unionfs/rename.c:439:
+			    S_ISDIR(old_dentry->d_inode->
+				    i_mode) ? -ENOTDIR : -EISDIR;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#512: FILE: fs/unionfs/rename.c:470:
+		/* force re-lookup since the dir on ro branch is not renamed,
+		   and hidden dentries still indicate the un-renamed ones. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#512: FILE: fs/unionfs/rename.c:470:
+		   and hidden dentries still indicate the un-renamed ones. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 22 warnings, 12 checks, 479 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
