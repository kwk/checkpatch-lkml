WARNING:TYPO_SPELLING: 'reponsible' may be misspelled - perhaps 'responsible'?
#28: 
The code is reponsible for serializing data in a platform independant 
            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#28: 
The code is reponsible for serializing data in a platform independant 
                                                          ^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: security/apparmor/module_interface.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#74: FILE: security/apparmor/module_interface.c:29:
+/* inlines must be forward of there use in newer version of gcc,
+   just forward declaring with a prototype won't work anymore */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#74: FILE: security/apparmor/module_interface.c:29:
+   just forward declaring with a prototype won't work anymore */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#95: FILE: security/apparmor/module_interface.c:50:
+	AA_DEBUG("%s\n", __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*entry)...) over kzalloc(sizeof(struct aa_entry)...)
#96: FILE: security/apparmor/module_interface.c:51:
+	entry = kzalloc(sizeof(struct aa_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#99: FILE: security/apparmor/module_interface.c:54:
+		int i;
+		INIT_LIST_HEAD(&entry->list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#100: FILE: security/apparmor/module_interface.c:55:
+		for (i = 0; i <= POS_AA_FILE_MAX; i++) {
+			INIT_LIST_HEAD(&entry->listp[i]);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: security/apparmor/module_interface.c:72:
+	struct aaprofile *p = container_of(head, struct aaprofile, rcu);
+	free_aaprofile(p);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#131: FILE: security/apparmor/module_interface.c:86:
+		 __FUNCTION__,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#154: FILE: security/apparmor/module_interface.c:109:
+	if (__aa_is_confined(sd) && BASE_PROFILE(sd->active) == old_profile) {
+		task_remove(sd);
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#175: FILE: security/apparmor/module_interface.c:130:
+	AA_DEBUG("%s: replacing profile for task %s(%d) "
+		 "profile=%s (%p) active=%s (%p)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#176: FILE: security/apparmor/module_interface.c:131:
+		 __FUNCTION__,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#188: FILE: security/apparmor/module_interface.c:143:
+		 * profile has an equivalent hat */

CHECK:SPACING: No space is necessary after a cast
#246: FILE: security/apparmor/module_interface.c:201:
+		*(u8 *)dest = *(u8 *) src;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#260: FILE: security/apparmor/module_interface.c:215:
+	default:
+		/* nop - all other type codes do not have a trailing value */
+		;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: security/apparmor/module_interface.c:240:
+	int ret = 0;
+	if (!aa_inbounds(e, AA_CODE_BYTE + aacode_datasize[code]))

CHECK:SPACING: No space is necessary after a cast
#294: FILE: security/apparmor/module_interface.c:249:
+		if (!aa_inbounds(e, (size_t) size))

CHECK:SPACING: No space is necessary after a cast
#306: FILE: security/apparmor/module_interface.c:261:
+		if (!aa_inbounds(e, (size_t) size))

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#309: FILE: security/apparmor/module_interface.c:264:
+			* (char **)data = NULL;
 			^

CHECK:SPACING: No space is necessary after a cast
#313: FILE: security/apparmor/module_interface.c:268:
+			memcpy(str, e->pos, (size_t) size);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#314: FILE: security/apparmor/module_interface.c:269:
+			str[size-1] = '\0';
 			        ^

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#315: FILE: security/apparmor/module_interface.c:270:
+			* (char **)data = str;
 			^

CHECK:SPACING: No space is necessary after a cast
#324: FILE: security/apparmor/module_interface.c:279:
+		if (!aa_inbounds(e, (size_t) size))

CHECK:SPACING: No space is necessary after a cast
#327: FILE: security/apparmor/module_interface.c:282:
+			memcpy(data, e->pos, (size_t) size);

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#354: FILE: security/apparmor/module_interface.c:309:
+ * returns %0 if either match failes
                               ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#363: FILE: security/apparmor/module_interface.c:318:
+	 * AA_NAME tag value is a u16 */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#366: FILE: security/apparmor/module_interface.c:321:
+		if (name && ((strlen(name) != size-1) ||
 		                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#367: FILE: security/apparmor/module_interface.c:322:
+			     strncmp(name, (char *)e->pos, (size_t)size-1)))
 			                                               ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#383: FILE: security/apparmor/module_interface.c:338:
+#define AA_READ_X(E, C, D, N) \
+	do { \
+		u32 __ret; \
+		__ret = aa_is_nameX((E), (C), (D), (N)); \
+		if (!__ret) \
+			goto fail; \
+	} while (0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#430: FILE: security/apparmor/module_interface.c:385:
+	if (!(entry = alloc_aa_entry()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#453: FILE: security/apparmor/module_interface.c:408:
+			 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#459: FILE: security/apparmor/module_interface.c:414:
+			 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#465: FILE: security/apparmor/module_interface.c:420:
+			 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#471: FILE: security/apparmor/module_interface.c:426:
+			__FUNCTION__,

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#488: FILE: security/apparmor/module_interface.c:443:
+ * @message: error message returned if the addition failes.
                                                     ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#498: FILE: security/apparmor/module_interface.c:453:
+	/* verify consistency of x, px, ix, ux for entry against
+	   possible duplicates for this entry */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#498: FILE: security/apparmor/module_interface.c:453:
+	   possible duplicates for this entry */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#525: FILE: security/apparmor/module_interface.c:480:
+			 * NULL in alloc_aaprofile() */

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#537: FILE: security/apparmor/module_interface.c:492:
+#define AA_ENTRY_LIST(NAME) \
+	do { \
+	if (aa_is_nameX(e, AA_LIST, NULL, (NAME))) { \
+		rulename = ""; \
+		error_string = "Invalid file entry"; \
+		while (!aa_is_nameX(e, AA_LISTEND, NULL, NULL)) { \
+			struct aa_entry *file_entry; \
+			file_entry = aa_activate_file_entry(e); \
+			if (!file_entry) \
+				goto fail; \
+			if (!check_rule_and_add(file_entry, profile, \
+						&error_string)) { \
+				rulename = file_entry->filename; \
+				goto fail; \
+			} \
+		} \
+	} \
+	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#538: FILE: security/apparmor/module_interface.c:493:
+	do { \
+	if (aa_is_nameX(e, AA_LIST, NULL, (NAME))) { \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->flags.debug
#583: FILE: security/apparmor/module_interface.c:538:
+	AA_READ_X(e, AA_U32, &(profile->flags.debug), "profile.flags.debug");

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->flags.complain
#584: FILE: security/apparmor/module_interface.c:539:
+	AA_READ_X(e, AA_U32, &(profile->flags.complain),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->flags.audit
#586: FILE: security/apparmor/module_interface.c:541:
+	AA_READ_X(e, AA_U32, &(profile->flags.audit), "profile.flags.audit");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around profile->capabilities
#590: FILE: security/apparmor/module_interface.c:545:
+	AA_READ_X(e, AA_U32, &(profile->capabilities), "profile.capabilities");

WARNING:LINE_SPACING: Missing a blank line after declarations
#612: FILE: security/apparmor/module_interface.c:567:
+			struct aaprofile *subprofile;
+			subprofile = aa_activate_profile(e, error);

WARNING:TYPO_SPELLING: 'proceeeds' may be misspelled - perhaps 'proceeds'?
#755: FILE: security/apparmor/module_interface.c:710:
+	 * new_profile with the count of 1.  If task B proceeeds to put this
 	                                               ^^^^^^^^^

WARNING:TYPO_SPELLING: 'dissapear' may be misspelled - perhaps 'disappear'?
#756: FILE: security/apparmor/module_interface.c:711:
+	 * profile it will dissapear from under task A.
 	                   ^^^^^^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#770: FILE: security/apparmor/module_interface.c:725:
+			 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#814: FILE: security/apparmor/module_interface.c:769:
+		AA_WARN("%s: trying to remove profile (%s) that "
+			"doesn't exist - skipping.\n", __FUNCTION__, name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#814: FILE: security/apparmor/module_interface.c:769:
+			"doesn't exist - skipping.\n", __FUNCTION__, name);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#827: FILE: security/apparmor/module_interface.c:782:
+	struct aaprofile *p=container_of(kr, struct aaprofile, count);
 	                   ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#846: FILE: security/apparmor/module_interface.c:801:
+	AA_DEBUG("%s(%p)\n", __FUNCTION__, profile);

WARNING:SPLIT_STRING: quoted string split across lines
#854: FILE: security/apparmor/module_interface.c:809:
+		AA_ERROR("%s: internal error, "
+			 "profile '%s' still on global list\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#855: FILE: security/apparmor/module_interface.c:810:
+			 __FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#857: FILE: security/apparmor/module_interface.c:812:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#880: FILE: security/apparmor/module_interface.c:835:
+		AA_DEBUG("%s: %s\n", __FUNCTION__, profile->name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#889: FILE: security/apparmor/module_interface.h:1:
+#ifndef __MODULEINTERFACE_H

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084411.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 41 warnings, 14 checks, 877 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084411.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
