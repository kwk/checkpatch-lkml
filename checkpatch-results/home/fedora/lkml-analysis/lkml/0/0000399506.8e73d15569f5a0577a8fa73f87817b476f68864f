WARNING:TYPO_SPELLING: 'extented' may be misspelled - perhaps 'extended'?
#31: 
> > To avoid ifdef hell I extented the task_foo() abstraction already
                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: fs/proc/array.c:361:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#360: FILE: fs/proc/array.c:370:
+	return sprintf(buffer,"%d %d %d %d %d %d %d\n",
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#407: FILE: fs/proc/task_mmu.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#410: FILE: fs/proc/task_mmu.c:4:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: fs/proc/task_mmu.c:14:
+		unsigned long len = (vma->vm_end - vma->vm_start) >> 10;
+		if (!vma->vm_file) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#443: FILE: fs/proc/task_mmu.c:37:
+		mm->total_vm << (PAGE_SHIFT-10),
 		                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#444: FILE: fs/proc/task_mmu.c:38:
+		mm->locked_vm << (PAGE_SHIFT-10),
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#445: FILE: fs/proc/task_mmu.c:39:
+		mm->rss << (PAGE_SHIFT-10),
 		                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#517: FILE: fs/proc/task_mmu.c:111:
+#define MAPS_LINE_FORMAT	(sizeof(void*) == 4 ? MAPS_LINE_FORMAT4 : MAPS_LINE_FORMAT8)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#518: FILE: fs/proc/task_mmu.c:112:
+#define MAPS_LINE_MAX	(sizeof(void*) == 4 ?  MAPS_LINE_MAX4 :  MAPS_LINE_MAX8)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#520: FILE: fs/proc/task_mmu.c:114:
+static int proc_pid_maps_get_line (char *buf, struct vm_area_struct *map)

CHECK:BRACES: braces {} should be used on all arms of this statement
#540: FILE: fs/proc/task_mmu.c:134:
+	if (map->vm_file != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->vm_file"
#540: FILE: fs/proc/task_mmu.c:134:
+	if (map->vm_file != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: fs/proc/task_mmu.c:136:
+		struct inode *inode = map->vm_file->f_dentry->d_inode;
+		dev = inode->i_sb->s_dev;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#547: FILE: fs/proc/task_mmu.c:141:
+		buf[PAGE_SIZE-1] = '\n';
 		             ^

ERROR:SPACING: space required before the open parenthesis '('
#549: FILE: fs/proc/task_mmu.c:143:
+		if(line < buf)

CHECK:BRACES: Unbalanced braces around else statement
#551: FILE: fs/proc/task_mmu.c:145:
+	} else

ERROR:SPACING: space required before the open parenthesis '('
#559: FILE: fs/proc/task_mmu.c:153:
+	if(map->vm_file) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#559: FILE: fs/proc/task_mmu.c:153:
+	if(map->vm_file) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: fs/proc/task_mmu.c:155:
+		int i;
+		for(i = len; i < MAPS_LINE_MAX; i++)

ERROR:SPACING: space required before the open parenthesis '('
#561: FILE: fs/proc/task_mmu.c:155:
+		for(i = len; i < MAPS_LINE_MAX; i++)

CHECK:BRACES: Unbalanced braces around else statement
#565: FILE: fs/proc/task_mmu.c:159:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#574: FILE: fs/proc/task_mmu.c:168:
+	struct vm_area_struct * map;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#590: FILE: fs/proc/task_mmu.c:184:
+	kbuf = (char*)__get_free_page(GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#594: FILE: fs/proc/task_mmu.c:188:
+	tmp = (char*)__get_free_page(GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: fs/proc/task_mmu.c:193:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: fs/proc/task_mmu.c:193:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#612: FILE: fs/proc/task_mmu.c:206:
+		int len;
+		if (off > PAGE_SIZE) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#619: FILE: fs/proc/task_mmu.c:213:
+			if (retval+len > count) {
 			          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#623: FILE: fs/proc/task_mmu.c:217:
+				 * must start */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#624: FILE: fs/proc/task_mmu.c:218:
+				loff = len+off;
 				          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#626: FILE: fs/proc/task_mmu.c:220:
+			memcpy(kbuf+retval, tmp+off, len);
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#626: FILE: fs/proc/task_mmu.c:220:
+			memcpy(kbuf+retval, tmp+off, len);
 			                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#635: FILE: fs/proc/task_mmu.c:229:
+		if (loff) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#635: FILE: fs/proc/task_mmu.c:229:
+		if (loff) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: fs/proc/task_mmu.c:235:
+	if (retval > count) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#641: FILE: fs/proc/task_mmu.c:235:
+	if (retval > count) BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#657: FILE: fs/proc/task_nommu.c:1:
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: fs/proc/task_nommu.c:14:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: fs/proc/task_nommu.c:14:
+        $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: fs/proc/task_nommu.c:14:
+        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: fs/proc/task_nommu.c:36:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#738: FILE: fs/proc/task_nommu.c:82:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000399506.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 14 warnings, 13 checks, 693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000399506.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
