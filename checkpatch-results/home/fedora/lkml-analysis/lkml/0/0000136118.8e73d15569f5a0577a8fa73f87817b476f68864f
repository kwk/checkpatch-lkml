CHECK:SPACING: No space is necessary after a cast
#115: FILE: include/linux/mm.h:850:
+	page->private = (unsigned long) page;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#116: FILE: include/linux/mm.h:851:
+	page->mapping = (struct address_space *) page;

CHECK:SPACING: No space is necessary after a cast
#117: FILE: include/linux/mm.h:852:
+	page->index   = (pgoff_t) page;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#119: FILE: include/linux/mm.h:854:
+	BUG_ON(PageSlab(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#129: FILE: include/linux/mm.h:864:
+	BUG_ON(page->private != (unsigned long) page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: include/linux/mm.h:864:
+	BUG_ON(page->private != (unsigned long) page);

CHECK:SPACING: No space is necessary after a cast
#130: FILE: include/linux/mm.h:865:
+	BUG_ON(page->mapping != (struct address_space *) page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#130: FILE: include/linux/mm.h:865:
+	BUG_ON(page->mapping != (struct address_space *) page);

CHECK:SPACING: No space is necessary after a cast
#131: FILE: include/linux/mm.h:866:
+	BUG_ON(page->index   != (pgoff_t) page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#131: FILE: include/linux/mm.h:866:
+	BUG_ON(page->index   != (pgoff_t) page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: include/linux/mm.h:869:
+	BUG_ON(page->lru.next != LIST_POISON2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#135: FILE: include/linux/mm.h:870:
+	BUG_ON(page->lru.prev != LIST_POISON1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#151: FILE: include/linux/mm.h:883:
+	BUILD_BUG_ON(__pte_lockptr((struct page *)0) + 1 > (spinlock_t*)\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 6 warnings, 6 checks, 115 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
