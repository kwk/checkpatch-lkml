WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
resource management.  Buses capable of dynamically allocating resources (such

WARNING:TYPO_SPELLING: 'flexable' may be misspelled - perhaps 'flexible'?
#44: 
related.  Also it isn't flexable enough to track all types of bus resources.
                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#73: 
--- a/drivers/base/Makefile	2004-10-18 17:54:55.000000000 -0400

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: drivers/base/resource/bars.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: drivers/base/resource/bars.c:12:
+struct iores * device_get_iores(struct device *dev, unsigned int idx)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#107: FILE: drivers/base/resource/bars.c:20:
+EXPORT_SYMBOL(device_get_iores);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: drivers/base/resource/bars.c:22:
+struct iores * device_find_iores(struct device *dev, unsigned int type,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#129: FILE: drivers/base/resource/bars.c:42:
+EXPORT_SYMBOL(device_find_iores);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: drivers/base/resource/base.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#144: FILE: drivers/base/resource/base.h:11:
+	spinlock_t		lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: drivers/base/resource/base.h:14:
+^Istruct iores * (*conflict) (struct iores *new, struct iores *root, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#147: FILE: drivers/base/resource/base.h:14:
+	struct iores * (*conflict) (struct iores *new, struct iores *root, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: drivers/base/resource/base.h:15:
+^I^I^I^I    struct iores *from); $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: drivers/base/resource/base.h:18:
+extern struct iores_type * iores_get_type(struct iores *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: drivers/base/resource/base.h:18:
+extern struct iores_type * iores_get_type(struct iores *res);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#157: FILE: drivers/base/resource/device.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: drivers/base/resource/device.c:26:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#184: FILE: drivers/base/resource/device.c:28:
+		printk(KERN_ERR "RES: unable to assign resource for '%s:%s'\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: drivers/base/resource/device.c:30:
+^Ireturn ret;^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#200: FILE: drivers/base/resource/device.c:44:
+		printk(KERN_ERR "RES: unable to enable '%s:%s'\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: drivers/base/resource/device.c:45:
+		printk(KERN_ERR "RES: unable to enable '%s:%s'\n",
+		 dev->bus ? dev->bus->name : "no-bus", dev->kobj.name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#206: FILE: drivers/base/resource/device.c:50:
+EXPORT_SYMBOL(device_enable);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#219: FILE: drivers/base/resource/device.c:63:
+		printk(KERN_ERR "RES: unable to disable '%s:%s'\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: drivers/base/resource/device.c:64:
+		printk(KERN_ERR "RES: unable to disable '%s:%s'\n",
+		 dev->bus ? dev->bus->name : "no-bus", dev->kobj.name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#225: FILE: drivers/base/resource/device.c:69:
+EXPORT_SYMBOL(device_disable);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: drivers/base/resource/iores.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#247: FILE: drivers/base/resource/iores.c:18:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: drivers/base/resource/iores.c:23:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: drivers/base/resource/iores.c:24:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: drivers/base/resource/iores.c:34:
+static struct iores * $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < root->start'
#279: FILE: drivers/base/resource/iores.c:50:
+	if ((start < root->start) || (end > root->end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > root->end'
#279: FILE: drivers/base/resource/iores.c:50:
+	if ((start < root->start) || (end > root->end))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#339: FILE: drivers/base/resource/iores.c:110:
+struct iores_type * iores_get_type(struct iores *res)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: drivers/base/resource/iores.c:118:
+static struct iores * $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < root->start'
#356: FILE: drivers/base/resource/iores.c:127:
+	if ((start < root->start) || (end > root->end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > root->end'
#356: FILE: drivers/base/resource/iores.c:127:
+	if ((start < root->start) || (end > root->end))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#380: FILE: drivers/base/resource/iores.c:151:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: drivers/base/resource/iores.c:158:
+        if (!res->parent) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: drivers/base/resource/iores.c:158:
+        if (!res->parent) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: drivers/base/resource/iores.c:168:
+static struct iores * $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#411: FILE: drivers/base/resource/iores.c:182:
+	if (!(type = iores_get_type(res)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#423: FILE: drivers/base/resource/iores.c:194:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#425: FILE: drivers/base/resource/iores.c:196:
+EXPORT_SYMBOL(iores_register);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#432: FILE: drivers/base/resource/iores.c:203:
+	if (!(type = iores_get_type(res)))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#451: FILE: drivers/base/resource/iores.c:222:
+EXPORT_SYMBOL(iores_unregister);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#453: FILE: drivers/base/resource/iores.c:224:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: drivers/base/resource/iores.c:235:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: drivers/base/resource/iores.c:237:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#467: FILE: drivers/base/resource/iores.c:238:
+	if (!(type = iores_get_type(res)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: drivers/base/resource/iores.c:239:
+^I^Ireturn -EINVAL;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: drivers/base/resource/iores.c:242:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: drivers/base/resource/iores.c:244:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: drivers/base/resource/iores.c:249:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: drivers/base/resource/iores.c:252:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#482: FILE: drivers/base/resource/iores.c:253:
+		if (!(conflict = __iores_register(res, type, conflict))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: drivers/base/resource/iores.c:257:
+^I^I^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: drivers/base/resource/iores.c:258:
+                res->start = conflict->end + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: drivers/base/resource/iores.c:258:
+                res->start = conflict->end + 1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: drivers/base/resource/iores.c:261:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#496: FILE: drivers/base/resource/iores.c:267:
+EXPORT_SYMBOL(iores_assign_range);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: drivers/base/resource/iores.c:277:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#507: FILE: drivers/base/resource/iores.c:278:
+	if (!(type = iores_get_type(res)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: drivers/base/resource/iores.c:284:
+^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#516: FILE: drivers/base/resource/iores.c:287:
+			if (*p & (1<<i)) {
 			           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#517: FILE: drivers/base/resource/iores.c:288:
+				res->start = res->end = i + count * 32;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: drivers/base/resource/iores.c:295:
+^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#525: FILE: drivers/base/resource/iores.c:296:
+				
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: drivers/base/resource/iores.c:302:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#535: FILE: drivers/base/resource/iores.c:306:
+EXPORT_SYMBOL(iores_assign_mask);

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#547: FILE: drivers/base/resource/Makefile:8:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#553: FILE: drivers/base/resource/sysfs.c:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#570: FILE: drivers/base/resource/sysfs.c:18:
+static ssize_t state_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#570: FILE: drivers/base/resource/sysfs.c:18:
+static ssize_t state_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#572: FILE: drivers/base/resource/sysfs.c:20:
+	char * state = dev->resource_state ? "enabled" : "disabled";

WARNING:LINE_SPACING: Missing a blank line after declarations
#573: FILE: drivers/base/resource/sysfs.c:21:
+	char * state = dev->resource_state ? "enabled" : "disabled";
+	return sprintf(buf, "%s\n", state);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#576: FILE: drivers/base/resource/sysfs.c:24:
+static ssize_t state_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#576: FILE: drivers/base/resource/sysfs.c:24:
+static ssize_t state_store(struct device * dev, const char * buf, size_t n)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#580: FILE: drivers/base/resource/sysfs.c:28:
+	if (!strnicmp(buf,"enable",6)) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#580: FILE: drivers/base/resource/sysfs.c:28:
+	if (!strnicmp(buf,"enable",6)) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#585: FILE: drivers/base/resource/sysfs.c:33:
+	if (!strnicmp(buf,"disable",7))
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#585: FILE: drivers/base/resource/sysfs.c:33:
+	if (!strnicmp(buf,"disable",7))
 	                           ^

WARNING:DEVICE_ATTR_RW: Use DEVICE_ATTR_RW
#590: FILE: drivers/base/resource/sysfs.c:38:
+}

The DEVICE_ATTR_RW(name) helper macro can be used instead of
DEVICE_ATTR(name, 0644, name_show, name_store);

Note that the macro automatically appends _show and _store to the
named attribute variable of the device for the show and store methods.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: drivers/base/resource/sysfs.c:42:
+static ssize_t resources_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: drivers/base/resource/sysfs.c:42:
+static ssize_t resources_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#596: FILE: drivers/base/resource/sysfs.c:44:
+	char * str = buf;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: drivers/base/resource/sysfs.c:53:
+^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#606: FILE: drivers/base/resource/sysfs.c:54:
+		str += sprintf(str, "%u %s ", i+1, type->name);
 		                               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: drivers/base/resource/sysfs.c:67:
+static ssize_t resources_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: drivers/base/resource/sysfs.c:67:
+static ssize_t resources_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#622: FILE: drivers/base/resource/sysfs.c:70:
+	char * rest;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#626: FILE: drivers/base/resource/sysfs.c:74:
+	index = simple_strtoul(buf, &rest, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#632: FILE: drivers/base/resource/sysfs.c:80:
+	res = &dev->res[index-1];
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/base/resource/sysfs.c:86:
+	if (!strnicmp(buf,"disable",7)) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: drivers/base/resource/sysfs.c:86:
+	if (!strnicmp(buf,"disable",7)) {
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: drivers/base/resource/sysfs.c:93:
+	if (!strnicmp(buf,"unset",5)) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#645: FILE: drivers/base/resource/sysfs.c:93:
+	if (!strnicmp(buf,"unset",5)) {
 	                         ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#652: FILE: drivers/base/resource/sysfs.c:100:
+	res->start = simple_strtoul(rest, &rest, 0);

ERROR:SPACING: space required before the open parenthesis '('
#656: FILE: drivers/base/resource/sysfs.c:104:
+	if(*buf == '-') {

CHECK:BRACES: braces {} should be used on all arms of this statement
#656: FILE: drivers/base/resource/sysfs.c:104:
+	if(*buf == '-') {
[...]
+	} else
[...]

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#660: FILE: drivers/base/resource/sysfs.c:108:
+		res->end = simple_strtoul(rest, &rest, 0);

CHECK:BRACES: Unbalanced braces around else statement
#661: FILE: drivers/base/resource/sysfs.c:109:
+	} else

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#666: FILE: drivers/base/resource/sysfs.c:114:
+	res->flags = simple_strtoul(rest, &rest, 0);

WARNING:DEVICE_ATTR_RW: Use DEVICE_ATTR_RW
#673: FILE: drivers/base/resource/sysfs.c:121:
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#677: FILE: drivers/base/resource/sysfs.c:125:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#678: FILE: drivers/base/resource/sysfs.c:126:
+static struct attribute * resource_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#689: FILE: drivers/base/resource/sysfs.c:137:
+int res_sysfs_add(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#694: FILE: drivers/base/resource/sysfs.c:142:
+void res_sysfs_remove(struct device * dev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#736: FILE: include/linux/device.h:296:
+	int		resource_state;	/* specifies whether the device is
+					   decoding resources */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#736: FILE: include/linux/device.h:296:
+					   decoding resources */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: include/linux/device.h:299:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#746: FILE: include/linux/iores.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#760: FILE: include/linux/iores.h:15:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#767: FILE: include/linux/iores.h:22:
+	unsigned int type;	/* a resource class identifier that specifies a location
+				   in the resource type array, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#767: FILE: include/linux/iores.h:22:
+				   in the resource type array, */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#802: FILE: include/linux/iores.h:57:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#808: FILE: include/linux/iores.h:63:
+        IORES_TYPE_IO = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: include/linux/iores.h:63:
+        IORES_TYPE_IO = 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#809: FILE: include/linux/iores.h:64:
+        IORES_TYPE_MEM,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: include/linux/iores.h:64:
+        IORES_TYPE_MEM,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#810: FILE: include/linux/iores.h:65:
+        IORES_TYPE_IRQ,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: include/linux/iores.h:65:
+        IORES_TYPE_IRQ,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#811: FILE: include/linux/iores.h:66:
+        IORES_TYPE_DMA,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: include/linux/iores.h:66:
+        IORES_TYPE_DMA,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#852: FILE: include/linux/iores.h:107:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#857: FILE: include/linux/iores.h:112:
+extern int iores_register(struct iores *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#858: FILE: include/linux/iores.h:113:
+extern void iores_unregister(struct iores *res);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#860: FILE: include/linux/iores.h:115:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#865: FILE: include/linux/iores.h:120:
+extern int iores_assign_ranged(struct iores *res, unsigned long min,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: include/linux/iores.h:123:
+extern int iores_assign_masked(struct iores *res, __u32 *p, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#868: FILE: include/linux/iores.h:123:
+extern int iores_assign_masked(struct iores *res, __u32 *p, 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#871: FILE: include/linux/iores.h:126:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#876: FILE: include/linux/iores.h:131:
+extern struct iores * device_get_iores(struct device *dev, unsigned int idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#876: FILE: include/linux/iores.h:131:
+extern struct iores * device_get_iores(struct device *dev, unsigned int idx);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#877: FILE: include/linux/iores.h:132:
+extern struct iores * device_find_iores(struct device *dev, unsigned int type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#877: FILE: include/linux/iores.h:132:
+extern struct iores * device_find_iores(struct device *dev, unsigned int type,

ERROR:CODE_INDENT: code indent should use tabs where possible
#878: FILE: include/linux/iores.h:133:
+^I^I^I^I        unsigned int n);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: include/linux/iores.h:133:
+extern struct iores * device_find_iores(struct device *dev, unsigned int type,
+				        unsigned int n);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#880: FILE: include/linux/iores.h:135:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#885: FILE: include/linux/iores.h:140:
+extern int device_assign_resources(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#886: FILE: include/linux/iores.h:141:
+extern int device_enable(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#887: FILE: include/linux/iores.h:142:
+extern int device_disable(struct device *dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#889: FILE: include/linux/iores.h:144:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223910.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 66 errors, 39 warnings, 37 checks, 785 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223910.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
