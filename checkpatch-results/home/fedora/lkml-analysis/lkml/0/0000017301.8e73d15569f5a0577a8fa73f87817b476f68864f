WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: drivers/net/cxgb3/cxgb3_offload.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#78: FILE: drivers/net/cxgb3/cxgb3_offload.c:37:
+#include <asm/atomic.h>

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#106: FILE: drivers/net/cxgb3/cxgb3_offload.c:65:
+	return (test_bit(OFFLOAD_DEVMAP_BIT, &adapter->open_device_map));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:BRACES: Unbalanced braces around else statement
#208: FILE: drivers/net/cxgb3/cxgb3_offload.c:167:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#229: FILE: drivers/net/cxgb3/cxgb3_offload.c:188:
+		/*
+		 * On tx, the iscsi pdu has to be <= tx page size and has to

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#235: FILE: drivers/net/cxgb3/cxgb3_offload.c:194:
+		/* on rx, the iscsi pdu has to be < rx page size and the
+		   whole pdu + cpl headers has to fit into one sge buffer */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#235: FILE: drivers/net/cxgb3/cxgb3_offload.c:194:
+		   whole pdu + cpl headers has to fit into one sge buffer */

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: drivers/net/cxgb3/cxgb3_offload.c:198:
+^I^I^I^I        sizeof(struct cpl_rx_data) * 2 -$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: drivers/net/cxgb3/cxgb3_offload.c:199:
+^I^I^I^I        sizeof(struct cpl_rx_data_ddp)) );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#240: FILE: drivers/net/cxgb3/cxgb3_offload.c:199:
+				        sizeof(struct cpl_rx_data_ddp)) );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#301: FILE: drivers/net/cxgb3/cxgb3_offload.c:260:
+		ret = t3_mc7_bd_read(mem, t->addr/8, t->len/8, (u64 *)t->buf);
 		                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#301: FILE: drivers/net/cxgb3/cxgb3_offload.c:260:
+		ret = t3_mc7_bd_read(mem, t->addr/8, t->len/8, (u64 *)t->buf);
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/net/cxgb3/cxgb3_offload.c:344:
+		iffmacp->dev = get_iff_from_mac(adapter, iffmacp->mac_addr,
+					  iffmacp->vlan_tag & VLAN_VID_MASK);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#420: FILE: drivers/net/cxgb3/cxgb3_offload.c:379:
+/*
+ * Dummy handler for Rx offload packets in case we get an offload packet before

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#445: FILE: drivers/net/cxgb3/cxgb3_offload.c:404:
+/*
+ * Free an active-open TID.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#464: FILE: drivers/net/cxgb3/cxgb3_offload.c:423:
+/*
+ * Free a server TID and return it to the free pool.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: drivers/net/cxgb3/cxgb3_offload.c:439:
+void cxgb3_insert_tid(struct t3cdev *tdev, struct cxgb3_client *client,
+	void *ctx, unsigned int tid)

WARNING:TYPO_SPELLING: 'propely' may be misspelled - perhaps 'properly'?
#491: FILE: drivers/net/cxgb3/cxgb3_offload.c:450:
+ * Populate a TID_RELEASE WR.  The skb must be already propely sized.
                                                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#491: FILE: drivers/net/cxgb3/cxgb3_offload.c:450:
+/*
+ * Populate a TID_RELEASE WR.  The skb must be already propely sized.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#542: FILE: drivers/net/cxgb3/cxgb3_offload.c:501:
+/*
+ * Remove a tid from the TID table.  A client may defer processing its last

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: drivers/net/cxgb3/cxgb3_offload.c:511:
+	BUG_ON(tid >= t->ntids);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#553: FILE: drivers/net/cxgb3/cxgb3_offload.c:512:
+	if (tdev->type == T3A)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#555: FILE: drivers/net/cxgb3/cxgb3_offload.c:514:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#559: FILE: drivers/net/cxgb3/cxgb3_offload.c:518:
+		if (likely(skb)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#563: FILE: drivers/net/cxgb3/cxgb3_offload.c:522:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#617: FILE: drivers/net/cxgb3/cxgb3_offload.c:576:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#629: FILE: drivers/net/cxgb3/cxgb3_offload.c:588:
+		printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: drivers/net/cxgb3/cxgb3_offload.c:603:
+	if (t3c_tid->ctx && t3c_tid->client && t3c_tid->client->handlers &&
+		t3c_tid->client->handlers[CPL_ACT_OPEN_RPL]) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#648: FILE: drivers/net/cxgb3/cxgb3_offload.c:607:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: drivers/net/cxgb3/cxgb3_offload.c:608:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",
+			dev->name, CPL_ACT_OPEN_RPL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: drivers/net/cxgb3/cxgb3_offload.c:621:
+	if (t3c_tid->ctx && t3c_tid->client->handlers &&
+		t3c_tid->client->handlers[p->opcode]) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#664: FILE: drivers/net/cxgb3/cxgb3_offload.c:623:
+		return t3c_tid->client->handlers[p->opcode] (dev, skb, t3c_tid->ctx);
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#665: FILE: drivers/net/cxgb3/cxgb3_offload.c:624:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: drivers/net/cxgb3/cxgb3_offload.c:625:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",
+			dev->name, p->opcode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: drivers/net/cxgb3/cxgb3_offload.c:638:
+	if (t3c_tid->ctx && t3c_tid->client->handlers &&
+		t3c_tid->client->handlers[p->opcode]) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#683: FILE: drivers/net/cxgb3/cxgb3_offload.c:642:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: drivers/net/cxgb3/cxgb3_offload.c:643:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",
+			dev->name, p->opcode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: drivers/net/cxgb3/cxgb3_offload.c:656:
+	if (t3c_tid->ctx && t3c_tid->client->handlers &&
+		t3c_tid->client->handlers[CPL_PASS_ACCEPT_REQ]) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#701: FILE: drivers/net/cxgb3/cxgb3_offload.c:660:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/net/cxgb3/cxgb3_offload.c:661:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",
+			dev->name, CPL_PASS_ACCEPT_REQ);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: drivers/net/cxgb3/cxgb3_offload.c:674:
+	if (t3c_tid->ctx && t3c_tid->client->handlers &&
+		t3c_tid->client->handlers[p->opcode]) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#725: FILE: drivers/net/cxgb3/cxgb3_offload.c:684:
+			printk("do_abort_req_rss: couldn't get skb!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_abort_req_rss', this function's name, in a string
#725: FILE: drivers/net/cxgb3/cxgb3_offload.c:684:
+			printk("do_abort_req_rss: couldn't get skb!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: drivers/net/cxgb3/cxgb3_offload.c:710:
+	if (t3c_tid->ctx && t3c_tid->client->handlers &&
+		t3c_tid->client->handlers[CPL_ACT_ESTABLISH]) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#755: FILE: drivers/net/cxgb3/cxgb3_offload.c:714:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: drivers/net/cxgb3/cxgb3_offload.c:715:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",
+			dev->name, CPL_PASS_ACCEPT_REQ);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#766: FILE: drivers/net/cxgb3/cxgb3_offload.c:725:
+		printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: drivers/net/cxgb3/cxgb3_offload.c:751:
+	if (t3c_tid->ctx && t3c_tid->client->handlers &&
+		t3c_tid->client->handlers[opcode]) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#793: FILE: drivers/net/cxgb3/cxgb3_offload.c:752:
+		return t3c_tid->client->handlers[opcode](dev,skb,t3c_tid->ctx);
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#793: FILE: drivers/net/cxgb3/cxgb3_offload.c:752:
+		return t3c_tid->client->handlers[opcode](dev,skb,t3c_tid->ctx);
 		                                                ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#794: FILE: drivers/net/cxgb3/cxgb3_offload.c:753:
+		return t3c_tid->client->handlers[opcode](dev,skb,t3c_tid->ctx);
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#795: FILE: drivers/net/cxgb3/cxgb3_offload.c:754:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: drivers/net/cxgb3/cxgb3_offload.c:755:
+		printk(KERN_ERR "%s: received clientless CPL command 0x%x\n",
+			dev->name, opcode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: drivers/net/cxgb3/cxgb3_offload.c:761:
+static int nb_callback(struct notifier_block *self, unsigned long event,
+	void *ctx)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#804: FILE: drivers/net/cxgb3/cxgb3_offload.c:763:
+	switch (event) {
[...]
+		case (NETEVENT_PMTU_UPDATE):
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#813: FILE: drivers/net/cxgb3/cxgb3_offload.c:772:
+			struct netevent_redirect *nr = ctx;
+			cxgb_redirect(nr->old, nr->new);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#828: FILE: drivers/net/cxgb3/cxgb3_offload.c:787:
+/*
+ * Process a received packet with an unknown/unexpected CPL opcode.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#832: FILE: drivers/net/cxgb3/cxgb3_offload.c:791:
+	printk(KERN_ERR "%s: received bad CPL command 0x%x\n", dev->name,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#838: FILE: drivers/net/cxgb3/cxgb3_offload.c:797:
+/*
+ * Handlers for each CPL opcode

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#843: FILE: drivers/net/cxgb3/cxgb3_offload.c:802:
+/*
+ * Add a new handler to the CPL dispatch table.  A NULL handler may be supplied

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#851: FILE: drivers/net/cxgb3/cxgb3_offload.c:810:
+		printk(KERN_ERR "T3C: handler registration for "

WARNING:SPLIT_STRING: quoted string split across lines
#852: FILE: drivers/net/cxgb3/cxgb3_offload.c:811:
+		printk(KERN_ERR "T3C: handler registration for "
+		       "opcode %x failed\n", opcode);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#857: FILE: drivers/net/cxgb3/cxgb3_offload.c:816:
+/*
+ * T3CDEV's receive method.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#870: FILE: drivers/net/cxgb3/cxgb3_offload.c:829:
+			printk(KERN_ERR "%s: CPL message (opcode %u) had "

WARNING:SPLIT_STRING: quoted string split across lines
#871: FILE: drivers/net/cxgb3/cxgb3_offload.c:830:
+			printk(KERN_ERR "%s: CPL message (opcode %u) had "
+			       "unknown TID %u\n", dev->name, opcode,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#882: FILE: drivers/net/cxgb3/cxgb3_offload.c:841:
+/*
+ * Sends an sk_buff to a T3C driver after dealing with any active network taps.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#920: FILE: drivers/net/cxgb3/cxgb3_offload.c:879:
+		BUG_ON(!tdev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#932: FILE: drivers/net/cxgb3/cxgb3_offload.c:891:
+		printk(KERN_ERR "%s: cannot allocate skb!\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#932: FILE: drivers/net/cxgb3/cxgb3_offload.c:891:
+	if (!skb) {
+		printk(KERN_ERR "%s: cannot allocate skb!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#932: FILE: drivers/net/cxgb3/cxgb3_offload.c:891:
+		printk(KERN_ERR "%s: cannot allocate skb!\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#955: FILE: drivers/net/cxgb3/cxgb3_offload.c:914:
+	struct t3c_tid_entry *te;
 	                      ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#962: FILE: drivers/net/cxgb3/cxgb3_offload.c:921:
+		printk(KERN_WARNING "%s: Redirect to non-offload"

WARNING:SPLIT_STRING: quoted string split across lines
#963: FILE: drivers/net/cxgb3/cxgb3_offload.c:922:
+		printk(KERN_WARNING "%s: Redirect to non-offload"
+		       "device ignored.\n", __FUNCTION__);

WARNING:MISSING_SPACE: break quoted strings at a space character
#963: FILE: drivers/net/cxgb3/cxgb3_offload.c:922:
+		printk(KERN_WARNING "%s: Redirect to non-offload"
+		       "device ignored.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#963: FILE: drivers/net/cxgb3/cxgb3_offload.c:922:
+		       "device ignored.\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#967: FILE: drivers/net/cxgb3/cxgb3_offload.c:926:
+	BUG_ON(!tdev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#969: FILE: drivers/net/cxgb3/cxgb3_offload.c:928:
+		printk(KERN_WARNING "%s: Redirect to different "

WARNING:SPLIT_STRING: quoted string split across lines
#970: FILE: drivers/net/cxgb3/cxgb3_offload.c:929:
+		printk(KERN_WARNING "%s: Redirect to different "
+		       "offload device ignored.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#970: FILE: drivers/net/cxgb3/cxgb3_offload.c:929:
+		       "offload device ignored.\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#977: FILE: drivers/net/cxgb3/cxgb3_offload.c:936:
+		printk(KERN_ERR "%s: couldn't allocate new l2t entry!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#978: FILE: drivers/net/cxgb3/cxgb3_offload.c:937:
+		       __FUNCTION__);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#984: FILE: drivers/net/cxgb3/cxgb3_offload.c:943:
+	for (tid=0; tid < ti->ntids; tid++) {
 	        ^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#985: FILE: drivers/net/cxgb3/cxgb3_offload.c:944:
+		te = lookup_tid(ti, tid);
 		^^

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#986: FILE: drivers/net/cxgb3/cxgb3_offload.c:945:
+		BUG_ON(!te);
 		        ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#986: FILE: drivers/net/cxgb3/cxgb3_offload.c:945:
+		BUG_ON(!te);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1000: FILE: drivers/net/cxgb3/cxgb3_offload.c:959:
+/*
+ * Allocate a chunk of memory using kmalloc or, if that fails, vmalloc.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1015: FILE: drivers/net/cxgb3/cxgb3_offload.c:974:
+/*
+ * Free memory allocated through t3_alloc_mem().

CHECK:SPACING: No space is necessary after a cast
#1019: FILE: drivers/net/cxgb3/cxgb3_offload.c:978:
+	unsigned long p = (unsigned long) addr;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1028: FILE: drivers/net/cxgb3/cxgb3_offload.c:987:
+/*
+ * Allocate and initialize the TID tables.  Returns 0 on success.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1050: FILE: drivers/net/cxgb3/cxgb3_offload.c:1009:
+	t->stids_in_use = t->atids_in_use = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1056: FILE: drivers/net/cxgb3/cxgb3_offload.c:1015:
+	/*
+	 * Setup the free lists for stid_tab and atid_tab.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1189: FILE: drivers/net/cxgb3/cxgb3_offload.c:1148:
+void __devinit cxgb3_adapter_ofld(struct adapter *adapter)

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1204: FILE: drivers/net/cxgb3/cxgb3_offload.c:1163:
+void __devexit cxgb3_adapter_unofld(struct adapter *adapter)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1252: FILE: drivers/net/cxgb3/l2t.c:1:
+/*

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1299: FILE: drivers/net/cxgb3/l2t.c:48:
+/*
+ * Module locking notes:  There is a RW lock protecting the L2 table as a

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1332: FILE: drivers/net/cxgb3/l2t.c:81:
+/*
+ * Set up an L2T entry and send any packets waiting in the arp queue.  The

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1370: FILE: drivers/net/cxgb3/l2t.c:119:
+/*
+ * Add a packet to the an L2T entry's queue of packets awaiting resolution.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1406: FILE: drivers/net/cxgb3/l2t.c:155:
+		/*
+		 * Only the first packet added to the arpq should kick off

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1438: FILE: drivers/net/cxgb3/l2t.c:187:
+		if (e->state == L2T_STATE_STALE) {
+			e->state = L2T_STATE_VALID;
+		}

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1454: FILE: drivers/net/cxgb3/l2t.c:203:
+		/*
+		 * Only the first packet added to the arpq should kick off

WARNING:RETURN_VOID: void function return statements are not generally useful
#1464: FILE: drivers/net/cxgb3/l2t.c:213:
+	return;
+}

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1468: FILE: drivers/net/cxgb3/l2t.c:217:
+/*
+ * Allocate a free L2T entry.  Must be called with l2t_data.lock held.

WARNING:SPACING: space prohibited before semicolon
#1482: FILE: drivers/net/cxgb3/l2t.c:231:
+	for (e = &d->l2tab[1]; atomic_read(&e->refcnt); ++e) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1482: FILE: drivers/net/cxgb3/l2t.c:231:
+	for (e = &d->l2tab[1]; atomic_read(&e->refcnt); ++e) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1488: FILE: drivers/net/cxgb3/l2t.c:237:
+	/*
+	 * The entry we found may be an inactive entry that is

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1505: FILE: drivers/net/cxgb3/l2t.c:254:
+/*
+ * Called when an L2T entry has no more users.  The entry is left in the hash

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1530: FILE: drivers/net/cxgb3/l2t.c:279:
+/*
+ * Update an L2T entry that was previously used for the same next hop as neigh.

CHECK:SPACING: No space is necessary after a cast
#1557: FILE: drivers/net/cxgb3/l2t.c:306:
+	u32 addr = *(u32 *) neigh->primary_key;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1596: FILE: drivers/net/cxgb3/l2t.c:345:
+/*
+ * Called when address resolution fails for an L2T entry to handle packets

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1619: FILE: drivers/net/cxgb3/l2t.c:368:
+/*
+ * Called when the host's ARP layer makes a change to some entry that is

CHECK:SPACING: No space is necessary after a cast
#1627: FILE: drivers/net/cxgb3/l2t.c:376:
+	u32 addr = *(u32 *) neigh->primary_key;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1647: FILE: drivers/net/cxgb3/l2t.c:396:
+			if (neigh->nud_state & NUD_FAILED) {
[...]
+			} else if (neigh_is_connected(neigh))
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1649: FILE: drivers/net/cxgb3/l2t.c:398:
+				e->arpq_head = e->arpq_tail = NULL;

WARNING:SPLIT_STRING: quoted string split across lines
#1738: FILE: drivers/net/cxgb3/l2t.c:487:
+		seq_puts(seq, "Index IP address      Ethernet address   VLAN  "
+			 "Prio  State   Users SMTIDX  Port\n");

CHECK:BRACES: Unbalanced braces around else statement
#1739: FILE: drivers/net/cxgb3/l2t.c:488:
+	else {

WARNING:SPLIT_STRING: quoted string split across lines
#1746: FILE: drivers/net/cxgb3/l2t.c:495:
+		seq_printf(seq, "%-5u %-15s %02x:%02x:%02x:%02x:%02x:%02x  %4d"
+			   "  %3u     %c   %7u   %4u %s\n",

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1757: FILE: drivers/net/cxgb3/l2t.c:506:
+static struct seq_operations l2t_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1777: FILE: drivers/net/cxgb3/l2t.c:526:
+static struct file_operations l2t_seq_fops = {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1786: FILE: drivers/net/cxgb3/l2t.c:535:
+/*
+ * Create the proc entries for the L2 table under dir.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1795: FILE: drivers/net/cxgb3/l2t.c:544:
+	p = create_proc_entry("l2t", S_IRUGO, dir);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000017301.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 82 warnings, 30 checks, 1762 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000017301.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
