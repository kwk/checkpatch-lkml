ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#65: 
--- a/fs/buffer.c	Sat Jul 28 11:33:18 2001

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#71: FILE: fs/buffer.c:101:
+int block_write_anon_page(struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#71: FILE: fs/buffer.c:101:
+int block_write_anon_page(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited before semicolon
#72: FILE: fs/buffer.c:102:
+static int dirty_list_writepage(struct page *page, struct buffer_head *bh) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#73: FILE: fs/buffer.c:103:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;
                                                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: fs/buffer.c:103:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#73: FILE: fs/buffer.c:103:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#75: FILE: fs/buffer.c:105:
+static struct address_space_operations anon_space_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#76: FILE: fs/buffer.c:106:
+	writepage: block_write_anon_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#77: FILE: fs/buffer.c:107:
+	sync_page: block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#77: FILE: fs/buffer.c:107:
+	sync_page: block_sync_page,

WARNING:SPACING: space prohibited before semicolon
#78: FILE: fs/buffer.c:108:
+} ;

WARNING:SPACING: space prohibited before semicolon
#85: FILE: fs/buffer.c:115:
+} ;

WARNING:SPACING: space prohibited before semicolon
#120: FILE: fs/buffer.c:202:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#142: FILE: fs/buffer.c:215:
+		page = bh->b_page ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#148: FILE: fs/buffer.c:218:
+		/* if we wrote the buffer the last time through, it
+		** might not have been refiled yet.  Without this check,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited before semicolon
#153: FILE: fs/buffer.c:223:
+			__refile_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#154: FILE: fs/buffer.c:224:
+			continue ;

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#158: FILE: fs/buffer.c:226:
+		if (TryLockPage(page)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#158: FILE: fs/buffer.c:226:
+		if (TryLockPage(page)) {
+			continue ;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#159: FILE: fs/buffer.c:227:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#161: FILE: fs/buffer.c:229:
+		page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#162: FILE: fs/buffer.c:230:
+		get_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#164: FILE: fs/buffer.c:232:
+		dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#166: FILE: fs/buffer.c:234:
+		refile_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#167: FILE: fs/buffer.c:235:
+		put_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#168: FILE: fs/buffer.c:236:
+		page_cache_release(page) ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#184: FILE: fs/buffer.c:275:
+/* just for use with anon pages, or pages that don't provide their own
+** writepage func.  We just want to write bh, not the whole page, so we

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#187: FILE: fs/buffer.c:278:
+static int __dirty_list_writepage(struct page *page, struct buffer_head *bh) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#188: FILE: fs/buffer.c:279:
+	int other_dirty = 0 ;

WARNING:SPACING: space prohibited before semicolon
#189: FILE: fs/buffer.c:280:
+	struct buffer_head *cur ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#192: FILE: fs/buffer.c:283:
+	/* check for other dirty buffers on this page.  If there are none,
+	** clear the page dirty bit

WARNING:SPACING: space prohibited before semicolon
#194: FILE: fs/buffer.c:285:
+	cur = bh->b_this_page ;

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: fs/buffer.c:286:
+	while(cur != bh) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/buffer.c:287:
+^I^Iother_dirty += buffer_dirty(cur) ;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#196: FILE: fs/buffer.c:287:
+		other_dirty += buffer_dirty(cur) ;	

WARNING:SPACING: space prohibited before semicolon
#197: FILE: fs/buffer.c:288:
+		cur = cur->b_this_page ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/buffer.c:289:
+^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#199: FILE: fs/buffer.c:290:
+	if (other_dirty == 0) {
+		ClearPageDirty(page) ;
+	} 

WARNING:SPACING: space prohibited before semicolon
#200: FILE: fs/buffer.c:291:
+		ClearPageDirty(page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: fs/buffer.c:292:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: fs/buffer.c:294:
+^I/* we want the page available for locking again right away.  $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#204: FILE: fs/buffer.c:295:
+	/* we want the page available for locking again right away.  
+	** someone walking the dirty buffer list might find another

WARNING:SPACING: space prohibited before semicolon
#209: FILE: fs/buffer.c:300:
+	get_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#210: FILE: fs/buffer.c:301:
+	lock_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#211: FILE: fs/buffer.c:302:
+	clear_bit(BH_Dirty, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#212: FILE: fs/buffer.c:303:
+	bh->b_end_io = end_buffer_io_sync ;

WARNING:SPACING: space prohibited before semicolon
#213: FILE: fs/buffer.c:304:
+	UnlockPage(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#213: FILE: fs/buffer.c:304:
+	UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#214: FILE: fs/buffer.c:305:
+	submit_bh(WRITE, bh) ;

WARNING:SPACING: space prohibited before semicolon
#215: FILE: fs/buffer.c:306:
+	return 0 ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#219: FILE: fs/buffer.c:310:
+/*
+** util function for sync_buffers and flush_dirty_buffers

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#223: FILE: fs/buffer.c:314:
+static int dirty_list_writepage(struct page *page, struct buffer_head *bh) {

CHECK:SPACING: No space is necessary after a cast
#224: FILE: fs/buffer.c:315:
+	int (*writepage)(struct page *)  ;

WARNING:SPACING: space prohibited before semicolon
#224: FILE: fs/buffer.c:315:
+	int (*writepage)(struct page *)  ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#224: FILE: fs/buffer.c:315:
+	int (*writepage)(struct page *)  ;

WARNING:SPACING: space prohibited before semicolon
#228: FILE: fs/buffer.c:319:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#229: FILE: fs/buffer.c:320:
+		return 0 ;

WARNING:SPACING: space prohibited before semicolon
#231: FILE: fs/buffer.c:322:
+	writepage = page->mapping->a_ops->writepage ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#234: FILE: fs/buffer.c:325:
+	/* For anon pages, and pages that don't have a writepage
+	** func, just write this one dirty buffer.  __dirty_list_writepage

WARNING:BRACES: braces {} are not necessary for single statement blocks
#238: FILE: fs/buffer.c:329:
+	if (!writepage || page->mapping == &anon_space_mapping) {
+		return __dirty_list_writepage(page, bh) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#239: FILE: fs/buffer.c:330:
+		return __dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#242: FILE: fs/buffer.c:333:
+	ClearPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#243: FILE: fs/buffer.c:334:
+	return writepage(page) ;

WARNING:SPACING: space prohibited before semicolon
#254: FILE: fs/buffer.c:838:
+		wakeup_kswapd() ;

WARNING:SPACING: space prohibited before semicolon
#262: FILE: fs/buffer.c:858:
+	int partial = 0 ;

WARNING:SPACING: space prohibited before semicolon
#271: FILE: fs/buffer.c:885:
+			partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#289: FILE: fs/buffer.c:1152:
+	wakeup_bdflush(0) ;

WARNING:SPACING: space prohibited before semicolon
#300: FILE: fs/buffer.c:1188:
+		SetPageDirty(bh->b_page) ;

WARNING:SPACING: space prohibited before semicolon
#309: FILE: fs/buffer.c:1228:
+	struct address_space *mapping ;

WARNING:SPACING: space prohibited before semicolon
#314: FILE: fs/buffer.c:1232:
+	mapping = buf->b_page->mapping ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: fs/buffer.c:1233:
+^Iif (mapping != &anon_space_mapping || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: fs/buffer.c:1234:
+^I    !atomic_dec_and_test(&buf->b_count) || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: fs/buffer.c:1569:
+int block_write_anon_page(struct page *page) $

WARNING:SPACING: space prohibited before semicolon
#328: FILE: fs/buffer.c:1572:
+	int i, nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#329: FILE: fs/buffer.c:1573:
+	int partial = 0 ;

WARNING:SPACING: space prohibited before semicolon
#330: FILE: fs/buffer.c:1574:
+	int ret = 0 ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#333: FILE: fs/buffer.c:1577:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: fs/buffer.c:1580:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#336: FILE: fs/buffer.c:1580:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#344: FILE: fs/buffer.c:1588:
+			get_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#345: FILE: fs/buffer.c:1589:
+			lock_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#346: FILE: fs/buffer.c:1590:
+			set_bit(BH_Uptodate, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#348: FILE: fs/buffer.c:1592:
+			clear_bit(BH_Dirty, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#349: FILE: fs/buffer.c:1593:
+			arr[nr++] = bh ;

WARNING:SPACING: space prohibited before semicolon
#351: FILE: fs/buffer.c:1595:
+			partial = 1 ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#357: FILE: fs/buffer.c:1601:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#358: FILE: fs/buffer.c:1602:
+		submit_bh(WRITE, arr[i]) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#363: FILE: fs/buffer.c:1607:
+	if (nr == 0) {
+		UnlockPage(page) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#364: FILE: fs/buffer.c:1608:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#366: FILE: fs/buffer.c:1610:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#376: FILE: fs/buffer.c:1621:
+	unsigned long lblock ;

WARNING:SPACING: space prohibited before semicolon
#377: FILE: fs/buffer.c:1622:
+	unsigned long blocksize = inode->i_sb->s_blocksize ;

WARNING:SPACING: space prohibited before semicolon
#379: FILE: fs/buffer.c:1624:
+	int page_ok = Page_Uptodate(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#379: FILE: fs/buffer.c:1624:
+	int page_ok = Page_Uptodate(page) ;

WARNING:SPACING: space prohibited before semicolon
#380: FILE: fs/buffer.c:1625:
+	struct buffer_head *arr[MAX_BUF_PER_PAGE] ;

WARNING:SPACING: space prohibited before semicolon
#381: FILE: fs/buffer.c:1626:
+	int nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#382: FILE: fs/buffer.c:1627:
+	int partial = 0 ;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: fs/buffer.c:1637:
+	lblock = (inode->i_size+blocksize-1) >> inode->i_sb->s_blocksize_bits;
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#393: FILE: fs/buffer.c:1637:
+	lblock = (inode->i_size+blocksize-1) >> inode->i_sb->s_blocksize_bits;
 	                                 ^

WARNING:SPACING: space prohibited before semicolon
#415: FILE: fs/buffer.c:1660:
+			arr[nr++] = bh ;

WARNING:SPACING: space prohibited before semicolon
#417: FILE: fs/buffer.c:1662:
+			partial = 1 ;

ERROR:SPACING: space required before the open parenthesis '('
#425: FILE: fs/buffer.c:1669:
+	for(i = 0 ; i < nr ; i++) {

WARNING:SPACING: space prohibited before semicolon
#426: FILE: fs/buffer.c:1670:
+		bh = arr[i] ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: fs/buffer.c:1676:
+^I} $

ERROR:SPACING: space required before the open parenthesis '('
#442: FILE: fs/buffer.c:1679:
+	for(i = 0 ; i < nr ; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#442: FILE: fs/buffer.c:1679:
+	for(i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]);
+	}

WARNING:SPACING: space prohibited before semicolon
#446: FILE: fs/buffer.c:1683:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#477: FILE: fs/buffer.c:2094:
+	return __block_write_full_page(inode, page, get_block) ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#484: FILE: fs/buffer.c:2101:
+	unsigned offset;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#491: FILE: fs/buffer.c:2108:
+	offset = inode->i_size & (PAGE_CACHE_SIZE-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#493: FILE: fs/buffer.c:2110:
+	if (page->index >= end_index+1 || !offset) {
 	                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#502: FILE: fs/buffer.c:2116:
+	/* directories in the page cache don't need to have the buffers
+	** past the eof zerod out.  In fact, ext2 sets up fake entries

WARNING:SPACING: space prohibited before semicolon
#505: FILE: fs/buffer.c:2119:
+	return __block_write_full_page(inode, page, get_block) ;

WARNING:SPACING: space prohibited before semicolon
#514: FILE: fs/buffer.c:2395:
+	unsigned long index ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#523: FILE: fs/buffer.c:2412:
+	/* don't put this buffer head on the free list until the
+	** page is setup.  Is there a better index to use?  Would 0

WARNING:SPACING: space prohibited before semicolon
#527: FILE: fs/buffer.c:2416:
+	index = atomic_read(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#529: FILE: fs/buffer.c:2418:
+	add_to_page_cache_locked(page, &anon_space_mapping, index) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: fs/buffer.c:2477:
+^I^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#576: FILE: fs/buffer.c:2538:
+	if (page->mapping == &anon_space_mapping) {
+		atomic_dec(&buffermem_pages) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#577: FILE: fs/buffer.c:2539:
+		atomic_dec(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#604: FILE: fs/buffer.c:2691:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#613: FILE: fs/buffer.c:2709:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#621: FILE: fs/buffer.c:2723:
+		page = bh->b_page ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#622: FILE: fs/buffer.c:2724:
+		if (TryLockPage(page)) {
+		    flushed-- ;

WARNING:SPACING: space prohibited before semicolon
#623: FILE: fs/buffer.c:2725:
+		    flushed-- ;

WARNING:TABSTOP: Statements should start on a tabstop
#624: FILE: fs/buffer.c:2726:
+		    continue ;

WARNING:SPACING: space prohibited before semicolon
#624: FILE: fs/buffer.c:2726:
+		    continue ;

WARNING:SPACING: space prohibited before semicolon
#628: FILE: fs/buffer.c:2730:
+		page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#632: FILE: fs/buffer.c:2733:
+		dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#634: FILE: fs/buffer.c:2735:
+		page_cache_release(page) ;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#645: FILE: fs/ext2/inode.c:577:
 }
+static int ext2_dir_writepage(struct page *page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#647: FILE: fs/ext2/inode.c:579:
+	return block_write_dir_page(page,ext2_get_block);
 	                                ^

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#656: FILE: fs/ext2/inode.c:602:
+struct address_space_operations ext2_dir_aops = {

WARNING:INDENTED_LABEL: labels should not be indented
#657: FILE: fs/ext2/inode.c:603:
+	readpage: ext2_readpage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#658: FILE: fs/ext2/inode.c:604:
+	writepage: ext2_dir_writepage,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#658: FILE: fs/ext2/inode.c:604:
+	writepage: ext2_dir_writepage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#659: FILE: fs/ext2/inode.c:605:
+	sync_page: block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#659: FILE: fs/ext2/inode.c:605:
+	sync_page: block_sync_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#660: FILE: fs/ext2/inode.c:606:
+	prepare_write: ext2_prepare_write,
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#660: FILE: fs/ext2/inode.c:606:
+	prepare_write: ext2_prepare_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#661: FILE: fs/ext2/inode.c:607:
+	commit_write: generic_commit_write,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#661: FILE: fs/ext2/inode.c:607:
+	commit_write: generic_commit_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#662: FILE: fs/ext2/inode.c:608:
+	bmap: ext2_bmap
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#662: FILE: fs/ext2/inode.c:608:
+	bmap: ext2_bmap

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: fs/reiserfs/inode.c:1816:
+    int page_ok = Page_Uptodate(page) ;$

WARNING:SPACING: space prohibited before semicolon
#696: FILE: fs/reiserfs/inode.c:1816:
+    int page_ok = Page_Uptodate(page) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#705: FILE: fs/reiserfs/inode.c:1841:
+	if (!(buffer_dirty(bh) || page_ok) || cur_offset >= last_offset) {
 	    if (!buffer_uptodate(bh))

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#716: FILE: include/linux/ext2_fs.h:643:
+extern struct address_space_operations ext2_dir_aops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/linux/fs.h:1329:
+extern int block_write_dir_page(struct page*, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#727: FILE: include/linux/fs.h:1329:
+extern int block_write_dir_page(struct page*, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#727: FILE: include/linux/fs.h:1329:
+extern int block_write_dir_page(struct page*, get_block_t*);

CHECK:SPACING: No space is necessary after a cast
#728: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#728: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

WARNING:SPACING: space prohibited before semicolon
#728: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#728: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#728: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 121 warnings, 12 checks, 660 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
