WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
> In message <Pine.LNX.4.44.0301051952450.3087-100000@home.transmeta.com> you w

WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#25: 
> te:
  ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/kmod.h:33:
+extern int call_usermodehelper(char *path, char *argv[], char *envp[], int wait);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#257: FILE: kernel/kmod.c:65:
+	char *argv[] = { modprobe_path, "--", (char*)module_name, NULL };

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#257: FILE: kernel/kmod.c:65:
+	char *argv[] = { modprobe_path, "--", (char*)module_name, NULL };

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#258: FILE: kernel/kmod.c:66:
+	static char *envp[] = { "HOME=/",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#289: FILE: kernel/kmod.c:87:
+	max_modprobes = min(max_threads/2, MAX_KMOD_CONCURRENT);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_module', this function's name, in a string
#297: FILE: kernel/kmod.c:93:
+			       "request_module: runaway loop modprobe %s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#315: FILE: kernel/kmod.c:103:
+		unsigned long now = jiffies;
+		if (now - last > HZ) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#317: FILE: kernel/kmod.c:105:
+			printk(KERN_DEBUG

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_module', this function's name, in a string
#318: FILE: kernel/kmod.c:106:
+			       "request_module: failed %s -- %s. error = %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#416: FILE: kernel/kmod.c:191:
+	 * until that is done.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#424: FILE: kernel/kmod.c:199:
+	if (pid < 0) {
[...]
+		complete(sub_info->complete);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#492: FILE: arch/i386/mach-voyager/voyager_thread.c:77:
+	if ((ret = call_usermodehelper(argv[0], argv, envp, 1)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#493: FILE: arch/i386/mach-voyager/voyager_thread.c:78:
+		printk(KERN_ERR "Voyager failed to run \"%s\": %i\n",

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#532: FILE: drivers/base/hotplug.c:117:
+	retval = call_usermodehelper (argv [0], argv, envp, 0);

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#532: FILE: drivers/base/hotplug.c:117:
+	retval = call_usermodehelper (argv [0], argv, envp, 0);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#572: FILE: drivers/bluetooth/bt3c_cs.c:497:
+	char *argv[] = { FW_LOADER, "pccard", dev, NULL };

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#573: FILE: drivers/bluetooth/bt3c_cs.c:498:
+	char *envp[] = { "HOME=/", "TERM=linux", "PATH=/sbin:/usr/sbin:/bin:/usr/bin", NULL };

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#606: FILE: drivers/bluetooth/bt3c_cs.c:504:
+		printk(KERN_WARNING

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#633: FILE: drivers/input/input.c:386:
+	value = call_usermodehelper(argv [0], argv, envp, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: drivers/net/hamradio/baycom_epp.c:377:
+        char *argv[] = { eppconfig_path, "-s", "-p", portarg, "-m", modearg,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: drivers/net/hamradio/baycom_epp.c:377:
+        char *argv[] = { eppconfig_path, "-s", "-p", portarg, "-m", modearg,$

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#667: FILE: drivers/net/hamradio/baycom_epp.c:377:
+        char *argv[] = { eppconfig_path, "-s", "-p", portarg, "-m", modearg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: drivers/net/hamradio/baycom_epp.c:379:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: drivers/net/hamradio/baycom_epp.c:379:
+        int ret;$

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#722: FILE: drivers/pnp/pnpbios/core.c:605:
+	value = call_usermodehelper (argv [0], argv, envp, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#722: FILE: drivers/pnp/pnpbios/core.c:605:
+	value = call_usermodehelper (argv [0], argv, envp, 0);

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#746: FILE: net/core/dev.c:2921:
+	return call_usermodehelper(argv [0], argv, envp, 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402628.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 18 warnings, 3 checks, 629 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402628.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
