CHECK:SPACING: No space is necessary after a cast
#72: FILE: arch/i386/kernel/dmi_scan.c:109:
+		char *d = ((char *) dm) + (i * 2);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#80: FILE: arch/i386/kernel/dmi_scan.c:117:
+			printk(KERN_ERR "dmi_save_devices: out of memory.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmi_save_devices', this function's name, in a string
#80: FILE: arch/i386/kernel/dmi_scan.c:117:
+			printk(KERN_ERR "dmi_save_devices: out of memory.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: arch/i386/kernel/dmi_scan.c:132:
+	void * data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#98: FILE: arch/i386/kernel/dmi_scan.c:135:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#99: FILE: arch/i386/kernel/dmi_scan.c:136:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmi_save_ipmi_device', this function's name, in a string
#99: FILE: arch/i386/kernel/dmi_scan.c:136:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#107: FILE: arch/i386/kernel/dmi_scan.c:144:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmi_save_ipmi_device', this function's name, in a string
#107: FILE: arch/i386/kernel/dmi_scan.c:144:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#172: FILE: arch/i386/kernel/dmi_scan.c:286:
+struct dmi_device * dmi_find_device(int type, const char *name,

ERROR:SPACING: space required before the open parenthesis '('
#177: FILE: arch/i386/kernel/dmi_scan.c:291:
+	for(d = head->next; d != &dmi_devices; d = d->next) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == DMI_DEV_TYPE_ANY'
#180: FILE: arch/i386/kernel/dmi_scan.c:294:
+		if (((type == DMI_DEV_TYPE_ANY) || (dev->type == type)) &&
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->type == type'
#180: FILE: arch/i386/kernel/dmi_scan.c:294:
+		if (((type == DMI_DEV_TYPE_ANY) || (dev->type == type)) &&
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'name == NULL'
#180: FILE: arch/i386/kernel/dmi_scan.c:294:
+		if (((type == DMI_DEV_TYPE_ANY) || (dev->type == type)) &&
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#181: FILE: arch/i386/kernel/dmi_scan.c:295:
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: include/linux/dmi.h:65:
+extern struct dmi_device * dmi_find_device(int type, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: include/linux/dmi.h:65:
+extern struct dmi_device * dmi_find_device(int type, const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/linux/dmi.h:66:
+extern struct dmi_device * dmi_find_device(int type, const char *name,
+	struct dmi_device *from);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: include/linux/dmi.h:71:
+static struct dmi_device * dmi_find_device(int type, const char *name,

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#247: FILE: include/linux/dmi.h:71:
+static struct dmi_device * dmi_find_device(int type, const char *name,
+	struct dmi_device *from) { return NULL; }

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: include/linux/dmi.h:72:
+static struct dmi_device * dmi_find_device(int type, const char *name,
+	struct dmi_device *from) { return NULL; }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160946.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 6 warnings, 9 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160946.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
