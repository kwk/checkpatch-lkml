WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: fs/9p/9p.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#43: FILE: fs/9p/9p.h:2:
+ * linux/fs/9p/9p.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#61: FILE: fs/9p/9p.h:20:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#62: FILE: fs/9p/9p.h:21:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:CAMELCASE: Avoid CamelCase: <Tversion>
#175: FILE: fs/9p/9p.h:134:
+struct Tversion {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Rversion>
#180: FILE: fs/9p/9p.h:139:
+struct Rversion {

CHECK:CAMELCASE: Avoid CamelCase: <Tauth>
#185: FILE: fs/9p/9p.h:144:
+struct Tauth {

CHECK:CAMELCASE: Avoid CamelCase: <Rauth>
#191: FILE: fs/9p/9p.h:150:
+struct Rauth {

CHECK:CAMELCASE: Avoid CamelCase: <Rerror>
#195: FILE: fs/9p/9p.h:154:
+struct Rerror {

CHECK:CAMELCASE: Avoid CamelCase: <Tflush>
#200: FILE: fs/9p/9p.h:159:
+struct Tflush {

CHECK:CAMELCASE: Avoid CamelCase: <Rflush>
#204: FILE: fs/9p/9p.h:163:
+struct Rflush {

CHECK:CAMELCASE: Avoid CamelCase: <Tattach>
#207: FILE: fs/9p/9p.h:166:
+struct Tattach {

CHECK:CAMELCASE: Avoid CamelCase: <Rattach>
#214: FILE: fs/9p/9p.h:173:
+struct Rattach {

CHECK:CAMELCASE: Avoid CamelCase: <Twalk>
#218: FILE: fs/9p/9p.h:177:
+struct Twalk {

CHECK:CAMELCASE: Avoid CamelCase: <Rwalk>
#225: FILE: fs/9p/9p.h:184:
+struct Rwalk {

CHECK:CAMELCASE: Avoid CamelCase: <Topen>
#230: FILE: fs/9p/9p.h:189:
+struct Topen {

CHECK:CAMELCASE: Avoid CamelCase: <Ropen>
#235: FILE: fs/9p/9p.h:194:
+struct Ropen {

CHECK:CAMELCASE: Avoid CamelCase: <Tcreate>
#240: FILE: fs/9p/9p.h:199:
+struct Tcreate {

CHECK:CAMELCASE: Avoid CamelCase: <Rcreate>
#247: FILE: fs/9p/9p.h:206:
+struct Rcreate {

CHECK:CAMELCASE: Avoid CamelCase: <Tread>
#252: FILE: fs/9p/9p.h:211:
+struct Tread {

CHECK:CAMELCASE: Avoid CamelCase: <Rread>
#258: FILE: fs/9p/9p.h:217:
+struct Rread {

CHECK:CAMELCASE: Avoid CamelCase: <Twrite>
#263: FILE: fs/9p/9p.h:222:
+struct Twrite {

CHECK:CAMELCASE: Avoid CamelCase: <Rwrite>
#270: FILE: fs/9p/9p.h:229:
+struct Rwrite {

CHECK:CAMELCASE: Avoid CamelCase: <Tclunk>
#274: FILE: fs/9p/9p.h:233:
+struct Tclunk {

CHECK:CAMELCASE: Avoid CamelCase: <Rclunk>
#278: FILE: fs/9p/9p.h:237:
+struct Rclunk {

CHECK:CAMELCASE: Avoid CamelCase: <Tremove>
#281: FILE: fs/9p/9p.h:240:
+struct Tremove {

CHECK:CAMELCASE: Avoid CamelCase: <Rremove>
#285: FILE: fs/9p/9p.h:244:
+struct Rremove {

CHECK:CAMELCASE: Avoid CamelCase: <Tstat>
#288: FILE: fs/9p/9p.h:247:
+struct Tstat {

CHECK:CAMELCASE: Avoid CamelCase: <Rstat>
#292: FILE: fs/9p/9p.h:251:
+struct Rstat {

CHECK:CAMELCASE: Avoid CamelCase: <Twstat>
#296: FILE: fs/9p/9p.h:255:
+struct Twstat {

CHECK:CAMELCASE: Avoid CamelCase: <Rwstat>
#301: FILE: fs/9p/9p.h:260:
+struct Rwstat {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#305: FILE: fs/9p/9p.h:264:
+/*
+  * fcall is the primary packet structure

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fcall' - possible side-effects?
#345: FILE: fs/9p/9p.h:304:
+#define FCALL_ERROR(fcall) (fcall ? fcall->params.rerror.error : "")

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#348: FILE: fs/9p/9p.h:307:
+		   char *version, struct v9fs_fcall **rcall);
 		                                      ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#351: FILE: fs/9p/9p.h:310:
+		  u32 fid, u32 afid, struct v9fs_fcall **rcall);
 		                                         ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#354: FILE: fs/9p/9p.h:313:
+		 struct v9fs_fcall **rcall);
 		                     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#359: FILE: fs/9p/9p.h:318:
+		struct v9fs_fcall **rcall);
 		                    ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#362: FILE: fs/9p/9p.h:321:
+		 struct v9fs_stat *stat, struct v9fs_fcall **rcall);
 		                                             ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#365: FILE: fs/9p/9p.h:324:
+		char *name, struct v9fs_fcall **rcall);
 		                                ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#368: FILE: fs/9p/9p.h:327:
+		struct v9fs_fcall **rcall);
 		                    ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#371: FILE: fs/9p/9p.h:330:
+		  struct v9fs_fcall **rcall);
 		                      ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#374: FILE: fs/9p/9p.h:333:
+		  u32 perm, u8 mode, struct v9fs_fcall **rcall);
 		                                         ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#377: FILE: fs/9p/9p.h:336:
+		u64 offset, u32 count, struct v9fs_fcall **rcall);
 		                                           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#380: FILE: fs/9p/9p.h:339:
+		 u32 count, void *data, struct v9fs_fcall **rcall);
 		                                            ^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#382: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: fs/9p/9p.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#387: FILE: fs/9p/9p.c:2:
+ *  linux/fs/9p/9p.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#405: FILE: fs/9p/9p.c:20:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#406: FILE: fs/9p/9p.c:21:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:TYPO_SPELLING: 'attatch' may be misspelled - perhaps 'attach'?
#449: FILE: fs/9p/9p.c:64:
+ * @fid: mount fid to attatch to root node
                       ^^^^^^^

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#683: FILE: fs/9p/9p.c:298:
+		(long unsigned int)offset, count);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#683: FILE: fs/9p/9p.c:298:
+		(long unsigned int)offset, count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#748: FILE: fs/9p/conv.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#749: FILE: fs/9p/conv.h:2:
+ * linux/fs/9p/conv.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#767: FILE: fs/9p/conv.h:20:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#768: FILE: fs/9p/conv.h:21:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_session_info *' should also have an identifier name
#772: FILE: fs/9p/conv.h:25:
+int v9fs_deserialize_stat(struct v9fs_session_info *, void *buf,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_session_info *' should also have an identifier name
#774: FILE: fs/9p/conv.h:27:
+int v9fs_serialize_fcall(struct v9fs_session_info *, struct v9fs_fcall *tcall,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_session_info *' should also have an identifier name
#776: FILE: fs/9p/conv.h:29:
+int v9fs_deserialize_fcall(struct v9fs_session_info *, u32 msglen,

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#777: FILE: fs/9p/conv.h:30:
+			   void *buf, u32 buflen, struct v9fs_fcall *rcall,
 			                                             ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#787: FILE: fs/9p/conv.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#788: FILE: fs/9p/conv.c:2:
+ * linux/fs/9p/conv.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#806: FILE: fs/9p/conv.c:20:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#807: FILE: fs/9p/conv.c:21:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: fs/9p/conv.c:37:
+ * Buffer to help with string parsing $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#833: FILE: fs/9p/conv.c:47:
+	buf->sp = buf->p = data;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#842: FILE: fs/9p/conv.c:56:
+#define buf_check_sizep(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return NULL; \
+	} \
+

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#842: FILE: fs/9p/conv.c:56:
+#define buf_check_sizep(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return NULL; \
+	} \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#842: FILE: fs/9p/conv.c:56:
+#define buf_check_sizep(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return NULL; \
+	} \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#842: FILE: fs/9p/conv.c:56:
+#define buf_check_sizep(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return NULL; \
+	} \
+

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#842: FILE: fs/9p/conv.c:56:
+#define buf_check_sizep(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return NULL; \
+	} \
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#843: FILE: fs/9p/conv.c:57:
+	if (buf->p+len > buf->ep) { \
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#851: FILE: fs/9p/conv.c:65:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#852: FILE: fs/9p/conv.c:66:
+#define buf_check_size(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return 0; \
+	} \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#852: FILE: fs/9p/conv.c:66:
+#define buf_check_size(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return 0; \
+	} \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#852: FILE: fs/9p/conv.c:66:
+#define buf_check_size(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return 0; \
+	} \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#852: FILE: fs/9p/conv.c:66:
+#define buf_check_size(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return 0; \
+	} \
+

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#852: FILE: fs/9p/conv.c:66:
+#define buf_check_size(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return 0; \
+	} \
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#853: FILE: fs/9p/conv.c:67:
+	if (buf->p+len > buf->ep) { \
 	          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#861: FILE: fs/9p/conv.c:75:
+#define buf_check_sizev(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return; \
+	} \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#861: FILE: fs/9p/conv.c:75:
+#define buf_check_sizev(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return; \
+	} \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'buf' may be better as '(buf)' to avoid precedence issues
#861: FILE: fs/9p/conv.c:75:
+#define buf_check_sizev(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return; \
+	} \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#861: FILE: fs/9p/conv.c:75:
+#define buf_check_sizev(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return; \
+	} \
+

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#861: FILE: fs/9p/conv.c:75:
+#define buf_check_sizev(buf, len) \
+	if (buf->p+len > buf->ep) { \
+		if (buf->p < buf->ep) { \
+			eprintk(KERN_ERR, "buffer overflow\n"); \
+			buf->p = buf->ep + 1; \
+		} \
+		return; \
+	} \
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#862: FILE: fs/9p/conv.c:76:
+	if (buf->p+len > buf->ep) { \
 	          ^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'buf->p[3]'
#977: FILE: fs/9p/conv.c:191:
+	    buf->p[0] | (buf->p[1] << 8) | (buf->p[2] << 16) | (buf->
+								p[3] << 24);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:SPACING: No space is necessary after a cast
#989: FILE: fs/9p/conv.c:203:
+	ret = (u64) buf->p[0] | ((u64) buf->p[1] << 8) |

CHECK:SPACING: No space is necessary after a cast
#990: FILE: fs/9p/conv.c:204:
+	    ((u64) buf->p[2] << 16) | ((u64) buf->p[3] << 24) |

CHECK:SPACING: No space is necessary after a cast
#991: FILE: fs/9p/conv.c:205:
+	    ((u64) buf->p[4] << 32) | ((u64) buf->p[5] << 40) |

CHECK:SPACING: No space is necessary after a cast
#992: FILE: fs/9p/conv.c:206:
+	    ((u64) buf->p[6] << 48) | ((u64) buf->p[7] << 56);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1002: FILE: fs/9p/conv.c:216:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1004: FILE: fs/9p/conv.c:218:
+	u16 len = buf_get_int16(buf);
+	buf_check_size(buf, len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stat"
#1068: FILE: fs/9p/conv.c:282:
+	if (stat == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'v9fs_size_stat', this function's name, in a string
#1069: FILE: fs/9p/conv.c:283:
+		eprintk(KERN_ERR, "v9fs_size_stat: got a NULL stat pointer\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#1148: FILE: fs/9p/conv.c:362:
+ * deserialize_stat - safely decode a recieved metadata (stat) structure
                                       ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1150: FILE: fs/9p/conv.c:364:
+ * @bufp: buffer to deserialize $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1160: FILE: fs/9p/conv.c:374:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1192: FILE: fs/9p/conv.c:406:
+ * @bufp: buffer to deserialize $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1205: FILE: fs/9p/conv.c:419:
+		int n = deserialize_stat(v9ses, bufp, ret, dbufp);
+		if (n <= 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: fs/9p/conv.c:429:
+ * @buf: buffer to deserialize $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1218: FILE: fs/9p/conv.c:432:
+ * @statlen: length of destination metadata structure $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1301: FILE: fs/9p/conv.c:515:
+ * @data: buffer to serialize fcall into $

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1410: FILE: fs/9p/conv.c:624:
+ * @msgsize: size of rcall message
                      ^^^^^

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#1411: FILE: fs/9p/conv.c:625:
+ * @buf: recieved buffer
          ^^^^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1413: FILE: fs/9p/conv.c:627:
+ * @rcall: fcall structure to populate
     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1420: FILE: fs/9p/conv.c:634:
+		       void *buf, u32 buflen, struct v9fs_fcall *rcall,
 		                                                 ^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1423: FILE: fs/9p/conv.c:637:
+{
+

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1431: FILE: fs/9p/conv.c:645:
+	buf_init(dbufp, (char *)rcall + sizeof(struct v9fs_fcall),
 	                        ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1458: FILE: fs/9p/conv.c:672:
+		rcall->params.rwalk.wqids = buf_alloc(bufp,
+		      rcall->params.rwalk.nwqid * sizeof(struct v9fs_qid));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1484: FILE: fs/9p/conv.c:698:
+		rcall->params.rread.data = buf_get_datab(bufp, dbufp,
+			rcall->params.rread.count);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 41 warnings, 52 checks, 1455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178014.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
