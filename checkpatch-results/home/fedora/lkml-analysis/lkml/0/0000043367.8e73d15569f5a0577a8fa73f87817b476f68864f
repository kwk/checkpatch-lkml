WARNING:REPEATED_WORD: Possible repeated word: 'that'
#42: 
1. There is user space source code out that that used these macros

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#139: FILE: include/asm-generic/unistd.h:1:
+#ifndef __ASM_GENERIC_UNISTD_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#158: FILE: include/asm-generic/unistd.h:20:
+#define _syscall0(type, name)						\
+type name(void)								\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name);				\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#165: FILE: include/asm-generic/unistd.h:27:
+#define _syscall1(type, name, type1, arg1)				\
+type name(type1 arg1)							\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1);			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#172: FILE: include/asm-generic/unistd.h:34:
+#define _syscall2(type, name, type1, arg1, type2, arg2)			\
+type name(type1 arg1, type2 arg2)					\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#172: FILE: include/asm-generic/unistd.h:34:
+#define _syscall2(type, name, type1, arg1, type2, arg2)			\
+type name(type1 arg1, type2 arg2)					\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#179: FILE: include/asm-generic/unistd.h:41:
+#define _syscall3(type, name, type1, arg1, type2, arg2, type3, arg3)	\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#179: FILE: include/asm-generic/unistd.h:41:
+#define _syscall3(type, name, type1, arg1, type2, arg2, type3, arg3)	\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#179: FILE: include/asm-generic/unistd.h:41:
+#define _syscall3(type, name, type1, arg1, type2, arg2, type3, arg3)	\
+type name(type1 arg1, type2 arg2, type3 arg3)				\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#186: FILE: include/asm-generic/unistd.h:48:
+#define _syscall4(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3, arg4)	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#186: FILE: include/asm-generic/unistd.h:48:
+#define _syscall4(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3, arg4)	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#186: FILE: include/asm-generic/unistd.h:48:
+#define _syscall4(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3, arg4)	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#186: FILE: include/asm-generic/unistd.h:48:
+#define _syscall4(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4)				\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4)		\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3, arg4)	\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#194: FILE: include/asm-generic/unistd.h:56:
+#define _syscall5(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#194: FILE: include/asm-generic/unistd.h:56:
+#define _syscall5(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#194: FILE: include/asm-generic/unistd.h:56:
+#define _syscall5(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#194: FILE: include/asm-generic/unistd.h:56:
+#define _syscall5(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#194: FILE: include/asm-generic/unistd.h:56:
+#define _syscall5(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#203: FILE: include/asm-generic/unistd.h:65:
+#define _syscall6(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5, type6, arg6)	\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+							  type6 arg6)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#203: FILE: include/asm-generic/unistd.h:65:
+#define _syscall6(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5, type6, arg6)	\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+							  type6 arg6)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#203: FILE: include/asm-generic/unistd.h:65:
+#define _syscall6(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5, type6, arg6)	\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+							  type6 arg6)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#203: FILE: include/asm-generic/unistd.h:65:
+#define _syscall6(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5, type6, arg6)	\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+							  type6 arg6)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#203: FILE: include/asm-generic/unistd.h:65:
+#define _syscall6(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5, type6, arg6)	\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+							  type6 arg6)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5, arg6);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg6' - possible side-effects?
#203: FILE: include/asm-generic/unistd.h:65:
+#define _syscall6(type, name, type1, arg1, type2, arg2, type3, arg3,	\
+			      type4, arg4, type5, arg5, type6, arg6)	\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5,	\
+							  type6 arg6)	\
+{									\
+	_syscallX();							\
+	return (type)syscall(__NR_ ## name, arg1, arg2, arg3,		\
+					    arg4, arg5, arg6);		\
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000043367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 2 warnings, 21 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000043367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
