WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -ruN 834-utility-old/kernel/power/utility.c 834-utility-new/kernel/power/utility.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: kernel/power/utility.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#43: FILE: kernel/power/utility.c:2:
+ * kernel/power/utility.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: kernel/power/utility.c:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#57: FILE: kernel/power/utility.c:16:
+#include <asm/string.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#61: FILE: kernel/power/utility.c:20:
+extern int suspend_snprintf(char * buffer, int buffer_size, const char *fmt, ...);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: kernel/power/utility.c:21:
+extern struct proc_dir_entry * find_proc_dir_entry(const char *name, struct proc_dir_entry *parent);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#62: FILE: kernel/power/utility.c:21:
+extern struct proc_dir_entry * find_proc_dir_entry(const char *name, struct proc_dir_entry *parent);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#67: FILE: kernel/power/utility.c:26:
+ * Functionality    : Print a string with parameters to a buffer of a $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#72: FILE: kernel/power/utility.c:31:
+int suspend_snprintf(char * buffer, int buffer_size, const char *fmt, ...)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#77: FILE: kernel/power/utility.c:36:
+	if (!buffer_size) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#85: FILE: kernel/power/utility.c:44:
+	if (result > buffer_size) {
+		return buffer_size;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: kernel/power/utility.c:51:
+/* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#100: FILE: kernel/power/utility.c:59:
+struct proc_dir_entry * find_proc_dir_entry(const char *name, struct proc_dir_entry *parent)

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#106: FILE: kernel/power/utility.c:65:
+	for (p = &parent->subdir; *p; p=&(*p)->next ) {
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#106: FILE: kernel/power/utility.c:65:
+	for (p = &parent->subdir; *p; p=&(*p)->next ) {
 	                                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#106: FILE: kernel/power/utility.c:65:
+	for (p = &parent->subdir; *p; p=&(*p)->next ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#107: FILE: kernel/power/utility.c:66:
+		if (proc_match(len, name, *p)) {
+			return *p;
+		}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: kernel/power/utility.c:85:
+void clear_map(unsigned long * pagemap)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: kernel/power/utility.c:88:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: kernel/power/utility.c:96:
+ * ^I^Iint:^I^I^IWhether to set nosave flags for the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: kernel/power/utility.c:97:
+ * ^I^I^I^I^Inewly allocated pages.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#140: FILE: kernel/power/utility.c:99:
+ * ^I^Ithe Nosave bitmap here.$

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#142: FILE: kernel/power/utility.c:101:
+int allocate_local_pageflags(unsigned long ** pagemap, int setnosave)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: kernel/power/utility.c:103:
+	unsigned long * check;

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: kernel/power/utility.c:105:
+	int i;
+	if (*pagemap) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#147: FILE: kernel/power/utility.c:106:
+		printk("Error. Local pageflags map already allocated.\n");

CHECK:SPACING: No space is necessary after a cast
#150: FILE: kernel/power/utility.c:109:
+		check = (unsigned long *) __get_free_pages(GFP_ATOMIC,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: kernel/power/utility.c:112:
+			printk("Error. Unable to allocate memory for local page flags.");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: kernel/power/utility.c:118:
+^I^I^Istruct page * firstpage = $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#159: FILE: kernel/power/utility.c:118:
+			struct page * firstpage = 

CHECK:SPACING: No space is necessary after a cast
#160: FILE: kernel/power/utility.c:119:
+				virt_to_page((unsigned long) check);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#174: FILE: kernel/power/utility.c:133:
+int free_local_pageflags(unsigned long ** pagemap)

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: kernel/power/utility.c:136:
+	int i;
+	if (!*pagemap)

CHECK:BRACES: braces {} should be used on all arms of this statement
#177: FILE: kernel/power/utility.c:136:
+	if (!*pagemap)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#179: FILE: kernel/power/utility.c:138:
+		return 1;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#179: FILE: kernel/power/utility.c:138:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: kernel/power/utility.c:139:
+		struct page * firstpage =

CHECK:SPACING: No space is necessary after a cast
#181: FILE: kernel/power/utility.c:140:
+			virt_to_page((unsigned long) *pagemap);

CHECK:SPACING: No space is necessary after a cast
#184: FILE: kernel/power/utility.c:143:
+		free_pages((unsigned long) *pagemap, BITMAP_ORDER);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#190: FILE: kernel/power/utility.c:149:
+EXPORT_SYMBOL(suspend_snprintf);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#191: FILE: kernel/power/utility.c:150:
+EXPORT_SYMBOL(allocate_local_pageflags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#192: FILE: kernel/power/utility.c:151:
+EXPORT_SYMBOL(free_local_pageflags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#193: FILE: kernel/power/utility.c:152:
+EXPORT_SYMBOL(find_proc_dir_entry);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 20 warnings, 6 checks, 152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
