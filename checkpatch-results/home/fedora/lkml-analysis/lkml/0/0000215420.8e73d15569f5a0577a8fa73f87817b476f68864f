WARNING:TYPO_SPELLING: 'concensus' may be misspelled - perhaps 'consensus'?
#32: 
> The closest thing to concensus I've seen yet was a new rlimit for
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#67: FILE: include/asm-i386/resource.h:22:
+#define RLIMIT_NICE	13		/* max nice prio allowed to raise to
+					   0-39 for nice level 19 .. -20 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#67: FILE: include/asm-i386/resource.h:22:
+					   0-39 for nice level 19 .. -20 */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/sched.h:770:
+extern unsigned long nice_to_rlimit_nice(const int nice);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nice' may be better as '(nice)' to avoid precedence issues
#105: FILE: kernel/sched.c:74:
+#define NICE_TO_RLIMIT_NICE(nice)	(19 - nice)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: kernel/sched.c:3160:
+^Iif (increment < 0 && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: kernel/sched.c:3161:
+	if (increment < 0 && 
+		NICE_TO_RLIMIT_NICE(nice) >

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: kernel/sched.c:3272:
+^I    param->sched_priority > p->signal->rlim[RLIMIT_RTPRIO].rlim_cur && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: kernel/sys.c:229:
+	if (niceval < task_nice(p) &&
+		nice_to_rlimit_nice(niceval) >

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: modules/pam_limits/pam_limits.c:301:
+    else if (strcmp(lim_item, "rt_priority") == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: modules/pam_limits/pam_limits.c:303:
+    else if (strcmp(lim_item, "nice") == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: modules/pam_limits/pam_limits.c:372:
+        case RLIMIT_NICE:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: modules/pam_limits/pam_limits.c:372:
+        case RLIMIT_NICE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: modules/pam_limits/pam_limits.c:373:
+            limit_value = 19 - limit_value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: modules/pam_limits/pam_limits.c:373:
+            limit_value = 19 - limit_value;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: modules/pam_limits/pam_limits.c:374:
+            if (limit_value > 39)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: modules/pam_limits/pam_limits.c:374:
+            if (limit_value > 39)$

WARNING:TABSTOP: Statements should start on a tabstop
#216: FILE: modules/pam_limits/pam_limits.c:376:
+	    if (limit_value < 0);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#216: FILE: modules/pam_limits/pam_limits.c:376:
+	    if (limit_value < 0);
+		limit_value = 0;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#216: FILE: modules/pam_limits/pam_limits.c:376:
+	    if (limit_value < 0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: modules/pam_limits/pam_limits.c:378:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: modules/pam_limits/pam_limits.c:378:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: modules/pam_limits/pam_limits.c:379:
+        case RLIMIT_RTPRIO:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: modules/pam_limits/pam_limits.c:379:
+        case RLIMIT_RTPRIO:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: modules/pam_limits/pam_limits.c:380:
+            if (limit_value > 99)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: modules/pam_limits/pam_limits.c:380:
+            if (limit_value > 99)$

WARNING:TABSTOP: Statements should start on a tabstop
#222: FILE: modules/pam_limits/pam_limits.c:382:
+	    if (limit_value < 0);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#222: FILE: modules/pam_limits/pam_limits.c:382:
+	    if (limit_value < 0);
+		limit_value = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#222: FILE: modules/pam_limits/pam_limits.c:382:
+	    if (limit_value < 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: modules/pam_limits/pam_limits.c:384:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: modules/pam_limits/pam_limits.c:384:
+            break;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215420.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 16 warnings, 4 checks, 138 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215420.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
