ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: arch/um/Makefile-x86_64:23:
+$(SYS_DIR)/thread.h: $(SYS_UTIL_DIR)/mk_thread $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: arch/um/include/sysdep-x86_64/checksum.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: arch/um/include/sysdep-x86_64/checksum.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: arch/um/include/sysdep-x86_64/checksum.h:12:
+extern unsigned int csum_partial_copy_from(const char *src, char *dst, int len,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: arch/um/include/sysdep-x86_64/checksum.h:14:
+extern unsigned csum_partial(const unsigned char *buff, unsigned len, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#122: FILE: arch/um/include/sysdep-x86_64/checksum.h:14:
+extern unsigned csum_partial(const unsigned char *buff, unsigned len, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#122: FILE: arch/um/include/sysdep-x86_64/checksum.h:14:
+extern unsigned csum_partial(const unsigned char *buff, unsigned len, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: arch/um/include/sysdep-x86_64/checksum.h:14:
+extern unsigned csum_partial(const unsigned char *buff, unsigned len, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: arch/um/include/sysdep-x86_64/checksum.h:15:
+                             unsigned sum);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/um/include/sysdep-x86_64/checksum.h:15:
+                             unsigned sum);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: arch/um/include/sysdep-x86_64/checksum.h:15:
+                             unsigned sum);

WARNING:INLINE: plain inline is preferred over __inline__
#133: FILE: arch/um/include/sysdep-x86_64/checksum.h:25:
+static __inline__

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#138: FILE: arch/um/include/sysdep-x86_64/checksum.h:30:
+	return(csum_partial(dst, len, sum));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:INLINE: plain inline is preferred over __inline__
#141: FILE: arch/um/include/sysdep-x86_64/checksum.h:33:
+static __inline__

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: arch/um/include/sysdep-x86_64/checksum.h:40:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: arch/um/include/sysdep-x86_64/checksum.h:43:
+ * $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#158: FILE: arch/um/include/sysdep-x86_64/checksum.h:50:
+	__asm__(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: arch/um/include/sysdep-x86_64/checksum.h:59:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: arch/um/include/sysdep-x86_64/checksum.h:65:
+ * @sum: initial sum to be added in (32bit unfolded) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/um/include/sysdep-x86_64/checksum.h:66:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: arch/um/include/sysdep-x86_64/checksum.h:67:
+ * Returns the pseudo header checksum the input data. Result is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: arch/um/include/sysdep-x86_64/checksum.h:70:
+static inline unsigned long $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#179: FILE: arch/um/include/sysdep-x86_64/checksum.h:71:
+csum_tcpudp_nofold(unsigned saddr, unsigned daddr, unsigned short len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#179: FILE: arch/um/include/sysdep-x86_64/checksum.h:71:
+csum_tcpudp_nofold(unsigned saddr, unsigned daddr, unsigned short len,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: arch/um/include/sysdep-x86_64/checksum.h:72:
+^I^I   unsigned short proto, unsigned int sum) $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#187: FILE: arch/um/include/sysdep-x86_64/checksum.h:79:
+	    : "g" (daddr), "g" (saddr), "g" ((ntohs(len)<<16)+proto*256), "0" (sum));
 	                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: arch/um/include/sysdep-x86_64/checksum.h:79:
+	    : "g" (daddr), "g" (saddr), "g" ((ntohs(len)<<16)+proto*256), "0" (sum));
 	                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#187: FILE: arch/um/include/sysdep-x86_64/checksum.h:79:
+	    : "g" (daddr), "g" (saddr), "g" ((ntohs(len)<<16)+proto*256), "0" (sum));
 	                                                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: arch/um/include/sysdep-x86_64/checksum.h:80:
+    return sum;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: arch/um/include/sysdep-x86_64/checksum.h:93:
+	return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,proto,sum));
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: arch/um/include/sysdep-x86_64/checksum.h:93:
+	return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,proto,sum));
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: arch/um/include/sysdep-x86_64/checksum.h:93:
+	return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,proto,sum));
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: arch/um/include/sysdep-x86_64/checksum.h:93:
+	return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,proto,sum));
 	                                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: arch/um/include/sysdep-x86_64/checksum.h:100:
+ */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: arch/um/include/sysdep-x86_64/checksum.h:101:
+static inline unsigned short ip_fast_csum(unsigned char *iph, unsigned int ihl) $

ERROR:SPACING: space prohibited after that open parenthesis '('
#213: FILE: arch/um/include/sysdep-x86_64/checksum.h:105:
+	asm(	"  movl (%1), %0\n"

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#231: FILE: arch/um/include/sysdep-x86_64/checksum.h:123:
+	/* Since the input registers which are loaded with iph and ipl
+	   are modified, we must also specify them as outputs, or gcc

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#232: FILE: arch/um/include/sysdep-x86_64/checksum.h:124:
+	   will assume they contain their original values. */

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#236: FILE: arch/um/include/sysdep-x86_64/checksum.h:128:
+	return(sum);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#239: FILE: arch/um/include/sysdep-x86_64/checksum.h:131:
+static inline unsigned add32_with_carry(unsigned a, unsigned b)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#239: FILE: arch/um/include/sysdep-x86_64/checksum.h:131:
+static inline unsigned add32_with_carry(unsigned a, unsigned b)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#239: FILE: arch/um/include/sysdep-x86_64/checksum.h:131:
+static inline unsigned add32_with_carry(unsigned a, unsigned b)

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: arch/um/include/sysdep-x86_64/checksum.h:133:
+        asm("addl %2,%0\n\t"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/um/include/sysdep-x86_64/checksum.h:133:
+        asm("addl %2,%0\n\t"$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: arch/um/include/sysdep-x86_64/checksum.h:134:
+            "adcl $0,%0" $

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: arch/um/include/sysdep-x86_64/checksum.h:134:
+            "adcl $0,%0" $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: arch/um/include/sysdep-x86_64/checksum.h:134:
+            "adcl $0,%0" $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/um/include/sysdep-x86_64/checksum.h:135:
+            : "=r" (a) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: arch/um/include/sysdep-x86_64/checksum.h:135:
+            : "=r" (a) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: arch/um/include/sysdep-x86_64/checksum.h:135:
+            : "=r" (a) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: arch/um/include/sysdep-x86_64/checksum.h:136:
+            : "0" (a), "r" (b));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: arch/um/include/sysdep-x86_64/checksum.h:136:
+            : "0" (a), "r" (b));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: arch/um/include/sysdep-x86_64/checksum.h:137:
+        return a;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: arch/um/include/sysdep-x86_64/checksum.h:137:
+        return a;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#265: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:1:
+/*

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#279: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:15:
+#define SC_SET_SYSCALL_RETURN(sc, result) SC_RAX(sc) = (result)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#294: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:30:
+#define SC_START_SYSCALL(sc) do SC_RAX(sc) = -ENOSYS; while(0)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:SPACING: space required before the open parenthesis '('
#294: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:30:
+#define SC_START_SYSCALL(sc) do SC_RAX(sc) = -ENOSYS; while(0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#294: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:30:
+#define SC_START_SYSCALL(sc) do SC_RAX(sc) = -ENOSYS; while(0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:35:
+extern unsigned long *sc_sigmask(void *sc_ptr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: arch/um/sys-x86_64/Makefile:33:
+$(SYMLINKS): $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#378: FILE: arch/um/sys-x86_64/bugs.c:1:
+/*

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#401: FILE: arch/um/sys-x86_64/bugs.c:24:
+	return(0);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#408: FILE: arch/um/sys-x86_64/bugs.c:31:
+int host_has_xmm = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required before the open brace '{'
#420: FILE: arch/um/sys-x86_64/bugs.c:43:
+		if(n != sizeof(*ptr)){

ERROR:SPACING: space required before the open parenthesis '('
#420: FILE: arch/um/sys-x86_64/bugs.c:43:
+		if(n != sizeof(*ptr)){

ERROR:SPACING: space required before the open parenthesis '('
#421: FILE: arch/um/sys-x86_64/bugs.c:44:
+			if(n == 0) return(0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#421: FILE: arch/um/sys-x86_64/bugs.c:44:
+			if(n == 0) return(0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#422: FILE: arch/um/sys-x86_64/bugs.c:45:
+			printk("Reading /proc/cpuinfo failed, err = %d\n", -n);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: arch/um/sys-x86_64/bugs.c:46:
+^I^I^Iif(n < 0) $

ERROR:SPACING: space required before the open parenthesis '('
#423: FILE: arch/um/sys-x86_64/bugs.c:46:
+			if(n < 0) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: arch/um/sys-x86_64/bugs.c:48:
+^I^I^Ielse $

ERROR:SPACING: space required before the open parenthesis '('
#428: FILE: arch/um/sys-x86_64/bugs.c:51:
+	} while((c != '\n') && (c != stop) && (ptr < end));

ERROR:SPACING: space required before the open brace '{'
#430: FILE: arch/um/sys-x86_64/bugs.c:53:
+	if(ptr == end){

ERROR:SPACING: space required before the open parenthesis '('
#430: FILE: arch/um/sys-x86_64/bugs.c:53:
+	if(ptr == end){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#431: FILE: arch/um/sys-x86_64/bugs.c:54:
+		printk("Failed to find '%c' in /proc/cpuinfo\n", stop);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#435: FILE: arch/um/sys-x86_64/bugs.c:58:
+	return(c);

ERROR:SPACING: space required before the open brace '{'
#444: FILE: arch/um/sys-x86_64/bugs.c:67:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: arch/um/sys-x86_64/bugs.c:67:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#446: FILE: arch/um/sys-x86_64/bugs.c:69:
+		if(c <= 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#446: FILE: arch/um/sys-x86_64/bugs.c:69:
+		if(c <= 0)
[...]
+		else if(c != ':'){
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#448: FILE: arch/um/sys-x86_64/bugs.c:71:
+		else if(c != ':'){

ERROR:SPACING: space required before the open parenthesis '('
#448: FILE: arch/um/sys-x86_64/bugs.c:71:
+		else if(c != ':'){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#449: FILE: arch/um/sys-x86_64/bugs.c:72:
+			printk("Failed to find ':' in /proc/cpuinfo\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#450: FILE: arch/um/sys-x86_64/bugs.c:73:
+			return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: arch/um/sys-x86_64/bugs.c:76:
+^I^Iif(!strncmp(scratch, key, strlen(key))) $

ERROR:SPACING: space required before the open parenthesis '('
#453: FILE: arch/um/sys-x86_64/bugs.c:76:
+		if(!strncmp(scratch, key, strlen(key))) 

ERROR:SPACING: space required before the open brace '{'
#458: FILE: arch/um/sys-x86_64/bugs.c:81:
+			if(n != sizeof(c)){

ERROR:SPACING: space required before the open parenthesis '('
#458: FILE: arch/um/sys-x86_64/bugs.c:81:
+			if(n != sizeof(c)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#459: FILE: arch/um/sys-x86_64/bugs.c:82:
+				printk("Failed to find newline in "

WARNING:SPLIT_STRING: quoted string split across lines
#460: FILE: arch/um/sys-x86_64/bugs.c:83:
+				printk("Failed to find newline in "
+				       "/proc/cpuinfo, err = %d\n", -n);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#461: FILE: arch/um/sys-x86_64/bugs.c:84:
+				return(0);

ERROR:SPACING: space required before the open parenthesis '('
#463: FILE: arch/um/sys-x86_64/bugs.c:86:
+		} while(c != '\n');

ERROR:SPACING: space required before the open brace '{'
#473: FILE: arch/um/sys-x86_64/bugs.c:96:
+	if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#473: FILE: arch/um/sys-x86_64/bugs.c:96:
+	if(fd < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: arch/um/sys-x86_64/bugs.c:97:
+		printk("Couldn't open /proc/cpuinfo, err = %d\n", -fd);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#475: FILE: arch/um/sys-x86_64/bugs.c:98:
+		return(0);

ERROR:SPACING: space required before the open brace '{'
#478: FILE: arch/um/sys-x86_64/bugs.c:101:
+	if(!find_cpuinfo_line(fd, what, buf, len)){

ERROR:SPACING: space required before the open parenthesis '('
#478: FILE: arch/um/sys-x86_64/bugs.c:101:
+	if(!find_cpuinfo_line(fd, what, buf, len)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: arch/um/sys-x86_64/bugs.c:102:
+		printk("Couldn't find '%s' line in /proc/cpuinfo\n", what);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#488: FILE: arch/um/sys-x86_64/bugs.c:111:
+	return(ret);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#505: FILE: arch/um/sys-x86_64/fault.c:1:
+/*

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#516: FILE: arch/um/sys-x86_64/fault.c:12:
+	return(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#533: FILE: arch/um/sys-x86_64/mem.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: arch/um/sys-x86_64/mem.c:11:
+unsigned long vm_stack_flags = __VM_STACK_FLAGS; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: arch/um/sys-x86_64/mem.c:12:
+unsigned long vm_stack_flags32 = __VM_STACK_FLAGS; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: arch/um/sys-x86_64/mem.c:13:
+unsigned long vm_data_default_flags = __VM_DATA_DEFAULT_FLAGS; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: arch/um/sys-x86_64/mem.c:14:
+unsigned long vm_data_default_flags32 = __VM_DATA_DEFAULT_FLAGS; $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#563: FILE: arch/um/sys-x86_64/sigcontext.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: arch/um/sys-x86_64/sigcontext.c:14:
+        struct sigcontext *to = to_ptr, *from = from_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: arch/um/sys-x86_64/sigcontext.c:14:
+        struct sigcontext *to = to_ptr, *from = from_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/um/sys-x86_64/sigcontext.c:15:
+        int size = sizeof(*to); /* + sizeof(struct _fpstate); */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: arch/um/sys-x86_64/sigcontext.c:15:
+        int size = sizeof(*to); /* + sizeof(struct _fpstate); */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: arch/um/sys-x86_64/sigcontext.c:17:
+        memcpy(to, from, size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: arch/um/sys-x86_64/sigcontext.c:17:
+        memcpy(to, from, size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: arch/um/sys-x86_64/sigcontext.c:18:
+        if(from->fpstate != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/um/sys-x86_64/sigcontext.c:18:
+        if(from->fpstate != NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#580: FILE: arch/um/sys-x86_64/sigcontext.c:18:
+        if(from->fpstate != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "from->fpstate"
#580: FILE: arch/um/sys-x86_64/sigcontext.c:18:
+        if(from->fpstate != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#581: FILE: arch/um/sys-x86_64/sigcontext.c:19:
+		to->fpstate = (struct _fpstate *) (to + 1);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#590: FILE: arch/um/sys-x86_64/sigcontext.c:28:
+	return(&sc->oldmask);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#607: FILE: arch/um/sys-x86_64/signal.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#607: FILE: arch/um/sys-x86_64/signal.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: arch/um/sys-x86_64/signal.c:23:
+static int copy_sc_from_user_skas(struct pt_regs *regs, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#630: FILE: arch/um/sys-x86_64/signal.c:24:
+                                 struct sigcontext *from)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: arch/um/sys-x86_64/signal.c:24:
+static int copy_sc_from_user_skas(struct pt_regs *regs, 
+                                 struct sigcontext *from)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: arch/um/sys-x86_64/signal.c:24:
+                                 struct sigcontext *from)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: arch/um/sys-x86_64/signal.c:26:
+       int err = 0;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#634: FILE: arch/um/sys-x86_64/signal.c:28:
+#define GETREG(regs, regno, sc, regname) \
+       __get_user((regs)->regs.skas.regs[(regno) / sizeof(unsigned long)], \
+                  &(sc)->regname)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regname' may be better as '(regname)' to avoid precedence issues
#634: FILE: arch/um/sys-x86_64/signal.c:28:
+#define GETREG(regs, regno, sc, regname) \
+       __get_user((regs)->regs.skas.regs[(regno) / sizeof(unsigned long)], \
+                  &(sc)->regname)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: arch/um/sys-x86_64/signal.c:29:
+       __get_user((regs)->regs.skas.regs[(regno) / sizeof(unsigned long)], \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: arch/um/sys-x86_64/signal.c:30:
+                  &(sc)->regname)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: arch/um/sys-x86_64/signal.c:30:
+                  &(sc)->regname)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: arch/um/sys-x86_64/signal.c:32:
+       err |= GETREG(regs, R8, from, r8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: arch/um/sys-x86_64/signal.c:33:
+       err |= GETREG(regs, R9, from, r9);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: arch/um/sys-x86_64/signal.c:34:
+       err |= GETREG(regs, R10, from, r10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: arch/um/sys-x86_64/signal.c:35:
+       err |= GETREG(regs, R11, from, r11);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: arch/um/sys-x86_64/signal.c:36:
+       err |= GETREG(regs, R12, from, r12);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: arch/um/sys-x86_64/signal.c:37:
+       err |= GETREG(regs, R13, from, r13);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: arch/um/sys-x86_64/signal.c:38:
+       err |= GETREG(regs, R14, from, r14);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/um/sys-x86_64/signal.c:39:
+       err |= GETREG(regs, R15, from, r15);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/um/sys-x86_64/signal.c:40:
+       err |= GETREG(regs, RDI, from, rdi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/um/sys-x86_64/signal.c:41:
+       err |= GETREG(regs, RSI, from, rsi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: arch/um/sys-x86_64/signal.c:42:
+       err |= GETREG(regs, RBP, from, rbp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: arch/um/sys-x86_64/signal.c:43:
+       err |= GETREG(regs, RBX, from, rbx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: arch/um/sys-x86_64/signal.c:44:
+       err |= GETREG(regs, RDX, from, rdx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: arch/um/sys-x86_64/signal.c:45:
+       err |= GETREG(regs, RAX, from, rax);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: arch/um/sys-x86_64/signal.c:46:
+       err |= GETREG(regs, RCX, from, rcx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: arch/um/sys-x86_64/signal.c:47:
+       err |= GETREG(regs, RSP, from, rsp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: arch/um/sys-x86_64/signal.c:48:
+       err |= GETREG(regs, RIP, from, rip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: arch/um/sys-x86_64/signal.c:49:
+       err |= GETREG(regs, EFLAGS, from, eflags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: arch/um/sys-x86_64/signal.c:50:
+       err |= GETREG(regs, CS, from, cs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: arch/um/sys-x86_64/signal.c:54:
+       return(err);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#663: FILE: arch/um/sys-x86_64/signal.c:57:
+int copy_sc_to_user_skas(struct sigcontext *to, struct _fpstate *to_fp, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: arch/um/sys-x86_64/signal.c:58:
+                        struct pt_regs *regs, unsigned long mask)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: arch/um/sys-x86_64/signal.c:58:
+int copy_sc_to_user_skas(struct sigcontext *to, struct _fpstate *to_fp, 
+                        struct pt_regs *regs, unsigned long mask)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: arch/um/sys-x86_64/signal.c:58:
+                        struct pt_regs *regs, unsigned long mask)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#672: FILE: arch/um/sys-x86_64/signal.c:66:
+#define PUTREG(regs, regno, sc, regname) \
+       __put_user((regs)->regs.skas.regs[(regno) / sizeof(unsigned long)], \
+                  &(sc)->regname)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regname' may be better as '(regname)' to avoid precedence issues
#672: FILE: arch/um/sys-x86_64/signal.c:66:
+#define PUTREG(regs, regno, sc, regname) \
+       __put_user((regs)->regs.skas.regs[(regno) / sizeof(unsigned long)], \
+                  &(sc)->regname)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: arch/um/sys-x86_64/signal.c:67:
+       __put_user((regs)->regs.skas.regs[(regno) / sizeof(unsigned long)], \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#674: FILE: arch/um/sys-x86_64/signal.c:68:
+                  &(sc)->regname)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: arch/um/sys-x86_64/signal.c:68:
+                  &(sc)->regname)$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#702: FILE: arch/um/sys-x86_64/signal.c:96:
+	return(err);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: arch/um/sys-x86_64/signal.c:102:
+int copy_sc_from_user_tt(struct sigcontext *to, struct sigcontext *from, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: arch/um/sys-x86_64/signal.c:103:
+                        int fpsize)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: arch/um/sys-x86_64/signal.c:103:
+int copy_sc_from_user_tt(struct sigcontext *to, struct sigcontext *from, 
+                        int fpsize)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: arch/um/sys-x86_64/signal.c:103:
+                        int fpsize)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/um/sys-x86_64/signal.c:105:
+       struct _fpstate *to_fp, *from_fp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: arch/um/sys-x86_64/signal.c:106:
+       unsigned long sigs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: arch/um/sys-x86_64/signal.c:107:
+       int err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: arch/um/sys-x86_64/signal.c:109:
+       to_fp = to->fpstate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: arch/um/sys-x86_64/signal.c:110:
+       from_fp = from->fpstate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: arch/um/sys-x86_64/signal.c:111:
+       sigs = to->oldmask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: arch/um/sys-x86_64/signal.c:112:
+       err = copy_from_user(to, from, sizeof(*to));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: arch/um/sys-x86_64/signal.c:113:
+       to->oldmask = sigs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: arch/um/sys-x86_64/signal.c:114:
+       return(err);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#720: FILE: arch/um/sys-x86_64/signal.c:114:
+       return(err);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: arch/um/sys-x86_64/signal.c:117:
+int copy_sc_to_user_tt(struct sigcontext *to, struct _fpstate *fp, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#724: FILE: arch/um/sys-x86_64/signal.c:118:
+                      struct sigcontext *from, int fpsize)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: arch/um/sys-x86_64/signal.c:118:
+int copy_sc_to_user_tt(struct sigcontext *to, struct _fpstate *fp, 
+                      struct sigcontext *from, int fpsize)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: arch/um/sys-x86_64/signal.c:118:
+                      struct sigcontext *from, int fpsize)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: arch/um/sys-x86_64/signal.c:120:
+       struct _fpstate *to_fp, *from_fp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: arch/um/sys-x86_64/signal.c:121:
+       int err;$

CHECK:SPACING: No space is necessary after a cast
#729: FILE: arch/um/sys-x86_64/signal.c:123:
+       to_fp = (fp ? fp : (struct _fpstate *) (to + 1));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: arch/um/sys-x86_64/signal.c:123:
+       to_fp = (fp ? fp : (struct _fpstate *) (to + 1));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: arch/um/sys-x86_64/signal.c:124:
+       from_fp = from->fpstate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: arch/um/sys-x86_64/signal.c:125:
+       err = copy_to_user(to, from, sizeof(*to));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: arch/um/sys-x86_64/signal.c:126:
+       return(err);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#732: FILE: arch/um/sys-x86_64/signal.c:126:
+       return(err);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: arch/um/sys-x86_64/signal.c:133:
+       int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: arch/um/sys-x86_64/signal.c:135:
+       ret = CHOOSE_MODE(copy_sc_from_user_tt(UPT_SC(&to->regs), from,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#742: FILE: arch/um/sys-x86_64/signal.c:136:
+                                              sizeof(struct _fpstate)),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: arch/um/sys-x86_64/signal.c:136:
+                                              sizeof(struct _fpstate)),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: arch/um/sys-x86_64/signal.c:137:
+                         copy_sc_from_user_skas(to, from));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: arch/um/sys-x86_64/signal.c:137:
+                         copy_sc_from_user_skas(to, from));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: arch/um/sys-x86_64/signal.c:138:
+       return(ret);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#744: FILE: arch/um/sys-x86_64/signal.c:138:
+       return(ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: arch/um/sys-x86_64/signal.c:141:
+static int copy_sc_to_user(struct sigcontext *to, struct _fpstate *fp, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: arch/um/sys-x86_64/signal.c:142:
+                          struct pt_regs *from, unsigned long mask)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: arch/um/sys-x86_64/signal.c:142:
+static int copy_sc_to_user(struct sigcontext *to, struct _fpstate *fp, 
+                          struct pt_regs *from, unsigned long mask)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: arch/um/sys-x86_64/signal.c:142:
+                          struct pt_regs *from, unsigned long mask)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: arch/um/sys-x86_64/signal.c:144:
+       return(CHOOSE_MODE(copy_sc_to_user_tt(to, fp, UPT_SC(&from->regs),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: arch/um/sys-x86_64/signal.c:145:
+                                             sizeof(*fp)),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: arch/um/sys-x86_64/signal.c:145:
+                                             sizeof(*fp)),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: arch/um/sys-x86_64/signal.c:146:
+                          copy_sc_to_user_skas(to, fp, from, mask)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: arch/um/sys-x86_64/signal.c:146:
+                          copy_sc_to_user_skas(to, fp, from, mask)));$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#756: FILE: arch/um/sys-x86_64/signal.c:150:
+struct rt_sigframe
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: arch/um/sys-x86_64/signal.c:151:
+       char *pretcode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: arch/um/sys-x86_64/signal.c:152:
+       struct ucontext uc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: arch/um/sys-x86_64/signal.c:153:
+       struct siginfo info;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#762: FILE: arch/um/sys-x86_64/signal.c:156:
+#define round_down(m, n) (((m) / (n)) * (n))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: arch/um/sys-x86_64/signal.c:158:
+int setup_signal_stack_si(unsigned long stack_top, int sig, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: arch/um/sys-x86_64/signal.c:159:
+^I^I^I  struct k_sigaction *ka, struct pt_regs * regs, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#765: FILE: arch/um/sys-x86_64/signal.c:159:
+			  struct k_sigaction *ka, struct pt_regs * regs, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: arch/um/sys-x86_64/signal.c:163:
+^Istruct _fpstate __user *fp = NULL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: arch/um/sys-x86_64/signal.c:174:
+#if 0 /* XXX */^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#780: FILE: arch/um/sys-x86_64/signal.c:174:
+#if 0 /* XXX */	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#781: FILE: arch/um/sys-x86_64/signal.c:175:
+^Iif (save_i387(fp) < 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#782: FILE: arch/um/sys-x86_64/signal.c:176:
+^I^Ierr |= -1; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#787: FILE: arch/um/sys-x86_64/signal.c:181:
+^Iif (ka->sa.sa_flags & SA_SIGINFO) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: arch/um/sys-x86_64/signal.c:186:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#802: FILE: arch/um/sys-x86_64/signal.c:196:
+^Iif (sizeof(*set) == 16) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: arch/um/sys-x86_64/signal.c:198:
+^I^I__put_user(set->sig[1], &frame->uc.uc_sigmask.sig[1]); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: arch/um/sys-x86_64/signal.c:199:
+^I} $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#806: FILE: arch/um/sys-x86_64/signal.c:200:
+	} 
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: arch/um/sys-x86_64/signal.c:201:
+^I^Ierr |= __copy_to_user(&frame->uc.uc_sigmask, set, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#811: FILE: arch/um/sys-x86_64/signal.c:205:
+	/* Set up to return from userspace.  If provided, use a stub
+	   already in userspace.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#811: FILE: arch/um/sys-x86_64/signal.c:205:
+	   already in userspace.  */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#817: FILE: arch/um/sys-x86_64/signal.c:211:
+^I^Igoto out; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: arch/um/sys-x86_64/signal.c:217:
+^I{ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#825: FILE: arch/um/sys-x86_64/signal.c:219:
+		struct exec_domain *ed = current_thread_info()->exec_domain;
+		if (unlikely(ed && ed->signal_invmap && sig < 32))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#834: FILE: arch/um/sys-x86_64/signal.c:228:
+	/* This also works for non SA_SIGINFO handlers because they expect the
+	   next argument after the signal number on the stack. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#834: FILE: arch/um/sys-x86_64/signal.c:228:
+	   next argument after the signal number on the stack. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: arch/um/sys-x86_64/signal.c:229:
+^IPT_REGS_RSI(regs) = (unsigned long) &frame->info; $

CHECK:SPACING: No space is necessary after a cast
#835: FILE: arch/um/sys-x86_64/signal.c:229:
+	PT_REGS_RSI(regs) = (unsigned long) &frame->info; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: arch/um/sys-x86_64/signal.c:230:
+^IPT_REGS_RDX(regs) = (unsigned long) &frame->uc; $

CHECK:SPACING: No space is necessary after a cast
#836: FILE: arch/um/sys-x86_64/signal.c:230:
+	PT_REGS_RDX(regs) = (unsigned long) &frame->uc; 

CHECK:SPACING: No space is necessary after a cast
#837: FILE: arch/um/sys-x86_64/signal.c:231:
+	PT_REGS_RIP(regs) = (unsigned long) ka->sa.sa_handler;

CHECK:SPACING: No space is necessary after a cast
#839: FILE: arch/um/sys-x86_64/signal.c:233:
+	PT_REGS_RSP(regs) = (unsigned long) frame;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: arch/um/sys-x86_64/signal.c:241:
+^Istruct rt_sigframe __user *frame = $

ERROR:SPACING: space required before the open parenthesis '('
#852: FILE: arch/um/sys-x86_64/signal.c:246:
+	if(copy_from_user(&set, &uc->uc_sigmask, sizeof(set)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#861: FILE: arch/um/sys-x86_64/signal.c:255:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#862: FILE: arch/um/sys-x86_64/signal.c:256:
+	if(copy_sc_from_user(&current->thread.regs, &uc->uc_mcontext))

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#867: FILE: arch/um/sys-x86_64/signal.c:261:
+	return(PT_REGS_SYSCALL_RET(&current->thread.regs));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: arch/um/sys-x86_64/signal.c:266:
+}^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#873: FILE: arch/um/sys-x86_64/signal.c:267:
+}	
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#888: FILE: arch/um/sys-x86_64/sysrq.c:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#901: FILE: arch/um/sys-x86_64/sysrq.c:14:
+void __show_regs(struct pt_regs * regs)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#903: FILE: arch/um/sys-x86_64/sysrq.c:16:
+	printk("\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: arch/um/sys-x86_64/sysrq.c:18:
+^Iprintk("Pid: %d, comm: %.20s %s %s\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#905: FILE: arch/um/sys-x86_64/sysrq.c:18:
+	printk("Pid: %d, comm: %.20s %s %s\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#907: FILE: arch/um/sys-x86_64/sysrq.c:20:
+^Iprintk("RIP: %04lx:[<%016lx>] ", PT_REGS_CS(regs) & 0xffff, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#907: FILE: arch/um/sys-x86_64/sysrq.c:20:
+	printk("RIP: %04lx:[<%016lx>] ", PT_REGS_CS(regs) & 0xffff, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#909: FILE: arch/um/sys-x86_64/sysrq.c:22:
+^Iprintk("\nRSP: %016lx  EFLAGS: %08lx\n", PT_REGS_RSP(regs), $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#909: FILE: arch/um/sys-x86_64/sysrq.c:22:
+	printk("\nRSP: %016lx  EFLAGS: %08lx\n", PT_REGS_RSP(regs), 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#911: FILE: arch/um/sys-x86_64/sysrq.c:24:
+	printk("RAX: %016lx RBX: %016lx RCX: %016lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#913: FILE: arch/um/sys-x86_64/sysrq.c:26:
+	printk("RDX: %016lx RSI: %016lx RDI: %016lx\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#914: FILE: arch/um/sys-x86_64/sysrq.c:27:
+^I       PT_REGS_RDX(regs), PT_REGS_RSI(regs), PT_REGS_RDI(regs)); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#915: FILE: arch/um/sys-x86_64/sysrq.c:28:
+	printk("RBP: %016lx R08: %016lx R09: %016lx\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: arch/um/sys-x86_64/sysrq.c:29:
+^I       PT_REGS_RBP(regs), PT_REGS_R8(regs), PT_REGS_R9(regs)); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#917: FILE: arch/um/sys-x86_64/sysrq.c:30:
+	printk("R10: %016lx R11: %016lx R12: %016lx\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#918: FILE: arch/um/sys-x86_64/sysrq.c:31:
+^I       PT_REGS_R10(regs), PT_REGS_R11(regs), PT_REGS_R12(regs)); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#919: FILE: arch/um/sys-x86_64/sysrq.c:32:
+	printk("R13: %016lx R14: %016lx R15: %016lx\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: arch/um/sys-x86_64/sysrq.c:33:
+^I       PT_REGS_R13(regs), PT_REGS_R14(regs), PT_REGS_R15(regs)); $

CHECK:SPACING: No space is necessary after a cast
#926: FILE: arch/um/sys-x86_64/sysrq.c:39:
+	show_trace((unsigned long *) &regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#957: FILE: arch/um/sys-x86_64/util/mk_sc.c:1:
+/* Copyright (C) 2003 - 2004 PathScale, Inc

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: arch/um/sys-x86_64/util/mk_sc.c:10:
+  printf("#define " name \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: arch/um/sys-x86_64/util/mk_sc.c:15:
+  printf("#define " name \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#976: FILE: arch/um/sys-x86_64/util/mk_sc.c:20:
+  printf("#define " name \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: arch/um/sys-x86_64/util/mk_sc.c:26:
+  SC_OFFSET("SC_RBX", rbx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: arch/um/sys-x86_64/util/mk_sc.c:27:
+  SC_OFFSET("SC_RCX", rcx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: arch/um/sys-x86_64/util/mk_sc.c:28:
+  SC_OFFSET("SC_RDX", rdx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: arch/um/sys-x86_64/util/mk_sc.c:29:
+  SC_OFFSET("SC_RSI", rsi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: arch/um/sys-x86_64/util/mk_sc.c:30:
+  SC_OFFSET("SC_RDI", rdi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: arch/um/sys-x86_64/util/mk_sc.c:31:
+  SC_OFFSET("SC_RBP", rbp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: arch/um/sys-x86_64/util/mk_sc.c:32:
+  SC_OFFSET("SC_RAX", rax);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: arch/um/sys-x86_64/util/mk_sc.c:33:
+  SC_OFFSET("SC_R8", r8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: arch/um/sys-x86_64/util/mk_sc.c:34:
+  SC_OFFSET("SC_R9", r9);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: arch/um/sys-x86_64/util/mk_sc.c:35:
+  SC_OFFSET("SC_R10", r10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: arch/um/sys-x86_64/util/mk_sc.c:36:
+  SC_OFFSET("SC_R11", r11);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: arch/um/sys-x86_64/util/mk_sc.c:37:
+  SC_OFFSET("SC_R12", r12);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: arch/um/sys-x86_64/util/mk_sc.c:38:
+  SC_OFFSET("SC_R13", r13);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: arch/um/sys-x86_64/util/mk_sc.c:39:
+  SC_OFFSET("SC_R14", r14);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: arch/um/sys-x86_64/util/mk_sc.c:40:
+  SC_OFFSET("SC_R15", r15);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: arch/um/sys-x86_64/util/mk_sc.c:41:
+  SC_OFFSET("SC_IP", rip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: arch/um/sys-x86_64/util/mk_sc.c:42:
+  SC_OFFSET("SC_SP", rsp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: arch/um/sys-x86_64/util/mk_sc.c:43:
+  SC_OFFSET("SC_CR2", cr2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: arch/um/sys-x86_64/util/mk_sc.c:44:
+  SC_OFFSET("SC_ERR", err);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: arch/um/sys-x86_64/util/mk_sc.c:45:
+  SC_OFFSET("SC_TRAPNO", trapno);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: arch/um/sys-x86_64/util/mk_sc.c:46:
+  SC_OFFSET("SC_CS", cs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: arch/um/sys-x86_64/util/mk_sc.c:47:
+  SC_OFFSET("SC_FS", fs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: arch/um/sys-x86_64/util/mk_sc.c:48:
+  SC_OFFSET("SC_GS", gs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: arch/um/sys-x86_64/util/mk_sc.c:49:
+  SC_OFFSET("SC_EFLAGS", eflags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: arch/um/sys-x86_64/util/mk_sc.c:50:
+  SC_OFFSET("SC_SIGMASK", oldmask);$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1007: FILE: arch/um/sys-x86_64/util/mk_sc.c:51:
+#if 0

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: arch/um/sys-x86_64/util/mk_sc.c:52:
+  SC_OFFSET("SC_ORIG_RAX", orig_rax);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: arch/um/sys-x86_64/util/mk_sc.c:53:
+  SC_OFFSET("SC_DS", ds);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: arch/um/sys-x86_64/util/mk_sc.c:54:
+  SC_OFFSET("SC_ES", es);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: arch/um/sys-x86_64/util/mk_sc.c:55:
+  SC_OFFSET("SC_SS", ss);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: arch/um/sys-x86_64/util/mk_sc.c:57:
+  return(0);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1020: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:1:
+#include "linux/config.h"

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1025: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:6:
+extern void print_constant_ptr(char *name, int value);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1026: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:7:
+extern void print_constant(char *name, char *type, int value);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1027: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:8:
+extern void print_tail(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:14:
+  print_head();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:16:
+  print_constant("TASK_EXTERN_PID", "int", THREAD_OFFSET(mode.tt.extern_pid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:18:
+  print_tail();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:19:
+  return(0);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1038: FILE: arch/um/sys-x86_64/util/mk_thread_kern.c:19:
+  return(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1046: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:1:
+#include <stdio.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:5:
+  printf("/*\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:6:
+  printf(" * Generated by mk_thread\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:7:
+  printf(" */\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:8:
+  printf("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:9:
+  printf("#ifndef __UM_THREAD_H\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:10:
+  printf("#define __UM_THREAD_H\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1056: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:11:
+  printf("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:16:
+  printf("#define %s(task) ((unsigned long *) "$

WARNING:SPLIT_STRING: quoted string split across lines
#1062: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:17:
+  printf("#define %s(task) ((unsigned long *) "
+	 "&(((char *) (task))[%d]))\n", name, value);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:22:
+  printf("#define %s(task) *((%s *) &(((char *) (task))[%d]))\n", name, type, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:22:
+  printf("#define %s(task) *((%s *) &(((char *) (task))[%d]))\n", name, type, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:28:
+  printf("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: arch/um/sys-x86_64/util/mk_thread_user.c:29:
+  printf("#endif\n");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1081: FILE: include/asm-um/apic.h:1:
+#ifndef __UM_APIC_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1090: FILE: include/asm-um/module-x86_64.h:1:
+/*

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1101: FILE: include/asm-um/module-x86_64.h:12:
+struct mod_arch_specific
+{

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#1104: FILE: include/asm-um/module-x86_64.h:15:
+#define Elf_Shdr Elf64_Shdr

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Shdr>
#1104: FILE: include/asm-um/module-x86_64.h:15:
+#define Elf_Shdr Elf64_Shdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#1105: FILE: include/asm-um/module-x86_64.h:16:
+#define Elf_Sym Elf64_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Sym>
#1105: FILE: include/asm-um/module-x86_64.h:16:
+#define Elf_Sym Elf64_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#1106: FILE: include/asm-um/module-x86_64.h:17:
+#define Elf_Ehdr Elf64_Ehdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#1106: FILE: include/asm-um/module-x86_64.h:17:
+#define Elf_Ehdr Elf64_Ehdr

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1125: FILE: include/asm-um/pda.h:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'me' may be better as '(me)' to avoid precedence issues
#1142: FILE: include/asm-um/pda.h:18:
+#define read_pda(me) (&me)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1161: FILE: include/asm-um/prctl.h:1:
+#ifndef __UM_PRCTL_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1172: FILE: include/asm-um/processor-x86_64.h:1:
+/*

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1189: FILE: include/asm-um/processor-x86_64.h:18:
+	({ void *pc; __asm__("movq $1f,%0\n1:":"=g" (pc)); pc; })
 	                                      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1210: FILE: include/asm-um/sigcontext-x86_64.h:1:
+/* Copyright 2003 PathScale, Inc.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1237: FILE: include/asm-um/system-x86_64.h:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 131 errors, 173 warnings, 35 checks, 1127 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
