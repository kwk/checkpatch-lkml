WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: drivers/scsi/ata_piix.c:280:
+static int piix_sata_probe (struct ata_port *ap)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#173: FILE: drivers/scsi/ata_piix.c:291:
+	orig_mask = (int) pcs & 0xff;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == ap->port_no'
#191: FILE: drivers/scsi/ata_piix.c:305:
+			if (combined || (i == ap->port_no))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#228: FILE: drivers/scsi/ata_piix.c:333:
+		printk(KERN_INFO "ata%u: SATA port has no device.\n", ap->id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: drivers/scsi/ata_piix.c:512:
+		u8 tmp;
+		pci_read_config_byte(pdev, ICH5_PMR, &tmp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#417: FILE: drivers/scsi/libata-core.c:505:
+		proto = dev->xfer_protocol = ATA_PROT_PIO;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#419: FILE: drivers/scsi/libata-core.c:507:
+		proto = dev->xfer_protocol = ATA_PROT_DMA;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: drivers/scsi/libata-core.c:511:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#714: FILE: drivers/scsi/libata-core.c:1290:
+		struct ata_device *dev = &ap->device[i];
+		ata_dev_set_protocol(dev);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#798: FILE: drivers/scsi/libata-core.c:2248:
+		qc->cursect = qc->cursg = qc->cursg_ofs = 0;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#857: FILE: drivers/scsi/libata-scsi.c:38:
+			      void (*done)(struct scsi_cmnd *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: drivers/scsi/libata-scsi.c:49:
+ *^Iused by sd. Most BIOSes nowadays expect a XXX/255/16  (CHS) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: drivers/scsi/libata-scsi.c:50:
+ *^Imapping. Some situations may arise where the disk is not $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: drivers/scsi/libata-scsi.c:337:
+static void ata_scsi_translate(struct ata_port *ap, struct ata_device *dev,
+			      struct scsi_cmnd *cmd,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->device->channel != 0'
#1284: FILE: drivers/scsi/libata-scsi.c:1004:
+	if (unlikely((cmd->device->channel != 0) ||
+		     (cmd->device->lun != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->device->lun != 0'
#1284: FILE: drivers/scsi/libata-scsi.c:1004:
+	if (unlikely((cmd->device->channel != 0) ||
+		     (cmd->device->lun != 0)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1412: FILE: drivers/scsi/libata-scsi.c:1104:
+	if (dev->class == ATA_DEV_ATA) {
[...]
-			ata_scsi_rw_queue(ap, dev, cmd, done, 6);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1435: FILE: drivers/scsi/libata-scsi.c:1111:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1507: FILE: drivers/scsi/libata.h:40:
+extern void ata_dev_id_string(struct ata_device *dev, unsigned char *s,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1560: FILE: drivers/scsi/sata_promise.c:80:
+	PDC_20621_ERR_MASK	= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	                  	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1560: FILE: drivers/scsi/sata_promise.c:80:
+	PDC_20621_ERR_MASK	= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	                  	              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1560: FILE: drivers/scsi/sata_promise.c:80:
+	PDC_20621_ERR_MASK	= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	                  	                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1560: FILE: drivers/scsi/sata_promise.c:80:
+	PDC_20621_ERR_MASK	= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	                  	                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1561: FILE: drivers/scsi/sata_promise.c:81:
+				  (1<<23),
 				    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1562: FILE: drivers/scsi/sata_promise.c:82:
+	PDC_ERR_MASK		= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	            		    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1562: FILE: drivers/scsi/sata_promise.c:82:
+	PDC_ERR_MASK		= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	            		              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1562: FILE: drivers/scsi/sata_promise.c:82:
+	PDC_ERR_MASK		= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	            		                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1562: FILE: drivers/scsi/sata_promise.c:82:
+	PDC_ERR_MASK		= (1<<19) | (1<<20) | (1<<21) | (1<<22) |
 	            		                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1563: FILE: drivers/scsi/sata_promise.c:83:
+				  (1<<8) | (1<<9) | (1<<10),
 				    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1563: FILE: drivers/scsi/sata_promise.c:83:
+				  (1<<8) | (1<<9) | (1<<10),
 				             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1563: FILE: drivers/scsi/sata_promise.c:83:
+				  (1<<8) | (1<<9) | (1<<10),
 				                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1589: FILE: drivers/scsi/sata_promise.c:175:
+                                     struct ata_queued_cmd *qc, int have_err);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1589: FILE: drivers/scsi/sata_promise.c:175:
+                                     struct ata_queued_cmd *qc, int have_err);$

CHECK:SPACING: No space is necessary after a cast
#1608: FILE: drivers/scsi/sata_promise.c:368:
+	void *mmio = (void *) ap->ioaddr.cmd_addr + PDC_CTLSTAT;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1617: FILE: drivers/scsi/sata_promise.c:377:
+		udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->protocol == ATA_PROT_DMA'
#1660: FILE: drivers/scsi/sata_promise.c:596:
+	if ((tf->protocol == ATA_PROT_DMA) && (!(tf->flags & ATA_TFLAG_WRITE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->protocol == ATA_PROT_DMA'
#1669: FILE: drivers/scsi/sata_promise.c:648:
+	if ((tf->protocol == ATA_PROT_DMA) && (!(tf->flags & ATA_TFLAG_WRITE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.protocol == ATA_PROT_DMA'
#1688: FILE: drivers/scsi/sata_promise.c:863:
+	if ((qc->tf.protocol == ATA_PROT_DMA) &&	/* read */
+	    (!(qc->tf.flags & ATA_TFLAG_WRITE))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1690: FILE: drivers/scsi/sata_promise.c:865:
+	    (!(qc->tf.flags & ATA_TFLAG_WRITE))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1726: FILE: drivers/scsi/sata_promise.c:914:
+	} else if (qc->tf.protocol == ATA_PROT_NODATA) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1751: FILE: drivers/scsi/sata_promise.c:960:
+        spin_lock(&host_set->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1751: FILE: drivers/scsi/sata_promise.c:960:
+        spin_lock(&host_set->lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1760: FILE: drivers/scsi/sata_promise.c:982:
+        spin_unlock(&host_set->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1760: FILE: drivers/scsi/sata_promise.c:982:
+        spin_unlock(&host_set->lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1769: FILE: drivers/scsi/sata_promise.c:1011:
+                                     struct ata_queued_cmd *qc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1769: FILE: drivers/scsi/sata_promise.c:1011:
+                                     struct ata_queued_cmd *qc,$

CHECK:SPACING: No space is necessary after a cast
#1798: FILE: drivers/scsi/sata_promise.c:1079:
+	void *mmio = (void *) ap->ioaddr.cmd_addr + PDC_GLOBAL_CTL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1828: FILE: drivers/scsi/sata_promise.c:1141:
+        spin_lock(&host_set->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1828: FILE: drivers/scsi/sata_promise.c:1141:
+        spin_lock(&host_set->lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1837: FILE: drivers/scsi/sata_promise.c:1156:
+        spin_unlock(&host_set->lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1837: FILE: drivers/scsi/sata_promise.c:1156:
+        spin_unlock(&host_set->lock);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1882: FILE: drivers/scsi/sata_promise.c:1661:
+		BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2087: FILE: include/linux/libata.h:411:
+extern int ata_scsi_slave_config(struct scsi_device *sdev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281220.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 13 warnings, 32 checks, 1906 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281220.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
