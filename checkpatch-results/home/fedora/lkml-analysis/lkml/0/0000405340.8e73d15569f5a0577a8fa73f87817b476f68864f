WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
diff -ur -X /home/roman/nodiff linux-2.5.52.org/arch/i386/kernel/entry.S linux-2.5.52/arch/i386/kernel/entry.S

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#80: FILE: arch/um/kernel/sys_call_table.c:130:
+extern syscall_handler_t sys_create_module;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#88: FILE: arch/um/kernel/sys_call_table.c:166:
+extern syscall_handler_t sys_query_module;

ERROR:SPACING: space prohibited after that open square bracket '['
#97: FILE: arch/um/kernel/sys_call_table.c:389:
+	[ __NR_create_module ] = sys_create_module,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close square bracket ']'
#97: FILE: arch/um/kernel/sys_call_table.c:389:
+	[ __NR_create_module ] = sys_create_module,

ERROR:SPACING: space prohibited after that open square bracket '['
#106: FILE: arch/um/kernel/sys_call_table.c:429:
+	[ __NR_query_module ] = sys_query_module,

ERROR:SPACING: space prohibited before that close square bracket ']'
#106: FILE: arch/um/kernel/sys_call_table.c:429:
+	[ __NR_query_module ] = sys_query_module,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#initfn) over __attribute__((alias(#initfn)))
#117: FILE: include/linux/init.h:150:
+	int init_module(void) __attribute__((alias(#initfn)));	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#117: FILE: include/linux/init.h:150:
+	int init_module(void) __attribute__((alias(#initfn)));	\

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#exitfn) over __attribute__((alias(#exitfn)))
#124: FILE: include/linux/init.h:157:
+	void cleanup_module(void) __attribute__((alias(#exitfn))); \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#124: FILE: include/linux/init.h:157:
+	void cleanup_module(void) __attribute__((alias(#exitfn))); \

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#136: FILE: include/linux/module.h:44:
+struct module_symbol
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#162: FILE: include/linux/module.h:108:
+#define __EXPORT_SYMBOL(sym, str)			\
+static const char __kstrtab_##sym[]			\
+__attribute__((section(".kstrtab"))) = str;		\
+const struct module_symbol __ksymtab_##sym		\
+__attribute__((section("__ksymtab"))) =			\
+{ (unsigned long)&sym, __kstrtab_##sym }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".kstrtab") over __attribute__((section(".kstrtab")))
#164: FILE: include/linux/module.h:110:
+__attribute__((section(".kstrtab"))) = str;		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab") over __attribute__((section("__ksymtab")))
#166: FILE: include/linux/module.h:112:
+__attribute__((section("__ksymtab"))) =			\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#168: FILE: include/linux/module.h:114:
+#define EXPORT_SYMBOL(var) __EXPORT_SYMBOL(var, __stringify(var))

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#186: FILE: include/linux/module.h:323:
+const char __module_parm_##var[] __attribute__((section(".modinfo"))) = "parm_" __MODULE_STRING(var) "=" type

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#186: FILE: include/linux/module.h:323:
+const char __module_parm_##var[] __attribute__((section(".modinfo"))) = "parm_" __MODULE_STRING(var) "=" type

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#207: FILE: include/linux/module.h:380:
+static const char __module_kernel_version[] __attribute__((section(".modinfo"))) =

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#225: FILE: include/linux/moduleparam.h:61:
+	__attribute__((section(".modinfo"))) =			\

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#318: FILE: kernel/module.c:1445:
+struct module_ref_old
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#325: FILE: kernel/module.c:1452:
+struct module_old
+{

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#332: FILE: kernel/module.c:1459:
+	union
+	{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#339: FILE: kernel/module.c:1466:
+	unsigned nsyms;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#340: FILE: kernel/module.c:1467:
+	unsigned ndeps;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#353: FILE: kernel/module.c:1480:
+	/* Members past this point are extensions to the basic
+	   module support and are optional.  Use mod_member_present()

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#354: FILE: kernel/module.c:1481:
+	   to examine them.  */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#367: FILE: kernel/module.c:1494:
+struct module_info
+{

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#380: FILE: kernel/module.c:1507:
+	nmod = space = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#404: FILE: kernel/module.c:1531:
+	ndeps = space = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#433: FILE: kernel/module.c:1560:
+	nrefs = space = 0;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#453: FILE: kernel/module.c:1580:
+	extern struct kernel_symbol_group kernel_symbols;

CHECK:BRACES: braces {} should be used on all arms of this statement
#466: FILE: kernel/module.c:1593:
+	if (space > bufsize) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#469: FILE: kernel/module.c:1596:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#481: FILE: kernel/module.c:1608:
+		if (copy_to_user(strings, s->name, len)
+		    || put_user(s->value, vals)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#482: FILE: kernel/module.c:1609:
+		    || put_user(s->value, vals)
+		    || put_user(space, vals + 1))

CHECK:BRACES: braces {} should be used on all arms of this statement
#499: FILE: kernel/module.c:1626:
+	if (sizeof(struct module_info) <= bufsize) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: kernel/module.c:1628:
+		struct module_info info;
+		info.addr = (unsigned long)mod->module_core;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#520: FILE: kernel/module.c:1647:
+	} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#535: FILE: kernel/module.c:1662:
+		if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0) {
 		                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#539: FILE: kernel/module.c:1666:
+		name[MODULE_NAME_LEN-1] = '\0';
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#584: FILE: kernel/module.c:1711:
+	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 	                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#586: FILE: kernel/module.c:1713:
+	name[MODULE_NAME_LEN-1] = '\0';
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#622: FILE: kernel/module.c:1749:
+	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 	                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#624: FILE: kernel/module.c:1751:
+	name[MODULE_NAME_LEN-1] = '\0';
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#645: FILE: kernel/module.c:1772:
+		struct module *mod2 = (struct module *)((char *)dep->dep + dep->dep->size);
+		use_module(mod, mod2);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000405340.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 21 warnings, 16 checks, 555 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000405340.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
