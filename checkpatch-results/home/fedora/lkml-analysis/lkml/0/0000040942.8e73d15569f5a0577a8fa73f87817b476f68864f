WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
In Stratus servers, this spare memory module (and CPUs) will be brought into

WARNING:TYPO_SPELLING: 'threshhold' may be misspelled - perhaps 'threshold'?
#42: 
	c) If number of pages still dirty is less than some threshhold,
	                                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'desireable' may be misspelled - perhaps 'desirable'?
#56: 
Given that, it is desireable to make the kernel patch as small and
                  ^^^^^^^^^^

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#110: 
Signed-off-by:  Kimball Murray kimball.murray@stratus.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Kimball Murray kimball.murray@stratus.com'
#110: 
Signed-off-by:  Kimball Murray kimball.murray@stratus.com

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#125: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: arch/x86_64/mm/track.c:1:
+#include <linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#132: FILE: arch/x86_64/mm/track.c:3:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#134: FILE: arch/x86_64/mm/track.c:5:
+#include <asm/pgtable.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: arch/x86_64/mm/track.c:13:
+void default_mm_track_pte(void * val)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#144: FILE: arch/x86_64/mm/track.c:15:
+	pte_t *ptep = (pte_t*)val;

CHECK:BIT_MACRO: Prefer using the BIT macro
#162: FILE: arch/x86_64/mm/track.c:33:
+#define LARGE_PMD_SIZE	(1 << PMD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#168: FILE: arch/x86_64/mm/track.c:39:
+	pmd_t *pmd = (pmd_t*)val;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#176: FILE: arch/x86_64/mm/track.c:47:
+		if (!pte_val(*(pte_t*)val) & _PAGE_DIRTY)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#179: FILE: arch/x86_64/mm/track.c:50:
+		addr = pte_pfn(*(pte_t*)val) << PAGE_SHIFT;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#183: FILE: arch/x86_64/mm/track.c:54:
+			do_mm_track_phys((void*)addr);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#195: FILE: arch/x86_64/mm/track.c:66:
+static inline void track_as_pte(void *val) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#196: FILE: arch/x86_64/mm/track.c:67:
+	unsigned long pfn = pte_pfn(*(pte_t*)val);

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: arch/x86_64/mm/track.c:68:
+	unsigned long pfn = pte_pfn(*(pte_t*)val);
+	if (pfn >= mm_tracking_struct.bitcnt)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#233: FILE: arch/x86_64/mm/track.c:104:
+EXPORT_SYMBOL_GPL(do_mm_track_pte);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#234: FILE: arch/x86_64/mm/track.c:105:
+EXPORT_SYMBOL_GPL(do_mm_track_pmd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#235: FILE: arch/x86_64/mm/track.c:106:
+EXPORT_SYMBOL_GPL(do_mm_track_pud);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#236: FILE: arch/x86_64/mm/track.c:107:
+EXPORT_SYMBOL_GPL(do_mm_track_pgd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#237: FILE: arch/x86_64/mm/track.c:108:
+EXPORT_SYMBOL_GPL(do_mm_track_phys);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#245: FILE: include/asm-x86_64/mm_track.h:1:
+#ifndef __X86_64_MMTRACK_H__

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#250: FILE: include/asm-x86_64/mm_track.h:6:
+#define mm_track_pte(ptep)		do { ; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#251: FILE: include/asm-x86_64/mm_track.h:7:
+#define mm_track_pmd(ptep)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#252: FILE: include/asm-x86_64/mm_track.h:8:
+#define mm_track_pud(ptep)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#253: FILE: include/asm-x86_64/mm_track.h:9:
+#define mm_track_pgd(ptep)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#254: FILE: include/asm-x86_64/mm_track.h:10:
+#define mm_track_phys(x)		do { ; } while (0)

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#259: FILE: include/asm-x86_64/mm_track.h:15:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: include/asm-x86_64/mm_track.h:25:
+  * environment.  When tracking is complete, the vector may be freed, but $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: include/asm-x86_64/mm_track.h:36:
+	unsigned long * vector;	// bit vector of modified pages

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#283: FILE: include/asm-x86_64/mm_track.h:39:
+};
+extern struct mm_tracker mm_tracking_struct;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#285: FILE: include/asm-x86_64/mm_track.h:41:
+extern void (*do_mm_track_pte)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#286: FILE: include/asm-x86_64/mm_track.h:42:
+extern void (*do_mm_track_pmd)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#287: FILE: include/asm-x86_64/mm_track.h:43:
+extern void (*do_mm_track_pud)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#288: FILE: include/asm-x86_64/mm_track.h:44:
+extern void (*do_mm_track_pgd)(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#289: FILE: include/asm-x86_64/mm_track.h:45:
+extern void (*do_mm_track_phys)(void *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: include/asm-x86_64/mm_track.h:50:
+static __inline__ void mm_track_pte(void * val)

WARNING:INLINE: plain inline is preferred over __inline__
#294: FILE: include/asm-x86_64/mm_track.h:50:
+static __inline__ void mm_track_pte(void * val)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#299: FILE: include/asm-x86_64/mm_track.h:55:
+}
+static __inline__ void mm_track_pmd(void * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: include/asm-x86_64/mm_track.h:55:
+static __inline__ void mm_track_pmd(void * val)

WARNING:INLINE: plain inline is preferred over __inline__
#299: FILE: include/asm-x86_64/mm_track.h:55:
+static __inline__ void mm_track_pmd(void * val)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#304: FILE: include/asm-x86_64/mm_track.h:60:
+}
+static __inline__ void mm_track_pud(void * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: include/asm-x86_64/mm_track.h:60:
+static __inline__ void mm_track_pud(void * val)

WARNING:INLINE: plain inline is preferred over __inline__
#304: FILE: include/asm-x86_64/mm_track.h:60:
+static __inline__ void mm_track_pud(void * val)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#309: FILE: include/asm-x86_64/mm_track.h:65:
+}
+static __inline__ void mm_track_pgd(void * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: include/asm-x86_64/mm_track.h:65:
+static __inline__ void mm_track_pgd(void * val)

WARNING:INLINE: plain inline is preferred over __inline__
#309: FILE: include/asm-x86_64/mm_track.h:65:
+static __inline__ void mm_track_pgd(void * val)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#314: FILE: include/asm-x86_64/mm_track.h:70:
+}
+static __inline__ void mm_track_phys(void * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: include/asm-x86_64/mm_track.h:70:
+static __inline__ void mm_track_phys(void * val)

WARNING:INLINE: plain inline is preferred over __inline__
#314: FILE: include/asm-x86_64/mm_track.h:70:
+static __inline__ void mm_track_phys(void * val)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#436: FILE: include/asm-x86_64/pgtable.h:309:
+static inline int pte_dirty(pte_t pte)		{ return pte_val(pte) & (_PAGE_DIRTY | _PAGE_SOFTDIRTY); }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#448: FILE: include/asm-x86_64/pgtable.h:321:
+static inline pte_t pte_mkclean(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) & ~(_PAGE_SOFTDIRTY|_PAGE_DIRTY))); return pte; }

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#448: FILE: include/asm-x86_64/pgtable.h:321:
+static inline pte_t pte_mkclean(pte_t pte)	{ set_pte(&pte, __pte(pte_val(pte) & ~(_PAGE_SOFTDIRTY|_PAGE_DIRTY))); return pte; }
                                           	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040942.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 31 warnings, 9 checks, 341 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040942.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
