WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
only works for sending data to socket. But that should be as much performance

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: linux/fs.h:1408:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#116: FILE: linux/fs.h:1408:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#116: FILE: linux/fs.h:1408:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#116: FILE: linux/fs.h:1408:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#116: FILE: linux/fs.h:1408:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#116: FILE: linux/fs.h:1408:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#116: FILE: linux/fs.h:1408:
+extern ssize_t generic_file_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: filemap.c:965:
+                       int offset, size_t size, loff_t *pos, int more)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: filemap.c:965:
+ssize_t generic_file_sendpage(struct file *out_file, struct page *page,
+                       int offset, size_t size, loff_t *pos, int more)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: filemap.c:965:
+                       int offset, size_t size, loff_t *pos, int more)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: filemap.c:967:
+       void *addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: filemap.c:968:
+       int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: filemap.c:969:
+       mm_segment_t old_fs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: filemap.c:971:
+       old_fs = get_fs();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: filemap.c:972:
+       set_fs(KERNEL_DS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: filemap.c:974:
+       addr = kmap(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: filemap.c:975:
+       if (!addr) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#138: FILE: filemap.c:975:
+       if (!addr) {
+               set_fs(old_fs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: filemap.c:976:
+               set_fs(old_fs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: filemap.c:976:
+               set_fs(old_fs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: filemap.c:977:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: filemap.c:977:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: filemap.c:978:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: filemap.c:980:
+       ret = out_file->f_op->write(out_file, addr + offset, size, pos);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: filemap.c:982:
+       kunmap(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: filemap.c:984:
+       set_fs(old_fs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: filemap.c:985:
+       return ret;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: filemap.c:988:
+int file_send_actor(read_descriptor_t * desc, struct page *page,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: filemap.c:989:
+                       unsigned long offset, unsigned long size)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: filemap.c:989:
+int file_send_actor(read_descriptor_t * desc, struct page *page,
+                       unsigned long offset, unsigned long size)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: filemap.c:989:
+                       unsigned long offset, unsigned long size)$

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: ext3/file.c:132:
+       .sendpage       = generic_file_sendpage,$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000276172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 28 warnings, 3 checks, 50 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000276172.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
