ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#60: 
--- a/include/net/ip.h	Sun Oct 20 03:06:50 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/net/ip.h:285:
+extern int ip_seq_release(struct inode *inode, struct file *file);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/net/ip_fib.h:279:
+extern int fib_proc_init(void);

WARNING:INLINE: plain inline is preferred over __inline__
#161: FILE: net/ipv4/fib_hash.c:883:
+static __inline__ struct fib_node *fib_get_first(struct seq_file *seq)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#163: FILE: net/ipv4/fib_hash.c:885:
+	struct fib_iter_state* iter = seq->private;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#192: FILE: net/ipv4/fib_hash.c:914:
+static __inline__ struct fib_node *fib_get_next(struct seq_file *seq)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#194: FILE: net/ipv4/fib_hash.c:916:
+	struct fib_iter_state* iter = seq->private;

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#222: FILE: net/ipv4/fib_hash.c:944:
+			if (iter->zone->fz_next);
+				break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#222: FILE: net/ipv4/fib_hash.c:944:
+			if (iter->zone->fz_next);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: net/ipv4/fib_hash.c:947:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#257: FILE: net/ipv4/fib_hash.c:979:
+static unsigned fib_flag_trans(int type, int dead, u32 mask, struct fib_info *fi)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#259: FILE: net/ipv4/fib_hash.c:981:
+	static unsigned type2flags[RTN_MAX + 1] = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#262: FILE: net/ipv4/fib_hash.c:984:
+	unsigned flags = type2flags[type];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: net/ipv4/fib_hash.c:995:
+/* $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#274: FILE: net/ipv4/fib_hash.c:996:
+/* 
+ *	This outputs /proc/net/route.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#281: FILE: net/ipv4/fib_hash.c:1003:
+	struct fib_iter_state* iter;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#284: FILE: net/ipv4/fib_hash.c:1006:
+	unsigned flags;

WARNING:SPLIT_STRING: quoted string split across lines
#290: FILE: net/ipv4/fib_hash.c:1012:
+		seq_printf(seq, "%-127s\n", "Iface\tDestination\tGateway "
+			   "\tFlags\tRefCnt\tUse\tMetric\tMask\t\tMTU"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#291: FILE: net/ipv4/fib_hash.c:1013:
+			   "\tFlags\tRefCnt\tUse\tMetric\tMask\t\tMTU"
+			   "\tWindow\tIRTT");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#318: FILE: net/ipv4/fib_hash.c:1040:
+static struct seq_operations fib_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: net/ipv4/fib_hash.c:1052:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: net/ipv4/fib_hash.c:1052:
+       $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#348: FILE: net/ipv4/fib_hash.c:1070:
+static struct file_operations fib_seq_fops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#360: FILE: net/ipv4/fib_hash.c:1082:
+	p = create_proc_entry("route", S_IRUGO, proc_net);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421543.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 14 warnings, 2 checks, 427 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421543.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
