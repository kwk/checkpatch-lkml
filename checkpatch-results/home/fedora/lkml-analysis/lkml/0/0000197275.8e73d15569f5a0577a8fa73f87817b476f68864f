WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
  This relocates the driver binding/unbinding code to drivers/base/dd.c. This is done

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#35: 
  Signed-off-by: Patrick Mochel <mochel@digitalimplant.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#55: FILE: drivers/base/base.h:7:
+extern void driver_detach(struct device_driver * drv);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: drivers/base/base.h:7:
+extern void driver_detach(struct device_driver * drv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: drivers/base/dd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#272: FILE: drivers/base/dd.c:2:
+ *	drivers/base/dd.c - The core device/driver interactions.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: drivers/base/dd.c:4:
+ * ^IThis file contains the (sometimes tricky) code that controls the$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#296: FILE: drivers/base/dd.c:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: drivers/base/dd.c:40:
+void device_bind_driver(struct device * dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#320: FILE: drivers/base/dd.c:50:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#335: FILE: drivers/base/dd.c:65:
+int driver_probe_device(struct device_driver * drv, struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#335: FILE: drivers/base/dd.c:65:
+int driver_probe_device(struct device_driver * drv, struct device * dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: drivers/base/dd.c:87:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: drivers/base/dd.c:96:
+int device_attach(struct device * dev)

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: drivers/base/dd.c:98:
+ ^Istruct bus_type * bus = dev->bus;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#368: FILE: drivers/base/dd.c:98:
+ ^Istruct bus_type * bus = dev->bus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: drivers/base/dd.c:98:
+ ^Istruct bus_type * bus = dev->bus;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: drivers/base/dd.c:98:
+ 	struct bus_type * bus = dev->bus;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#369: FILE: drivers/base/dd.c:99:
+	struct list_head * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#379: FILE: drivers/base/dd.c:109:
+			struct device_driver * drv = to_drv(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: drivers/base/dd.c:110:
+			struct device_driver * drv = to_drv(entry);
+			error = driver_probe_device(drv, dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#386: FILE: drivers/base/dd.c:116:
+				printk(KERN_WARNING

CHECK:LINE_SPACING: Please don't use multiple blank lines
#395: FILE: drivers/base/dd.c:125:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#408: FILE: drivers/base/dd.c:138:
+void driver_attach(struct device_driver * drv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: drivers/base/dd.c:140:
+	struct bus_type * bus = drv->bus;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: drivers/base/dd.c:141:
+	struct list_head * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: drivers/base/dd.c:148:
+		struct device * dev = container_of(entry, struct device, bus_list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: drivers/base/dd.c:149:
+		struct device * dev = container_of(entry, struct device, bus_list);
+		if (!dev->driver) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#423: FILE: drivers/base/dd.c:153:
+				printk(KERN_WARNING

CHECK:LINE_SPACING: Please don't use multiple blank lines
#430: FILE: drivers/base/dd.c:160:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#441: FILE: drivers/base/dd.c:171:
+void device_release_driver(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: drivers/base/dd.c:173:
+	struct device_driver * drv;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#459: FILE: drivers/base/dd.c:189:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#465: FILE: drivers/base/dd.c:195:
+void driver_detach(struct device_driver * drv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#467: FILE: drivers/base/dd.c:197:
+	struct list_head * entry, * next;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#467: FILE: drivers/base/dd.c:197:
+	struct list_head * entry, * next;
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#468: FILE: drivers/base/dd.c:198:
+	struct list_head * entry, * next;
+	list_for_each_safe(entry, next, &drv->devices) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#469: FILE: drivers/base/dd.c:199:
+		struct device * dev = container_of(entry, struct device, driver_list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#470: FILE: drivers/base/dd.c:200:
+		struct device * dev = container_of(entry, struct device, driver_list);
+		device_release_driver(dev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#474: FILE: drivers/base/dd.c:204:
+EXPORT_SYMBOL_GPL(driver_probe_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#475: FILE: drivers/base/dd.c:205:
+EXPORT_SYMBOL_GPL(device_bind_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#476: FILE: drivers/base/dd.c:206:
+EXPORT_SYMBOL_GPL(device_release_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#477: FILE: drivers/base/dd.c:207:
+EXPORT_SYMBOL_GPL(device_attach);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#478: FILE: drivers/base/dd.c:208:
+EXPORT_SYMBOL_GPL(driver_attach);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 18 warnings, 7 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197275.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
