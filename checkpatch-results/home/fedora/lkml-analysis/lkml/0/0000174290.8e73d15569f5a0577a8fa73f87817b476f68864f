WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
[PATCH] w1: Added the triplet w1 master method and changes w1_search() to use it.

CHECK:SPACING: No space is necessary after a cast
#80: FILE: drivers/w1/w1.c:289:
+		 (unsigned int) sl->reg_num.family,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#81: FILE: drivers/w1/w1.c:290:
+		 (unsigned long long) sl->reg_num.id);

CHECK:SPACING: No space is necessary after a cast
#84: FILE: drivers/w1/w1.c:293:
+		 (unsigned int) sl->reg_num.family,

CHECK:SPACING: No space is necessary after a cast
#85: FILE: drivers/w1/w1.c:294:
+		 (unsigned long long) sl->reg_num.id);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#159: FILE: drivers/w1/w1.c:508:
+	rn = last_rn = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space prohibited after that open parenthesis '('
#168: FILE: drivers/w1/w1.c:514:
+	while ( !last_device && (slave_count++ < dev->max_slave_count) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#168: FILE: drivers/w1/w1.c:514:
+	while ( !last_device && (slave_count++ < dev->max_slave_count) ) {

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#225: FILE: drivers/w1/w1.c:534:
+				search_bit = 1;	  /* took the 0 path last time, so take the 1 path */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#240: FILE: drivers/w1/w1.c:544:
+			if ( (triplet_ret & 0x03) == 0x03 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#240: FILE: drivers/w1/w1.c:544:
+			if ( (triplet_ret & 0x03) == 0x03 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#254: FILE: drivers/w1/w1.c:556:
+		if ( (triplet_ret & 0x03) != 0x03 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#254: FILE: drivers/w1/w1.c:556:
+		if ( (triplet_ret & 0x03) != 0x03 ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#255: FILE: drivers/w1/w1.c:557:
+			if ( (desc_bit == last_zero) || (last_zero < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'desc_bit == last_zero'
#255: FILE: drivers/w1/w1.c:557:
+			if ( (desc_bit == last_zero) || (last_zero < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last_zero < 0'
#255: FILE: drivers/w1/w1.c:557:
+			if ( (desc_bit == last_zero) || (last_zero < 0))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: drivers/w1/w1.h:87:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#313: FILE: drivers/w1/w1.h:104:
+	u8		(*read_bit)(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#316: FILE: drivers/w1/w1.h:107:
+	void		(*write_bit)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#316: FILE: drivers/w1/w1.h:107:
+	void		(*write_bit)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#325: FILE: drivers/w1/w1.h:116:
+	u8		(*touch_bit)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#325: FILE: drivers/w1/w1.h:116:
+	u8		(*touch_bit)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#331: FILE: drivers/w1/w1.h:122:
+	u8		(*read_byte)(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#336: FILE: drivers/w1/w1.h:127:
+	void		(*write_byte)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#336: FILE: drivers/w1/w1.h:127:
+	void		(*write_byte)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#342: FILE: drivers/w1/w1.h:133:
+	u8		(*read_block)(unsigned long, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#342: FILE: drivers/w1/w1.h:133:
+	u8		(*read_block)(unsigned long, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#342: FILE: drivers/w1/w1.h:133:
+	u8		(*read_block)(unsigned long, u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#345: FILE: drivers/w1/w1.h:136:
+	void		(*write_block)(unsigned long, const u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const u8 *' should also have an identifier name
#345: FILE: drivers/w1/w1.h:136:
+	void		(*write_block)(unsigned long, const u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#345: FILE: drivers/w1/w1.h:136:
+	void		(*write_block)(unsigned long, const u8 *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#351: FILE: drivers/w1/w1.h:142:
+	u8		(*triplet)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#351: FILE: drivers/w1/w1.h:142:
+	u8		(*triplet)(unsigned long, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#357: FILE: drivers/w1/w1.h:148:
+	u8		(*reset_bus)(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#361: FILE: drivers/w1/w1.h:151:
+	void		(*search)(unsigned long, w1_slave_found_callback);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'w1_slave_found_callback' should also have an identifier name
#361: FILE: drivers/w1/w1.h:151:
+	void		(*search)(unsigned long, w1_slave_found_callback);

ERROR:SPACING: space prohibited after that open parenthesis '('
#394: FILE: drivers/w1/w1_io.c:146:
+	if ( dev->bus_master->triplet )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#394: FILE: drivers/w1/w1_io.c:146:
+	if ( dev->bus_master->triplet )

CHECK:BRACES: braces {} should be used on all arms of this statement
#394: FILE: drivers/w1/w1_io.c:146:
+	if ( dev->bus_master->triplet )
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#396: FILE: drivers/w1/w1_io.c:148:
+		return(dev->bus_master->triplet(dev->bus_master->data, bdir));
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#396: FILE: drivers/w1/w1_io.c:148:
+	else {

ERROR:SPACING: space prohibited after that open parenthesis '('
#401: FILE: drivers/w1/w1_io.c:153:
+		if ( id_bit && comp_bit )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#401: FILE: drivers/w1/w1_io.c:153:
+		if ( id_bit && comp_bit )

ERROR:SPACING: space prohibited after that open parenthesis '('
#404: FILE: drivers/w1/w1_io.c:156:
+		if ( !id_bit && !comp_bit ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#404: FILE: drivers/w1/w1_io.c:156:
+		if ( !id_bit && !comp_bit ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#413: FILE: drivers/w1/w1_io.c:165:
+		if ( dev->bus_master->touch_bit )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#413: FILE: drivers/w1/w1_io.c:165:
+		if ( dev->bus_master->touch_bit )

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#417: FILE: drivers/w1/w1_io.c:169:
+		return(retval);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 22 warnings, 10 checks, 371 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174290.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
