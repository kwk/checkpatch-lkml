WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
diff -u --recursive --new-file linux-2.4.0-test12/include/linux/sunrpc/clnt.h linux-2.4.0-ping/include/linux/sunrpc/clnt.h

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#60: FILE: include/linux/sunrpc/clnt.h:114:
+u32 *		rpc_call_header(struct rpc_task *task);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#61: FILE: include/linux/sunrpc/clnt.h:115:
+u32 *		rpc_call_verify(struct rpc_task *task);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#92: FILE: include/linux/sunrpc/xprt.h:49:
+				((xprt)->cwnd < 2*RPC_CWNDSCALE)
 				                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_task *' should also have an identifier name
#108: FILE: include/linux/sunrpc/xprt.h:185:
+int			xprt_ping_reserve(struct rpc_task *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_task *' should also have an identifier name
#113: FILE: include/linux/sunrpc/xprt.h:190:
+void			xprt_ping_release(struct rpc_task *);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#172: FILE: net/sunrpc/clnt.c:493:
+	if (!(p = rpc_call_header(task))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#246: FILE: net/sunrpc/clnt.c:690:
+	if (!(p = rpc_call_verify(task)))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#275: FILE: net/sunrpc/clnt.c:780:
+/*
+ * Interpret the result from ping

ERROR:SPACING: space required before the open parenthesis '('
#290: FILE: net/sunrpc/clnt.c:795:
+	switch(status) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: net/sunrpc/clnt.c:815:
+			printk("%s: RPC call returned error %d\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: net/sunrpc/clnt.c:817:
+		rpc_exit(task,status);
 		             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#331: FILE: net/sunrpc/ping.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#332: FILE: net/sunrpc/ping.c:2:
+ * linux/net/sunrpc/ping.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#350: FILE: net/sunrpc/ping.c:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#364: FILE: net/sunrpc/ping.c:34:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ping_call_reserve', this function's name, in a string
#368: FILE: net/sunrpc/ping.c:38:
+	dprintk("RPC: %4d, ping_call_reserve\n", task->tk_pid);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ping_call_allocate', this function's name, in a string
#382: FILE: net/sunrpc/ping.c:52:
+	dprintk("RPC: %4d, ping_call_allocate (status %d)\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#390: FILE: net/sunrpc/ping.c:60:
+	if (!(task->tk_buffer = rpc_malloc(task, bufsiz << 1))) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ping_call_encode', this function's name, in a string
#411: FILE: net/sunrpc/ping.c:81:
+	dprintk("RPC: %4d, ping_call_encode (status %d)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ping_call_transmit', this function's name, in a string
#426: FILE: net/sunrpc/ping.c:96:
+	dprintk("RPC: %4d, ping_call_transmit\n", task->tk_pid);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ping_call_receive', this function's name, in a string
#440: FILE: net/sunrpc/ping.c:110:
+	dprintk("RPC: %4d, ping_call_receive (status %d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#450: FILE: net/sunrpc/ping.c:120:
+				printk(KERN_NOTICE "%s: server %s OK\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#469: FILE: net/sunrpc/ping.c:139:
+				printk(KERN_NOTICE

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#473: FILE: net/sunrpc/ping.c:143:
+				printk(KERN_NOTICE

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#479: FILE: net/sunrpc/ping.c:149:
+		rpc_delay(task, 5*HZ);
 		                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ping_call_exit', this function's name, in a string
#488: FILE: net/sunrpc/ping.c:158:
+	dprintk("RPC: %4d, ping_call_exit (status %d)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rpc_ping', this function's name, in a string
#510: FILE: net/sunrpc/ping.c:180:
+	dprintk("RPC: %4d, rpc_ping\n", task->tk_pid);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rpc_ping', this function's name, in a string
#519: FILE: net/sunrpc/ping.c:189:
+		dprintk("RPC: %4d, rpc_ping, waiting on completion\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rpc_ping', this function's name, in a string
#526: FILE: net/sunrpc/ping.c:196:
+		dprintk("RPC: %4d, rpc_ping, failed to create child process\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rpc_ping', this function's name, in a string
#536: FILE: net/sunrpc/ping.c:206:
+	dprintk("RPC: %4d, rpc_ping, running child process %4d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xprt_ping_reserve', this function's name, in a string
#576: FILE: net/sunrpc/xprt.c:1433:
+	dprintk("RPC: %4d xprt_ping_reserve cong = %ld cwnd = %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: net/sunrpc/xprt.c:1434:
+	dprintk("RPC: %4d xprt_ping_reserve cong = %ld cwnd = %ld\n",
+				task->tk_pid, xprt->cong, xprt->cwnd);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#579: FILE: net/sunrpc/xprt.c:1436:
+	if ((req = xprt->free) != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#579: FILE: net/sunrpc/xprt.c:1436:
+	if ((req = xprt->free) != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#584: FILE: net/sunrpc/xprt.c:1441:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xprt_ping_reserve', this function's name, in a string
#587: FILE: net/sunrpc/xprt.c:1444:
+	dprintk("RPC: %4d xprt_ping_reserve returns %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: net/sunrpc/xprt.c:1445:
+	dprintk("RPC: %4d xprt_ping_reserve returns %d\n",
+				task->tk_pid, task->tk_status);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#590: FILE: net/sunrpc/xprt.c:1447:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#595: FILE: net/sunrpc/xprt.c:1452:
+/*
+ * Release an RPC call slot

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#604: FILE: net/sunrpc/xprt.c:1461:
+	if (!(req = task->tk_rqstp))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000561441.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 24 warnings, 8 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000561441.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
