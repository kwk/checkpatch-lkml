WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
   * (davidm@hpl.hp.com has also expressed interest with respect to the IA64

ERROR:SPACING: space required after that ',' (ctx:VxV)
#70: FILE: arch/i386/kernel/ptrace.c:454:
+	task_ornament_notify_syscall(regs,entryexit);
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#91: FILE: arch/i386/kernel/signal.c:611:
+			int action = task_ornament_notify_signal(signr,&info);
 			                                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#91: FILE: arch/i386/kernel/signal.c:611:
+			int action = task_ornament_notify_signal(signr,&info);
 			                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: arch/i386/kernel/signal.c:612:
+			int action = task_ornament_notify_signal(signr,&info);
+			switch (action) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: arch/i386/kernel/signal.c:617:
+^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: arch/i386/kernel/signal.c:623:
+				if (sigismember(&current->blocked,signr)) {
 				                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#104: FILE: arch/i386/kernel/signal.c:624:
+					send_sig_info(signr,&info,current);
 					                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#104: FILE: arch/i386/kernel/signal.c:624:
+					send_sig_info(signr,&info,current);
 					                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: arch/i386/kernel/signal.c:624:
+					send_sig_info(signr,&info,current);
 					                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: fs/proc/base.c:299:
+static ssize_t pid_taskornlist_read(struct file * file, char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: fs/proc/base.c:299:
+static ssize_t pid_taskornlist_read(struct file * file, char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: fs/proc/base.c:300:
+static ssize_t pid_taskornlist_read(struct file * file, char * buf,
+				size_t count, loff_t *ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#167: FILE: fs/proc/base.c:308:
+static struct file_operations proc_taskornlist_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#168: FILE: fs/proc/base.c:309:
+	read:		pid_taskornlist_read,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/proc/base.c:581:
+  E(PROC_PID_TASKORN,^I"ornaments",^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/proc/base.c:581:
+  E(PROC_PID_TASKORN,	"ornaments",	S_IFREG|S_IRUGO),
                      	            	       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#186: FILE: fs/proc/base.c:581:
+  E(PROC_PID_TASKORN,	"ornaments",	S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#207: FILE: include/linux/init_task.h:79:
+    ornaments:		LIST_HEAD_INIT(tsk.ornaments),			\
              ^

WARNING:INDENTED_LABEL: labels should not be indented
#207: FILE: include/linux/init_task.h:79:
+    ornaments:		LIST_HEAD_INIT(tsk.ornaments),			\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: include/linux/taskornament.h:1:
+/* taskornament.h: task ornament definitions

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#247: FILE: include/linux/taskornament.h:20:
+#include <asm/atomic.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#258: FILE: include/linux/taskornament.h:31:
+struct task_ornament
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#278: FILE: include/linux/taskornament.h:51:
+struct task_ornament_operations
+{

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#349: FILE: include/linux/taskornament.h:122:
+#define task_ornament_valid(to) ((to)->to_magic==TASK_ORNAMENT_MAGIC)
                                                ^

WARNING:INLINE: plain inline is preferred over __inline__
#351: FILE: include/linux/taskornament.h:124:
+static __inline__

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#357: FILE: include/linux/taskornament.h:130:
+extern void __ornput(struct task_ornament *orn);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:INLINE: plain inline is preferred over __inline__
#358: FILE: include/linux/taskornament.h:131:
+static __inline__

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: include/linux/taskornament.h:138:
+extern void task_ornament_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#366: FILE: include/linux/taskornament.h:139:
+extern struct task_ornament *task_ornament_alloc(struct task_ornament_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_ornament_operations *' should also have an identifier name
#366: FILE: include/linux/taskornament.h:139:
+extern struct task_ornament *task_ornament_alloc(struct task_ornament_operations *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: include/linux/taskornament.h:140:
+extern int  __task_ornament_add(struct task_struct *target, struct task_ornament *orn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#368: FILE: include/linux/taskornament.h:141:
+extern void __task_ornament_remove(struct task_struct *target, struct task_ornament *orn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: include/linux/taskornament.h:142:
+extern void exit_task_ornaments(int exit_code);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#370: FILE: include/linux/taskornament.h:143:
+extern int  task_ornament_notify_signal(int signr, siginfo_t *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#371: FILE: include/linux/taskornament.h:144:
+extern void task_ornament_notify_execve(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#372: FILE: include/linux/taskornament.h:145:
+extern void task_ornament_notify_fork(struct task_struct *child, unsigned long clone_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#373: FILE: include/linux/taskornament.h:146:
+extern int  task_ornament_request_notify_resume(struct task_ornament *orn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#381: FILE: include/linux/taskornament.h:154:
+extern struct task_ornament *__task_ornament_find(struct task_struct *target,

WARNING:INLINE: plain inline is preferred over __inline__
#384: FILE: include/linux/taskornament.h:157:
+static __inline__

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: include/linux/taskornament.h:161:
+	int ret;
+	task_lock(target);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: include/linux/taskornament.h:162:
+	ret = __task_ornament_add(target,orn);
 	                                ^

WARNING:INLINE: plain inline is preferred over __inline__
#394: FILE: include/linux/taskornament.h:167:
+static __inline__

ERROR:SPACING: space required after that ',' (ctx:VxV)
#398: FILE: include/linux/taskornament.h:171:
+	__task_ornament_remove(target,orn);
 	                             ^

WARNING:INLINE: plain inline is preferred over __inline__
#403: FILE: include/linux/taskornament.h:176:
+static __inline__

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: include/linux/taskornament.h:181:
+	struct task_ornament *result;
+	task_lock(target);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: include/linux/taskornament.h:182:
+	result = __task_ornament_find(target,type);
 	                                    ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#414: FILE: include/linux/taskornament.h:187:
+extern struct file_operations task_ornament_ptrace_operations;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: include/linux/taskornament.h:188:
+extern ssize_t proc_pid_read_taskornlist(struct task_struct *tsk, struct file *file,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: kernel/fork.c:732:
+		task_ornament_notify_fork(p,clone_flags);
 		                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#502: FILE: kernel/taskornament.c:1:
+/* taskornament.c: task ornament handling

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#516: FILE: kernel/taskornament.c:15:
+#include <asm/uaccess.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#518: FILE: kernel/taskornament.c:17:
+EXPORT_SYMBOL_GPL(__ornput);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#519: FILE: kernel/taskornament.c:18:
+EXPORT_SYMBOL_GPL(task_ornament_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#520: FILE: kernel/taskornament.c:19:
+EXPORT_SYMBOL_GPL(__task_ornament_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#521: FILE: kernel/taskornament.c:20:
+EXPORT_SYMBOL_GPL(__task_ornament_remove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#522: FILE: kernel/taskornament.c:21:
+EXPORT_SYMBOL_GPL(__task_ornament_find);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#523: FILE: kernel/taskornament.c:22:
+EXPORT_SYMBOL_GPL(task_ornament_request_notify_resume);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: kernel/taskornament.c:25:
+#define ktrace(FMT,...)
                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#528: FILE: kernel/taskornament.c:27:
+#define task_ornament_buoy_init(x)				\
+do {								\
+	INIT_LIST_HEAD(&(x)->to_list);				\
+	(x)->to_ops = NULL;					\
+	atomic_set(&(x)->to_count,0x3fffffff);			\
+	(x)->to_magic = TASK_ORNAMENT_MAGIC;			\
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: kernel/taskornament.c:31:
+	atomic_set(&(x)->to_count,0x3fffffff);			\
 	                         ^

ERROR:SPACING: space required before the open parenthesis '('
#534: FILE: kernel/taskornament.c:33:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#539: FILE: kernel/taskornament.c:38:
+	list_add(&orn->to_list,&after->to_list);
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#539: FILE: kernel/taskornament.c:38:
+	list_add(&orn->to_list,&after->to_list);
 	                       ^

CHECK:SPACING: No space is necessary after a cast
#567: FILE: kernel/taskornament.c:66:
+	orn = (struct task_ornament *) kmem_cache_alloc(task_ornament_cachep,SLAB_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#567: FILE: kernel/taskornament.c:66:
+	orn = (struct task_ornament *) kmem_cache_alloc(task_ornament_cachep,SLAB_KERNEL);
 	                                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#574: FILE: kernel/taskornament.c:73:
+		atomic_set(&orn->to_count,1);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#596: FILE: kernel/taskornament.c:95:
+	kmem_cache_free(task_ornament_cachep,orn);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: kernel/taskornament.c:109:
+	ktrace("==>__task_ornament_add(%d,%p)\n",target->pid,orn);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: kernel/taskornament.c:109:
+	ktrace("==>__task_ornament_add(%d,%p)\n",target->pid,orn);
 	                                                    ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__task_ornament_add', this function's name, in a string
#610: FILE: kernel/taskornament.c:109:
+	ktrace("==>__task_ornament_add(%d,%p)\n",target->pid,orn);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: kernel/taskornament.c:113:
+		      orn,__builtin_return_address(0));
 		         ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#617: FILE: kernel/taskornament.c:116:
+	if (target->state!=TASK_ZOMBIE && !(target->flags&PF_EXITING)) {
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#617: FILE: kernel/taskornament.c:116:
+	if (target->state!=TASK_ZOMBIE && !(target->flags&PF_EXITING)) {
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#618: FILE: kernel/taskornament.c:117:
+		list_for_each(_ptr,&target->ornaments) {
 		                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#618: FILE: kernel/taskornament.c:117:
+		list_for_each(_ptr,&target->ornaments) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#619: FILE: kernel/taskornament.c:118:
+			struct task_ornament *ptr = list_entry(_ptr,struct task_ornament,to_list);
 			                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#619: FILE: kernel/taskornament.c:118:
+			struct task_ornament *ptr = list_entry(_ptr,struct task_ornament,to_list);
 			                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#620: FILE: kernel/taskornament.c:119:
+			struct task_ornament *ptr = list_entry(_ptr,struct task_ornament,to_list);
+			if (ptr->to_order>orn->to_order)

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#620: FILE: kernel/taskornament.c:119:
+			if (ptr->to_order>orn->to_order)
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#624: FILE: kernel/taskornament.c:123:
+		list_add_tail(&orn->to_list,_ptr);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#630: FILE: kernel/taskornament.c:129:
+	ktrace("<== __task_ornament_add() = %d\n",ret);
 	                                         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__task_ornament_add', this function's name, in a string
#630: FILE: kernel/taskornament.c:129:
+	ktrace("<== __task_ornament_add() = %d\n",ret);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#643: FILE: kernel/taskornament.c:142:
+	ktrace("==>__task_ornament_remove(%d,%p)\n",target->pid,orn);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#643: FILE: kernel/taskornament.c:142:
+	ktrace("==>__task_ornament_remove(%d,%p)\n",target->pid,orn);
 	                                                       ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__task_ornament_remove', this function's name, in a string
#643: FILE: kernel/taskornament.c:142:
+	ktrace("==>__task_ornament_remove(%d,%p)\n",target->pid,orn);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#647: FILE: kernel/taskornament.c:146:
+		      orn,__builtin_return_address(0));
 		         ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#649: FILE: kernel/taskornament.c:148:
+	if (target->state!=TASK_ZOMBIE && !(target->flags&PF_EXITING)) {
 	                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#649: FILE: kernel/taskornament.c:148:
+	if (target->state!=TASK_ZOMBIE && !(target->flags&PF_EXITING)) {
 	                                                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__task_ornament_remove', this function's name, in a string
#654: FILE: kernel/taskornament.c:153:
+	ktrace("<==__task_ornament_remove()\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#669: FILE: kernel/taskornament.c:168:
+	if (!type) return NULL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#671: FILE: kernel/taskornament.c:170:
+	for (ptr=target->ornaments.next; ptr!=&target->ornaments; ptr=ptr->next) {
 	        ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxO)
#671: FILE: kernel/taskornament.c:170:
+	for (ptr=target->ornaments.next; ptr!=&target->ornaments; ptr=ptr->next) {
 	                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#671: FILE: kernel/taskornament.c:170:
+	for (ptr=target->ornaments.next; ptr!=&target->ornaments; ptr=ptr->next) {
 	                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#671: FILE: kernel/taskornament.c:170:
+	for (ptr=target->ornaments.next; ptr!=&target->ornaments; ptr=ptr->next) {
 	                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#672: FILE: kernel/taskornament.c:171:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#672: FILE: kernel/taskornament.c:171:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#676: FILE: kernel/taskornament.c:175:
+			      orn,__builtin_return_address(0));
 			         ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#678: FILE: kernel/taskornament.c:177:
+		if (orn->to_ops==type)
 		               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exit_task_ornaments', this function's name, in a string
#702: FILE: kernel/taskornament.c:201:
+	ktrace("==>exit_task_ornaments()\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#707: FILE: kernel/taskornament.c:206:
+		orn = list_entry(tsk->ornaments.next,struct task_ornament,to_list);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#707: FILE: kernel/taskornament.c:206:
+		orn = list_entry(tsk->ornaments.next,struct task_ornament,to_list);
 		                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: kernel/taskornament.c:211:
+			panic("Exit: invalid task ornament: %p\n",orn);
 			                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#715: FILE: kernel/taskornament.c:214:
+			orn->to_ops->exit(orn,exit_code);
 			                     ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exit_task_ornaments', this function's name, in a string
#724: FILE: kernel/taskornament.c:223:
+	ktrace("<==exit_task_ornaments()\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#739: FILE: kernel/taskornament.c:238:
+	ktrace("==>task_ornament_notify_resume(%p,%p,%08x)\n",regs,oldset,ti_flags);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#739: FILE: kernel/taskornament.c:238:
+	ktrace("==>task_ornament_notify_resume(%p,%p,%08x)\n",regs,oldset,ti_flags);
 	                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#739: FILE: kernel/taskornament.c:238:
+	ktrace("==>task_ornament_notify_resume(%p,%p,%08x)\n",regs,oldset,ti_flags);
 	                                                                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_resume', this function's name, in a string
#739: FILE: kernel/taskornament.c:238:
+	ktrace("==>task_ornament_notify_resume(%p,%p,%08x)\n",regs,oldset,ti_flags);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#754: FILE: kernel/taskornament.c:253:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#754: FILE: kernel/taskornament.c:253:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#757: FILE: kernel/taskornament.c:256:
+			panic("Resume: invalid task ornament: %p\n",orn);
 			                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#759: FILE: kernel/taskornament.c:258:
+		if (!(orn->to_flags&TOF_REQ_NFY_RESUME) || !orn->to_ops || !orn->to_ops->resume) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#769: FILE: kernel/taskornament.c:268:
+		__add_orn(tsk,&buoy,orn);
 		             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#769: FILE: kernel/taskornament.c:268:
+		__add_orn(tsk,&buoy,orn);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#769: FILE: kernel/taskornament.c:268:
+		__add_orn(tsk,&buoy,orn);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#779: FILE: kernel/taskornament.c:278:
+		__remove_orn(tsk,&buoy);
 		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#779: FILE: kernel/taskornament.c:278:
+		__remove_orn(tsk,&buoy);
 		                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_resume', this function's name, in a string
#784: FILE: kernel/taskornament.c:283:
+	ktrace("<==task_ornament_notify_resume()\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#804: FILE: kernel/taskornament.c:303:
+	ktrace("==>task_ornament_notify_signal(%d,%p)\n",signr,info);
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#804: FILE: kernel/taskornament.c:303:
+	ktrace("==>task_ornament_notify_signal(%d,%p)\n",signr,info);
 	                                                      ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_signal', this function's name, in a string
#804: FILE: kernel/taskornament.c:303:
+	ktrace("==>task_ornament_notify_signal(%d,%p)\n",signr,info);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#818: FILE: kernel/taskornament.c:317:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#818: FILE: kernel/taskornament.c:317:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#821: FILE: kernel/taskornament.c:320:
+			panic("Signal: invalid task ornament: %p\n",orn);
 			                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#833: FILE: kernel/taskornament.c:332:
+		__add_orn(tsk,&buoy,orn);
 		             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#833: FILE: kernel/taskornament.c:332:
+		__add_orn(tsk,&buoy,orn);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#833: FILE: kernel/taskornament.c:332:
+		__add_orn(tsk,&buoy,orn);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#837: FILE: kernel/taskornament.c:336:
+		orn->to_ops->signal(orn,signr,info,&action);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#837: FILE: kernel/taskornament.c:336:
+		orn->to_ops->signal(orn,signr,info,&action);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#837: FILE: kernel/taskornament.c:336:
+		orn->to_ops->signal(orn,signr,info,&action);
 		                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#837: FILE: kernel/taskornament.c:336:
+		orn->to_ops->signal(orn,signr,info,&action);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#843: FILE: kernel/taskornament.c:342:
+		__remove_orn(tsk,&buoy);
 		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#843: FILE: kernel/taskornament.c:342:
+		__remove_orn(tsk,&buoy);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#848: FILE: kernel/taskornament.c:347:
+	ktrace("<==task_ornament_notify_signal() = %d\n",action);
 	                                                ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_signal', this function's name, in a string
#848: FILE: kernel/taskornament.c:347:
+	ktrace("<==task_ornament_notify_signal() = %d\n",action);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_execve', this function's name, in a string
#866: FILE: kernel/taskornament.c:365:
+	ktrace("==>task_ornament_notify_execve()\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#879: FILE: kernel/taskornament.c:378:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#879: FILE: kernel/taskornament.c:378:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#882: FILE: kernel/taskornament.c:381:
+			panic("Execve: invalid task ornament: %p\n",orn);
 			                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#894: FILE: kernel/taskornament.c:393:
+		__add_orn(tsk,&buoy,orn);
 		             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#894: FILE: kernel/taskornament.c:393:
+		__add_orn(tsk,&buoy,orn);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#894: FILE: kernel/taskornament.c:393:
+		__add_orn(tsk,&buoy,orn);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#904: FILE: kernel/taskornament.c:403:
+		__remove_orn(tsk,&buoy);
 		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#904: FILE: kernel/taskornament.c:403:
+		__remove_orn(tsk,&buoy);
 		                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_execve', this function's name, in a string
#909: FILE: kernel/taskornament.c:408:
+	ktrace("<==task_ornament_notify_execve()\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#928: FILE: kernel/taskornament.c:427:
+	ktrace("==>task_ornament_notify_fork(%d,%lu)\n",child->pid,clone_flags);
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#928: FILE: kernel/taskornament.c:427:
+	ktrace("==>task_ornament_notify_fork(%d,%lu)\n",child->pid,clone_flags);
 	                                                          ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_fork', this function's name, in a string
#928: FILE: kernel/taskornament.c:427:
+	ktrace("==>task_ornament_notify_fork(%d,%lu)\n",child->pid,clone_flags);

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#941: FILE: kernel/taskornament.c:440:
+		if (ptr==&buoy.to_list)
 		       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#941: FILE: kernel/taskornament.c:440:
+		if (ptr==&buoy.to_list)
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#944: FILE: kernel/taskornament.c:443:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#944: FILE: kernel/taskornament.c:443:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#947: FILE: kernel/taskornament.c:446:
+			panic("Fork: invalid task ornament: %p\n",orn);
 			                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#959: FILE: kernel/taskornament.c:458:
+		__add_orn(tsk,&buoy,orn);
 		             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#959: FILE: kernel/taskornament.c:458:
+		__add_orn(tsk,&buoy,orn);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#959: FILE: kernel/taskornament.c:458:
+		__add_orn(tsk,&buoy,orn);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#963: FILE: kernel/taskornament.c:462:
+		orn->to_ops->fork(orn,child,clone_flags);
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#963: FILE: kernel/taskornament.c:462:
+		orn->to_ops->fork(orn,child,clone_flags);
 		                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#969: FILE: kernel/taskornament.c:468:
+ ^I^I__remove_orn(tsk,&buoy);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#969: FILE: kernel/taskornament.c:468:
+ ^I^I__remove_orn(tsk,&buoy);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: kernel/taskornament.c:468:
+ ^I^I__remove_orn(tsk,&buoy);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#969: FILE: kernel/taskornament.c:468:
+ 		__remove_orn(tsk,&buoy);
  		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#969: FILE: kernel/taskornament.c:468:
+ 		__remove_orn(tsk,&buoy);
  		                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_fork', this function's name, in a string
#974: FILE: kernel/taskornament.c:473:
+	ktrace("<==task_ornament_notify_fork()\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#993: FILE: kernel/taskornament.c:492:
+	ktrace("==>task_ornament_notify_syscall(%d)\n",entryexit);
 	                                              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_syscall', this function's name, in a string
#993: FILE: kernel/taskornament.c:492:
+	ktrace("==>task_ornament_notify_syscall(%d)\n",entryexit);

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#1005: FILE: kernel/taskornament.c:504:
+		if (ptr==&buoy.to_list)
 		       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1005: FILE: kernel/taskornament.c:504:
+		if (ptr==&buoy.to_list)
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1008: FILE: kernel/taskornament.c:507:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1008: FILE: kernel/taskornament.c:507:
+		orn = list_entry(ptr,struct task_ornament,to_list);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1011: FILE: kernel/taskornament.c:510:
+			panic("SyscallTrace: invalid task ornament: %p\n",orn);
 			                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1023: FILE: kernel/taskornament.c:522:
+		__add_orn(tsk,&buoy,orn);
 		             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1023: FILE: kernel/taskornament.c:522:
+		__add_orn(tsk,&buoy,orn);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1023: FILE: kernel/taskornament.c:522:
+		__add_orn(tsk,&buoy,orn);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1027: FILE: kernel/taskornament.c:526:
+		orn->to_ops->syscall_trace(orn,regs,entryexit);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1027: FILE: kernel/taskornament.c:526:
+		orn->to_ops->syscall_trace(orn,regs,entryexit);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1033: FILE: kernel/taskornament.c:532:
+		__remove_orn(tsk,&buoy);
 		                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1033: FILE: kernel/taskornament.c:532:
+		__remove_orn(tsk,&buoy);
 		                 ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_notify_syscall', this function's name, in a string
#1038: FILE: kernel/taskornament.c:537:
+	ktrace("<==task_ornament_notify_syscall()\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1050: FILE: kernel/taskornament.c:549:
+	ktrace("==>task_ornament_request_notify_resume(%p)\n",orn);
 	                                                     ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_request_notify_resume', this function's name, in a string
#1050: FILE: kernel/taskornament.c:549:
+	ktrace("==>task_ornament_request_notify_resume(%p)\n",orn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1055: FILE: kernel/taskornament.c:554:
+	printk("-- setting flag on %p\n",tsk);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1055: FILE: kernel/taskornament.c:554:
+	printk("-- setting flag on %p\n",tsk);
 	                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1057: FILE: kernel/taskornament.c:556:
+		printk("-- (pid %d)\n",tsk->pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1057: FILE: kernel/taskornament.c:556:
+		printk("-- (pid %d)\n",tsk->pid);
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1060: FILE: kernel/taskornament.c:559:
+		set_tsk_thread_flag(tsk,TIF_NOTIFY_RESUME);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1067: FILE: kernel/taskornament.c:566:
+	ktrace("<==task_ornament_request_notify_resume() = %d\n",ret);
 	                                                        ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'task_ornament_request_notify_resume', this function's name, in a string
#1067: FILE: kernel/taskornament.c:566:
+	ktrace("<==task_ornament_request_notify_resume() = %d\n",ret);

CHECK:SPACING: No space is necessary after a cast
#1090: FILE: kernel/taskornament.c:589:
+	buf = (char*) __get_free_page(GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1090: FILE: kernel/taskornament.c:589:
+	buf = (char*) __get_free_page(GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#1094: FILE: kernel/taskornament.c:593:
+	scratch = (char*) __get_free_page(GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1094: FILE: kernel/taskornament.c:593:
+	scratch = (char*) __get_free_page(GFP_KERNEL);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1101: FILE: kernel/taskornament.c:600:
+	while (count>0) {
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1107: FILE: kernel/taskornament.c:606:
+		list_for_each(_ptr,&tsk->ornaments) {
 		                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1107: FILE: kernel/taskornament.c:606:
+		list_for_each(_ptr,&tsk->ornaments) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1108: FILE: kernel/taskornament.c:607:
+			orn = list_entry(_ptr,struct task_ornament,to_list);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1108: FILE: kernel/taskornament.c:607:
+			orn = list_entry(_ptr,struct task_ornament,to_list);
 			                                          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1111: FILE: kernel/taskornament.c:610:
+			if (index==0)
 			         ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#1116: FILE: kernel/taskornament.c:615:
+		if (_ptr==&tsk->ornaments) {
 		        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1116: FILE: kernel/taskornament.c:615:
+		if (_ptr==&tsk->ornaments) {
 		          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1134: FILE: kernel/taskornament.c:633:
+				orn->to_flags&TOF_REQ_NFY_RESUME ? " - Resume Notify Req\n" : ""
 				             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1139: FILE: kernel/taskornament.c:638:
+			curr = orn->to_ops->proc_read(orn,curr,scratch+PAGE_SIZE-1);
 			                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1139: FILE: kernel/taskornament.c:638:
+			curr = orn->to_ops->proc_read(orn,curr,scratch+PAGE_SIZE-1);
 			                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1139: FILE: kernel/taskornament.c:638:
+			curr = orn->to_ops->proc_read(orn,curr,scratch+PAGE_SIZE-1);
 			                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1139: FILE: kernel/taskornament.c:638:
+			curr = orn->to_ops->proc_read(orn,curr,scratch+PAGE_SIZE-1);
 			                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1153: FILE: kernel/taskornament.c:652:
+				memcpy(buf+ret,curr,count);
 				          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1153: FILE: kernel/taskornament.c:652:
+				memcpy(buf+ret,curr,count);
 				              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1153: FILE: kernel/taskornament.c:652:
+				memcpy(buf+ret,curr,count);
 				                   ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1158: FILE: kernel/taskornament.c:657:
+			}
+			else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1158: FILE: kernel/taskornament.c:657:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1160: FILE: kernel/taskornament.c:659:
+				memcpy(buf+ret,curr,qty);
 				          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1160: FILE: kernel/taskornament.c:659:
+				memcpy(buf+ret,curr,qty);
 				              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1160: FILE: kernel/taskornament.c:659:
+				memcpy(buf+ret,curr,qty);
 				                   ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1166: FILE: kernel/taskornament.c:665:
+
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1167: FILE: kernel/taskornament.c:666:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1167: FILE: kernel/taskornament.c:666:
+		else {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1172: FILE: kernel/taskornament.c:671:
+		if (qty==0)
 		       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1178: FILE: kernel/taskornament.c:677:
+	if (ret>count) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1178: FILE: kernel/taskornament.c:677:
+	if (ret>count) BUG();
 	       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1178: FILE: kernel/taskornament.c:677:
+	if (ret>count) BUG();

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1181: FILE: kernel/taskornament.c:680:
+	if (ret>0) {
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1182: FILE: kernel/taskornament.c:681:
+		if (copy_to_user(ubuf,buf,ret))
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1182: FILE: kernel/taskornament.c:681:
+		if (copy_to_user(ubuf,buf,ret))
 		                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1189: FILE: kernel/taskornament.c:688:
+	if (scratch) free_page((unsigned long)scratch);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1190: FILE: kernel/taskornament.c:689:
+	if (buf) free_page((unsigned long)buf);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 147 errors, 50 warnings, 29 checks, 1084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477650.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
