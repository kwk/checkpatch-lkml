WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#61: FILE: rt.c:82:
+		(unsigned long) __builtin_return_address(0))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#63: FILE: rt.c:84:
+#define __LOCK_STAT_RT_MUTEX_LOCK(a)				\
+	rt_mutex_lock(a);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#70: FILE: rt.c:91:
+		(unsigned long) __builtin_return_address(0))

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#72: FILE: rt.c:93:
+#define __LOCK_STAT_RT_MUTEX_LOCK_INTERRUPTIBLE(a)		\
+	rt_mutex_lock_interruptible(a, b);

CHECK:SPACING: No space is necessary after a cast
#79: FILE: rt.c:100:
+		(unsigned long) __builtin_return_address(0))

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#81: FILE: rt.c:102:
+#define __LOCK_STAT_RT_MUTEX_TRYLOCK(a)				\
+	rt_mutex_trylock(a);

CHECK:SPACING: No space is necessary after a cast
#88: FILE: rt.c:109:
+		(unsigned long) __builtin_return_address(0))

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#90: FILE: rt.c:111:
+#define __LOCK_STAT_RT_SPIN_LOCK(a)				\
+	__rt_spin_lock(a);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#209: FILE: rt.c:287:
+EXPORT_SYMBOL(rt_read_lock_with_ip);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: rt.c:323:
+	rt_write_lock_with_ip(rwlock,
+				(unsigned long) __builtin_return_address(0));

CHECK:SPACING: No space is necessary after a cast
#221: FILE: rt.c:323:
+				(unsigned long) __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: rt.c:336:
+	rt_read_lock_with_ip(rwlock,
+				(unsigned long) __builtin_return_address(0));

CHECK:SPACING: No space is necessary after a cast
#234: FILE: rt.c:336:
+				(unsigned long) __builtin_return_address(0));

CHECK:SPACING: No space is necessary after a cast
#394: FILE: rt.c:647:
+		rt_mutex_lock_with_ip(&sem->lock, (unsigned long) __builtin_return_address(0));

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#434: FILE: rtmutex.c:77:
+	lock->owner = (struct task_struct *) NULL;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#542: FILE: rtmutex.c:866:
+#if 0

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#544: FILE: rtmutex.c:868:
+#define __RT_MUTEX_TRYLOCK_WITH_IP(a)	\
+	rt_mutex_trylock_with_ip(a, (unsigned long) __builtin_return_address(0));

CHECK:SPACING: No space is necessary after a cast
#545: FILE: rtmutex.c:869:
+	rt_mutex_trylock_with_ip(a, (unsigned long) __builtin_return_address(0));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#547: FILE: rtmutex.c:871:
+#define __RT_MUTEX_TRYLOCK_WITH_IP(a)	\
+	rt_mutex_trylock(a);

CHECK:SPACING: No space is necessary after a cast
#575: FILE: rtmutex.c:907:
+	rt_spin_lock_with_ip(lock, (unsigned long) __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: rtmutex.c:936:
+__rt_spin_lock_init_annotated(spinlock_t *lock, char *name,
+				struct lock_class_key *key,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: rtmutex.c:1223:
+rt_mutex_fastlock_with_ip(struct rt_mutex *lock, int state,
+		  int detect_deadlock,

CHECK:BRACES: braces {} should be used on all arms of this statement
#727: FILE: rtmutex.c:1229:
+	if (!detect_deadlock && likely(rt_mutex_cmpxchg(lock, NULL, current))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#730: FILE: rtmutex.c:1232:
+	} else

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#774: FILE: rtmutex.c:1277:
+#define PANIC_IF_IN_ATOMIC()					\
+	if (							\
+	    (system_state == SYSTEM_RUNNING) &&			\
+	     in_atomic() &&					\
+	     !oops_in_progress &&				\
+	     !current->exit_state				\
+	     ) {						\
+		panic("%s: in atomic: " "%s/0x%08x/%d\n",	\
+			__func__, current->comm, preempt_count(), current->pid);	\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'system_state == SYSTEM_RUNNING'
#775: FILE: rtmutex.c:1278:
+	if (							\
+	    (system_state == SYSTEM_RUNNING) &&			\
+	     in_atomic() &&					\
+	     !oops_in_progress &&				\
+	     !current->exit_state				\
+	     ) {						\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#777: FILE: rtmutex.c:1280:
+	     in_atomic() &&					\

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#781: FILE: rtmutex.c:1284:
+		panic("%s: in atomic: " "%s/0x%08x/%d\n",	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: rtmutex.c:1310:
+	rt_mutex_fastlock_with_ip(lock, TASK_UNINTERRUPTIBLE, 0, rt_mutex_slowlock,
+										ip);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#812: FILE: rtmutex.c:1315:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: rtmutex.c:1456:
+void __rt_mutex_init_annotated(struct rt_mutex *lock, const char *name,
+				LOCK_STAT_NOTE_PARAM_DECL,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#913: FILE: rtmutex.c:1465:
+	BUG_ON(!lsobject);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#916: FILE: rtmutex.c:1468:
+	if(!lock_stat_is_initialized(&lock->lock_stat))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#916: FILE: rtmutex.c:1468:
+	if(!lock_stat_is_initialized(&lock->lock_stat))

CHECK:SPACING: No space is necessary after a cast
#919: FILE: rtmutex.c:1471:
+		lock->lock_stat->file	= (char *) _file;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000009272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 13 warnings, 21 checks, 843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000009272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
