WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#39: 
Of course I can seperate this, if you want the pure unilining stuff only.
                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#72: FILE: drivers/net/typhoon.c:355:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#124: FILE: drivers/net/typhoon.c:1772:
+		if(vlgrp != NULL && rx->rxStatus & TYPHOON_RX_VLAN)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <rxStatus>
#124: FILE: drivers/net/typhoon.c:1772:
+		if(vlgrp != NULL && rx->rxStatus & TYPHOON_RX_VLAN)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vlgrp"
#124: FILE: drivers/net/typhoon.c:1772:
+		if(vlgrp != NULL && rx->rxStatus & TYPHOON_RX_VLAN)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#134: FILE: drivers/net/typhoon.c:2260:
+	if(typhoon_get_vlgrp(tp) && tp->wol_events & TYPHOON_WAKE_MAGIC_PKT) {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#202: FILE: include/linux/if_vlan.h:135:
+#define VLAN_DEV_INFO(x) ((struct vlan_dev_info *)(x->priv))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#236: FILE: include/linux/if_vlan.h:144:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: include/linux/if_vlan.h:146:
+int __vlan_hwaccel_rx(struct sk_buff *skb, struct vlan_group *grp,
+				    unsigned short vlan_tag, int polling);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#313: FILE: include/linux/if_vlan.h:209:
+	if (veth->h_vlan_proto != htons(ETH_P_8021Q)) {
 		return -EINVAL;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: include/linux/if_vlan.h:268:
+static inline int vlan_hwaccel_receive_skb(struct sk_buff *skb,
+				  struct vlan_group *grp,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#362: FILE: include/linux/if_vlan.h:287:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#364: FILE: include/linux/if_vlan.h:289:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: net/8021q/vlan_dev.c:115:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#424: FILE: net/8021q/vlan_dev.c:125:
+		struct sk_buff *sk_tmp = skb;
+		skb = skb_realloc_headroom(sk_tmp, VLAN_HLEN);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#427: FILE: net/8021q/vlan_dev.c:128:
+			printk(KERN_ERR "vlan: failed to realloc headroom\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#433: FILE: net/8021q/vlan_dev.c:134:
+			printk(KERN_ERR "vlan: failed to unshare skbuff\n");

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#444: FILE: net/8021q/vlan_dev.c:145:
+	veth->h_vlan_proto = __constant_htons(ETH_P_8021Q);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#449: FILE: net/8021q/vlan_dev.c:150:
+	skb->protocol = __constant_htons(ETH_P_8021Q);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: net/8021q/vlan_dev.c:187:
+int __vlan_hwaccel_rx(struct sk_buff *skb,
+				    struct vlan_group *grp,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb->dev"
#490: FILE: net/8021q/vlan_dev.c:191:
+	if (skb->dev == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#499: FILE: net/8021q/vlan_dev.c:200:
+
+

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#502: FILE: net/8021q/vlan_dev.c:203:
+	return (polling ? netif_receive_skb(skb) : netif_rx(skb));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085903.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 7 warnings, 12 checks, 506 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000085903.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
