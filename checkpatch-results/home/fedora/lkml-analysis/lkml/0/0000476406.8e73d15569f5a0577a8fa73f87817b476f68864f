WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
RCS file: /cvsdev/hhl-2.4.17/linux/drivers/acpi/include/platform/aclinux.h,v

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: net/sk98lin/skproc.c:349:
+		tmp[i++] = digits[do_div(&num,base)];
 		                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:SPACING: space required before the open brace '{'
#166: FILE: video/matrox/matroxfb_maven.c:712:
+				if (b > 65535){ /* messy stuff to make sure b is less than 65536 */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#168: FILE: video/matrox/matroxfb_maven.c:714:
+					b = (b & 0xffff0000)/(b & 0xffff) + 1;
 					                    ^

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#543: FILE: div64.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#544: FILE: div64.h:2:
+ * include/linux/div64.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: div64.h:6:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: div64.h:11:
+ * If you really *really* need this, #define USE_SLOW_64BIT_DIVIDES $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: div64.h:14:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#562: FILE: div64.h:20:
+#include <asm/processor.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#567: FILE: div64.h:25:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#570: FILE: div64.h:28:
+# if defined(CONFIG_X86) || defined(CONFIG_ARCH_S390) || defined(CONFIG_MIPS) || defined(__mc68000__)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#576: FILE: div64.h:34:
+#include <asm/div64.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#578: FILE: div64.h:36:
+static inline int do_div(unsigned long long * n, uint16_t base)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#583: FILE: div64.h:41:
+	 * the case of n < 32 bits (vsprintf does this a lot) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open brace '{'
#584: FILE: div64.h:42:
+	if ((BITS_PER_LONG == 64) || (t == (unsigned long)t)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'BITS_PER_LONG == 64'
#584: FILE: div64.h:42:
+	if ((BITS_PER_LONG == 64) || (t == (unsigned long)t)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't == (unsigned long)t'
#584: FILE: div64.h:42:
+	if ((BITS_PER_LONG == 64) || (t == (unsigned long)t)){

CHECK:SPACING: No space is necessary after a cast
#585: FILE: div64.h:43:
+		res = ((unsigned long) t) % base;

CHECK:SPACING: No space is necessary after a cast
#586: FILE: div64.h:44:
+		t = ((unsigned long) t) / base;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: div64.h:46:
+#ifndef USE_SLOW_64BIT_DIVIDES $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#589: FILE: div64.h:47:
+		switch (base) {
+			case 8:
[...]
+			case 16:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#591: FILE: div64.h:49:
+				res = ((unsigned long) t & 0x7);

CHECK:SPACING: No space is necessary after a cast
#595: FILE: div64.h:53:
+				res = ((unsigned long) t & 0xf);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#599: FILE: div64.h:57:
+				printk(KERN_WARNING "do_div called at 0x%x\n with unsupported base %d", current_text_addr(), base);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#599: FILE: div64.h:57:
+				printk(KERN_WARNING "do_div called at 0x%x\n with unsupported base %d", current_text_addr(), base);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_div', this function's name, in a string
#599: FILE: div64.h:57:
+				printk(KERN_WARNING "do_div called at 0x%x\n with unsupported base %d", current_text_addr(), base);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: div64.h:66:
+		unsigned long low, low2, high;
+		low  = (t) & 0xffffffff;

CHECK:SPACING: No space is necessary after a cast
#621: FILE: div64.h:79:
+			((long long) high << 32);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#628: FILE: div64.h:86:
+
+

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#656: FILE: vsprintf.c:168:
+		tmp[i++] = digits[do_div(&num,base)];
 		                             ^

CHECK:SPACING: No space is necessary after a cast
#676: FILE: vsprintf.c:436:
+				num = (signed long long) va_arg(args, long);

CHECK:SPACING: No space is necessary after a cast
#690: FILE: vsprintf.c:445:
+				num = (signed long long) va_arg(args, int);

CHECK:SPACING: No space is necessary after a cast
#697: FILE: vsprintf.c:451:
+				num = (signed long long) va_arg(args, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 19 warnings, 13 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
