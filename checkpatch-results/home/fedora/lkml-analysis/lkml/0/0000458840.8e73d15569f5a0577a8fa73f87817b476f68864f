WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
The following patch for 2.5.14 kernel, applies cleanly to the 2.5.15 kernel.

WARNING:TYPO_SPELLING: 'uppon' may be misspelled - perhaps 'upon'?
#32: 
available uppon request ;)
          ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Useage' may be misspelled - perhaps 'Usage'?
#39: 
Useage:  echo 1 > /proc/sys/kernel/core_dumps_threads
^^^^^^

ERROR:SPACING: space prohibited after that open parenthesis '('
#60: FILE: arch/i386/kernel/i387.c:532:
+int dump_task_fpu( struct task_struct *tsk, struct user_i387_struct *fpu )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#60: FILE: arch/i386/kernel/i387.c:532:
+int dump_task_fpu( struct task_struct *tsk, struct user_i387_struct *fpu )

ERROR:SPACING: space prohibited after that open parenthesis '('
#65: FILE: arch/i386/kernel/i387.c:537:
+	if ( fpvalid ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#65: FILE: arch/i386/kernel/i387.c:537:
+	if ( fpvalid ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#66: FILE: arch/i386/kernel/i387.c:538:
+		if (tsk == current) unlazy_fpu( tsk );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#66: FILE: arch/i386/kernel/i387.c:538:
+		if (tsk == current) unlazy_fpu( tsk );

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#66: FILE: arch/i386/kernel/i387.c:538:
+		if (tsk == current) unlazy_fpu( tsk );

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space prohibited after that open parenthesis '('
#67: FILE: arch/i386/kernel/i387.c:539:
+		if ( cpu_has_fxsr ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#67: FILE: arch/i386/kernel/i387.c:539:
+		if ( cpu_has_fxsr ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#67: FILE: arch/i386/kernel/i387.c:539:
+		if ( cpu_has_fxsr ) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#68: FILE: arch/i386/kernel/i387.c:540:
+			copy_fpu_fxsave( tsk, fpu );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#68: FILE: arch/i386/kernel/i387.c:540:
+			copy_fpu_fxsave( tsk, fpu );

ERROR:SPACING: space prohibited after that open parenthesis '('
#70: FILE: arch/i386/kernel/i387.c:542:
+			copy_fpu_fsave( tsk, fpu );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#70: FILE: arch/i386/kernel/i387.c:542:
+			copy_fpu_fsave( tsk, fpu );

ERROR:SPACING: space prohibited after that open parenthesis '('
#77: FILE: arch/i386/kernel/i387.c:549:
+int dump_task_extended_fpu( struct task_struct *tsk, struct user_fxsr_struct *fpu )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#77: FILE: arch/i386/kernel/i387.c:549:
+int dump_task_extended_fpu( struct task_struct *tsk, struct user_fxsr_struct *fpu )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: arch/i386/kernel/i387.c:552:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#82: FILE: arch/i386/kernel/i387.c:554:
+	if ( fpvalid ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#82: FILE: arch/i386/kernel/i387.c:554:
+	if ( fpvalid ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#83: FILE: arch/i386/kernel/i387.c:555:
+		if (tsk == current) unlazy_fpu( tsk );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#83: FILE: arch/i386/kernel/i387.c:555:
+		if (tsk == current) unlazy_fpu( tsk );

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#83: FILE: arch/i386/kernel/i387.c:555:
+		if (tsk == current) unlazy_fpu( tsk );

ERROR:SPACING: space prohibited after that open parenthesis '('
#84: FILE: arch/i386/kernel/i387.c:556:
+		memcpy( fpu, &tsk->thread.i387.fxsave,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: arch/i386/kernel/i387.c:557:
+		memcpy( fpu, &tsk->thread.i387.fxsave,
+		sizeof(struct user_fxsr_struct) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#85: FILE: arch/i386/kernel/i387.c:557:
+		sizeof(struct user_fxsr_struct) );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: arch/i386/kernel/i387.c:559:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: arch/i386/kernel/i387.c:563:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: arch/i386/kernel/process.c:613:
+/* $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#99: FILE: arch/i386/kernel/process.c:613:
 }
+/* 

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#104: FILE: arch/i386/kernel/process.c:618:
+	*regs = *(struct pt_regs *)((unsigned long)tsk->thread_info + THREAD_SIZE - sizeof(struct pt_regs));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#153: FILE: fs/binfmt_elf.c:1018:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#153: FILE: fs/binfmt_elf.c:1018:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                                        ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#169: FILE: fs/binfmt_elf.c:1034:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#182: FILE: fs/binfmt_elf.c:1047:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/binfmt_elf.c:1049:
+static inline void fill_note(struct memelfnote *note, const char *name, int type, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: fs/binfmt_elf.c:1050:
+static inline void fill_note(struct memelfnote *note, const char *name, int type, 
+		unsigned int sz, void *data)

WARNING:RETURN_VOID: void function return statements are not generally useful
#192: FILE: fs/binfmt_elf.c:1057:
+	return;
+}

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#196: FILE: fs/binfmt_elf.c:1061:
+ * which need to be filled up seperately.
                               ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/binfmt_elf.c:1063:
+static inline void fill_prstatus(struct elf_prstatus *prstatus, struct task_struct *p, long signr) $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#200: FILE: fs/binfmt_elf.c:1065:
+	prstatus->pr_info.si_signo = prstatus->pr_cursig = signr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:RETURN_VOID: void function return statements are not generally useful
#216: FILE: fs/binfmt_elf.c:1081:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: fs/binfmt_elf.c:1086:
+^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#237: FILE: fs/binfmt_elf.c:1102:
+	return;
+}

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#250: FILE: fs/binfmt_elf.c:1115:
+struct elf_thread_status
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#264: FILE: fs/binfmt_elf.c:1129:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: fs/binfmt_elf.c:1129:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: fs/binfmt_elf.c:1129:
+static int elf_dump_thread_status(long signr, struct task_struct * p, struct list_head * thread_list)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#266: FILE: fs/binfmt_elf.c:1131:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#272: FILE: fs/binfmt_elf.c:1137:
+		printk(KERN_WARNING "Cannot allocate memory for thread status.\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#272: FILE: fs/binfmt_elf.c:1137:
+	if (!t) {
+		printk(KERN_WARNING "Cannot allocate memory for thread status.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: fs/binfmt_elf.c:1145:
+^Ielf_core_copy_task_regs(p, &t->prstatus.pr_reg);^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->prstatus
#281: FILE: fs/binfmt_elf.c:1146:
+	fill_note(&t->notes[0], "CORE", NT_PRSTATUS, sizeof(t->prstatus), &(t->prstatus));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#285: FILE: fs/binfmt_elf.c:1150:
+	if ((t->prstatus.pr_fpvalid = elf_core_copy_task_fpregs(p, &t->fpu))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->fpu
#286: FILE: fs/binfmt_elf.c:1151:
+		fill_note(&t->notes[1], "CORE", NT_PRFPREG, sizeof(t->fpu), &(t->fpu));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->xfpu
#292: FILE: fs/binfmt_elf.c:1157:
+		fill_note(&t->notes[2], "LINUX", NT_PRXFPREG, sizeof(t->xfpu), &(t->xfpu));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: fs/binfmt_elf.c:1161:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#301: FILE: fs/binfmt_elf.c:1166:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: fs/binfmt_elf.c:1190:
+ ^Istruct task_struct *p;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#317: FILE: fs/binfmt_elf.c:1190:
+ ^Istruct task_struct *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: fs/binfmt_elf.c:1190:
+ ^Istruct task_struct *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: fs/binfmt_elf.c:1191:
+ ^ILIST_HEAD(thread_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#318: FILE: fs/binfmt_elf.c:1191:
+ ^ILIST_HEAD(thread_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: fs/binfmt_elf.c:1191:
+ ^ILIST_HEAD(thread_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: fs/binfmt_elf.c:1192:
+ ^Istruct list_head *t;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: fs/binfmt_elf.c:1192:
+ ^Istruct list_head *t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: fs/binfmt_elf.c:1192:
+ ^Istruct list_head *t;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: fs/binfmt_elf.c:1198:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#328: FILE: fs/binfmt_elf.c:1201:
+	if (dump_threads)	{
+		tcore_suspend_threads();
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: fs/binfmt_elf.c:1204:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: fs/binfmt_elf.c:1237:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: fs/binfmt_elf.c:1237:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: fs/binfmt_elf.c:1245:
+					int sz = elf_dump_thread_status(signr, p, &thread_list);
+					if (!sz) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#356: FILE: fs/binfmt_elf.c:1245:
+					if (!sz) {
[...]
+					else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#360: FILE: fs/binfmt_elf.c:1249:
+					}
+					else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: fs/binfmt_elf.c:1255:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: fs/binfmt_elf.c:1259:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#397: FILE: fs/binfmt_elf.c:1269:
+	fill_elf_header(&elf, segs+1); /* including notes section*/
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: fs/binfmt_elf.c:1287:
+ ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: fs/binfmt_elf.c:1287:
+ ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: fs/binfmt_elf.c:1287:
+ ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: fs/binfmt_elf.c:1290:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: fs/binfmt_elf.c:1292:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: fs/binfmt_elf.c:1292:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: fs/binfmt_elf.c:1293:
+  ^I/* Try to dump the FPU. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#431: FILE: fs/binfmt_elf.c:1293:
+  ^I/* Try to dump the FPU. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: fs/binfmt_elf.c:1293:
+  ^I/* Try to dump the FPU. */$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#432: FILE: fs/binfmt_elf.c:1294:
+	if ((prstatus.pr_fpvalid = elf_core_copy_task_fpregs(current, &fpu))) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#432: FILE: fs/binfmt_elf.c:1294:
+	if ((prstatus.pr_fpvalid = elf_core_copy_task_fpregs(current, &fpu))) {
[...]
+	} else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: fs/binfmt_elf.c:1298:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: fs/binfmt_elf.c:1298:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: fs/binfmt_elf.c:1298:
+ ^I}$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#437: FILE: fs/binfmt_elf.c:1299:
+	if (elf_core_copy_task_xfpregs(current, &xfpu)) {
[...]
+	} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: fs/binfmt_elf.c:1304:
+  ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#442: FILE: fs/binfmt_elf.c:1304:
+  ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: fs/binfmt_elf.c:1304:
+  ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: fs/binfmt_elf.c:1318:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: fs/binfmt_elf.c:1352:
+ ^I/* write out the notes section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: fs/binfmt_elf.c:1352:
+ ^I/* write out the notes section */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: fs/binfmt_elf.c:1352:
+ ^I/* write out the notes section */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: fs/binfmt_elf.c:1358:
+ ^Iif (dump_threads)  {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: fs/binfmt_elf.c:1358:
+ ^Iif (dump_threads)  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: fs/binfmt_elf.c:1358:
+ ^Iif (dump_threads)  {$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#520: FILE: fs/binfmt_elf.c:1360:
+			struct elf_thread_status *tmp = list_entry(t, struct elf_thread_status, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: fs/binfmt_elf.c:1361:
+			struct elf_thread_status *tmp = list_entry(t, struct elf_thread_status, list);
+			for (i = 0; i < tmp->num_notes; i++)

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: fs/binfmt_elf.c:1365:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#525: FILE: fs/binfmt_elf.c:1365:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: fs/binfmt_elf.c:1365:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: fs/binfmt_elf.c:1366:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: fs/binfmt_elf.c:1366:
+ $

ERROR:SPACING: space required before the open parenthesis '('
#540: FILE: fs/binfmt_elf.c:1415:
+		while(!list_empty(&thread_list)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: fs/binfmt_elf.c:1417:
+			struct list_head *tmp = thread_list.next;
+			list_del(tmp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#564: FILE: include/asm-i386/elf.h:103:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#565: FILE: include/asm-i386/elf.h:104:
+extern int dump_task_regs (struct task_struct *, struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#565: FILE: include/asm-i386/elf.h:104:
+extern int dump_task_regs (struct task_struct *, struct pt_regs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#565: FILE: include/asm-i386/elf.h:104:
+extern int dump_task_regs (struct task_struct *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#565: FILE: include/asm-i386/elf.h:104:
+extern int dump_task_regs (struct task_struct *, struct pt_regs *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#566: FILE: include/asm-i386/elf.h:105:
+extern int dump_task_fpu (struct task_struct *, struct user_i387_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: include/asm-i386/elf.h:105:
+extern int dump_task_fpu (struct task_struct *, struct user_i387_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#566: FILE: include/asm-i386/elf.h:105:
+extern int dump_task_fpu (struct task_struct *, struct user_i387_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_i387_struct *' should also have an identifier name
#566: FILE: include/asm-i386/elf.h:105:
+extern int dump_task_fpu (struct task_struct *, struct user_i387_struct *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#567: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#567: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_fxsr_struct *' should also have an identifier name
#567: FILE: include/asm-i386/elf.h:106:
+extern int dump_task_extended_fpu (struct task_struct *, struct user_fxsr_struct *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#602: FILE: include/linux/elfcore.h:95:
+	if (sizeof(elf_gregset_t) != sizeof(struct pt_regs)) {
[...]
+	} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#603: FILE: include/linux/elfcore.h:96:
+		printk("sizeof(elf_gregset_t) (%ld) != sizeof(struct pt_regs) (%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: include/linux/elfcore.h:97:
+		printk("sizeof(elf_gregset_t) (%ld) != sizeof(struct pt_regs) (%ld)\n",
+			(long)sizeof(elf_gregset_t), (long)sizeof(struct pt_regs));

CHECK:BRACES: Unbalanced braces around else statement
#605: FILE: include/linux/elfcore.h:98:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: include/linux/elfcore.h:107:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#623: FILE: include/linux/elfcore.h:116:
+extern int dump_fpu (struct pt_regs *, elf_fpregset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#623: FILE: include/linux/elfcore.h:116:
+extern int dump_fpu (struct pt_regs *, elf_fpregset_t *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: include/linux/elfcore.h:136:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#646: FILE: include/linux/elfcore.h:139:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#655: FILE: include/linux/sched.h:133:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: include/linux/sched.h:134:
+/* functions for pausing and resumming functions $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#658: FILE: include/linux/sched.h:136:
+ * by the multithreaded elf core dump code in binfmt_elf.c*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space prohibited after that open parenthesis '('
#659: FILE: include/linux/sched.h:137:
+extern void tcore_suspend_threads( void );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#659: FILE: include/linux/sched.h:137:
+extern void tcore_suspend_threads( void );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/sched.h:137:
+extern void tcore_suspend_threads( void );

ERROR:SPACING: space prohibited after that open parenthesis '('
#660: FILE: include/linux/sched.h:138:
+extern void tcore_resume_threads( void );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#660: FILE: include/linux/sched.h:138:
+extern void tcore_resume_threads( void );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#660: FILE: include/linux/sched.h:138:
+extern void tcore_resume_threads( void );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#660: FILE: include/linux/sched.h:138:
+extern void tcore_resume_threads( void );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#662: FILE: include/linux/sched.h:140:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#673: FILE: include/linux/sysctl.h:90:
+	KERN_CORE_DUMPS_THREADS=17, /* int: include status of others threads in dump */
 	                       ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#694: FILE: kernel/sched.c:267:
+	if( unlikely(!p->cpus_allowed) )
+			return;

ERROR:SPACING: space prohibited after that open parenthesis '('
#694: FILE: kernel/sched.c:267:
+	if( unlikely(!p->cpus_allowed) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#694: FILE: kernel/sched.c:267:
+	if( unlikely(!p->cpus_allowed) )

ERROR:SPACING: space required before the open parenthesis '('
#694: FILE: kernel/sched.c:267:
+	if( unlikely(!p->cpus_allowed) )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: kernel/sched.c:269:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: kernel/sched.c:282:
+^I$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#715: FILE: kernel/sched.c:349:
+		if (p->cpus_allowed && (p->prio < rq->curr->prio) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->prio < rq->curr->prio'
#715: FILE: kernel/sched.c:349:
+		if (p->cpus_allowed && (p->prio < rq->curr->prio) )

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#733: FILE: kernel/sched.c:1016:
+	for(i=0; i< smp_num_cpus; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#733: FILE: kernel/sched.c:1016:
+	for(i=0; i< smp_num_cpus; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#733: FILE: kernel/sched.c:1016:
+	for(i=0; i< smp_num_cpus; i++) {

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#736: FILE: kernel/sched.c:1019:
+		if (p->thread_info->cpu!= smp_processor_id()) {
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: kernel/sched.c:1024:
+#endif^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#743: FILE: kernel/sched.c:1026:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#745: FILE: kernel/sched.c:1028:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <OnCPUCount>
#752: FILE: kernel/sched.c:1035:
+	int i, OnCPUCount = 0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: kernel/sched.c:1040:
+//  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: kernel/sched.c:1043:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#763: FILE: kernel/sched.c:1046:
+	for(i=0; i< smp_num_cpus; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#763: FILE: kernel/sched.c:1046:
+	for(i=0; i< smp_num_cpus; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#763: FILE: kernel/sched.c:1046:
+	for(i=0; i< smp_num_cpus; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#763: FILE: kernel/sched.c:1046:
+	for(i=0; i< smp_num_cpus; i++) {
+		spin_lock(&cpu_rq(i)->lock);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: kernel/sched.c:1053:
+^IphantomQ = cpu_rq(PHANTOM_CPU); $

CHECK:CAMELCASE: Avoid CamelCase: <phantomQ>
#771: FILE: kernel/sched.c:1054:
+	spin_lock(&phantomQ->lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: kernel/sched.c:1055:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: kernel/sched.c:1058:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#780: FILE: kernel/sched.c:1063:
+			if( p == task_rq(p)->curr ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#780: FILE: kernel/sched.c:1063:
+			if( p == task_rq(p)->curr ) {

ERROR:SPACING: space required before the open parenthesis '('
#780: FILE: kernel/sched.c:1063:
+			if( p == task_rq(p)->curr ) {

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#784: FILE: kernel/sched.c:1067:
+				OnCPUCount ++;
 				           ^

WARNING:TYPO_SPELLING: 'manualy' may be misspelled - perhaps 'manually'?
#786: FILE: kernel/sched.c:1069:
+				// we manualy move the process to the phantom run queue.
 				      ^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#800: FILE: kernel/sched.c:1083:
+	for(i=smp_num_cpus-1; 0<= i; i--) {
 	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#800: FILE: kernel/sched.c:1083:
+	for(i=smp_num_cpus-1; 0<= i; i--) {
 	                  ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxW)
#800: FILE: kernel/sched.c:1083:
+	for(i=smp_num_cpus-1; 0<= i; i--) {
 	                       ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#800: FILE: kernel/sched.c:1083:
+	for(i=smp_num_cpus-1; 0<= i; i--) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required before the open parenthesis '('
#800: FILE: kernel/sched.c:1083:
+	for(i=smp_num_cpus-1; 0<= i; i--) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#800: FILE: kernel/sched.c:1083:
+	for(i=smp_num_cpus-1; 0<= i; i--) {
+		spin_unlock(&cpu_rq(i)->lock);
+	}

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#806: FILE: kernel/sched.c:1089:
+	for( i = 0; i<OnCPUCount; i++) {
 	             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#806: FILE: kernel/sched.c:1089:
+	for( i = 0; i<OnCPUCount; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#806: FILE: kernel/sched.c:1089:
+	for( i = 0; i<OnCPUCount; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#806: FILE: kernel/sched.c:1089:
+	for( i = 0; i<OnCPUCount; i++) {
+		set_cpus_allowed(threads[i], 0);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: kernel/sched.c:1092:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#810: FILE: kernel/sched.c:1093:
+	
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: kernel/sched.c:1107:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: kernel/sched.c:1113:
+				deactivate_task(p,phantomQ);
 				                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#846: FILE: kernel/sched.c:1129:
+
+

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#861: FILE: kernel/sched.c:1720:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#871: FILE: kernel/sched.c:1739:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#871: FILE: kernel/sched.c:1739:
+
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: kernel/sched.c:1739:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#891: FILE: kernel/sched.c:1759:
+
+

ERROR:SPACING: space required before the open brace '{'
#902: FILE: kernel/sched.c:1819:
+	if(new_mask){ // can be O for TCore process suspends

ERROR:SPACING: space required before the open parenthesis '('
#902: FILE: kernel/sched.c:1819:
+	if(new_mask){ // can be O for TCore process suspends

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#905: FILE: kernel/sched.c:1822:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited after that open parenthesis '('
#916: FILE: kernel/sched.c:1897:
+		if( p->cpus_allowed)

ERROR:SPACING: space required before the open parenthesis '('
#916: FILE: kernel/sched.c:1897:
+		if( p->cpus_allowed)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#931: FILE: kernel/sysctl.c:41:
+int core_dumps_threads = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000458840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 101 errors, 67 warnings, 37 checks, 835 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000458840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
