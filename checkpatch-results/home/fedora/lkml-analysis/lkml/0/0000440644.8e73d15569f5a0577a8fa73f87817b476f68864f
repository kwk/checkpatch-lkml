WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#	           ChangeSet	1.681   -> 1.682  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#	   fs/reiserfs/dir.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	  fs/reiserfs/file.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	fs/reiserfs/ibalance.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#	 fs/reiserfs/namei.c	1.19    -> 1.20   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#	fs/reiserfs/item_ops.c	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#	fs/reiserfs/do_balan.c	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#	fs/reiserfs/hashes.c	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
#	include/linux/reiserfs_fs_i.h	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#	fs/reiserfs/procfs.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#	fs/reiserfs/fix_node.c	1.15    -> 1.16   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#	 fs/reiserfs/inode.c	1.32    -> 1.33   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	include/linux/reiserfs_fs.h	1.17    -> 1.18   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	fs/reiserfs/resize.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	 fs/reiserfs/ioctl.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	fs/reiserfs/objectid.c	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	fs/reiserfs/buffer2.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	fs/reiserfs/version.c	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#	 fs/reiserfs/super.c	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#	fs/reiserfs/tail_conversion.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#	include/linux/reiserfs_fs_sb.h	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#	fs/reiserfs/prints.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#	fs/reiserfs/bitmap.c	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#	 fs/reiserfs/stree.c	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#	fs/reiserfs/lbalance.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# 02/08/06	green@angband.namesys.com	1.682

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# Many files:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#   licensing cleanups, including fixing comments and parse_options reimplementation

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#91: 
--- a/fs/reiserfs/bitmap.c	Tue Aug  6 10:38:09 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#108: FILE: fs/reiserfs/bitmap.c:666:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: fs/reiserfs/buffer2.c:2:
+ *  Copyright 2000-2002 by Hans Reiser, licensing governed by reiserfs/README  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#137: FILE: fs/reiserfs/dir.c:109:
+		if (d_reclen > REISERFS_MAX_NAME(inode->i_sb->s_blocksize)){
[...]
 		    continue ;

ERROR:SPACING: space required before the open brace '{'
#137: FILE: fs/reiserfs/dir.c:109:
+		if (d_reclen > REISERFS_MAX_NAME(inode->i_sb->s_blocksize)){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#278: FILE: fs/reiserfs/inode.c:2027:
 
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: fs/reiserfs/namei.c:280:
+    if (namelen > REISERFS_MAX_NAME (dir->i_sb->s_blocksize))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#408: FILE: fs/reiserfs/namei.c:280:
+    if (namelen > REISERFS_MAX_NAME (dir->i_sb->s_blocksize))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir->i_sb->s_blocksize'
#408: FILE: fs/reiserfs/namei.c:280:
+    if (namelen > REISERFS_MAX_NAME (dir->i_sb->s_blocksize))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: fs/reiserfs/namei.c:319:
+    if (REISERFS_MAX_NAME (dir->i_sb->s_blocksize) < dentry->d_name.len)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#431: FILE: fs/reiserfs/namei.c:319:
+    if (REISERFS_MAX_NAME (dir->i_sb->s_blocksize) < dentry->d_name.len)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir->i_sb->s_blocksize'
#431: FILE: fs/reiserfs/namei.c:319:
+    if (REISERFS_MAX_NAME (dir->i_sb->s_blocksize) < dentry->d_name.len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: fs/reiserfs/namei.c:366:
+    if (namelen > REISERFS_MAX_NAME (dir->i_sb->s_blocksize))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#455: FILE: fs/reiserfs/namei.c:366:
+    if (namelen > REISERFS_MAX_NAME (dir->i_sb->s_blocksize))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir->i_sb->s_blocksize'
#455: FILE: fs/reiserfs/namei.c:366:
+    if (namelen > REISERFS_MAX_NAME (dir->i_sb->s_blocksize))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#476: FILE: fs/reiserfs/namei.c:443:
+      /* I think it was better to have an error code with a name that says
+	 what it means, but I choose not to fight over it.  Persons porting to

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#478: FILE: fs/reiserfs/namei.c:445:
+	 (return -EHASHCOLLISION;). -Hans */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#489: FILE: fs/reiserfs/namei.c:465:
+      /* I think it was better to have an error code with a name that says
+	 what it means, but I choose not to fight over it.  Persons porting to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#491: FILE: fs/reiserfs/namei.c:467:
+	 (return -EHASHCOLLISION;). -Hans */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: fs/reiserfs/namei.c:501:
+    if (!(inode = new_inode(dir->i_sb))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#515: FILE: fs/reiserfs/namei.c:501:
+    if (!(inode = new_inode(dir->i_sb))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#515: FILE: fs/reiserfs/namei.c:501:
+    if (!(inode = new_inode(dir->i_sb))) {
 	return -ENOMEM ;
     }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: fs/reiserfs/namei.c:548:
+    if (!(inode = new_inode(dir->i_sb))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#539: FILE: fs/reiserfs/namei.c:548:
+    if (!(inode = new_inode(dir->i_sb))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#539: FILE: fs/reiserfs/namei.c:548:
+    if (!(inode = new_inode(dir->i_sb))) {
 	return -ENOMEM ;
     }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: fs/reiserfs/namei.c:595:
+    if (!(inode = new_inode(dir->i_sb))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#563: FILE: fs/reiserfs/namei.c:595:
+    if (!(inode = new_inode(dir->i_sb))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#563: FILE: fs/reiserfs/namei.c:595:
+    if (!(inode = new_inode(dir->i_sb))) {
 	return -ENOMEM ;
     }

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#607: FILE: fs/reiserfs/namei.c:813:
+static int reiserfs_symlink (struct inode * parent_dir, struct dentry * dentry, const char * symname)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#607: FILE: fs/reiserfs/namei.c:813:
+static int reiserfs_symlink (struct inode * parent_dir, struct dentry * dentry, const char * symname)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#607: FILE: fs/reiserfs/namei.c:813:
+static int reiserfs_symlink (struct inode * parent_dir, struct dentry * dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#607: FILE: fs/reiserfs/namei.c:813:
+static int reiserfs_symlink (struct inode * parent_dir, struct dentry * dentry, const char * symname)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#607: FILE: fs/reiserfs/namei.c:813:
+static int reiserfs_symlink (struct inode * parent_dir, struct dentry * dentry, const char * symname)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: fs/reiserfs/namei.c:824:
+    if (!(inode = new_inode(parent_dir->i_sb))) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#618: FILE: fs/reiserfs/namei.c:824:
+    if (!(inode = new_inode(parent_dir->i_sb))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#618: FILE: fs/reiserfs/namei.c:824:
+    if (!(inode = new_inode(parent_dir->i_sb))) {
+  	return -ENOMEM ;
     }

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: fs/reiserfs/namei.c:825:
+  ^Ireturn -ENOMEM ;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#619: FILE: fs/reiserfs/namei.c:825:
+  ^Ireturn -ENOMEM ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: fs/reiserfs/namei.c:825:
+  ^Ireturn -ENOMEM ;$

WARNING:SPACING: space prohibited before semicolon
#619: FILE: fs/reiserfs/namei.c:825:
+  	return -ENOMEM ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: fs/reiserfs/namei.c:829:
+    if (item_len > MAX_DIRECT_ITEM_LEN (parent_dir->i_sb->s_blocksize)) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#624: FILE: fs/reiserfs/namei.c:829:
+    if (item_len > MAX_DIRECT_ITEM_LEN (parent_dir->i_sb->s_blocksize)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent_dir->i_sb->s_blocksize'
#624: FILE: fs/reiserfs/namei.c:829:
+    if (item_len > MAX_DIRECT_ITEM_LEN (parent_dir->i_sb->s_blocksize)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: fs/reiserfs/namei.c:834:
+    name = reiserfs_kmalloc (item_len, GFP_NOFS, parent_dir->i_sb);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#630: FILE: fs/reiserfs/namei.c:834:
+    name = reiserfs_kmalloc (item_len, GFP_NOFS, parent_dir->i_sb);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: fs/reiserfs/namei.c:842:
+    journal_begin(&th, parent_dir->i_sb, jbegin_count) ;$

WARNING:SPACING: space prohibited before semicolon
#639: FILE: fs/reiserfs/namei.c:842:
+    journal_begin(&th, parent_dir->i_sb, jbegin_count) ;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#643: FILE: fs/reiserfs/namei.c:845:
+    inode = reiserfs_new_inode (&th, parent_dir, S_IFLNK | S_IRWXUGO, name, strlen (symname), dentry,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: fs/reiserfs/namei.c:845:
+    inode = reiserfs_new_inode (&th, parent_dir, S_IFLNK | S_IRWXUGO, name, strlen (symname), dentry,$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#643: FILE: fs/reiserfs/namei.c:845:
+    inode = reiserfs_new_inode (&th, parent_dir, S_IFLNK | S_IRWXUGO, name, strlen (symname), dentry,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#643: FILE: fs/reiserfs/namei.c:845:
+    inode = reiserfs_new_inode (&th, parent_dir, S_IFLNK | S_IRWXUGO, name, strlen (symname), dentry,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#643: FILE: fs/reiserfs/namei.c:845:
+    inode = reiserfs_new_inode (&th, parent_dir, S_IFLNK | S_IRWXUGO, name, strlen (symname), dentry,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: fs/reiserfs/namei.c:847:
+    reiserfs_kfree (name, item_len, parent_dir->i_sb);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#646: FILE: fs/reiserfs/namei.c:847:
+    reiserfs_kfree (name, item_len, parent_dir->i_sb);

WARNING:SPACING: space prohibited before semicolon
#650: FILE: fs/reiserfs/namei.c:850:
+	journal_end(&th, parent_dir->i_sb, jbegin_count) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: fs/reiserfs/namei.c:855:
+    reiserfs_update_inode_transaction(parent_dir) ;$

WARNING:SPACING: space prohibited before semicolon
#656: FILE: fs/reiserfs/namei.c:855:
+    reiserfs_update_inode_transaction(parent_dir) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: fs/reiserfs/namei.c:864:
+    retval = reiserfs_add_entry (&th, parent_dir, dentry->d_name.name, dentry->d_name.len, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: fs/reiserfs/namei.c:864:
+    retval = reiserfs_add_entry (&th, parent_dir, dentry->d_name.name, dentry->d_name.len, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#665: FILE: fs/reiserfs/namei.c:864:
+    retval = reiserfs_add_entry (&th, parent_dir, dentry->d_name.name, dentry->d_name.len, 

WARNING:SPACING: space prohibited before semicolon
#672: FILE: fs/reiserfs/namei.c:870:
+	journal_end(&th, parent_dir->i_sb, jbegin_count) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: fs/reiserfs/namei.c:877:
+    journal_end(&th, parent_dir->i_sb, jbegin_count) ;$

WARNING:SPACING: space prohibited before semicolon
#680: FILE: fs/reiserfs/namei.c:877:
+    journal_end(&th, parent_dir->i_sb, jbegin_count) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: fs/reiserfs/namei.c:889:
+    time_t ctime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: fs/reiserfs/namei.c:917:
+    ctime = CURRENT_TIME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: fs/reiserfs/namei.c:918:
+    inode->i_ctime = ctime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: fs/reiserfs/namei.c:985:
+    struct inode * old_inode, * new_dentry_inode;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#733: FILE: fs/reiserfs/namei.c:985:
+    struct inode * old_inode, * new_dentry_inode;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#733: FILE: fs/reiserfs/namei.c:985:
+    struct inode * old_inode, * new_dentry_inode;
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: fs/reiserfs/namei.c:989:
+    umode_t old_inode_mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: fs/reiserfs/namei.c:990:
+    time_t ctime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: fs/reiserfs/namei.c:999:
+    new_dentry_inode = new_dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: fs/reiserfs/namei.c:1014:
+    old_inode_mode = old_inode->i_mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: fs/reiserfs/namei.c:1015:
+    if (S_ISDIR(old_inode_mode)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#764: FILE: fs/reiserfs/namei.c:1020:
+	if (new_dentry_inode) {
+	    if (!reiserfs_empty_dir(new_dentry_inode)) {

WARNING:TABSTOP: Statements should start on a tabstop
#765: FILE: fs/reiserfs/namei.c:1021:
+	    if (!reiserfs_empty_dir(new_dentry_inode)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#765: FILE: fs/reiserfs/namei.c:1021:
+	    if (!reiserfs_empty_dir(new_dentry_inode)) {
 		return -ENOTEMPTY;
 	    }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#776: FILE: fs/reiserfs/namei.c:1047:
+	if (!new_dentry_inode) {
 	    reiserfs_panic (old_dir->i_sb,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: fs/reiserfs/namei.c:1065:
+    if (new_dentry_inode) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: fs/reiserfs/namei.c:1065:
+    if (new_dentry_inode) $

WARNING:SPACING: space prohibited before semicolon
#787: FILE: fs/reiserfs/namei.c:1066:
+	reiserfs_update_inode_transaction(new_dentry_inode) ;

WARNING:TABSTOP: Statements should start on a tabstop
#804: FILE: fs/reiserfs/namei.c:1120:
+	    if (S_ISDIR(old_inode_mode))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#809: FILE: fs/reiserfs/namei.c:1124:
+	if (S_ISDIR(old_inode_mode)) {
 	    if ( item_moved(&dot_dot_ih, &dot_dot_entry_path) ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#818: FILE: fs/reiserfs/namei.c:1135:
+^IRFALSE( S_ISDIR(old_inode_mode) && $

ERROR:SPACING: space prohibited after that open parenthesis '('
#818: FILE: fs/reiserfs/namei.c:1135:
+	RFALSE( S_ISDIR(old_inode_mode) && 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: fs/reiserfs/namei.c:1136:
+	RFALSE( S_ISDIR(old_inode_mode) && 
 		!reiserfs_buffer_prepared(dot_dot_de.de_bh), "" );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: fs/reiserfs/namei.c:1153:
+    if (new_dentry_inode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#831: FILE: fs/reiserfs/namei.c:1155:
+	if (S_ISDIR(new_dentry_inode->i_mode)) {
+	    new_dentry_inode->i_nlink  = 0;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#831: FILE: fs/reiserfs/namei.c:1155:
+	if (S_ISDIR(new_dentry_inode->i_mode)) {
[...]
 	} else {
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#833: FILE: fs/reiserfs/namei.c:1157:
 	} else {
+	    new_dentry_inode->i_nlink--;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#843: FILE: fs/reiserfs/namei.c:1164:
+    if (S_ISDIR(old_inode_mode)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: fs/reiserfs/namei.c:1169:
+        if (!new_dentry_inode)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: fs/reiserfs/namei.c:1169:
+        if (!new_dentry_inode)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#849: FILE: fs/reiserfs/namei.c:1169:
+        if (!new_dentry_inode)
[...]
 	    INC_DIR_INODE_NLINK(new_dir);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: fs/reiserfs/namei.c:1194:
+    if (new_dentry_inode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#862: FILE: fs/reiserfs/namei.c:1195:
+	if (new_dentry_inode->i_nlink == 0)
+	    add_save_link (&th, new_dentry_inode, 0/* not truncate */);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#863: FILE: fs/reiserfs/namei.c:1196:
+	    add_save_link (&th, new_dentry_inode, 0/* not truncate */);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#864: FILE: fs/reiserfs/namei.c:1197:
+	reiserfs_update_sd (&th, new_dentry_inode);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#992: FILE: fs/reiserfs/super.c:396:
+/* this struct is used in reiserfs_getopt () for containing the value for those
+   mount options that have values rather than being toggles. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#992: FILE: fs/reiserfs/super.c:396:
+   mount options that have values rather than being toggles. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#993: FILE: fs/reiserfs/super.c:397:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: fs/reiserfs/super.c:399:
+    int bitmask; /* bit which is to be set in mount_options bitmask when this$

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: fs/reiserfs/super.c:400:
+                    value is found, 0 is no bits are to be set */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#997: FILE: fs/reiserfs/super.c:400:
+    int bitmask; /* bit which is to be set in mount_options bitmask when this
+                    value is found, 0 is no bits are to be set */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#997: FILE: fs/reiserfs/super.c:400:
+                    value is found, 0 is no bits are to be set */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1000: FILE: fs/reiserfs/super.c:403:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1002: FILE: fs/reiserfs/super.c:405:
+/* this struct is used in reiserfs_getopt() for describing the set of reiserfs
+   mount options */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1002: FILE: fs/reiserfs/super.c:405:
+   mount options */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1003: FILE: fs/reiserfs/super.c:406:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: fs/reiserfs/super.c:407:
+    char * option_name;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1004: FILE: fs/reiserfs/super.c:407:
+    char * option_name;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: fs/reiserfs/super.c:408:
+    int arg_required; /* 0 is argument is not required, not 0 otherwise */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: fs/reiserfs/super.c:409:
+    const arg_desc_t * values; /* list of values accepted by an option */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1006: FILE: fs/reiserfs/super.c:409:
+    const arg_desc_t * values; /* list of values accepted by an option */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: fs/reiserfs/super.c:410:
+    int bitmask;  /* bit which is to be set in mount_options bitmask when this$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1008: FILE: fs/reiserfs/super.c:411:
+    int bitmask;  /* bit which is to be set in mount_options bitmask when this
+		     option is selected, 0 is not bits are to be set */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1008: FILE: fs/reiserfs/super.c:411:
+		     option is selected, 0 is not bits are to be set */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1011: FILE: fs/reiserfs/super.c:414:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1013: FILE: fs/reiserfs/super.c:416:
+/* possible values for "-o hash=" and bits which are to be set in s_mount_opt
+   of reiserfs specific part of in-core super block */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1013: FILE: fs/reiserfs/super.c:416:
+   of reiserfs specific part of in-core super block */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: fs/reiserfs/super.c:418:
+    {"rupasov", FORCE_RUPASOV_HASH},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: fs/reiserfs/super.c:419:
+    {"tea", FORCE_TEA_HASH},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: fs/reiserfs/super.c:420:
+    {"r5", FORCE_R5_HASH},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: fs/reiserfs/super.c:421:
+    {"detect", FORCE_HASH_DETECT},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: fs/reiserfs/super.c:422:
+    {NULL, 0}$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1022: FILE: fs/reiserfs/super.c:425:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1024: FILE: fs/reiserfs/super.c:427:
+/* possible values for "-o block-allocator=" and bits which are to be set in
+   s_mount_opt of reiserfs specific part of in-core super block */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1024: FILE: fs/reiserfs/super.c:427:
+   s_mount_opt of reiserfs specific part of in-core super block */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: fs/reiserfs/super.c:429:
+    {"noborder", REISERFS_NO_BORDER},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: fs/reiserfs/super.c:430:
+    {"no_unhashed_relocation", REISERFS_NO_UNHASHED_RELOCATION},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: fs/reiserfs/super.c:431:
+    {"hashed_relocation", REISERFS_HASHED_RELOCATION},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: fs/reiserfs/super.c:432:
+    {"test4", REISERFS_TEST4},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: fs/reiserfs/super.c:433:
+    {NULL, 0}$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1033: FILE: fs/reiserfs/super.c:436:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1035: FILE: fs/reiserfs/super.c:438:
+/* proceed only one option from a list *cur - string containing of mount options
+   opts - array of options which are accepted

WARNING:TYPO_SPELLING: 'specifed' may be misspelled - perhaps 'specified'?
#1036: FILE: fs/reiserfs/super.c:439:
+   opt_arg - if option is found and requires an argument and if it is specifed
                                                                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1039: FILE: fs/reiserfs/super.c:442:
+   return -1 if unknown option is found, opt->arg_required otherwise */

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1040: FILE: fs/reiserfs/super.c:443:
+static int reiserfs_getopt (char ** cur, opt_desc_t * opts, char ** opt_arg,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1040: FILE: fs/reiserfs/super.c:443:
+static int reiserfs_getopt (char ** cur, opt_desc_t * opts, char ** opt_arg,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1040: FILE: fs/reiserfs/super.c:443:
+static int reiserfs_getopt (char ** cur, opt_desc_t * opts, char ** opt_arg,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1040: FILE: fs/reiserfs/super.c:443:
+static int reiserfs_getopt (char ** cur, opt_desc_t * opts, char ** opt_arg,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1041: FILE: fs/reiserfs/super.c:444:
+			    unsigned long * bit_flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: fs/reiserfs/super.c:446:
+    char * p;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1043: FILE: fs/reiserfs/super.c:446:
+    char * p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: fs/reiserfs/super.c:447:
+    /* foo=bar, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1045: FILE: fs/reiserfs/super.c:448:
+    /* foo=bar, 
+       ^   ^  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: fs/reiserfs/super.c:453:
+    const opt_desc_t * opt;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1050: FILE: fs/reiserfs/super.c:453:
+    const opt_desc_t * opt;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: fs/reiserfs/super.c:454:
+    const arg_desc_t * arg;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1051: FILE: fs/reiserfs/super.c:454:
+    const arg_desc_t * arg;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: fs/reiserfs/super.c:455:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: fs/reiserfs/super.c:455:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1053: FILE: fs/reiserfs/super.c:456:
+    $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1053: FILE: fs/reiserfs/super.c:456:
+    
+    

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: fs/reiserfs/super.c:456:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: fs/reiserfs/super.c:457:
+    p = *cur;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1055: FILE: fs/reiserfs/super.c:458:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: fs/reiserfs/super.c:458:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1057: FILE: fs/reiserfs/super.c:460:
+    *cur = strchr (p, ',');$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1057: FILE: fs/reiserfs/super.c:460:
+    *cur = strchr (p, ',');

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: fs/reiserfs/super.c:461:
+    if (*cur) {$

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1060: FILE: fs/reiserfs/super.c:463:
+	(*cur) ++;
 	       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: fs/reiserfs/super.c:464:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1062: FILE: fs/reiserfs/super.c:465:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: fs/reiserfs/super.c:465:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: fs/reiserfs/super.c:467:
+    for (opt = opts; opt->option_name; opt ++) {$

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#1064: FILE: fs/reiserfs/super.c:467:
+    for (opt = opts; opt->option_name; opt ++) {
                                            ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1065: FILE: fs/reiserfs/super.c:468:
+	if (!strncmp (p, opt->option_name, strlen (opt->option_name))) {
+	    if (bit_flags && opt->bitmask)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1065: FILE: fs/reiserfs/super.c:468:
+	if (!strncmp (p, opt->option_name, strlen (opt->option_name))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1065: FILE: fs/reiserfs/super.c:468:
+	if (!strncmp (p, opt->option_name, strlen (opt->option_name))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'opt->option_name'
#1065: FILE: fs/reiserfs/super.c:468:
+	if (!strncmp (p, opt->option_name, strlen (opt->option_name))) {

WARNING:TABSTOP: Statements should start on a tabstop
#1066: FILE: fs/reiserfs/super.c:469:
+	    if (bit_flags && opt->bitmask)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1067: FILE: fs/reiserfs/super.c:470:
+		set_bit (opt->bitmask, bit_flags);

WARNING:TABSTOP: Statements should start on a tabstop
#1068: FILE: fs/reiserfs/super.c:471:
+	    break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: fs/reiserfs/super.c:473:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: fs/reiserfs/super.c:474:
+    if (!opt->option_name) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1072: FILE: fs/reiserfs/super.c:475:
+	printk ("reiserfs_getopt: unknown option \"%s\"\n", p);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1072: FILE: fs/reiserfs/super.c:475:
+	printk ("reiserfs_getopt: unknown option \"%s\"\n", p);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reiserfs_getopt', this function's name, in a string
#1072: FILE: fs/reiserfs/super.c:475:
+	printk ("reiserfs_getopt: unknown option \"%s\"\n", p);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: fs/reiserfs/super.c:477:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1075: FILE: fs/reiserfs/super.c:478:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: fs/reiserfs/super.c:478:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: fs/reiserfs/super.c:479:
+    p += strlen (opt->option_name);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1076: FILE: fs/reiserfs/super.c:479:
+    p += strlen (opt->option_name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: fs/reiserfs/super.c:480:
+    switch (*p) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: fs/reiserfs/super.c:481:
+    case '=':$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1079: FILE: fs/reiserfs/super.c:482:
+	if (!opt->arg_required) {
+	    printk ("reiserfs_getopt: the option \"%s\" does not require an argument\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1080: FILE: fs/reiserfs/super.c:483:
+	    printk ("reiserfs_getopt: the option \"%s\" does not require an argument\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1080: FILE: fs/reiserfs/super.c:483:
+	    printk ("reiserfs_getopt: the option \"%s\" does not require an argument\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reiserfs_getopt', this function's name, in a string
#1080: FILE: fs/reiserfs/super.c:483:
+	    printk ("reiserfs_getopt: the option \"%s\" does not require an argument\n",

WARNING:TABSTOP: Statements should start on a tabstop
#1082: FILE: fs/reiserfs/super.c:485:
+	    return -1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1085: FILE: fs/reiserfs/super.c:488:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: fs/reiserfs/super.c:489:
+    case 0:$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1087: FILE: fs/reiserfs/super.c:490:
+	if (opt->arg_required) {
+	    printk ("reiserfs_getopt: the option \"%s\" requires an argument\n", opt->option_name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1088: FILE: fs/reiserfs/super.c:491:
+	    printk ("reiserfs_getopt: the option \"%s\" requires an argument\n", opt->option_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1088: FILE: fs/reiserfs/super.c:491:
+	    printk ("reiserfs_getopt: the option \"%s\" requires an argument\n", opt->option_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reiserfs_getopt', this function's name, in a string
#1088: FILE: fs/reiserfs/super.c:491:
+	    printk ("reiserfs_getopt: the option \"%s\" requires an argument\n", opt->option_name);

WARNING:TABSTOP: Statements should start on a tabstop
#1089: FILE: fs/reiserfs/super.c:492:
+	    return -1;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1093: FILE: fs/reiserfs/super.c:496:
+	printk ("reiserfs_getopt: head of option \"%s\" is only correct\n", opt->option_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1093: FILE: fs/reiserfs/super.c:496:
+	printk ("reiserfs_getopt: head of option \"%s\" is only correct\n", opt->option_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reiserfs_getopt', this function's name, in a string
#1093: FILE: fs/reiserfs/super.c:496:
+	printk ("reiserfs_getopt: head of option \"%s\" is only correct\n", opt->option_name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: fs/reiserfs/super.c:498:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1096: FILE: fs/reiserfs/super.c:499:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: fs/reiserfs/super.c:501:
+    p ++;$

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1098: FILE: fs/reiserfs/super.c:501:
+    p ++;
       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: fs/reiserfs/super.c:502:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: fs/reiserfs/super.c:502:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1100: FILE: fs/reiserfs/super.c:503:
+    if ( opt->arg_required && !strlen (p) ) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1100: FILE: fs/reiserfs/super.c:503:
+    if ( opt->arg_required && !strlen (p) ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#1100: FILE: fs/reiserfs/super.c:503:
+    if ( opt->arg_required && !strlen (p) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1100: FILE: fs/reiserfs/super.c:503:
+    if ( opt->arg_required && !strlen (p) ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1102: FILE: fs/reiserfs/super.c:505:
+	printk ("reiserfs_getopt: empty argument for \"%s\"\n", opt->option_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1102: FILE: fs/reiserfs/super.c:505:
+	printk ("reiserfs_getopt: empty argument for \"%s\"\n", opt->option_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reiserfs_getopt', this function's name, in a string
#1102: FILE: fs/reiserfs/super.c:505:
+	printk ("reiserfs_getopt: empty argument for \"%s\"\n", opt->option_name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: fs/reiserfs/super.c:507:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1105: FILE: fs/reiserfs/super.c:508:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: fs/reiserfs/super.c:508:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1106: FILE: fs/reiserfs/super.c:509:
+    if (!opt->values) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: fs/reiserfs/super.c:513:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1111: FILE: fs/reiserfs/super.c:514:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: fs/reiserfs/super.c:514:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1113: FILE: fs/reiserfs/super.c:516:
+    for (arg = opt->values; arg->value; arg ++) {$

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#1113: FILE: fs/reiserfs/super.c:516:
+    for (arg = opt->values; arg->value; arg ++) {
                                             ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1114: FILE: fs/reiserfs/super.c:517:
+	if (!strcmp (p, arg->value)) {
+	    if (bit_flags && arg->bitmask)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1114: FILE: fs/reiserfs/super.c:517:
+	if (!strcmp (p, arg->value)) {

WARNING:TABSTOP: Statements should start on a tabstop
#1115: FILE: fs/reiserfs/super.c:518:
+	    if (bit_flags && arg->bitmask)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1116: FILE: fs/reiserfs/super.c:519:
+		set_bit (arg->bitmask, bit_flags);

WARNING:TABSTOP: Statements should start on a tabstop
#1117: FILE: fs/reiserfs/super.c:520:
+	    return opt->arg_required;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1119: FILE: fs/reiserfs/super.c:522:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1120: FILE: fs/reiserfs/super.c:523:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1120: FILE: fs/reiserfs/super.c:523:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: fs/reiserfs/super.c:524:
+    printk ("reiserfs_getopt: bad value \"%s\" for option \"%s\"\n", p, opt->option_name);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1121: FILE: fs/reiserfs/super.c:524:
+    printk ("reiserfs_getopt: bad value \"%s\" for option \"%s\"\n", p, opt->option_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1121: FILE: fs/reiserfs/super.c:524:
+    printk ("reiserfs_getopt: bad value \"%s\" for option \"%s\"\n", p, opt->option_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'reiserfs_getopt', this function's name, in a string
#1121: FILE: fs/reiserfs/super.c:524:
+    printk ("reiserfs_getopt: bad value \"%s\" for option \"%s\"\n", p, opt->option_name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: fs/reiserfs/super.c:525:
+    return -1;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1125: FILE: fs/reiserfs/super.c:528:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1127: FILE: fs/reiserfs/super.c:530:
+static int reiserfs_parse_options (char * options, /* string given via mount's -o */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1127: FILE: fs/reiserfs/super.c:530:
+static int reiserfs_parse_options (char * options, /* string given via mount's -o */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1128: FILE: fs/reiserfs/super.c:531:
+				   unsigned long * mount_options,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1130: FILE: fs/reiserfs/super.c:533:
+				   /* after the parsing phase, contains the
+				      collection of bitflags defining what

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1131: FILE: fs/reiserfs/super.c:534:
+				      mount options were selected. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1132: FILE: fs/reiserfs/super.c:535:
+				   unsigned long * blocks) /* strtol-ed from NNN of resize=NNN */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: fs/reiserfs/super.c:537:
+    int c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: fs/reiserfs/super.c:538:
+    char * arg = NULL;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1135: FILE: fs/reiserfs/super.c:538:
+    char * arg = NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: fs/reiserfs/super.c:539:
+    char * pos;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1136: FILE: fs/reiserfs/super.c:539:
+    char * pos;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: fs/reiserfs/super.c:540:
+    opt_desc_t opts[] = {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1139: FILE: fs/reiserfs/super.c:542:
+^I^I{"conv", 0, 0, REISERFS_CONVERT}, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1142: FILE: fs/reiserfs/super.c:545:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1143: FILE: fs/reiserfs/super.c:546:
+^I^I{"block-allocator", 'a', balloc, 0}, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1145: FILE: fs/reiserfs/super.c:548:
+^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: fs/reiserfs/super.c:551:
+    };$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1149: FILE: fs/reiserfs/super.c:552:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: fs/reiserfs/super.c:554:
+    if (!options || !*options)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1155: FILE: fs/reiserfs/super.c:556:
+	   conversion to newest format */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: fs/reiserfs/super.c:558:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: fs/reiserfs/super.c:558:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: fs/reiserfs/super.c:559:
+    for (pos = options; pos; ) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1190: FILE: fs/reiserfs/super.c:560:
+	c = reiserfs_getopt (&pos, opts, &arg, mount_options);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1191: FILE: fs/reiserfs/super.c:561:
+	if (c == -1)
[...]
+	    return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#1193: FILE: fs/reiserfs/super.c:563:
+	    return 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1194: FILE: fs/reiserfs/super.c:564:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1195: FILE: fs/reiserfs/super.c:565:
+	if (c == 'r') {
+	    char * p;

WARNING:TABSTOP: Statements should start on a tabstop
#1196: FILE: fs/reiserfs/super.c:566:
+	    char * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1196: FILE: fs/reiserfs/super.c:566:
+	    char * p;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1197: FILE: fs/reiserfs/super.c:567:
+^I    $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1200: FILE: fs/reiserfs/super.c:570:
+	    *blocks = simple_strtoul (arg, &p, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1200: FILE: fs/reiserfs/super.c:570:
+	    *blocks = simple_strtoul (arg, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:TABSTOP: Statements should start on a tabstop
#1201: FILE: fs/reiserfs/super.c:571:
+	    if (*p != '\0') {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1203: FILE: fs/reiserfs/super.c:573:
+		printk ("reiserfs_parse_options: bad value %s\n", arg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1203: FILE: fs/reiserfs/super.c:573:
+		printk ("reiserfs_parse_options: bad value %s\n", arg);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1237: FILE: fs/reiserfs/super.c:578:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: fs/reiserfs/super.c:578:
+    $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1253: FILE: fs/reiserfs/super.c:606:
+static int reiserfs_remount (struct super_block * s, int * mount_flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1253: FILE: fs/reiserfs/super.c:606:
+static int reiserfs_remount (struct super_block * s, int * mount_flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1253: FILE: fs/reiserfs/super.c:606:
+static int reiserfs_remount (struct super_block * s, int * mount_flags, char * data)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1253: FILE: fs/reiserfs/super.c:606:
+static int reiserfs_remount (struct super_block * s, int * mount_flags, char * data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1262: FILE: fs/reiserfs/super.c:615:
+  if (!reiserfs_parse_options(data, &mount_options, &blocks))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: fs/reiserfs/super.c:639:
+  if (*mount_flags & MS_RDONLY) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1276: FILE: fs/reiserfs/super.c:639:
+  if (*mount_flags & MS_RDONLY) {
[...]
+    if (s->s_flags & MS_RDONLY)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: fs/reiserfs/super.c:641:
+    if (s->s_flags & MS_RDONLY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1278: FILE: fs/reiserfs/super.c:641:
+    if (s->s_flags & MS_RDONLY)
[...]
+      return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1280: FILE: fs/reiserfs/super.c:643:
+      return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1289: FILE: fs/reiserfs/super.c:659:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1289: FILE: fs/reiserfs/super.c:659:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1298: FILE: fs/reiserfs/super.c:674:
+  if (!( *mount_flags & MS_RDONLY ) )$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1298: FILE: fs/reiserfs/super.c:674:
+  if (!( *mount_flags & MS_RDONLY ) )
     finish_unfinished( s );

ERROR:SPACING: space prohibited after that open parenthesis '('
#1298: FILE: fs/reiserfs/super.c:674:
+  if (!( *mount_flags & MS_RDONLY ) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1298: FILE: fs/reiserfs/super.c:674:
+  if (!( *mount_flags & MS_RDONLY ) )

CHECK:SPACING: No space is necessary after a cast
#1321: FILE: fs/reiserfs/super.c:1036:
+    if (reiserfs_parse_options ((char *) data, &(s->u.reiserfs_sb.s_mount_opt), &blocks) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1321: FILE: fs/reiserfs/super.c:1036:
+    if (reiserfs_parse_options ((char *) data, &(s->u.reiserfs_sb.s_mount_opt), &blocks) == 0) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1321: FILE: fs/reiserfs/super.c:1036:
+    if (reiserfs_parse_options ((char *) data, &(s->u.reiserfs_sb.s_mount_opt), &blocks) == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around s->u.reiserfs_sb.s_mount_opt
#1321: FILE: fs/reiserfs/super.c:1036:
+    if (reiserfs_parse_options ((char *) data, &(s->u.reiserfs_sb.s_mount_opt), &blocks) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1321: FILE: fs/reiserfs/super.c:1036:
+    if (reiserfs_parse_options ((char *) data, &(s->u.reiserfs_sb.s_mount_opt), &blocks) == 0) {
 	return NULL;
     }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1344: FILE: fs/reiserfs/super.c:1202:
+  buf->f_namelen = (REISERFS_MAX_NAME (s->s_blocksize));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1344: FILE: fs/reiserfs/super.c:1202:
+  buf->f_namelen = (REISERFS_MAX_NAME (s->s_blocksize));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1345: FILE: fs/reiserfs/super.c:1203:
+  buf->f_ffree   = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1346: FILE: fs/reiserfs/super.c:1204:
+  buf->f_files   = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1352: FILE: fs/reiserfs/super.c:1207:
+  buf->f_blocks  = sb_block_count(rs) - sb_bmap_nr(rs) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: fs/reiserfs/super.c:1208:
+  buf->f_bsize   = s->s_blocksize;$

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#1354: FILE: fs/reiserfs/super.c:1209:
+  /* changed to accomodate gcc folks.*/
                 ^^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1355: FILE: fs/reiserfs/super.c:1210:
+  buf->f_type    =  REISERFS_SUPER_MAGIC;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1423: FILE: include/linux/reiserfs_fs.h:1532:
+ * sources and are not licensed by Namesys to its non-GPL license customers */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1431: FILE: include/linux/reiserfs_fs_i.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1442: FILE: include/linux/reiserfs_fs_sb.h:1:
+/* Copyright 1996-2002 Hans Reiser, see reiserfs/README for licensing

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440644.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 67 errors, 262 warnings, 16 checks, 1200 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440644.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
