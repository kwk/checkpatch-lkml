WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: arch/ia64/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#172: FILE: arch/ia64/kernel/kgdb.c:23:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by David Grothe <dave@gcom.com>
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#190: FILE: arch/ia64/kernel/kgdb.c:41:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: arch/ia64/kernel/kgdb.c:41:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#190: FILE: arch/ia64/kernel/kgdb.c:41:
+#define REGISTER_BYTES (NUM_REGS*8+128*8)
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'N' - possible side-effects?
#191: FILE: arch/ia64/kernel/kgdb.c:42:
+#define REGISTER_BYTE(N) (((N) * 8) \
+  + ((N) <= IA64_FR0_REGNUM ? 0 : 8 * (((N) > IA64_FR127_REGNUM) ? 128 : (N) - IA64_FR0_REGNUM)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: arch/ia64/kernel/kgdb.c:43:
+  + ((N) <= IA64_FR0_REGNUM ? 0 : 8 * (((N) > IA64_FR127_REGNUM) ? 128 : (N) - IA64_FR0_REGNUM)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'N' - possible side-effects?
#193: FILE: arch/ia64/kernel/kgdb.c:44:
+#define	REGISTER_SIZE(N) (((N) >= IA64_FR0_REGNUM && (N) <= IA64_FR127_REGNUM) ? 16 : 8)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: arch/ia64/kernel/kgdb.c:47:
+#define IA64_FR127_REGNUM       (IA64_FR0_REGNUM+127)
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: arch/ia64/kernel/kgdb.c:57:
+#define IA64_NAT31_REGNUM       (IA64_NAT0_REGNUM+31)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#207: FILE: arch/ia64/kernel/kgdb.c:58:
+#define IA64_NAT32_REGNUM       (IA64_NAT0_REGNUM+32)
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#208: FILE: arch/ia64/kernel/kgdb.c:59:
+#define IA64_RSC_REGNUM		(IA64_AR0_REGNUM+16)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#209: FILE: arch/ia64/kernel/kgdb.c:60:
+#define IA64_BSP_REGNUM		(IA64_AR0_REGNUM+17)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: arch/ia64/kernel/kgdb.c:61:
+#define IA64_BSPSTORE_REGNUM	(IA64_AR0_REGNUM+18)
                             	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: arch/ia64/kernel/kgdb.c:62:
+#define IA64_RNAT_REGNUM	(IA64_AR0_REGNUM+19)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: arch/ia64/kernel/kgdb.c:63:
+#define IA64_FCR_REGNUM		(IA64_AR0_REGNUM+21)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: arch/ia64/kernel/kgdb.c:64:
+#define IA64_EFLAG_REGNUM	(IA64_AR0_REGNUM+24)
                          	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#214: FILE: arch/ia64/kernel/kgdb.c:65:
+#define IA64_CSD_REGNUM		(IA64_AR0_REGNUM+25)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#215: FILE: arch/ia64/kernel/kgdb.c:66:
+#define IA64_SSD_REGNUM		(IA64_AR0_REGNUM+26)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#216: FILE: arch/ia64/kernel/kgdb.c:67:
+#define IA64_CFLG_REGNUM	(IA64_AR0_REGNUM+27)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#217: FILE: arch/ia64/kernel/kgdb.c:68:
+#define IA64_FSR_REGNUM		(IA64_AR0_REGNUM+28)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#218: FILE: arch/ia64/kernel/kgdb.c:69:
+#define IA64_FIR_REGNUM		(IA64_AR0_REGNUM+29)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: arch/ia64/kernel/kgdb.c:70:
+#define IA64_FDR_REGNUM		(IA64_AR0_REGNUM+30)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#220: FILE: arch/ia64/kernel/kgdb.c:71:
+#define IA64_CCV_REGNUM		(IA64_AR0_REGNUM+32)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#221: FILE: arch/ia64/kernel/kgdb.c:72:
+#define IA64_UNAT_REGNUM	(IA64_AR0_REGNUM+36)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: arch/ia64/kernel/kgdb.c:73:
+#define IA64_FPSR_REGNUM	(IA64_AR0_REGNUM+40)
                         	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#223: FILE: arch/ia64/kernel/kgdb.c:74:
+#define IA64_ITC_REGNUM		(IA64_AR0_REGNUM+44)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#224: FILE: arch/ia64/kernel/kgdb.c:75:
+#define IA64_PFS_REGNUM		(IA64_AR0_REGNUM+64)
                        		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: arch/ia64/kernel/kgdb.c:76:
+#define IA64_LC_REGNUM		(IA64_AR0_REGNUM+65)
                       		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: arch/ia64/kernel/kgdb.c:77:
+#define IA64_EC_REGNUM		(IA64_AR0_REGNUM+66)
                       		                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#228: FILE: arch/ia64/kernel/kgdb.c:79:
+#define	REGISTER_INDEX(N)	(REGISTER_BYTE(N) / sizeof (unsigned long))

CHECK:SPACING: No space is necessary after a cast
#230: FILE: arch/ia64/kernel/kgdb.c:81:
+#define	ptoff(V)	((unsigned int) &((struct pt_regs *)0x0)->V)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'V' may be better as '(V)' to avoid precedence issues
#230: FILE: arch/ia64/kernel/kgdb.c:81:
+#define	ptoff(V)	((unsigned int) &((struct pt_regs *)0x0)->V)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#235: FILE: arch/ia64/kernel/kgdb.c:86:
+};
+struct reg_to_ptreg_index gr_reg_to_ptreg_index[] = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: arch/ia64/kernel/kgdb.c:87:
+	{IA64_GR0_REGNUM+8, ptoff(r8)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#237: FILE: arch/ia64/kernel/kgdb.c:88:
+	{IA64_GR0_REGNUM+9, ptoff(r9)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#238: FILE: arch/ia64/kernel/kgdb.c:89:
+	{IA64_GR0_REGNUM+10, ptoff(r10)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#239: FILE: arch/ia64/kernel/kgdb.c:90:
+	{IA64_GR0_REGNUM+11, ptoff(r11)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#240: FILE: arch/ia64/kernel/kgdb.c:91:
+	{IA64_GR0_REGNUM+1, ptoff(r1)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#241: FILE: arch/ia64/kernel/kgdb.c:92:
+	{IA64_GR0_REGNUM+12, ptoff(r12)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#242: FILE: arch/ia64/kernel/kgdb.c:93:
+	{IA64_GR0_REGNUM+13, ptoff(r13)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#243: FILE: arch/ia64/kernel/kgdb.c:94:
+	{IA64_GR0_REGNUM+14, ptoff(r14)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: arch/ia64/kernel/kgdb.c:95:
+	{IA64_GR0_REGNUM+15, ptoff(r15)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: arch/ia64/kernel/kgdb.c:100:
+	{IA64_BR0_REGNUM+6, ptoff(b6)},
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#250: FILE: arch/ia64/kernel/kgdb.c:101:
+	{IA64_BR0_REGNUM+7, ptoff(b7)},
 	                ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#253: FILE: arch/ia64/kernel/kgdb.c:104:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#262: FILE: arch/ia64/kernel/kgdb.c:113:
+	if ((regnum >= IA64_GR0_REGNUM && regnum <= (IA64_GR0_REGNUM+1)) ||
 	                                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: arch/ia64/kernel/kgdb.c:114:
+	if ((regnum >= IA64_GR0_REGNUM && regnum <= (IA64_GR0_REGNUM+1)) ||
+		(regnum >= (IA64_GR0_REGNUM+4) && regnum <= (IA64_GR0_REGNUM+7)) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: arch/ia64/kernel/kgdb.c:114:
+		(regnum >= (IA64_GR0_REGNUM+4) && regnum <= (IA64_GR0_REGNUM+7)) ||
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: arch/ia64/kernel/kgdb.c:114:
+		(regnum >= (IA64_GR0_REGNUM+4) && regnum <= (IA64_GR0_REGNUM+7)) ||
 		                                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: arch/ia64/kernel/kgdb.c:115:
+		(regnum >= (IA64_GR0_REGNUM+16) && regnum <= (IA64_GR0_REGNUM+31))) {
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: arch/ia64/kernel/kgdb.c:115:
+		(regnum >= (IA64_GR0_REGNUM+16) && regnum <= (IA64_GR0_REGNUM+31))) {
 		                                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#268: FILE: arch/ia64/kernel/kgdb.c:119:
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||
 	                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#268: FILE: arch/ia64/kernel/kgdb.c:119:
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||
 	                                                                     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#268: FILE: arch/ia64/kernel/kgdb.c:119:
+	}
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: arch/ia64/kernel/kgdb.c:120:
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||
+		(regnum >= (IA64_GR0_REGNUM+8) && regnum <= (IA64_GR0_REGNUM+15))) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#269: FILE: arch/ia64/kernel/kgdb.c:120:
+		(regnum >= (IA64_GR0_REGNUM+8) && regnum <= (IA64_GR0_REGNUM+15))) {
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#269: FILE: arch/ia64/kernel/kgdb.c:120:
+		(regnum >= (IA64_GR0_REGNUM+8) && regnum <= (IA64_GR0_REGNUM+15))) {
 		                                                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#270: FILE: arch/ia64/kernel/kgdb.c:121:
+		if (ptregs) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#271: FILE: arch/ia64/kernel/kgdb.c:122:
+			for (i = 0; i < (sizeof (gr_reg_to_ptreg_index) /

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#274: FILE: arch/ia64/kernel/kgdb.c:125:
+					reg = * ((unsigned long *)
 					      ^

CHECK:SPACING: No space is necessary after a cast
#275: FILE: arch/ia64/kernel/kgdb.c:126:
+					(((void *) ptregs) + gr_reg_to_ptreg_index[i].ptregoff));

CHECK:BRACES: Unbalanced braces around else statement
#278: FILE: arch/ia64/kernel/kgdb.c:129:
+		} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#282: FILE: arch/ia64/kernel/kgdb.c:133:
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {
 	                                                                ^

ERROR:SPACING: space required before the open parenthesis '('
#282: FILE: arch/ia64/kernel/kgdb.c:133:
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#282: FILE: arch/ia64/kernel/kgdb.c:133:
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#282: FILE: arch/ia64/kernel/kgdb.c:133:
+	}
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: arch/ia64/kernel/kgdb.c:135:
+	case IA64_BR0_REGNUM+6:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#285: FILE: arch/ia64/kernel/kgdb.c:136:
+	case IA64_BR0_REGNUM+7:
 	                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#286: FILE: arch/ia64/kernel/kgdb.c:137:
+		if (ptregs) {
[...]
+		} else
[...]

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#290: FILE: arch/ia64/kernel/kgdb.c:141:
+					reg = * ((unsigned long *)
 					      ^

CHECK:SPACING: No space is necessary after a cast
#291: FILE: arch/ia64/kernel/kgdb.c:142:
+					(((void *) ptregs) + br_reg_to_ptreg_index[i].ptregoff));

CHECK:BRACES: Unbalanced braces around else statement
#294: FILE: arch/ia64/kernel/kgdb.c:145:
+		} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: arch/ia64/kernel/kgdb.c:149:
+	case IA64_BR0_REGNUM+1:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#299: FILE: arch/ia64/kernel/kgdb.c:150:
+	case IA64_BR0_REGNUM+2:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#300: FILE: arch/ia64/kernel/kgdb.c:151:
+	case IA64_BR0_REGNUM+3:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#301: FILE: arch/ia64/kernel/kgdb.c:152:
+	case IA64_BR0_REGNUM+4:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#302: FILE: arch/ia64/kernel/kgdb.c:153:
+	case IA64_BR0_REGNUM+5:
 	                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#307: FILE: arch/ia64/kernel/kgdb.c:158:
+	else if (regnum >= IA64_FR0_REGNUM && regnum <= (IA64_FR0_REGNUM + 127)) switch (regnum) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#307: FILE: arch/ia64/kernel/kgdb.c:158:
+	}
+	else if (regnum >= IA64_FR0_REGNUM && regnum <= (IA64_FR0_REGNUM + 127)) switch (regnum) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#308: FILE: arch/ia64/kernel/kgdb.c:159:
+	case IA64_FR0_REGNUM+6:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#309: FILE: arch/ia64/kernel/kgdb.c:160:
+	case IA64_FR0_REGNUM+7:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#310: FILE: arch/ia64/kernel/kgdb.c:161:
+	case IA64_FR0_REGNUM+8:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: arch/ia64/kernel/kgdb.c:162:
+	case IA64_FR0_REGNUM+9:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#312: FILE: arch/ia64/kernel/kgdb.c:163:
+	case IA64_FR0_REGNUM+10:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#313: FILE: arch/ia64/kernel/kgdb.c:164:
+	case IA64_FR0_REGNUM+11:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: arch/ia64/kernel/kgdb.c:165:
+	case IA64_FR0_REGNUM+12:
 	                    ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#315: FILE: arch/ia64/kernel/kgdb.c:166:
+		if (!ptregs)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#317: FILE: arch/ia64/kernel/kgdb.c:168:
+		else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#318: FILE: arch/ia64/kernel/kgdb.c:169:
+			freg = *(&ptregs->f6 + (regnum - (IA64_FR0_REGNUM+6)));
 			                                                 ^

CHECK:SPACING: No space is necessary after a cast
#321: FILE: arch/ia64/kernel/kgdb.c:172:
+		mem = (unsigned long *) &freg;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#327: FILE: arch/ia64/kernel/kgdb.c:178:
+	}
+	else if (regnum == IA64_IP_REGNUM) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#334: FILE: arch/ia64/kernel/kgdb.c:185:
+	}
+	else if (regnum == IA64_CFM_REGNUM) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#341: FILE: arch/ia64/kernel/kgdb.c:192:
+	}
+	else if (regnum == IA64_PSR_REGNUM) {

CHECK:SPACING: No space is necessary after a cast
#344: FILE: arch/ia64/kernel/kgdb.c:195:
+				((unsigned long) kgdb_usethread + IA64_STK_OFFSET) - 1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#349: FILE: arch/ia64/kernel/kgdb.c:200:
+	}
+	else if (regnum == IA64_PR_REGNUM) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#356: FILE: arch/ia64/kernel/kgdb.c:207:
+	}
+	else if (regnum == IA64_BSP_REGNUM) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#360: FILE: arch/ia64/kernel/kgdb.c:211:
+	else if (regnum >= IA64_AR0_REGNUM && regnum <= IA64_EC_REGNUM) switch (regnum) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#360: FILE: arch/ia64/kernel/kgdb.c:211:
+	}
+	else if (regnum >= IA64_AR0_REGNUM && regnum <= IA64_EC_REGNUM) switch (regnum) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#422: FILE: arch/ia64/kernel/kgdb.c:273:
+	if (size) {
[...]
+	else
[...]

CHECK:SPACING: No space is necessary after a cast
#423: FILE: arch/ia64/kernel/kgdb.c:274:
+		kgdb_mem2hex((char *) mem, outbuffer, size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#424: FILE: arch/ia64/kernel/kgdb.c:275:
+		outbuffer[size*2] = 0;
 		              ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#426: FILE: arch/ia64/kernel/kgdb.c:277:
+	}
+	else

WARNING:RETURN_VOID: void function return statements are not generally useful
#430: FILE: arch/ia64/kernel/kgdb.c:281:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: arch/ia64/kernel/kgdb.c:284:
+void kgdb_put_reg(char *inbuffer, char *outbuffer, int regnum,
+	struct unw_frame_info *info, struct pt_regs *ptregs)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#445: FILE: arch/ia64/kernel/kgdb.c:296:
+	if ((regnum >= IA64_GR0_REGNUM && regnum <= (IA64_GR0_REGNUM+1)) ||
 	                                                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#445: FILE: arch/ia64/kernel/kgdb.c:296:
+	if ((regnum >= IA64_GR0_REGNUM && regnum <= (IA64_GR0_REGNUM+1)) ||
[...]
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||
[...]
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {
[...]
+	else if (regnum >= IA64_FR0_REGNUM && regnum <= (IA64_FR0_REGNUM + 127)) switch (regnum) {
[...]
+	else if (regnum == IA64_IP_REGNUM)
[...]
+	else if (regnum == IA64_CFM_REGNUM)
[...]
+	else if (regnum == IA64_PSR_REGNUM)
[...]
+	else if (regnum == IA64_PR_REGNUM)
[...]
+	else if (regnum >= IA64_AR0_REGNUM && regnum <= IA64_EC_REGNUM) switch (regnum) {
[...]
+	else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: arch/ia64/kernel/kgdb.c:297:
+	if ((regnum >= IA64_GR0_REGNUM && regnum <= (IA64_GR0_REGNUM+1)) ||
+		(regnum >= (IA64_GR0_REGNUM+4) && regnum <= (IA64_GR0_REGNUM+7)) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#446: FILE: arch/ia64/kernel/kgdb.c:297:
+		(regnum >= (IA64_GR0_REGNUM+4) && regnum <= (IA64_GR0_REGNUM+7)) ||
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#446: FILE: arch/ia64/kernel/kgdb.c:297:
+		(regnum >= (IA64_GR0_REGNUM+4) && regnum <= (IA64_GR0_REGNUM+7)) ||
 		                                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#447: FILE: arch/ia64/kernel/kgdb.c:298:
+		(regnum >= (IA64_GR0_REGNUM+16) && regnum <= (IA64_GR0_REGNUM+31))) {
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#447: FILE: arch/ia64/kernel/kgdb.c:298:
+		(regnum >= (IA64_GR0_REGNUM+16) && regnum <= (IA64_GR0_REGNUM+31))) {
 		                                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: arch/ia64/kernel/kgdb.c:301:
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||
 	                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: arch/ia64/kernel/kgdb.c:301:
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||
 	                                                                     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#450: FILE: arch/ia64/kernel/kgdb.c:301:
+	}
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: arch/ia64/kernel/kgdb.c:302:
+	else if ((regnum >= (IA64_GR0_REGNUM+2) && regnum <= (IA64_GR0_REGNUM+3)) ||
+		(regnum >= (IA64_GR0_REGNUM+8) && regnum <= (IA64_GR0_REGNUM+15))) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#451: FILE: arch/ia64/kernel/kgdb.c:302:
+		(regnum >= (IA64_GR0_REGNUM+8) && regnum <= (IA64_GR0_REGNUM+15))) {
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#451: FILE: arch/ia64/kernel/kgdb.c:302:
+		(regnum >= (IA64_GR0_REGNUM+8) && regnum <= (IA64_GR0_REGNUM+15))) {
 		                                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#452: FILE: arch/ia64/kernel/kgdb.c:303:
+		for (i = 0; i < (sizeof (gr_reg_to_ptreg_index) /

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#455: FILE: arch/ia64/kernel/kgdb.c:306:
+				* ((unsigned long *)
 				^

CHECK:SPACING: No space is necessary after a cast
#456: FILE: arch/ia64/kernel/kgdb.c:307:
+				(((void *) ptregs) + gr_reg_to_ptreg_index[i].ptregoff)) = reg;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#460: FILE: arch/ia64/kernel/kgdb.c:311:
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {
 	                                                                ^

ERROR:SPACING: space required before the open parenthesis '('
#460: FILE: arch/ia64/kernel/kgdb.c:311:
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#460: FILE: arch/ia64/kernel/kgdb.c:311:
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#460: FILE: arch/ia64/kernel/kgdb.c:311:
+	}
+	else if (regnum >= IA64_BR0_REGNUM && regnum <= (IA64_BR0_REGNUM+7)) switch(regnum) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#462: FILE: arch/ia64/kernel/kgdb.c:313:
+	case IA64_BR0_REGNUM+6:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#463: FILE: arch/ia64/kernel/kgdb.c:314:
+	case IA64_BR0_REGNUM+7:
 	                    ^

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#467: FILE: arch/ia64/kernel/kgdb.c:318:
+				* ((unsigned long *)
 				^

CHECK:SPACING: No space is necessary after a cast
#468: FILE: arch/ia64/kernel/kgdb.c:319:
+				(((void *) ptregs) + br_reg_to_ptreg_index[i].ptregoff)) = reg;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#472: FILE: arch/ia64/kernel/kgdb.c:323:
+	case IA64_BR0_REGNUM+1:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#473: FILE: arch/ia64/kernel/kgdb.c:324:
+	case IA64_BR0_REGNUM+2:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#474: FILE: arch/ia64/kernel/kgdb.c:325:
+	case IA64_BR0_REGNUM+3:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#475: FILE: arch/ia64/kernel/kgdb.c:326:
+	case IA64_BR0_REGNUM+4:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#476: FILE: arch/ia64/kernel/kgdb.c:327:
+	case IA64_BR0_REGNUM+5:
 	                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#480: FILE: arch/ia64/kernel/kgdb.c:331:
+	else if (regnum >= IA64_FR0_REGNUM && regnum <= (IA64_FR0_REGNUM + 127)) switch (regnum) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#480: FILE: arch/ia64/kernel/kgdb.c:331:
+	}
+	else if (regnum >= IA64_FR0_REGNUM && regnum <= (IA64_FR0_REGNUM + 127)) switch (regnum) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#481: FILE: arch/ia64/kernel/kgdb.c:332:
+	case IA64_FR0_REGNUM+6:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#482: FILE: arch/ia64/kernel/kgdb.c:333:
+	case IA64_FR0_REGNUM+7:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#483: FILE: arch/ia64/kernel/kgdb.c:334:
+	case IA64_FR0_REGNUM+8:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#484: FILE: arch/ia64/kernel/kgdb.c:335:
+	case IA64_FR0_REGNUM+9:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#485: FILE: arch/ia64/kernel/kgdb.c:336:
+	case IA64_FR0_REGNUM+10:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#486: FILE: arch/ia64/kernel/kgdb.c:337:
+	case IA64_FR0_REGNUM+11:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#487: FILE: arch/ia64/kernel/kgdb.c:338:
+	case IA64_FR0_REGNUM+12:
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: arch/ia64/kernel/kgdb.c:341:
+		*(&ptregs->f6 + (regnum - (IA64_FR0_REGNUM+6))) = freg;
 		                                          ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#495: FILE: arch/ia64/kernel/kgdb.c:346:
+	}
+	else if (regnum == IA64_IP_REGNUM)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#503: FILE: arch/ia64/kernel/kgdb.c:354:
+	else if (regnum >= IA64_AR0_REGNUM && regnum <= IA64_EC_REGNUM) switch (regnum) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#536: FILE: arch/ia64/kernel/kgdb.c:387:
+	}
+	else

WARNING:RETURN_VOID: void function return statements are not generally useful
#540: FILE: arch/ia64/kernel/kgdb.c:391:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#552: FILE: arch/ia64/kernel/kgdb.c:403:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#553: FILE: arch/ia64/kernel/kgdb.c:404:
+
+}

CHECK:BIT_MACRO: Prefer using the BIT macro
#564: FILE: arch/ia64/kernel/kgdb.c:415:
+#define	HWCAP_IBR	(1 << WATCH_INSTRUCTION)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#566: FILE: arch/ia64/kernel/kgdb.c:417:
+	unsigned enabled;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: arch/ia64/kernel/kgdb.c:429:
+  { M, I, I },^I^I^I^I/* 00 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: arch/ia64/kernel/kgdb.c:430:
+  { M, I, I },^I^I^I^I/* 01 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/ia64/kernel/kgdb.c:431:
+  { M, I, I },^I^I^I^I/* 02 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: arch/ia64/kernel/kgdb.c:432:
+  { M, I, I },^I^I^I^I/* 03 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: arch/ia64/kernel/kgdb.c:433:
+  { M, L, X },^I^I^I^I/* 04 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: arch/ia64/kernel/kgdb.c:434:
+  { M, L, X },^I^I^I^I/* 05 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#584: FILE: arch/ia64/kernel/kgdb.c:435:
+  { u, u, u },  ^I^I^I/* 06 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: arch/ia64/kernel/kgdb.c:435:
+  { u, u, u },  ^I^I^I/* 06 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#585: FILE: arch/ia64/kernel/kgdb.c:436:
+  { u, u, u },  ^I^I^I/* 07 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: arch/ia64/kernel/kgdb.c:436:
+  { u, u, u },  ^I^I^I/* 07 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#586: FILE: arch/ia64/kernel/kgdb.c:437:
+  { M, M, I },^I^I^I^I/* 08 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: arch/ia64/kernel/kgdb.c:438:
+  { M, M, I },^I^I^I^I/* 09 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: arch/ia64/kernel/kgdb.c:439:
+  { M, M, I },^I^I^I^I/* 0A */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: arch/ia64/kernel/kgdb.c:440:
+  { M, M, I },^I^I^I^I/* 0B */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: arch/ia64/kernel/kgdb.c:441:
+  { M, F, I },^I^I^I^I/* 0C */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: arch/ia64/kernel/kgdb.c:442:
+  { M, F, I },^I^I^I^I/* 0D */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: arch/ia64/kernel/kgdb.c:443:
+  { M, M, F },^I^I^I^I/* 0E */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: arch/ia64/kernel/kgdb.c:444:
+  { M, M, F },^I^I^I^I/* 0F */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: arch/ia64/kernel/kgdb.c:445:
+  { M, I, B },^I^I^I^I/* 10 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: arch/ia64/kernel/kgdb.c:446:
+  { M, I, B },^I^I^I^I/* 11 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: arch/ia64/kernel/kgdb.c:447:
+  { M, B, B },^I^I^I^I/* 12 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: arch/ia64/kernel/kgdb.c:448:
+  { M, B, B },^I^I^I^I/* 13 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#598: FILE: arch/ia64/kernel/kgdb.c:449:
+  { u, u, u },  ^I^I^I/* 14 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: arch/ia64/kernel/kgdb.c:449:
+  { u, u, u },  ^I^I^I/* 14 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#599: FILE: arch/ia64/kernel/kgdb.c:450:
+  { u, u, u },  ^I^I^I/* 15 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: arch/ia64/kernel/kgdb.c:450:
+  { u, u, u },  ^I^I^I/* 15 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: arch/ia64/kernel/kgdb.c:451:
+  { B, B, B },^I^I^I^I/* 16 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: arch/ia64/kernel/kgdb.c:452:
+  { B, B, B },^I^I^I^I/* 17 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: arch/ia64/kernel/kgdb.c:453:
+  { M, M, B },^I^I^I^I/* 18 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: arch/ia64/kernel/kgdb.c:454:
+  { M, M, B },^I^I^I^I/* 19 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#604: FILE: arch/ia64/kernel/kgdb.c:455:
+  { u, u, u },  ^I^I^I/* 1A */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: arch/ia64/kernel/kgdb.c:455:
+  { u, u, u },  ^I^I^I/* 1A */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#605: FILE: arch/ia64/kernel/kgdb.c:456:
+  { u, u, u },  ^I^I^I/* 1B */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: arch/ia64/kernel/kgdb.c:456:
+  { u, u, u },  ^I^I^I/* 1B */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: arch/ia64/kernel/kgdb.c:457:
+  { M, F, B },^I^I^I^I/* 1C */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/ia64/kernel/kgdb.c:458:
+  { M, F, B },^I^I^I^I/* 1D */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#608: FILE: arch/ia64/kernel/kgdb.c:459:
+  { u, u, u },  ^I^I^I/* 1E */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: arch/ia64/kernel/kgdb.c:459:
+  { u, u, u },  ^I^I^I/* 1E */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#609: FILE: arch/ia64/kernel/kgdb.c:460:
+  { u, u, u },  ^I^I^I/* 1F */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: arch/ia64/kernel/kgdb.c:460:
+  { u, u, u },  ^I^I^I/* 1F */$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#614: FILE: arch/ia64/kernel/kgdb.c:465:
+	extern unsigned long _start[];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#621: FILE: arch/ia64/kernel/kgdb.c:472:
+			unsigned long long slot1_p0 : 64-46;
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#624: FILE: arch/ia64/kernel/kgdb.c:475:
+			unsigned long long slot1_p1 : 41 - (64-46);
 			                                      ^

CHECK:SPACING: No space is necessary after a cast
#632: FILE: arch/ia64/kernel/kgdb.c:483:
+	if (bundle_addr == (unsigned long) _start)

CHECK:SPACING: No space is necessary after a cast
#635: FILE: arch/ia64/kernel/kgdb.c:486:
+	ret = kgdb_get_mem((char *) bundle_addr, (char *) &bundle, BREAK_INSTR_SIZE);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#654: FILE: arch/ia64/kernel/kgdb.c:505:
+		bundle.quad1.slot1_p1 = (BREAKNUM >> (64-46));
 		                                        ^

CHECK:SPACING: No space is necessary after a cast
#661: FILE: arch/ia64/kernel/kgdb.c:512:
+	return kgdb_set_mem((char *) bundle_addr, (char *) &bundle, BREAK_INSTR_SIZE);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#666: FILE: arch/ia64/kernel/kgdb.c:517:
+	extern unsigned long _start[];

CHECK:SPACING: No space is necessary after a cast
#669: FILE: arch/ia64/kernel/kgdb.c:520:
+	if (addr == (unsigned long) _start)

CHECK:SPACING: No space is necessary after a cast
#671: FILE: arch/ia64/kernel/kgdb.c:522:
+	return kgdb_set_mem((char *) addr, (char *) bundle, BREAK_INSTR_SIZE);

CHECK:SPACING: No space is necessary after a cast
#692: FILE: arch/ia64/kernel/kgdb.c:543:
+		printk(KERN_INFO "do_init_hw_break: pal call failed %d\n", (int) status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#692: FILE: arch/ia64/kernel/kgdb.c:543:
+		printk(KERN_INFO "do_init_hw_break: pal call failed %d\n", (int) status);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_init_hw_break', this function's name, in a string
#692: FILE: arch/ia64/kernel/kgdb.c:543:
+		printk(KERN_INFO "do_init_hw_break: pal call failed %d\n", (int) status);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#697: FILE: arch/ia64/kernel/kgdb.c:548:
+		printk(KERN_INFO "do_init_hw_break: %d exceeds max %d\n", (int) HW_BREAKPOINT,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#697: FILE: arch/ia64/kernel/kgdb.c:548:
+		printk(KERN_INFO "do_init_hw_break: %d exceeds max %d\n", (int) HW_BREAKPOINT,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_init_hw_break', this function's name, in a string
#697: FILE: arch/ia64/kernel/kgdb.c:548:
+		printk(KERN_INFO "do_init_hw_break: %d exceeds max %d\n", (int) HW_BREAKPOINT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: arch/ia64/kernel/kgdb.c:549:
+		printk(KERN_INFO "do_init_hw_break: %d exceeds max %d\n", (int) HW_BREAKPOINT,
+			(int) MAX_HW_BREAKPOINT);

CHECK:SPACING: No space is necessary after a cast
#698: FILE: arch/ia64/kernel/kgdb.c:549:
+			(int) MAX_HW_BREAKPOINT);

WARNING:RETURN_VOID: void function return statements are not generally useful
#717: FILE: arch/ia64/kernel/kgdb.c:568:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: arch/ia64/kernel/kgdb.c:581:
+				int ibreakno = breakno - hw_break_total_dbr;
+				ia64_set_ibr(ibreakno << 1, breakinfo[breakno].addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: arch/ia64/kernel/kgdb.c:583:
+				ia64_set_ibr((ibreakno << 1) + 1,
+					(~breakinfo[breakno].mask & ((1UL << 56UL) - 1)) |

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#735: FILE: arch/ia64/kernel/kgdb.c:586:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#735: FILE: arch/ia64/kernel/kgdb.c:586:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: arch/ia64/kernel/kgdb.c:589:
+				ia64_set_dbr((breakno << 1) + 1,
+					(~breakinfo[breakno].mask & ((1UL << 56UL) - 1)) |

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#742: FILE: arch/ia64/kernel/kgdb.c:593:
+		}
+		else  {

CHECK:BRACES: Unbalanced braces around else statement
#742: FILE: arch/ia64/kernel/kgdb.c:593:
+		else  {

WARNING:RETURN_VOID: void function return statements are not generally useful
#751: FILE: arch/ia64/kernel/kgdb.c:602:
+	return;
+}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#757: FILE: arch/ia64/kernel/kgdb.c:608:
+	extern unsigned long _start[];

CHECK:SPACING: No space is necessary after a cast
#764: FILE: arch/ia64/kernel/kgdb.c:615:
+	else if (addr == (unsigned long) _start)

CHECK:BRACES: braces {} should be used on all arms of this statement
#773: FILE: arch/ia64/kernel/kgdb.c:624:
+		if (action) {
[...]
+		} else if (breakinfo[breakno].enabled &&
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#789: FILE: arch/ia64/kernel/kgdb.c:640:
+		}
+		else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#796: FILE: arch/ia64/kernel/kgdb.c:647:
+			break;
+		else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#822: FILE: arch/ia64/kernel/kgdb.c:673:
+
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#846: FILE: arch/ia64/kernel/kgdb.c:697:
+volatile static struct smp_unw {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#849: FILE: arch/ia64/kernel/kgdb.c:700:
+} smp_unw[NR_CPUS];

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#851: FILE: arch/ia64/kernel/kgdb.c:702:
+static int inline kgdb_get_blocked_state(struct task_struct *p, struct unw_frame_info *unw)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#872: FILE: arch/ia64/kernel/kgdb.c:723:
+static void inline kgdb_wait(struct pt_regs *regs)

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: arch/ia64/kernel/kgdb.c:726:
+	unsigned long hw_breakpoint_status = ia64_getreg(_IA64_REG_PSR);
+	if (hw_breakpoint_status & IA64_PSR_DB)

WARNING:RETURN_VOID: void function return statements are not generally useful
#881: FILE: arch/ia64/kernel/kgdb.c:732:
+	return;
+}

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#883: FILE: arch/ia64/kernel/kgdb.c:734:
+static void inline normalize(struct unw_frame_info *running, struct pt_regs *regs)

CHECK:SPACING: No space is necessary after a cast
#889: FILE: arch/ia64/kernel/kgdb.c:740:
+		if ((sp + 0x10) >= (unsigned long) regs)

WARNING:RETURN_VOID: void function return statements are not generally useful
#894: FILE: arch/ia64/kernel/kgdb.c:745:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#913: FILE: arch/ia64/kernel/kgdb.c:764:
+		smp_unw[smp_processor_id()].unw = (struct unw_frame_info *) 1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#916: FILE: arch/ia64/kernel/kgdb.c:767:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#916: FILE: arch/ia64/kernel/kgdb.c:767:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#917: FILE: arch/ia64/kernel/kgdb.c:768:
+		if (current->state == TASK_RUNNING)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#919: FILE: arch/ia64/kernel/kgdb.c:770:
+		else {

CHECK:SPACING: No space is necessary after a cast
#921: FILE: arch/ia64/kernel/kgdb.c:772:
+				smp_unw[smp_processor_id()].unw = (struct unw_frame_info *) 1;

WARNING:RETURN_VOID: void function return statements are not generally useful
#930: FILE: arch/ia64/kernel/kgdb.c:781:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <eVector>
#932: FILE: arch/ia64/kernel/kgdb.c:783:
+void kgdb_post_master_code(struct pt_regs *regs, int eVector, int err_code)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <exceptionVector>
#941: FILE: arch/ia64/kernel/kgdb.c:792:
+	int exceptionVector;

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#952: FILE: arch/ia64/kernel/kgdb.c:803:
+static void inline kgdb_pc(struct pt_regs *regs, unsigned long pc)

WARNING:RETURN_VOID: void function return statements are not generally useful
#957: FILE: arch/ia64/kernel/kgdb.c:808:
+	return;
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#959: FILE: arch/ia64/kernel/kgdb.c:810:
+volatile int kgdb_hwbreak_sstep[NR_CPUS];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: arch/ia64/kernel/kgdb.c:813:
+int kgdb_arch_handle_exception(int exceptionVector, int signo,
+		int err_code, char *remcom_in_buffer,

CHECK:SPACING: No space is necessary after a cast
#970: FILE: arch/ia64/kernel/kgdb.c:821:
+	info.unw = (void *) 0;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#980: FILE: arch/ia64/kernel/kgdb.c:831:
+	}
+	else if (kgdb_usethread == current) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#994: FILE: arch/ia64/kernel/kgdb.c:845:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#994: FILE: arch/ia64/kernel/kgdb.c:845:
+	else {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#997: FILE: arch/ia64/kernel/kgdb.c:848:
+		for (i = 0; i < NR_CPUS; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#999: FILE: arch/ia64/kernel/kgdb.c:850:
+			if (smp_unw[i].task == kgdb_usethread && smp_unw[i].unw &&
+				smp_unw[i].unw != (struct unw_frame_info *) 1) {

CHECK:SPACING: No space is necessary after a cast
#999: FILE: arch/ia64/kernel/kgdb.c:850:
+				smp_unw[i].unw != (struct unw_frame_info *) 1) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1004: FILE: arch/ia64/kernel/kgdb.c:855:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1004: FILE: arch/ia64/kernel/kgdb.c:855:
+			else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1014: FILE: arch/ia64/kernel/kgdb.c:865:
+		printk("kgdb_arch_handle_exception: p packet bad\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kgdb_arch_handle_exception', this function's name, in a string
#1014: FILE: arch/ia64/kernel/kgdb.c:865:
+		printk("kgdb_arch_handle_exception: p packet bad\n");

CHECK:SPACING: No space is necessary after a cast
#1015: FILE: arch/ia64/kernel/kgdb.c:866:
+		kgdb_mem2hex((char *) &bad, remcom_out_buffer, sizeof (bad));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1015: FILE: arch/ia64/kernel/kgdb.c:866:
+		kgdb_mem2hex((char *) &bad, remcom_out_buffer, sizeof (bad));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1016: FILE: arch/ia64/kernel/kgdb.c:867:
+		remcom_out_buffer[sizeof (bad) * 2] = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1022: FILE: arch/ia64/kernel/kgdb.c:873:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#1028: FILE: arch/ia64/kernel/kgdb.c:879:
+	unsigned long newPC;

CHECK:SPACING: No space is necessary after a cast
#1052: FILE: arch/ia64/kernel/kgdb.c:903:
+		kgdb_hex2mem(&remcom_in_buffer[1], (char *) &regnum, sizeof(regnum));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1053: FILE: arch/ia64/kernel/kgdb.c:904:
+		if (regnum >= NUM_REGS) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1057: FILE: arch/ia64/kernel/kgdb.c:908:
+		}
+		else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v >= 0'
#1068: FILE: arch/ia64/kernel/kgdb.c:919:
+		if ((!kgdb_usethread || kgdb_usethread == current) &&
+			kgdb_hex2long(&ptr, &v) &&
+		   	*ptr++ == '=' && (v >= 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#1068: FILE: arch/ia64/kernel/kgdb.c:919:
+		if ((!kgdb_usethread || kgdb_usethread == current) &&
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1069: FILE: arch/ia64/kernel/kgdb.c:920:
+		if ((!kgdb_usethread || kgdb_usethread == current) &&
+			kgdb_hex2long(&ptr, &v) &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#1070: FILE: arch/ia64/kernel/kgdb.c:921:
+^I^I   ^I*ptr++ == '=' && (v >= 0)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1070: FILE: arch/ia64/kernel/kgdb.c:921:
+^I^I   ^I*ptr++ == '=' && (v >= 0)) {$

CHECK:SPACING: No space is necessary after a cast
#1071: FILE: arch/ia64/kernel/kgdb.c:922:
+			regno = (int) v;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: arch/ia64/kernel/kgdb.c:925:
+			kgdb_put_reg(ptr, remcom_out_buffer, regno,
+				unw_info, linux_regs);

CHECK:BRACES: Unbalanced braces around else statement
#1075: FILE: arch/ia64/kernel/kgdb.c:926:
+		} else

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1094: FILE: arch/ia64/kernel/kgdb.c:945:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1096: FILE: arch/ia64/kernel/kgdb.c:947:
+		if (kgdb_hex2long(&ptr, &addr)) {
+			linux_regs->cr_iip = addr;
+		}

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1104: FILE: arch/ia64/kernel/kgdb.c:955:
+		atomic_set(&cpu_doing_single_step,-1);
 		                                 ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1104: FILE: arch/ia64/kernel/kgdb.c:955:
+		atomic_set(&cpu_doing_single_step,-1);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1111: FILE: arch/ia64/kernel/kgdb.c:962:
+				atomic_set(&cpu_doing_single_step,smp_processor_id());
 				                                 ^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1116: FILE: arch/ia64/kernel/kgdb.c:967:
+		/* if not hardware breakpoint, then reenable them */
 		                                    ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1117: FILE: arch/ia64/kernel/kgdb.c:968:
+		if (exceptionVector != 29)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1119: FILE: arch/ia64/kernel/kgdb.c:970:
+		else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1131: FILE: arch/ia64/kernel/kgdb.c:982:
+	return;
+}

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#1133: FILE: arch/ia64/kernel/kgdb.c:984:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TABSTOP: Statements should start on a tabstop
#1190: FILE: arch/ia64/kernel/smp.c:163:
+			      case IPI_KGDB_INTERRUPT:

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1227: FILE: arch/ia64/kernel/traps.c:96:
+	CHK_DEBUGGER(1, SIGTRAP, err, regs,);
 	                                  ^

WARNING:TABSTOP: Statements should start on a tabstop
#1271: FILE: arch/ia64/kernel/traps.c:504:
+	      case 36: /* Single Step Trap */

CHECK:SPACING: No space is necessary after a cast
#1273: FILE: arch/ia64/kernel/traps.c:506:
+		if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1274: FILE: arch/ia64/kernel/traps.c:507:
+		if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs) &&
+			kgdb_hwbreak_sstep[smp_processor_id()]) {

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1291: FILE: arch/ia64/kernel/traps.c:630:
+	CHK_DEBUGGER(vector, SIGTRAP, isr, regs,);
 	                                       ^

WARNING:MISPLACED_INIT: __initdata should be placed after kgdb_reg_state[KGDB_EARLY_SIZE]
#1304: FILE: arch/ia64/kernel/unwind.c:79:
+static struct unw_reg_state __initdata kgdb_reg_state[KGDB_EARLY_SIZE];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after kgdb_labeled_state[KGDB_EARLY_SIZE]
#1305: FILE: arch/ia64/kernel/unwind.c:80:
+static struct unw_labeled_state __initdata kgdb_labeled_state[KGDB_EARLY_SIZE];

CHECK:SPACING: No space is necessary after a cast
#1315: FILE: arch/ia64/kernel/unwind.c:90:
+		*((unsigned long *) &kgdb_reg_state[i]) = (unsigned long) kgdb_reg_state_free;

CHECK:SPACING: No space is necessary after a cast
#1321: FILE: arch/ia64/kernel/unwind.c:96:
+		*((unsigned long *) &kgdb_labeled_state[i]) =

CHECK:SPACING: No space is necessary after a cast
#1322: FILE: arch/ia64/kernel/unwind.c:97:
+			(unsigned long) kgdb_labeled_state_free;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1326: FILE: arch/ia64/kernel/unwind.c:101:
+
+}

CHECK:SPACING: No space is necessary after a cast
#1334: FILE: arch/ia64/kernel/unwind.c:109:
+	*mem = *((void **) p);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1345: FILE: arch/ia64/kernel/unwind.c:120:
+#define alloc_reg_state()^I(!malloc_sizes[0].cs_cachep ? ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1346: FILE: arch/ia64/kernel/unwind.c:121:
+^I^Ikgdb_malloc(&kgdb_reg_state_free) : ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'usr' - possible side-effects?
#1348: FILE: arch/ia64/kernel/unwind.c:123:
+#define free_reg_state(usr)	(!malloc_sizes[0].cs_cachep ?		\
+		kgdb_free(&kgdb_reg_state_free, usr) :			\
+		kfree(usr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'usr' - possible side-effects?
#1354: FILE: arch/ia64/kernel/unwind.c:129:
+#define free_labeled_state(usr)	(!malloc_sizes[0].cs_cachep ?		\
+		kgdb_free(&kgdb_labeled_state_free, usr) :		\
+		kfree(usr))

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1392: FILE: arch/ia64/mm/fault.c:236:
+	CHK_DEBUGGER(14, SIGSEGV, isr, regs,);
 	                                   ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1427: FILE: drivers/firmware/pcdp.c:121:
+	if (!line)
[...]
 	add_preferred_console("ttyS", port.line, options);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1446: FILE: drivers/firmware/pcdp.c:179:
+		else if (uart->type == PCDP_DEBUG_UART)
+				setup_serial_console(pcdp->rev, uart, 1);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1456: FILE: include/asm-ia64/kgdb.h:1:
+#ifndef _ASM_KGDB_H_

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1477: FILE: include/asm-ia64/kgdb.h:22:
+extern volatile int kgdb_hwbreak_sstep[NR_CPUS];

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1479: FILE: include/asm-ia64/kgdb.h:24:
+#define BREAKPOINT() asm volatile ("break.m 0x6665")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1482: FILE: include/asm-ia64/kgdb.h:27:
+#define CHECK_EXCEPTION_STACK() ^I1$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1484: FILE: include/asm-ia64/kgdb.h:29:
+#define	SERIAL_PORT_DFNS	{0,}, {0,}, {0,}, {0,}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1486: FILE: include/asm-ia64/kgdb.h:31:
+extern void smp_send_nmi_allbutself(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1487: FILE: include/asm-ia64/kgdb.h:32:
+extern void kgdb_wait_ipi(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1487: FILE: include/asm-ia64/kgdb.h:32:
+extern void kgdb_wait_ipi(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 93 warnings, 171 checks, 1387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
