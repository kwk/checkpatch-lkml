WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal linux-2.5.67-bk5/include/linux/module.h working-2.5.67-bk5-kallsyms/include/linux/module.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#41: FILE: include/linux/module.h:257:
+/* Returns module and fills in value, defined and namebuf, or NULL if
+   symnum out of range. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#41: FILE: include/linux/module.h:257:
+   symnum out of range. */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#91: FILE: kernel/kallsyms.c:127:
+struct kallsym_iter
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#100: FILE: kernel/kallsyms.c:136:
+/* seq_file limits to 1 page reads at a time.  Without this cache, it
+   is v. slow, calling s_start lots of times. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#100: FILE: kernel/kallsyms.c:136:
+   is v. slow, calling s_start lots of times. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#107: FILE: kernel/kallsyms.c:143:
+	unsigned stemlen;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter->owner"
#113: FILE: kernel/kallsyms.c:149:
+		if (iter->owner == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'compresion' may be misspelled - perhaps 'compression'?
#119: FILE: kernel/kallsyms.c:155:
+	   shared with previous name (stem compresion). */
 	                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#119: FILE: kernel/kallsyms.c:155:
+	/* First char of each symbol name indicates prefix length
+	   shared with previous name (stem compresion). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#119: FILE: kernel/kallsyms.c:155:
+	   shared with previous name (stem compresion). */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#122: FILE: kernel/kallsyms.c:158:
+	strncpy(iter->name+stemlen, kallsyms_names+iter->nameoff, 127-stemlen);
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#122: FILE: kernel/kallsyms.c:158:
+	strncpy(iter->name+stemlen, kallsyms_names+iter->nameoff, 127-stemlen);
 	                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#122: FILE: kernel/kallsyms.c:158:
+	strncpy(iter->name+stemlen, kallsyms_names+iter->nameoff, 127-stemlen);
 	                                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: kernel/kallsyms.c:208:
+           previous ones. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#172: FILE: kernel/kallsyms.c:208:
+	/* If it's in the core symbols, we need to iterate through the
+           previous ones. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#172: FILE: kernel/kallsyms.c:208:
+           previous ones. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#176: FILE: kernel/kallsyms.c:212:
+		iter->name[0] = iter->name[127] = '\0';

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#179: FILE: kernel/kallsyms.c:215:
+		for (i = 0; i+1 < *pos; i++)
 		             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#181: FILE: kernel/kallsyms.c:217:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: kernel/kallsyms.c:236:
+^I/* Some debugging symbols have no name.  Ignore them. */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#206: FILE: kernel/kallsyms.c:242:
+			   (int)(2*sizeof(void*)),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#206: FILE: kernel/kallsyms.c:242:
+			   (int)(2*sizeof(void*)),
 			          ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#211: FILE: kernel/kallsyms.c:247:
+			   (int)(2*sizeof(void*)),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: kernel/kallsyms.c:247:
+			   (int)(2*sizeof(void*)),
 			          ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#216: FILE: kernel/kallsyms.c:252:
+struct seq_operations kallsyms_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#228: FILE: kernel/kallsyms.c:264:
+static struct file_operations kallsyms_operations = {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#244: FILE: kernel/kallsyms.c:280:
+__initcall(kallsyms_init);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#261: FILE: kernel/module.c:1089:
+		for (i = 0; __start___ksymtab+i < __stop___ksymtab; i++)
 		                             ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#273: FILE: kernel/module.c:1101:
+static char elf_type(const Elf_Sym *sym,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#274: FILE: kernel/module.c:1102:
+		     Elf_Shdr *sechdrs,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#293: FILE: kernel/module.c:1121:
+	if (sechdrs[sym->st_shndx].sh_flags & SHF_ALLOC
+	    && sechdrs[sym->st_shndx].sh_type != SHT_NOBITS) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#328: FILE: kernel/module.c:1156:
+		mod->symtab[i].st_info
+			= elf_type(&mod->symtab[i], sechdrs, secstrings, mod);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377833.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 15 warnings, 13 checks, 335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377833.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
