ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: drivers/usb/gadget/inode.c:576:
+ ^I^I^Ierr = -EFAULT;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: drivers/usb/gadget/inode.c:576:
+ ^I^I^Ierr = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: drivers/usb/gadget/inode.c:576:
+ ^I^I^Ierr = -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: drivers/usb/gadget/inode.c:587:
+ ^Ireturn err;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: drivers/usb/gadget/inode.c:587:
+ ^Ireturn err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: drivers/usb/gadget/inode.c:587:
+ ^Ireturn err;$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#150: FILE: fs/aio.c:664:
+	int (*retry)(struct kiocb *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/aio.c:920:
+ *^IFrees ioctx if this is the last user of the request.  The $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#224: FILE: fs/aio.c:935:
+	result = (long) err;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#226: FILE: fs/aio.c:937:
+		result = (long) count;

CHECK:SPACING: No space is necessary after a cast
#288: FILE: fs/aio.c:1352:
+	return (int) ret;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dio->rw == READ'
#351: FILE: fs/direct-io.c:238:
+		if ((dio->rw == READ) && ((offset + dio->result) > dio->i_size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: fs/direct-io.c:281:
+		int err = dio_complete(dio, dio->iocb->ki_pos, 0);
+		aio_complete(dio->iocb, dio->result, err);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#431: FILE: include/linux/aio.h:100:
+	int			(*ki_retry)(struct kiocb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#440: FILE: include/linux/aio.h:210:
+extern void FASTCALL(aio_complete(void *endio_data, ssize_t count, int err));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 7 warnings, 5 checks, 356 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
