WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
diff -aur linux-2.6.0-test5-bk1/include/asm-alpha/topology.h linux-2.6.0-test5-bk1-caliban/include/asm-alpha/topology.h

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#40: FILE: include/asm-alpha/topology.h:19:
+	BUG_ON(node < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#53: FILE: include/asm-arm/arch-ebsa285/io.h:30:
+	BUG_ON(a <= 0xc0000000 || a >= 0xe0000000);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#61: FILE: include/asm-arm/arch-ebsa285/io.h:36:
+	BUG_ON(a >= 16*1048576);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#61: FILE: include/asm-arm/arch-ebsa285/io.h:36:
+	BUG_ON(a >= 16*1048576);
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#74: FILE: include/asm-arm/arch-nexuspci/io.h:31:
+	BUG_ON(a >= 16*1048576);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#74: FILE: include/asm-arm/arch-nexuspci/io.h:31:
+	BUG_ON(a >= 16*1048576);
 	              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#87: FILE: include/asm-mips/dma-mapping.h:127:
+		BUG_ON(!sg->page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#97: FILE: include/asm-mips/dma-mapping.h:141:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#107: FILE: include/asm-mips/dma-mapping.h:154:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#117: FILE: include/asm-mips/dma-mapping.h:168:
+	BUG_ON(direction == DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#130: FILE: include/asm-mips/pci.h:116:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: include/asm-parisc/mmu_context.h:22:
+	BUG_ON(atomic_read(&mm->mm_users) != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: include/asm-parisc/mmu_context.h:66:
+	BUG_ON(next == &init_mm); /* Should never happen */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#164: FILE: include/asm-parisc/tlbflush.h:29:
+	BUG_ON(mm == &init_mm); /* Should never happen */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: include/asm-ppc/highmem.h:66:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#187: FILE: include/asm-ppc/highmem.h:90:
+	BUG_ON(!pte_none(*(kmap_pte+idx)));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: include/asm-ppc/highmem.h:90:
+	BUG_ON(!pte_none(*(kmap_pte+idx)));
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: include/asm-ppc/highmem.h:109:
+	BUG_ON(vaddr != KMAP_FIX_BEGIN + idx * PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: include/asm-ppc/pci.h:108:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#220: FILE: include/asm-ppc/pci.h:136:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: include/asm-ppc/pci.h:160:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: include/asm-ppc64/pci.h:65:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: include/asm-ppc64/pci.h:73:
+	BUG_ON(direction == PCI_DMA_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#266: FILE: include/asm-ppc64/topology.h:16:
+	BUG_ON(node == -1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#279: FILE: include/asm-s390/idals.h:226:
+	BUG_ON(count > ib->size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#289: FILE: include/asm-s390/idals.h:246:
+	BUG_ON(count > ib->size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#302: FILE: include/asm-sh/spinlock.h:51:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#302: FILE: include/asm-sh/spinlock.h:51:
+	BUG_ON(!spin_is_locked(lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#315: FILE: include/asm-sparc/highmem.h:60:
+	BUG_ON(in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: include/asm-sparc/highmem.h:68:
+	BUG_ON(in_interrupt());

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: include/asm-sparc64/floppy.h:335:
+^IBUG_ON((NULL == sun_pci_dma_pending.buf) ^I||$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: include/asm-sparc64/floppy.h:335:
+	BUG_ON((NULL == sun_pci_dma_pending.buf) 	||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#337: FILE: include/asm-sparc64/floppy.h:335:
+	BUG_ON((NULL == sun_pci_dma_pending.buf) 	||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: include/asm-sparc64/floppy.h:336:
+	BUG_ON((NULL == sun_pci_dma_pending.buf) 	||
 	    (0	  == sun_pci_dma_pending.len) 	||

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#341: FILE: include/asm-sparc64/floppy.h:337:
+	    (0	  == sun_pci_dma_pending.direction));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: include/asm-sparc64/floppy.h:354:
+	BUG_ON(ebus_dma_request(&sun_pci_fd_ebus_dma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: include/asm-sparc64/floppy.h:355:
+	BUG_ON(ebus_dma_request(&sun_pci_fd_ebus_dma,
 			     sun_pci_dma_current.addr,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#369: FILE: include/asm-sparc64/tlbflush.h:96:
+	BUG_ON(s > e);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: include/asm-x86_64/pgalloc.h:27:
+	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#382: FILE: include/asm-x86_64/pgalloc.h:27:
+	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));
 	                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: include/asm-x86_64/pgalloc.h:43:
+	BUG_ON((unsigned long)pgd & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#392: FILE: include/asm-x86_64/pgalloc.h:43:
+	BUG_ON((unsigned long)pgd & (PAGE_SIZE-1));
 	                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#402: FILE: include/asm-x86_64/pgalloc.h:65:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#402: FILE: include/asm-x86_64/pgalloc.h:65:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));
 	                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#417: FILE: include/asm-x86_64/spinlock.h:73:
+	BUG_ON(lock->magic != SPINLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: include/asm-x86_64/spinlock.h:74:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#418: FILE: include/asm-x86_64/spinlock.h:74:
+	BUG_ON(!spin_is_locked(lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#430: FILE: include/asm-x86_64/spinlock.h:92:
+	BUG_ON(lock->magic != SPINLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#431: FILE: include/asm-x86_64/spinlock.h:93:
+	BUG_ON(!spin_is_locked(lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#431: FILE: include/asm-x86_64/spinlock.h:93:
+	BUG_ON(!spin_is_locked(lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: include/asm-x86_64/spinlock.h:173:
+	BUG_ON(rw->magic != RWLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: include/asm-x86_64/spinlock.h:181:
+	BUG_ON(rw->magic != RWLOCK_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#464: FILE: include/linux/bio.h:270:
+	BUG_ON(addr & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: include/linux/buffer_head.h:128:
+		BUG_ON(!PagePrivate(page));		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: include/linux/dcache.h:273:
+		BUG_ON(!atomic_read(&dentry->d_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: include/linux/highmem.h:59:
+	BUG_ON(offset + size > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: include/linux/netdevice.h:826:
+	BUG_ON(!test_bit(__LINK_STATE_RX_SCHED, &dev->state));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#524: FILE: include/linux/netdevice.h:852:
+	BUG_ON(!test_bit(__LINK_STATE_RX_SCHED, &dev->state));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#537: FILE: include/linux/nfs_fs.h:265:
+	BUG_ON(cred && cred->cr_magic != RPCAUTH_CRED_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#550: FILE: include/linux/quotaops.h:47:
+	BUG_ON(!inode->i_sb);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#560: FILE: include/linux/quotaops.h:55:
+		BUG_ON(!inode->i_sb);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#573: FILE: include/linux/smp_lock.h:52:
+	BUG_ON(current->lock_depth < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#586: FILE: include/net/sctp/sm.h:431:
+	BUG_ON(!sctp_add_cmd(seq, verb, obj));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: include/net/sock.h:458:
+	BUG_ON(sk->sk_owner != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk->sk_owner"
#599: FILE: include/net/sock.h:458:
+	BUG_ON(sk->sk_owner != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#612: FILE: include/net/tcp.h:1427:
+			BUG_ON(sock_owned_by_user(sk));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#625: FILE: include/rxrpc/call.h:190:
+	BUG_ON(atomic_read(&call->usage)<=0);

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#625: FILE: include/rxrpc/call.h:190:
+	BUG_ON(atomic_read(&call->usage)<=0);
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#638: FILE: include/rxrpc/connection.h:70:
+	BUG_ON(atomic_read(&conn->usage)<0);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#638: FILE: include/rxrpc/connection.h:70:
+	BUG_ON(atomic_read(&conn->usage)<0);
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#651: FILE: include/rxrpc/message.h:56:
+	BUG_ON(atomic_read(&msg->usage)<=0);

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#651: FILE: include/rxrpc/message.h:56:
+	BUG_ON(atomic_read(&msg->usage)<=0);
 	                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: include/rxrpc/peer.h:75:
+	BUG_ON(atomic_read(&peer->usage)<0);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#664: FILE: include/rxrpc/peer.h:75:
+	BUG_ON(atomic_read(&peer->usage)<0);
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: include/rxrpc/transport.h:88:
+	BUG_ON(atomic_read(&trans->usage) <= 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337717.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 63 warnings, 9 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337717.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
