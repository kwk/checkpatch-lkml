WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
- Most of init code that needs to be there for hotplug marked now as __devinit

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: arch/x86_64/Kconfig:297:
+config HOTPLUG_CPU
+	bool "Support for hot-pluggable CPUs (EXPERIMENTAL)"
+	depends on SMP && HOTPLUG && EXPERIMENTAL
+	help
+		Say Y here to experiment with turning CPUs off and on.  CPUs
+		can be controlled through /sys/devices/system/cpu/cpu#.
+		Say N if you want to disable CPU hotplug.
+
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#110: FILE: arch/x86_64/kernel/smpboot.c:112:
+#define set_idle_for_cpu(x,p)   (idle_thread_array[(x)] = (p))
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: arch/x86_64/kernel/smpboot.c:117:
+#define set_idle_for_cpu(x,p)
                           ^

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#128: FILE: arch/x86_64/kernel/smpboot.c:205:
+static __devinitdata DEFINE_SPINLOCK(tsc_sync_lock);

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#129: FILE: arch/x86_64/kernel/smpboot.c:206:
+static volatile __devinitdata unsigned long go[SLAVE + 1];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#129: FILE: arch/x86_64/kernel/smpboot.c:206:
+static volatile __devinitdata unsigned long go[SLAVE + 1];

WARNING:MISPLACED_INIT: __devinitdata should be placed after go[SLAVE + 1]
#129: FILE: arch/x86_64/kernel/smpboot.c:206:
+static volatile __devinitdata unsigned long go[SLAVE + 1];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#130: FILE: arch/x86_64/kernel/smpboot.c:207:
+static int notscsync __devinitdata;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#139: FILE: arch/x86_64/kernel/smpboot.c:215:
+static __devinit void sync_master(void *arg)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#148: FILE: arch/x86_64/kernel/smpboot.c:270:
+static __devinit void sync_tsc(void)

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#157: FILE: arch/x86_64/kernel/smpboot.c:281:
+	} t[NUM_ROUNDS] __devinitdata;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#166: FILE: arch/x86_64/kernel/smpboot.c:333:
+static void __devinit tsc_sync_wait(void)

WARNING:MEMORY_BARRIER: memory barrier without comment
#174: FILE: arch/x86_64/kernel/smpboot.c:433:
+	mb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#212: FILE: arch/x86_64/kernel/smpboot.c:667:
 static int __devinit do_boot_cpu(int cpu, int apicid)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: arch/x86_64/kernel/smpboot.c:680:
+^I^Ic_idle.idle->thread.rsp = (unsigned long) (((struct pt_regs *) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#232: FILE: arch/x86_64/kernel/smpboot.c:680:
+		c_idle.idle->thread.rsp = (unsigned long) (((struct pt_regs *) 

CHECK:SPACING: No space is necessary after a cast
#233: FILE: arch/x86_64/kernel/smpboot.c:681:
+			(THREAD_SIZE + (unsigned long) c_idle.idle->thread_info)) - 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#238: FILE: arch/x86_64/kernel/smpboot.c:686:
+	if (!keventd_up() || current_is_keventd())
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: arch/x86_64/kernel/smpboot.c:688:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#277: FILE: arch/x86_64/kernel/smpboot.c:991:
+			printk ("Setting possible cpus %d\n", i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: arch/x86_64/kernel/smpboot.c:991:
+			printk ("Setting possible cpus %d\n", i);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#290: FILE: arch/x86_64/kernel/smpboot.c:1043:
+static int __devinit cpu_enable(unsigned int cpu)

WARNING:MEMORY_BARRIER: memory barrier without comment
#294: FILE: arch/x86_64/kernel/smpboot.c:1047:
+	wmb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#314: FILE: arch/x86_64/kernel/smpboot.c:1064:
 int __devinit __cpu_up(unsigned int cpu)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: arch/x86_64/kernel/smpboot.c:1078:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: arch/x86_64/kernel/smpboot.c:1078:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: arch/x86_64/kernel/smpboot.c:1083:
+ ^Iif (cpu_isset(cpu, cpu_callin_map)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: arch/x86_64/kernel/smpboot.c:1083:
+ ^Iif (cpu_isset(cpu, cpu_callin_map)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: arch/x86_64/kernel/smpboot.c:1083:
+ ^Iif (cpu_isset(cpu, cpu_callin_map)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: arch/x86_64/kernel/smpboot.c:1089:
+ ^I^Ireturn -ENOSYS;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: arch/x86_64/kernel/smpboot.c:1089:
+ ^I^Ireturn -ENOSYS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: arch/x86_64/kernel/smpboot.c:1089:
+ ^I^Ireturn -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#331: FILE: arch/x86_64/kernel/smpboot.c:1089:
+ 		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: arch/x86_64/kernel/smpboot.c:1164:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#404: FILE: arch/x86_64/kernel/smpboot.c:1164:
+ ^I *$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: arch/x86_64/kernel/smpboot.c:1179:
+^I * Need this per zwane, but this uses IPI, so cannot be used $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: arch/x86_64/kernel/smpboot.c:1182:
+^I * flush_tlb_all(); $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#445: FILE: arch/x86_64/kernel/smpboot.c:1205:
+		schedule_timeout(HZ/10);
 		                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: arch/x86_64/kernel/smpboot.c:1207:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#447: FILE: arch/x86_64/kernel/smpboot.c:1207:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: arch/x86_64/kernel/smpboot.c:1207:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#447: FILE: arch/x86_64/kernel/smpboot.c:1207:
+ 	printk(KERN_ERR "CPU %u didn't die...\n", cpu);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#454: FILE: arch/x86_64/kernel/smpboot.c:1214:
+	return -ENOSYS;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: arch/x86_64/kernel/smpboot.c:1220:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#488: FILE: arch/x86_64/kernel/irq.c:119:
+		cpumask_t mask;
+		if (irq == 2)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#492: FILE: arch/x86_64/kernel/irq.c:123:
+		if (any_online_cpu(mask) == NR_CPUS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#493: FILE: arch/x86_64/kernel/irq.c:124:
+			printk("Breaking affinity for irq %i\n", irq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#499: FILE: arch/x86_64/kernel/irq.c:130:
+			printk("Cannot set affinity for irq %i\n", irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#518: FILE: include/asm-x86_64/irq.h:57:
+extern void fixup_irqs(cpumask_t map);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#551: FILE: arch/x86_64/kernel/process.c:162:
+#include <asm/nmi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:MEMORY_BARRIER: memory barrier without comment
#556: FILE: arch/x86_64/kernel/process.c:167:
+	mb();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#563: FILE: arch/x86_64/kernel/process.c:174:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#571: FILE: arch/x86_64/kernel/process.c:182:
+	BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#595: FILE: include/asm-x86_64/smp.h:47:
+extern void lock_ipi_calllock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#596: FILE: include/asm-x86_64/smp.h:48:
+extern void unlock_ipi_calllock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: include/asm-x86_64/smp.h:82:
+extern int __cpu_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: include/asm-x86_64/smp.h:83:
+extern void __cpu_die(unsigned int cpu);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#666: FILE: arch/i386/mach-default/topology.c:91:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#667: FILE: arch/i386/mach-default/topology.c:92:
+		if (cpu_possible(i))  {
+			arch_register_cpu(i);
+		}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182018.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 39 warnings, 11 checks, 554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182018.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
