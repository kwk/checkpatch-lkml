WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#47: FILE: Makefile:4:
+EXTRAVERSION = epoll
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: drivers/char/Config.help:937:
+  This device can be used to very efficiently handle incoming events $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: drivers/char/Config.help:938:
+  on a socket, much more so than select() or poll(). There is a paper $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: drivers/char/Config.help:939:
+  that describes this device and how to program for it (as well as $

WARNING:TYPO_SPELLING: 'Efficent' may be misspelled - perhaps 'Efficient'?
#87: FILE: drivers/char/Config.in:157:
+tristate '/dev/epoll - Efficent file event polling method' CONFIG_EVENTPOLL
                        ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: drivers/char/eventpoll.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#107: FILE: drivers/char/eventpoll.c:2:
+ *  drivers/char/eventpoll.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Efficent' may be misspelled - perhaps 'Efficient'?
#111: FILE: drivers/char/eventpoll.c:6:
+ *  Efficent event polling implementation
     ^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#135: FILE: drivers/char/eventpoll.c:30:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#136: FILE: drivers/char/eventpoll.c:31:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#138: FILE: drivers/char/eventpoll.c:33:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#139: FILE: drivers/char/eventpoll.c:34:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: drivers/char/eventpoll.c:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#145: FILE: drivers/char/eventpoll.c:40:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#149: FILE: drivers/char/eventpoll.c:44:
+#define DPRINTK(x)	printk x

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: drivers/char/eventpoll.c:45:
+#define DNPRINTK(n,x)	if (n <= DEBUG) printk x
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#150: FILE: drivers/char/eventpoll.c:45:
+#define DNPRINTK(n,x)	if (n <= DEBUG) printk x

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#150: FILE: drivers/char/eventpoll.c:45:
+#define DNPRINTK(n,x)	if (n <= DEBUG) printk x

ERROR:SPACING: space required after that ',' (ctx:VxV)
#153: FILE: drivers/char/eventpoll.c:48:
+#define DNPRINTK(n,x)
                   ^

CHECK:SPACING: No space is necessary after a cast
#168: FILE: drivers/char/eventpoll.c:63:
+#define dpi_mem_alloc()	(struct epitem *) kmem_cache_alloc(dpi_cache, SLAB_KERNEL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#168: FILE: drivers/char/eventpoll.c:63:
+#define dpi_mem_alloc()	(struct epitem *) kmem_cache_alloc(dpi_cache, SLAB_KERNEL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: drivers/char/eventpoll.c:66:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: drivers/char/eventpoll.c:68:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#175: FILE: drivers/char/eventpoll.c:70:
+typedef unsigned long long event_version_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: drivers/char/eventpoll.c:99:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: drivers/char/eventpoll.c:101:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#208: FILE: drivers/char/eventpoll.c:103:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: drivers/char/eventpoll.c:118:
+static int write_eventpoll(struct file *file, const char *buffer, size_t count,
+		loff_t *ppos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: drivers/char/eventpoll.c:121:
+static int ioctl_eventpoll(struct inode *inode, struct file *file,
+		unsigned int cmd, unsigned long arg);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: drivers/char/eventpoll.c:122:
+static void eventpoll_mm_open(struct vm_area_struct * vma);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#228: FILE: drivers/char/eventpoll.c:123:
+static void eventpoll_mm_close(struct vm_area_struct * vma);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#231: FILE: drivers/char/eventpoll.c:126:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: drivers/char/eventpoll.c:128:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#236: FILE: drivers/char/eventpoll.c:131:
+static struct file_operations eventpoll_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#237: FILE: drivers/char/eventpoll.c:132:
+	write: write_eventpoll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#238: FILE: drivers/char/eventpoll.c:133:
+	ioctl: ioctl_eventpoll,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#238: FILE: drivers/char/eventpoll.c:133:
+	ioctl: ioctl_eventpoll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#239: FILE: drivers/char/eventpoll.c:134:
+	mmap: mmap_eventpoll,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#239: FILE: drivers/char/eventpoll.c:134:
+	mmap: mmap_eventpoll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#240: FILE: drivers/char/eventpoll.c:135:
+	open: open_eventpoll,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#240: FILE: drivers/char/eventpoll.c:135:
+	open: open_eventpoll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#241: FILE: drivers/char/eventpoll.c:136:
+	release: close_eventpoll,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#241: FILE: drivers/char/eventpoll.c:136:
+	release: close_eventpoll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#242: FILE: drivers/char/eventpoll.c:137:
+	poll: poll_eventpoll
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#242: FILE: drivers/char/eventpoll.c:137:
+	poll: poll_eventpoll

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#245: FILE: drivers/char/eventpoll.c:140:
+static struct vm_operations_struct eventpoll_mmap_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#246: FILE: drivers/char/eventpoll.c:141:
+	open: eventpoll_mm_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#247: FILE: drivers/char/eventpoll.c:142:
+	close: eventpoll_mm_close,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#247: FILE: drivers/char/eventpoll.c:142:
+	close: eventpoll_mm_close,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#254: FILE: drivers/char/eventpoll.c:149:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#256: FILE: drivers/char/eventpoll.c:151:
+
+

CHECK:SPACING: No space is necessary after a cast
#262: FILE: drivers/char/eventpoll.c:157:
+		pages[ii] = (char *) __get_free_pages(GFP_KERNEL, 0);

CHECK:SPACING: No space is necessary after a cast
#266: FILE: drivers/char/eventpoll.c:161:
+				free_pages((unsigned long) pages[ii], 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#275: FILE: drivers/char/eventpoll.c:170:
+
+

CHECK:SPACING: No space is necessary after a cast
#282: FILE: drivers/char/eventpoll.c:177:
+		free_pages((unsigned long) pages[ii], 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: drivers/char/eventpoll.c:182:
+
+

CHECK:SPACING: No space is necessary after a cast
#306: FILE: drivers/char/eventpoll.c:201:
+	if (!(ep->hash = (struct list_head *) vmalloc(hentries * sizeof(struct list_head))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#306: FILE: drivers/char/eventpoll.c:201:
+	if (!(ep->hash = (struct list_head *) vmalloc(hentries * sizeof(struct list_head))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#306: FILE: drivers/char/eventpoll.c:201:
+	if (!(ep->hash = (struct list_head *) vmalloc(hentries * sizeof(struct list_head))))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#315: FILE: drivers/char/eventpoll.c:210:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: drivers/char/eventpoll.c:234:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#349: FILE: drivers/char/eventpoll.c:244:
+		if (dpi->pfd.fd == fd) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: drivers/char/eventpoll.c:253:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#373: FILE: drivers/char/eventpoll.c:268:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_hashresize', this function's name, in a string
#382: FILE: drivers/char/eventpoll.c:277:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ep_hashresize(%p) bits=%u\n", current, ep, hbits));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#387: FILE: drivers/char/eventpoll.c:282:
+	if (!(hash = (struct list_head *) vmalloc(hentries * sizeof(struct list_head)))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#387: FILE: drivers/char/eventpoll.c:282:
+	if (!(hash = (struct list_head *) vmalloc(hentries * sizeof(struct list_head)))) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#387: FILE: drivers/char/eventpoll.c:282:
+	if (!(hash = (struct list_head *) vmalloc(hentries * sizeof(struct list_head)))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#424: FILE: drivers/char/eventpoll.c:319:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#434: FILE: drivers/char/eventpoll.c:329:
+	if (!(file = fcheck(pfd->fd)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#437: FILE: drivers/char/eventpoll.c:332:
+	if (!(dpi = dpi_mem_alloc()))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: drivers/char/eventpoll.c:348:
+	if (!atomic_read(&ep->resize) &&
+			(atomic_read(&ep->hents) >> ep->hbits) > RESIZE_LENGTH &&

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_insert', this function's name, in a string
#463: FILE: drivers/char/eventpoll.c:358:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ep_insert(%p, %d)\n", current, ep, pfd->fd));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#468: FILE: drivers/char/eventpoll.c:363:
+
+

CHECK:SPACING: No space is necessary after a cast
#484: FILE: drivers/char/eventpoll.c:379:
+		pfd = (struct pollfd *) (ep->pages[EVENT_PAGE_INDEX(dpi->index)] +

CHECK:SPACING: No space is necessary after a cast
#487: FILE: drivers/char/eventpoll.c:382:
+			lpfd = (struct pollfd *) (ep->pages[EVENT_PAGE_INDEX(ep->eventcnt)] +

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#488: FILE: drivers/char/eventpoll.c:383:
+									  EVENT_PAGE_OFFSET(ep->eventcnt));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#491: FILE: drivers/char/eventpoll.c:386:
+			if ((ldpi = ep_find_nl(ep, pfd->fd))) ldpi->index = dpi->index;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#491: FILE: drivers/char/eventpoll.c:386:
+			if ((ldpi = ep_find_nl(ep, pfd->fd))) ldpi->index = dpi->index;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_remove', this function's name, in a string
#499: FILE: drivers/char/eventpoll.c:394:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ep_remove(%p, %d)\n", current, ep, fd));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#504: FILE: drivers/char/eventpoll.c:399:
+
+

CHECK:SPACING: No space is necessary after a cast
#507: FILE: drivers/char/eventpoll.c:402:
+	struct epitem *dpi = (struct epitem *) data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/char/eventpoll.c:407:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: notify(%p, %p, %ld, %ld) ep=%p\n",
+			current, file, data, event[0], event[1], ep));

CHECK:SPACING: No space is necessary after a cast
#523: FILE: drivers/char/eventpoll.c:418:
+		pfd = (struct pollfd *) (ep->pages[EVENT_PAGE_INDEX(dpi->index)] +

CHECK:SPACING: No space is necessary after a cast
#527: FILE: drivers/char/eventpoll.c:422:
+		pfd = (struct pollfd *) (ep->pages[EVENT_PAGE_INDEX(dpi->index)] +

CHECK:SPACING: No space is necessary after a cast
#533: FILE: drivers/char/eventpoll.c:428:
+			pfd = (struct pollfd *) (ep->pages[EVENT_PAGE_INDEX(dpi->index)] +

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#541: FILE: drivers/char/eventpoll.c:436:
+	if (waitqueue_active(&ep->wq))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#543: FILE: drivers/char/eventpoll.c:438:
+	if (waitqueue_active(&ep->poll_wait))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#549: FILE: drivers/char/eventpoll.c:444:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#555: FILE: drivers/char/eventpoll.c:450:
+	if (!(ep = kmalloc(sizeof(struct eventpoll), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ep)...) over kmalloc(sizeof(struct eventpoll)...)
#555: FILE: drivers/char/eventpoll.c:450:
+	if (!(ep = kmalloc(sizeof(struct eventpoll), GFP_KERNEL)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#559: FILE: drivers/char/eventpoll.c:454:
+	if ((res = ep_init(ep))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#572: FILE: drivers/char/eventpoll.c:467:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: drivers/char/eventpoll.c:482:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#599: FILE: drivers/char/eventpoll.c:494:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: drivers/char/eventpoll.c:496:
+static int write_eventpoll(struct file *file, const char *buffer, size_t count,
+		loff_t *ppos)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#613: FILE: drivers/char/eventpoll.c:508:
+	if ((res = verify_area(VERIFY_READ, buffer, count)))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#633: FILE: drivers/char/eventpoll.c:528:
+		}
+		else if (dpi) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#651: FILE: drivers/char/eventpoll.c:546:
+
+

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#666: FILE: drivers/char/eventpoll.c:561:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ioctl(%p, EP_POLL, %d)\n", current, ep, dvp.ep_timeout));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#674: FILE: drivers/char/eventpoll.c:569:
+		timeout = dvp.ep_timeout == -1 || dvp.ep_timeout > MAX_SCHEDULE_TIMEOUT/HZ ?
 		                                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: drivers/char/eventpoll.c:570:
+^I^I^IMAX_SCHEDULE_TIMEOUT: (dvp.ep_timeout * HZ) / 1000; $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#675: FILE: drivers/char/eventpoll.c:570:
+			MAX_SCHEDULE_TIMEOUT: (dvp.ep_timeout * HZ) / 1000; 
 			                    ^

WARNING:INDENTED_LABEL: labels should not be indented
#675: FILE: drivers/char/eventpoll.c:570:
+			MAX_SCHEDULE_TIMEOUT: (dvp.ep_timeout * HZ) / 1000; 

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#713: FILE: drivers/char/eventpoll.c:608:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ioctl(%p, EP_POLL, %d) == %d\n", current, ep, dvp.ep_timeout, res));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#717: FILE: drivers/char/eventpoll.c:612:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: drivers/char/eventpoll.c:614:
+static int ioctl_eventpoll(struct inode *inode, struct file *file,
+		unsigned int cmd, unsigned long arg)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#739: FILE: drivers/char/eventpoll.c:634:
+			if (!(res = ep_alloc_pages(&ep->pages0[ep->numpages], numpages - ep->numpages))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#739: FILE: drivers/char/eventpoll.c:634:
+			if (!(res = ep_alloc_pages(&ep->pages0[ep->numpages], numpages - ep->numpages))) {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#740: FILE: drivers/char/eventpoll.c:635:
+				if (!(res = ep_alloc_pages(&ep->pages1[ep->numpages], numpages - ep->numpages))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#740: FILE: drivers/char/eventpoll.c:635:
+				if (!(res = ep_alloc_pages(&ep->pages1[ep->numpages], numpages - ep->numpages))) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#740: FILE: drivers/char/eventpoll.c:635:
+				if (!(res = ep_alloc_pages(&ep->pages1[ep->numpages], numpages - ep->numpages))) {
[...]
+				} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#743: FILE: drivers/char/eventpoll.c:638:
+					ep_free_pages(&ep->pages0[ep->numpages], numpages - ep->numpages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: drivers/char/eventpoll.c:645:
+		DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ioctl(%p, EP_ALLOC, %lu) == %d\n",
+					 current, ep, arg, res));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: drivers/char/eventpoll.c:664:
+		DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ioctl(%p, EP_FREE) == %d\n",
+					 current, ep, res));

CHECK:SPACING: No space is necessary after a cast
#773: FILE: drivers/char/eventpoll.c:668:
+		return ep_poll(ep, (void *) arg);

CHECK:SPACING: No space is necessary after a cast
#776: FILE: drivers/char/eventpoll.c:671:
+		if (copy_from_user(&pfd, (void *) arg, sizeof(struct pollfd)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#782: FILE: drivers/char/eventpoll.c:677:
+		if (!(dpi = ep_find_nl(ep, pfd.fd)))

WARNING:INDENTED_LABEL: labels should not be indented
#788: FILE: drivers/char/eventpoll.c:683:
+	out_ispolled:

CHECK:SPACING: No space is necessary after a cast
#792: FILE: drivers/char/eventpoll.c:687:
+			copy_to_user((void *) arg, &pfd, sizeof(struct pollfd));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: drivers/char/eventpoll.c:690:
+		DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: ioctl(%p, EP_ISPOLLED, %d) == %d\n",
+					 current, ep, pfd.fd, res));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#802: FILE: drivers/char/eventpoll.c:697:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#803: FILE: drivers/char/eventpoll.c:698:
+static void eventpoll_mm_open(struct vm_area_struct * vma)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#808: FILE: drivers/char/eventpoll.c:703:
+	if (ep) atomic_inc(&ep->mmapped);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#813: FILE: drivers/char/eventpoll.c:708:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#814: FILE: drivers/char/eventpoll.c:709:
+static void eventpoll_mm_close(struct vm_area_struct * vma)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#819: FILE: drivers/char/eventpoll.c:714:
+	if (ep) atomic_dec(&ep->mmapped);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#824: FILE: drivers/char/eventpoll.c:719:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: drivers/char/eventpoll.c:729:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: mmap(%p, %lx, %lx)\n",
+			current, ep, vma->vm_start, vma->vm_pgoff << PAGE_SHIFT));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#850: FILE: drivers/char/eventpoll.c:745:
+		if (remap_page_range(vma, start, __pa(ep->pages0[ii]),
[...]
+    		goto out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: drivers/char/eventpoll.c:746:
+		if (remap_page_range(vma, start, __pa(ep->pages0[ii]),
+				PAGE_SIZE, vma->vm_page_prot))

ERROR:CODE_INDENT: code indent should use tabs where possible
#852: FILE: drivers/char/eventpoll.c:747:
+    ^I^Igoto out;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#852: FILE: drivers/char/eventpoll.c:747:
+    ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: drivers/char/eventpoll.c:747:
+    ^I^Igoto out;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#856: FILE: drivers/char/eventpoll.c:751:
+		if (remap_page_range(vma, start, __pa(ep->pages1[ii]),
[...]
+    		goto out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: drivers/char/eventpoll.c:752:
+		if (remap_page_range(vma, start, __pa(ep->pages1[ii]),
+				PAGE_SIZE, vma->vm_page_prot))

ERROR:CODE_INDENT: code indent should use tabs where possible
#858: FILE: drivers/char/eventpoll.c:753:
+    ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#858: FILE: drivers/char/eventpoll.c:753:
+    ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: drivers/char/eventpoll.c:753:
+    ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#868: FILE: drivers/char/eventpoll.c:763:
+^I^I ^Icurrent, ep, vma->vm_start, vma->vm_pgoff << PAGE_SHIFT, res));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#868: FILE: drivers/char/eventpoll.c:763:
+^I^I ^Icurrent, ep, vma->vm_start, vma->vm_pgoff << PAGE_SHIFT, res));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: drivers/char/eventpoll.c:763:
+	DNPRINTK(3, (KERN_INFO "[%p] /dev/epoll: mmap(%p, %lx, %lx) == %d\n",
+		 	current, ep, vma->vm_start, vma->vm_pgoff << PAGE_SHIFT, res));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#872: FILE: drivers/char/eventpoll.c:767:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: drivers/char/eventpoll.c:771:
+	dpi_cache = kmem_cache_create("eventpoll",
+			sizeof(struct epitem),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#880: FILE: drivers/char/eventpoll.c:775:
+		printk(KERN_INFO "[%p] /dev/epoll: driver install failed.\n", current);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#884: FILE: drivers/char/eventpoll.c:779:
+	printk(KERN_INFO "[%p] /dev/epoll: driver installed.\n", current);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#891: FILE: drivers/char/eventpoll.c:786:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#930: FILE: fs/fcblist.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#931: FILE: fs/fcblist.c:2:
+ *  linux/fs/fcblist.c

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#946: FILE: fs/fcblist.c:17:
+#include <asm/bitops.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#949: FILE: fs/fcblist.c:20:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#970: FILE: fs/fcblist.c:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#989: FILE: fs/fcblist.c:60:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: fs/fcblist.c:62:
+int file_notify_addcb(struct file *filep,
+		void (*cbproc)(struct file *, void *, unsigned long *, long *), void *data)

CHECK:SPACING: No space is necessary after a cast
#996: FILE: fs/fcblist.c:67:
+	if (!(fcbp = (struct fcb_struct *) kmalloc(sizeof(struct fcb_struct), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#996: FILE: fs/fcblist.c:67:
+	if (!(fcbp = (struct fcb_struct *) kmalloc(sizeof(struct fcb_struct), GFP_KERNEL)))

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#996: FILE: fs/fcblist.c:67:
+	if (!(fcbp = (struct fcb_struct *) kmalloc(sizeof(struct fcb_struct), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fcbp)...) over kmalloc(sizeof(struct fcb_struct)...)
#996: FILE: fs/fcblist.c:67:
+	if (!(fcbp = (struct fcb_struct *) kmalloc(sizeof(struct fcb_struct), GFP_KERNEL)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1011: FILE: fs/fcblist.c:82:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: fs/fcblist.c:84:
+int file_notify_delcb(struct file *filep,
+		void (*cbproc)(struct file *, void *, unsigned long *, long *))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1038: FILE: fs/fcblist.c:109:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1083: FILE: fs/file_table.c:108:
+	file_notify_init(filp);
 	                 ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1125: FILE: fs/pipe.c:89:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1127: FILE: fs/pipe.c:91:
+^I^Iif (!count) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: fs/pipe.c:121:
+^I^I^Ifile_send_notify(PIPE_WRITEFILE(*inode), ION_OUT, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: fs/pipe.c:208:
+^I^I^I^Ifile_send_notify(PIPE_READFILE(*inode), ION_IN, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1180: FILE: fs/pipe.c:223:
+^I^I^Ifile_send_notify(PIPE_READFILE(*inode), ION_IN, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1195: FILE: fs/pipe.c:292:
+ ^Iif (decr && !PIPE_READERS(*inode)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1195: FILE: fs/pipe.c:292:
+ ^Iif (decr && !PIPE_READERS(*inode)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1195: FILE: fs/pipe.c:292:
+ ^Iif (decr && !PIPE_READERS(*inode)) {$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1241: FILE: include/linux/eventpoll.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1242: FILE: include/linux/eventpoll.h:2:
+ *  include/linux/eventpoll.h

WARNING:TYPO_SPELLING: 'Efficent' may be misspelled - perhaps 'Efficient'?
#1246: FILE: include/linux/eventpoll.h:6:
+ *  Efficent event polling implementation
     ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1249: FILE: include/linux/eventpoll.h:9:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1253: FILE: include/linux/eventpoll.h:13:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1255: FILE: include/linux/eventpoll.h:15:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1266: FILE: include/linux/eventpoll.h:26:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1268: FILE: include/linux/eventpoll.h:28:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1280: FILE: include/linux/eventpoll.h:40:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1288: FILE: include/linux/fcblist.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1289: FILE: include/linux/fcblist.h:2:
+ *  include/linux/fcblist.h

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1305: FILE: include/linux/fcblist.h:18:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1322: FILE: include/linux/fcblist.h:35:
+	void (*cbproc)(struct file *, void *, unsigned long *, long *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1322: FILE: include/linux/fcblist.h:35:
+	void (*cbproc)(struct file *, void *, unsigned long *, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#1322: FILE: include/linux/fcblist.h:35:
+	void (*cbproc)(struct file *, void *, unsigned long *, long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#1322: FILE: include/linux/fcblist.h:35:
+	void (*cbproc)(struct file *, void *, unsigned long *, long *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1327: FILE: include/linux/fcblist.h:40:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1331: FILE: include/linux/fcblist.h:44:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: include/linux/fcblist.h:48:
+int file_notify_addcb(struct file *filep,
+		void (*cbproc)(struct file *, void *, unsigned long *, long *), void *data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: include/linux/fcblist.h:51:
+int file_notify_delcb(struct file *filep,
+		void (*cbproc)(struct file *, void *, unsigned long *, long *));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1342: FILE: include/linux/fcblist.h:55:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1349: FILE: include/linux/fcblist.h:62:
+static inline void file_send_notify(struct file *filep, long ioevt, long plevt) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1377: FILE: include/linux/list.h:243:
+#define list_first(head)	(((head)->next != (head)) ? (head)->next: (struct list_head *) 0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1377: FILE: include/linux/list.h:243:
+#define list_first(head)	(((head)->next != (head)) ? (head)->next: (struct list_head *) 0)
                         	                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#1377: FILE: include/linux/list.h:243:
+#define list_first(head)	(((head)->next != (head)) ? (head)->next: (struct list_head *) 0)

CHECK:SPACING: No space is necessary after a cast
#1378: FILE: include/linux/list.h:244:
+#define list_last(head)	(((head)->prev != (head)) ? (head)->prev: (struct list_head *) 0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1378: FILE: include/linux/list.h:244:
+#define list_last(head)	(((head)->prev != (head)) ? (head)->prev: (struct list_head *) 0)
                        	                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#1378: FILE: include/linux/list.h:244:
+#define list_last(head)	(((head)->prev != (head)) ? (head)->prev: (struct list_head *) 0)

CHECK:SPACING: No space is necessary after a cast
#1379: FILE: include/linux/list.h:245:
+#define list_next(pos, head)	(((pos)->next != (head)) ? (pos)->next: (struct list_head *) 0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1379: FILE: include/linux/list.h:245:
+#define list_next(pos, head)	(((pos)->next != (head)) ? (pos)->next: (struct list_head *) 0)
                             	                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1379: FILE: include/linux/list.h:245:
+#define list_next(pos, head)	(((pos)->next != (head)) ? (pos)->next: (struct list_head *) 0)

CHECK:SPACING: No space is necessary after a cast
#1380: FILE: include/linux/list.h:246:
+#define list_prev(pos, head)	(((pos)->prev != (head)) ? (pos)->prev: (struct list_head *) 0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1380: FILE: include/linux/list.h:246:
+#define list_prev(pos, head)	(((pos)->prev != (head)) ? (pos)->prev: (struct list_head *) 0)
                             	                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1380: FILE: include/linux/list.h:246:
+#define list_prev(pos, head)	(((pos)->prev != (head)) ? (pos)->prev: (struct list_head *) 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1427: FILE: include/net/sock.h:753:
+			file_send_notify(sk->socket->file, ion_band_table[band - POLL_IN],
+					poll_band_table[band - POLL_IN]);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1428: FILE: include/net/sock.h:754:
+		if (sk->socket->fasync_list)
 		sock_wake_async(sk->socket, how, band);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 62 warnings, 94 checks, 1326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
