WARNING:SPACING: Unnecessary space before function pointer arguments
#75: FILE: mm/slab.c:397:
+	void (*ctor) (void *, struct kmem_cache *, unsigned long);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#75: FILE: mm/slab.c:397:
+	void (*ctor) (void *, struct kmem_cache *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#75: FILE: mm/slab.c:397:
+	void (*ctor) (void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#75: FILE: mm/slab.c:397:
+	void (*ctor) (void *, struct kmem_cache *, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#79: FILE: mm/slab.c:400:
+	void (*dtor) (void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#79: FILE: mm/slab.c:400:
+	void (*dtor) (void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#79: FILE: mm/slab.c:400:
+	void (*dtor) (void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#79: FILE: mm/slab.c:400:
+	void (*dtor) (void *, struct kmem_cache *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: mm/slab.c:1983:
+static void drain_array_locked(struct kmem_cache *cachep, struct array_cache *ac,
 				int force, int node);

CHECK:SPACING: No space is necessary after a cast
#420: FILE: mm/slab.c:1987:
+	struct kmem_cache *cachep = (struct kmem_cache *) arg;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: mm/slab.c:2255:
+static void slab_put_obj(struct kmem_cache *cachep, struct slab *slabp, void *objp,
 			  int nodeid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: mm/slab.c:2612:
+static void *cache_alloc_debugcheck_after(struct kmem_cache *cachep, gfp_t flags,
 					void *objp, void *caller)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: mm/slab.c:3349:
+static void drain_array_locked(struct kmem_cache *cachep, struct array_cache *ac,
 				int force, int node)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 8 warnings, 5 checks, 705 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115533.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
