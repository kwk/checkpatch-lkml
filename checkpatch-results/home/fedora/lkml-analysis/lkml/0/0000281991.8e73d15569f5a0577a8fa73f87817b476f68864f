CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->s_resgid'
#62: FILE: fs/ext3/balloc.c:479:
+	if (free_blocks < root_blocks + 1 && !capable(CAP_SYS_RESOURCE) &&
+		sbi->s_resuid != current->fsuid &&
+		(sbi->s_resgid == 0 || !in_group_p (sbi->s_resgid))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: fs/ext3/balloc.c:480:
+	if (free_blocks < root_blocks + 1 && !capable(CAP_SYS_RESOURCE) &&
+		sbi->s_resuid != current->fsuid &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#64: FILE: fs/ext3/balloc.c:481:
+		(sbi->s_resgid == 0 || !in_group_p (sbi->s_resgid))) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#91: FILE: fs/ext3/balloc.c:508:
+	if (journal->j_running_transaction) {
[...]
+	} else if (journal->j_committing_transaction)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: fs/ext3/balloc.c:518:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#149: FILE: fs/ext3/balloc.c:636:
+	if (num_free_bgroups) {
+		jbd_debug(1, "%s: %d free blockgroups, but couldn't find free blocks\n", sb->s_id, num_free_bgroups);
 	}

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#150: FILE: fs/ext3/balloc.c:637:
+		jbd_debug(1, "%s: %d free blockgroups, but couldn't find free blocks\n", sb->s_id, num_free_bgroups);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INDENTED_LABEL: labels should not be indented
#163: FILE: fs/ext3/acl.c:433:
+	retry:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: fs/ext3/acl.c:442:
+^I^Iif (error == -ENOSPC && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/ext3/acl.c:549:
+^Iif (error == -ENOSPC && ext3_should_retry_alloc(inode->i_sb) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: fs/ext3/inode.c:1103:
+^Iif (ret == -ENOSPC && ext3_should_retry_alloc(inode->i_sb) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: fs/ext3/namei.c:1652:
+^Iif (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: fs/ext3/namei.c:1688:
+^Iif (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: fs/ext3/namei.c:1764:
+^Iif (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: fs/ext3/namei.c:2146:
+^Iif (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: fs/ext3/namei.c:2177:
+^Iif (err == -ENOSPC && ext3_should_retry_alloc(dir->i_sb) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: fs/ext3/xattr.c:892:
+^I^Iif (error == -ENOSPC && $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: include/linux/ext3_fs.h:692:
+extern int ext3_should_retry_alloc(struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281991.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 4 warnings, 4 checks, 300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281991.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
