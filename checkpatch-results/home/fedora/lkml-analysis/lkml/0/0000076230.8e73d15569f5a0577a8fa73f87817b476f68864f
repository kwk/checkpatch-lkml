WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
Below is a 2.6.17-rc4-mm1 patch that fixes a problem where the OOM killer was

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: David S. Peterson <dsp@llnl.gov>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#82: FILE: include/linux/swap.h:159:
+extern volatile unsigned long oom_kill_in_progress;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#137: FILE: mm/oom_kill.c:28:
+volatile unsigned long oom_kill_in_progress = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#137: FILE: mm/oom_kill.c:28:
+volatile unsigned long oom_kill_in_progress = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#152: FILE: mm/oom_kill.c:268:
+	if (mm == NULL || mm == &init_mm) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: mm/oom_kill.c:333:
+	printk("oom-killer: gfp_mask=0x%x, order=%d\n", gfp_mask, order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: mm/oom_kill.c:346:
+		cancel = oom_kill_process(current, points,
 				"No available memory (MPOL_BIND)");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: mm/oom_kill.c:351:
+		cancel = oom_kill_process(current, points,
 				"No available memory in cpuset");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: mm/page_alloc.c:914:
+static struct page * oom_alloc(gfp_t gfp_mask, unsigned int order,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: mm/page_alloc.c:915:
+static struct page * oom_alloc(gfp_t gfp_mask, unsigned int order,
+		struct zonelist *zonelist)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: mm/page_alloc.c:932:
+	page = get_page_from_freelist(gfp_mask | __GFP_HARDWALL, order,
+			zonelist, ALLOC_WMARK_HIGH | ALLOC_CPUSET);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#304: FILE: mm/page_alloc.c:1149:
+		if ((page = oom_alloc(gfp_mask, order, zonelist)) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 5 checks, 234 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
