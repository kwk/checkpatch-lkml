WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
diff -dpur linux-2.6.0-test11/arch/i386/Kconfig linux-2.6.0-test11-mh/arch/i386/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: arch/i386/Kconfig:709:
+config MEMHOTPLUGTEST
+       bool "Memory hotplug test"
+       default n
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: arch/i386/mm/discontig.c:119:
+	printk("NUMA - single node, flat memory mode, but broken in several blocks\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#98: FILE: arch/i386/mm/discontig.c:125:
+		printk("Rounding down maxpfn %d -> %d\n", max_pfn, pfn);

ERROR:SPACING: space required before the open parenthesis '('
#101: FILE: arch/i386/mm/discontig.c:128:
+	for(i = 0; i < MAX_NUMNODES; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#105: FILE: arch/i386/mm/discontig.c:132:
+		if (pfn < max_pfn)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#107: FILE: arch/i386/mm/discontig.c:134:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#110: FILE: arch/i386/mm/discontig.c:137:
+			printk("total %d blocks, max %d\n", i, max_pfn);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#116: FILE: arch/i386/mm/discontig.c:143:
+	/* Fill in the physnode_map with our simplistic memory model,
+	* all memory is in node 0.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#118: FILE: arch/i386/mm/discontig.c:145:
+	for (pfn = node_start_pfn[0]; pfn <= max_pfn;
+	       pfn += PAGES_PER_ELEMENT)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: arch/i386/mm/discontig.c:151:
+         /* Indicate there is one node available. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: arch/i386/mm/discontig.c:246:
+		memset(node_remap_start_vaddr[node], 0,
+		    node_remap_size[node] * PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: arch/i386/mm/discontig.c:249:
+	kclist_add(&numa_kc, node_remap_start_vaddr[numnodes - 1],
+	    node_remap_offset[numnodes - 1] << PAGE_SHIFT);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/asm-i386/mmzone.h:132:
+extern int get_memcfg_numa_blks(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: include/linux/mm.h:224:
+			printk("Page: %lx ", (long)p);			\

ERROR:SPACING: space required before the open parenthesis '('
#222: FILE: include/linux/mm.h:225:
+			for(i = 0; i < sizeof(struct page); i++)	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#223: FILE: include/linux/mm.h:226:
+				printk(" %02x", ((unsigned char *)p)[i]); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#224: FILE: include/linux/mm.h:227:
+			printk("\n");					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#225: FILE: include/linux/mm.h:228:
+			BUG();				\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#347: FILE: mm/page_alloc.c:57:
+static char zone_active[MAX_NR_ZONES*MAX_NUMNODES];
                                     ^

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#367: FILE: mm/page_alloc.c:522:
+	if (page != NULL && ! zone_active[page->flags >> ZONE_SHIFT])
 	                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page"
#367: FILE: mm/page_alloc.c:522:
+	if (page != NULL && ! zone_active[page->flags >> ZONE_SHIFT])

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#368: FILE: mm/page_alloc.c:523:
+		printk("alloc_page from disabled zone: %p\n", page);

ERROR:SPACING: space required before the open parenthesis '('
#379: FILE: mm/page_alloc.c:534:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[i]"
#382: FILE: mm/page_alloc.c:537:
+		if (zone_table[i] == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#383: FILE: mm/page_alloc.c:538:
+			BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#396: FILE: mm/page_alloc.c:591:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#407: FILE: mm/page_alloc.c:623:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#418: FILE: mm/page_alloc.c:650:
+			if (! zone_activep(z))
 			    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#429: FILE: mm/page_alloc.c:679:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space required before the open parenthesis '('
#459: FILE: mm/page_alloc.c:1155:
+		for(; k >= 0; k--) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: mm/page_alloc.c:1714:
+static int mhtest_read(char *page, char **start, off_t off, int count,
+    int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: mm/page_alloc.c:1714:
+    int *eof, void *data)$

ERROR:SPACING: space required before the open parenthesis '('
#502: FILE: mm/page_alloc.c:1721:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#504: FILE: mm/page_alloc.c:1723:
+		if (z == NULL)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#506: FILE: mm/page_alloc.c:1725:
+		if (! z->present_pages)
 		    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: mm/page_alloc.c:1729:
+		len = sprintf(p, "Zone %d: %sabled free %d, active %d, present %d\n", i,
+		    zone_active[i] ? "en" : "dis", z->free_pages, z->nr_active,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: mm/page_alloc.c:1748:
+static int mhtest_write(struct file *file, const char *buffer,
+    unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: mm/page_alloc.c:1748:
+    unsigned long count, void *data)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#544: FILE: mm/page_alloc.c:1763:
+	if (p == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#548: FILE: mm/page_alloc.c:1767:
+	idx = simple_strtoul(p, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#550: FILE: mm/page_alloc.c:1769:
+	if (idx > MAX_NR_ZONES*MAX_NUMNODES) {
 	                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#551: FILE: mm/page_alloc.c:1770:
+		printk("Argument out of range\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#555: FILE: mm/page_alloc.c:1774:
+		printk("disable %d\n", idx);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#557: FILE: mm/page_alloc.c:1776:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#561: FILE: mm/page_alloc.c:1780:
+			pcp->low = pcp->high = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#564: FILE: mm/page_alloc.c:1783:
+			pcp->low = pcp->high = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#570: FILE: mm/page_alloc.c:1789:
+			printk("Zone %d still active (proceeding anyway)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: mm/page_alloc.c:1790:
+			printk("Zone %d still active (proceeding anyway)\n",
+			    idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: mm/page_alloc.c:1791:
+		printk("purge %d\n", idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#577: FILE: mm/page_alloc.c:1796:
+		printk("enable %d\n", idx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: mm/page_alloc.c:1798:
+^I^Izone_table[idx]->pages_high = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#582: FILE: mm/page_alloc.c:1801:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#596: FILE: mm/page_alloc.c:1815:
+		if (zone_table[idx] == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#601: FILE: mm/page_alloc.c:1820:
+			printk(" %lx", (unsigned long)list_entry(l, struct page, lru));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#607: FILE: mm/page_alloc.c:1826:
+		printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#609: FILE: mm/page_alloc.c:1828:
+		if (zone_table[idx] == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#611: FILE: mm/page_alloc.c:1830:
+		for(i = 0; i < zone_table[idx]->spanned_pages; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#613: FILE: mm/page_alloc.c:1832:
+				printk(" %lx", (unsigned long)&zone_table[idx]->zone_mem_map[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#614: FILE: mm/page_alloc.c:1833:
+		printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#625: FILE: mm/page_alloc.c:1844:
+	if (entry == NULL)

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#632: FILE: mm/page_alloc.c:1851:
+__initcall(procmhtest_init);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#643: FILE: mm/shmem.c:84:
+	struct page* p = alloc_pages(gfp_mask & ~__GFP_HIGHMEM,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#644: FILE: mm/shmem.c:85:
+	    PAGE_CACHE_SHIFT-PAGE_SHIFT);
 	                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#645: FILE: mm/shmem.c:86:
+	printk("shmem_dir_alloc: %lx\n", (unsigned long)p);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#649: FILE: mm/shmem.c:90:
+	    PAGE_CACHE_SHIFT-PAGE_SHIFT);
 	                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: mm/vmalloc.c:451:
+       return __vmalloc(size, GFP_KERNEL, PAGE_KERNEL);$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#730: FILE: mm/vmscan.c:291:
+		if ((! zone_activep(page_zone(page))) && page_mapped(page))
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: mm/vmscan.c:598:
+refill_inactive_zone(struct zone *zone, int nr_pages_in,
 			struct page_state *ps, int priority)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#749: FILE: mm/vmscan.c:616:
+	if (! zone_activep(zone)) {
 	    ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#750: FILE: mm/vmscan.c:617:
+		nr_pages = nr_pages_in = zone->present_pages - zone->free_pages;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#751: FILE: mm/vmscan.c:618:
+		printk("Purging active list of disabled zone\n");

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#762: FILE: mm/vmscan.c:673:
+	if (! zone_activep(zone))
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#772: FILE: mm/vmscan.c:683:
+			if (! zone_activep(zone))
 			    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#783: FILE: mm/vmscan.c:790:
+	if (! zone_activep(zone))
 	    ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#797: FILE: mm/vmscan.c:1078:
+print_buffer(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#799: FILE: mm/vmscan.c:1080:
+	struct address_space* mapping = page->mapping;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#803: FILE: mm/vmscan.c:1084:
+	bh = head = page_buffers(page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#804: FILE: mm/vmscan.c:1085:
+	printk("buffers:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#806: FILE: mm/vmscan.c:1087:
+		printk(" %lx %d\n", bh->b_state, atomic_read(&bh->b_count));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#810: FILE: mm/vmscan.c:1091:
+	printk("\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#813: FILE: mm/vmscan.c:1094:
+}
+/* try to remap a page. returns non-zero on failure */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpage"
#824: FILE: mm/vmscan.c:1105:
+	if (newpage == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: mm/vmscan.c:1108:
+		BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#830: FILE: mm/vmscan.c:1111:
+	if (! PagePrivate(page) && PageWriteback(page))
 	    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: mm/vmscan.c:1115:
+		BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#842: FILE: mm/vmscan.c:1123:
+			if (! --waitcnt)
 			    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping"
#849: FILE: mm/vmscan.c:1130:
+		    mapping != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping->a_ops->writepage"
#850: FILE: mm/vmscan.c:1131:
+		    mapping->a_ops->writepage != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#852: FILE: mm/vmscan.c:1133:
+			if (test_clear_page_dirty(page)) {
[...]
+			} else
[...]

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#876: FILE: mm/vmscan.c:1157:
+				if (! PagePrivate(page))
 				    ^

CHECK:BRACES: Unbalanced braces around else statement
#878: FILE: mm/vmscan.c:1159:
+			} else

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#889: FILE: mm/vmscan.c:1170:
+			if (! --waitcnt) {
 			    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#896: FILE: mm/vmscan.c:1177:
+	if (mapping == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#906: FILE: mm/vmscan.c:1187:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#911: FILE: mm/vmscan.c:1192:
+		printk("mapping changed %p -> %p, page %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: mm/vmscan.c:1193:
+		printk("mapping changed %p -> %p, page %p\n",
+		    mapping, page->mapping, page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!radix_tree_delete"
#913: FILE: mm/vmscan.c:1194:
+	if (radix_tree_delete(&mapping->page_tree, page->index) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#953: FILE: mm/vmscan.c:1234:
+		printk("buffer reappeared\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#964: FILE: mm/vmscan.c:1245:
+			printk("remap_onepage: still waiting on %p %d\n", page, waitcnt);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remap_onepage', this function's name, in a string
#964: FILE: mm/vmscan.c:1245:
+			printk("remap_onepage: still waiting on %p %d\n", page, waitcnt);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#972: FILE: mm/vmscan.c:1253:
+	BUG_ON(page_count(page) == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#985: FILE: mm/vmscan.c:1266:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#991: FILE: mm/vmscan.c:1272:
+		if (p != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#993: FILE: mm/vmscan.c:1274:
+			printk("page %p newpage %p radix %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: mm/vmscan.c:1275:
+			printk("page %p newpage %p radix %p\n",
+			    page, newpage, p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#995: FILE: mm/vmscan.c:1276:
+			BUG_ON(p == newpage);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1000: FILE: mm/vmscan.c:1281:
+			printk("newpage count %d != 1, %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1001: FILE: mm/vmscan.c:1282:
+			printk("newpage count %d != 1, %p\n",
+			    page_count(newpage), newpage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1002: FILE: mm/vmscan.c:1283:
+			BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1005: FILE: mm/vmscan.c:1286:
+		newpage->mapping = page->mapping = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!np"
#1024: FILE: mm/vmscan.c:1305:
+	if (np == NULL || op == NULL) {	/* XXX */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#1024: FILE: mm/vmscan.c:1305:
+	if (np == NULL || op == NULL) {	/* XXX */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1025: FILE: mm/vmscan.c:1306:
+		printk("%p %p %p %p\n", np, op, newpage, page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1026: FILE: mm/vmscan.c:1307:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1060: FILE: mm/vmscan.c:1341:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!radix_tree_delete"
#1064: FILE: mm/vmscan.c:1345:
+	if (radix_tree_delete(&mapping->page_tree, page->index) == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1077: FILE: mm/vmscan.c:1358:
+	for(; page_count(newpage) > 2; waitcnt++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1081: FILE: mm/vmscan.c:1362:
+			printk("You are hosed.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1082: FILE: mm/vmscan.c:1363:
+			printk("newpage %p\n", newpage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1083: FILE: mm/vmscan.c:1364:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1086: FILE: mm/vmscan.c:1367:
+	BUG_ON(PageUptodate(newpage));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1092: FILE: mm/vmscan.c:1373:
+		printk("newpage %p truncated. page %p\n", newpage, page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1093: FILE: mm/vmscan.c:1374:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1101: FILE: mm/vmscan.c:1382:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1131: FILE: mm/vmscan.c:1412:
+		printk("remapd already running\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remapd', this function's name, in a string
#1131: FILE: mm/vmscan.c:1412:
+		printk("remapd already running\n");

ERROR:SPACING: space required before the open parenthesis '('
#1136: FILE: mm/vmscan.c:1417:
+	while(nr_failed < 100) {

ERROR:SPACING: space required before the open parenthesis '('
#1138: FILE: mm/vmscan.c:1419:
+		for(active = 0; active < 2; active++) {

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1141: FILE: mm/vmscan.c:1422:
+			for(i = 0; ! list_empty(l) && i < 10; i++) {
 			           ^

ERROR:SPACING: space required before the open parenthesis '('
#1141: FILE: mm/vmscan.c:1422:
+			for(i = 0; ! list_empty(l) && i < 10; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: mm/vmscan.c:1429:
+						    list_entry(page->lru.prev,
+						    struct page, lru);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1150: FILE: mm/vmscan.c:1431:
+						if (&page->lru == l) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1152: FILE: mm/vmscan.c:1433:
+							/* scanned the whole
+							   list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1152: FILE: mm/vmscan.c:1433:
+							   list */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1156: FILE: mm/vmscan.c:1437:
+						if (page == page1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1157: FILE: mm/vmscan.c:1438:
+							BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1159: FILE: mm/vmscan.c:1440:
+					if (! fastmode) {
 					    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1160: FILE: mm/vmscan.c:1441:
+						printk("used up fastmode\n");

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1164: FILE: mm/vmscan.c:1445:
+				if (! TestClearPageLRU(page))
 				    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1165: FILE: mm/vmscan.c:1446:
+					BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1169: FILE: mm/vmscan.c:1450:
+					/* the page is in pagevec_release();
+					   shrink_cache says so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1169: FILE: mm/vmscan.c:1450:
+					   shrink_cache says so. */

WARNING:INDENTED_LABEL: labels should not be indented
#1186: FILE: mm/vmscan.c:1467:
+	got_page:

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1195: FILE: mm/vmscan.c:1476:
+	while (! list_empty(&failedp)) {
 	       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1207: FILE: mm/vmscan.c:1488:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: mm/vmscan.c:1496:
+^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#1220: FILE: mm/vmscan.c:1501:
+	for(i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1220: FILE: mm/vmscan.c:1501:
+	for(i = 0; i < NR_CPUS; i++)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000321890.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 69 warnings, 42 checks, 1096 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000321890.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
