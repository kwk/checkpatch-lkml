WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
   NTFS: The beginning of 2.0.8. - Major updates for handling of case sensitivity.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#132: 
--- a/fs/ntfs/attraops.c	Wed May 29 12:23:20 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#345: FILE: fs/ntfs/Makefile:8:
+EXTRA_CFLAGS = -DNTFS_VERSION=\"2.0.8\"

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: fs/ntfs/dir.c:68:
+u64 ntfs_lookup_inode_by_name(ntfs_inode *dir_ni, const uchar_t *uname,
+		const int uname_len, ntfs_name **res)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: fs/ntfs/dir.c:99:
+	if (!lookup_attr(AT_INDEX_ROOT, I30, 4, CASE_SENSITIVE, 0, NULL, 0,
+			ctx)) {

WARNING:SPLIT_STRING: quoted string split across lines
#437: FILE: fs/ntfs/dir.c:101:
+		ntfs_error(sb, "Index root attribute missing in directory "
+				"inode 0x%Lx.",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#437: FILE: fs/ntfs/dir.c:101:
+				"inode 0x%Lx.",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#443: FILE: fs/ntfs/dir.c:107:
+	ir = (INDEX_ROOT*)((u8*)ctx->attr +

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#443: FILE: fs/ntfs/dir.c:107:
+	ir = (INDEX_ROOT*)((u8*)ctx->attr +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#445: FILE: fs/ntfs/dir.c:109:
+	index_end = (u8*)&ir->index + le32_to_cpu(ir->index.index_length);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#447: FILE: fs/ntfs/dir.c:111:
+	ie = (INDEX_ENTRY*)((u8*)&ir->index +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#447: FILE: fs/ntfs/dir.c:111:
+	ie = (INDEX_ENTRY*)((u8*)&ir->index +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#453: FILE: fs/ntfs/dir.c:117:
+	for (;; ie = (INDEX_ENTRY*)((u8*)ie + le16_to_cpu(ie->_IEH(length)))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#453: FILE: fs/ntfs/dir.c:117:
+	for (;; ie = (INDEX_ENTRY*)((u8*)ie + le16_to_cpu(ie->_IEH(length)))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#455: FILE: fs/ntfs/dir.c:119:
+		if ((u8*)ie < (u8*)ctx->mrec || (u8*)ie +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#455: FILE: fs/ntfs/dir.c:119:
+		if ((u8*)ie < (u8*)ctx->mrec || (u8*)ie +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#455: FILE: fs/ntfs/dir.c:119:
+		if ((u8*)ie < (u8*)ctx->mrec || (u8*)ie +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#457: FILE: fs/ntfs/dir.c:121:
+				(u8*)ie + le16_to_cpu(ie->_IEH(key_length)) >

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: fs/ntfs/dir.c:138:
+		if (ntfs_are_names_equal(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#474: FILE: fs/ntfs/dir.c:138:
+				(uchar_t*)&ie->key.file_name.file_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: fs/ntfs/dir.c:155:
+					name = kmalloc(sizeof(ntfs_name),
+							GFP_NOFS);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#497: FILE: fs/ntfs/dir.c:161:
+				name->mref = le64_to_cpu(

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#504: FILE: fs/ntfs/dir.c:168:
+				if (name)
+					kfree(name);

CHECK:CAMELCASE: Avoid CamelCase: <NVolCaseSensitive>
#522: FILE: fs/ntfs/dir.c:186:
+		if (!NVolCaseSensitive(vol) &&

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: fs/ntfs/dir.c:187:
+		if (!NVolCaseSensitive(vol) &&
+				ie->key.file_name.file_name_type &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: fs/ntfs/dir.c:189:
+				ntfs_are_names_equal(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#525: FILE: fs/ntfs/dir.c:189:
+				(uchar_t*)&ie->key.file_name.file_name,

WARNING:SPLIT_STRING: quoted string split across lines
#535: FILE: fs/ntfs/dir.c:199:
+				ntfs_error(sb, "Found already allocated name "
+						"in phase 1. Please run chkdsk "

WARNING:SPLIT_STRING: quoted string split across lines
#536: FILE: fs/ntfs/dir.c:200:
+						"in phase 1. Please run chkdsk "
+						"and if that doesn't find any "

WARNING:SPLIT_STRING: quoted string split across lines
#537: FILE: fs/ntfs/dir.c:201:
+						"and if that doesn't find any "
+						"errors please report you saw "

WARNING:SPLIT_STRING: quoted string split across lines
#538: FILE: fs/ntfs/dir.c:202:
+						"errors please report you saw "
+						"this message to "

WARNING:SPLIT_STRING: quoted string split across lines
#539: FILE: fs/ntfs/dir.c:203:
+						"this message to "
+						"linux-ntfs@lists.sf.net.");

CHECK:BRACES: braces {} should be used on all arms of this statement
#552: FILE: fs/ntfs/dir.c:216:
+			if (type != FILE_NAME_DOS) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: fs/ntfs/dir.c:219:
+				memcpy(name->name, ie->key.file_name.file_name,
+						len * sizeof(uchar_t));

CHECK:BRACES: Unbalanced braces around else statement
#556: FILE: fs/ntfs/dir.c:220:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: fs/ntfs/dir.c:229:
+		rc = ntfs_collate_names(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#565: FILE: fs/ntfs/dir.c:229:
+				(uchar_t*)&ie->key.file_name.file_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: fs/ntfs/dir.c:248:
+		rc = ntfs_collate_names(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#584: FILE: fs/ntfs/dir.c:248:
+				(uchar_t*)&ie->key.file_name.file_name,

CHECK:CAMELCASE: Avoid CamelCase: <NInoIndexAllocPresent>
#615: FILE: fs/ntfs/dir.c:279:
+	if (!NInoIndexAllocPresent(dir_ni)) {

WARNING:SPLIT_STRING: quoted string split across lines
#617: FILE: fs/ntfs/dir.c:281:
+		ntfs_error(sb, "No index allocation attribute but index entry "
+				"requires one. Directory inode 0x%Lx is "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#617: FILE: fs/ntfs/dir.c:281:
+				"requires one. Directory inode 0x%Lx is "

WARNING:SPLIT_STRING: quoted string split across lines
#618: FILE: fs/ntfs/dir.c:282:
+				"requires one. Directory inode 0x%Lx is "
+				"corrupt or driver bug.",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#624: FILE: fs/ntfs/dir.c:288:
+	vcn = sle64_to_cpup((u8*)ie + le16_to_cpu(ie->_IEH(length)) - 8);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: fs/ntfs/dir.c:300:
+		ntfs_error(sb, "Failed to map directory index page, error %ld.",
+				-PTR_ERR(page));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#639: FILE: fs/ntfs/dir.c:303:
+	kaddr = (u8*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#642: FILE: fs/ntfs/dir.c:306:
+	ia = (INDEX_ALLOCATION*)(kaddr + ((vcn <<

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#645: FILE: fs/ntfs/dir.c:309:
+	if ((u8*)ia < kaddr || (u8*)ia > kaddr + PAGE_CACHE_SIZE) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#645: FILE: fs/ntfs/dir.c:309:
+	if ((u8*)ia < kaddr || (u8*)ia > kaddr + PAGE_CACHE_SIZE) {

WARNING:SPLIT_STRING: quoted string split across lines
#647: FILE: fs/ntfs/dir.c:311:
+		ntfs_error(sb, "Out of bounds check failed. Corrupt directory "
+				"inode 0x%Lx or driver bug.",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#647: FILE: fs/ntfs/dir.c:311:
+				"inode 0x%Lx or driver bug.",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#653: FILE: fs/ntfs/dir.c:317:
+		ntfs_error(sb, "Actual VCN (0x%Lx) of index buffer is "

WARNING:SPLIT_STRING: quoted string split across lines
#654: FILE: fs/ntfs/dir.c:318:
+		ntfs_error(sb, "Actual VCN (0x%Lx) of index buffer is "
+				"different from expected VCN (0x%Lx). "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#654: FILE: fs/ntfs/dir.c:318:
+				"different from expected VCN (0x%Lx). "

WARNING:SPLIT_STRING: quoted string split across lines
#655: FILE: fs/ntfs/dir.c:319:
+				"different from expected VCN (0x%Lx). "
+				"Directory inode 0x%Lx is corrupt or driver "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#655: FILE: fs/ntfs/dir.c:319:
+				"Directory inode 0x%Lx is corrupt or driver "

WARNING:SPLIT_STRING: quoted string split across lines
#656: FILE: fs/ntfs/dir.c:320:
+				"Directory inode 0x%Lx is corrupt or driver "
+				"bug.",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#665: FILE: fs/ntfs/dir.c:329:
+		ntfs_error(sb, "Index buffer (VCN 0x%Lx) of directory inode "

WARNING:SPLIT_STRING: quoted string split across lines
#666: FILE: fs/ntfs/dir.c:330:
+		ntfs_error(sb, "Index buffer (VCN 0x%Lx) of directory inode "
+				"0x%Lx has a size (%u) differing from the "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#666: FILE: fs/ntfs/dir.c:330:
+				"0x%Lx has a size (%u) differing from the "

WARNING:SPLIT_STRING: quoted string split across lines
#667: FILE: fs/ntfs/dir.c:331:
+				"0x%Lx has a size (%u) differing from the "
+				"directory specified size (%u). Directory "

WARNING:SPLIT_STRING: quoted string split across lines
#668: FILE: fs/ntfs/dir.c:332:
+				"directory specified size (%u). Directory "
+				"inode is corrupt or driver bug.",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#676: FILE: fs/ntfs/dir.c:340:
+	index_end = (u8*)ia + dir_ni->_IDM(index_block_size);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#678: FILE: fs/ntfs/dir.c:342:
+		ntfs_error(sb, "Index buffer (VCN 0x%Lx) of directory inode "

WARNING:SPLIT_STRING: quoted string split across lines
#679: FILE: fs/ntfs/dir.c:343:
+		ntfs_error(sb, "Index buffer (VCN 0x%Lx) of directory inode "
+				"0x%Lx crosses page boundary. Impossible! "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#679: FILE: fs/ntfs/dir.c:343:
+				"0x%Lx crosses page boundary. Impossible! "

WARNING:SPLIT_STRING: quoted string split across lines
#680: FILE: fs/ntfs/dir.c:344:
+				"0x%Lx crosses page boundary. Impossible! "
+				"Cannot access! This is probably a bug in the "

WARNING:SPLIT_STRING: quoted string split across lines
#681: FILE: fs/ntfs/dir.c:345:
+				"Cannot access! This is probably a bug in the "
+				"driver.", (long long)vcn,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#686: FILE: fs/ntfs/dir.c:350:
+	index_end = (u8*)&ia->index + le32_to_cpu(ia->index.index_length);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#687: FILE: fs/ntfs/dir.c:351:
+	if (index_end > (u8*)ia + dir_ni->_IDM(index_block_size)) {

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#688: FILE: fs/ntfs/dir.c:352:
+		ntfs_error(sb, "Size of index buffer (VCN 0x%Lx) of directory "

WARNING:SPLIT_STRING: quoted string split across lines
#689: FILE: fs/ntfs/dir.c:353:
+		ntfs_error(sb, "Size of index buffer (VCN 0x%Lx) of directory "
+				"inode 0x%Lx exceeds maximum size.",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#689: FILE: fs/ntfs/dir.c:353:
+				"inode 0x%Lx exceeds maximum size.",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#696: FILE: fs/ntfs/dir.c:360:
+	ie = (INDEX_ENTRY*)((u8*)&ia->index +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#696: FILE: fs/ntfs/dir.c:360:
+	ie = (INDEX_ENTRY*)((u8*)&ia->index +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#703: FILE: fs/ntfs/dir.c:367:
+	for (;; ie = (INDEX_ENTRY*)((u8*)ie + le16_to_cpu(ie->_IEH(length)))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#703: FILE: fs/ntfs/dir.c:367:
+	for (;; ie = (INDEX_ENTRY*)((u8*)ie + le16_to_cpu(ie->_IEH(length)))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#705: FILE: fs/ntfs/dir.c:369:
+		if ((u8*)ie < (u8*)ia || (u8*)ie +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#705: FILE: fs/ntfs/dir.c:369:
+		if ((u8*)ie < (u8*)ia || (u8*)ie +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#705: FILE: fs/ntfs/dir.c:369:
+		if ((u8*)ie < (u8*)ia || (u8*)ie +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#707: FILE: fs/ntfs/dir.c:371:
+				(u8*)ie + le16_to_cpu(ie->_IEH(key_length)) >

WARNING:SPLIT_STRING: quoted string split across lines
#710: FILE: fs/ntfs/dir.c:374:
+			ntfs_error(sb, "Index entry out of bounds in "
+					"directory inode 0x%Lx.",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#710: FILE: fs/ntfs/dir.c:374:
+					"directory inode 0x%Lx.",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: fs/ntfs/dir.c:393:
+		if (ntfs_are_names_equal(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#729: FILE: fs/ntfs/dir.c:393:
+				(uchar_t*)&ie->key.file_name.file_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: fs/ntfs/dir.c:410:
+					name = kmalloc(sizeof(ntfs_name),
+							GFP_NOFS);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#752: FILE: fs/ntfs/dir.c:416:
+				name->mref = le64_to_cpu(

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#759: FILE: fs/ntfs/dir.c:423:
+				if (name)
+					kfree(name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: fs/ntfs/dir.c:443:
+		if (!NVolCaseSensitive(vol) &&
+				ie->key.file_name.file_name_type &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: fs/ntfs/dir.c:445:
+				ntfs_are_names_equal(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#781: FILE: fs/ntfs/dir.c:445:
+				(uchar_t*)&ie->key.file_name.file_name,

WARNING:SPLIT_STRING: quoted string split across lines
#791: FILE: fs/ntfs/dir.c:455:
+				ntfs_error(sb, "Found already allocated name "
+						"in phase 2. Please run chkdsk "

WARNING:SPLIT_STRING: quoted string split across lines
#792: FILE: fs/ntfs/dir.c:456:
+						"in phase 2. Please run chkdsk "
+						"and if that doesn't find any "

WARNING:SPLIT_STRING: quoted string split across lines
#793: FILE: fs/ntfs/dir.c:457:
+						"and if that doesn't find any "
+						"errors please report you saw "

WARNING:SPLIT_STRING: quoted string split across lines
#794: FILE: fs/ntfs/dir.c:458:
+						"errors please report you saw "
+						"this message to "

WARNING:SPLIT_STRING: quoted string split across lines
#795: FILE: fs/ntfs/dir.c:459:
+						"this message to "
+						"linux-ntfs@lists.sf.net.");

CHECK:BRACES: braces {} should be used on all arms of this statement
#809: FILE: fs/ntfs/dir.c:473:
+			if (type != FILE_NAME_DOS) {
[...]
+			} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: fs/ntfs/dir.c:476:
+				memcpy(name->name, ie->key.file_name.file_name,
+						len * sizeof(uchar_t));

CHECK:BRACES: Unbalanced braces around else statement
#813: FILE: fs/ntfs/dir.c:477:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: fs/ntfs/dir.c:486:
+		rc = ntfs_collate_names(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#822: FILE: fs/ntfs/dir.c:486:
+				(uchar_t*)&ie->key.file_name.file_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: fs/ntfs/dir.c:505:
+		rc = ntfs_collate_names(uname, uname_len,
+				(uchar_t*)&ie->key.file_name.file_name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#841: FILE: fs/ntfs/dir.c:505:
+				(uchar_t*)&ie->key.file_name.file_name,

WARNING:SPLIT_STRING: quoted string split across lines
#862: FILE: fs/ntfs/dir.c:526:
+			ntfs_error(sb, "Index entry with child node found in "
+					"a leaf node in directory inode 0x%Lx.",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#862: FILE: fs/ntfs/dir.c:526:
+					"a leaf node in directory inode 0x%Lx.",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#869: FILE: fs/ntfs/dir.c:533:
+		vcn = sle64_to_cpup((u8*)ie +

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#873: FILE: fs/ntfs/dir.c:537:
+			 * recycle the mapped page. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#875: FILE: fs/ntfs/dir.c:539:
+					PAGE_CACHE_SHIFT == vcn <<

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPLIT_STRING: quoted string split across lines
#883: FILE: fs/ntfs/dir.c:547:
+		ntfs_error(sb, "Negative child node vcn in directory inode "
+				"0x%Lx.", (unsigned long long)dir_ni->mft_no);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#883: FILE: fs/ntfs/dir.c:547:
+				"0x%Lx.", (unsigned long long)dir_ni->mft_no);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#907: FILE: fs/ntfs/dir.c:571:
+	if (name) {
+		kfree(name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: fs/ntfs/dir.c:577:
+	ntfs_error(sb, "map_mft_record(READ) failed with error code %ld.",
+			-PTR_ERR(m));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#921: FILE: fs/ntfs/dir.c:585:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <NVolShowSystemFiles>
#977: FILE: fs/ntfs/dir.c:1030:
+			!NVolShowSystemFiles(vol)) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1004: FILE: fs/ntfs/dir.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1015: FILE: fs/ntfs/dir.h:12:
+ * This program/include file is distributed in the hope that it will be $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1016: FILE: fs/ntfs/dir.h:13:
+ * useful, but WITHOUT ANY WARRANTY; without even the implied warranty $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1021: FILE: fs/ntfs/dir.h:18:
+ * along with this program (in the main directory of the Linux-NTFS $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1022: FILE: fs/ntfs/dir.h:19:
+ * distribution in the file COPYING); if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1023: FILE: fs/ntfs/dir.h:20:
+ * Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1036: FILE: fs/ntfs/dir.h:33:
+typedef struct {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#1041: FILE: fs/ntfs/dir.h:38:
+} __attribute__ ((__packed__)) ntfs_name;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1046: FILE: fs/ntfs/dir.h:43:
+extern u64 ntfs_lookup_inode_by_name(ntfs_inode *dir_ni, const uchar_t *uname,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: fs/ntfs/dir.h:44:
+extern u64 ntfs_lookup_inode_by_name(ntfs_inode *dir_ni, const uchar_t *uname,
+		const int uname_len, ntfs_name **res);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1095: FILE: fs/ntfs/inode.c:1366:
+		seq_printf(sf, ",case_sensitive");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1097: FILE: fs/ntfs/inode.c:1368:
+		seq_printf(sf, ",show_sys_files");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1196: FILE: fs/ntfs/namei.c:110:
+	mref = ntfs_lookup_inode_by_name(NTFS_I(dir_ino), uname, uname_len,
+			&name);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1200: FILE: fs/ntfs/namei.c:114:
+	if (name)
+		kfree(name);

WARNING:INDENTED_LABEL: labels should not be indented
#1213: FILE: fs/ntfs/namei.c:157:
+	lookup:		ntfs_lookup,	/* VFS: Lookup directory. */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1275: FILE: fs/ntfs/super.c:113:
+#define NTFS_GETOPT_BOOL(option, variable)				\
+	if (!strcmp(p, option)) {					\
+		BOOL val;						\
+		if (!simple_getbool(v, &val))				\
+			goto needs_bool;				\
+		variable = val;						\
+	} 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1275: FILE: fs/ntfs/super.c:113:
+#define NTFS_GETOPT_BOOL(option, variable)				\
+	if (!strcmp(p, option)) {					\
+		BOOL val;						\
+		if (!simple_getbool(v, &val))				\
+			goto needs_bool;				\
+		variable = val;						\
+	} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1281: FILE: fs/ntfs/super.c:119:
+^I} $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1291: FILE: fs/ntfs/super.c:147:
+		else NTFS_GETOPT_WITH_DEFAULT("sloppy", sloppy, TRUE)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1292: FILE: fs/ntfs/super.c:148:
+		else NTFS_GETOPT_BOOL("show_sys_files", show_sys_files)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1293: FILE: fs/ntfs/super.c:149:
+		else NTFS_GETOPT_BOOL("case_sensitive", case_sensitive)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: fs/ntfs/super.c:154:
+			ntfs_warning(vol->sb, "Ignoring obsolete option %s.",
+					p);

CHECK:CAMELCASE: Avoid CamelCase: <NVolSetShowSystemFiles>
#1356: FILE: fs/ntfs/super.c:269:
+			NVolSetShowSystemFiles(vol);

CHECK:CAMELCASE: Avoid CamelCase: <NVolClearShowSystemFiles>
#1358: FILE: fs/ntfs/super.c:271:
+			NVolClearShowSystemFiles(vol);

CHECK:CAMELCASE: Avoid CamelCase: <NVolSetCaseSensitive>
#1362: FILE: fs/ntfs/super.c:275:
+			NVolSetCaseSensitive(vol);

CHECK:CAMELCASE: Avoid CamelCase: <NVolClearCaseSensitive>
#1364: FILE: fs/ntfs/super.c:277:
+			NVolClearCaseSensitive(vol);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1410: FILE: fs/ntfs/volume.h:35:
+	NV_CaseSensitive,	/* 1: Treat file names as case sensitive and
+				      create filenames in the POSIX namespace.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1412: FILE: fs/ntfs/volume.h:37:
+				      file names in WIN32 namespace. */

WARNING:SPLIT_STRING: quoted string split across lines
#1545: FILE: fs/ntfs/dir.c:203:
 						"this message to "
+						"linux-ntfs-dev@lists.sf.net.");

WARNING:SPLIT_STRING: quoted string split across lines
#1554: FILE: fs/ntfs/dir.c:459:
 						"this message to "
+						"linux-ntfs-dev@lists.sf.net.");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1566: FILE: fs/ntfs/unistr.c:336:
+			ns = (unsigned char*)kmalloc(ns_len + 1, GFP_NOFS);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1566: FILE: fs/ntfs/unistr.c:336:
+			ns = (unsigned char*)kmalloc(ns_len + 1, GFP_NOFS);

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1621: FILE: fs/ntfs/namei.c:20:
  * Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1709: FILE: fs/ntfs/namei.c:145:
+		if (name)
+			kfree(name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1723: FILE: fs/ntfs/namei.c:162:
+   {$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1732: FILE: fs/ntfs/namei.c:171:
+		nls_name.len = (unsigned)ntfs_ucstonls(vol,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1733: FILE: fs/ntfs/namei.c:172:
+				(uchar_t*)&name->name, name->len,

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#1734: FILE: fs/ntfs/namei.c:173:
+				(unsigned char**)&nls_name.name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1760: FILE: fs/ntfs/namei.c:199:
+			if (!lookup_attr(AT_FILE_NAME, NULL, 0, 0, 0, NULL, 0,
+					ctx)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1762: FILE: fs/ntfs/namei.c:201:
+				ntfs_error(vol->sb, "Inode corrupt: No WIN32 "
+						"namespace counterpart to DOS "

WARNING:SPLIT_STRING: quoted string split across lines
#1763: FILE: fs/ntfs/namei.c:202:
+						"namespace counterpart to DOS "
+						"file name. Run chkdsk.");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1775: FILE: fs/ntfs/namei.c:214:
+			fn = (FILE_NAME_ATTR*)((u8*)ctx->attr + le16_to_cpu(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1775: FILE: fs/ntfs/namei.c:214:
+			fn = (FILE_NAME_ATTR*)((u8*)ctx->attr + le16_to_cpu(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1775: FILE: fs/ntfs/namei.c:214:
+			fn = (FILE_NAME_ATTR*)((u8*)ctx->attr + le16_to_cpu(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1783: FILE: fs/ntfs/namei.c:222:
+		nls_name.len = (unsigned)ntfs_ucstonls(vol,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1784: FILE: fs/ntfs/namei.c:223:
+				(uchar_t*)&fn->file_name, fn->file_name_length,

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#1785: FILE: fs/ntfs/namei.c:224:
+				(unsigned char**)&nls_name.name,

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1792: FILE: fs/ntfs/namei.c:231:
+	/* Check if a conversion error occured. */
 	                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#1793: FILE: fs/ntfs/namei.c:232:
+	if ((signed)nls_name.len < 0) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#1794: FILE: fs/ntfs/namei.c:233:
+		err = (signed)nls_name.len;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1818: FILE: fs/ntfs/namei.c:257:
+		BUG_ON(real_dent->d_inode != dent_inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1823: FILE: fs/ntfs/namei.c:262:
+		iput(dent_inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1838: FILE: fs/ntfs/namei.c:277:
+	iput(dent_inode);
 	^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1840: FILE: fs/ntfs/namei.c:279:
+   }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 55 errors, 76 warnings, 37 checks, 1542 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
