WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: fs/namespace.c:398:
+	BUG_ON(!parent_pnode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#108: FILE: fs/namespace.c:427:
+	struct nameidata old_nd;
+	if (mnt != mnt->mnt_parent) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: fs/namespace.c:453:
+		if (mnt->mnt_parent != mnt &&
+			IS_MNT_SHARED(mnt->mnt_parent)) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#131: FILE: fs/namespace.c:455:
+			struct vfspnode *parent_pnode
+				= mnt->mnt_parent->mnt_pnode;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#132: FILE: fs/namespace.c:456:
+			BUG_ON(!parent_pnode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: fs/namespace.c:458:
+			pnode_umount(parent_pnode,
+				mnt->mnt_mountpoint,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: fs/namespace.c:462:
+				BUG_ON(!mnt->mnt_pnode);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#158: FILE: fs/namespace.c:475:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#160: FILE: fs/namespace.c:477:
+	int mycount = atomic_read(&mnt->mnt_count);
+	return (mycount > count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: fs/pnode.c:233:
+vfs_busy(struct vfsmount *mnt, struct dentry *dentry, struct dentry *rootdentry,
+		struct vfsmount *origmnt)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#199: FILE: fs/pnode.c:236:
+	int ret=0;
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: fs/pnode.c:257:
+pnode_mount_busy(struct vfspnode *pnode, struct dentry *mntpt, struct dentry *root,
+			struct vfsmount *mnt)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#222: FILE: fs/pnode.c:259:
+	int ret=0,traversal;
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#222: FILE: fs/pnode.c:259:
+	int ret=0,traversal;
 	         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: fs/pnode.c:260:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: fs/pnode.c:260:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/pnode.c:260:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

ERROR:SPACING: space required before the open parenthesis '('
#228: FILE: fs/pnode.c:265:
+	while(pnode_next(&context)) {

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: fs/pnode.c:268:
+		if(traversal == PNODE_UP) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: fs/pnode.c:272:
+			list_for_each_entry_safe(member_mnt,
+				t_m, &pnode->pnode_vfs, mnt_pnode_mntlist) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#237: FILE: fs/pnode.c:274:
+				if ((ret = vfs_busy(member_mnt, mntpt, root, mnt)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: fs/pnode.c:279:
+			list_for_each_entry_safe(slave_mnt,
+				t_m, &pnode->pnode_slavevfs, mnt_pnode_mntlist) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#244: FILE: fs/pnode.c:281:
+				if ((ret = vfs_busy(slave_mnt, mntpt, root, mnt)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/pnode.c:311:
+pnode_umount(struct vfspnode *pnode, struct dentry *dentry,
+			struct dentry *rootdentry)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#276: FILE: fs/pnode.c:313:
+	int ret=0,traversal;
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: fs/pnode.c:313:
+	int ret=0,traversal;
 	         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: fs/pnode.c:314:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: fs/pnode.c:314:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: fs/pnode.c:314:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

ERROR:SPACING: space required before the open parenthesis '('
#282: FILE: fs/pnode.c:319:
+	while(pnode_next(&context)) {

ERROR:SPACING: space required before the open parenthesis '('
#285: FILE: fs/pnode.c:322:
+		if(traversal == PNODE_UP) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: fs/pnode.c:326:
+			list_for_each_entry_safe(member_mnt,
+				t_m, &pnode->pnode_vfs, mnt_pnode_mntlist) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#291: FILE: fs/pnode.c:328:
+				if ((ret = vfs_umount(member_mnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: fs/pnode.c:329:
+				if ((ret = vfs_umount(member_mnt,
+						dentry, rootdentry)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: fs/pnode.c:334:
+			list_for_each_entry_safe(slave_mnt,
+				t_m, &pnode->pnode_slavevfs, mnt_pnode_mntlist) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#299: FILE: fs/pnode.c:336:
+				if ((ret = vfs_umount(slave_mnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: fs/pnode.c:337:
+				if ((ret = vfs_umount(slave_mnt,
+						dentry, rootdentry)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#311: FILE: fs/pnode.c:348:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/linux/fs.h:1219:
+extern int do_umount(struct vfsmount *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#323: FILE: include/linux/fs.h:1219:
+extern int do_umount(struct vfsmount *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#323: FILE: include/linux/fs.h:1219:
+extern int do_umount(struct vfsmount *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/linux/fs.h:1225:
+extern void do_detach_mount(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#329: FILE: include/linux/fs.h:1225:
+extern void do_detach_mount(struct vfsmount *);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#330: FILE: include/linux/fs.h:1226:
+extern int do_refcount_check(struct vfsmount *, int );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/fs.h:1226:
+extern int do_refcount_check(struct vfsmount *, int );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#330: FILE: include/linux/fs.h:1226:
+extern int do_refcount_check(struct vfsmount *, int );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#330: FILE: include/linux/fs.h:1226:
+extern int do_refcount_check(struct vfsmount *, int );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#342: FILE: include/linux/pnode.h:70:
+void pnode_free(struct vfspnode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#343: FILE: include/linux/pnode.h:71:
+int pnode_is_busy(struct vfspnode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#344: FILE: include/linux/pnode.h:72:
+int pnode_umount_vfs(struct vfspnode *, struct dentry *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#344: FILE: include/linux/pnode.h:72:
+int pnode_umount_vfs(struct vfspnode *, struct dentry *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#344: FILE: include/linux/pnode.h:72:
+int pnode_umount_vfs(struct vfspnode *, struct dentry *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#344: FILE: include/linux/pnode.h:72:
+int pnode_umount_vfs(struct vfspnode *, struct dentry *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#352: FILE: include/linux/pnode.h:85:
+int pnode_umount(struct vfspnode *, struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#352: FILE: include/linux/pnode.h:85:
+int pnode_umount(struct vfspnode *, struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#352: FILE: include/linux/pnode.h:85:
+int pnode_umount(struct vfspnode *, struct dentry *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#353: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#353: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#353: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#353: FILE: include/linux/pnode.h:86:
+int pnode_mount_busy(struct vfspnode *, struct dentry *, struct dentry *, struct vfsmount *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169543.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 27 warnings, 17 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169543.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
