WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#78: FILE: arch/ia64/ia32/sys_ia32.c:94:
+sys32_execve (char *name, compat_uptr_t __user *argv, compat_uptr_t __user *envp, struct pt_regs *regs)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#78: FILE: arch/ia64/ia32/sys_ia32.c:94:
+sys32_execve (char *name, compat_uptr_t __user *argv, compat_uptr_t __user *envp, struct pt_regs *regs)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#995: FILE: arch/s390/kernel/compat_linux.c:919:
+        filename = getname(compat_ptr(regs.orig_gpr2));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: arch/s390/kernel/compat_linux.c:919:
+        filename = getname(compat_ptr(regs.orig_gpr2));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1000: FILE: arch/s390/kernel/compat_linux.c:923:
+        error = compat_do_execve(filename, compat_ptr(regs.gprs[3]),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: arch/s390/kernel/compat_linux.c:923:
+        error = compat_do_execve(filename, compat_ptr(regs.gprs[3]),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1218: FILE: arch/sparc64/kernel/sys_sparc32.c:1503:
+        error = compat_do_execve(filename,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1218: FILE: arch/sparc64/kernel/sys_sparc32.c:1503:
+        error = compat_do_execve(filename,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1219: FILE: arch/sparc64/kernel/sys_sparc32.c:1504:
+        ^Icompat_ptr((u32)regs->u_regs[base + UREG_I1]),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1219: FILE: arch/sparc64/kernel/sys_sparc32.c:1504:
+        ^Icompat_ptr((u32)regs->u_regs[base + UREG_I1]),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: arch/sparc64/kernel/sys_sparc32.c:1504:
+        error = compat_do_execve(filename,
+        	compat_ptr((u32)regs->u_regs[base + UREG_I1]),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1219: FILE: arch/sparc64/kernel/sys_sparc32.c:1504:
+        ^Icompat_ptr((u32)regs->u_regs[base + UREG_I1]),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1220: FILE: arch/sparc64/kernel/sys_sparc32.c:1505:
+        ^Icompat_ptr((u32)regs->u_regs[base + UREG_I2]), regs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1220: FILE: arch/sparc64/kernel/sys_sparc32.c:1505:
+        ^Icompat_ptr((u32)regs->u_regs[base + UREG_I2]), regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: arch/sparc64/kernel/sys_sparc32.c:1505:
+        ^Icompat_ptr((u32)regs->u_regs[base + UREG_I2]), regs);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1309: FILE: arch/x86_64/ia32/sys_ia32.c:1232:
+	char * filename;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1313: FILE: arch/x86_64/ia32/sys_ia32.c:1236:
+^Iif (IS_ERR(filename)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1315: FILE: arch/x86_64/ia32/sys_ia32.c:1238:
+^Ierror = compat_do_execve(filename, argv, envp, &regs); $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "argv"
#1353: FILE: fs/compat.c:993:
+	if (argv != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#1362: FILE: fs/compat.c:1002:
+			if(++i > max)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1374: FILE: fs/compat.c:1014:
+static int compat_copy_strings(int argc, compat_uptr_t __user *argv,
+				struct linux_binprm *bprm)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1385: FILE: fs/compat.c:1025:
+		if (get_user(str, argv+argc) ||
 		                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1385: FILE: fs/compat.c:1025:
+		if (get_user(str, argv+argc) ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1386: FILE: fs/compat.c:1026:
+		if (get_user(str, argv+argc) ||
+			!(len = strnlen_user(compat_ptr(str), bprm->p))) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1406: FILE: fs/compat.c:1046:
+			i = pos/PAGE_SIZE;
 			       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1431: FILE: fs/compat.c:1071:
+					memset(kaddr+offset+len, 0,
 					            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1431: FILE: fs/compat.c:1071:
+					memset(kaddr+offset+len, 0,
 					                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1432: FILE: fs/compat.c:1072:
+					memset(kaddr+offset+len, 0,
+						PAGE_SIZE-offset-len);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1432: FILE: fs/compat.c:1072:
+						PAGE_SIZE-offset-len);
 						         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1432: FILE: fs/compat.c:1072:
+						PAGE_SIZE-offset-len);
 						                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1434: FILE: fs/compat.c:1074:
+			err = copy_from_user(kaddr+offset, compat_ptr(str),
 			                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1435: FILE: fs/compat.c:1075:
+			err = copy_from_user(kaddr+offset, compat_ptr(str),
+						bytes_to_copy);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1476: FILE: fs/compat.c:1116:
+int compat_do_execve(char * filename,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1477: FILE: fs/compat.c:1117:
+int compat_do_execve(char * filename,
+	compat_uptr_t __user *argv,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1479: FILE: fs/compat.c:1119:
+	struct pt_regs * regs)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1494: FILE: fs/compat.c:1134:
+	bprm.p = PAGE_SIZE*MAX_ARG_PAGES-sizeof(void *);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1494: FILE: fs/compat.c:1134:
+	bprm.p = PAGE_SIZE*MAX_ARG_PAGES-sizeof(void *);
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1495: FILE: fs/compat.c:1135:
+	memset(bprm.page, 0, MAX_ARG_PAGES*sizeof(bprm.page[0]));
 	                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1514: FILE: fs/compat.c:1154:
+	if ((retval = bprm.argc) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1518: FILE: fs/compat.c:1158:
+	if ((retval = bprm.envc) < 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1542: FILE: fs/compat.c:1182:
+	retval = search_binary_handler(&bprm,regs);
 	                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1554: FILE: fs/compat.c:1194:
+		struct page * page = bprm.page[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1555: FILE: fs/compat.c:1195:
+		struct page * page = bprm.page[i];
+		if (page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1581: FILE: include/linux/compat.h:126:
+int compat_do_execve(char * filename, compat_uptr_t __user *argv,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1582: FILE: include/linux/compat.h:127:
+^I        compat_uptr_t __user *envp, struct pt_regs * regs);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1582: FILE: include/linux/compat.h:127:
+int compat_do_execve(char * filename, compat_uptr_t __user *argv,
+	        compat_uptr_t __user *envp, struct pt_regs * regs);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1582: FILE: include/linux/compat.h:127:
+	        compat_uptr_t __user *envp, struct pt_regs * regs);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287853.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 10 warnings, 18 checks, 1497 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287853.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
