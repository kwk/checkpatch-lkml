WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
Adam J. Richter     __     ______________   4880 Stevens Creek Blvd, Suite 104

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: include/video/font.h:24:
+    struct module *module;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/video/font.h:25:
+    struct fbcon_font_desc *next;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/video/font.h:44:
+extern void fbcon_register_font(struct fbcon_font_desc *font);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/video/font.h:45:
+extern void fbcon_unregister_font(struct fbcon_font_desc *font);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'font' - possible side-effects?
#111: FILE: include/video/font.h:58:
+#define DECLARE_FONT_MODULE(font)			\
+	static int __init font_init(void) {		\
+		(font)->module = THIS_MODULE;		\
+		fbcon_register_font(font);		\
+		return 0;				\
+	}						\
+	static void __exit font_exit(void) {		\
+		fbcon_unregister_font(font);		\
+	}						\
+	module_init(font_init);				\
+	module_exit(font_exit);				\
 

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#111: FILE: include/video/font.h:58:
+#define DECLARE_FONT_MODULE(font)			\
+	static int __init font_init(void) {		\
+		(font)->module = THIS_MODULE;		\
+		fbcon_register_font(font);		\
+		return 0;				\
+	}						\
+	static void __exit font_exit(void) {		\
+		fbcon_unregister_font(font);		\
+	}						\
+	module_init(font_init);				\
+	module_exit(font_exit);				\
 

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#111: FILE: include/video/font.h:58:
+#define DECLARE_FONT_MODULE(font)			\
+	static int __init font_init(void) {		\
+		(font)->module = THIS_MODULE;		\
+		fbcon_register_font(font);		\
+		return 0;				\
+	}						\
+	static void __exit font_exit(void) {		\
+		fbcon_unregister_font(font);		\
+	}						\
+	module_init(font_init);				\
+	module_exit(font_exit);				\
 

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#112: FILE: include/video/font.h:59:
+	static int __init font_init(void) {		\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#117: FILE: include/video/font.h:64:
+	static void __exit font_exit(void) {		\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: drivers/video/Config.in:199:
+      fi^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#394: FILE: drivers/video/fonts.c:29:
+static struct fbcon_font_desc *fonts = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#445: FILE: drivers/video/fonts.c:46:
+	struct fbcon_font_desc **font_p;
+	down(&fonts_mutex);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: drivers/video/fonts.c:49:
+	for(font_p = &fonts; *font_p != font; font_p = &(*font_p)->next);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#449: FILE: drivers/video/fonts.c:49:
+	for(font_p = &fonts; *font_p != font; font_p = &(*font_p)->next);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#458: FILE: drivers/video/fonts.c:56:
+#if ^I!defined(CONFIG_FONT_8x8) && \$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#466: FILE: drivers/video/fonts.c:64:
+/* There definitely are cases where it is OK to initially have no fonts
+   defined.  The question is whether there are configurations where you

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#470: FILE: drivers/video/fonts.c:68:
+   the following #error line.  -Adam Richter 2001.08.19 */

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: drivers/video/fonts.c:77:
+	struct fbcon_font_desc *font;
+	for(font = fonts; font != NULL; font = font->next) {

ERROR:SPACING: space required before the open parenthesis '('
#479: FILE: drivers/video/fonts.c:77:
+	for(font = fonts; font != NULL; font = font->next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "font"
#479: FILE: drivers/video/fonts.c:77:
+	for(font = fonts; font != NULL; font = font->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#481: FILE: drivers/video/fonts.c:79:
+			if (font->module != NULL) {
+				__MOD_INC_USE_COUNT(font->module);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "font->module"
#481: FILE: drivers/video/fonts.c:79:
+			if (font->module != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#507: FILE: drivers/video/fonts.c:105:
+	if ((font = fbcon_find_existing_font(name)) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#510: FILE: drivers/video/fonts.c:108:
+	snprintf(module, sizeof(module),"font_%s", name);
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#511: FILE: drivers/video/fonts.c:109:
+	module[sizeof(module)-1] = '\0';
 	                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: drivers/video/fonts.c:131:
+    int c, cc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: drivers/video/fonts.c:136:
+    for(f = fonts; f != NULL; f = f->next) {$

ERROR:SPACING: space required before the open parenthesis '('
#530: FILE: drivers/video/fonts.c:136:
+    for(f = fonts; f != NULL; f = f->next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f"
#530: FILE: drivers/video/fonts.c:136:
+    for(f = fonts; f != NULL; f = f->next) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: drivers/video/fonts.c:155:
+    if (g != NULL && g->module != NULL) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#538: FILE: drivers/video/fonts.c:155:
+    if (g != NULL && g->module != NULL) {
+        __MOD_INC_USE_COUNT(g->module);
+    }

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "g"
#538: FILE: drivers/video/fonts.c:155:
+    if (g != NULL && g->module != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "g->module"
#538: FILE: drivers/video/fonts.c:155:
+    if (g != NULL && g->module != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: drivers/video/fonts.c:156:
+        __MOD_INC_USE_COUNT(g->module);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: drivers/video/fonts.c:156:
+        __MOD_INC_USE_COUNT(g->module);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: drivers/video/fonts.c:157:
+    }$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#547: FILE: drivers/video/fonts.c:164:
+	if (font->module != NULL) {
+		__MOD_DEC_USE_COUNT(font->module);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "font->module"
#547: FILE: drivers/video/fonts.c:164:
+	if (font->module != NULL) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#552: FILE: drivers/video/fonts.c:169:
+EXPORT_SYMBOL(fbcon_register_font);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#553: FILE: drivers/video/fonts.c:170:
+EXPORT_SYMBOL(fbcon_unregister_font);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518159.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 20 warnings, 10 checks, 419 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000518159.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
