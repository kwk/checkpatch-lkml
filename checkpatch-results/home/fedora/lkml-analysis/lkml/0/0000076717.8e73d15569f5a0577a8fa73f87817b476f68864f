CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#31: 
about smp_send_stop() being called with interrupts off.  This can happen
                                                        ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#33: 
if called from an interrupt handler.  To reproduce I added a sysrq handler
                                     ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
2.6.12-rc2 timeframe which addressed this issue for the x86_64 architecture.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#55: 
    Make arch/i386/kernel/smp.c functionally equivalent to 
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#57: 
    This allows for the case of calling smp_send_stop when interrupts are 
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#59: 
    in a few isolated cases.
^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#66: FILE: arch/i386/kernel/smp.c:559:
  * this function sends a 'generic call function' IPI to all other CPUs

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#86: FILE: arch/i386/kernel/smp.c:561:
+                               int nonatomic, int wait)
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#96: FILE: arch/i386/kernel/smp.c:562:
+               return;
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#116: FILE: arch/i386/kernel/smp.c:586:
+       if (!wait)
 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#116: FILE: arch/i386/kernel/smp.c:586:
+       if (!wait)
+               return;

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#117: FILE: arch/i386/kernel/smp.c:587:
+               return;
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#119: FILE: arch/i386/kernel/smp.c:589:
+       while (atomic_read(&data.finished) != cpus)
 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#119: FILE: arch/i386/kernel/smp.c:589:
+       while (atomic_read(&data.finished) != cpus)
+               cpu_relax();

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#120: FILE: arch/i386/kernel/smp.c:590:
+               cpu_relax();
 ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#123: FILE: arch/i386/kernel/smp.c:592:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/i386/kernel/smp.c:597:
+ * <wait> If true, wait (atomically) until function has completed on other $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#137: FILE: arch/i386/kernel/smp.c:605:
+int smp_call_function (void (*func) (void *info), void *info, int nonatomic,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#138: FILE: arch/i386/kernel/smp.c:606:
+                       int wait)
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: arch/i386/kernel/smp.c:606:
+int smp_call_function (void (*func) (void *info), void *info, int nonatomic,
+                       int wait)

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#140: FILE: arch/i386/kernel/smp.c:608:
+       spin_lock(&call_lock);
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#141: FILE: arch/i386/kernel/smp.c:609:
+       __smp_call_function(func,info,nonatomic,wait);
 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#141: FILE: arch/i386/kernel/smp.c:609:
+       __smp_call_function(func,info,nonatomic,wait);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#141: FILE: arch/i386/kernel/smp.c:609:
+       __smp_call_function(func,info,nonatomic,wait);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#141: FILE: arch/i386/kernel/smp.c:609:
+       __smp_call_function(func,info,nonatomic,wait);
                                               ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#142: FILE: arch/i386/kernel/smp.c:610:
+       spin_unlock(&call_lock);
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#151: FILE: arch/i386/kernel/smp.c:634:
+       int nolock = 0;
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#152: FILE: arch/i386/kernel/smp.c:635:
+       /* Don't deadlock on the call lock in panic */
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#153: FILE: arch/i386/kernel/smp.c:636:
+       if (!spin_trylock(&call_lock)) {
 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#153: FILE: arch/i386/kernel/smp.c:636:
+       if (!spin_trylock(&call_lock)) {
+               /* ignore locking because we have paniced anyways */

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#154: FILE: arch/i386/kernel/smp.c:637:
+               /* ignore locking because we have paniced anyways */
 ^

WARNING:TYPO_SPELLING: 'paniced' may be misspelled - perhaps 'panicked'?
#154: FILE: arch/i386/kernel/smp.c:637:
+               /* ignore locking because we have paniced anyways */
                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#155: FILE: arch/i386/kernel/smp.c:638:
+               nolock = 1;
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#156: FILE: arch/i386/kernel/smp.c:639:
+       }
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#157: FILE: arch/i386/kernel/smp.c:640:
+       __smp_call_function(stop_this_cpu, NULL, 0, 0);
 ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#158: FILE: arch/i386/kernel/smp.c:641:
+       if (!nolock)
 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#158: FILE: arch/i386/kernel/smp.c:641:
+       if (!nolock)
+               spin_unlock(&call_lock);

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#159: FILE: arch/i386/kernel/smp.c:642:
+               spin_unlock(&call_lock);
 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076717.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 7 warnings, 26 checks, 94 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000076717.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
