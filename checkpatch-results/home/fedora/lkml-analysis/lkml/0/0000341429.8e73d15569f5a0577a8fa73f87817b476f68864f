WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
> A while back I posted a patch that moved the EFI variable services driver (efivars) to a new drivers/efi directory.  As EFI driver are typically platform/architecturally independent, it seems like a good idea to collect them in a common place.  Pat suggested the efivars driver should be converted to use sysfs rather than proc....so here you go.  As such, this patch does several things:

WARNING:TYPO_SPELLING: 'sytems' may be misspelled - perhaps 'systems'?
#42: 
of the sytems? 
       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	           ChangeSet	1.1163  -> 1.1166 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	include/linux/kobject.h	1.23    -> 1.24   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#	      fs/sysfs/dir.c	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#	       lib/kobject.c	1.27    -> 1.28   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# 03/08/29	mochel@osdl.org	1.1164

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# [kobject] Support unlimited name lengths.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# Add ->k_name pointer which points to the name for a kobject. By default, this

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# points to ->name (the static name array). 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# Users of kobjects may use the helper function kobject_set_name() (and are 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# encouraged to do so in all cases). This function will determined whether or

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
# not the name is short enough to fit in ->name. If so, great. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
# Otherwise, a dyanamic string is allocated and the name is stored there. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# ->k_name will point to that, and will be freed when the kobject is released. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# kobject_set_name() may take a format string, like:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# 	kobject_set_name(kobj,"%s%d",base_name,id); 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# and will behave as expected (will put in ->name, unless it's too long, in 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# which case a new string will be allocated and it will be stored in there). 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# 03/08/29	mochel@osdl.org	1.1166

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
# [sysfs] Use kobject_name() when creating directories for kobjects.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#91: 
--- a/fs/sysfs/dir.c	Fri Aug 29 14:56:56 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: fs/sysfs/dir.c:74:
+	dentry = create_dir(kobj,parent,kobject_name(kobj));
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: fs/sysfs/dir.c:74:
+	dentry = create_dir(kobj,parent,kobject_name(kobj));
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: fs/sysfs/dir.c:173:
+	kobject_set_name(kobj,new_name);
 	                     ^

ERROR:POINTER_LOCATION: "foo			* bar" should be "foo			*bar"
#129: FILE: include/linux/kobject.h:27:
+	char			* k_name;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/kobject.h:37:
+extern int kobject_set_name(struct kobject *, const char *, ...)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#138: FILE: include/linux/kobject.h:37:
+extern int kobject_set_name(struct kobject *, const char *, ...)

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#138: FILE: include/linux/kobject.h:37:
+extern int kobject_set_name(struct kobject *, const char *, ...)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/linux/kobject.h:38:
+	__attribute__((format(printf,2,3)));
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/linux/kobject.h:38:
+	__attribute__((format(printf,2,3)));
 	                              ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2,3) over __attribute__((format(printf,2,3)))
#139: FILE: include/linux/kobject.h:38:
+	__attribute__((format(printf,2,3)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: include/linux/kobject.h:40:
+static inline char * kobject_name(struct kobject * kobj)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: include/linux/kobject.h:40:
+static inline char * kobject_name(struct kobject * kobj)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#178: FILE: lib/kobject.c:94:
+		strncpy (path + length, kobject_name(parent), cur);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: lib/kobject.c:262:
+^I^I kobject_name(kobj), parent ? kobject_name(parent) : "<NULL>", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: lib/kobject.c:309:
+			       kobject_name(kobj),error);
 			                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#210: FILE: lib/kobject.c:317:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: lib/kobject.c:321:
+ *^I@name:^Iname. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: lib/kobject.c:324:
+ *^Istring that @kobj->k_name points to. Otherwise, use the static $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: lib/kobject.c:328:
+int kobject_set_name(struct kobject * kobj, const char * fmt, ...)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: lib/kobject.c:328:
+int kobject_set_name(struct kobject * kobj, const char * fmt, ...)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#228: FILE: lib/kobject.c:335:
+	va_start(args,fmt);
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: lib/kobject.c:336:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: lib/kobject.c:337:
+^I * First, try the static array $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: lib/kobject.c:339:
+	need = vsnprintf(kobj->name,limit,fmt,args);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: lib/kobject.c:339:
+	need = vsnprintf(kobj->name,limit,fmt,args);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#232: FILE: lib/kobject.c:339:
+	need = vsnprintf(kobj->name,limit,fmt,args);
 	                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: lib/kobject.c:340:
+^Iif (need < limit) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: lib/kobject.c:340:
+	if (need < limit) 
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#235: FILE: lib/kobject.c:342:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: lib/kobject.c:343:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: lib/kobject.c:344:
+^I^I * Need more space? Allocate it and try again $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: lib/kobject.c:346:
+		kobj->k_name = kmalloc(need,GFP_KERNEL);
 		                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#242: FILE: lib/kobject.c:349:
+			goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: lib/kobject.c:352:
+		need = vsnprintf(kobj->k_name,limit,fmt,args);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: lib/kobject.c:352:
+		need = vsnprintf(kobj->k_name,limit,fmt,args);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: lib/kobject.c:352:
+		need = vsnprintf(kobj->k_name,limit,fmt,args);
 		                                       ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#258: FILE: lib/kobject.c:365:
+EXPORT_SYMBOL(kobject_set_name);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: lib/kobject.c:367:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: lib/kobject.c:415:
+	pr_debug("kobject %s: unregistering\n",kobject_name(kobj));
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: lib/kobject.c:447:
+	pr_debug("kobject %s: cleaning up\n",kobject_name(kobj));
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: lib/kobject.c:546:
+		if (!strcmp(kobject_name(k),name)) {
 		                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 42 warnings, 6 checks, 185 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
