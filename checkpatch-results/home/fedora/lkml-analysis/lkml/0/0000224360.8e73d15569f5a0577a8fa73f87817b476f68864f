WARNING:REPEATED_WORD: Possible repeated word: 'and'
#50: 
sysfs_dirent.dentry and and the new fields in sysfs_dir.

WARNING:TYPO_SPELLING: 'corrrected' may be misspelled - perhaps 'corrected'?
#79: 
corrrected later by boot scripts, long after most of the main
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'my'
#94: 
	b) I've left my my ASSERT_SEMAPHORE_HELD macros in, which are

WARNING:TYPO_SPELLING: 'evalutate' may be misspelled - perhaps 'evaluate'?
#108: 
	   it must also be likely that "x" will evalutate to zero
	                                        ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: fs/sysfs/bin.c:161:
+	BUG_ON(!kobj);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: fs/sysfs/bin.c:162:
+	BUG_ON(!kobj->sysfs_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#156: FILE: fs/sysfs/bin.c:163:
+	BUG_ON(!attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: fs/sysfs/dir.c:18:
+	struct sysfs_dir * parent_sd;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#188: FILE: fs/sysfs/dir.c:26:
+		/* Because we down the semaphore here, calls to dput()
+		   that might drop a reference count to zero must by

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: fs/sysfs/dir.c:27:
+		   done when parent_sd->s_child_sem is not held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#203: FILE: fs/sysfs/dir.c:42:
+/* sysfs_dirent_dget is the *only* way we get a file system
+   abstraction from a kobject abstraction. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#203: FILE: fs/sysfs/dir.c:42:
+   abstraction from a kobject abstraction. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: fs/sysfs/dir.c:55:
+	/* dentry can be non-NULL and yet dentry->d_count can be zero if
+	   sysfs_d_iput is being called on the dentry.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry"
#229: FILE: fs/sysfs/dir.c:68:
+	if (dentry != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#241: FILE: fs/sysfs/dir.c:80:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#260: FILE: fs/sysfs/dir.c:99:
+		sdir->s_mtime = sdir->s_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#270: FILE: fs/sysfs/dir.c:117:
+struct sysfs_dirent *sysfs_make_dirent(struct sysfs_dir * parent_sd,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: fs/sysfs/dir.c:118:
+				       void * element, umode_t mode, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: fs/sysfs/dir.c:120:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: fs/sysfs/dir.c:169:
+		      const char * n, struct sysfs_dir ** sdir_out, int type)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#330: FILE: fs/sysfs/dir.c:169:
+		      const char * n, struct sysfs_dir ** sdir_out, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: fs/sysfs/dir.c:171:
+	struct sysfs_dir * parent_sd;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#336: FILE: fs/sysfs/dir.c:173:
+	const umode_t mode = S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO;
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#336: FILE: fs/sysfs/dir.c:173:
+	const umode_t mode = S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd"
#345: FILE: fs/sysfs/dir.c:182:
+	if (sd != NULL) {

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#380: FILE: fs/sysfs/dir.c:196:
+			struct sysfs_dir ** sdir_out)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#383: FILE: fs/sysfs/dir.c:198:
+	return create_dir(k, (void*)grp, grp->name, sdir_out,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: fs/sysfs/dir.c:222:
+static int sysfs_attach_dir(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: fs/sysfs/dir.c:222:
+static int sysfs_attach_dir(struct sysfs_dirent * sd, struct dentry * dentry)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: fs/sysfs/dir.c:242:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#470: FILE: fs/sysfs/dir.c:301:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#484: FILE: fs/sysfs/dir.c:314:
+				    struct nameidata *nd)
 				                      ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#493: FILE: fs/sysfs/dir.c:320:
+	BUG_ON(dentry->d_parent->d_inode != dir);

ERROR:SPACING: space required before the open parenthesis '('
#507: FILE: fs/sysfs/dir.c:328:
+		switch(sd->s_type) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#553: FILE: fs/sysfs/dir.c:373:
+static void remove_dir(struct kobject *parent_kobj, struct sysfs_dir * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#567: FILE: fs/sysfs/dir.c:378:
+	struct dentry * d;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#589: FILE: fs/sysfs/dir.c:397:
+void sysfs_remove_subdir(struct kobject *parent, struct sysfs_dir * d)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: fs/sysfs/dir.c:468:
+^Idown(&parent->d_inode->i_sem);^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#709: FILE: fs/sysfs/dir.c:498:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(file->f_dentry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#711: FILE: fs/sysfs/dir.c:500:
+	BUG_ON(file->f_dentry->d_inode != inode);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#728: FILE: fs/sysfs/dir.c:514:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#736: FILE: fs/sysfs/dir.c:521:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(file->f_dentry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#780: FILE: fs/sysfs/dir.c:605:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(dentry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#814: FILE: fs/sysfs/file.c:358:
+int sysfs_add_file(struct sysfs_dir * parent_sd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: fs/sysfs/file.c:359:
+int sysfs_add_file(struct sysfs_dir * parent_sd,
+		const struct attribute * attr, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#815: FILE: fs/sysfs/file.c:359:
+		const struct attribute * attr, int type)

CHECK:SPACING: No space is necessary after a cast
#825: FILE: fs/sysfs/file.c:365:
+	if (sysfs_make_dirent(parent_sd, (void *) attr, mode, type) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sysfs_make_dirent"
#825: FILE: fs/sysfs/file.c:365:
+	if (sysfs_make_dirent(parent_sd, (void *) attr, mode, type) == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#838: FILE: fs/sysfs/file.c:381:
+	BUG_ON(!kobj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#839: FILE: fs/sysfs/file.c:382:
+	BUG_ON(!kobj->sysfs_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#840: FILE: fs/sysfs/file.c:383:
+	BUG_ON(!attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#854: FILE: fs/sysfs/file.c:401:
+	struct dentry * victim = NULL;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#870: FILE: fs/sysfs/file.c:414:
+#if 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#905: FILE: fs/sysfs/file.c:446:
+	sysfs_hash_and_remove(kobj->sysfs_dir,attr->name);
 	                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#917: FILE: fs/sysfs/group.c:18:
+static void remove_files(struct sysfs_dir * dir, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#917: FILE: fs/sysfs/group.c:18:
+static void remove_files(struct sysfs_dir * dir, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#926: FILE: fs/sysfs/group.c:27:
+static int create_files(struct sysfs_dir * dir,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#935: FILE: fs/sysfs/group.c:45:
+	struct sysfs_dir * dir;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#939: FILE: fs/sysfs/group.c:48:
+	BUG_ON(!kobj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#940: FILE: fs/sysfs/group.c:49:
+	BUG_ON(!kobj->sysfs_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#968: FILE: fs/sysfs/group.c:73:
+	BUG_ON(group_ent == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!group_ent"
#968: FILE: fs/sysfs/group.c:73:
+	BUG_ON(group_ent == NULL);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#976: FILE: fs/sysfs/group.c:80:
+			const struct attribute_group * group)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1032: FILE: fs/sysfs/inode.c:80:
+struct sysfs_dirent * sysfs_find_element(struct sysfs_dir *parent_sd,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: fs/sysfs/inode.c:92:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1064: FILE: fs/sysfs/inode.c:152:
+void sysfs_drop_dentry(struct dentry * dentry)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1082: FILE: fs/sysfs/inode.c:159:
+	if (!(d_unhashed(dentry) && dentry->d_inode)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1087: FILE: fs/sysfs/inode.c:164:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1099: FILE: fs/sysfs/inode.c:175:
+ ^Ilist_del_init(&sd->s_sibling);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1099: FILE: fs/sysfs/inode.c:175:
+ ^Ilist_del_init(&sd->s_sibling);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: fs/sysfs/inode.c:175:
+ ^Ilist_del_init(&sd->s_sibling);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1103: FILE: fs/sysfs/inode.c:179:
+void sysfs_hash_and_remove(struct sysfs_dir *parent_sd, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1197: FILE: fs/sysfs/symlink.c:47:
+			  char * name,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1198: FILE: fs/sysfs/symlink.c:48:
+			  struct kobject * target)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1217: FILE: fs/sysfs/symlink.c:66:
+	if (sysfs_make_dirent(parent_sd, sl, S_IFLNK|S_IRWXUGO,
 	                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1217: FILE: fs/sysfs/symlink.c:66:
+	if (sysfs_make_dirent(parent_sd, sl, S_IFLNK|S_IRWXUGO,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1235: FILE: fs/sysfs/symlink.c:92:
+	BUG_ON(!kobj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1236: FILE: fs/sysfs/symlink.c:93:
+	BUG_ON(!name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1244: FILE: fs/sysfs/symlink.c:97:
+	BUG_ON(!sdir);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1274: FILE: fs/sysfs/sysfs.h:12:
+#define SYSFS_NOT_PINNED	(SYSFS_DIR | SYSFS_KOBJ_ATTR | SYSFS_KOBJ_BIN_ATTR | SYSFS_ATTR_GROUP | SYSFS_KOBJ_LINK)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1283: FILE: fs/sysfs/sysfs.h:23:
+/* Notes on synchronization.
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1287: FILE: fs/sysfs/sysfs.h:27:
+   ^I1. sysfs_dir.s_children in the directory$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1287: FILE: fs/sysfs/sysfs.h:27:
+   ^I1. sysfs_dir.s_children in the directory$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1288: FILE: fs/sysfs/sysfs.h:28:
+   ^I2. sysfs_dir.s_{nlink,mtime,ctime} in the directory$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1288: FILE: fs/sysfs/sysfs.h:28:
+   ^I2. sysfs_dir.s_{nlink,mtime,ctime} in the directory$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1289: FILE: fs/sysfs/sysfs.h:29:
+   ^I3. sysfs_dirent.s_sibling in all children$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1289: FILE: fs/sysfs/sysfs.h:29:
+   ^I3. sysfs_dirent.s_sibling in all children$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1299: FILE: fs/sysfs/sysfs.h:39:
+   ^Idown(&sysfs_dir->s_child_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1299: FILE: fs/sysfs/sysfs.h:39:
+   ^Idown(&sysfs_dir->s_child_sem);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1309: FILE: fs/sysfs/sysfs.h:49:
+^I//...do something useful... $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1330: FILE: fs/sysfs/sysfs.h:70:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1333: FILE: fs/sysfs/sysfs.h:73:
+   ^IReaders: sysfs_readdir, sysfs_put.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1333: FILE: fs/sysfs/sysfs.h:73:
+   ^IReaders: sysfs_readdir, sysfs_put.$

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#1336: FILE: fs/sysfs/sysfs.h:76:
+   to pass accurate inode numbers for nodes that happen to to be in

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1367: FILE: fs/sysfs/sysfs.h:105:
+struct sysfs_dirent *sysfs_make_dirent(struct sysfs_dir * parent_sd,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1368: FILE: fs/sysfs/sysfs.h:106:
+				       void * element, umode_t mode, int type);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1373: FILE: fs/sysfs/sysfs.h:109:
+extern struct sysfs_dirent * sysfs_find_element(struct sysfs_dir *parent_sd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1373: FILE: fs/sysfs/sysfs.h:109:
+extern struct sysfs_dirent * sysfs_find_element(struct sysfs_dir *parent_sd,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1376: FILE: fs/sysfs/sysfs.h:112:
+extern struct sysfs_dirent *sysfs_find_by_name(struct sysfs_dir *parent_sd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1381: FILE: fs/sysfs/sysfs.h:115:
+extern int sysfs_add_file(struct sysfs_dir *, const struct attribute *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dir *' should also have an identifier name
#1381: FILE: fs/sysfs/sysfs.h:115:
+extern int sysfs_add_file(struct sysfs_dir *, const struct attribute *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#1381: FILE: fs/sysfs/sysfs.h:115:
+extern int sysfs_add_file(struct sysfs_dir *, const struct attribute *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1381: FILE: fs/sysfs/sysfs.h:115:
+extern int sysfs_add_file(struct sysfs_dir *, const struct attribute *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1382: FILE: fs/sysfs/sysfs.h:116:
+extern void unhook_sysfs_dirent(struct sysfs_dir *parent_sd,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1384: FILE: fs/sysfs/sysfs.h:118:
+extern void sysfs_hash_and_remove(struct sysfs_dir *parent, const char * name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1384: FILE: fs/sysfs/sysfs.h:118:
+extern void sysfs_hash_and_remove(struct sysfs_dir *parent, const char * name);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1386: FILE: fs/sysfs/sysfs.h:120:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct sysfs_dir **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1386: FILE: fs/sysfs/sysfs.h:120:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct sysfs_dir **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#1386: FILE: fs/sysfs/sysfs.h:120:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct sysfs_dir **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute_group *' should also have an identifier name
#1386: FILE: fs/sysfs/sysfs.h:120:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct sysfs_dir **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dir **' should also have an identifier name
#1386: FILE: fs/sysfs/sysfs.h:120:
+extern int sysfs_create_subdir(struct kobject *, const struct attribute_group *, struct sysfs_dir **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1387: FILE: fs/sysfs/sysfs.h:121:
+extern void sysfs_remove_subdir(struct kobject *parent,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1388: FILE: fs/sysfs/sysfs.h:122:
+				struct sysfs_dir * d);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1392: FILE: fs/sysfs/sysfs.h:125:
+void sysfs_drop_dentry(struct dentry * dentry);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1411: FILE: fs/sysfs/sysfs.h:194:
+# define ASSERT_SEMAPHORE_HELD(sem) ^IBUG_ON(down_trylock(sem) == 0)$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1411: FILE: fs/sysfs/sysfs.h:194:
+# define ASSERT_SEMAPHORE_HELD(sem) 	BUG_ON(down_trylock(sem) == 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1413: FILE: fs/sysfs/sysfs.h:196:
+# define ASSERT_SEMAPHORE_HELD(sem) ^Ido { } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#1413: FILE: fs/sysfs/sysfs.h:196:
+# define ASSERT_SEMAPHORE_HELD(sem) 	do { } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 47 warnings, 21 checks, 1204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
