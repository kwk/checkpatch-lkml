WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -ruN 2.6.5-rc1-bk1/drivers/char/Makefile 2.6.5-rc1-bk1.viotape/drivers/char/Makefile

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: drivers/char/viotape.c:1:
+/* -*- linux-c -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#59: FILE: drivers/char/viotape.c:2:
+ *  drivers/char/viotape.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: drivers/char/viotape.c:12:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: drivers/char/viotape.c:19:
+ * WITHOUT ANY WARRANTY; without even the implied warranty of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: drivers/char/viotape.c:21:
+ * General Public License for more details.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: drivers/char/viotape.c:23:
+ * You should have received a copy of the GNU General Public License $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#81: FILE: drivers/char/viotape.c:24:
+ * along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#82: FILE: drivers/char/viotape.c:25:
+ * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: drivers/char/viotape.c:27:
+ * This routine provides access to tape drives owned and managed by an OS/400 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: drivers/char/viotape.c:30:
+ * All tape operations are performed by sending messages back and forth to $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#108: FILE: drivers/char/viotape.c:51:
+#include <asm/uaccess.h>

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent>
#153: FILE: drivers/char/viotape.c:96:
+	struct HvLpEvent event;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <viotape_InvalidRange>
#194: FILE: drivers/char/viotape.c:137:
+	viotape_InvalidRange = 0x0601,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_InvalidToken>
#195: FILE: drivers/char/viotape.c:138:
+	viotape_InvalidToken = 0x0602,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_DMAError>
#196: FILE: drivers/char/viotape.c:139:
+	viotape_DMAError = 0x0603,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_UseError>
#197: FILE: drivers/char/viotape.c:140:
+	viotape_UseError = 0x0604,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_ReleaseError>
#198: FILE: drivers/char/viotape.c:141:
+	viotape_ReleaseError = 0x0605,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_InvalidTape>
#199: FILE: drivers/char/viotape.c:142:
+	viotape_InvalidTape = 0x0606,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_InvalidOp>
#200: FILE: drivers/char/viotape.c:143:
+	viotape_InvalidOp = 0x0607,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_TapeErr>
#201: FILE: drivers/char/viotape.c:144:
+	viotape_TapeErr = 0x0608,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_AllocTimedOut>
#203: FILE: drivers/char/viotape.c:146:
+	viotape_AllocTimedOut = 0x0640,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_BOTEnc>
#204: FILE: drivers/char/viotape.c:147:
+	viotape_BOTEnc = 0x0641,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_BlankTape>
#205: FILE: drivers/char/viotape.c:148:
+	viotape_BlankTape = 0x0642,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_BufferEmpty>
#206: FILE: drivers/char/viotape.c:149:
+	viotape_BufferEmpty = 0x0643,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_CleanCartFound>
#207: FILE: drivers/char/viotape.c:150:
+	viotape_CleanCartFound = 0x0644,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_CmdNotAllowed>
#208: FILE: drivers/char/viotape.c:151:
+	viotape_CmdNotAllowed = 0x0645,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_CmdNotSupported>
#209: FILE: drivers/char/viotape.c:152:
+	viotape_CmdNotSupported = 0x0646,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_DataCheck>
#210: FILE: drivers/char/viotape.c:153:
+	viotape_DataCheck = 0x0647,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_DecompressErr>
#211: FILE: drivers/char/viotape.c:154:
+	viotape_DecompressErr = 0x0648,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_DeviceTimeout>
#212: FILE: drivers/char/viotape.c:155:
+	viotape_DeviceTimeout = 0x0649,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_DeviceUnavail>
#213: FILE: drivers/char/viotape.c:156:
+	viotape_DeviceUnavail = 0x064a,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_DeviceBusy>
#214: FILE: drivers/char/viotape.c:157:
+	viotape_DeviceBusy = 0x064b,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_EndOfMedia>
#215: FILE: drivers/char/viotape.c:158:
+	viotape_EndOfMedia = 0x064c,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_EndOfTape>
#216: FILE: drivers/char/viotape.c:159:
+	viotape_EndOfTape = 0x064d,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_EquipCheck>
#217: FILE: drivers/char/viotape.c:160:
+	viotape_EquipCheck = 0x064e,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_InsufficientRs>
#218: FILE: drivers/char/viotape.c:161:
+	viotape_InsufficientRs = 0x064f,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_InvalidLogBlk>
#219: FILE: drivers/char/viotape.c:162:
+	viotape_InvalidLogBlk = 0x0650,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_LengthError>
#220: FILE: drivers/char/viotape.c:163:
+	viotape_LengthError = 0x0651,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_LibDoorOpen>
#221: FILE: drivers/char/viotape.c:164:
+	viotape_LibDoorOpen = 0x0652,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_LoadFailure>
#222: FILE: drivers/char/viotape.c:165:
+	viotape_LoadFailure = 0x0653,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_NotCapable>
#223: FILE: drivers/char/viotape.c:166:
+	viotape_NotCapable = 0x0654,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_NotOperational>
#224: FILE: drivers/char/viotape.c:167:
+	viotape_NotOperational = 0x0655,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_NotReady>
#225: FILE: drivers/char/viotape.c:168:
+	viotape_NotReady = 0x0656,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_OpCancelled>
#226: FILE: drivers/char/viotape.c:169:
+	viotape_OpCancelled = 0x0657,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_PhyLinkErr>
#227: FILE: drivers/char/viotape.c:170:
+	viotape_PhyLinkErr = 0x0658,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_RdyNotBOT>
#228: FILE: drivers/char/viotape.c:171:
+	viotape_RdyNotBOT = 0x0659,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_TapeMark>
#229: FILE: drivers/char/viotape.c:172:
+	viotape_TapeMark = 0x065a,

CHECK:CAMELCASE: Avoid CamelCase: <viotape_WriteProt>
#230: FILE: drivers/char/viotape.c:173:
+	viotape_WriteProt = 0x065b

CHECK:CAMELCASE: Avoid CamelCase: <reqSem>
#307: FILE: drivers/char/viotape.c:250:
+static struct semaphore reqSem;

CHECK:CAMELCASE: Avoid CamelCase: <toFree>
#342: FILE: drivers/char/viotape.c:285:
+		struct op_struct *toFree = op_struct_list;

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: drivers/char/viotape.c:286:
+		struct op_struct *toFree = op_struct_list;
+		op_struct_list = op_struct_list->next;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#405: FILE: drivers/char/viotape.c:348:
+	printk(VIOTAPE_KERN_WARN "error(%s) 0x%04x on Device %d (%-10s): %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: drivers/char/viotape.c:349:
+	printk(VIOTAPE_KERN_WARN "error(%s) 0x%04x on Device %d (%-10s): %s\n",
+			operation, tape_rc, tapeno,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Rc>
#414: FILE: drivers/char/viotape.c:357:
+	HvLpEvent_Rc hvrc;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#419: FILE: drivers/char/viotape.c:362:
+	if (op == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_vio_dev>
#422: FILE: drivers/char/viotape.c:365:
+	viotape_unitinfo = dma_alloc_coherent(iSeries_vio_dev, len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: drivers/char/viotape.c:366:
+	viotape_unitinfo = dma_alloc_coherent(iSeries_vio_dev, len,
+		&viotape_unitinfo_token, GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!viotape_unitinfo"
#424: FILE: drivers/char/viotape.c:367:
+	if (viotape_unitinfo == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <HvCallEvent_signalLpEventFast>
#431: FILE: drivers/char/viotape.c:374:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,

CHECK:CAMELCASE: Avoid CamelCase: <viopath_hostLp>
#431: FILE: drivers/char/viotape.c:374:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: drivers/char/viotape.c:375:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Type_VirtualIo>
#432: FILE: drivers/char/viotape.c:375:
+			HvLpEvent_Type_VirtualIo,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_AckInd_DoAck>
#434: FILE: drivers/char/viotape.c:377:
+			HvLpEvent_AckInd_DoAck, HvLpEvent_AckType_ImmediateAck,

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_AckType_ImmediateAck>
#434: FILE: drivers/char/viotape.c:377:
+			HvLpEvent_AckInd_DoAck, HvLpEvent_AckType_ImmediateAck,

CHECK:SPACING: No space is necessary after a cast
#437: FILE: drivers/char/viotape.c:380:
+			(u64) (unsigned long) op, VIOVERSION << 16,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <HvLpEvent_Rc_Good>
#439: FILE: drivers/char/viotape.c:382:
+	if (hvrc != HvLpEvent_Rc_Good) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: drivers/char/viotape.c:383:
+		printk(VIOTAPE_KERN_WARN "hv error on op %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: drivers/char/viotape.c:384:
+		printk(VIOTAPE_KERN_WARN "hv error on op %d\n",
+				(int)hvrc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#457: FILE: drivers/char/viotape.c:400:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/char/viotape.c:403:
+static ssize_t viotap_write(struct file *file, const char *buf,
+		size_t count, loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#460: FILE: drivers/char/viotape.c:403:
+		size_t count, loff_t * ppos)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#469: FILE: drivers/char/viotape.c:412:
+	if (op == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: drivers/char/viotape.c:420:
+^I * we are non-blocking, make sure we don't block on the $

CHECK:BRACES: braces {} should be used on all arms of this statement
#480: FILE: drivers/char/viotape.c:423:
+	if (noblock) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#485: FILE: drivers/char/viotape.c:428:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: drivers/char/viotape.c:433:
+	op->buffer = dma_alloc_coherent(iSeries_vio_dev, count, &op->dmaaddr,
+			GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op->buffer"
#492: FILE: drivers/char/viotape.c:435:
+	if (op->buffer == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#493: FILE: drivers/char/viotape.c:436:
+		printk(VIOTAPE_KERN_WARN

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: drivers/char/viotape.c:445:
+		printk(VIOTAPE_KERN_WARN "tape: error on copy from user\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/char/viotape.c:455:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: drivers/char/viotape.c:463:
+		printk(VIOTAPE_KERN_WARN "hv error on op %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/char/viotape.c:464:
+		printk(VIOTAPE_KERN_WARN "hv error on op %d\n",
+				(int)hvrc);

CHECK:BRACES: braces {} should be used on all arms of this statement
#531: FILE: drivers/char/viotape.c:474:
+	if (op->rc)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#533: FILE: drivers/char/viotape.c:476:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: drivers/char/viotape.c:492:
+static ssize_t viotap_read(struct file *file, char *buf, size_t count,
+		loff_t *ptr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#558: FILE: drivers/char/viotape.c:501:
+	if (op == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: drivers/char/viotape.c:509:
+^I * we are non-blocking, make sure we don't block on the $

CHECK:BRACES: braces {} should be used on all arms of this statement
#569: FILE: drivers/char/viotape.c:512:
+	if (noblock) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#574: FILE: drivers/char/viotape.c:517:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/char/viotape.c:524:
+	op->buffer = dma_alloc_coherent(iSeries_vio_dev, count, &op->dmaaddr,
+			GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op->buffer"
#582: FILE: drivers/char/viotape.c:525:
+	if (op->buffer == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: drivers/char/viotape.c:534:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#599: FILE: drivers/char/viotape.c:542:
+		printk(VIOTAPE_KERN_WARN "tape hv error on op %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: drivers/char/viotape.c:543:
+		printk(VIOTAPE_KERN_WARN "tape hv error on op %d\n",
+				(int)hvrc);

CHECK:BRACES: braces {} should be used on all arms of this statement
#607: FILE: drivers/char/viotape.c:550:
+	if (op->rc)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#609: FILE: drivers/char/viotape.c:552:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#612: FILE: drivers/char/viotape.c:555:
+			printk(VIOTAPE_KERN_WARN "error on copy_to_user\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: drivers/char/viotape.c:571:
+static int viotap_ioctl(struct inode *inode, struct file *file,
+		unsigned int cmd, unsigned long arg)

CHECK:CAMELCASE: Avoid CamelCase: <myOp>
#634: FILE: drivers/char/viotape.c:577:
+	u32 myOp;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#637: FILE: drivers/char/viotape.c:580:
+	if (op == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#653: FILE: drivers/char/viotape.c:596:
+		if (inode == NULL)

CHECK:SPACING: No space is necessary after a cast
#654: FILE: drivers/char/viotape.c:597:
+			memcpy(&mtc, (void *) arg, sizeof(struct mtop));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#710: FILE: drivers/char/viotape.c:653:
+			printk(VIOTAPE_KERN_WARN "MTIOCTOP called "

WARNING:SPLIT_STRING: quoted string split across lines
#711: FILE: drivers/char/viotape.c:654:
+			printk(VIOTAPE_KERN_WARN "MTIOCTOP called "
+					"with invalid op 0x%x\n", mtc.mt_op);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: drivers/char/viotape.c:675:
+		hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+				HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#743: FILE: drivers/char/viotape.c:686:
+			printk(VIOTAPE_KERN_WARN "hv error on op %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: drivers/char/viotape.c:687:
+			printk(VIOTAPE_KERN_WARN "hv error on op %d\n",
+					(int)hvrc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#755: FILE: drivers/char/viotape.c:698:
+		hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+				HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#764: FILE: drivers/char/viotape.c:707:
+			printk(VIOTAPE_KERN_WARN "hv error on op %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: drivers/char/viotape.c:708:
+			printk(VIOTAPE_KERN_WARN "hv error on op %d\n",
+					(int)hvrc);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#775: FILE: drivers/char/viotape.c:718:
+		if ((ret == 0) && copy_to_user((void *)arg,
+					&viomtget[devi.devno],
+					sizeof(viomtget[0])))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: drivers/char/viotape.c:719:
+		if ((ret == 0) && copy_to_user((void *)arg,
+					&viomtget[devi.devno],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#781: FILE: drivers/char/viotape.c:724:
+		printk(VIOTAPE_KERN_WARN "Got an (unsupported) MTIOCPOS\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#784: FILE: drivers/char/viotape.c:727:
+		printk(VIOTAPE_KERN_WARN "got an unsupported ioctl 0x%0x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: drivers/char/viotape.c:728:
+		printk(VIOTAPE_KERN_WARN "got an unsupported ioctl 0x%0x\n",
+				cmd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#802: FILE: drivers/char/viotape.c:745:
+	if (op == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devi.devno >= viotape_numdev'
#808: FILE: drivers/char/viotape.c:751:
+	if ((devi.devno >= viotape_numdev) || (devi.mode)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devi.mode'
#808: FILE: drivers/char/viotape.c:751:
+	if ((devi.devno >= viotape_numdev) || (devi.mode)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/char/viotape.c:759:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#824: FILE: drivers/char/viotape.c:767:
+		printk(VIOTAPE_KERN_WARN "bad rc on signalLpEvent %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: drivers/char/viotape.c:768:
+		printk(VIOTAPE_KERN_WARN "bad rc on signalLpEvent %d\n",
+				(int) hvrc);

CHECK:SPACING: No space is necessary after a cast
#825: FILE: drivers/char/viotape.c:768:
+				(int) hvrc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#838: FILE: drivers/char/viotape.c:781:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#846: FILE: drivers/char/viotape.c:789:
+	if (op == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: drivers/char/viotape.c:804:
+		hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+				HvLpEvent_Type_VirtualIo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: drivers/char/viotape.c:819:
+	hvrc = HvCallEvent_signalLpEventFast(viopath_hostLp,
+			HvLpEvent_Type_VirtualIo,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#884: FILE: drivers/char/viotape.c:827:
+		printk(VIOTAPE_KERN_WARN "bad rc on signalLpEvent %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: drivers/char/viotape.c:828:
+		printk(VIOTAPE_KERN_WARN "bad rc on signalLpEvent %d\n",
+				(int) hvrc);

CHECK:SPACING: No space is necessary after a cast
#885: FILE: drivers/char/viotape.c:828:
+				(int) hvrc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#893: FILE: drivers/char/viotape.c:836:
+		printk(VIOTAPE_KERN_WARN "close failed\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#900: FILE: drivers/char/viotape.c:843:
+struct file_operations viotap_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#901: FILE: drivers/char/viotape.c:844:
+	owner: THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#902: FILE: drivers/char/viotape.c:845:
+	read: viotap_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#902: FILE: drivers/char/viotape.c:845:
+	read: viotap_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#903: FILE: drivers/char/viotape.c:846:
+	write: viotap_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#903: FILE: drivers/char/viotape.c:846:
+	write: viotap_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#904: FILE: drivers/char/viotape.c:847:
+	ioctl: viotap_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#904: FILE: drivers/char/viotape.c:847:
+	ioctl: viotap_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#905: FILE: drivers/char/viotape.c:848:
+	open: viotap_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#905: FILE: drivers/char/viotape.c:848:
+	open: viotap_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#906: FILE: drivers/char/viotape.c:849:
+	release: viotap_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#906: FILE: drivers/char/viotape.c:849:
+	release: viotap_release,

CHECK:CAMELCASE: Avoid CamelCase: <vioHandleTapeEvent>
#910: FILE: drivers/char/viotape.c:853:
+static void vioHandleTapeEvent(struct HvLpEvent *event)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!event"
#916: FILE: drivers/char/viotape.c:859:
+	if (event == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#918: FILE: drivers/char/viotape.c:861:
+		if (!viopath_isactive(viopath_hostLp)) {
+			/* TODO! Clean up */
+		}

CHECK:CAMELCASE: Avoid CamelCase: <xSubtype>
#924: FILE: drivers/char/viotape.c:867:
+	tapeminor = event->xSubtype & VIOMINOR_SUBTYPE_MASK;

CHECK:CAMELCASE: Avoid CamelCase: <xCorrelationToken>
#925: FILE: drivers/char/viotape.c:868:
+	op = (struct op_struct *)event->xCorrelationToken;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: drivers/char/viotape.c:884:
+			dma_free_coherent(iSeries_vio_dev, op->count,
+					op->buffer, op->dmaaddr);

WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#962: FILE: drivers/char/viotape.c:905:
+		printk(VIOTAPE_KERN_WARN "wierd ack\n");
 		                          ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#962: FILE: drivers/char/viotape.c:905:
+		printk(VIOTAPE_KERN_WARN "wierd ack\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#966: FILE: drivers/char/viotape.c:909:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#973: FILE: drivers/char/viotape.c:916:
+	printk(VIOTAPE_KERN_INFO "driver version " VIOTAPE_VERSION "\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#976: FILE: drivers/char/viotape.c:919:
+	if ((ret = add_op_structs(VIOTAPE_MAXREQ)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#977: FILE: drivers/char/viotape.c:920:
+		printk(VIOTAPE_KERN_WARN "couldn't allocate op structs\n");

CHECK:CAMELCASE: Avoid CamelCase: <HvLpIndexInvalid>
#984: FILE: drivers/char/viotape.c:927:
+	if (viopath_hostLp == HvLpIndexInvalid) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#992: FILE: drivers/char/viotape.c:935:
+	printk(VIOTAPE_KERN_INFO "init - open path to hosting (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: drivers/char/viotape.c:936:
+	printk(VIOTAPE_KERN_INFO "init - open path to hosting (%d)\n",
+			viopath_hostLp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: drivers/char/viotape.c:938:
+	ret = viopath_open(viopath_hostLp, viomajorsubtype_tape,
+			VIOTAPE_MAXREQ + 2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#997: FILE: drivers/char/viotape.c:940:
+		printk(VIOTAPE_KERN_WARN

CHECK:CAMELCASE: Avoid CamelCase: <vio_setHandler>
#1003: FILE: drivers/char/viotape.c:946:
+	vio_setHandler(viomajorsubtype_tape, vioHandleTapeEvent);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1007: FILE: drivers/char/viotape.c:950:
+		printk(VIOTAPE_KERN_WARN "Error registering viotape device\n");

WARNING:TYPO_SPELLING: 'allocat' may be misspelled - perhaps 'allocate'?
#1013: FILE: drivers/char/viotape.c:956:
+		printk(VIOTAPE_KERN_WARN "Unable to allocat class\n");
 		                                    ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1013: FILE: drivers/char/viotape.c:956:
+		printk(VIOTAPE_KERN_WARN "Unable to allocat class\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1018: FILE: drivers/char/viotape.c:961:
+	if ((ret = get_viotape_info()) < 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1019: FILE: drivers/char/viotape.c:962:
+		printk(VIOTAPE_KERN_WARN "Unable to obtain virtual device information");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1030: FILE: drivers/char/viotape.c:973:
+		class_simple_device_add(tape_class, MKDEV(VIOTAPE_MAJOR, i),
+				NULL, "iseries!vt%d", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1032: FILE: drivers/char/viotape.c:975:
+		class_simple_device_add(tape_class,
+				MKDEV(VIOTAPE_MAJOR, i | 0x80),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: drivers/char/viotape.c:978:
+		devfs_mk_cdev(MKDEV(VIOTAPE_MAJOR, i),
+				S_IFCHR | S_IRUSR | S_IWUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1035: FILE: drivers/char/viotape.c:978:
+				S_IFCHR | S_IRUSR | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1038: FILE: drivers/char/viotape.c:981:
+		devfs_mk_cdev(MKDEV(VIOTAPE_MAJOR, i | 0x80),
+				S_IFCHR | S_IRUSR | S_IWUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1038: FILE: drivers/char/viotape.c:981:
+				S_IFCHR | S_IRUSR | S_IWUSR,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1042: FILE: drivers/char/viotape.c:985:
+		printk(VIOTAPE_KERN_INFO "tape %s is iSeries "

WARNING:SPLIT_STRING: quoted string split across lines
#1043: FILE: drivers/char/viotape.c:986:
+		printk(VIOTAPE_KERN_INFO "tape %s is iSeries "
+				"resource %10.10s type %4.4s, model %3.3s\n",

CHECK:CAMELCASE: Avoid CamelCase: <vio_clearHandler>
#1056: FILE: drivers/char/viotape.c:999:
+	vio_clearHandler(viomajorsubtype_tape);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1100: FILE: drivers/char/viotape.c:1043:
+		printk(VIOTAPE_KERN_WARN "Error unregistering device: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: drivers/char/viotape.c:1044:
+		printk(VIOTAPE_KERN_WARN "Error unregistering device: %d\n",
+				ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: drivers/char/viotape.c:1047:
+		dma_free_coherent(iSeries_vio_dev,
+				sizeof(viotape_unitinfo[0]) * VIOTAPE_MAX_TAPE,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000295221.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 44 warnings, 116 checks, 1069 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000295221.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
