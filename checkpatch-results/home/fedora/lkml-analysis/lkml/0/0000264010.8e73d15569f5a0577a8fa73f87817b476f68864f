WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#82: 
--- 2.6.8-rc2-mm1.orig/include/linux/mempolicy.h	2004-08-02 04:37:03.000000000 -0700

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sz->zones"
#267: FILE: mm/mempolicy.c:542:
+		if (sz->zones == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#367: FILE: mm/page_alloc.c:1292:
+^I * ^ISpreads load across otherwise equivalent nodes.$

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: mm/page_alloc.c:1303:
+	struct subset_zonelists *sz = container_of(kref, typeof(*sz), ref);
+	kfree(sz->zones);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#391: FILE: mm/page_alloc.c:1316:
+typedef int (*gfp_array_t)[GFP_ZONETYPES];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#405: FILE: mm/page_alloc.c:1330:
+} __attribute__ ((packed));

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: mm/page_alloc.c:1429:
+	int cpu2nodelen = sizeof(int) * cpu_top_range;
+	return kmalloc(cpu2nodelen, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: mm/page_alloc.c:1440:
+		int bestnode = first_node(*np), bestcost = INT_MAX;
+		for_each_node_mask(n, *np) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: mm/page_alloc.c:1441:
+^I^I     ^Iint thiscost = szcost(c, n, node_load);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#516: FILE: mm/page_alloc.c:1441:
+^I^I     ^Iint thiscost = szcost(c, n, node_load);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#536: FILE: mm/page_alloc.c:1461:
+		struct zonelist *nodelists = NODE_DATA(n)->node_zonelists;
+		for (gfp = 0; gfp < GFP_ZONETYPES; gfp++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#540: FILE: mm/page_alloc.c:1465:
+					int nid = (*zp)->zone_pgdat->node_id;
+					if (node_isset(nid, *np))

WARNING:LINE_SPACING: Missing a blank line after declarations
#553: FILE: mm/page_alloc.c:1478:
+	int zoneslen = sizeof(struct zone *) * zcnt;
+	return kmalloc(zoneslen, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#560: FILE: mm/page_alloc.c:1485:
+	int ng2zlen = sizeof(int) * MAX_NUMNODES * GFP_ZONETYPES;
+	return kmalloc(ng2zlen, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: mm/page_alloc.c:1490:
+static void sz_compute_B2(gfp_array_t ng2z, struct zone **zones,
+						const nodemask_t *np)

WARNING:LINE_SPACING: Missing a blank line after declarations
#573: FILE: mm/page_alloc.c:1498:
+		struct zonelist *nodelists = NODE_DATA(n)->node_zonelists;
+		for (gfp = 0; gfp < GFP_ZONETYPES; gfp++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#578: FILE: mm/page_alloc.c:1503:
+					int nid = (*zp)->zone_pgdat->node_id;
+					if (node_isset(nid, *np))

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: mm/page_alloc.c:1517:
+	int cg2zlen = sizeof(int) * cpu_top_range * GFP_ZONETYPES;
+	return kmalloc(cg2zlen, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: mm/page_alloc.c:1521:
+static void sz_compute_map_C(gfp_array_t cg2z, const int *cpu2node,
+					gfp_array_t ng2z)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sz"
#628: FILE: mm/page_alloc.c:1553:
+	if (sz == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#641: FILE: mm/page_alloc.c:1566:
+	if ((cpu2node = sz_allocate_map_A()) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#645: FILE: mm/page_alloc.c:1570:
+	if ((ng2z = sz_allocate_map_B()) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#647: FILE: mm/page_alloc.c:1572:
+	if ((sz->zones = sz_allocate_zones(zcnt)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#650: FILE: mm/page_alloc.c:1575:
+	if ((sz->cg2z = sz_allocate_map_C()) == NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264010.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 15 warnings, 4 checks, 562 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264010.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
