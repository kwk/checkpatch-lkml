WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
> > into this, I realize that a couple of pieces of infrastructure are needed,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: fs/sysfs/inode.c:26:
+#undef DEBUG $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#136: FILE: fs/sysfs/inode.c:99:
+		if (inode) {
[...]
+			dget(dentry);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#140: FILE: fs/sysfs/inode.c:102:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: fs/sysfs/inode.c:148:
+#define to_subsys(k) container_of(k,struct subsystem,kobj)
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: fs/sysfs/inode.c:148:
+#define to_subsys(k) container_of(k,struct subsystem,kobj)
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: fs/sysfs/inode.c:149:
+#define to_sattr(a) container_of(a,struct subsys_attribute,attr)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: fs/sysfs/inode.c:149:
+#define to_sattr(a) container_of(a,struct subsys_attribute,attr)
                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: fs/sysfs/inode.c:153:
+ * These operations allow subsystems to have files that can be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: fs/sysfs/inode.c:154:
+ * read/written. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: fs/sysfs/inode.c:156:
+ssize_t subsys_attr_show(struct kobject * kobj, struct attribute * attr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: fs/sysfs/inode.c:156:
+ssize_t subsys_attr_show(struct kobject * kobj, struct attribute * attr, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: fs/sysfs/inode.c:156:
+ssize_t subsys_attr_show(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: fs/sysfs/inode.c:157:
+			 char * page, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: fs/sysfs/inode.c:159:
+	struct subsystem * s = to_subsys(kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: fs/sysfs/inode.c:160:
+	struct subsys_attribute * sattr = to_sattr(attr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: fs/sysfs/inode.c:164:
+		ret = sattr->show(s,page,count,off);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: fs/sysfs/inode.c:164:
+		ret = sattr->show(s,page,count,off);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: fs/sysfs/inode.c:164:
+		ret = sattr->show(s,page,count,off);
 		                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: fs/sysfs/inode.c:168:
+ssize_t subsys_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#176: FILE: fs/sysfs/inode.c:168:
+ssize_t subsys_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: fs/sysfs/inode.c:169:
+			  const char * page, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/sysfs/inode.c:171:
+	struct subsystem * s = to_subsys(kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: fs/sysfs/inode.c:172:
+	struct subsys_attribute * sattr = to_sattr(attr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: fs/sysfs/inode.c:176:
+		ret = sattr->store(s,page,count,off);
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: fs/sysfs/inode.c:176:
+		ret = sattr->store(s,page,count,off);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: fs/sysfs/inode.c:176:
+		ret = sattr->store(s,page,count,off);
 		                               ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#188: FILE: fs/sysfs/inode.c:180:
+static struct sysfs_ops subsys_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#202: FILE: fs/sysfs/inode.c:205:
+	struct sysfs_ops * ops = file->private_data;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#202: FILE: fs/sysfs/inode.c:205:
+	struct sysfs_ops * ops = file->private_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: fs/sysfs/inode.c:206:
+	struct kobject * kobj = file->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: fs/sysfs/inode.c:260:
+	struct sysfs_ops * ops = file->private_data;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#222: FILE: fs/sysfs/inode.c:260:
+	struct sysfs_ops * ops = file->private_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: fs/sysfs/inode.c:261:
+	struct kobject * kobj = file->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: fs/sysfs/inode.c:296:
+static int check_perm(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: fs/sysfs/inode.c:296:
+static int check_perm(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: fs/sysfs/inode.c:298:
+	struct kobject * kobj = kobject_get(file->f_dentry->d_parent->d_fsdata);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: fs/sysfs/inode.c:299:
+	struct attribute * attr = file->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: fs/sysfs/inode.c:300:
+	struct sysfs_ops * ops = NULL;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#245: FILE: fs/sysfs/inode.c:300:
+	struct sysfs_ops * ops = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <Einval>
#256: FILE: fs/sysfs/inode.c:304:
+		goto Einval;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Eaccess>
#270: FILE: fs/sysfs/inode.c:318:
+		goto Eaccess;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: fs/sysfs/inode.c:321:
+^I * The inode's perms must say it's ok, $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#277: FILE: fs/sysfs/inode.c:325:
+	if (file->f_mode & FMODE_WRITE) {
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#278: FILE: fs/sysfs/inode.c:326:
+		if (!(inode->i_mode & S_IWUGO))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <Eperm>
#279: FILE: fs/sysfs/inode.c:327:
+			goto Eperm;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#283: FILE: fs/sysfs/inode.c:331:
+
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#290: FILE: fs/sysfs/inode.c:338:
+		if (!(inode->i_mode & S_IRUGO))

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#300: FILE: fs/sysfs/inode.c:348:
+	goto Done;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#314: FILE: fs/sysfs/inode.c:362:
+static int sysfs_open_file(struct inode * inode, struct file * filp)
                                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: fs/sysfs/inode.c:362:
+static int sysfs_open_file(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: fs/sysfs/inode.c:362:
+static int sysfs_open_file(struct inode * inode, struct file * filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#316: FILE: fs/sysfs/inode.c:364:
+	return check_perm(inode,filp);
 	                        ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: fs/sysfs/inode.c:364:
+	return check_perm(inode,filp);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#327: FILE: fs/sysfs/inode.c:618:
+			simple_unlink(dir->d_inode,victim);
 			                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: fs/sysfs/inode.c:678:
+			simple_unlink(dentry->d_inode,d);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: fs/sysfs/inode.c:685:
+	simple_rmdir(parent->d_inode,dentry);
 	                            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411668.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 9 warnings, 8 checks, 240 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411668.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
