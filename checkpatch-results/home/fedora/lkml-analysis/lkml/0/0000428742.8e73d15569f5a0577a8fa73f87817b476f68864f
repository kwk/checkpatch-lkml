WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
    - Enhanced bitmasks in PCM - added support for more formats by Takashi and me

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#60: 
--- a/include/sound/asound.h	Sun Sep 29 20:20:12 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#118: FILE: include/sound/asound.h:329:
+	u_int32_t bits[(SNDRV_MASK_MAX+31)/32];
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#118: FILE: include/sound/asound.h:329:
+	u_int32_t bits[(SNDRV_MASK_MAX+31)/32];
 	                                  ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#118: FILE: include/sound/asound.h:329:
+	u_int32_t bits[(SNDRV_MASK_MAX+31)/32];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: include/sound/asound.h:334:
+^Istruct sndrv_mask masks[SNDRV_PCM_HW_PARAM_LAST_MASK - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#161: FILE: include/sound/pcm.h:51:
+typedef struct sndrv_mask snd_mask_t;

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#204: FILE: include/sound/pcm.h:152:
+#define SNDRV_PCM_FMTBIT_S8		(1ULL << SNDRV_PCM_FORMAT_S8)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#205: FILE: include/sound/pcm.h:153:
+#define SNDRV_PCM_FMTBIT_U8		(1ULL << SNDRV_PCM_FORMAT_U8)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#206: FILE: include/sound/pcm.h:154:
+#define SNDRV_PCM_FMTBIT_S16_LE		(1ULL << SNDRV_PCM_FORMAT_S16_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#207: FILE: include/sound/pcm.h:155:
+#define SNDRV_PCM_FMTBIT_S16_BE		(1ULL << SNDRV_PCM_FORMAT_S16_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#208: FILE: include/sound/pcm.h:156:
+#define SNDRV_PCM_FMTBIT_U16_LE		(1ULL << SNDRV_PCM_FORMAT_U16_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#209: FILE: include/sound/pcm.h:157:
+#define SNDRV_PCM_FMTBIT_U16_BE		(1ULL << SNDRV_PCM_FORMAT_U16_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#210: FILE: include/sound/pcm.h:158:
+#define SNDRV_PCM_FMTBIT_S24_LE		(1ULL << SNDRV_PCM_FORMAT_S24_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#211: FILE: include/sound/pcm.h:159:
+#define SNDRV_PCM_FMTBIT_S24_BE		(1ULL << SNDRV_PCM_FORMAT_S24_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#212: FILE: include/sound/pcm.h:160:
+#define SNDRV_PCM_FMTBIT_U24_LE		(1ULL << SNDRV_PCM_FORMAT_U24_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#213: FILE: include/sound/pcm.h:161:
+#define SNDRV_PCM_FMTBIT_U24_BE		(1ULL << SNDRV_PCM_FORMAT_U24_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#214: FILE: include/sound/pcm.h:162:
+#define SNDRV_PCM_FMTBIT_S32_LE		(1ULL << SNDRV_PCM_FORMAT_S32_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#215: FILE: include/sound/pcm.h:163:
+#define SNDRV_PCM_FMTBIT_S32_BE		(1ULL << SNDRV_PCM_FORMAT_S32_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#216: FILE: include/sound/pcm.h:164:
+#define SNDRV_PCM_FMTBIT_U32_LE		(1ULL << SNDRV_PCM_FORMAT_U32_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#217: FILE: include/sound/pcm.h:165:
+#define SNDRV_PCM_FMTBIT_U32_BE		(1ULL << SNDRV_PCM_FORMAT_U32_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#218: FILE: include/sound/pcm.h:166:
+#define SNDRV_PCM_FMTBIT_FLOAT_LE	(1ULL << SNDRV_PCM_FORMAT_FLOAT_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#219: FILE: include/sound/pcm.h:167:
+#define SNDRV_PCM_FMTBIT_FLOAT_BE	(1ULL << SNDRV_PCM_FORMAT_FLOAT_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#220: FILE: include/sound/pcm.h:168:
+#define SNDRV_PCM_FMTBIT_FLOAT64_LE	(1ULL << SNDRV_PCM_FORMAT_FLOAT64_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#221: FILE: include/sound/pcm.h:169:
+#define SNDRV_PCM_FMTBIT_FLOAT64_BE	(1ULL << SNDRV_PCM_FORMAT_FLOAT64_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#222: FILE: include/sound/pcm.h:170:
+#define SNDRV_PCM_FMTBIT_IEC958_SUBFRAME_LE (1ULL << SNDRV_PCM_FORMAT_IEC958_SUBFRAME_LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#223: FILE: include/sound/pcm.h:171:
+#define SNDRV_PCM_FMTBIT_IEC958_SUBFRAME_BE (1ULL << SNDRV_PCM_FORMAT_IEC958_SUBFRAME_BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#224: FILE: include/sound/pcm.h:172:
+#define SNDRV_PCM_FMTBIT_MU_LAW		(1ULL << SNDRV_PCM_FORMAT_MU_LAW)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#225: FILE: include/sound/pcm.h:173:
+#define SNDRV_PCM_FMTBIT_A_LAW		(1ULL << SNDRV_PCM_FORMAT_A_LAW)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#226: FILE: include/sound/pcm.h:174:
+#define SNDRV_PCM_FMTBIT_IMA_ADPCM	(1ULL << SNDRV_PCM_FORMAT_IMA_ADPCM)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#227: FILE: include/sound/pcm.h:175:
+#define SNDRV_PCM_FMTBIT_MPEG		(1ULL << SNDRV_PCM_FORMAT_MPEG)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#228: FILE: include/sound/pcm.h:176:
+#define SNDRV_PCM_FMTBIT_GSM		(1ULL << SNDRV_PCM_FORMAT_GSM)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#229: FILE: include/sound/pcm.h:177:
+#define SNDRV_PCM_FMTBIT_SPECIAL	(1ULL << SNDRV_PCM_FORMAT_SPECIAL)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#230: FILE: include/sound/pcm.h:178:
+#define SNDRV_PCM_FMTBIT_S24_3LE	(1ULL << SNDRV_PCM_FORMAT_S24_3LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#231: FILE: include/sound/pcm.h:179:
+#define SNDRV_PCM_FMTBIT_U24_3LE	(1ULL << SNDRV_PCM_FORMAT_U24_3LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#232: FILE: include/sound/pcm.h:180:
+#define SNDRV_PCM_FMTBIT_S24_3BE	(1ULL << SNDRV_PCM_FORMAT_S24_3BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#233: FILE: include/sound/pcm.h:181:
+#define SNDRV_PCM_FMTBIT_U24_3BE	(1ULL << SNDRV_PCM_FORMAT_U24_3BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#234: FILE: include/sound/pcm.h:182:
+#define SNDRV_PCM_FMTBIT_S20_3LE	(1ULL << SNDRV_PCM_FORMAT_S20_3LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#235: FILE: include/sound/pcm.h:183:
+#define SNDRV_PCM_FMTBIT_U20_3LE	(1ULL << SNDRV_PCM_FORMAT_U20_3LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#236: FILE: include/sound/pcm.h:184:
+#define SNDRV_PCM_FMTBIT_S20_3BE	(1ULL << SNDRV_PCM_FORMAT_S20_3BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#237: FILE: include/sound/pcm.h:185:
+#define SNDRV_PCM_FMTBIT_U20_3BE	(1ULL << SNDRV_PCM_FORMAT_U20_3BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#238: FILE: include/sound/pcm.h:186:
+#define SNDRV_PCM_FMTBIT_S18_3LE	(1ULL << SNDRV_PCM_FORMAT_S18_3LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#239: FILE: include/sound/pcm.h:187:
+#define SNDRV_PCM_FMTBIT_U18_3LE	(1ULL << SNDRV_PCM_FORMAT_U18_3LE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#240: FILE: include/sound/pcm.h:188:
+#define SNDRV_PCM_FMTBIT_S18_3BE	(1ULL << SNDRV_PCM_FORMAT_S18_3BE)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#241: FILE: include/sound/pcm.h:189:
+#define SNDRV_PCM_FMTBIT_U18_3BE	(1ULL << SNDRV_PCM_FORMAT_U18_3BE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: include/sound/pcm.h:233:
+^Isnd_mask_t masks[SNDRV_PCM_HW_PARAM_LAST_MASK - $

WARNING:LINE_SPACING: Missing a blank line after declarations
#348: FILE: include/sound/pcm_params.h:90:
+	int i;
+	for (i = 0; i < SNDRV_MASK_SIZE; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: include/sound/pcm_params.h:133:
+	int i;
+	assert(to <= SNDRV_MASK_BITS && from <= to);

WARNING:LINE_SPACING: Missing a blank line after declarations
#409: FILE: include/sound/pcm_params.h:141:
+	int i;
+	assert(to <= SNDRV_MASK_BITS && from <= to);

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: include/sound/pcm_params.h:149:
+	unsigned int v;
+	assert(val <= SNDRV_MASK_BITS);

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: include/sound/pcm_params.h:158:
+	int i;
+	for (i = 0; i < SNDRV_MASK_SIZE; i++)

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#436: FILE: include/sound/pcm_params.h:164:
+	return ! memcmp(mask, v, SNDRV_MASK_SIZE * sizeof(u_int32_t));
 	       ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#459: FILE: include/sound/pcm_params.h:183:
+		if (! mask->bits[i])
 		    ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#509: FILE: sound/core/ioctl32/pcm32.c:320:
+} __attribute__((packed));

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#511: FILE: sound/core/ioctl32/pcm32.c:322:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#511: FILE: sound/core/ioctl32/pcm32.c:322:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#511: FILE: sound/core/ioctl32/pcm32.c:322:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#511: FILE: sound/core/ioctl32/pcm32.c:322:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#511: FILE: sound/core/ioctl32/pcm32.c:322:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#511: FILE: sound/core/ioctl32/pcm32.c:322:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#512: FILE: sound/core/ioctl32/pcm32.c:323:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#512: FILE: sound/core/ioctl32/pcm32.c:323:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#512: FILE: sound/core/ioctl32/pcm32.c:323:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#512: FILE: sound/core/ioctl32/pcm32.c:323:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#512: FILE: sound/core/ioctl32/pcm32.c:323:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#512: FILE: sound/core/ioctl32/pcm32.c:323:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#514: FILE: sound/core/ioctl32/pcm32.c:325:
+static void snd_pcm_hw_convert_from_old_params(snd_pcm_hw_params_t *params, struct sndrv_pcm_hw_params_old32 *oparams)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#532: FILE: sound/core/ioctl32/pcm32.c:343:
+static void snd_pcm_hw_convert_to_old_params(struct sndrv_pcm_hw_params_old32 *oparams, snd_pcm_hw_params_t *params)

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#550: FILE: sound/core/ioctl32/pcm32.c:361:
+static int _snd_ioctl32_pcm_hw_params_old(unsigned int fd, unsigned int cmd, unsigned long arg, struct file *file, unsigned int native_ctl)

WARNING:LINE_SPACING: Missing a blank line after declarations
#556: FILE: sound/core/ioctl32/pcm32.c:367:
+	int err;
+	set_fs(KERNEL_DS);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#557: FILE: sound/core/ioctl32/pcm32.c:368:
+	if (copy_from_user(&data32, (void*)arg, sizeof(data32))) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#566: FILE: sound/core/ioctl32/pcm32.c:377:
+	if (copy_to_user((void*)arg, &data32, sizeof(data32))) {
+	  err = -EFAULT;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#566: FILE: sound/core/ioctl32/pcm32.c:377:
+	if (copy_to_user((void*)arg, &data32, sizeof(data32))) {

WARNING:TABSTOP: Statements should start on a tabstop
#568: FILE: sound/core/ioctl32/pcm32.c:379:
+	  goto __err;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#574: FILE: sound/core/ioctl32/pcm32.c:385:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#733: FILE: sound/core/oss/pcm_plugin.c:324:
+	if (! snd_pcm_plug_formats(format_mask, format))
 	    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#811: FILE: sound/core/pcm_lib.c:818:
+	memset(maskp->bits + 1, 0, (SNDRV_MASK_MAX-32) / 8); /* clear rest */
 	                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#822: FILE: sound/core/pcm_lib.c:829:
+	snd_mask_t *maskp = constrs_mask(constrs, var);
+	maskp->bits[0] &= (u_int32_t)mask;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#824: FILE: sound/core/pcm_lib.c:831:
+	memset(maskp->bits + 2, 0, (SNDRV_MASK_MAX-64) / 8); /* clear rest */
 	                                          ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#825: FILE: sound/core/pcm_lib.c:832:
+	if (! maskp->bits[0] && ! maskp->bits[1])
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#825: FILE: sound/core/pcm_lib.c:832:
+	if (! maskp->bits[0] && ! maskp->bits[1])
 	                        ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#995: FILE: sound/core/pcm_misc.c:461:
+		if (! silence)
 		    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#995: FILE: sound/core/pcm_misc.c:461:
+		if (! silence)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#997: FILE: sound/core/pcm_misc.c:463:
+		else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#1004: FILE: sound/core/pcm_misc.c:470:
+		u_int32_t silence = snd_pcm_format_silence_64(format);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1005: FILE: sound/core/pcm_misc.c:471:
+		u_int32_t silence = snd_pcm_format_silence_64(format);
+		if (! silence)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1005: FILE: sound/core/pcm_misc.c:471:
+		if (! silence)
 		    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1005: FILE: sound/core/pcm_misc.c:471:
+		if (! silence)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1007: FILE: sound/core/pcm_misc.c:473:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1010: FILE: sound/core/pcm_misc.c:476:
+			int i;
+			while (samples-- > 0) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1020: FILE: sound/core/pcm_misc.c:484:
+		if (! silence)
 		    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1020: FILE: sound/core/pcm_misc.c:484:
+		if (! silence)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1022: FILE: sound/core/pcm_misc.c:486:
+		else {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1032: FILE: sound/core/pcm_misc.c:494:
+		if (! silence)
 		    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1032: FILE: sound/core/pcm_misc.c:494:
+		if (! silence)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1034: FILE: sound/core/pcm_misc.c:496:
+		else {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1071: FILE: sound/core/pcm_native.c:58:
+static int snd_pcm_hw_refine_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1071: FILE: sound/core/pcm_native.c:58:
+static int snd_pcm_hw_refine_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1071: FILE: sound/core/pcm_native.c:58:
+static int snd_pcm_hw_refine_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1072: FILE: sound/core/pcm_native.c:59:
+static int snd_pcm_hw_params_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1072: FILE: sound/core/pcm_native.c:59:
+static int snd_pcm_hw_params_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1072: FILE: sound/core/pcm_native.c:59:
+static int snd_pcm_hw_params_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1085: FILE: sound/core/pcm_native.c:85:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1104: FILE: sound/core/pcm_native.c:222:
+^Ifor (k = 0; k <= SNDRV_PCM_HW_PARAM_LAST_INTERVAL; k++) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1113: FILE: sound/core/pcm_native.c:246:
+					printk("%x", *m->bits);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1122: FILE: sound/core/pcm_native.c:263:
+					printk("%x", *m->bits);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1134: FILE: sound/core/pcm_native.c:1406:
+	snd_mask_t *mask = hw_param_mask(params, SNDRV_PCM_HW_PARAM_FORMAT);
+	snd_mask_any(&m);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1138: FILE: sound/core/pcm_native.c:1409:
+		if (! snd_mask_test(mask, k))
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1153: FILE: sound/core/pcm_native.c:1430:
+		if (! snd_mask_test(hw_param_mask(params, SNDRV_PCM_HW_PARAM_FORMAT), k))
 		    ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1186: FILE: sound/core/pcm_native.c:2086:
+		return snd_pcm_hw_refine_old_user(substream, (struct sndrv_pcm_hw_params_old *) arg);

CHECK:SPACING: No space is necessary after a cast
#1186: FILE: sound/core/pcm_native.c:2086:
+		return snd_pcm_hw_refine_old_user(substream, (struct sndrv_pcm_hw_params_old *) arg);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1188: FILE: sound/core/pcm_native.c:2088:
+		return snd_pcm_hw_params_old_user(substream, (struct sndrv_pcm_hw_params_old *) arg);

CHECK:SPACING: No space is necessary after a cast
#1188: FILE: sound/core/pcm_native.c:2088:
+		return snd_pcm_hw_params_old_user(substream, (struct sndrv_pcm_hw_params_old *) arg);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1202: FILE: sound/core/pcm_native.c:2765:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1202: FILE: sound/core/pcm_native.c:2765:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1202: FILE: sound/core/pcm_native.c:2765:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1202: FILE: sound/core/pcm_native.c:2765:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))
                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1202: FILE: sound/core/pcm_native.c:2765:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1202: FILE: sound/core/pcm_native.c:2765:
+#define __OLD_TO_NEW_MASK(x) ((x&7)|((x&0x07fffff8)<<5))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1203: FILE: sound/core/pcm_native.c:2766:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1203: FILE: sound/core/pcm_native.c:2766:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1203: FILE: sound/core/pcm_native.c:2766:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1203: FILE: sound/core/pcm_native.c:2766:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))
                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1203: FILE: sound/core/pcm_native.c:2766:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1203: FILE: sound/core/pcm_native.c:2766:
+#define __NEW_TO_OLD_MASK(x) ((x&7)|((x&0xffffff00)>>5))

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1205: FILE: sound/core/pcm_native.c:2768:
+static void snd_pcm_hw_convert_from_old_params(snd_pcm_hw_params_t *params, struct sndrv_pcm_hw_params_old *oparams)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1223: FILE: sound/core/pcm_native.c:2786:
+static void snd_pcm_hw_convert_to_old_params(struct sndrv_pcm_hw_params_old *oparams, snd_pcm_hw_params_t *params)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1241: FILE: sound/core/pcm_native.c:2804:
+static int snd_pcm_hw_refine_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1241: FILE: sound/core/pcm_native.c:2804:
+static int snd_pcm_hw_refine_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1241: FILE: sound/core/pcm_native.c:2804:
+static int snd_pcm_hw_refine_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1246: FILE: sound/core/pcm_native.c:2809:
+	int err;
+	if (copy_from_user(&oparams, _oparams, sizeof(oparams)))

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1256: FILE: sound/core/pcm_native.c:2819:
+static int snd_pcm_hw_params_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1256: FILE: sound/core/pcm_native.c:2819:
+static int snd_pcm_hw_params_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1256: FILE: sound/core/pcm_native.c:2819:
+static int snd_pcm_hw_params_old_user(snd_pcm_substream_t * substream, struct sndrv_pcm_hw_params_old * _oparams)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1261: FILE: sound/core/pcm_native.c:2824:
+	int err;
+	if (copy_from_user(&oparams, _oparams, sizeof(oparams)))

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1364: FILE: sound/pci/rme32.c:23:
  *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#1386: FILE: sound/pci/rme32.c:331:
+ * Digital output capabilites (ADAT)
                   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1389: FILE: sound/pci/rme32.c:334:
+static snd_pcm_hardware_t snd_rme32_playback_adat_info =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#1390: FILE: sound/pci/rme32.c:335:
+	info:		     (SNDRV_PCM_INFO_MMAP |

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1394: FILE: sound/pci/rme32.c:339:
+	formats:             SNDRV_PCM_FMTBIT_S16_LE,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1394: FILE: sound/pci/rme32.c:339:
+	formats:             SNDRV_PCM_FMTBIT_S16_LE,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1395: FILE: sound/pci/rme32.c:340:
+^Irates:^I             (SNDRV_PCM_RATE_44100 | $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1395: FILE: sound/pci/rme32.c:340:
+	rates:	             (SNDRV_PCM_RATE_44100 | 
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1395: FILE: sound/pci/rme32.c:340:
+	rates:	             (SNDRV_PCM_RATE_44100 | 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1401: FILE: sound/pci/rme32.c:346:
+	buffer_bytes_max:   RME32_BUFFER_SIZE,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1401: FILE: sound/pci/rme32.c:346:
+	buffer_bytes_max:   RME32_BUFFER_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1402: FILE: sound/pci/rme32.c:347:
+	period_bytes_min:   RME32_BLOCK_SIZE,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1402: FILE: sound/pci/rme32.c:347:
+	period_bytes_min:   RME32_BLOCK_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1403: FILE: sound/pci/rme32.c:348:
+	period_bytes_max:   RME32_BLOCK_SIZE,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1403: FILE: sound/pci/rme32.c:348:
+	period_bytes_max:   RME32_BLOCK_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1404: FILE: sound/pci/rme32.c:349:
+	periods_min:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1404: FILE: sound/pci/rme32.c:349:
+	periods_min:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1405: FILE: sound/pci/rme32.c:350:
+	periods_max:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1405: FILE: sound/pci/rme32.c:350:
+	periods_max:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#1410: FILE: sound/pci/rme32.c:355:
+ * Digital input capabilites (ADAT)
                  ^^^^^^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1413: FILE: sound/pci/rme32.c:358:
+static snd_pcm_hardware_t snd_rme32_capture_adat_info =
+{

WARNING:INDENTED_LABEL: labels should not be indented
#1414: FILE: sound/pci/rme32.c:359:
+	info:		     (SNDRV_PCM_INFO_MMAP |

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1418: FILE: sound/pci/rme32.c:363:
+	formats:             SNDRV_PCM_FMTBIT_S16_LE,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1418: FILE: sound/pci/rme32.c:363:
+	formats:             SNDRV_PCM_FMTBIT_S16_LE,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1419: FILE: sound/pci/rme32.c:364:
+^Irates:^I             (SNDRV_PCM_RATE_44100 | $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1419: FILE: sound/pci/rme32.c:364:
+	rates:	             (SNDRV_PCM_RATE_44100 | 
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1419: FILE: sound/pci/rme32.c:364:
+	rates:	             (SNDRV_PCM_RATE_44100 | 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1425: FILE: sound/pci/rme32.c:370:
+	buffer_bytes_max:   RME32_BUFFER_SIZE,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1425: FILE: sound/pci/rme32.c:370:
+	buffer_bytes_max:   RME32_BUFFER_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1426: FILE: sound/pci/rme32.c:371:
+	period_bytes_min:   RME32_BLOCK_SIZE,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1426: FILE: sound/pci/rme32.c:371:
+	period_bytes_min:   RME32_BLOCK_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1427: FILE: sound/pci/rme32.c:372:
+	period_bytes_max:   RME32_BLOCK_SIZE,
 	                ^

WARNING:INDENTED_LABEL: labels should not be indented
#1427: FILE: sound/pci/rme32.c:372:
+	period_bytes_max:   RME32_BLOCK_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1428: FILE: sound/pci/rme32.c:373:
+	periods_min:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1428: FILE: sound/pci/rme32.c:373:
+	periods_min:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1429: FILE: sound/pci/rme32.c:374:
+	periods_max:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1429: FILE: sound/pci/rme32.c:374:
+	periods_max:	     RME32_BUFFER_SIZE / RME32_BLOCK_SIZE,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1443: FILE: sound/pci/rme32.c:412:
+^Iif (rme32->rcreg & RME32_RCR_LOCK) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1444: FILE: sound/pci/rme32.c:413:
+                /* ADAT rate */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1445: FILE: sound/pci/rme32.c:414:
+                *is_adat = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1445: FILE: sound/pci/rme32.c:414:
+                *is_adat = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1451: FILE: sound/pci/rme32.c:420:
+        /* S/PDIF rate */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1465: FILE: sound/pci/rme32.c:444:
+^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1480: FILE: sound/pci/rme32.c:879:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1483: FILE: sound/pci/rme32.c:882:
+^Ispin_lock_irqsave(&rme32->lock, flags);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1490: FILE: sound/pci/rme32.c:889:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1518: FILE: sound/pci/rme32.c:917:
+^Ispin_lock_irqsave(&rme32->lock, flags);^I$

WARNING:INDENTED_LABEL: labels should not be indented
#1571: FILE: sound/pci/rme32.c:1170:
+	open:		snd_rme32_playback_adat_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1572: FILE: sound/pci/rme32.c:1171:
+	close:		snd_rme32_playback_close,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1572: FILE: sound/pci/rme32.c:1171:
+	close:		snd_rme32_playback_close,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1573: FILE: sound/pci/rme32.c:1172:
+	ioctl:		snd_pcm_lib_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1573: FILE: sound/pci/rme32.c:1172:
+	ioctl:		snd_pcm_lib_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1574: FILE: sound/pci/rme32.c:1173:
+	hw_params:	snd_rme32_playback_hw_params,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#1574: FILE: sound/pci/rme32.c:1173:
+	hw_params:	snd_rme32_playback_hw_params,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1575: FILE: sound/pci/rme32.c:1174:
+	hw_free:	snd_rme32_playback_hw_free,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1575: FILE: sound/pci/rme32.c:1174:
+	hw_free:	snd_rme32_playback_hw_free,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1576: FILE: sound/pci/rme32.c:1175:
+	prepare:	snd_rme32_playback_prepare,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1576: FILE: sound/pci/rme32.c:1175:
+	prepare:	snd_rme32_playback_prepare,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1577: FILE: sound/pci/rme32.c:1176:
+	trigger:	snd_rme32_playback_trigger,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1577: FILE: sound/pci/rme32.c:1176:
+	trigger:	snd_rme32_playback_trigger,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1578: FILE: sound/pci/rme32.c:1177:
+	pointer:	snd_rme32_playback_pointer,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1578: FILE: sound/pci/rme32.c:1177:
+	pointer:	snd_rme32_playback_pointer,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1579: FILE: sound/pci/rme32.c:1178:
+	copy:		snd_rme32_playback_copy,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1579: FILE: sound/pci/rme32.c:1178:
+	copy:		snd_rme32_playback_copy,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1580: FILE: sound/pci/rme32.c:1179:
+	silence:	snd_rme32_playback_silence,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1580: FILE: sound/pci/rme32.c:1179:
+	silence:	snd_rme32_playback_silence,

WARNING:INDENTED_LABEL: labels should not be indented
#1584: FILE: sound/pci/rme32.c:1183:
+	open:		snd_rme32_capture_adat_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1585: FILE: sound/pci/rme32.c:1184:
+	close:		snd_rme32_capture_close,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1585: FILE: sound/pci/rme32.c:1184:
+	close:		snd_rme32_capture_close,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1586: FILE: sound/pci/rme32.c:1185:
+	ioctl:		snd_pcm_lib_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1586: FILE: sound/pci/rme32.c:1185:
+	ioctl:		snd_pcm_lib_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1587: FILE: sound/pci/rme32.c:1186:
+	hw_params:	snd_rme32_capture_hw_params,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#1587: FILE: sound/pci/rme32.c:1186:
+	hw_params:	snd_rme32_capture_hw_params,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1588: FILE: sound/pci/rme32.c:1187:
+	hw_free:	snd_rme32_capture_hw_free,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1588: FILE: sound/pci/rme32.c:1187:
+	hw_free:	snd_rme32_capture_hw_free,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1589: FILE: sound/pci/rme32.c:1188:
+	prepare:	snd_rme32_capture_prepare,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1589: FILE: sound/pci/rme32.c:1188:
+	prepare:	snd_rme32_capture_prepare,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1590: FILE: sound/pci/rme32.c:1189:
+	trigger:	snd_rme32_capture_trigger,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1590: FILE: sound/pci/rme32.c:1189:
+	trigger:	snd_rme32_capture_trigger,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1591: FILE: sound/pci/rme32.c:1190:
+	pointer:	snd_rme32_capture_pointer,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1591: FILE: sound/pci/rme32.c:1190:
+	pointer:	snd_rme32_capture_pointer,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1592: FILE: sound/pci/rme32.c:1191:
+	copy:		snd_rme32_capture_copy,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1592: FILE: sound/pci/rme32.c:1191:
+	copy:		snd_rme32_capture_copy,

CHECK:SPACING: No space is necessary after a cast
#1605: FILE: sound/pci/rme32.c:1228:
+	rme32_t *rme32 = (rme32_t *) pcm->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1606: FILE: sound/pci/rme32.c:1229:
+	rme32_t *rme32 = (rme32_t *) pcm->private_data;
+	rme32->adat_pcm = NULL;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1610: FILE: sound/pci/rme32.c:1233:
 static int __devinit snd_rme32_create(rme32_t * rme32)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pci->device == PCI_DEVICE_ID_DIGI32'
#1619: FILE: sound/pci/rme32.c:1287:
+	if ((pci->device == PCI_DEVICE_ID_DIGI32) ||
+	    (pci->device == PCI_DEVICE_ID_DIGI32_PRO)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pci->device == PCI_DEVICE_ID_DIGI32_PRO'
#1619: FILE: sound/pci/rme32.c:1287:
+	if ((pci->device == PCI_DEVICE_ID_DIGI32) ||
+	    (pci->device == PCI_DEVICE_ID_DIGI32_PRO)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1624: FILE: sound/pci/rme32.c:1292:
 	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1624: FILE: sound/pci/rme32.c:1292:
+	else {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1625: FILE: sound/pci/rme32.c:1293:
+		if ((err = snd_pcm_new(rme32->card, "Digi32 ADAT", 1,
+				       1, 1, &rme32->adat_pcm)) < 0)
+		{

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1625: FILE: sound/pci/rme32.c:1293:
+		if ((err = snd_pcm_new(rme32->card, "Digi32 ADAT", 1,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1629: FILE: sound/pci/rme32.c:1297:
+^I^I}^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1633: FILE: sound/pci/rme32.c:1301:
+^I^Isnd_pcm_set_ops(rme32->adat_pcm, SNDRV_PCM_STREAM_PLAYBACK, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1635: FILE: sound/pci/rme32.c:1303:
+^I^Isnd_pcm_set_ops(rme32->adat_pcm, SNDRV_PCM_STREAM_CAPTURE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1637: FILE: sound/pci/rme32.c:1305:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: sound/pci/rme32.c:1308:
+^I^Isnd_pcm_lib_preallocate_pages_for_all(rme32->adat_pcm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1641: FILE: sound/pci/rme32.c:1309:
+^I^I^I^I^I^I      RME32_BUFFER_SIZE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1642: FILE: sound/pci/rme32.c:1310:
+^I^I^I^I^I^I      RME32_BUFFER_SIZE, $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: sound/pci/via8233.c:369:
+		case 4: slots = (1<<0) | (2<<4) | (3<<8) | (4<<12); break;
 		                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: sound/pci/via8233.c:369:
+		case 4: slots = (1<<0) | (2<<4) | (3<<8) | (4<<12); break;
 		                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: sound/pci/via8233.c:369:
+		case 4: slots = (1<<0) | (2<<4) | (3<<8) | (4<<12); break;
 		                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: sound/pci/via8233.c:369:
+		case 4: slots = (1<<0) | (2<<4) | (3<<8) | (4<<12); break;
 		                                             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1679: FILE: sound/pci/via8233.c:369:
+		case 4: slots = (1<<0) | (2<<4) | (3<<8) | (4<<12); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1682: FILE: sound/pci/via8233.c:371:
+		default: slots = 0; break;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 82 errors, 70 warnings, 88 checks, 1480 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
