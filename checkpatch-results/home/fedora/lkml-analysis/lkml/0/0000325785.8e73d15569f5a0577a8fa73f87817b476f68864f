WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#54: FILE: kernel/sched.c:632:
+	if (unlikely(kick) && !success && task_running(rq, p) && (task_cpu(p) != smp_processor_id()))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/linux/sched.h:578:
+ extern void FASTCALL(kick_process(struct task_struct * tsk));$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: include/linux/sched.h:578:
+ extern void FASTCALL(kick_process(struct task_struct * tsk));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/sched.h:578:
+ extern void FASTCALL(kick_process(struct task_struct * tsk));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/linux/sched.h:580:
+ static inline void kick_process(struct task_struct *tsk) { }$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu != smp_processor_id()'
#123: FILE: kernel/sched.c:594:
+	if ((cpu != smp_processor_id()) && task_curr(p))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#128: FILE: kernel/sched.c:599:
+EXPORT_SYMBOL_GPL(kick_process);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: kernel/sched.c:617:
+static int try_to_wake_up(task_t * p, unsigned int state, int sync)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000325785.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 4 warnings, 2 checks, 169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000325785.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
