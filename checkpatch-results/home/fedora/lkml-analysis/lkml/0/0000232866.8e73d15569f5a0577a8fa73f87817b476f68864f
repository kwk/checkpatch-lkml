WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The attached patch splits some memory-related procfs files into MMU and !MMU

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#126: FILE: fs/proc/internal.h:1:
+/* internal.h: internal procfs definitions

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: fs/proc/internal.h:21:
+extern void get_vmalloc_info(struct vmalloc_info *vmi);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vmi' - possible side-effects?
#150: FILE: fs/proc/internal.h:25:
+#define get_vmalloc_info(vmi)			\
+do {						\
+	(vmi)->used = 0;			\
+	(vmi)->largest_chunk = 0;		\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: fs/proc/internal.h:29:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: fs/proc/internal.h:33:
+extern void create_seq_entry(char *name, mode_t mode, struct file_operations *f);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#158: FILE: fs/proc/internal.h:33:
+extern void create_seq_entry(char *name, mode_t mode, struct file_operations *f);

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: fs/proc/internal.h:34:
+extern int proc_exe_link(struct inode *, struct dentry **, struct vfsmount **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#159: FILE: fs/proc/internal.h:34:
+extern int proc_exe_link(struct inode *, struct dentry **, struct vfsmount **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#159: FILE: fs/proc/internal.h:34:
+extern int proc_exe_link(struct inode *, struct dentry **, struct vfsmount **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#159: FILE: fs/proc/internal.h:34:
+extern int proc_exe_link(struct inode *, struct dentry **, struct vfsmount **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: fs/proc/internal.h:35:
+extern int proc_tid_stat(struct task_struct *,  char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#160: FILE: fs/proc/internal.h:35:
+extern int proc_tid_stat(struct task_struct *,  char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#160: FILE: fs/proc/internal.h:35:
+extern int proc_tid_stat(struct task_struct *,  char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: fs/proc/internal.h:36:
+extern int proc_tgid_stat(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#161: FILE: fs/proc/internal.h:36:
+extern int proc_tgid_stat(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#161: FILE: fs/proc/internal.h:36:
+extern int proc_tgid_stat(struct task_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: fs/proc/internal.h:37:
+extern int proc_pid_status(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#162: FILE: fs/proc/internal.h:37:
+extern int proc_pid_status(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#162: FILE: fs/proc/internal.h:37:
+extern int proc_pid_status(struct task_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: fs/proc/internal.h:38:
+extern int proc_pid_statm(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#163: FILE: fs/proc/internal.h:38:
+extern int proc_pid_statm(struct task_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#163: FILE: fs/proc/internal.h:38:
+extern int proc_pid_statm(struct task_struct *, char *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#192: FILE: fs/proc/mmu.c:1:
+/* mmu.c: mmu memory info files

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#219: FILE: fs/proc/mmu.c:28:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#220: FILE: fs/proc/mmu.c:29:
+#include <asm/pgtable.h>

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#236: FILE: fs/proc/mmu.c:45:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#236: FILE: fs/proc/mmu.c:45:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#246: FILE: fs/proc/mmu.c:55:
+			free_area_size = (unsigned long) vma->addr - prev_end;

CHECK:SPACING: No space is necessary after a cast
#250: FILE: fs/proc/mmu.c:59:
+			prev_end = vma->size + (unsigned long) vma->addr;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#263: FILE: fs/proc/nommu.c:1:
+/* nommu.c: mmu-less memory info files

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#291: FILE: fs/proc/nommu.c:29:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#292: FILE: fs/proc/nommu.c:30:
+#include <asm/pgtable.h>

WARNING:TYPO_SPELLING: 'kernals' may be misspelled - perhaps 'kernels'?
#299: FILE: fs/proc/nommu.c:37:
+ * - nommu kernals have a single flat list
            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#309: FILE: fs/proc/nommu.c:47:
+	map = list_entry((struct list_head *) v,

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: fs/proc/nommu.c:55:
+		struct inode *inode = map->vm_file->f_dentry->d_inode;
+		dev = inode->i_sb->s_dev;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#377: FILE: fs/proc/nommu.c:115:
+static struct seq_operations proc_nommu_vma_list_seqop = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#389: FILE: fs/proc/nommu.c:127:
+static struct file_operations proc_nommu_vma_list_operations = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#398: FILE: fs/proc/nommu.c:136:
+	create_seq_entry("maps", S_IRUGO, &proc_nommu_vma_list_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#494: FILE: fs/proc/proc_misc.c:542:
+void create_seq_entry(char *name, mode_t mode, struct file_operations *f)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#518: FILE: fs/proc/task_mmu.c:52:
+	struct vm_area_struct * vma;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#521: FILE: fs/proc/task_mmu.c:55:
+	struct mm_struct * mm = get_task_mm(task);

CHECK:SPACING: No space is necessary after a cast
#577: FILE: fs/proc/task_nommu.c:26:
+			sbytes += kobjsize((void *) tblock->vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#584: FILE: fs/proc/task_nommu.c:29:
+			bytes += kobjsize((void *) tblock->vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#586: FILE: fs/proc/task_nommu.c:31:
+			slack += kobjsize((void *) tblock->vma->vm_start) -

CHECK:SPACING: No space is necessary after a cast
#600: FILE: fs/proc/task_nommu.c:76:
+			vsize += kobjsize((void *) tbp->vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#618: FILE: fs/proc/task_nommu.c:93:
+			size += kobjsize((void *) tbp->vma->vm_start);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: fs/proc/task_nommu.c:107:
+	struct vm_area_struct * vma;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#632: FILE: fs/proc/task_nommu.c:110:
+	struct mm_struct * mm = get_task_mm(task);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232866.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 27 warnings, 17 checks, 571 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232866.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
