WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#46: FILE: arch/parisc/lib/iomap.c:46:
+	unsigned int (*read16be)(void __iomem *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#48: FILE: arch/parisc/lib/iomap.c:48:
+	unsigned int (*read32be)(void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#51: FILE: arch/parisc/lib/iomap.c:51:
+	void (*write16be)(u16, void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#51: FILE: arch/parisc/lib/iomap.c:51:
+	void (*write16be)(u16, void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#53: FILE: arch/parisc/lib/iomap.c:53:
+	void (*write32be)(u32, void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#53: FILE: arch/parisc/lib/iomap.c:53:
+	void (*write32be)(u32, void __iomem *);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#180: FILE: arch/parisc/lib/iomap.c:347:
+	if (unlikely(INDIRECT_ADDR(addr))) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/asm-generic/iomap.h:30:
+extern unsigned int fastcall ioread16be(void __iomem *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#220: FILE: include/asm-generic/iomap.h:30:
+extern unsigned int fastcall ioread16be(void __iomem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/asm-generic/iomap.h:32:
+extern unsigned int fastcall ioread32be(void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#222: FILE: include/asm-generic/iomap.h:32:
+extern unsigned int fastcall ioread32be(void __iomem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: include/asm-generic/iomap.h:36:
+extern void fastcall iowrite16be(u16, void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#226: FILE: include/asm-generic/iomap.h:36:
+extern void fastcall iowrite16be(u16, void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#226: FILE: include/asm-generic/iomap.h:36:
+extern void fastcall iowrite16be(u16, void __iomem *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/asm-generic/iomap.h:38:
+extern void fastcall iowrite32be(u32, void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#228: FILE: include/asm-generic/iomap.h:38:
+extern void fastcall iowrite32be(u32, void __iomem *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __iomem *' should also have an identifier name
#228: FILE: include/asm-generic/iomap.h:38:
+extern void fastcall iowrite32be(u32, void __iomem *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#239: FILE: lib/iomap.c:61:
 }
+unsigned int fastcall ioread16be(void __iomem *addr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#247: FILE: lib/iomap.c:69:
 }
+unsigned int fastcall ioread32be(void __iomem *addr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#263: FILE: lib/iomap.c:87:
 }
+void fastcall iowrite16be(u16 val, void __iomem *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: lib/iomap.c:89:
+	IO_COND(addr, outw(val,port), __raw_writew(cpu_to_be16(val), addr));
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#271: FILE: lib/iomap.c:95:
 }
+void fastcall iowrite32be(u32 val, void __iomem *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: lib/iomap.c:97:
+	IO_COND(addr, outl(val,port), __raw_writel(cpu_to_be32(val), addr));
 	                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 13 warnings, 8 checks, 221 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
