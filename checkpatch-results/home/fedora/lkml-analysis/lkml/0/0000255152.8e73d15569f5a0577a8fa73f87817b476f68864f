WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
> > --- linux-2.6.8-rc3/security/Makefile	2004-06-16 00:19:43.000000000 -0500

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: security/seclvl.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: security/seclvl.c:10:
+ * Copyright (c) 2002 International Business Machines <robb@austin.ibm.com> $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: security/seclvl.c:41:
+ * $

WARNING:SPLIT_STRING: quoted string split across lines
#151: FILE: security/seclvl.c:59:
+MODULE_PARM_DESC(verbosity, "Initial verbosity level (0 or 1; defaults to "
+		 "0, which is Quiet)");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#168: FILE: security/seclvl.c:76:
+		 "Plaintext of password that sets seclvl=0 when written to "
+		 "(sysfs mount point)/seclvl/passwd\n");

WARNING:SPLIT_STRING: quoted string split across lines
#185: FILE: security/seclvl.c:93:
+		 "SHA1 hash (40 hexadecimal characters) of password that "
+		 "sets seclvl=0 when plaintext password is written to "

WARNING:SPLIT_STRING: quoted string split across lines
#186: FILE: security/seclvl.c:94:
+		 "sets seclvl=0 when plaintext password is written to "
+		 "(sysfs mount point)/seclvl/passwd\n");

CHECK:CAMELCASE: Avoid CamelCase: <hideHash>
#188: FILE: security/seclvl.c:96:
+static int hideHash = 1;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#191: FILE: security/seclvl.c:99:
+MODULE_PARM_DESC(hideHash, "When set to 0, reading seclvl/passwd from sysfs "
+		 "will return the SHA1-hashed value of the password that "

WARNING:SPLIT_STRING: quoted string split across lines
#192: FILE: security/seclvl.c:100:
+		 "will return the SHA1-hashed value of the password that "
+		 "lowers the secure level to 0.\n");

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'verb' may be better as '(verb)' to avoid precedence issues
#199: FILE: security/seclvl.c:107:
+#define seclvl_printk(verb, type, fmt, arg...)			\
+	do {							\
+		if (verbosity >= verb) {			\
+			static unsigned long _prior;		\
+			unsigned long _now = jiffies;		\
+			if ((_now - _prior) > HZ) {		\
+				printk(type "%s: %s: " fmt,	\
+					MY_NAME, __FUNCTION__,	\
+					## arg);		\
+				_prior = _now;			\
+			}					\
+		}						\
+	} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: security/seclvl.c:113:
+				printk(type "%s: %s: " fmt,	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#206: FILE: security/seclvl.c:114:
+					MY_NAME, __FUNCTION__,	\

WARNING:SPACING: missing space after return type
#233: FILE: security/seclvl.c:141:
+	ssize_t(*show) (struct seclvl_obj *, char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#233: FILE: security/seclvl.c:141:
+	ssize_t(*show) (struct seclvl_obj *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seclvl_obj *' should also have an identifier name
#233: FILE: security/seclvl.c:141:
+	ssize_t(*show) (struct seclvl_obj *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#233: FILE: security/seclvl.c:141:
+	ssize_t(*show) (struct seclvl_obj *, char *);

WARNING:SPACING: missing space after return type
#234: FILE: security/seclvl.c:142:
+	ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#234: FILE: security/seclvl.c:142:
+	ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seclvl_obj *' should also have an identifier name
#234: FILE: security/seclvl.c:142:
+	ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#234: FILE: security/seclvl.c:142:
+	ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#234: FILE: security/seclvl.c:142:
+	ssize_t(*store) (struct seclvl_obj *, const char *, size_t);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#250: FILE: security/seclvl.c:158:
+	return (attribute->store ? attribute->store(obj, buf, len) : 0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#259: FILE: security/seclvl.c:167:
+	return (attribute->show ? attribute->show(obj, buf) : 0);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#265: FILE: security/seclvl.c:173:
+struct sysfs_ops seclvlfs_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reqlvl > 2'
#292: FILE: security/seclvl.c:200:
+	if ((reqlvl < -1) || (reqlvl > 2)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPLIT_STRING: quoted string split across lines
#294: FILE: security/seclvl.c:202:
+		seclvl_printk(1, KERN_WARNING, "Attempt to set seclvl out of "
+			      "range: [%d]\n", reqlvl);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seclvl == 0'
#297: FILE: security/seclvl.c:205:
+	if ((seclvl == 0) && (reqlvl == -1))

WARNING:SPLIT_STRING: quoted string split across lines
#301: FILE: security/seclvl.c:209:
+		seclvl_printk(1, KERN_WARNING, "Attempt to lower seclvl to "
+			      "[%d]\n", reqlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#326: FILE: security/seclvl.c:234:
+		seclvl_printk(1, KERN_WARNING, "Cannot advance to seclvl "
+			      "[%d]\n", newlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#331: FILE: security/seclvl.c:239:
+		seclvl_printk(1, KERN_WARNING, "Cannot advance to seclvl "
+			      "[%d]\n", newlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#336: FILE: security/seclvl.c:244:
+		seclvl_printk(1, KERN_WARNING, "Not allowed to advance to "
+			      "seclvl [%d]\n", seclvl);

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: security/seclvl.c:259:
+	unsigned long val;
+	if (count > 2 || (count == 2 && buff[1] != '\n')) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#353: FILE: security/seclvl.c:261:
+		seclvl_printk(1, KERN_WARNING, "Invalid value passed to "
+			      "seclvl: [%s]\n", buff);

WARNING:SPLIT_STRING: quoted string split across lines
#359: FILE: security/seclvl.c:267:
+		seclvl_printk(1, KERN_WARNING, "Illegal secure level "
+			      "requested: [%d]\n", (int)val);

WARNING:SPLIT_STRING: quoted string split across lines
#364: FILE: security/seclvl.c:272:
+		seclvl_printk(0, KERN_ERR, "Failure advancing security level "
+			      "to %lu\n", val);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#371: FILE: security/seclvl.c:279:
+__ATTR(seclvl, (S_IFREG | S_IRUGO | S_IWUSR), seclvl_read_file,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: security/seclvl.c:280:
+       seclvl_write_file);$

CHECK:CAMELCASE: Avoid CamelCase: <hashedPassword>
#374: FILE: security/seclvl.c:282:
+static unsigned char hashedPassword[SHA1_DIGEST_SIZE];

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: security/seclvl.c:292:
+	int i = 0;
+	buff[0] = '\0';

CHECK:CAMELCASE: Avoid CamelCase: <pgVirtAddr>
#407: FILE: security/seclvl.c:315:
+	char *pgVirtAddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: security/seclvl.c:318:
+	struct scatterlist sg[1];
+	if (len > PAGE_SIZE) {

WARNING:SPLIT_STRING: quoted string split across lines
#412: FILE: security/seclvl.c:320:
+		seclvl_printk(0, KERN_ERR, "Plaintext password too large (%d "
+			      "characters).  Largest possible is %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#413: FILE: security/seclvl.c:321:
+			      "characters).  Largest possible is %lu "
+			      "bytes.\n", len, PAGE_SIZE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#417: FILE: security/seclvl.c:325:
+	if (tfm == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#420: FILE: security/seclvl.c:328:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LINE_SPACING: Missing a blank line after declarations
#448: FILE: security/seclvl.c:356:
+	int len;
+	if (!*passwd && !*sha1_passwd) {

WARNING:SPLIT_STRING: quoted string split across lines
#450: FILE: security/seclvl.c:358:
+		seclvl_printk(0, KERN_ERR, "Attempt to password-unlock the "
+			      "seclvl module, but neither a plain text "

WARNING:SPLIT_STRING: quoted string split across lines
#451: FILE: security/seclvl.c:359:
+			      "seclvl module, but neither a plain text "
+			      "password nor a SHA1 hashed password was "

WARNING:SPLIT_STRING: quoted string split across lines
#452: FILE: security/seclvl.c:360:
+			      "password nor a SHA1 hashed password was "
+			      "passed in as a module parameter!  This is a "

WARNING:SPLIT_STRING: quoted string split across lines
#453: FILE: security/seclvl.c:361:
+			      "passed in as a module parameter!  This is a "
+			      "bug, since it should not be possible to be in "

WARNING:SPLIT_STRING: quoted string split across lines
#454: FILE: security/seclvl.c:362:
+			      "bug, since it should not be possible to be in "
+			      "this part of the module; please tell a "

WARNING:SPLIT_STRING: quoted string split across lines
#455: FILE: security/seclvl.c:363:
+			      "this part of the module; please tell a "
+			      "maintainer about this event.\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#460: FILE: security/seclvl.c:368:
+	if (buff[len - 1] == '\n') {
+		len--;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#464: FILE: security/seclvl.c:372:
+	if ((rc = plaintext_to_sha1(tmp, buff, len))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPLIT_STRING: quoted string split across lines
#466: FILE: security/seclvl.c:374:
+		seclvl_printk(0, KERN_ERR, "Error hashing password: rc = "
+			      "[%d]\n", rc);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#470: FILE: security/seclvl.c:378:
+		if (hashedPassword[i] != tmp[i]) {
+			return -EPERM;
+		}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#482: FILE: security/seclvl.c:390:
+__ATTR(passwd, (S_IFREG | S_IRUGO | S_IWUSR), seclvl_read_passwd,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: security/seclvl.c:391:
+       seclvl_write_passwd);$

WARNING:TYPO_SPELLING: 'Explicitely' may be misspelled - perhaps 'Explicitly'?
#486: FILE: security/seclvl.c:394:
+ * Explicitely disallow ptrace'ing the init process.
    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dissallowed' may be misspelled - perhaps 'disallowed'?
#493: FILE: security/seclvl.c:401:
+				      "the init process dissallowed in "
 				                        ^^^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#493: FILE: security/seclvl.c:401:
+			seclvl_printk(1, KERN_WARNING, "Attempt to ptrace "
+				      "the init process dissallowed in "

WARNING:SPLIT_STRING: quoted string split across lines
#494: FILE: security/seclvl.c:402:
+				      "the init process dissallowed in "
+				      "secure level %d\n", seclvl);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#513: FILE: security/seclvl.c:421:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPLIT_STRING: quoted string split across lines
#517: FILE: security/seclvl.c:425:
+			seclvl_printk(1, KERN_WARNING, "Attempt to modify "
+				      "the IMMUTABLE and/or APPEND extended "

WARNING:SPLIT_STRING: quoted string split across lines
#518: FILE: security/seclvl.c:426:
+				      "the IMMUTABLE and/or APPEND extended "
+				      "attribute on a file with the IMMUTABLE "

WARNING:SPLIT_STRING: quoted string split across lines
#519: FILE: security/seclvl.c:427:
+				      "attribute on a file with the IMMUTABLE "
+				      "and/or APPEND extended attribute set "

WARNING:SPLIT_STRING: quoted string split across lines
#520: FILE: security/seclvl.c:428:
+				      "and/or APPEND extended attribute set "
+				      "denied in seclvl [%d]\n", seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#524: FILE: security/seclvl.c:432:
+			seclvl_printk(1, KERN_WARNING, "Attempt to perform "
+				      "raw I/O while in secure level [%d] "

WARNING:SPLIT_STRING: quoted string split across lines
#525: FILE: security/seclvl.c:433:
+				      "raw I/O while in secure level [%d] "
+				      "denied\n", seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#529: FILE: security/seclvl.c:437:
+			seclvl_printk(1, KERN_WARNING, "Attempt to perform "
+				      "network administrative task while "

WARNING:SPLIT_STRING: quoted string split across lines
#530: FILE: security/seclvl.c:438:
+				      "network administrative task while "
+				      "in secure level [%d] denied\n", seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#534: FILE: security/seclvl.c:442:
+			seclvl_printk(1, KERN_WARNING, "Attempt to setuid "
+				      "while in secure level [%d] denied\n",

WARNING:SPLIT_STRING: quoted string split across lines
#539: FILE: security/seclvl.c:447:
+			seclvl_printk(1, KERN_WARNING, "Attempt to setgid "
+				      "while in secure level [%d] denied\n",

WARNING:SPLIT_STRING: quoted string split across lines
#543: FILE: security/seclvl.c:451:
+			seclvl_printk(1, KERN_WARNING, "Attempt to perform "
+				      "a module operation while in secure "

WARNING:SPLIT_STRING: quoted string split across lines
#544: FILE: security/seclvl.c:452:
+				      "a module operation while in secure "
+				      "level [%d] denied\n", seclvl);

WARNING:LINE_SPACING: Missing a blank line after declarations
#564: FILE: security/seclvl.c:472:
+	struct timespec now;
+	if (seclvl > 1) {

WARNING:SPLIT_STRING: quoted string split across lines
#569: FILE: security/seclvl.c:477:
+			seclvl_printk(1, KERN_WARNING, "Attempt to decrement "
+				      "time in secure level %d denied: "

WARNING:SPLIT_STRING: quoted string split across lines
#570: FILE: security/seclvl.c:478:
+				      "time in secure level %d denied: "
+				      "current->pid = [%d], "

WARNING:SPLIT_STRING: quoted string split across lines
#571: FILE: security/seclvl.c:479:
+				      "current->pid = [%d], "
+				      "current->group_leader->pid = [%d]\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#586: FILE: security/seclvl.c:494:
+	dev_t dev = inode->i_rdev;
+	bdev = open_by_devnum(dev, FMODE_WRITE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#603: FILE: security/seclvl.c:511:
+		struct block_device *bdev = inode->i_bdev;
+		if (bdev) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#617: FILE: security/seclvl.c:525:
+seclvl_inode_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                          ^^

WARNING:SPLIT_STRING: quoted string split across lines
#623: FILE: security/seclvl.c:531:
+			seclvl_printk(1, KERN_WARNING, "Write to block device "
+				      "denied in secure level [%d]\n", seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#629: FILE: security/seclvl.c:537:
+					      "Write to mounted block device "
+					      "denied in secure level [%d]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#648: FILE: security/seclvl.c:556:
+				seclvl_printk(1, KERN_WARNING, "Attempt to "
+					      "modify SUID or SGID bit "

WARNING:SPLIT_STRING: quoted string split across lines
#649: FILE: security/seclvl.c:557:
+					      "modify SUID or SGID bit "
+					      "denied in seclvl [%d]\n",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#658: FILE: security/seclvl.c:566:
+static void seclvl_file_free_security(struct file *filp)
                                                    ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#662: FILE: security/seclvl.c:570:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#674: FILE: security/seclvl.c:582:
+	if (current->pid == 1) {
+		return 0;
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#679: FILE: security/seclvl.c:587:
+		seclvl_printk(1, KERN_WARNING, "Attempt to unmount in secure "
+			      "level %d\n", seclvl);

CHECK:CAMELCASE: Avoid CamelCase: <processPassword>
#698: FILE: security/seclvl.c:606:
+static int processPassword(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#701: FILE: security/seclvl.c:609:
+	int rc = 0;
+	hashedPassword[0] = '\0';

WARNING:SPLIT_STRING: quoted string split across lines
#705: FILE: security/seclvl.c:613:
+			seclvl_printk(0, KERN_ERR, "Error: Both "
+				      "passwd and sha1_passwd "

WARNING:SPLIT_STRING: quoted string split across lines
#706: FILE: security/seclvl.c:614:
+				      "passwd and sha1_passwd "
+				      "were set, but they are mutually "

WARNING:SPLIT_STRING: quoted string split across lines
#707: FILE: security/seclvl.c:615:
+				      "were set, but they are mutually "
+				      "exclusive.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#710: FILE: security/seclvl.c:618:
+		if ((rc = plaintext_to_sha1(hashedPassword, passwd,

WARNING:SPLIT_STRING: quoted string split across lines
#713: FILE: security/seclvl.c:621:
+			seclvl_printk(0, KERN_ERR, "Error: SHA1 support not "
+				      "in kernel\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#717: FILE: security/seclvl.c:625:
+		 * plaintext password out for us. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: security/seclvl.c:628:
+		int i;
+		i = strlen(sha1_passwd);

WARNING:SPLIT_STRING: quoted string split across lines
#724: FILE: security/seclvl.c:632:
+				      "expected [%d] for the hexadecimal "
+				      "representation of the SHA1 hash of "

WARNING:SPLIT_STRING: quoted string split across lines
#725: FILE: security/seclvl.c:633:
+				      "representation of the SHA1 hash of "
+				      "the password.\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#731: FILE: security/seclvl.c:639:
+			unsigned char tmp;
+			tmp = sha1_passwd[i + 2];

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#734: FILE: security/seclvl.c:642:
+			    simple_strtol(&sha1_passwd[i], NULL, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:CAMELCASE: Avoid CamelCase: <doSysfsRegistrations>
#744: FILE: security/seclvl.c:652:
+static int doSysfsRegistrations(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: security/seclvl.c:655:
+	int rc = 0;
+	if ((rc = subsystem_register(&seclvl_subsys))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#747: FILE: security/seclvl.c:655:
+	if ((rc = subsystem_register(&seclvl_subsys))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#766: FILE: security/seclvl.c:674:
+	int rc = 0;
+	if (verbosity < 0 || verbosity > 1) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#767: FILE: security/seclvl.c:675:
+		printk(KERN_ERR "Error: bad verbosity [%d]; only 0 or 1 "

WARNING:SPLIT_STRING: quoted string split across lines
#768: FILE: security/seclvl.c:676:
+		printk(KERN_ERR "Error: bad verbosity [%d]; only 0 or 1 "
+		       "are valid values\n", verbosity);

WARNING:SPLIT_STRING: quoted string split across lines
#776: FILE: security/seclvl.c:684:
+		seclvl_printk(0, KERN_ERR, "Error: bad initial securelevel "
+			      "[%d].\n", initlvl);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#781: FILE: security/seclvl.c:689:
+	if ((rc = processPassword())) {

WARNING:SPLIT_STRING: quoted string split across lines
#783: FILE: security/seclvl.c:691:
+		seclvl_printk(0, KERN_ERR, "Error processing the password "
+			      "module parameter(s): rc = [%d]\n", rc);

WARNING:SPLIT_STRING: quoted string split across lines
#790: FILE: security/seclvl.c:698:
+			      "seclvl: Failure registering with the "
+			      "kernel.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#795: FILE: security/seclvl.c:703:
+			seclvl_printk(0, KERN_ERR, "seclvl: Failure "
+				      "registering with primary security "

WARNING:SPLIT_STRING: quoted string split across lines
#796: FILE: security/seclvl.c:704:
+				      "registering with primary security "
+				      "module.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#801: FILE: security/seclvl.c:709:
+	if ((rc = doSysfsRegistrations())) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#808: FILE: security/seclvl.c:716:
+		printk(KERN_ERR "seclvl: Error during initialization: rc = "

WARNING:SPLIT_STRING: quoted string split across lines
#809: FILE: security/seclvl.c:717:
+		printk(KERN_ERR "seclvl: Error during initialization: rc = "
+		       "[%d]\n", rc);

WARNING:SPLIT_STRING: quoted string split across lines
#830: FILE: security/seclvl.c:738:
+			      "seclvl: Failure unregistering with the "
+			      "kernel\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 102 warnings, 9 checks, 768 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000255152.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
