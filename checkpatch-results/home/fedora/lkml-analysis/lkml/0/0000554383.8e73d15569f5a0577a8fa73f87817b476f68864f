WARNING:TYPO_SPELLING: 'enought' may be misspelled - perhaps 'enough'?
#34: 
Marcelo's changes make a difference here - enought of a difference that I
                                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
These patches make my system more stable when there is memory preasure.  With 

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#41: 
scaning, when under light memory peasure, looks to be effective at keeping 
^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: mm/swap.c:214:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#81: FILE: mm/swap.c:215:
+	if(bg_page_aging < num_physpages)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#107: FILE: mm/vmscan.c:26:
vma, unsigned long address, pte_t * page_table, struct page *page)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#108: FILE: mm/vmscan.c:27:
+int bg_page_aging = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: mm/vmscan.c:29:
+static int try_to_swap_out(struct mm_struct * mm, struct vm_area_struct* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: mm/vmscan.c:29:
+static int try_to_swap_out(struct mm_struct * mm, struct vm_area_struct* 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#139: FILE: mm/vmscan.c:67:
+			if(!PageActive(page)) {

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#140: FILE: mm/vmscan.c:68:
+				UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: mm/vmscan.c:129:
+static int swap_out_pmd(struct mm_struct * mm, struct vm_area_struct * vma, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: mm/vmscan.c:129:
+static int swap_out_pmd(struct mm_struct * mm, struct vm_area_struct * vma, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: mm/vmscan.c:129:
+static int swap_out_pmd(struct mm_struct * mm, struct vm_area_struct * vma, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: mm/vmscan.c:130:
+static int swap_out_pmd(struct mm_struct * mm, struct vm_area_struct * vma, 
 {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: mm/vmscan.c:169:
+static inline int swap_out_pgd(struct mm_struct * mm, struct vm_area_struct $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: mm/vmscan.c:169:
+static inline int swap_out_pgd(struct mm_struct * mm, struct vm_area_struct 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: mm/vmscan.c:198:
+static int swap_out_vma(struct mm_struct * mm, struct vm_area_struct * vma, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: mm/vmscan.c:198:
+static int swap_out_vma(struct mm_struct * mm, struct vm_area_struct * vma, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: mm/vmscan.c:198:
+static int swap_out_vma(struct mm_struct * mm, struct vm_area_struct * vma, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: mm/vmscan.c:199:
+static int swap_out_vma(struct mm_struct * mm, struct vm_area_struct * vma, 
 {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#277: FILE: mm/vmscan.c:222:
+static int swap_out_mm(struct mm_struct * mm, int maxtry, int *count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: mm/vmscan.c:275:
+^Iint counter, retval = 0; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: mm/vmscan.c:281:
+                if (!*needed && !background)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: mm/vmscan.c:305:
+		retval |= swap_out_mm(mm, swap_amount(mm),needed);
 		                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: mm/vmscan.c:307:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: mm/vmscan.c:675:
+ ^I^I^I * has not reached zero yet. If it reached zero, and we ^I^I^I * are doing $

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#379: FILE: mm/vmscan.c:675:
+ 			 * has not reached zero yet. If it reached zero, and we 			 * are doing 

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: mm/vmscan.c:675:
+ ^I^I^I * has not reached zero yet. If it reached zero, and we ^I^I^I * are doing $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#379: FILE: mm/vmscan.c:675:
+ ^I^I^I * has not reached zero yet. If it reached zero, and we ^I^I^I * are doing $

CHECK:BRACES: braces {} should be used on all arms of this statement
#382: FILE: mm/vmscan.c:677:
+			if (bg_page_aging)
[...]
+			else if (background) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: mm/vmscan.c:681:
+^I^I^I^Icontinue;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: mm/vmscan.c:702:
+^I^I * deactivated by deactivate_page_nolock and we exit $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: mm/vmscan.c:833:
+^I^I^Igoto done; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: mm/vmscan.c:950:
+^I^Iif (bg_page_aging)  $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000554383.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 5 warnings, 4 checks, 380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000554383.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
