CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#63: FILE: include/linux/kernel.h:289:
+#define __container_of(ptr, type, member) ({			\
         const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
         (type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#63: FILE: include/linux/kernel.h:289:
+#define __container_of(ptr, type, member) ({			\
         const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
         (type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#67: FILE: include/linux/kernel.h:293:
+#define container_of(ptr, type, member) ({			\
+	DECLARE_MEMLEAK_OFFSET(container_of, type, member);	\
+	__container_of(ptr, type, member);			\
+})

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: include/linux/memleak.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#84: FILE: include/linux/memleak.h:2:
+ * include/linux/memleak.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#99: FILE: include/linux/memleak.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#100: FILE: include/linux/memleak.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#108: FILE: include/linux/memleak.h:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#119: FILE: include/linux/memleak.h:37:
+#define memleak_offsetof(type, member)				\
+	(__builtin_constant_p(&((type *) 0)->member) ?		\
+	 ((size_t) &((type *) 0)->member) : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#119: FILE: include/linux/memleak.h:37:
+#define memleak_offsetof(type, member)				\
+	(__builtin_constant_p(&((type *) 0)->member) ?		\
+	 ((size_t) &((type *) 0)->member) : 0)

CHECK:SPACING: No space is necessary after a cast
#120: FILE: include/linux/memleak.h:38:
+	(__builtin_constant_p(&((type *) 0)->member) ?		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#121: FILE: include/linux/memleak.h:39:
+	 ((size_t) &((type *) 0)->member) : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#123: FILE: include/linux/memleak.h:41:
+#define DECLARE_MEMLEAK_OFFSET(name, type, member)		\
+	static const struct memleak_offset			\
+	__attribute__ ((__section__ (".init.memleak_offsets")))	\
+	__attribute_used__ __memleak_offset__##name = {		\
+		memleak_offsetof(type, member),			\
+		sizeof(type),					\
+		sizeof(((type *) 0)->member)			\
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: include/linux/memleak.h:43:
+	__attribute__ ((__section__ (".init.memleak_offsets")))	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".init.memleak_offsets") over __attribute__((__section__(".init.memleak_offsets")))
#125: FILE: include/linux/memleak.h:43:
+	__attribute__ ((__section__ (".init.memleak_offsets")))	\

CHECK:SPACING: No space is necessary after a cast
#129: FILE: include/linux/memleak.h:47:
+		sizeof(((type *) 0)->member)			\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/memleak.h:50:
+extern int memleak_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/memleak.h:52:
+extern void memleak_alloc(const void *ptr, size_t size, int ref_count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/memleak.h:53:
+extern void memleak_free(const void *ptr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#199: FILE: mm/memleak.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#200: FILE: mm/memleak.c:2:
+ * mm/memleak.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#215: FILE: mm/memleak.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#216: FILE: mm/memleak.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#238: FILE: mm/memleak.c:40:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#240: FILE: mm/memleak.c:42:
+#include <asm/percpu.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#241: FILE: mm/memleak.c:43:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/thread_info.h> instead of <asm/thread_info.h>
#242: FILE: mm/memleak.c:44:
+#include <asm/thread_info.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: mm/memleak.c:48:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#253: FILE: mm/memleak.c:55:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#254: FILE: mm/memleak.c:56:
+extern struct memleak_offset __memleak_offsets_start[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#255: FILE: mm/memleak.c:57:
+extern struct memleak_offset __memleak_offsets_end[];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#257: FILE: mm/memleak.c:59:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pointer' - possible side-effects?
#274: FILE: mm/memleak.c:76:
+#define COLOR_WHITE(pointer)	((pointer)->count != -1 && (pointer)->count < (pointer)->ref_count)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pointer' - possible side-effects?
#275: FILE: mm/memleak.c:77:
+#define COLOR_GREY(pointer)	((pointer)->count >= (pointer)->ref_count)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: mm/memleak.c:79:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#290: FILE: mm/memleak.c:92:
+static int memleak_initialised = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#291: FILE: mm/memleak.c:93:
+static unsigned long memleak_running = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#294: FILE: mm/memleak.c:96:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*alias_list)...) over kmalloc(sizeof(struct hlist_head)...)
#315: FILE: mm/memleak.c:117:
+		alias_list = kmalloc(sizeof(struct hlist_head), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#317: FILE: mm/memleak.c:119:
+		if (!alias_list)
+			panic("kmemleak: cannot allocate initial memory\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*alias)...) over kmalloc(sizeof(struct memleak_alias)...)
#325: FILE: mm/memleak.c:127:
+	alias = kmalloc(sizeof(struct memleak_alias), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#327: FILE: mm/memleak.c:129:
+	if (!alias)
+		panic("kmemleak: cannot allocate initial memory\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: mm/memleak.c:190:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#393: FILE: mm/memleak.c:195:
+				panic("kmemleak: cannot insert alias into the pointer radix tree: %d\n", err);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#411: FILE: mm/memleak.c:213:
+		printk(KERN_WARNING "kmemleak: freeing unknown pointer value 0x%08lx\n", ptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#419: FILE: mm/memleak.c:221:
+		printk(KERN_WARNING "kmemleak: freeing orphan pointer 0x%08lx\n", ptr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'memleak_alloc', this function's name, in a string
#455: FILE: mm/memleak.c:257:
+			pr_debug("kmemleak: memleak_alloc(%p, %d)\n", ptr, size);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#456: FILE: mm/memleak.c:258:
+			insert_pointer((unsigned long) ptr, size, ref_count);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'memleak_free', this function's name, in a string
#486: FILE: mm/memleak.c:288:
+			pr_debug("kmemleak: memleak_free(%p)\n", ptr);

CHECK:SPACING: No space is necessary after a cast
#487: FILE: mm/memleak.c:289:
+			delete_pointer((unsigned long) ptr);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#546: FILE: mm/memleak.c:348:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:SPACING: No space is necessary after a cast
#568: FILE: mm/memleak.c:370:
+		memleak_scan_block((void *) pointer->pointer,

CHECK:SPACING: No space is necessary after a cast
#569: FILE: mm/memleak.c:371:
+				   (void *) (pointer->pointer + pointer->size));

CHECK:SPACING: No space is necessary after a cast
#597: FILE: mm/memleak.c:399:
+	struct list_head *n = ((struct memleak_pointer *) v)->pointer_list.next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: mm/memleak.c:430:
+		unsigned long trace = pointer->trace[i];
+		if (!trace)

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#640: FILE: mm/memleak.c:442:
+static struct seq_operations memleak_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#652: FILE: mm/memleak.c:454:
+static struct file_operations memleak_proc_fops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#670: FILE: mm/memleak.c:472:
+	printk(KERN_INFO "Kernel memory leak detector\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#685: FILE: mm/memleak.c:487:
+			BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#687: FILE: mm/memleak.c:489:
+		else if (ml_off->offset != 0 && ml_off->offset < ml_off->size
+			 && !insert_alias(ml_off->size, ml_off->offset))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#728: FILE: mm/memleak.c:530:
+#if 0

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#739: FILE: mm/memleak.c:541:
+	entry = create_proc_entry("memleak", S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 29 warnings, 28 checks, 670 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
