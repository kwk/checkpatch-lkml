WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#68: FILE: drivers/scsi/libata-core.c:3364:
+		printk(KERN_WARNING "ata%u: PIO error\n", ap->id);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port_idx' - possible side-effects?
#98: FILE: drivers/scsi/sata_vsc.c:89:
+#define is_vsc_sata_int_err(port_idx, int_status) \
+	 (int_status & ((1 << (VSC_SATA_INT_ERROR_E_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_P_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_T_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_M_OFFSET + (8 * port_idx)))   \
+		       )\
+ 	 )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'port_idx' may be better as '(port_idx)' to avoid precedence issues
#98: FILE: drivers/scsi/sata_vsc.c:89:
+#define is_vsc_sata_int_err(port_idx, int_status) \
+	 (int_status & ((1 << (VSC_SATA_INT_ERROR_E_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_P_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_T_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_M_OFFSET + (8 * port_idx)))   \
+		       )\
+ 	 )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'int_status' may be better as '(int_status)' to avoid precedence issues
#98: FILE: drivers/scsi/sata_vsc.c:89:
+#define is_vsc_sata_int_err(port_idx, int_status) \
+	 (int_status & ((1 << (VSC_SATA_INT_ERROR_E_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_P_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_T_OFFSET + (8 * port_idx))) | \
+		        (1 << (VSC_SATA_INT_ERROR_M_OFFSET + (8 * port_idx)))   \
+		       )\
+ 	 )

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: drivers/scsi/sata_vsc.c:91:
+^I^I        (1 << (VSC_SATA_INT_ERROR_P_OFFSET + (8 * port_idx))) | \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: drivers/scsi/sata_vsc.c:92:
+^I^I        (1 << (VSC_SATA_INT_ERROR_T_OFFSET + (8 * port_idx))) | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: drivers/scsi/sata_vsc.c:93:
+^I^I        (1 << (VSC_SATA_INT_ERROR_M_OFFSET + (8 * port_idx)))   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: drivers/scsi/sata_vsc.c:95:
+ ^I )$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: drivers/scsi/sata_vsc.c:95:
+ ^I )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: drivers/scsi/sata_vsc.c:95:
+ ^I )$

WARNING:LINE_SPACING: Missing a blank line after declarations
#116: FILE: drivers/scsi/sata_vsc.c:220:
+				u32 err_status;
+				printk(KERN_DEBUG "%s: ignoring interrupt(s)\n", __FUNCTION__);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#116: FILE: drivers/scsi/sata_vsc.c:220:
+				printk(KERN_DEBUG "%s: ignoring interrupt(s)\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#116: FILE: drivers/scsi/sata_vsc.c:220:
+				printk(KERN_DEBUG "%s: ignoring interrupt(s)\n", __FUNCTION__);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#131: FILE: drivers/scsi/sata_vsc.c:234:
+					printk(KERN_DEBUG "%s: ignoring interrupt(s)\n", __FUNCTION__);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#131: FILE: drivers/scsi/sata_vsc.c:234:
+					printk(KERN_DEBUG "%s: ignoring interrupt(s)\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#131: FILE: drivers/scsi/sata_vsc.c:234:
+					printk(KERN_DEBUG "%s: ignoring interrupt(s)\n", __FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103256.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 9 warnings, 3 checks, 77 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103256.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
