CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#136: FILE: fs/affs/bitmap.c:292:
+	bm = sbi->s_bitmap = kzalloc(size, GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct affs_sb_info)...)
#154: FILE: fs/affs/super.c:280:
+	sbi = kzalloc(sizeof(struct affs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*server)...) over kzalloc(sizeof(struct afs_server)...)
#171: FILE: fs/afs/server.c:58:
+	server = kzalloc(sizeof(struct afs_server), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*as)...) over kzalloc(sizeof(struct afs_super_info)...)
#190: FILE: fs/afs/super.c:245:
+	as = kzalloc(sizeof(struct afs_super_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vlocation)...) over kzalloc(sizeof(struct afs_vlocation)...)
#210: FILE: fs/afs/vlocation.c:284:
+	vlocation = kzalloc(sizeof(struct afs_vlocation), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*volume)...) over kzalloc(sizeof(struct afs_volume)...)
#227: FILE: fs/afs/volume.c:189:
+	volume = kzalloc(sizeof(struct afs_volume), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#244: FILE: fs/aio.c:126:
+		info->ring_pages = kzalloc(sizeof(struct page *) * nr_pages, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#360: FILE: fs/bio.c:594:
+	pages = kzalloc(nr_pages * sizeof(struct page *), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cd)...) over kzalloc(sizeof(struct char_device_struct)...)
#392: FILE: fs/char_dev.c:98:
+	cd = kzalloc(sizeof(struct char_device_struct), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct cdev)...)
#406: FILE: fs/char_dev.c:416:
+	struct cdev *p = kzalloc(sizeof(struct cdev), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#421: FILE: fs/cifs/connect.c:1648:
+		srvTcp = kzalloc(sizeof (struct TCP_Server_Info), GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <srvTcp>
#421: FILE: fs/cifs/connect.c:1648:
+		srvTcp = kzalloc(sizeof (struct TCP_Server_Info), GFP_KERNEL);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*srvTcp)...) over kzalloc(sizeof (struct TCP_Server_Info)...)
#421: FILE: fs/cifs/connect.c:1648:
+		srvTcp = kzalloc(sizeof (struct TCP_Server_Info), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#442: FILE: fs/cifs/dir.c:251:
+			   kzalloc(sizeof (struct cifsFileInfo), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#442: FILE: fs/cifs/dir.c:251:
+			   kzalloc(sizeof (struct cifsFileInfo), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#477: FILE: fs/cifs/misc.c:74:
+	ret_buf = kzalloc(sizeof (struct cifsSesInfo), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <cifsSesInfo>
#477: FILE: fs/cifs/misc.c:74:
+	ret_buf = kzalloc(sizeof (struct cifsSesInfo), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ret_buf)...) over kzalloc(sizeof (struct cifsSesInfo)...)
#477: FILE: fs/cifs/misc.c:74:
+	ret_buf = kzalloc(sizeof (struct cifsSesInfo), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#489: FILE: fs/cifs/misc.c:109:
+	ret_buf = kzalloc(sizeof (struct cifsTconInfo),

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#489: FILE: fs/cifs/misc.c:109:
+	ret_buf = kzalloc(sizeof (struct cifsTconInfo),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ret_buf)...) over kzalloc(sizeof (struct cifsTconInfo)...)
#489: FILE: fs/cifs/misc.c:109:
+	ret_buf = kzalloc(sizeof (struct cifsTconInfo),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: fs/cifs/misc.c:110:
+	ret_buf = kzalloc(sizeof (struct cifsTconInfo),
 					    GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: fs/cifs/readdir.c:354:
+			kzalloc(sizeof(struct cifsFileInfo),GFP_KERNEL);
 			                                   ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct cramfs_sb_info)...)
#540: FILE: fs/cramfs/inode.c:248:
+	sbi = kzalloc(sizeof(struct cramfs_sb_info), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#558: FILE: fs/devfs/base.c:974:
+	if ((new = kzalloc(sizeof *new + namelen, GFP_KERNEL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SIZEOF_PARENTHESIS: sizeof *new should be sizeof(*new)
#558: FILE: fs/devfs/base.c:974:
+	if ((new = kzalloc(sizeof *new + namelen, GFP_KERNEL)) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: fs/efs/super.c:250:
+ ^Isb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: fs/efs/super.c:250:
+ ^Isb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: fs/efs/super.c:250:
+ ^Isb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sb)...) over kzalloc(sizeof(struct efs_sb_info)...)
#573: FILE: fs/efs/super.c:250:
+ 	sb = kzalloc(sizeof(struct efs_sb_info), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#619: FILE: fs/ext2/super.c:851:
+	sbi->s_debts = kzalloc(sbi->s_groups_count * sizeof(*sbi->s_debts),
 			       GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct msdos_sb_info)...)
#706: FILE: fs/fat/inode.c:1082:
+	sbi = kzalloc(sizeof(struct msdos_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct hfs_sb_info)...)
#787: FILE: fs/hfs/super.c:358:
+	sbi = kzalloc(sizeof(struct hfs_sb_info), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#870: FILE: fs/jffs/intrep.c:491:
+	if (!(f = kzalloc(sizeof(struct jffs_file),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*f)...) over kzalloc(sizeof(struct jffs_file)...)
#870: FILE: fs/jffs/intrep.c:491:
+	if (!(f = kzalloc(sizeof(struct jffs_file),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: fs/jffs/intrep.c:492:
+	if (!(f = kzalloc(sizeof(struct jffs_file),
 					      GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#886: FILE: fs/jffs/intrep.c:595:
+	if (!(root = kzalloc(sizeof(struct jffs_file), GFP_KERNEL))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#886: FILE: fs/jffs/intrep.c:595:
+	if (!(root = kzalloc(sizeof(struct jffs_file), GFP_KERNEL))) {
 		return -ENOMEM;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*root)...) over kzalloc(sizeof(struct jffs_file)...)
#886: FILE: fs/jffs/intrep.c:595:
+	if (!(root = kzalloc(sizeof(struct jffs_file), GFP_KERNEL))) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#924: FILE: fs/jffs2/fs.c:485:
+	c->inocache_list = kzalloc(INOCACHE_HASHSIZE * sizeof(struct jffs2_inode_cache *), GFP_KERNEL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#924: FILE: fs/jffs2/fs.c:485:
+	c->inocache_list = kzalloc(INOCACHE_HASHSIZE * sizeof(struct jffs2_inode_cache *), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*s)...) over kzalloc(sizeof(struct jffs2_summary)...)
#961: FILE: fs/jffs2/scan.c:109:
+		s = kzalloc(sizeof(struct jffs2_summary), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*c->summary)...) over kzalloc(sizeof(struct jffs2_summary)...)
#979: FILE: fs/jffs2/summary.c:28:
+	c->summary = kzalloc(sizeof(struct jffs2_summary), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1016: FILE: fs/jfs/jfs_logmgr.c:1108:
+	if (!(log = kzalloc(sizeof(struct jfs_log), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*log)...) over kzalloc(sizeof(struct jfs_log)...)
#1016: FILE: fs/jfs/jfs_logmgr.c:1108:
+	if (!(log = kzalloc(sizeof(struct jfs_log), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1029: FILE: fs/jfs/jfs_logmgr.c:1183:
+	if (!(log = kzalloc(sizeof(struct jfs_log), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*log)...) over kzalloc(sizeof(struct jfs_log)...)
#1029: FILE: fs/jfs/jfs_logmgr.c:1183:
+	if (!(log = kzalloc(sizeof(struct jfs_log), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dummy_log)...) over kzalloc(sizeof(struct jfs_log)...)
#1040: FILE: fs/jfs/jfs_logmgr.c:1217:
+		dummy_log = kzalloc(sizeof(struct jfs_log), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*a)...) over kzalloc(sizeof(struct meta_anchor)...)
#1058: FILE: fs/jfs/jfs_metapage.c:107:
+		a = kzalloc(sizeof(struct meta_anchor), GFP_NOFS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1074: FILE: fs/jfs/super.c:399:
+	sbi = kzalloc(sizeof (struct jfs_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof (struct jfs_sb_info)...)
#1074: FILE: fs/jfs/super.c:399:
+	sbi = kzalloc(sizeof (struct jfs_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*call)...) over kzalloc(sizeof(struct nlm_rqst)...)
#1090: FILE: fs/lockd/clntproc.c:293:
+		call = kzalloc(sizeof(struct nlm_rqst), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1105: FILE: fs/lockd/host.c:102:
+	if (!(host = kzalloc(sizeof(*host), GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1120: FILE: fs/lockd/svclock.c:185:
+	if (!(block = kzalloc(sizeof(*block), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct minix_sb_info)...)
#1152: FILE: fs/minix/inode.c:147:
+	sbi = kzalloc(sizeof(struct minix_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*server)...) over kzalloc(sizeof(struct ncp_server)...)
#1181: FILE: fs/ncpfs/inode.c:414:
+	server = kzalloc(sizeof(struct ncp_server), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1198: FILE: fs/nfs/idmap.c:100:
+        if ((idmap = kzalloc(sizeof(*idmap), GFP_KERNEL)) == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: fs/nfs/idmap.c:100:
+        if ((idmap = kzalloc(sizeof(*idmap), GFP_KERNEL)) == NULL)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1198: FILE: fs/nfs/idmap.c:100:
+        if ((idmap = kzalloc(sizeof(*idmap), GFP_KERNEL)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*server)...) over kzalloc(sizeof(struct nfs_server)...)
#1215: FILE: fs/nfs/inode.c:1616:
+	server = kzalloc(sizeof(struct nfs_server), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*server)...) over kzalloc(sizeof(struct nfs_server)...)
#1227: FILE: fs/nfs/inode.c:1934:
+	server = kzalloc(sizeof(struct nfs_server), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1243: FILE: fs/nfs/nfs4state.c:94:
+	if ((clp = kzalloc(sizeof(*clp), GFP_KERNEL)) == NULL) {

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#1293: FILE: fs/nfsd/nfs4state.c:301:
+	if ((clp = kzalloc(sizeof(struct nfs4_client), GFP_KERNEL))!= NULL) {
 	                                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1293: FILE: fs/nfsd/nfs4state.c:301:
+	if ((clp = kzalloc(sizeof(struct nfs4_client), GFP_KERNEL))!= NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*clp)...) over kzalloc(sizeof(struct nfs4_client)...)
#1293: FILE: fs/nfsd/nfs4state.c:301:
+	if ((clp = kzalloc(sizeof(struct nfs4_client), GFP_KERNEL))!= NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1306: FILE: fs/nfsd/nfscache.c:69:
+	hash_list = kzalloc (HASHSIZE * sizeof(struct hlist_head), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1306: FILE: fs/nfsd/nfscache.c:69:
+	hash_list = kzalloc (HASHSIZE * sizeof(struct hlist_head), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*raparml)...) over kzalloc(sizeof(struct raparms)...)
#1326: FILE: fs/nfsd/vfs.c:1848:
+	raparml = kzalloc(sizeof(struct raparms) * cache_size, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1326: FILE: fs/nfsd/vfs.c:1848:
+	raparml = kzalloc(sizeof(struct raparms) * cache_size, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1373: FILE: fs/partitions/efi.c:272:
+	gpt = kzalloc(sizeof (gpt_header), GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1385: FILE: fs/partitions/efi.c:528:
+                legacymbr = kzalloc(sizeof (*legacymbr), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: fs/partitions/efi.c:528:
+                legacymbr = kzalloc(sizeof (*legacymbr), GFP_KERNEL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1385: FILE: fs/partitions/efi.c:528:
+                legacymbr = kzalloc(sizeof (*legacymbr), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*info)...) over kzalloc(sizeof(struct pipe_inode_info)...)
#1400: FILE: fs/pipe.c:665:
+	info = kzalloc(sizeof(struct pipe_inode_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*qs)...) over kzalloc(sizeof(struct qnx4_sb_info)...)
#1447: FILE: fs/qnx4/inode.c:360:
+	qs = kzalloc(sizeof(struct qnx4_sb_info), GFP_KERNEL);

WARNING:LONG_LINE_COMMENT: line length of 144 exceeds 100 columns
#1464: FILE: fs/reiserfs/file.c:319:
+			char *zeros = kzalloc(to_paste * UNFM_P_SIZE, GFP_ATOMIC);	// We cannot insert more than MAX_ITEM_LEN bytes anyway.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#1482: FILE: fs/reiserfs/inode.c:942:
+				un = kzalloc(min(blocks_needed, max_to_insert) * UNFM_P_SIZE, GFP_ATOMIC);	// We need to avoid scheduling.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct reiserfs_sb_info)...)
#1504: FILE: fs/reiserfs/super.c:1695:
+	sbi = kzalloc(sizeof(struct reiserfs_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*s)...) over kzalloc(sizeof(struct super_block)...)
#1541: FILE: fs/super.c:58:
+	struct super_block *s = kzalloc(sizeof(struct super_block),  GFP_USER);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1558: FILE: fs/sysfs/file.c:304:
+	buffer = kzalloc(sizeof(struct sysfs_buffer),GFP_KERNEL);
 	                                            ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*buffer)...) over kzalloc(sizeof(struct sysfs_buffer)...)
#1558: FILE: fs/sysfs/file.c:304:
+	buffer = kzalloc(sizeof(struct sysfs_buffer),GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sd_iattr)...) over kzalloc(sizeof(struct iattr)...)
#1573: FILE: fs/sysfs/inode.c:56:
+		sd_iattr = kzalloc(sizeof(struct iattr), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct sysv_sb_info)...)
#1590: FILE: fs/sysv/super.c:372:
+	sbi = kzalloc(sizeof(struct sysv_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct sysv_sb_info)...)
#1602: FILE: fs/sysv/super.c:455:
+	sbi = kzalloc(sizeof(struct sysv_sb_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct ufs_sb_info)...)
#1618: FILE: fs/ufs/super.c:549:
+	sbi = kzalloc(sizeof(struct ufs_sb_info), GFP_KERNEL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 23 warnings, 46 checks, 1106 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
