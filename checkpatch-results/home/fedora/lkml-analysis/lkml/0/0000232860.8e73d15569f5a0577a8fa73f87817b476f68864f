WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#26: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: arch/frv/mb93090-mb00/pci-dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#64: FILE: arch/frv/mb93090-mb00/pci-dma.c:15:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: arch/frv/mb93090-mb00/pci-dma.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_1: Consider removing the #if 1 and its #endif
#87: FILE: arch/frv/mb93090-mb00/pci-dma.c:38:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: arch/frv/mb93090-mb00/pci-dma.c:64:
+		printk("%s called without any DMA area reserved!\n", __func__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: arch/frv/mb93090-mb00/pci-dma.c:68:
+	new = kmalloc(sizeof (*new), GFP_ATOMIC);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: arch/frv/mb93090-mb00/pci-dma.c:76:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: arch/frv/mb93090-mb00/pci-dma.c:77:
+	list_for_each (this, &dma_alloc_list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#128: FILE: arch/frv/mb93090-mb00/pci-dma.c:79:
+		struct dma_alloc_record *this_r = list_entry(this, struct dma_alloc_record, list);
+		end = this_r->ofs;

WARNING:INDENTED_LABEL: labels should not be indented
#140: FILE: arch/frv/mb93090-mb00/pci-dma.c:91:
+	gotone:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#170: FILE: arch/frv/mb93090-mb00/pci-dma.c:121:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#178: FILE: arch/frv/mb93090-mb00/pci-frv.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: arch/frv/mb93090-mb00/pci-frv.c:47:
+ *^Iavoid dead locks reading broken PCI BIOS, werner@suse.de $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: arch/frv/mb93090-mb00/pci-frv.c:53:
+ * $

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#274: FILE: arch/frv/mb93090-mb00/pci-frv.c:97:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#284: FILE: arch/frv/mb93090-mb00/pci-frv.c:107:
+		reg = PCI_BASE_ADDRESS_0 + 4*resource;
 		                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: arch/frv/mb93090-mb00/pci-frv.c:116:
+^I$

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#296: FILE: arch/frv/mb93090-mb00/pci-frv.c:119:
+	if ((new ^ check) & ((new & PCI_BASE_ADDRESS_SPACE_IO) ? PCI_BASE_ADDRESS_IO_MASK : PCI_BASE_ADDRESS_MEM_MASK)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#297: FILE: arch/frv/mb93090-mb00/pci-frv.c:120:
+		printk(KERN_ERR "PCI: Error while updating region "

WARNING:SPLIT_STRING: quoted string split across lines
#298: FILE: arch/frv/mb93090-mb00/pci-frv.c:121:
+		printk(KERN_ERR "PCI: Error while updating region "
+		       "%s/%d (%08x != %08x)\n", dev->slot_name, resource,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#331: FILE: arch/frv/mb93090-mb00/pci-frv.c:154:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#374: FILE: arch/frv/mb93090-mb00/pci-frv.c:197:
+	for (ln=bus_list->next; ln != bus_list; ln=ln->next) {
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#374: FILE: arch/frv/mb93090-mb00/pci-frv.c:197:
+	for (ln=bus_list->next; ln != bus_list; ln=ln->next) {
 	                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#376: FILE: arch/frv/mb93090-mb00/pci-frv.c:199:
+		if ((dev = bus->self)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#383: FILE: arch/frv/mb93090-mb00/pci-frv.c:206:
+					printk(KERN_ERR "PCI: Cannot allocate resource region %d of bridge %s\n", idx, dev->slot_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#383: FILE: arch/frv/mb93090-mb00/pci-frv.c:206:
+					printk(KERN_ERR "PCI: Cannot allocate resource region %d of bridge %s\n", idx, dev->slot_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#398: FILE: arch/frv/mb93090-mb00/pci-frv.c:221:
+	       dev != NULL

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#401: FILE: arch/frv/mb93090-mb00/pci-frv.c:224:
+		for(idx = 0; idx < 6; idx++) {

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#416: FILE: arch/frv/mb93090-mb00/pci-frv.c:239:
+					printk(KERN_ERR "PCI: Cannot allocate resource region %d of device %s\n", idx, pci_name(dev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#416: FILE: arch/frv/mb93090-mb00/pci-frv.c:239:
+					printk(KERN_ERR "PCI: Cannot allocate resource region %d of device %s\n", idx, pci_name(dev));

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#426: FILE: arch/frv/mb93090-mb00/pci-frv.c:249:
+				/* Turn the ROM off, leave the resource region, but keep it unregistered. */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: arch/frv/mb93090-mb00/pci-frv.c:251:
+				u32 reg;
+				DBG("PCI: Switching off ROM of %s\n", pci_name(dev));

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#431: FILE: arch/frv/mb93090-mb00/pci-frv.c:254:
+				pci_write_config_dword(dev, dev->rom_base_reg, reg & ~PCI_ROM_ADDRESS_ENABLE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#444: FILE: arch/frv/mb93090-mb00/pci-frv.c:267:
+	       dev != NULL

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#452: FILE: arch/frv/mb93090-mb00/pci-frv.c:275:
+		for(idx=0; idx<6; idx++) {
 		       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#452: FILE: arch/frv/mb93090-mb00/pci-frv.c:275:
+		for(idx=0; idx<6; idx++) {
 		              ^

ERROR:SPACING: space required before the open parenthesis '('
#452: FILE: arch/frv/mb93090-mb00/pci-frv.c:275:
+		for(idx=0; idx<6; idx++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#498: FILE: arch/frv/mb93090-mb00/pci-frv.c:321:
+	for(idx=0; idx<6; idx++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#498: FILE: arch/frv/mb93090-mb00/pci-frv.c:321:
+	for(idx=0; idx<6; idx++) {
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: arch/frv/mb93090-mb00/pci-frv.c:321:
+	for(idx=0; idx<6; idx++) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#500: FILE: arch/frv/mb93090-mb00/pci-frv.c:323:
+		if (!(mask & (1<<idx)))
 		               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: arch/frv/mb93090-mb00/pci-frv.c:325:
+^I^I^I$

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#505: FILE: arch/frv/mb93090-mb00/pci-frv.c:328:
+			printk(KERN_ERR "PCI: Device %s not available because of resource collisions\n", pci_name(dev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#505: FILE: arch/frv/mb93090-mb00/pci-frv.c:328:
+			printk(KERN_ERR "PCI: Device %s not available because of resource collisions\n", pci_name(dev));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#516: FILE: arch/frv/mb93090-mb00/pci-frv.c:339:
+		printk("PCI: Enabling device %s (%04x -> %04x)\n", pci_name(dev), old_cmd, cmd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#531: FILE: arch/frv/mb93090-mb00/pci-frv.c:354:
+	u8 lat;
+	pci_read_config_byte(dev, PCI_LATENCY_TIMER, &lat);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#533: FILE: arch/frv/mb93090-mb00/pci-frv.c:356:
+		lat = (64 <= pcibios_max_latency) ? 64 : pcibios_max_latency;

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#538: FILE: arch/frv/mb93090-mb00/pci-frv.c:361:
+	printk(KERN_DEBUG "PCI: Setting latency timer of device %s to %d\n", pci_name(dev), lat);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#545: FILE: arch/frv/mb93090-mb00/pci-frv.h:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#556: FILE: arch/frv/mb93090-mb00/pci-frv.h:12:
+#define DBG(x...) printk(x)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#578: FILE: arch/frv/mb93090-mb00/pci-frv.h:34:
+int pcibios_enable_resources(struct pci_dev *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#578: FILE: arch/frv/mb93090-mb00/pci-frv.h:34:
+int pcibios_enable_resources(struct pci_dev *, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#596: FILE: arch/frv/mb93090-mb00/pci-irq.c:1:
+/* pci-irq.c: PCI IRQ routing on the FRV motherboard

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#612: FILE: arch/frv/mb93090-mb00/pci-irq.c:17:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#613: FILE: arch/frv/mb93090-mb00/pci-irq.c:18:
+#include <asm/smp.h>

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#629: FILE: arch/frv/mb93090-mb00/pci-irq.c:34:
+static const uint8_t __initdata pci_bus0_irq_routing[32][4] = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#629: FILE: arch/frv/mb93090-mb00/pci-irq.c:34:
+static const uint8_t __initdata pci_bus0_irq_routing[32][4] = {

ERROR:SPACING: space prohibited before that close square bracket ']'
#630: FILE: arch/frv/mb93090-mb00/pci-irq.c:35:
+	[0 ] {	IRQ_FPGA_MB86943_PCI_INTA },

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#644: FILE: arch/frv/mb93090-mb00/pci-irq.c:49:
+	uint8_t line, pin;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#647: FILE: arch/frv/mb93090-mb00/pci-irq.c:52:
+	       dev != NULL

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#670: FILE: arch/frv/mb93090-mb00/pci-vdk.c:1:
+/* pci-vdk.c: MB93090-MB00 (VDK) PCI support

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#692: FILE: arch/frv/mb93090-mb00/pci-vdk.c:23:
+#include <asm/io.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bus' may be better as '(bus)' to avoid precedence issues
#707: FILE: arch/frv/mb93090-mb00/pci-vdk.c:38:
+#define CONFIG_CMD(bus, dev, where) \
+	(0x80000000 | (bus->number << 16) | (devfn << 8) | (where & ~3))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'where' may be better as '(where)' to avoid precedence issues
#707: FILE: arch/frv/mb93090-mb00/pci-vdk.c:38:
+#define CONFIG_CMD(bus, dev, where) \
+	(0x80000000 | (bus->number << 16) | (devfn << 8) | (where & ~3))

CHECK:SPACING: No space is necessary after a cast
#710: FILE: arch/frv/mb93090-mb00/pci-vdk.c:41:
+#define __set_PciCfgAddr(A) writel((A), (volatile void __iomem *) __region_CS1 + 0x80)

CHECK:CAMELCASE: Avoid CamelCase: <__set_PciCfgAddr>
#710: FILE: arch/frv/mb93090-mb00/pci-vdk.c:41:
+#define __set_PciCfgAddr(A) writel((A), (volatile void __iomem *) __region_CS1 + 0x80)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#710: FILE: arch/frv/mb93090-mb00/pci-vdk.c:41:
+#define __set_PciCfgAddr(A) writel((A), (volatile void __iomem *) __region_CS1 + 0x80)

CHECK:SPACING: No space is necessary after a cast
#712: FILE: arch/frv/mb93090-mb00/pci-vdk.c:43:
+#define __get_PciCfgDataB(A) readb((volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))

CHECK:CAMELCASE: Avoid CamelCase: <__get_PciCfgDataB>
#712: FILE: arch/frv/mb93090-mb00/pci-vdk.c:43:
+#define __get_PciCfgDataB(A) readb((volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#712: FILE: arch/frv/mb93090-mb00/pci-vdk.c:43:
+#define __get_PciCfgDataB(A) readb((volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))

CHECK:SPACING: No space is necessary after a cast
#713: FILE: arch/frv/mb93090-mb00/pci-vdk.c:44:
+#define __get_PciCfgDataW(A) readw((volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))

CHECK:CAMELCASE: Avoid CamelCase: <__get_PciCfgDataW>
#713: FILE: arch/frv/mb93090-mb00/pci-vdk.c:44:
+#define __get_PciCfgDataW(A) readw((volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#713: FILE: arch/frv/mb93090-mb00/pci-vdk.c:44:
+#define __get_PciCfgDataW(A) readw((volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))

CHECK:SPACING: No space is necessary after a cast
#714: FILE: arch/frv/mb93090-mb00/pci-vdk.c:45:
+#define __get_PciCfgDataL(A) readl((volatile void __iomem *) __region_CS1 + 0x88)

CHECK:CAMELCASE: Avoid CamelCase: <__get_PciCfgDataL>
#714: FILE: arch/frv/mb93090-mb00/pci-vdk.c:45:
+#define __get_PciCfgDataL(A) readl((volatile void __iomem *) __region_CS1 + 0x88)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#714: FILE: arch/frv/mb93090-mb00/pci-vdk.c:45:
+#define __get_PciCfgDataL(A) readl((volatile void __iomem *) __region_CS1 + 0x88)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#716: FILE: arch/frv/mb93090-mb00/pci-vdk.c:47:
+#define __set_PciCfgDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))

CHECK:SPACING: No space is necessary after a cast
#716: FILE: arch/frv/mb93090-mb00/pci-vdk.c:47:
+#define __set_PciCfgDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#716: FILE: arch/frv/mb93090-mb00/pci-vdk.c:47:
+#define __set_PciCfgDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))
                            ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_PciCfgDataB>
#716: FILE: arch/frv/mb93090-mb00/pci-vdk.c:47:
+#define __set_PciCfgDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#716: FILE: arch/frv/mb93090-mb00/pci-vdk.c:47:
+#define __set_PciCfgDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 3))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#717: FILE: arch/frv/mb93090-mb00/pci-vdk.c:48:
+#define __set_PciCfgDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))

CHECK:SPACING: No space is necessary after a cast
#717: FILE: arch/frv/mb93090-mb00/pci-vdk.c:48:
+#define __set_PciCfgDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#717: FILE: arch/frv/mb93090-mb00/pci-vdk.c:48:
+#define __set_PciCfgDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))
                            ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_PciCfgDataW>
#717: FILE: arch/frv/mb93090-mb00/pci-vdk.c:48:
+#define __set_PciCfgDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#717: FILE: arch/frv/mb93090-mb00/pci-vdk.c:48:
+#define __set_PciCfgDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x88 + ((A) & 2))

CHECK:SPACING: No space is necessary after a cast
#718: FILE: arch/frv/mb93090-mb00/pci-vdk.c:49:
+#define __set_PciCfgDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x88)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#718: FILE: arch/frv/mb93090-mb00/pci-vdk.c:49:
+#define __set_PciCfgDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x88)
                            ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_PciCfgDataL>
#718: FILE: arch/frv/mb93090-mb00/pci-vdk.c:49:
+#define __set_PciCfgDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x88)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#718: FILE: arch/frv/mb93090-mb00/pci-vdk.c:49:
+#define __set_PciCfgDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x88)

CHECK:SPACING: No space is necessary after a cast
#720: FILE: arch/frv/mb93090-mb00/pci-vdk.c:51:
+#define __get_PciBridgeDataB(A) readb((volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:CAMELCASE: Avoid CamelCase: <__get_PciBridgeDataB>
#720: FILE: arch/frv/mb93090-mb00/pci-vdk.c:51:
+#define __get_PciBridgeDataB(A) readb((volatile void __iomem *) __region_CS1 + 0x800 + (A))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#720: FILE: arch/frv/mb93090-mb00/pci-vdk.c:51:
+#define __get_PciBridgeDataB(A) readb((volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:SPACING: No space is necessary after a cast
#721: FILE: arch/frv/mb93090-mb00/pci-vdk.c:52:
+#define __get_PciBridgeDataW(A) readw((volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:CAMELCASE: Avoid CamelCase: <__get_PciBridgeDataW>
#721: FILE: arch/frv/mb93090-mb00/pci-vdk.c:52:
+#define __get_PciBridgeDataW(A) readw((volatile void __iomem *) __region_CS1 + 0x800 + (A))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#721: FILE: arch/frv/mb93090-mb00/pci-vdk.c:52:
+#define __get_PciBridgeDataW(A) readw((volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:SPACING: No space is necessary after a cast
#722: FILE: arch/frv/mb93090-mb00/pci-vdk.c:53:
+#define __get_PciBridgeDataL(A) readl((volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:CAMELCASE: Avoid CamelCase: <__get_PciBridgeDataL>
#722: FILE: arch/frv/mb93090-mb00/pci-vdk.c:53:
+#define __get_PciBridgeDataL(A) readl((volatile void __iomem *) __region_CS1 + 0x800 + (A))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#722: FILE: arch/frv/mb93090-mb00/pci-vdk.c:53:
+#define __get_PciBridgeDataL(A) readl((volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:SPACING: No space is necessary after a cast
#724: FILE: arch/frv/mb93090-mb00/pci-vdk.c:55:
+#define __set_PciBridgeDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#724: FILE: arch/frv/mb93090-mb00/pci-vdk.c:55:
+#define __set_PciBridgeDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))
                               ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_PciBridgeDataB>
#724: FILE: arch/frv/mb93090-mb00/pci-vdk.c:55:
+#define __set_PciBridgeDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#724: FILE: arch/frv/mb93090-mb00/pci-vdk.c:55:
+#define __set_PciBridgeDataB(A,V) writeb((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:SPACING: No space is necessary after a cast
#725: FILE: arch/frv/mb93090-mb00/pci-vdk.c:56:
+#define __set_PciBridgeDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#725: FILE: arch/frv/mb93090-mb00/pci-vdk.c:56:
+#define __set_PciBridgeDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))
                               ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_PciBridgeDataW>
#725: FILE: arch/frv/mb93090-mb00/pci-vdk.c:56:
+#define __set_PciBridgeDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#725: FILE: arch/frv/mb93090-mb00/pci-vdk.c:56:
+#define __set_PciBridgeDataW(A,V) writew((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

CHECK:SPACING: No space is necessary after a cast
#726: FILE: arch/frv/mb93090-mb00/pci-vdk.c:57:
+#define __set_PciBridgeDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#726: FILE: arch/frv/mb93090-mb00/pci-vdk.c:57:
+#define __set_PciBridgeDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))
                               ^

CHECK:CAMELCASE: Avoid CamelCase: <__set_PciBridgeDataL>
#726: FILE: arch/frv/mb93090-mb00/pci-vdk.c:57:
+#define __set_PciBridgeDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#726: FILE: arch/frv/mb93090-mb00/pci-vdk.c:57:
+#define __set_PciBridgeDataL(A,V) writel((V), (volatile void __iomem *) __region_CS1 + 0x800 + (A))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#749: FILE: arch/frv/mb93090-mb00/pci-vdk.c:80:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#749: FILE: arch/frv/mb93090-mb00/pci-vdk.c:80:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: arch/frv/mb93090-mb00/pci-vdk.c:98:
+		BUG();

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#782: FILE: arch/frv/mb93090-mb00/pci-vdk.c:113:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#782: FILE: arch/frv/mb93090-mb00/pci-vdk.c:113:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#792: FILE: arch/frv/mb93090-mb00/pci-vdk.c:123:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#792: FILE: arch/frv/mb93090-mb00/pci-vdk.c:123:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#802: FILE: arch/frv/mb93090-mb00/pci-vdk.c:133:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#802: FILE: arch/frv/mb93090-mb00/pci-vdk.c:133:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#809: FILE: arch/frv/mb93090-mb00/pci-vdk.c:140:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#838: FILE: arch/frv/mb93090-mb00/pci-vdk.c:169:
+		printk("PCI: VDK Bridge device:vendor: %08x\n", id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#843: FILE: arch/frv/mb93090-mb00/pci-vdk.c:174:
+	printk("PCI: VDK Bridge: Sanity check failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#856: FILE: arch/frv/mb93090-mb00/pci-vdk.c:187:
+		printk("PCI: Using configuration frv\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#877: FILE: arch/frv/mb93090-mb00/pci-vdk.c:208:
+	int mirror = PCI_DEVFN(16,0);
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#881: FILE: arch/frv/mb93090-mb00/pci-vdk.c:212:
+	for (ln=b->devices.next; ln != &b->devices; ln=ln->next) {
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#881: FILE: arch/frv/mb93090-mb00/pci-vdk.c:212:
+	for (ln=b->devices.next; ln != &b->devices; ln=ln->next) {
 	                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#885: FILE: arch/frv/mb93090-mb00/pci-vdk.c:216:
+		for (mn=ln->next; mn != &b->devices; mn=mn->next) {
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#885: FILE: arch/frv/mb93090-mb00/pci-vdk.c:216:
+		for (mn=ln->next; mn != &b->devices; mn=mn->next) {
 		                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#892: FILE: arch/frv/mb93090-mb00/pci-vdk.c:223:
+			for(i=0; i<PCI_NUM_RESOURCES; i++)
 			     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#892: FILE: arch/frv/mb93090-mb00/pci-vdk.c:223:
+			for(i=0; i<PCI_NUM_RESOURCES; i++)
 			          ^

ERROR:SPACING: space required before the open parenthesis '('
#892: FILE: arch/frv/mb93090-mb00/pci-vdk.c:223:
+			for(i=0; i<PCI_NUM_RESOURCES; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#904: FILE: arch/frv/mb93090-mb00/pci-vdk.c:235:
+	printk("PCI: Ignoring ghost devices on bus %02x\n", b->number);

CHECK:BRACES: braces {} should be used on all arms of this statement
#909: FILE: arch/frv/mb93090-mb00/pci-vdk.c:240:
+		if (d->devfn >= mirror) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#913: FILE: arch/frv/mb93090-mb00/pci-vdk.c:244:
+		} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#931: FILE: arch/frv/mb93090-mb00/pci-vdk.c:262:
+	printk("PCI: Peer bridge fixup\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#932: FILE: arch/frv/mb93090-mb00/pci-vdk.c:263:
+	for (n=0; n <= pcibios_last_bus; n++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#938: FILE: arch/frv/mb93090-mb00/pci-vdk.c:269:
+		for(dev.devfn=0; dev.devfn<256; dev.devfn += 8)
 		             ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#938: FILE: arch/frv/mb93090-mb00/pci-vdk.c:269:
+		for(dev.devfn=0; dev.devfn<256; dev.devfn += 8)
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#938: FILE: arch/frv/mb93090-mb00/pci-vdk.c:269:
+		for(dev.devfn=0; dev.devfn<256; dev.devfn += 8)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#941: FILE: arch/frv/mb93090-mb00/pci-vdk.c:272:
+				printk("Found device at %02x:%02x [%04x]\n", n, dev.devfn, l);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#942: FILE: arch/frv/mb93090-mb00/pci-vdk.c:273:
+				printk("PCI: Discovered peer bus %02x\n", n);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#961: FILE: arch/frv/mb93090-mb00/pci-vdk.c:292:
+	printk("PCI: Fixing base address flags for device %s\n", d->slot_name);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#962: FILE: arch/frv/mb93090-mb00/pci-vdk.c:293:
+	for(i=0; i<4; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#962: FILE: arch/frv/mb93090-mb00/pci-vdk.c:293:
+	for(i=0; i<4; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#962: FILE: arch/frv/mb93090-mb00/pci-vdk.c:293:
+	for(i=0; i<4; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#975: FILE: arch/frv/mb93090-mb00/pci-vdk.c:306:
+	printk("PCI: IDE base address fixup for %s\n", d->slot_name);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#976: FILE: arch/frv/mb93090-mb00/pci-vdk.c:307:
+	for(i=0; i<4; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#976: FILE: arch/frv/mb93090-mb00/pci-vdk.c:307:
+	for(i=0; i<4; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#976: FILE: arch/frv/mb93090-mb00/pci-vdk.c:307:
+	for(i=0; i<4; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#978: FILE: arch/frv/mb93090-mb00/pci-vdk.c:309:
+		struct resource *r = &d->resource[i];
+		if ((r->start & ~0x80) == 0x374) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#993: FILE: arch/frv/mb93090-mb00/pci-vdk.c:324:
+	printk("PCI: IDE base address trash cleared for %s\n", d->slot_name);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#994: FILE: arch/frv/mb93090-mb00/pci-vdk.c:325:
+	for(i=0; i<4; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#994: FILE: arch/frv/mb93090-mb00/pci-vdk.c:325:
+	for(i=0; i<4; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#994: FILE: arch/frv/mb93090-mb00/pci-vdk.c:325:
+	for(i=0; i<4; i++)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#995: FILE: arch/frv/mb93090-mb00/pci-vdk.c:326:
+		d->resource[i].start = d->resource[i].end = d->resource[i].flags = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#998: FILE: arch/frv/mb93090-mb00/pci-vdk.c:329:
+static void __devinit  pci_fixup_latency(struct pci_dev *d)

ERROR:POINTER_LOCATION: "foo __devinit  bar" should be "foo __devinit bar"
#998: FILE: arch/frv/mb93090-mb00/pci-vdk.c:329:
+static void __devinit  pci_fixup_latency(struct pci_dev *d)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1021: FILE: arch/frv/mb93090-mb00/pci-vdk.c:352:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1022: FILE: arch/frv/mb93090-mb00/pci-vdk.c:353:
+	printk("### PCIBIOS_FIXUP_BUS(%d)\n",bus->number);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1022: FILE: arch/frv/mb93090-mb00/pci-vdk.c:353:
+	printk("### PCIBIOS_FIXUP_BUS(%d)\n",bus->number);
 	                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1030: FILE: arch/frv/mb93090-mb00/pci-vdk.c:361:
+		struct pci_dev *dev;
+		for (ln=bus->devices.next; ln != &bus->devices; ln=ln->next) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1030: FILE: arch/frv/mb93090-mb00/pci-vdk.c:361:
+		for (ln=bus->devices.next; ln != &bus->devices; ln=ln->next) {
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1030: FILE: arch/frv/mb93090-mb00/pci-vdk.c:361:
+		for (ln=bus->devices.next; ln != &bus->devices; ln=ln->next) {
 		                                                  ^

CHECK:SPACING: No space is necessary after a cast
#1059: FILE: arch/frv/mb93090-mb00/pci-vdk.c:390:
+	*(volatile uint32_t *) (__region_CS1 + 0x848) = 0xe0000000;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1059: FILE: arch/frv/mb93090-mb00/pci-vdk.c:390:
+	*(volatile uint32_t *) (__region_CS1 + 0x848) = 0xe0000000;

CHECK:SPACING: No space is necessary after a cast
#1060: FILE: arch/frv/mb93090-mb00/pci-vdk.c:391:
+	*(volatile uint32_t *) (__region_CS1 + 0x8b8) = 0x00000000;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1060: FILE: arch/frv/mb93090-mb00/pci-vdk.c:391:
+	*(volatile uint32_t *) (__region_CS1 + 0x8b8) = 0x00000000;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1066: FILE: arch/frv/mb93090-mb00/pci-vdk.c:397:
+	mb();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1068: FILE: arch/frv/mb93090-mb00/pci-vdk.c:399:
+	*(volatile unsigned long *)(__region_CS2+0x01300014) == 1;
 	                                        ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1068: FILE: arch/frv/mb93090-mb00/pci-vdk.c:399:
+	*(volatile unsigned long *)(__region_CS2+0x01300014) == 1;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1074: FILE: arch/frv/mb93090-mb00/pci-vdk.c:405:
+	printk("PCI IO window:  %08lx-%08lx\n", ioport_resource.start, ioport_resource.end);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1084: FILE: arch/frv/mb93090-mb00/pci-vdk.c:415:
+	printk("PCI MEM window: %08lx-%08lx\n", iomem_resource.start, iomem_resource.end);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1085: FILE: arch/frv/mb93090-mb00/pci-vdk.c:416:
+	printk("PCI DMA memory: %08lx-%08lx\n", dma_coherent_mem_start, dma_coherent_mem_end);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1091: FILE: arch/frv/mb93090-mb00/pci-vdk.c:422:
+	if (dir)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1093: FILE: arch/frv/mb93090-mb00/pci-vdk.c:424:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1094: FILE: arch/frv/mb93090-mb00/pci-vdk.c:425:
+		printk("PCI: No PCI bus detected\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1098: FILE: arch/frv/mb93090-mb00/pci-vdk.c:429:
+	printk("PCI: Probing PCI hardware\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1117: FILE: arch/frv/mb93090-mb00/pci-vdk.c:448:
+		pcibios_last_bus = simple_strtol(str+8, NULL, 0);
 		                                    ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1117: FILE: arch/frv/mb93090-mb00/pci-vdk.c:448:
+		pcibios_last_bus = simple_strtol(str+8, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1127: FILE: arch/frv/mb93090-mb00/pci-vdk.c:458:
+	if ((err = pcibios_enable_resources(dev, mask)) < 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 75 warnings, 54 checks, 1071 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
