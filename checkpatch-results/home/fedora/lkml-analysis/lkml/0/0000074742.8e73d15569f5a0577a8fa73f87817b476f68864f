WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#64: FILE: include/linux/proc_fs.h:252:
struct vfsmount **);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: include/linux/proc_fs.h:253:
+               int (*proc_read)(struct task_struct *task, char *page, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: include/linux/proc_fs.h:253:
+               int (*proc_read)(struct task_struct *task, char *page, $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: include/linux/proc_fs.h:253:
+               int (*proc_read)(struct task_struct *task, char *page, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: include/linux/proc_fs.h:254:
+               int (*proc_read)(struct task_struct *task, char *page, 
         } op;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: fs/proc/base.c:412:
+static int proc_pid_environ(struct task_struct *task, char * buffer, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/proc/base.c:412:
+static int proc_pid_environ(struct task_struct *task, char * buffer, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#78: FILE: fs/proc/base.c:412:
+static int proc_pid_environ(struct task_struct *task, char * buffer, 
loff_t *pos)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: fs/proc/base.c:413:
+static int proc_pid_environ(struct task_struct *task, char * buffer, 
  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: fs/proc/base.c:415:
+       int p = *pos;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: fs/proc/base.c:419:
+          be larger than a page, so we read sequential chunks of the$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#86: FILE: fs/proc/base.c:419:
+       /* proc_pid_environ is a 'special case' - the required data could
+          be larger than a page, so we read sequential chunks of the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: fs/proc/base.c:420:
+          environment data into the buffer using the supplied offset */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#87: FILE: fs/proc/base.c:420:
+          environment data into the buffer using the supplied offset */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: fs/proc/base.c:421:
+       if (p < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#88: FILE: fs/proc/base.c:421:
+       if (p < 0)
+               return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: fs/proc/base.c:422:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: fs/proc/base.c:422:
+               return -EINVAL;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#91: FILE: fs/proc/base.c:424:
         if (mm) {
+               unsigned int len = mm->env_end - (mm->env_start + p);

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: fs/proc/base.c:425:
+               unsigned int len = mm->env_end - (mm->env_start + p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: fs/proc/base.c:425:
+               unsigned int len = mm->env_end - (mm->env_start + p);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: fs/proc/base.c:428:
+               res = access_process_vm(task, (mm->env_start + p), $

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: fs/proc/base.c:428:
+               res = access_process_vm(task, (mm->env_start + p), $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: fs/proc/base.c:428:
+               res = access_process_vm(task, (mm->env_start + p), $

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: fs/proc/base.c:429:
+               /* the calling routine (proc_info_read) needs to know we've$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: fs/proc/base.c:429:
+               res = access_process_vm(task, (mm->env_start + p), 
+               /* the calling routine (proc_info_read) needs to know we've

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: fs/proc/base.c:430:
+                  used the offset to read the pid data */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#101: FILE: fs/proc/base.c:430:
+               /* the calling routine (proc_info_read) needs to know we've
+                  used the offset to read the pid data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#101: FILE: fs/proc/base.c:430:
+                  used the offset to read the pid data */

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: fs/proc/base.c:431:
+               *pos += res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: fs/proc/base.c:431:
+               *pos += res;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: fs/proc/base.c:440:
+static int proc_pid_cmdline(struct task_struct *task, char * buffer, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: fs/proc/base.c:440:
+static int proc_pid_cmdline(struct task_struct *task, char * buffer, 

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#112: FILE: fs/proc/base.c:440:
+static int proc_pid_cmdline(struct task_struct *task, char * buffer, 
loff_t *pos)
  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: fs/proc/base.c:441:
+static int proc_pid_cmdline(struct task_struct *task, char * buffer, 
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: fs/proc/base.c:477:
+static int proc_pid_auxv(struct task_struct *task, char *buffer, loff_t $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#122: FILE: fs/proc/base.c:477:
+static int proc_pid_auxv(struct task_struct *task, char *buffer, loff_t 
*pos)
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: fs/proc/base.c:501:
+static int proc_pid_wchan(struct task_struct *task, char *buffer, $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#133: FILE: fs/proc/base.c:501:
+static int proc_pid_wchan(struct task_struct *task, char *buffer, 
loff_t *pos)
  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/proc/base.c:502:
+static int proc_pid_wchan(struct task_struct *task, char *buffer, 
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: fs/proc/base.c:521:
+static int proc_pid_schedstat(struct task_struct *task, char *buffer, $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#143: FILE: fs/proc/base.c:521:
+static int proc_pid_schedstat(struct task_struct *task, char *buffer, 
loff_t *pos)
  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: fs/proc/base.c:522:
+static int proc_pid_schedstat(struct task_struct *task, char *buffer, 
  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: fs/proc/base.c:532:
+static int proc_oom_score(struct task_struct *task, char *buffer, $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#153: FILE: fs/proc/base.c:532:
+static int proc_oom_score(struct task_struct *task, char *buffer, 
loff_t *pos)
  {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/proc/base.c:533:
+static int proc_oom_score(struct task_struct *task, char *buffer, 
  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: fs/proc/base.c:760:
+       loff_t pos = *ppos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: fs/proc/base.c:767:
+       length = PROC_I(inode)->op.proc_read(task, (char*)page, &pos);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#170: FILE: fs/proc/base.c:767:
+       length = PROC_I(inode)->op.proc_read(task, (char*)page, &pos);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: fs/proc/base.c:769:
+       if (length >= 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#175: FILE: fs/proc/base.c:769:
+       if (length >= 0) {
+               if (pos != *ppos) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: fs/proc/base.c:770:
+               if (pos != *ppos) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: fs/proc/base.c:770:
+               if (pos != *ppos) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 0)
#176: FILE: fs/proc/base.c:770:
+               if (pos != *ppos) {
[...]
sections

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/proc/base.c:771:
+                       /* we are using the buffer to store subsequent $

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: fs/proc/base.c:771:
+                       /* we are using the buffer to store subsequent $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: fs/proc/base.c:772:
+                          of the proc_pid data - so the offset into the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: fs/proc/base.c:772:
+                          of the proc_pid data - so the offset into the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#179: FILE: fs/proc/base.c:772:
+                       /* we are using the buffer to store subsequent 
+                          of the proc_pid data - so the offset into the 

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: fs/proc/base.c:773:
+                          will always be 0 - the offset is used to get the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: fs/proc/base.c:774:
+                          original data */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#182: FILE: fs/proc/base.c:774:
+                          original data */

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/proc/base.c:775:
+                       pos = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/proc/base.c:775:
+                       pos = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/proc/base.c:776:
+                       length = simple_read_from_buffer(buf, count, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/proc/base.c:776:
+                       length = simple_read_from_buffer(buf, count, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/proc/base.c:776:
+                       length = simple_read_from_buffer(buf, count, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: fs/proc/base.c:777:
+                       /* need to update the 'real' offset into the data we$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: fs/proc/base.c:777:
+                       length = simple_read_from_buffer(buf, count, 
+                       /* need to update the 'real' offset into the data we

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: fs/proc/base.c:778:
+                          are reading ... */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#187: FILE: fs/proc/base.c:778:
+                       /* need to update the 'real' offset into the data we
+                          are reading ... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: fs/proc/base.c:778:
+                          are reading ... */

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: fs/proc/base.c:779:
+                       *ppos += length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/proc/base.c:779:
+                       *ppos += length;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: fs/proc/base.c:780:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: fs/proc/base.c:780:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/proc/base.c:781:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/proc/base.c:781:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#190: FILE: fs/proc/base.c:781:
+               else
+                       length = simple_read_from_buffer(buf, count, 

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#190: FILE: fs/proc/base.c:781:
+               }
+               else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: fs/proc/base.c:782:
+                       length = simple_read_from_buffer(buf, count, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: fs/proc/base.c:782:
+                       length = simple_read_from_buffer(buf, count, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/proc/base.c:782:
+                       length = simple_read_from_buffer(buf, count, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: fs/proc/base.c:783:
+                       length = simple_read_from_buffer(buf, count, 
+       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/proc/base.c:783:
+       }$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: fs/proc/internal.h:35:
+extern int proc_tid_stat(struct task_struct *,  char *, loff_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#209: FILE: fs/proc/internal.h:35:
+extern int proc_tid_stat(struct task_struct *,  char *, loff_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#209: FILE: fs/proc/internal.h:35:
+extern int proc_tid_stat(struct task_struct *,  char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#209: FILE: fs/proc/internal.h:35:
+extern int proc_tid_stat(struct task_struct *,  char *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: fs/proc/internal.h:36:
+extern int proc_tgid_stat(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#210: FILE: fs/proc/internal.h:36:
+extern int proc_tgid_stat(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#210: FILE: fs/proc/internal.h:36:
+extern int proc_tgid_stat(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#210: FILE: fs/proc/internal.h:36:
+extern int proc_tgid_stat(struct task_struct *, char *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: fs/proc/internal.h:37:
+extern int proc_pid_status(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#211: FILE: fs/proc/internal.h:37:
+extern int proc_pid_status(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#211: FILE: fs/proc/internal.h:37:
+extern int proc_pid_status(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#211: FILE: fs/proc/internal.h:37:
+extern int proc_pid_status(struct task_struct *, char *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: fs/proc/internal.h:38:
+extern int proc_pid_statm(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#212: FILE: fs/proc/internal.h:38:
+extern int proc_pid_statm(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#212: FILE: fs/proc/internal.h:38:
+extern int proc_pid_statm(struct task_struct *, char *, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#212: FILE: fs/proc/internal.h:38:
+extern int proc_pid_statm(struct task_struct *, char *, loff_t *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: fs/proc/array.c:296:
+int proc_pid_status(struct task_struct *task, char * buffer, loff_t *pos)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#223: FILE: fs/proc/array.c:296:
+int proc_pid_status(struct task_struct *task, char * buffer, loff_t *pos)
  {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#232: FILE: fs/proc/array.c:468:
+int proc_tid_stat(struct task_struct *task, char * buffer, loff_t *pos)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#232: FILE: fs/proc/array.c:468:
+int proc_tid_stat(struct task_struct *task, char * buffer, loff_t *pos)
  {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: fs/proc/array.c:473:
+int proc_tgid_stat(struct task_struct *task, char * buffer, loff_t *pos)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#238: FILE: fs/proc/array.c:473:
+int proc_tgid_stat(struct task_struct *task, char * buffer, loff_t *pos)
  {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#244: FILE: fs/proc/array.c:478:
+int proc_pid_statm(struct task_struct *task, char *buffer, loff_t *pos)
  {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 47 warnings, 13 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
