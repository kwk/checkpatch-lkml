WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
I finally have LiS running on a 2.5 kernel.  Attached is the 2.5.46 version 

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#62: FILE: sys.c:198:
+static int (*do_putpmsg) (int, void *, void *, int, int) = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACING: Unnecessary space before function pointer arguments
#62: FILE: sys.c:198:
+static int (*do_putpmsg) (int, void *, void *, int, int) = NULL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#63: FILE: sys.c:199:
+static int (*do_getpmsg) (int, void *, void *, int, int) = NULL;

WARNING:SPACING: Unnecessary space before function pointer arguments
#63: FILE: sys.c:199:
+static int (*do_getpmsg) (int, void *, void *, int, int) = NULL;

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#67: FILE: sys.c:203:
+long asmlinkage

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: sys.c:206:
+       int ret = -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#70: FILE: sys.c:206:
+       int ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LINE_SPACING: Missing a blank line after declarations
#71: FILE: sys.c:207:
+       int ret = -ENOSYS;
+       down_read(&streams_call_sem);   /* should return int, but doesn't */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: sys.c:207:
+       down_read(&streams_call_sem);   /* should return int, but doesn't */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: sys.c:208:
+       if (do_putpmsg)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#72: FILE: sys.c:208:
+       if (do_putpmsg)
+               ret = (*do_putpmsg) (fd, ctlptr, datptr, band, flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: sys.c:209:
+               ret = (*do_putpmsg) (fd, ctlptr, datptr, band, flags);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: sys.c:209:
+               ret = (*do_putpmsg) (fd, ctlptr, datptr, band, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: sys.c:210:
+       up_read(&streams_call_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: sys.c:211:
+       return ret;$

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#78: FILE: sys.c:214:
+long asmlinkage

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: sys.c:217:
+       int ret = -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#81: FILE: sys.c:217:
+       int ret = -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#82: FILE: sys.c:218:
+       int ret = -ENOSYS;
+       down_read(&streams_call_sem);   /* should return int, but doesn't */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: sys.c:218:
+       down_read(&streams_call_sem);   /* should return int, but doesn't */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: sys.c:219:
+       if (do_getpmsg)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#83: FILE: sys.c:219:
+       if (do_getpmsg)
+               ret = (*do_getpmsg) (fd, ctlptr, datptr, band, flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: sys.c:220:
+               ret = (*do_getpmsg) (fd, ctlptr, datptr, band, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: sys.c:220:
+               ret = (*do_getpmsg) (fd, ctlptr, datptr, band, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: sys.c:221:
+       up_read(&streams_call_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: sys.c:222:
+       return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: sys.c:227:
+                      int (*getpmsg) (int, void *, void *, int, int))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: sys.c:227:
+register_streams_calls(int (*putpmsg) (int, void *, void *, int, int),
+                      int (*getpmsg) (int, void *, void *, int, int))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: sys.c:227:
+                      int (*getpmsg) (int, void *, void *, int, int))$

WARNING:SPACING: Unnecessary space before function pointer arguments
#91: FILE: sys.c:227:
+                      int (*getpmsg) (int, void *, void *, int, int))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: sys.c:229:
+       int ret = -EBUSY;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#94: FILE: sys.c:230:
+       int ret = -EBUSY;
+       down_write(&streams_call_sem);  /* should return int, but doesn't */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: sys.c:230:
+       down_write(&streams_call_sem);  /* should return int, but doesn't */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: sys.c:231:
+       if (   (putpmsg == NULL || do_putpmsg == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#95: FILE: sys.c:231:
+       if (   (putpmsg == NULL || do_putpmsg == NULL)
[...]
+               do_putpmsg = putpmsg;

ERROR:SPACING: space prohibited after that open parenthesis '('
#95: FILE: sys.c:231:
+       if (   (putpmsg == NULL || do_putpmsg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!putpmsg"
#95: FILE: sys.c:231:
+       if (   (putpmsg == NULL || do_putpmsg == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!do_putpmsg"
#95: FILE: sys.c:231:
+       if (   (putpmsg == NULL || do_putpmsg == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: sys.c:232:
+           && (getpmsg == NULL || do_getpmsg == NULL)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#96: FILE: sys.c:232:
+       if (   (putpmsg == NULL || do_putpmsg == NULL)
+           && (getpmsg == NULL || do_getpmsg == NULL)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: sys.c:232:
+           && (getpmsg == NULL || do_getpmsg == NULL)) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!getpmsg"
#96: FILE: sys.c:232:
+           && (getpmsg == NULL || do_getpmsg == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!do_getpmsg"
#96: FILE: sys.c:232:
+           && (getpmsg == NULL || do_getpmsg == NULL)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: sys.c:233:
+               do_putpmsg = putpmsg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: sys.c:233:
+               do_putpmsg = putpmsg;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: sys.c:234:
+               do_getpmsg = getpmsg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: sys.c:234:
+               do_getpmsg = getpmsg;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: sys.c:235:
+               ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: sys.c:235:
+               ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: sys.c:236:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: sys.c:237:
+       up_write(&streams_call_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: sys.c:238:
+       return ret;$

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: linux/sys.h:39:
+                      int (*getpmsg) (int, void *, void *, int, int)) ;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: linux/sys.h:39:
+register_streams_calls(int (*putpmsg) (int, void *, void *, int, int),
+                      int (*getpmsg) (int, void *, void *, int, int)) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: linux/sys.h:39:
+                      int (*getpmsg) (int, void *, void *, int, int)) ;$

WARNING:SPACING: Unnecessary space before function pointer arguments
#128: FILE: linux/sys.h:39:
+                      int (*getpmsg) (int, void *, void *, int, int)) ;

WARNING:SPACING: space prohibited before semicolon
#128: FILE: linux/sys.h:39:
+                      int (*getpmsg) (int, void *, void *, int, int)) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415418.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 43 warnings, 7 checks, 79 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415418.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
