WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
On Mon, 06 Feb 2006 16:01:40 -0800 (PST) "David S. Miller" <davem@davemloft=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#113: FILE: arch/sparc64/kernel/systbls.S:77:
32_mq_open, sys_mq_unlink

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#134: FILE: include/asm-ia64/compat_wr=:84:
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#139: FILE: include/asm-ia64/compat_wrapper.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: include/asm-mips/compat_wrapper.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#183: FILE: include/asm-parisc/compat_wrapper.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: include/asm-powerpc/compat_wrapper.h:1:
+/*

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#212: FILE: include/asm-powerpc/compat_wrapper.h:8:
+#define ARG1	%r3
             	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#212: FILE: include/asm-powerpc/compat_wrapper.h:8:
+#define ARG1	%r3

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#213: FILE: include/asm-powerpc/compat_wrapper.h:9:
+#define ARG2	%r4
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#213: FILE: include/asm-powerpc/compat_wrapper.h:9:
+#define ARG2	%r4

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#214: FILE: include/asm-powerpc/compat_wrapper.h:10:
+#define ARG3	%r5
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#214: FILE: include/asm-powerpc/compat_wrapper.h:10:
+#define ARG3	%r5

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#215: FILE: include/asm-powerpc/compat_wrapper.h:11:
+#define ARG4	%r6
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#215: FILE: include/asm-powerpc/compat_wrapper.h:11:
+#define ARG4	%r6

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#216: FILE: include/asm-powerpc/compat_wrapper.h:12:
+#define ARG5	%r7
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#216: FILE: include/asm-powerpc/compat_wrapper.h:12:
+#define ARG5	%r7

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#217: FILE: include/asm-powerpc/compat_wrapper.h:13:
+#define ARG6	%r8
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#217: FILE: include/asm-powerpc/compat_wrapper.h:13:
+#define ARG6	%r8

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#219: FILE: include/asm-powerpc/compat_wrapper.h:15:
+#define compat_fn1(fn, arg)		\
+	.text;				\
+	.global	.compat_sys_ ## fn;	\
+.compat_sys_ ## fn:			\
+	extsw	arg, arg;		\
+	b	.sys_ ## fn

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#219: FILE: include/asm-powerpc/compat_wrapper.h:15:
+#define compat_fn1(fn, arg)		\
+	.text;				\
+	.global	.compat_sys_ ## fn;	\
+.compat_sys_ ## fn:			\
+	extsw	arg, arg;		\
+	b	.sys_ ## fn

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#226: FILE: include/asm-powerpc/compat_wrapper.h:22:
+#define compat_fn2(fn, arg1, arg2)	\
+	.text;				\
+	.global	.compat_sys_ ## fn;	\
+.compat_sys_ ## fn:			\
+	extsw	arg1, arg1;		\
+	extsw	arg2, arg2;		\
+	b	.sys_ ## fn

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#226: FILE: include/asm-powerpc/compat_wrapper.h:22:
+#define compat_fn2(fn, arg1, arg2)	\
+	.text;				\
+	.global	.compat_sys_ ## fn;	\
+.compat_sys_ ## fn:			\
+	extsw	arg1, arg1;		\
+	extsw	arg2, arg2;		\
+	b	.sys_ ## fn

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#226: FILE: include/asm-powerpc/compat_wrapper.h:22:
+#define compat_fn2(fn, arg1, arg2)	\
+	.text;				\
+	.global	.compat_sys_ ## fn;	\
+.compat_sys_ ## fn:			\
+	extsw	arg1, arg1;		\
+	extsw	arg2, arg2;		\
+	b	.sys_ ## fn

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#240: FILE: include/asm-s390/compat_wrapper.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#262: FILE: include/asm-sparc64/compat_wrapper.h:1:
+/*

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#270: FILE: include/asm-sparc64/compat_wrapper.h:9:
+#define ARG1	%o0
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#270: FILE: include/asm-sparc64/compat_wrapper.h:9:
+#define ARG1	%o0

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#271: FILE: include/asm-sparc64/compat_wrapper.h:10:
+#define ARG2	%o1
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#271: FILE: include/asm-sparc64/compat_wrapper.h:10:
+#define ARG2	%o1

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#272: FILE: include/asm-sparc64/compat_wrapper.h:11:
+#define ARG3	%o2
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#272: FILE: include/asm-sparc64/compat_wrapper.h:11:
+#define ARG3	%o2

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#273: FILE: include/asm-sparc64/compat_wrapper.h:12:
+#define ARG4	%o3
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#273: FILE: include/asm-sparc64/compat_wrapper.h:12:
+#define ARG4	%o3

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#274: FILE: include/asm-sparc64/compat_wrapper.h:13:
+#define ARG5	%o4
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#274: FILE: include/asm-sparc64/compat_wrapper.h:13:
+#define ARG5	%o4

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#275: FILE: include/asm-sparc64/compat_wrapper.h:14:
+#define ARG6	%o5
             	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#275: FILE: include/asm-sparc64/compat_wrapper.h:14:
+#define ARG6	%o5

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#277: FILE: include/asm-sparc64/compat_wrapper.h:16:
+#define compat_fn1(fn, arg)			\
+	.text;					\
+	.align	32;				\
+	.globl	compat_sys_ ## fn;		\
+compat_sys_ ## fn:				\
+	sethi	%hi(sys_ ## fn), %g1;		\
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
+	sra	arg, 0, arg

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#277: FILE: include/asm-sparc64/compat_wrapper.h:16:
+#define compat_fn1(fn, arg)			\
+	.text;					\
+	.align	32;				\
+	.globl	compat_sys_ ## fn;		\
+compat_sys_ ## fn:				\
+	sethi	%hi(sys_ ## fn), %g1;		\
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
+	sra	arg, 0, arg

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#282: FILE: include/asm-sparc64/compat_wrapper.h:21:
+	sethi	%hi(sys_ ## fn), %g1;		\
 	     	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#282: FILE: include/asm-sparc64/compat_wrapper.h:21:
+	sethi	%hi(sys_ ## fn), %g1;		\
 	     	                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#283: FILE: include/asm-sparc64/compat_wrapper.h:22:
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
 	    	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#283: FILE: include/asm-sparc64/compat_wrapper.h:22:
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
 	    	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#283: FILE: include/asm-sparc64/compat_wrapper.h:22:
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
 	    	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#286: FILE: include/asm-sparc64/compat_wrapper.h:25:
+#define compat_fn2(fn, arg1, arg2)		\
+	.text;					\
+	.align	32;				\
+	.globl	compat_sys_ ## fn;		\
+compat_sys_ ## fn:				\
+	sethi	%hi(sys_ ## fn), %g1;		\
+	sra	arg1, 0, arg1;			\
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
+	sra	arg2, 0, arg2

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#286: FILE: include/asm-sparc64/compat_wrapper.h:25:
+#define compat_fn2(fn, arg1, arg2)		\
+	.text;					\
+	.align	32;				\
+	.globl	compat_sys_ ## fn;		\
+compat_sys_ ## fn:				\
+	sethi	%hi(sys_ ## fn), %g1;		\
+	sra	arg1, 0, arg1;			\
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
+	sra	arg2, 0, arg2

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#291: FILE: include/asm-sparc64/compat_wrapper.h:30:
+	sethi	%hi(sys_ ## fn), %g1;		\
 	     	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#291: FILE: include/asm-sparc64/compat_wrapper.h:30:
+	sethi	%hi(sys_ ## fn), %g1;		\
 	     	                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#293: FILE: include/asm-sparc64/compat_wrapper.h:32:
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
 	    	^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#293: FILE: include/asm-sparc64/compat_wrapper.h:32:
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
 	    	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#293: FILE: include/asm-sparc64/compat_wrapper.h:32:
+	jmpl	%g1 + %lo(sys_ ## fn), %g0;	\
 	    	                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#302: FILE: include/asm-x86_64/compat_wrapper.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: include/linux/compat.h:172:
+asmlinkage long compat_sys_mkdirat(unsigned int dfd,
+		const char __user * pathname, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#327: FILE: include/linux/compat.h:172:
+		const char __user * pathname, int mode);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: include/linux/compat.h:174:
+asmlinkage long compat_sys_mknodat(unsigned int dfd,
+		const char __user *filename, int mode, unsigned dev);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#329: FILE: include/linux/compat.h:174:
+		const char __user *filename, int mode, unsigned dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: include/linux/compat.h:176:
+asmlinkage long compat_sys_fchownat(unsigned int dfd,
+		const char __user *filename, uid_t user, gid_t group, int flag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: include/linux/compat.h:178:
+asmlinkage long compat_sys_unlinkat(unsigned int dfd,
+		const char __user *pathname, int flag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: include/linux/compat.h:180:
+asmlinkage long compat_sys_renameat(unsigned int olddfd,
+		const char __user *oldname, unsigned int newdfd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: include/linux/compat.h:183:
+asmlinkage long compat_sys_linkat(unsigned int olddfd,
+		const char __user *oldname, unsigned int newdfd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: include/linux/compat.h:186:
+asmlinkage long compat_sys_symlinkat(const char __user *oldname,
+		unsigned int newdfd, const char __user *newname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: include/linux/compat.h:188:
+asmlinkage long compat_sys_readlinkat(unsigned int dfd,
+		const char __user *path, char __user *buf, int bufsiz);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: include/linux/compat.h:190:
+asmlinkage long compat_sys_fchmodat(unsigned int dfd,
+		const char __user *filename, mode_t mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: include/linux/compat.h:192:
+asmlinkage long compat_sys_faccessat(unsigned int dfd,
+		const char __user *filename, int mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: include/linux/compat.h:192:
+asmlinkage long compat_sys_faccessat(unsigned int dfd,
=20

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#370: FILE: kernel/compat_wrapper.S:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107251.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 11 warnings, 39 checks, 217 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107251.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
