WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
in the patch attached I improved the memory usage for my data structures by=

WARNING:TYPO_SPELLING: 'filesytem' may be misspelled - perhaps 'filesystem'?
#90: 
> except for the odd filesytem like NFS which will oops.  But it's good
                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#114: FILE: arch/i386/Kconfig:374:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#115: FILE: arch/i386/Kconfig:375:
+config SWAP_PREFETCH
+	tristate "Prefetch swapped memory"
+	depends on SWAP
+	help
+	  This option enables the kernel to prefetch swapped memory pages
+	  when idle.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/swap.h:158:
+extern unsigned int nr_avail_buffer_pages(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/swap.h:159:
+extern unsigned int nr_avail_pagecache_pages(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: include/linux/swap_prefetch.h:1:
+#ifndef _LINUX_SWAP_PREFETCH_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#181: FILE: include/linux/swap_prefetch.h:15:
+	spinlock_t		lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: include/linux/swap_prefetch.h:23:
+static inline void add_to_swapped_list(struct address_space *mapping,
+							unsigned long index)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#193: FILE: include/linux/swap_prefetch.h:27:
+=20
 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#194: FILE: include/linux/swap_prefetch.h:28:
+	entry =3D kmem_cache_alloc(swapped_list.cache, GFP_ATOMIC);
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: include/linux/swap_prefetch.h:29:
+	if(entry) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#196: FILE: include/linux/swap_prefetch.h:30:
+		entry->swp_entry.val =3D index;
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#197: FILE: include/linux/swap_prefetch.h:31:
+		entry->mapping       =3D mapping;
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#200: FILE: include/linux/swap_prefetch.h:34:
+		error =3D radix_tree_insert(&mapping->swap_tree, index, entry);
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: include/linux/swap_prefetch.h:35:
+		if(!error)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: include/linux/swap_prefetch.h:44:
+static inline void remove_from_swapped_list(struct address_space *mapping,
+							unsigned long index)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#215: FILE: include/linux/swap_prefetch.h:49:
+	entry =3D radix_tree_delete(&mapping->swap_tree, index);
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#216: FILE: include/linux/swap_prefetch.h:50:
+	if(entry) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#242: FILE: kernel/ksyms.c:76:
+EXPORT_SYMBOL(swapper_space);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#243: FILE: kernel/ksyms.c:77:
+EXPORT_SYMBOL(swapin_readahead);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#244: FILE: kernel/ksyms.c:78:
+EXPORT_SYMBOL(do_page_cache_readahead);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#245: FILE: kernel/ksyms.c:79:
+EXPORT_SYMBOL(nr_avail_pagecache_pages);

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: mm/filemap.c:227:
+	int error;
+	remove_from_swapped_list(mapping, offset);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#288: FILE: mm/filemap.c:229:
+	error =3D radix_tree_preload(gfp_mask & ~__GFP_HIGHMEM);
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#302: FILE: mm/page_alloc.c:792:
+	unsigned long avail =3D 0;
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#305: FILE: mm/page_alloc.c:795:
+		struct zonelist *zonelist =3D pgdat->node_zonelists + offset;
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#306: FILE: mm/page_alloc.c:796:
+		struct zone **zonep =3D zonelist->zones;
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#308: FILE: mm/page_alloc.c:798:
+		unsigned long low =3D 0;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#310: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#310: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#310: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#310: FILE: mm/page_alloc.c:800:
+		for (zone =3D *zonep++; zone; zone =3D *zonep++) {
 		                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#311: FILE: mm/page_alloc.c:801:
+			unsigned long local_free =3D zone->free_pages;
 			                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#312: FILE: mm/page_alloc.c:802:
+			unsigned long local_low  =3D zone->pages_low;
 			                         ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#313: FILE: mm/page_alloc.c:803:
+			unsigned long local_low  =3D zone->pages_low;
+		=09

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#313: FILE: mm/page_alloc.c:803:
+		=09
 		^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#314: FILE: mm/page_alloc.c:804:
+			low +=3D local_low;
 			    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#315: FILE: mm/page_alloc.c:805:
+			if (local_free > low) {
+				avail =3D max(avail, local_free - low);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#316: FILE: mm/page_alloc.c:806:
+				avail =3D max(avail, local_free - low);
 				      ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#318: FILE: mm/page_alloc.c:808:
+			low +=3D local_low * sysctl_lower_zone_protection;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#362: FILE: mm/swap.c:25:
+struct swapped_list_t swapped_list =3D {
                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#363: FILE: mm/swap.c:26:
+	.lock =3D SPIN_LOCK_UNLOCKED,
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#364: FILE: mm/swap.c:27:
+	.head =3D LIST_HEAD_INIT(swapped_list.head),
 	      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: mm/swap.c:401:
+ ^Iswapped_list.cache =3D kmem_cache_create("swapped_entry",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: mm/swap.c:401:
+ ^Iswapped_list.cache =3D kmem_cache_create("swapped_entry",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: mm/swap.c:401:
+ ^Iswapped_list.cache =3D kmem_cache_create("swapped_entry",$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#378: FILE: mm/swap.c:401:
+ 	swapped_list.cache =3D kmem_cache_create("swapped_entry",
  	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: mm/swap.c:403:
+	if(!swapped_list.cache)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#388: FILE: mm/swap_prefetch.c:1:
+#include <linux/init.h>

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#395: FILE: mm/swap_prefetch.c:8:
+static int reserved_pages =3D RESERVED_PAGES;
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#396: FILE: mm/swap_prefetch.c:9:
+static int interval       =3D INTERVAL;
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#398: FILE: mm/swap_prefetch.c:11:
+MODULE_PARM(reserved_pages,"i");
                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: mm/swap_prefetch.c:13:
+MODULE_PARM_DESC(reserved_pages,
+	"count of pagechache pages to let free (default 50)");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: mm/swap_prefetch.c:15:
+MODULE_PARM(interval,"i");
                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: mm/swap_prefetch.c:17:
+MODULE_PARM_DESC(interval,
+	"delay in seconds to wait between memory checks (default 60)");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#414: FILE: mm/swap_prefetch.c:27:
+static struct timer_list prefetch_timer =3D
                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#429: FILE: mm/swap_prefetch.c:42:
+	prefetch_timer.expires =3D jiffies + interval * HZ;
 	                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#438: FILE: mm/swap_prefetch.c:51:
+	printk(KERN_INFO "Available pages before: %d\n", nr_avail_pagecache_pages=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#438: FILE: mm/swap_prefetch.c:51:
+	printk(KERN_INFO "Available pages before: %d\n", nr_avail_pagecache_pages=
 	                                                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#441: FILE: mm/swap_prefetch.c:53:
+	while(nr_avail_pagecache_pages() > reserved_pages) {

ERROR:SPACING: space required before the open parenthesis '('
#445: FILE: mm/swap_prefetch.c:57:
+		if(list_empty(&swapped_list.head)) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#449: FILE: mm/swap_prefetch.c:61:
+		entry =3D list_entry(swapped_list.head.next, struct swapped_entry_t, hea=
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#449: FILE: mm/swap_prefetch.c:61:
+		entry =3D list_entry(swapped_list.head.next, struct swapped_entry_t, hea=
 		                                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#455: FILE: mm/swap_prefetch.c:66:
+		if(entry->mapping =3D=3D &swapper_space)
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#455: FILE: mm/swap_prefetch.c:66:
+		if(entry->mapping =3D=3D &swapper_space)
 		                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#455: FILE: mm/swap_prefetch.c:66:
+		if(entry->mapping =3D=3D &swapper_space)
 		                         ^

ERROR:SPACING: space required before the open parenthesis '('
#455: FILE: mm/swap_prefetch.c:66:
+		if(entry->mapping =3D=3D &swapper_space)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#455: FILE: mm/swap_prefetch.c:66:
+		if(entry->mapping =3D=3D &swapper_space)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#462: FILE: mm/swap_prefetch.c:73:
+	printk(KERN_INFO "Available pages after: %d\n", nr_avail_pagecache_pages(=

ERROR:SPACING: spaces required around that '=' (ctx:BxE)
#462: FILE: mm/swap_prefetch.c:73:
+	printk(KERN_INFO "Available pages after: %d\n", nr_avail_pagecache_pages(=
 	                                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#486: FILE: mm/swap_state.c:35:
+	.swap_tree	=3D RADIX_TREE_INIT(GFP_ATOMIC),
 	          	^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 15 warnings, 11 checks, 360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000377185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
