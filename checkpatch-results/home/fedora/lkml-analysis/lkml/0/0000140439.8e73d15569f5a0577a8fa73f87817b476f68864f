WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
It tries to identify and protect live pages (sequential pages that are going

WARNING:TYPO_SPELLING: 'relavant' may be misspelled - perhaps 'relevant'?
#27: 
relavant pages can be mutilated into tiny chunks and ignored as random pages.
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'safty' may be misspelled - perhaps 'safety'?
#151: FILE: mm/readahead.c:1682:
+ * This function provides safty guarantee for file servers with big
                           ^^^^^

WARNING:TYPO_SPELLING: 'pratical' may be misspelled - perhaps 'practical'?
#171: FILE: mm/readahead.c:1702:
+ * In pratical, the group of pages are fragmented into chunks. To tell whether
       ^^^^^^^^

WARNING:TYPO_SPELLING: 'Sepcial' may be misspelled - perhaps 'Special'?
#175: FILE: mm/readahead.c:1706:
+ * 3) Sepcial case: live head just sits on the boundary of current chunk?
       ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: mm/readahead.c:1742:
+static int save_chunk(struct page *head, struct page *live_head,
+			struct page *tail, struct list_head *save_list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: mm/readahead.c:1771:
+	BUG_ON(!mapping); /* QUESTION: in what case mapping will be NULL ? */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: mm/readahead.c:1779:
+	index = radix_tree_lookup_head(&mapping->page_tree,
+						index, LIVE_PAGE_SCAN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: mm/readahead.c:1810:
+	if (refcnt > page_refcnt(next_page(head)) &&
+			page_refcnt(page) > page_refcnt(next_page(head))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: mm/readahead.c:1825:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+								--index);

WARNING:LINE_SPACING: Missing a blank line after declarations
#325: FILE: mm/readahead.c:1856:
+		struct page *last_page = prev_page(tail);
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: mm/readahead.c:1857:
+		page = radix_tree_cache_lookup(&mapping->page_tree, &cache,
+						last_page->index + 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#327: FILE: mm/readahead.c:1858:
+		if (page && !live_head) {
[...]
+		} else if (!page && live_head)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#330: FILE: mm/readahead.c:1861:
+				page = radix_tree_cache_lookup(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: mm/readahead.c:1882:
+			BUG_ON(PageAnon(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#352: FILE: mm/readahead.c:1883:
+			BUG_ON(PageSwapCache(page));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_chunk', this function's name, in a string
#386: FILE: mm/readahead.c:1917:
+		ddprintk("save_chunk(ino=%lu, idx=%lu-%lu-%lu, %s@%s:%s)"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#387: FILE: mm/readahead.c:1918:
+		ddprintk("save_chunk(ino=%lu, idx=%lu-%lu-%lu, %s@%s:%s)"
+				" = %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: mm/readahead.c:1984:
+	if (mapping && !PageAnon(chunk_head) &&
+			!PageSwapCache(chunk_head) &&

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140439.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 11 warnings, 8 checks, 393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140439.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
