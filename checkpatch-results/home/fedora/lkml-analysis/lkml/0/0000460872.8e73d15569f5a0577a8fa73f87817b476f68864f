WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
diff -aur -X /mnt/elbrus/home/pmenage/dontdiff linux-2.5.13/Documentation/filesystems/Locking linux-2.5.13-permission/Documentation/filesystems/Locking

ERROR:SPACING: space required before the open parenthesis '('
#112: FILE: fs/coda/dir.c:161:
+	if(dcache_locked)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#153: FILE: fs/coda/pioctl.c:79:
+struct inode_operations coda_ioctl_inode_operations =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#154: FILE: fs/coda/pioctl.c:80:
+struct inode_operations coda_ioctl_inode_operations =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#155: FILE: fs/coda/pioctl.c:81:
+	permission:	coda_ioctl_permission,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#156: FILE: fs/coda/pioctl.c:82:
+	setattr:	coda_notify_change,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#156: FILE: fs/coda/pioctl.c:82:
+	setattr:	coda_notify_change,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#159: FILE: fs/coda/pioctl.c:85:
+struct file_operations coda_ioctl_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#160: FILE: fs/coda/pioctl.c:86:
+	owner:		THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#161: FILE: fs/coda/pioctl.c:87:
+	ioctl:		coda_pioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#161: FILE: fs/coda/pioctl.c:87:
+	ioctl:		coda_pioctl,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#172: FILE: fs/intermezzo/dir.c:73:
+extern int presto_permission(struct inode *inode, int mask, int dcache_locked);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#187: FILE: fs/intermezzo/dir.c:791:
+	if(dcache_locked)
+	    return -EAGAIN;

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: fs/intermezzo/dir.c:791:
+	if(dcache_locked)

WARNING:TABSTOP: Statements should start on a tabstop
#188: FILE: fs/intermezzo/dir.c:792:
+	    return -EAGAIN;

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/intermezzo/dir.c:810:
+                        return fiops->permission(inode, mask, dcache_locked);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/intermezzo/dir.c:810:
+                        return fiops->permission(inode, mask, dcache_locked);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: fs/intermezzo/dir.c:814:
+                        return diops->permission(inode, mask, dcache_locked);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/intermezzo/dir.c:814:
+                        return diops->permission(inode, mask, dcache_locked);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#228: FILE: fs/intermezzo/file.c:49:
+extern int presto_permission(struct inode *inode, int mask, int dcache_locked);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: fs/namei.c:156:
+inline int vfs_permission(struct inode * inode, int mask)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#248: FILE: fs/namei.c:204:
+static inline int permission_locked(struct inode *inode, int mask) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#249: FILE: fs/namei.c:205:
+static inline int permission_locked(struct inode *inode, int mask) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: fs/namei.c:206:
+^Iif (inode->i_op && inode->i_op->permission) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: fs/nfs/dir.c:1103:
+nfs_permission(struct inode *inode, int mask, int dcache_locked) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: fs/nfs/dir.c:1123:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: fs/nfs/dir.c:1125:
+^Iif (dcache_locked) $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#349: FILE: fs/proc/base.c:183:
+static struct fs_struct *get_task_fs(struct inode *inode) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#350: FILE: fs/proc/base.c:184:
+static struct fs_struct *get_task_fs(struct inode *inode) {
+

ERROR:SPACING: space required before the open parenthesis '('
#366: FILE: fs/proc/base.c:199:
+	if(fs) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: fs/proc/base.c:279:
+^Iif (!fs) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: fs/proc/base.c:281:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#391: FILE: fs/proc/base.c:282:
+	if(!locked)

ERROR:SPACING: space required before the open parenthesis '('
#417: FILE: fs/proc/base.c:306:
+	if(!locked)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: fs/proc/base.c:308:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#436: FILE: fs/proc/base.c:317:
+	int ret;
+	if ((ret = vfs_permission(inode, mask)) != 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#436: FILE: fs/proc/base.c:317:
+	if ((ret = vfs_permission(inode, mask)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#491: FILE: include/linux/dcache.h:89:
+	int (*d_revalidate_locked)(struct dentry *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#491: FILE: include/linux/dcache.h:89:
+	int (*d_revalidate_locked)(struct dentry *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#503: FILE: include/linux/fs.h:759:
+	int (*permission) (struct inode *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#503: FILE: include/linux/fs.h:759:
+	int (*permission) (struct inode *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#503: FILE: include/linux/fs.h:759:
+	int (*permission) (struct inode *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#503: FILE: include/linux/fs.h:759:
+	int (*permission) (struct inode *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: include/linux/nfs_fs.h:240:
+extern int nfs_permission(struct inode *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#515: FILE: include/linux/nfs_fs.h:240:
+extern int nfs_permission(struct inode *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#515: FILE: include/linux/nfs_fs.h:240:
+extern int nfs_permission(struct inode *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#515: FILE: include/linux/nfs_fs.h:240:
+extern int nfs_permission(struct inode *, int, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 23 warnings, 3 checks, 412 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
