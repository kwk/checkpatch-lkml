WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
> libaio, so if anyone cares to provide patches, I'd appreciate it.  Cheers,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#59: FILE: src/libaio.h:55:
+#define PADDED(x, y)	unsigned y; x

ERROR:SPACING: space required after that ',' (ctx:VxV)
#60: FILE: src/libaio.h:56:
+#define PADDEDptr(x,y)	x
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <PADDEDptr>
#60: FILE: src/libaio.h:56:
+#define PADDEDptr(x,y)	x

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PADDEDul>
#61: FILE: src/libaio.h:57:
+#define PADDEDul(x, y)	unsigned long x

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#63: FILE: src/libaio.h:59:
+#define PADDED(x, y)	unsigned y; x

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#64: FILE: src/libaio.h:60:
+#define PADDEDptr(x, y) unsigned y; x

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#65: FILE: src/libaio.h:61:
+#define PADDEDul(x, y)	unsigned y; unsigned long x

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: src/syscall-s390.h:1:
+#define __NR_io_setup		243

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#81: FILE: src/syscall-s390.h:9:
+#ifdef __s390x__

Architecture specific defines should be avoided wherever
possible.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: src/syscall-s390.h:15:
+#define io_syscall0(type,name)					\
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#87: FILE: src/syscall-s390.h:15:
+#define io_syscall0(type,name)					\
+type name(void) {						\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name)				\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#88: FILE: src/syscall-s390.h:16:
+type name(void) {						\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#92: FILE: src/syscall-s390.h:20:
+		"    "__LR" %0,2"				\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space prohibited before that close parenthesis ')'
#95: FILE: src/syscall-s390.h:23:
+		: _svc_clobber );				\

CHECK:SPACING: No space is necessary after a cast
#96: FILE: src/syscall-s390.h:24:
+	return (type) __res;					\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: src/syscall-s390.h:27:
+#define io_syscall1(type,name,type1,arg1)			\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: src/syscall-s390.h:27:
+#define io_syscall1(type,name,type1,arg1)			\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: src/syscall-s390.h:27:
+#define io_syscall1(type,name,type1,arg1)			\
                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#99: FILE: src/syscall-s390.h:27:
+#define io_syscall1(type,name,type1,arg1)			\
+type name(type1 arg1) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#99: FILE: src/syscall-s390.h:27:
+#define io_syscall1(type,name,type1,arg1)			\
+type name(type1 arg1) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#100: FILE: src/syscall-s390.h:28:
+type name(type1 arg1) {						\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#105: FILE: src/syscall-s390.h:33:
+		"    "__LR" %0,2"				\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#109: FILE: src/syscall-s390.h:37:
+		: _svc_clobber );				\

CHECK:SPACING: No space is necessary after a cast
#110: FILE: src/syscall-s390.h:38:
+	return (type) __res;					\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
+type name(type1 arg1, type2 arg2) {				\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
+type name(type1 arg1, type2 arg2) {				\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
+type name(type1 arg1, type2 arg2) {				\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#113: FILE: src/syscall-s390.h:41:
+#define io_syscall2(type,name,type1,arg1,type2,arg2)		\
+type name(type1 arg1, type2 arg2) {				\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#114: FILE: src/syscall-s390.h:42:
+type name(type1 arg1, type2 arg2) {				\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#120: FILE: src/syscall-s390.h:48:
+		"    "__LR" %0,2"				\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#125: FILE: src/syscall-s390.h:53:
+		: _svc_clobber );				\

CHECK:SPACING: No space is necessary after a cast
#126: FILE: src/syscall-s390.h:54:
+	return (type) __res;					\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3)					\
+type name(type1 arg1, type2 arg2, type3 arg3) {			\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3)					\
+type name(type1 arg1, type2 arg2, type3 arg3) {			\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3)					\
+type name(type1 arg1, type2 arg2, type3 arg3) {			\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3)					\
+type name(type1 arg1, type2 arg2, type3 arg3) {			\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type3' - possible side-effects?
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3)					\
+type name(type1 arg1, type2 arg2, type3 arg3) {			\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#129: FILE: src/syscall-s390.h:57:
+#define io_syscall3(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3)					\
+type name(type1 arg1, type2 arg2, type3 arg3) {			\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#130: FILE: src/syscall-s390.h:58:
+		    type3,arg3)					\
 		         ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#131: FILE: src/syscall-s390.h:59:
+type name(type1 arg1, type2 arg2, type3 arg3) {			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#138: FILE: src/syscall-s390.h:66:
+		"    "__LR" %0,2"				\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#144: FILE: src/syscall-s390.h:72:
+		: _svc_clobber );				\

CHECK:SPACING: No space is necessary after a cast
#145: FILE: src/syscall-s390.h:73:
+	return (type) __res;					\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type3' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type4' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#148: FILE: src/syscall-s390.h:76:
+#define io_syscall4(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4)			\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: src/syscall-s390.h:77:
+		    type3,arg3,type4,arg4)			\
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: src/syscall-s390.h:77:
+		    type3,arg3,type4,arg4)			\
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: src/syscall-s390.h:77:
+		    type3,arg3,type4,arg4)			\
 		                    ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#150: FILE: src/syscall-s390.h:78:
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#158: FILE: src/syscall-s390.h:86:
+		"    "__LR" %0,2"				\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#165: FILE: src/syscall-s390.h:93:
+		: _svc_clobber );				\

CHECK:SPACING: No space is necessary after a cast
#166: FILE: src/syscall-s390.h:94:
+	return (type) __res;					\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type1' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type2' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type3' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type4' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'type5' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#169: FILE: src/syscall-s390.h:97:
+#define io_syscall5(type,name,type1,arg1,type2,arg2,		\
+		    type3,arg3,type4,arg4,type5,arg5)		\
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\
+	register type1 __arg1 asm("2") = arg1;			\
+	register type2 __arg2 asm("3") = arg2;			\
+	register type3 __arg3 asm("4") = arg3;			\
+	register type4 __arg4 asm("5") = arg4;			\
+	register type5 __arg5 asm("6") = arg5;			\
+	long __res;						\
+	__asm__ __volatile__ (					\
+		"    svc %b1\n"					\
+		"    "__LR" %0,2"				\
+		: "=d" (__res)					\
+		: "i" (__NR_##name),				\
+		  "d" (__arg1),					\
+		  "d" (__arg2),					\
+		  "d" (__arg3),					\
+		  "d" (__arg4),					\
+		  "d" (__arg5)					\
+		: _svc_clobber );				\
+	return (type) __res;					\
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: src/syscall-s390.h:98:
+		    type3,arg3,type4,arg4,type5,arg5)		\
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: src/syscall-s390.h:98:
+		    type3,arg3,type4,arg4,type5,arg5)		\
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: src/syscall-s390.h:98:
+		    type3,arg3,type4,arg4,type5,arg5)		\
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: src/syscall-s390.h:98:
+		    type3,arg3,type4,arg4,type5,arg5)		\
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: src/syscall-s390.h:98:
+		    type3,arg3,type4,arg4,type5,arg5)		\
 		                               ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#171: FILE: src/syscall-s390.h:99:
+type name(type1 arg1, type2 arg2, type3 arg3, type4 arg4,	\
+	  type5 arg5) {						\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#181: FILE: src/syscall-s390.h:109:
+		"    "__LR" %0,2"				\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#189: FILE: src/syscall-s390.h:117:
+		: _svc_clobber );				\

CHECK:SPACING: No space is necessary after a cast
#190: FILE: src/syscall-s390.h:118:
+	return (type) __res;					\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000432060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 6 warnings, 45 checks, 149 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000432060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
