CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/bio.h:199:
+extern int bio_max_iovecs(struct request_queue *q, int *iovec_size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: include/linux/bio.h:205:
+extern void bio_recycle (struct bio **bio, int gfp_mask);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/bio.h:205:
+extern void bio_recycle (struct bio **bio, int gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/bio.h:206:
+extern void bio_append(struct bio **bio_p, struct bio_vec *bv, int gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/blkdev.h:287:
+extern void register_partition_ops(struct partition_ops *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/blkdev.h:288:
+extern void unregister_partition_ops(struct partition_ops *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/blkdev.h:301:
+extern void blk_tally_bvecs(request_queue_t *q, struct bio *bio,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/blkdev.h:427:
+extern int bio_max_iovecs(request_queue_t *q, int *iovec_size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#157: FILE: fs/bio.c:328:
+void bio_recycle (struct bio **bio, int gfp_mask)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#164: FILE: fs/bio.c:335:
+#define COPY(field)    newbio->bi_ ## field = old->bi_ ## field

CHECK:LINE_SPACING: Please don't use multiple blank lines
#175: FILE: fs/bio.c:346:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#177: FILE: fs/bio.c:348:
+/* bio_append appends an IO vector to a bio.  If there is no room
+   in the bio, the bio will first be submitted and replaced with an

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#183: FILE: fs/bio.c:354:
+   a new one. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/bio.c:355:
+   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/bio.c:355:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: fs/bio.c:358:
+       struct bio *bio^I^I= *bio_p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/bio.c:359:
+       request_queue_t *q = bio->bi_bdev->bd_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/bio.c:361:
+       BUG_ON(q == NULL);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#190: FILE: fs/bio.c:361:
+       BUG_ON(q == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q"
#190: FILE: fs/bio.c:361:
+       BUG_ON(q == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/bio.c:362:
+       BUG_ON(bio->bi_io_vec == NULL);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#191: FILE: fs/bio.c:362:
+       BUG_ON(bio->bi_io_vec == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio->bi_io_vec"
#191: FILE: fs/bio.c:362:
+       BUG_ON(bio->bi_io_vec == NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/bio.c:364:
+       if (bio->bi_vcnt != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#193: FILE: fs/bio.c:364:
+       if (bio->bi_vcnt != 0) {
[...]
+	       if (bio->bi_vcnt < bi_max_to_size(bio->bi_max) &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#194: FILE: fs/bio.c:365:
+       if (bio->bi_vcnt != 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#195: FILE: fs/bio.c:366:
+	       if (bio->bi_vcnt < bi_max_to_size(bio->bi_max) &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#195: FILE: fs/bio.c:366:
+	       if (bio->bi_vcnt < bi_max_to_size(bio->bi_max) &&
[...]
+		       unsigned int phys_segs	= bio->bi_phys_segments;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#197: FILE: fs/bio.c:368:
+		   ((bio->bi_size + bv->bv_len) >> 9) <= q->max_sectors) {
+

WARNING:TABSTOP: Statements should start on a tabstop
#198: FILE: fs/bio.c:369:
+		       unsigned int phys_segs	= bio->bi_phys_segments;

WARNING:TABSTOP: Statements should start on a tabstop
#199: FILE: fs/bio.c:370:
+		       unsigned int hw_segs	= bio->bi_hw_segments;

WARNING:TABSTOP: Statements should start on a tabstop
#200: FILE: fs/bio.c:371:
+		       unsigned int seg_size	= bio->bi_last_seg_size;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: fs/bio.c:373:
+^I^I       blk_tally_bvecs(q, bio, $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#203: FILE: fs/bio.c:374:
+				       &bio->bi_io_vec[bio->bi_vcnt-1], bv, 1);
 				                                   ^

WARNING:TABSTOP: Statements should start on a tabstop
#205: FILE: fs/bio.c:376:
+		       if (bio->bi_phys_segments <= q->max_phys_segments &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#205: FILE: fs/bio.c:376:
+		       if (bio->bi_phys_segments <= q->max_phys_segments &&
[...]
+			       goto goodbio;

WARNING:TABSTOP: Statements should start on a tabstop
#207: FILE: fs/bio.c:378:
+			       goto goodbio;

WARNING:TABSTOP: Statements should start on a tabstop
#213: FILE: fs/bio.c:384:
+	       }

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#213: FILE: fs/bio.c:384:
+
+	       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: fs/bio.c:387:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/bio.c:389:
+       blk_tally_bvecs(q, bio, NULL, bv, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: fs/bio.c:390:
+       bio->bi_flags |= (1 << BIO_SEG_VALID);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: fs/bio.c:393:
+       bio->bi_io_vec[bio->bi_vcnt++] = *bv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/bio.c:394:
+       bio->bi_size += bv->bv_len;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#228: FILE: fs/bio.c:399:
+	unsigned max_iovecs = min(q->max_phys_segments, q->max_hw_segments);

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: fs/bio.c:406:
+		unsigned int max_bytes = q->max_sectors << 9;
+		if (*iovec_size > max_bytes) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: fs/bio.c:478:
+	if ((bio = bio_alloc(GFP_NOIO, nr_bvecs)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: fs/bio.c:492:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: fs/bio.c:492:
+ $

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#374: FILE: fs/mpage.c:32:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#378: FILE: fs/mpage.c:36:
+	atomic_t uptodate;
 	         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#422: FILE: fs/mpage.c:78:
+	int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#428: FILE: fs/mpage.c:84:
+	if (!uptodate) {
 	     ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#430: FILE: fs/mpage.c:86:
+		int i;
+		bio_for_each_segment(bvec, bio, i) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv"
#434: FILE: fs/mpage.c:90:
+		if (priv != NULL)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#435: FILE: fs/mpage.c:91:
+			atomic_set(&priv->uptodate, 0);
 			                  ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "priv"
#438: FILE: fs/mpage.c:94:
+	if (priv != NULL) {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#441: FILE: fs/mpage.c:97:
+		uptodate = atomic_read(&priv->uptodate);
 		^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#441: FILE: fs/mpage.c:97:
+		uptodate = atomic_read(&priv->uptodate);
 		                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#460: FILE: fs/mpage.c:111:
+				if (uptodate) {
 				    ^^^^^^^^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#468: FILE: fs/mpage.c:119:
+			}
+			else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#468: FILE: fs/mpage.c:119:
+			else {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#469: FILE: fs/mpage.c:120:
+				if (!uptodate)
 				     ^^^^^^^^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#544: FILE: fs/mpage.c:174:
+	contig = old->bi_sector + ((old->bi_size + bvec->bv_len)>>9);
 	                                                        ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#550: FILE: fs/mpage.c:180:
+	     old->bi_bdev->bd_queue->max_segment_size)) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#556: FILE: fs/mpage.c:186:
+	/* We are definitely going to use multiple bvec's for this
+	   page, which can possibly mean multiple bio's, either due

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#559: FILE: fs/mpage.c:189:
+	   block device. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv"
#563: FILE: fs/mpage.c:193:
+	if (priv == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#564: FILE: fs/mpage.c:194:
+	if (priv == NULL) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#566: FILE: fs/mpage.c:196:
+		/* Send off the transfers for other pages, which
+		   do not need to use old->bi_private (they must not

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#567: FILE: fs/mpage.c:197:
+		   share ours anyhow).  */

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#576: FILE: fs/mpage.c:206:
+		atomic_set(&priv->uptodate, 1);
 		                  ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#602: FILE: fs/mpage.c:229:
+	const unsigned blkbits = inode->i_blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#603: FILE: fs/mpage.c:230:
+	const unsigned blocksize = 1 << blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: fs/mpage.c:231:
+	unsigned num_blocks;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#607: FILE: fs/mpage.c:234:
+	unsigned offset;

CHECK:BRACES: braces {} should be used on all arms of this statement
#617: FILE: fs/mpage.c:244:
+	if (page_has_buffers(page))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#619: FILE: fs/mpage.c:246:
+	else {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#625: FILE: fs/mpage.c:252:
+	page_within_block = page->index & ((blocksize-1) >> PAGE_CACHE_SHIFT);
 	                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: fs/mpage.c:254:
+^I$

WARNING:TYPO_SPELLING: 'tranfer' may be misspelled - perhaps 'transfer'?
#639: FILE: fs/mpage.c:266:
+	   device where the minimum tranfer size (i.e., hardsect_size)
 	                            ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#639: FILE: fs/mpage.c:266:
+	/* FIXME.  Right now you cannot have a file system on a block
+	   device where the minimum tranfer size (i.e., hardsect_size)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#643: FILE: fs/mpage.c:270:
+	   -Adam J. Richter, 2002 June 22, */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#645: FILE: fs/mpage.c:272:
+	BUG_ON(q->hardsect_size > stride);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#651: FILE: fs/mpage.c:278:
+		sector_t end_block = (inode->i_size + blocksize - 1)>>blkbits;
 		                                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#652: FILE: fs/mpage.c:279:
+		sector_t end_block = (inode->i_size + blocksize - 1)>>blkbits;
+		if (block_in_file + num_blocks > end_block)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#660: FILE: fs/mpage.c:287:
+	     offset += stride, block_in_file++, bh = bh->b_this_page) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#664: FILE: fs/mpage.c:291:
+		if (!buffer_mapped(bh)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: fs/mpage.c:301:
+^I^I^I^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#683: FILE: fs/mpage.c:309:
+			if (!buffer_mapped(bh)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: fs/mpage.c:310:
+				BUG_ON(rw != READ);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_addr"
#686: FILE: fs/mpage.c:312:
+				if (page_addr == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#697: FILE: fs/mpage.c:323:
+		for(xfer_total = 0; xfer_total < stride;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#725: FILE: fs/mpage.c:341:
+			BUG_ON(PageWriteback(page));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#732: FILE: fs/mpage.c:348:
+			/* Multiple transfer on the same page must not be
+			   merged with transfers for another page, so

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#735: FILE: fs/mpage.c:351:
+			   by mpage_add_block. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_addr"
#742: FILE: fs/mpage.c:358:
+	if (page_addr != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#751: FILE: fs/mpage.c:367:
 
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#858: FILE: fs/mpage.c:416:
+		unsigned nr_pages, get_block_t *get_block)

ERROR:CODE_INDENT: code indent should use tabs where possible
#863: FILE: fs/mpage.c:418:
+ ^Istruct bio *bio;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#863: FILE: fs/mpage.c:418:
+ ^Istruct bio *bio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: fs/mpage.c:418:
+ ^Istruct bio *bio;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#869: FILE: fs/mpage.c:423:
+ ^Ibio = mpage_alloc(mapping, nr_pages, READ);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#869: FILE: fs/mpage.c:423:
+ ^Ibio = mpage_alloc(mapping, nr_pages, READ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: fs/mpage.c:423:
+ ^Ibio = mpage_alloc(mapping, nr_pages, READ);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1101: FILE: fs/mpage.c:468:
+	int count = 0;
+	list_for_each(tmp, list)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1133: FILE: fs/mpage.c:497:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1188: FILE: fs/mpage.c:569:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1190: FILE: fs/mpage.c:571:
+/* Below is copied from bio.c, so I added Jens to the copyright notice.
+   -Adam */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1190: FILE: fs/mpage.c:571:
+   -Adam */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1216: FILE: fs/mpage.c:597:
+	printk("MPAGE_PRIV: pool of %d setup, %ZuKb (%Zd bytes/mpage_priv)\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1216: FILE: fs/mpage.c:597:
+	printk("MPAGE_PRIV: pool of %d setup, %ZuKb (%Zd bytes/mpage_priv)\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453770.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 69 warnings, 32 checks, 1152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453770.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
