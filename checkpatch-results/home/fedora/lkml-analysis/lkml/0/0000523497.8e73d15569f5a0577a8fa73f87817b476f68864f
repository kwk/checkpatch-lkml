WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> I'd like to see what the patch looks on top of a virgin tree, as it should

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/swap.h:124:
+extern int total_free_shortage(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/swap.h:126:
+extern int total_inactive_shortage(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/swap.h:130:
+extern unsigned int zone_free_shortage(zone_t *zone);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/swap.h:131:
+extern unsigned int zone_inactive_shortage(zone_t *zone);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/swap.h:132:
+extern unsigned int zone_inactive_plenty(zone_t *zone);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: mm/page_alloc.c:648:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#130: FILE: mm/page_alloc.c:655:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: mm/page_alloc.c:656:
+unsigned int zone_inactive_shortage(zone_t *zone) $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#131: FILE: mm/page_alloc.c:656:
+}
+unsigned int zone_inactive_shortage(zone_t *zone) 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: mm/page_alloc.c:669:
+     return (sum > 0 ? sum : 0);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: mm/vmscan.c:44:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: mm/vmscan.c:46:
+^I * touch pages from zones which don't have a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: mm/vmscan.c:472:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: mm/vmscan.c:473:
+^I^I * If we are doing zone-specific laundering, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: mm/vmscan.c:474:
+^I^I * avoid touching pages from zones which do $

CHECK:BRACES: braces {} should be used on all arms of this statement
#201: FILE: mm/vmscan.c:597:
+				if (zone) {
[...]
+				} else if (!free_shortage()) 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: mm/vmscan.c:600:
+^I^I^I^I} else if (!free_shortage()) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: mm/vmscan.c:661:
+^I * First do a global scan if there is a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: mm/vmscan.c:668:
+^I * Then check if there is any specific zone $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: mm/vmscan.c:673:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: mm/vmscan.c:674:
+^I^Iif (zone_free_shortage(zone)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: mm/vmscan.c:676:
+^I} $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: mm/vmscan.c:681:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: mm/vmscan.c:720:
+^I^I * Do not deactivate pages from zones which $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'zone == page->zone'
#288: FILE: mm/vmscan.c:763:
+			if (!zone || (zone && (zone == page->zone)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#325: FILE: mm/vmscan.c:799:
+	if((sum = free_shortage()))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#325: FILE: mm/vmscan.c:799:
+	if((sum = free_shortage()))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#354: FILE: mm/vmscan.c:840:
+}
+/*

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: mm/vmscan.c:848:
+	if((shortage = inactive_shortage()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#363: FILE: mm/vmscan.c:848:
+	if((shortage = inactive_shortage()))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: mm/vmscan.c:851:
+^Ishortage = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: mm/vmscan.c:928:
+static int refill_inactive_zone(zone_t *zone, unsigned int gfp_mask, int user) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: mm/vmscan.c:930:
+^Iint count, start_count, maxtry; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: mm/vmscan.c:931:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#397: FILE: mm/vmscan.c:932:
+	count = start_count = zone_inactive_shortage(zone);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#412: FILE: mm/vmscan.c:947:
+	} while(zone_inactive_shortage(zone));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#417: FILE: mm/vmscan.c:952:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: mm/vmscan.c:953:
+static int refill_inactive(unsigned int gfp_mask, int user) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: mm/vmscan.c:958:
+^I * First do a global scan if there is a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: mm/vmscan.c:965:
+^I * Then check if there is any specific zone $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: mm/vmscan.c:971:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: mm/vmscan.c:972:
+^I^Iif (zone_inactive_shortage(zone)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: mm/vmscan.c:974:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: mm/vmscan.c:1060:
+^I^Iif (total_inactive_shortage() || total_free_shortage()) $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 2 warnings, 13 checks, 403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000523497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
