WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#67: FILE: linux/time.h:42:
+struct timeout
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#104: FILE: linux/time.h:295:
+void timespec_add (struct timespec *result,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: linux/time.h:296:
+^I^I   const struct timespec *t1, const struct timespec *t2) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#134: FILE: timer.c:971:
+	struct task_struct *task = (task_t *) __data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: timer.c:972:
+	struct task_struct *task = (task_t *) __data;
+	fuqueue_waiter_cancel(task, -ETIMEDOUT);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#146: FILE: timer.c:1058:
+unsigned long timeout_to_jiffies_abs (const struct timeout *timeout)

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: timer.c:1060:
+        unsigned long jiffies_abs, seq;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: timer.c:1060:
+        unsigned long jiffies_abs, seq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: timer.c:1061:
+        struct timespec oc, now;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: timer.c:1061:
+        struct timespec oc, now;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: timer.c:1063:
+        if (timeout->flags & TIMEOUT_USE_JIFFIES)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: timer.c:1063:
+        if (timeout->flags & TIMEOUT_USE_JIFFIES)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#151: FILE: timer.c:1063:
+        if (timeout->flags & TIMEOUT_USE_JIFFIES)
[...]
+        else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: timer.c:1064:
+                jiffies_abs = timeout->jiffies;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: timer.c:1064:
+                jiffies_abs = timeout->jiffies;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: timer.c:1065:
+        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: timer.c:1065:
+        else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#153: FILE: timer.c:1065:
+        else {
+                 do {

CHECK:BRACES: Unbalanced braces around else statement
#153: FILE: timer.c:1065:
+        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: timer.c:1066:
+                 do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: timer.c:1066:
+                 do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 25)
#154: FILE: timer.c:1066:
+                 do {
+                         seq = read_seqbegin(&xtime_lock);

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: timer.c:1067:
+                         seq = read_seqbegin(&xtime_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: timer.c:1067:
+                         seq = read_seqbegin(&xtime_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: timer.c:1068:
+                         now = current_kernel_time();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: timer.c:1068:
+                         now = current_kernel_time();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: timer.c:1069:
+                         jiffies_abs = get_jiffies_64();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: timer.c:1069:
+                         jiffies_abs = get_jiffies_64();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: timer.c:1070:
+                 } while (read_seqretry(&xtime_lock, seq));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: timer.c:1070:
+                 } while (read_seqretry(&xtime_lock, seq));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: timer.c:1071:
+                oc = timeout->ts;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: timer.c:1071:
+                oc = timeout->ts;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: timer.c:1072:
+                set_normalized_timespec(&oc, oc.tv_sec - now.tv_sec,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: timer.c:1072:
+                set_normalized_timespec(&oc, oc.tv_sec - now.tv_sec,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: timer.c:1073:
+                                        oc.tv_nsec - now.tv_nsec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: timer.c:1073:
+                                        oc.tv_nsec - now.tv_nsec);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: timer.c:1074:
+                if (oc.tv_sec < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: timer.c:1074:
+                if (oc.tv_sec < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: timer.c:1075:
+                        oc.tv_sec = oc.tv_nsec = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: timer.c:1075:
+                        oc.tv_sec = oc.tv_nsec = 0;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#163: FILE: timer.c:1075:
+                        oc.tv_sec = oc.tv_nsec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: timer.c:1076:
+                jiffies_abs += timespec_to_jiffies(&oc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: timer.c:1076:
+                jiffies_abs += timespec_to_jiffies(&oc)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: timer.c:1077:
+                        + (oc.tv_sec || oc.tv_nsec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: timer.c:1077:
+                        + (oc.tv_sec || oc.tv_nsec);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: timer.c:1078:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: timer.c:1078:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: timer.c:1079:
+        return jiffies_abs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: timer.c:1079:
+        return jiffies_abs;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#172: FILE: timer.c:1084:
+unsigned long timeout_to_jiffies_rel (const struct timeout *timeout)

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#174: FILE: timer.c:1086:
+	return timeout->flags & TIMEOUT_USE_JIFFIES?
 	                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#175: FILE: timer.c:1087:
+		timeout->jiffies : timespec_to_jiffies (&timeout->ts);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: timer.c:1094:
+ *           equals '(struct timeout *) ~0', then it waits for ever. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: timer.c:1107:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: timer.c:1115:
+ */ $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: timer.c:1116:
+void schedule_timeout_ext (const struct timeout *timeout)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: timer.c:1120:
+^I$

CHECK:SPACING: No space is necessary after a cast
#209: FILE: timer.c:1121:
+	if (timeout == (const struct timeout *) ~0) { /* Wait for ever */

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#213: FILE: timer.c:1125:
+	jiffies_abs = timeout->flags & TIMEOUT_RELATIVE?
 	                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: timer.c:1126:
+^I^Ijiffies + timeout_to_jiffies_rel (timeout) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: timer.c:1126:
+		jiffies + timeout_to_jiffies_rel (timeout) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: timer.c:1127:
+		: timeout_to_jiffies_abs (timeout);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#217: FILE: timer.c:1129:
+	init_timer (&timer);

CHECK:SPACING: No space is necessary after a cast
#219: FILE: timer.c:1131:
+	timer.data = (unsigned long) current;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#221: FILE: timer.c:1133:
+	add_timer (&timer);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: timer.c:1135:
+	del_timer_sync (&timer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#228: FILE: timer.c:1140:
+EXPORT_SYMBOL_GPL (schedule_timeout_ext);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#228: FILE: timer.c:1140:
+EXPORT_SYMBOL_GPL (schedule_timeout_ext);

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 37 warnings, 6 checks, 226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
