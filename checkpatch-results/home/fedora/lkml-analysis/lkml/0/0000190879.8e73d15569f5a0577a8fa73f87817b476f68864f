WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: include/linux/genalloc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'donnot' may be misspelled - perhaps 'do not'?
#71: FILE: include/linux/genalloc.h:27:
+ *  1) 1 pool for memory we donnot need to involve in DMA.
                             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: include/linux/genalloc.h:28:
+ *  2) The same pool for controllers that require same DMA $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: include/linux/genalloc.h:30:
+ *     The OS specific m_pool_id_t thing and the gen_pool_match() $

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#78: FILE: include/linux/genalloc.h:34:
+	spinlock_t lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gen_pool *' should also have an identifier name
#79: FILE: include/linux/genalloc.h:35:
+	unsigned long (*get_new_chunk)(struct gen_pool *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#98: FILE: init/main.c:81:
+extern void gen_pool_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: lib/genalloc.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: lib/genalloc.c:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: lib/genalloc.c:46:
+^Iif ((max_chunk_shift > (PAGE_SHIFT + 10)) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_chunk_shift < ALLOC_MIN_SHIFT'
#188: FILE: lib/genalloc.c:46:
+	if ((max_chunk_shift > (PAGE_SHIFT + 10)) || 
+	    ((max_chunk_shift < ALLOC_MIN_SHIFT) && max_chunk_shift))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*poolp)...) over kmalloc(sizeof(struct gen_pool)...)
#195: FILE: lib/genalloc.c:53:
+	poolp = kmalloc(sizeof(struct gen_pool), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*poolp->h)...) over kmalloc(sizeof(struct gen_pool_link)...)
#199: FILE: lib/genalloc.c:57:
+	poolp->h = kmalloc(sizeof(struct gen_pool_link) *

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#203: FILE: lib/genalloc.c:61:
+		printk(KERN_WARNING "gen_pool_alloc() failed to allocate\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#217: FILE: lib/genalloc.c:75:
+		printk(KERN_INFO "allocated %lx\n", tmp);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: lib/genalloc.c:84:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#250: FILE: lib/genalloc.c:108:
+	printk(KERN_DEBUG "gen_pool_alloc: s %02x, i %i, h %p\n", s, i, h);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gen_pool_alloc', this function's name, in a string
#250: FILE: lib/genalloc.c:108:
+	printk(KERN_DEBUG "gen_pool_alloc: s %02x, i %i, h %p\n", s, i, h);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: lib/genalloc.c:117:
+			struct gen_pool_link *ptr;
+			spin_unlock_irqrestore(&poolp->lock, flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#266: FILE: lib/genalloc.c:124:
+			printk(KERN_DEBUG "gen_pool_alloc() max chunk j %i\n", j);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gen_pool_alloc', this function's name, in a string
#266: FILE: lib/genalloc.c:124:
+			printk(KERN_DEBUG "gen_pool_alloc() max chunk j %i\n", j);

CHECK:SPACING: No space is necessary after a cast
#273: FILE: lib/genalloc.c:131:
+	a = (unsigned long) h[j].next;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#277: FILE: lib/genalloc.c:135:
+		 * This should be split into a seperate function doing
 		                               ^^^^^^^^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#283: FILE: lib/genalloc.c:141:
+			printk(KERN_DEBUG "gen_pool_alloc() splitting i %i j %i %x a %02lx\n", i, j, s, a);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#283: FILE: lib/genalloc.c:141:
+			printk(KERN_DEBUG "gen_pool_alloc() splitting i %i j %i %x a %02lx\n", i, j, s, a);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gen_pool_alloc', this function's name, in a string
#283: FILE: lib/genalloc.c:141:
+			printk(KERN_DEBUG "gen_pool_alloc() splitting i %i j %i %x a %02lx\n", i, j, s, a);

CHECK:SPACING: No space is necessary after a cast
#287: FILE: lib/genalloc.c:145:
+			h[j].next = (struct gen_pool_link *) (a + s);

CHECK:SPACING: No space is necessary after a cast
#293: FILE: lib/genalloc.c:151:
+	printk(KERN_DEBUG "gen_pool_alloc(%d) = %p\n", size, (void *) a);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#293: FILE: lib/genalloc.c:151:
+	printk(KERN_DEBUG "gen_pool_alloc(%d) = %p\n", size, (void *) a);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gen_pool_alloc', this function's name, in a string
#293: FILE: lib/genalloc.c:151:
+	printk(KERN_DEBUG "gen_pool_alloc(%d) = %p\n", size, (void *) a);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#310: FILE: lib/genalloc.c:168:
+	printk(KERN_DEBUG "gen_pool_free(%lx, %d)\n", ptr, size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gen_pool_free', this function's name, in a string
#310: FILE: lib/genalloc.c:168:
+	printk(KERN_DEBUG "gen_pool_free(%lx, %d)\n", ptr, size);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#336: FILE: lib/genalloc.c:194:
+		while (q->next && q->next != (struct gen_pool_link *)b) {
+			q = q->next;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#353: FILE: lib/genalloc.c:211:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#356: FILE: lib/genalloc.c:214:
+	printk(KERN_INFO "Generic memory pool allocator v1.0\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#360: FILE: lib/genalloc.c:218:
+EXPORT_SYMBOL(alloc_gen_pool);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#361: FILE: lib/genalloc.c:219:
+EXPORT_SYMBOL(gen_pool_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#362: FILE: lib/genalloc.c:220:
+EXPORT_SYMBOL(gen_pool_free);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000190879.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 25 warnings, 10 checks, 301 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000190879.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
