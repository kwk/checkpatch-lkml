WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#403: FILE: drivers/usb/core/driver.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#436: FILE: drivers/usb/core/driver.c:34:
+}
+static int generic_remove(struct device *dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#441: FILE: drivers/usb/core/driver.c:39:
+	 * unconfigure the device */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#460: FILE: drivers/usb/core/driver.c:58:
+ * usb device or a usb interface. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#466: FILE: drivers/usb/core/driver.c:64:
+	struct usb_interface * intf = to_usb_interface(dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#467: FILE: drivers/usb/core/driver.c:65:
+	struct usb_driver * driver = to_usb_driver(dev->driver);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#471: FILE: drivers/usb/core/driver.c:69:
+	dev_dbg(dev, "%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#481: FILE: drivers/usb/core/driver.c:79:
+		dev_dbg(dev, "%s - got id\n", __FUNCTION__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#490: FILE: drivers/usb/core/driver.c:88:
+		if (error) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#493: FILE: drivers/usb/core/driver.c:91:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: drivers/usb/core/driver.c:114:
+	usb_set_interface(interface_to_usbdev(intf),
+			intf->altsetting[0].desc.bInterfaceNumber,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#516: FILE: drivers/usb/core/driver.c:114:
+			intf->altsetting[0].desc.bInterfaceNumber,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#593: FILE: drivers/usb/core/driver.c:191:
+	if (id == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#600: FILE: drivers/usb/core/driver.c:198:
+	/* It is important to check that id->driver_info is nonzero,
+	   since an entry that is all zeroes except for a nonzero

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#603: FILE: drivers/usb/core/driver.c:201:
+	   device and interface. */

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#604: FILE: drivers/usb/core/driver.c:202:
+	for (; id->idVendor || id->bDeviceClass || id->bInterfaceClass ||

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceClass>
#604: FILE: drivers/usb/core/driver.c:202:
+	for (; id->idVendor || id->bDeviceClass || id->bInterfaceClass ||

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#604: FILE: drivers/usb/core/driver.c:202:
+	for (; id->idVendor || id->bDeviceClass || id->bInterfaceClass ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: drivers/usb/core/driver.c:203:
+	for (; id->idVendor || id->bDeviceClass || id->bInterfaceClass ||
+	       id->driver_info; id++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#606: FILE: drivers/usb/core/driver.c:204:
+	       id->driver_info; id++) {
+

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#612: FILE: drivers/usb/core/driver.c:210:
+		    id->idProduct != le16_to_cpu(dev->descriptor.idProduct))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#616: FILE: drivers/usb/core/driver.c:214:
+		/* No need to test id->bcdDevice_lo != 0, since 0 is never
+		   greater than any unsigned number. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#616: FILE: drivers/usb/core/driver.c:214:
+		   greater than any unsigned number. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bcdDevice_lo > le16_to_cpu(dev->descriptor.bcdDevice)'
#617: FILE: drivers/usb/core/driver.c:215:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_DEV_LO) &&
+		    (id->bcdDevice_lo > le16_to_cpu(dev->descriptor.bcdDevice)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice_lo>
#618: FILE: drivers/usb/core/driver.c:216:
+		    (id->bcdDevice_lo > le16_to_cpu(dev->descriptor.bcdDevice)))

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice>
#618: FILE: drivers/usb/core/driver.c:216:
+		    (id->bcdDevice_lo > le16_to_cpu(dev->descriptor.bcdDevice)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bcdDevice_hi < le16_to_cpu(dev->descriptor.bcdDevice)'
#621: FILE: drivers/usb/core/driver.c:219:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_DEV_HI) &&
+		    (id->bcdDevice_hi < le16_to_cpu(dev->descriptor.bcdDevice)))

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice_hi>
#622: FILE: drivers/usb/core/driver.c:220:
+		    (id->bcdDevice_hi < le16_to_cpu(dev->descriptor.bcdDevice)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bDeviceClass != dev->descriptor.bDeviceClass'
#625: FILE: drivers/usb/core/driver.c:223:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_DEV_CLASS) &&
+		    (id->bDeviceClass != dev->descriptor.bDeviceClass))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bDeviceSubClass!= dev->descriptor.bDeviceSubClass'
#629: FILE: drivers/usb/core/driver.c:227:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_DEV_SUBCLASS) &&
+		    (id->bDeviceSubClass!= dev->descriptor.bDeviceSubClass))

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#630: FILE: drivers/usb/core/driver.c:228:
+		    (id->bDeviceSubClass!= dev->descriptor.bDeviceSubClass))
 		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceSubClass>
#630: FILE: drivers/usb/core/driver.c:228:
+		    (id->bDeviceSubClass!= dev->descriptor.bDeviceSubClass))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bDeviceProtocol != dev->descriptor.bDeviceProtocol'
#633: FILE: drivers/usb/core/driver.c:231:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_DEV_PROTOCOL) &&
+		    (id->bDeviceProtocol != dev->descriptor.bDeviceProtocol))

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceProtocol>
#634: FILE: drivers/usb/core/driver.c:232:
+		    (id->bDeviceProtocol != dev->descriptor.bDeviceProtocol))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bInterfaceClass != intf->desc.bInterfaceClass'
#637: FILE: drivers/usb/core/driver.c:235:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_INT_CLASS) &&
+		    (id->bInterfaceClass != intf->desc.bInterfaceClass))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bInterfaceSubClass != intf->desc.bInterfaceSubClass'
#641: FILE: drivers/usb/core/driver.c:239:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_INT_SUBCLASS) &&
+		    (id->bInterfaceSubClass != intf->desc.bInterfaceSubClass))

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#642: FILE: drivers/usb/core/driver.c:240:
+		    (id->bInterfaceSubClass != intf->desc.bInterfaceSubClass))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->bInterfaceProtocol != intf->desc.bInterfaceProtocol'
#645: FILE: drivers/usb/core/driver.c:243:
+		if ((id->match_flags & USB_DEVICE_ID_MATCH_INT_PROTOCOL) &&
+		    (id->bInterfaceProtocol != intf->desc.bInterfaceProtocol))

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceProtocol>
#646: FILE: drivers/usb/core/driver.c:244:
+		    (id->bInterfaceProtocol != intf->desc.bInterfaceProtocol))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#711: FILE: drivers/usb/core/driver.c:309:
+		printk(KERN_ERR "%s: error %d registering driver %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: drivers/usb/core/driver.c:310:
+		printk(KERN_ERR "%s: error %d registering driver %s\n",
+			usbcore_name, retval, new_driver->name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#749: FILE: drivers/usb/core/usb.h:38:
+extern int usb_device_match(struct device *dev, struct device_driver *drv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 10 warnings, 29 checks, 702 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
