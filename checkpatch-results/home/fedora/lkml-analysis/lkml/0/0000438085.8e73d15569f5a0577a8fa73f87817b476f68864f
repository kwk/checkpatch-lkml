WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#	           ChangeSet	1.502   -> 1.503 =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#	include/linux/smp_lock.h	1.4     -> 1.5   =20

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# 02/08/21	mulix@alhambra.merseine.nu	1.503

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# cleanups for smp_lock.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#57: 
--- a/include/linux/smp_lock.h	Wed Aug 21 12:44:06 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#66: FILE: include/linux/smp_lock.h:13:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#68: FILE: include/linux/smp_lock.h:14:
+#else /* defined(CONFIG_SMP) || defined(CONFIG_PREEMPT) */=20
                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#77: FILE: include/linux/smp_lock.h:22:
+static inline int kernel_locked_for_task(struct task_struct* task)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#79: FILE: include/linux/smp_lock.h:24:
+	return (task->lock_depth >=3D 0);=20
 	                         ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#79: FILE: include/linux/smp_lock.h:24:
+	return (task->lock_depth >=3D 0);=20
 	                                ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#79: FILE: include/linux/smp_lock.h:24:
+	return (task->lock_depth >=3D 0);=20
 	                                 ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#84: FILE: include/linux/smp_lock.h:29:
+	return kernel_locked_for_task(current);=20
 	                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#84: FILE: include/linux/smp_lock.h:29:
+	return kernel_locked_for_task(current);=20
 	                                       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#89: FILE: include/linux/smp_lock.h:31:
+}
+#define get_kernel_lock()	do { spin_lock(&kernel_flag); } while (0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#89: FILE: include/linux/smp_lock.h:31:
+#define get_kernel_lock()	do { spin_lock(&kernel_flag); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#90: FILE: include/linux/smp_lock.h:32:
+#define put_kernel_lock()	do { spin_unlock(&kernel_flag); } while (0)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#100: FILE: include/linux/smp_lock.h:36:
+static inline void release_kernel_lock(struct task_struct* task)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#115: FILE: include/linux/smp_lock.h:44:
+static inline void reacquire_kernel_lock(struct task_struct* task)

ERROR:SPACING: space required after that ';' (ctx:VxO)
#118: FILE: include/linux/smp_lock.h:47:
+		get_kernel_lock();=20
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#118: FILE: include/linux/smp_lock.h:47:
+		get_kernel_lock();=20
 		                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: include/linux/smp_lock.h:69:
 }
+static inline void unlock_kernel(void)

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#150: FILE: include/linux/smp_lock.h:77:
+#endif /* __LINUX_SMPLOCK_H */=20
                               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438085.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 16 warnings, 2 checks, 95 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438085.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
