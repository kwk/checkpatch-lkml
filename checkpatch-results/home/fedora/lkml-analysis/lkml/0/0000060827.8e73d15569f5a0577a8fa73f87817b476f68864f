CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: include/linux/init_task.h:102:
+	.prio		= MAX_RT_PRIO+20,				\
 	     		             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#72: FILE: include/linux/init_task.h:103:
+	.static_prio	= MAX_RT_PRIO+20,				\
 	            	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#73: FILE: include/linux/init_task.h:104:
+	.normal_prio	= MAX_RT_PRIO+20,				\
 	            	             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#161: FILE: kernel/sched.c:190:
+#define safe_to_background(p) \
+	(!((p)->mutexes_held || \
+	   (p)->flags & (PF_FREEZE | PF_UIWAKE | PF_EXITING)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#183: FILE: kernel/sched.c:732:
+	if (prio > BGND_PRIO-1)
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#184: FILE: kernel/sched.c:733:
+		prio = BGND_PRIO-1;
 		                ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#269: FILE: kernel/sched.c:3079:
+		}
+		else if (safe_to_background(p)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#320: FILE: kernel/sched.c:3214:
+	if (task_in_background(thisp))
+	    return !task_in_background(thatp);

WARNING:TABSTOP: Statements should start on a tabstop
#321: FILE: kernel/sched.c:3215:
+	    return !task_in_background(thatp);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#323: FILE: kernel/sched.c:3217:
+	if (task_in_background(thatp))
+	    return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#324: FILE: kernel/sched.c:3218:
+	    return 1;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#338: FILE: kernel/sched.c:3282:
+			if (task_priority_gt(smt_curr, p) &&
[...]
 					ret = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: kernel/sched.c:3283:
+			if (task_priority_gt(smt_curr, p) &&
 				!TASK_PREEMPTS_CURR(p, smt_rq) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param->sched_priority == 0'
#422: FILE: kernel/sched.c:4184:
+	if ((policy == SCHED_NORMAL || policy == SCHED_BATCH ||
+	     policy == SCHED_BGND) != (param->sched_priority == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: kernel/sched.c:4197:
+		if (((policy != SCHED_NORMAL && p->policy != SCHED_BATCH &&
+			    p->policy != SCHED_BGND) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: kernel/sched.c:4206:
+		if ((policy != SCHED_NORMAL && policy != SCHED_BATCH &&
+			    policy != SCHED_BGND) &&

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000060827.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 10 checks, 426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000060827.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
