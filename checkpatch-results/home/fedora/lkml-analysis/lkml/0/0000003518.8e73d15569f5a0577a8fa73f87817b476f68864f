WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#53: FILE: fs/Kconfig:1567:
+config UNION_FS_XATTR
+	bool "Unionfs extended attributes"
+	depends on UNION_FS
+	help
+	  Extended attributes are name:value pairs associated with inodes by
+	  the kernel or by users (see the attr(5) manual page).
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:INDENTED_LABEL: labels should not be indented
#138: FILE: fs/unionfs/copyup.c:76:
+      out:

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#146: FILE: fs/unionfs/copyup.c:84:
+	if (err == -ENOTSUPP || err == -EOPNOTSUPP)

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#161: FILE: fs/unionfs/copyup.c:418:
+	if ((err = copyup_xattrs(old_hidden_dentry, new_hidden_dentry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: fs/unionfs/union.h:333:
+extern void *unionfs_xattr_alloc(size_t size, size_t limit);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: fs/unionfs/union.h:334:
+extern void unionfs_xattr_free(void *ptr, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: fs/unionfs/union.h:336:
+extern ssize_t unionfs_getxattr(struct dentry *dentry, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: fs/unionfs/union.h:337:
+extern ssize_t unionfs_getxattr(struct dentry *dentry, const char *name,
+		void *value, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: fs/unionfs/union.h:338:
+extern int unionfs_removexattr(struct dentry *dentry, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: fs/unionfs/union.h:339:
+extern ssize_t unionfs_listxattr(struct dentry *dentry, char *list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: fs/unionfs/union.h:340:
+extern ssize_t unionfs_listxattr(struct dentry *dentry, char *list,
+		size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: fs/unionfs/union.h:341:
+extern int unionfs_setxattr(struct dentry *dentry, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: fs/unionfs/union.h:342:
+extern int unionfs_setxattr(struct dentry *dentry, const char *name,
+		const void *value, size_t size, int flags);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#229: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#234: FILE: fs/unionfs/xattr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: fs/unionfs/xattr.c:53:
+ssize_t unionfs_getxattr(struct dentry * dentry, const char *name, void *value,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/unionfs/xattr.c:54:
+ssize_t unionfs_getxattr(struct dentry * dentry, const char *name, void *value,
+		size_t size)

CHECK:SPACING: No space is necessary after a cast
#296: FILE: fs/unionfs/xattr.c:63:
+	err = vfs_getxattr(hidden_dentry, (char*) name, value, size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#296: FILE: fs/unionfs/xattr.c:63:
+	err = vfs_getxattr(hidden_dentry, (char*) name, value, size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: fs/unionfs/xattr.c:73:
+int unionfs_setxattr(struct dentry *dentry, const char *name, const void *value,
+		size_t size, int flags)

CHECK:SPACING: No space is necessary after a cast
#314: FILE: fs/unionfs/xattr.c:81:
+	err = vfs_setxattr(hidden_dentry, (char*) name, (void*) value, size, flags);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#314: FILE: fs/unionfs/xattr.c:81:
+	err = vfs_setxattr(hidden_dentry, (char*) name, (void*) value, size, flags);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#314: FILE: fs/unionfs/xattr.c:81:
+	err = vfs_setxattr(hidden_dentry, (char*) name, (void*) value, size, flags);

CHECK:SPACING: No space is necessary after a cast
#331: FILE: fs/unionfs/xattr.c:98:
+	err = vfs_removexattr(hidden_dentry, (char*) name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#331: FILE: fs/unionfs/xattr.c:98:
+	err = vfs_removexattr(hidden_dentry, (char*) name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#340: FILE: fs/unionfs/xattr.c:107:
+ssize_t unionfs_listxattr(struct dentry * dentry, char *list, size_t size)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000003518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 5 warnings, 14 checks, 279 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000003518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
