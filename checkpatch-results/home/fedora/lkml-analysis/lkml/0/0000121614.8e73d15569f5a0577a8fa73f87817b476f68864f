WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#61: FILE: Documentation/vm/overcommit-accounting:2:
+  tree (FIXME: actually it also describes the stuff that isnt yet done)
                                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: Documentation/vm/overcommit-accounting:29:
+guarantees and run close to the edge you MUST mmap your stack for the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'really'
#90: FILE: Documentation/vm/overcommit-accounting:31:
+not matter much but its a corner case if you really really care

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: Documentation/vm/overcommit-accounting:33:
+In modes 2 and 3 the MAP_NORESERVE flag is ignored. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: arch/ppc/mm/fault.c:144:
+ ^Iif (!is_write)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: arch/ppc/mm/fault.c:144:
+ ^Iif (!is_write)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: arch/ppc/mm/fault.c:144:
+ ^Iif (!is_write)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#247: FILE: arch/ppc/mm/fault.c:144:
+ 	if (!is_write)
+                 goto bad_area;

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: arch/ppc/mm/fault.c:145:
+                 goto bad_area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/ppc/mm/fault.c:145:
+                 goto bad_area;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/ppc/mm/fault.c:146:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: arch/ppc/mm/fault.c:146:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: arch/ppc/mm/fault.c:147:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#250: FILE: arch/ppc/mm/fault.c:147:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: arch/ppc/mm/fault.c:147:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: arch/ppc/mm/fault.c:148:
+ ^I * N.B. The rs6000/xcoff ABI allows programs to access up to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: arch/ppc/mm/fault.c:148:
+ ^I * N.B. The rs6000/xcoff ABI allows programs to access up to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: arch/ppc/mm/fault.c:149:
+ ^I * a few hundred bytes below the stack pointer.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: arch/ppc/mm/fault.c:149:
+ ^I * a few hundred bytes below the stack pointer.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: arch/ppc/mm/fault.c:150:
+ ^I * The kernel signal delivery code writes up to about 1.5kB$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: arch/ppc/mm/fault.c:150:
+ ^I * The kernel signal delivery code writes up to about 1.5kB$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: arch/ppc/mm/fault.c:151:
+ ^I * below the stack pointer (r1) before decrementing it.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: arch/ppc/mm/fault.c:151:
+ ^I * below the stack pointer (r1) before decrementing it.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: arch/ppc/mm/fault.c:152:
+ ^I * The exec code can write slightly over 640kB to the stack$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: arch/ppc/mm/fault.c:152:
+ ^I * The exec code can write slightly over 640kB to the stack$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: arch/ppc/mm/fault.c:153:
+ ^I * before setting the user r1.  Thus we allow the stack to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: arch/ppc/mm/fault.c:153:
+ ^I * before setting the user r1.  Thus we allow the stack to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: arch/ppc/mm/fault.c:154:
+ ^I * expand to 1MB without further checks.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#257: FILE: arch/ppc/mm/fault.c:154:
+ ^I * expand to 1MB without further checks.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: arch/ppc/mm/fault.c:155:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: arch/ppc/mm/fault.c:155:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: arch/ppc/mm/fault.c:156:
+ ^Iif (address + 0x100000 < vma->vm_end) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: arch/ppc/mm/fault.c:156:
+ ^Iif (address + 0x100000 < vma->vm_end) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: arch/ppc/mm/fault.c:156:
+ ^Iif (address + 0x100000 < vma->vm_end) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: arch/ppc/mm/fault.c:157:
+ ^I^I/* get user regs even if this fault is in kernel mode */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: arch/ppc/mm/fault.c:157:
+ ^I^I/* get user regs even if this fault is in kernel mode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: arch/ppc/mm/fault.c:157:
+ ^I^I/* get user regs even if this fault is in kernel mode */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: arch/ppc/mm/fault.c:158:
+ ^I^Istruct pt_regs *uregs = current->thread.regs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: arch/ppc/mm/fault.c:158:
+ ^I^Istruct pt_regs *uregs = current->thread.regs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: arch/ppc/mm/fault.c:158:
+ ^I^Istruct pt_regs *uregs = current->thread.regs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: arch/ppc/mm/fault.c:159:
+ ^I^Iif (uregs == NULL)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: arch/ppc/mm/fault.c:159:
+ ^I^Iif (uregs == NULL)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: arch/ppc/mm/fault.c:159:
+ 		struct pt_regs *uregs = current->thread.regs;
+ 		if (uregs == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: arch/ppc/mm/fault.c:159:
+ ^I^Iif (uregs == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uregs"
#262: FILE: arch/ppc/mm/fault.c:159:
+ 		if (uregs == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: arch/ppc/mm/fault.c:160:
+ ^I^I^Igoto bad_area;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: arch/ppc/mm/fault.c:160:
+ ^I^I^Igoto bad_area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/ppc/mm/fault.c:160:
+ ^I^I^Igoto bad_area;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: arch/ppc/mm/fault.c:161:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: arch/ppc/mm/fault.c:161:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: arch/ppc/mm/fault.c:162:
+ ^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: arch/ppc/mm/fault.c:162:
+ ^I^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: arch/ppc/mm/fault.c:162:
+ ^I^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: arch/ppc/mm/fault.c:163:
+ ^I^I * A user-mode access to an address a long way below$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#266: FILE: arch/ppc/mm/fault.c:163:
+ ^I^I * A user-mode access to an address a long way below$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: arch/ppc/mm/fault.c:164:
+ ^I^I * the stack pointer is only valid if the instruction$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: arch/ppc/mm/fault.c:164:
+ ^I^I * the stack pointer is only valid if the instruction$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: arch/ppc/mm/fault.c:165:
+ ^I^I * is one which would update the stack pointer to the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: arch/ppc/mm/fault.c:165:
+ ^I^I * is one which would update the stack pointer to the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: arch/ppc/mm/fault.c:166:
+ ^I^I * address accessed if the instruction completed,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: arch/ppc/mm/fault.c:166:
+ ^I^I * address accessed if the instruction completed,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: arch/ppc/mm/fault.c:167:
+ ^I^I * i.e. either stwu rs,n(r1) or stwux rs,r1,rb$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: arch/ppc/mm/fault.c:167:
+ ^I^I * i.e. either stwu rs,n(r1) or stwux rs,r1,rb$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: arch/ppc/mm/fault.c:168:
+ ^I^I * (or the byte, halfword, float or double forms).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: arch/ppc/mm/fault.c:168:
+ ^I^I * (or the byte, halfword, float or double forms).$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/ppc/mm/fault.c:169:
+ ^I^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: arch/ppc/mm/fault.c:169:
+ ^I^I *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/ppc/mm/fault.c:170:
+ ^I^I * If we don't check this then any write to the area$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: arch/ppc/mm/fault.c:170:
+ ^I^I * If we don't check this then any write to the area$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: arch/ppc/mm/fault.c:171:
+ ^I^I * between the last mapped region and the stack will$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: arch/ppc/mm/fault.c:171:
+ ^I^I * between the last mapped region and the stack will$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: arch/ppc/mm/fault.c:172:
+ ^I^I * expand the stack rather than segfaulting.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: arch/ppc/mm/fault.c:172:
+ ^I^I * expand the stack rather than segfaulting.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: arch/ppc/mm/fault.c:173:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#276: FILE: arch/ppc/mm/fault.c:173:
+ ^I^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: arch/ppc/mm/fault.c:174:
+ ^I^Iif (address + 2048 < uregs->gpr[1]$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: arch/ppc/mm/fault.c:174:
+ ^I^Iif (address + 2048 < uregs->gpr[1]$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: arch/ppc/mm/fault.c:174:
+ ^I^Iif (address + 2048 < uregs->gpr[1]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: arch/ppc/mm/fault.c:175:
+ ^I^I    && (!user_mode(regs) || !store_updates_sp(regs)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: arch/ppc/mm/fault.c:175:
+ ^I^I    && (!user_mode(regs) || !store_updates_sp(regs)))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#278: FILE: arch/ppc/mm/fault.c:175:
+ 		if (address + 2048 < uregs->gpr[1]
+ 		    && (!user_mode(regs) || !store_updates_sp(regs)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: arch/ppc/mm/fault.c:175:
+ ^I^I    && (!user_mode(regs) || !store_updates_sp(regs)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: arch/ppc/mm/fault.c:176:
+ ^I^I^Igoto bad_area;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#279: FILE: arch/ppc/mm/fault.c:176:
+ ^I^I^Igoto bad_area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: arch/ppc/mm/fault.c:176:
+ ^I^I^Igoto bad_area;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: arch/ppc/mm/fault.c:177:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: arch/ppc/mm/fault.c:177:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: arch/ppc/mm/fault.c:177:
+ ^I}$

CHECK:SPACING: No space is necessary after a cast
#336: FILE: fs/exec.c:343:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))>>PAGE_SHIFT))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#336: FILE: fs/exec.c:343:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))>>PAGE_SHIFT))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#336: FILE: fs/exec.c:343:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))>>PAGE_SHIFT))
 	                                                                         ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#355: FILE: fs/proc/proc_misc.c:164:
+	extern atomic_t vm_committed_space;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: fs/proc/proc_misc.c:165:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#391: FILE: include/linux/mm.h:110:
+#define VM_STACK_FLAGS	(VM_DATA_DEFAULT_FLAGS|VM_GROWSUP|VM_ACCOUNT)
                       	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#391: FILE: include/linux/mm.h:110:
+#define VM_STACK_FLAGS	(VM_DATA_DEFAULT_FLAGS|VM_GROWSUP|VM_ACCOUNT)
                       	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#393: FILE: include/linux/mm.h:112:
+#define VM_STACK_FLAGS	(VM_DATA_DEFAULT_FLAGS|VM_GROWSDOWN|VM_ACCOUNT)
                       	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#393: FILE: include/linux/mm.h:112:
+#define VM_STACK_FLAGS	(VM_DATA_DEFAULT_FLAGS|VM_GROWSDOWN|VM_ACCOUNT)
                       	                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#445: FILE: include/linux/mm.h:648:
+extern int expand_stack(struct vm_area_struct * vma, unsigned long address);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#445: FILE: include/linux/mm.h:648:
+extern int expand_stack(struct vm_area_struct * vma, unsigned long address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#456: FILE: include/linux/mman.h:9:
+extern int vm_enough_memory(long pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/linux/mman.h:10:
+extern void vm_unacct_memory(long pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/linux/mman.h:11:
+extern void vm_validate_enough(char *x);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#468: FILE: include/linux/sysctl.h:162:
+	VM_OVERCOMMIT_RATIO=24,	/* percent of RAM to allow overcommit in */
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#496: FILE: kernel/fork.c:180:
+		if(mpnt->vm_flags & VM_ACCOUNT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#498: FILE: kernel/fork.c:182:
+			unsigned int len = (mpnt->vm_end - mpnt->vm_start) >> PAGE_SHIFT;
+			if(!vm_enough_memory(len))

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: kernel/fork.c:182:
+			if(!vm_enough_memory(len))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#527: FILE: kernel/sysctl.c:48:
+extern int sysctl_overcommit_ratio;

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#624: FILE: mm/mmap.c:19:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#625: FILE: mm/mmap.c:20:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: mm/mmap.c:22:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: mm/mmap.c:22:
+ $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#636: FILE: mm/mmap.c:65:
+int sysctl_overcommit_memory = 0;	/* default is heuristic overcommit */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: mm/mmap.c:94:
+^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#669: FILE: mm/mmap.c:95:
+	if (sysctl_overcommit_memory == 0)
+	{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: mm/mmap.c:101:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#683: FILE: mm/mmap.c:109:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: mm/mmap.c:118:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#693: FILE: mm/mmap.c:119:
+		if(free > pages)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: mm/mmap.c:125:
+^I/* FIXME - need to add arch hooks to get the bits we need $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#704: FILE: mm/mmap.c:126:
+	/* FIXME - need to add arch hooks to get the bits we need 
+	   without the higher overhead crap */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#704: FILE: mm/mmap.c:126:
+	   without the higher overhead crap */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: mm/mmap.c:127:
+^Isi_meminfo(&i);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: mm/mmap.c:130:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#709: FILE: mm/mmap.c:131:
+	if(atomic_read(&vm_committed_space) < allowed)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#732: FILE: mm/mmap.c:139:
+{^I$

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#741: FILE: mm/mmap.c:148:
+ *	with no SYS5 shared memory (thats not validated yet) and non SMP
   	                            ^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#746: FILE: mm/mmap.c:153:
+#if 0

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#759: FILE: mm/mmap.c:165:
+		for(vma = mm->mmap; vma!=NULL; vma=vma->vm_next)
+		{

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#759: FILE: mm/mmap.c:165:
+		for(vma = mm->mmap; vma!=NULL; vma=vma->vm_next)
 		                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#759: FILE: mm/mmap.c:165:
+		for(vma = mm->mmap; vma!=NULL; vma=vma->vm_next)
 		                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#759: FILE: mm/mmap.c:165:
+		for(vma = mm->mmap; vma!=NULL; vma=vma->vm_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#759: FILE: mm/mmap.c:165:
+		for(vma = mm->mmap; vma!=NULL; vma=vma->vm_next)

ERROR:SPACING: space required before the open parenthesis '('
#761: FILE: mm/mmap.c:167:
+			if(vma->vm_flags & VM_ACCOUNT)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: mm/mmap.c:170:
+^I}^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#765: FILE: mm/mmap.c:171:
+	if(count != atomic_read(&vm_committed_space))
+	{

ERROR:SPACING: space required before the open parenthesis '('
#765: FILE: mm/mmap.c:171:
+	if(count != atomic_read(&vm_committed_space))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#767: FILE: mm/mmap.c:173:
+		printk("MM crappo accounting %s: %lu %ld.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: mm/mmap.c:174:
+		printk("MM crappo accounting %s: %lu %ld.\n",
+			x, count, atomic_read(&vm_committed_space));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#815: FILE: mm/mmap.c:587:
+		if ((vm_flags & (VM_SHARED|VM_WRITE)) == VM_WRITE) {
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#860: FILE: mm/mmap.c:695:
+	if(charged)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#871: FILE: mm/mmap.c:841:
+ * and even  address < vma->vm_start. Have to extend vma. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#874: FILE: mm/mmap.c:844:
+static inline int expand_stack(struct vm_area_struct * vma, unsigned long address)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#881: FILE: mm/mmap.c:851:
+	vm_validate_enough("entering expand_stack");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#888: FILE: mm/mmap.c:858:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#888: FILE: mm/mmap.c:858:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: mm/mmap.c:858:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#911: FILE: mm/mmap.c:881:
+		vm_validate_enough("exiting expand_stack - FAIL");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#916: FILE: mm/mmap.c:886:
+      	    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#916: FILE: mm/mmap.c:886:
+      ^I    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#916: FILE: mm/mmap.c:886:
+      ^I    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: mm/mmap.c:886:
+	if ((vma->vm_flags & VM_LOCKED) &&
+      	    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: mm/mmap.c:886:
+      ^I    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#919: FILE: mm/mmap.c:889:
+		vm_validate_enough("exiting expand_stack - FAIL");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#923: FILE: mm/mmap.c:893:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#929: FILE: mm/mmap.c:899:
+	vm_validate_enough("exiting expand_stack");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#934: FILE: mm/mmap.c:904:
+int expand_stack(struct vm_area_struct * vma, unsigned long address)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#941: FILE: mm/mmap.c:911:
+	vm_validate_enough("entering expand_stack");

ERROR:CODE_INDENT: code indent should use tabs where possible
#949: FILE: mm/mmap.c:919:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#949: FILE: mm/mmap.c:919:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: mm/mmap.c:919:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#969: FILE: mm/mmap.c:939:
+		vm_validate_enough("exiting expand_stack - FAIL");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#974: FILE: mm/mmap.c:944:
+      	    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#974: FILE: mm/mmap.c:944:
+      ^I    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#974: FILE: mm/mmap.c:944:
+      ^I    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#974: FILE: mm/mmap.c:944:
+	if ((vma->vm_flags & VM_LOCKED) &&
+      	    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: mm/mmap.c:944:
+      ^I    ((vma->vm_mm->locked_vm + grow) << PAGE_SHIFT) > current->rlim[RLIMIT_MEMLOCK].rlim_cur) {$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#977: FILE: mm/mmap.c:947:
+		vm_validate_enough("exiting expand_stack - FAIL");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#981: FILE: mm/mmap.c:951:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'expand_stack', this function's name, in a string
#988: FILE: mm/mmap.c:958:
+	vm_validate_enough("exiting expand_stack");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1037: FILE: mm/mmap.c:1279:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1046: FILE: mm/mmap.c:1325:
+^Iflags = VM_DATA_DEFAULT_FLAGS | VM_ACCOUNT | mm->def_flags; $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1053: FILE: mm/mmap.c:1335:
 	if (!vma)
+	{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1080: FILE: mm/mmap.c:1406:
+^I$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1117: FILE: mm/mprotect.c:20:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1118: FILE: mm/mprotect.c:21:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1142: FILE: mm/mprotect.c:277:
+	    !(vma->vm_flags & (VM_ACCOUNT|VM_WRITE|VM_SHARED))) {
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1142: FILE: mm/mprotect.c:277:
+	    !(vma->vm_flags & (VM_ACCOUNT|VM_WRITE|VM_SHARED))) {
 	                                          ^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1203: FILE: mm/mremap.c:20:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1204: FILE: mm/mremap.c:21:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:SPACING: space required before the open parenthesis '('
#1301: FILE: mm/mremap.c:368:
+		if(!vm_enough_memory(charged))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1319: FILE: mm/mremap.c:418:
+	if(ret & ~PAGE_MASK)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#1319: FILE: mm/mremap.c:418:
+	if(ret & ~PAGE_MASK)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'attr->ia_size <= SHMEM_MAX_BYTES'
#1359: FILE: mm/shmem.c:402:
+	if ((attr->ia_valid & ATTR_SIZE) && (attr->ia_size <= SHMEM_MAX_BYTES)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#1361: FILE: mm/shmem.c:404:
+^I ^I * Account swap file usage based on new file size,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1361: FILE: mm/shmem.c:404:
+^I ^I * Account swap file usage based on new file size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1363: FILE: mm/shmem.c:406:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1363: FILE: mm/shmem.c:406:
+^I ^I */$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1460: FILE: mm/shmem.c:1405:
+			iput(inode);
 			^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 84 errors, 81 warnings, 23 checks, 1292 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
