WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
To recap, this patch allows root_plug to work again. It needs functions that

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: security/commoncap.c:1:
+/* Common capabilities, needed by capability.o and root_cap.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#411: FILE: security/commoncap.c:1:
+/* Common capabilities, needed by capability.o and root_cap.o 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#436: FILE: security/commoncap.c:26:
+int cap_capable (struct task_struct *tsk, int cap)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#439: FILE: security/commoncap.c:29:
+	if (cap_raised (tsk->cap_effective, cap))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#445: FILE: security/commoncap.c:35:
+int cap_ptrace (struct task_struct *parent, struct task_struct *child)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#448: FILE: security/commoncap.c:38:
+	if (!cap_issubset (child->cap_permitted, current->cap_permitted) &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#449: FILE: security/commoncap.c:39:
+	    !capable (CAP_SYS_PTRACE))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#455: FILE: security/commoncap.c:45:
+int cap_capget (struct task_struct *target, kernel_cap_t *effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#465: FILE: security/commoncap.c:55:
+int cap_capset_check (struct task_struct *target, kernel_cap_t *effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#470: FILE: security/commoncap.c:60:
+	if (!cap_issubset (*inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#471: FILE: security/commoncap.c:61:
+			   cap_combine (target->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#477: FILE: security/commoncap.c:67:
+	if (!cap_issubset (*permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#478: FILE: security/commoncap.c:68:
+			   cap_combine (target->cap_permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#484: FILE: security/commoncap.c:74:
+	if (!cap_issubset (*effective, *permitted)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#484: FILE: security/commoncap.c:74:
+	if (!cap_issubset (*effective, *permitted)) {
+		return -EPERM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#491: FILE: security/commoncap.c:81:
+void cap_capset_set (struct task_struct *target, kernel_cap_t *effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#499: FILE: security/commoncap.c:89:
+int cap_bprm_set_security (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#504: FILE: security/commoncap.c:94:
+	cap_clear (bprm->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#505: FILE: security/commoncap.c:95:
+	cap_clear (bprm->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#506: FILE: security/commoncap.c:96:
+	cap_clear (bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#516: FILE: security/commoncap.c:106:
+	if (!issecure (SECURE_NOROOT)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: security/commoncap.c:108:
+			cap_set_full (bprm->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#519: FILE: security/commoncap.c:109:
+			cap_set_full (bprm->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#522: FILE: security/commoncap.c:112:
+			cap_set_full (bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: security/commoncap.c:118:
+static inline int must_not_trace_exec (struct task_struct *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#533: FILE: security/commoncap.c:123:
+void cap_bprm_compute_creds (struct linux_binprm *bprm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#538: FILE: security/commoncap.c:128:
+	new_permitted = cap_intersect (bprm->cap_permitted, cap_bset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#539: FILE: security/commoncap.c:129:
+	working = cap_intersect (bprm->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: security/commoncap.c:131:
+	new_permitted = cap_combine (new_permitted, working);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#544: FILE: security/commoncap.c:134:
+	if (!cap_issubset (new_permitted, current->cap_permitted)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#547: FILE: security/commoncap.c:137:
+		if (must_not_trace_exec (current)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&current->fs->count'
#547: FILE: security/commoncap.c:137:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sighand->count) > 1) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&current->files->count'
#547: FILE: security/commoncap.c:137:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sighand->count) > 1) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&current->sighand->count'
#547: FILE: security/commoncap.c:137:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sighand->count) > 1) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#548: FILE: security/commoncap.c:138:
+		if (must_not_trace_exec (current)
+		    || atomic_read (&current->fs->count) > 1

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#548: FILE: security/commoncap.c:138:
+		    || atomic_read (&current->fs->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#549: FILE: security/commoncap.c:139:
+		    || atomic_read (&current->fs->count) > 1
+		    || atomic_read (&current->files->count) > 1

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#549: FILE: security/commoncap.c:139:
+		    || atomic_read (&current->files->count) > 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#550: FILE: security/commoncap.c:140:
+		    || atomic_read (&current->files->count) > 1
+		    || atomic_read (&current->sighand->count) > 1) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#550: FILE: security/commoncap.c:140:
+		    || atomic_read (&current->sighand->count) > 1) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#551: FILE: security/commoncap.c:141:
+			if (!capable (CAP_SETPCAP)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#552: FILE: security/commoncap.c:142:
+				new_permitted = cap_intersect (new_permitted,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'current->cap_permitted'
#554: FILE: security/commoncap.c:144:
+							       current->
+							       cap_permitted);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#561: FILE: security/commoncap.c:151:
+	 * capability rules */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#565: FILE: security/commoncap.c:155:
+		    cap_intersect (new_permitted, bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#574: FILE: security/commoncap.c:164:
+int cap_bprm_secureexec (struct linux_binprm *bprm)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: security/commoncap.c:167:
+^I   bits on files, the test below should be extended to also perform a $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#577: FILE: security/commoncap.c:167:
+	/* If/when this module is enhanced to incorporate capability
+	   bits on files, the test below should be extended to also perform a 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#580: FILE: security/commoncap.c:170:
+	   the old userland. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: security/commoncap.c:176:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: security/commoncap.c:190:
+ *  fsuid is handled elsewhere. fsuid == 0 and {r,e,s}uid!= 0 should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#603: FILE: security/commoncap.c:193:
+ *  -astor $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#615: FILE: security/commoncap.c:205:
+static inline void cap_emulate_setxuid (int old_ruid, int old_euid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#621: FILE: security/commoncap.c:211:
+		cap_clear (current->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#622: FILE: security/commoncap.c:212:
+		cap_clear (current->cap_effective);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#624: FILE: security/commoncap.c:214:
+	if (old_euid == 0 && current->euid != 0) {
+		cap_clear (current->cap_effective);
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#625: FILE: security/commoncap.c:215:
+		cap_clear (current->cap_effective);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#627: FILE: security/commoncap.c:217:
+	if (old_euid != 0 && current->euid == 0) {
+		current->cap_effective = current->cap_permitted;
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#632: FILE: security/commoncap.c:222:
+int cap_task_post_setuid (uid_t old_ruid, uid_t old_euid, uid_t old_suid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#640: FILE: security/commoncap.c:230:
+		if (!issecure (SECURE_NO_SETUID_FIXUP)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#640: FILE: security/commoncap.c:230:
+		if (!issecure (SECURE_NO_SETUID_FIXUP)) {
+			cap_emulate_setxuid (old_ruid, old_euid, old_suid);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#641: FILE: security/commoncap.c:231:
+			cap_emulate_setxuid (old_ruid, old_euid, old_suid);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#655: FILE: security/commoncap.c:245:
+			if (!issecure (SECURE_NO_SETUID_FIXUP)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#675: FILE: security/commoncap.c:265:
+void cap_task_reparent_to_init (struct task_struct *p)

WARNING:RETURN_VOID: void function return statements are not generally useful
#682: FILE: security/commoncap.c:272:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#684: FILE: security/commoncap.c:274:
+int cap_syslog (int type)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type != 3'
#686: FILE: security/commoncap.c:276:
+	if ((type != 3) && !capable(CAP_SYS_ADMIN))

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: security/commoncap.c:298:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#750: FILE: security/commoncap.c:340:
+EXPORT_SYMBOL(cap_capable);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#751: FILE: security/commoncap.c:341:
+EXPORT_SYMBOL(cap_ptrace);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#752: FILE: security/commoncap.c:342:
+EXPORT_SYMBOL(cap_capget);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#753: FILE: security/commoncap.c:343:
+EXPORT_SYMBOL(cap_capset_check);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#754: FILE: security/commoncap.c:344:
+EXPORT_SYMBOL(cap_capset_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#755: FILE: security/commoncap.c:345:
+EXPORT_SYMBOL(cap_bprm_set_security);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#756: FILE: security/commoncap.c:346:
+EXPORT_SYMBOL(cap_bprm_compute_creds);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#757: FILE: security/commoncap.c:347:
+EXPORT_SYMBOL(cap_bprm_secureexec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#758: FILE: security/commoncap.c:348:
+EXPORT_SYMBOL(cap_task_post_setuid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#759: FILE: security/commoncap.c:349:
+EXPORT_SYMBOL(cap_task_reparent_to_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#760: FILE: security/commoncap.c:350:
+EXPORT_SYMBOL(cap_syslog);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#761: FILE: security/commoncap.c:351:
+EXPORT_SYMBOL(cap_vm_enough_memory);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000348366.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 68 warnings, 7 checks, 709 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000348366.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
