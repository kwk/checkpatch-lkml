WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Linux JOB provides grouping of processes in to inescapable containers.  A job,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: Documentation/job.txt:8:
+job implementation.  Section 3 provides some information about using $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: Documentation/job.txt:86:
+       job(1), jwait(1), jstat(1), jkill(1), jsethid(8), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: Documentation/job.txt:89:
+       job_attachpid(3), job_getjid(3), job_getpidlist(3), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: Documentation/job.txt:90:
+       job_sethid(3), job_create(3), job_getjidcnt(3), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: Documentation/job.txt:94:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: Documentation/job.txt:100:
+about running jobs, creating jobs, detaching, attaching, etc.  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#194: FILE: include/linux/job.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#208: FILE: include/linux/job.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#209: FILE: include/linux/job.h:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: include/linux/job.h:17:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: include/linux/job.h:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: include/linux/job.h:22:
+ * http://www.sgi.com $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: include/linux/job.h:23:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: include/linux/job.h:24:
+ * For further information regarding this notice, see: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: include/linux/job.h:25:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: include/linux/job.h:30:
+ * Description:  This file, include/linux/job.h, contains the data $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#223: FILE: include/linux/job.h:30:
+ * Description:  This file, include/linux/job.h, contains the data 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: include/linux/job.h:31:
+ * ^I^I structure definitions and functions prototypes used$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: include/linux/job.h:32:
+ * ^I^I by job to communicate with pagg via a virtual filesystem$

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#239: FILE: include/linux/job.h:46:
+#define	PAGG_NAMESTR	PAGG_NAMELN+1  /* PAGG mod name string including room for end-of-string = '\0' */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#239: FILE: include/linux/job.h:46:
+#define	PAGG_NAMESTR	PAGG_NAMELN+1  /* PAGG mod name string including room for end-of-string = '\0' */
        	            	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#239: FILE: include/linux/job.h:46:
+#define	PAGG_NAMESTR	PAGG_NAMELN+1  /* PAGG mod name string including room for end-of-string = '\0' */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: include/linux/job.h:62:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: include/linux/job.h:115:
+        struct job_waitinfo waitinfo;   /* Status info for waiting tasks */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: include/linux/job.h:115:
+        struct job_waitinfo waitinfo;   /* Status info for waiting tasks */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#316: FILE: include/linux/job.h:123:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#330: FILE: include/linux/job.h:137:
+u64 job_getjid(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: include/linux/job.h:140:
+static int jobfs_fill_super(struct super_block * sb, void * data, int silent);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: include/linux/job.h:140:
+static int jobfs_fill_super(struct super_block * sb, void * data, int silent);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#334: FILE: include/linux/job.h:141:
+static int jobfs_create_files (struct super_block *sb, struct dentry *root);

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#335: FILE: include/linux/job.h:142:
+static struct dentry *jobfs_create(struct super_block *sb,struct dentry *parent, const char *name, int mode, u64 *jid, pid_t *pid, char *buf, int type);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#335: FILE: include/linux/job.h:142:
+static struct dentry *jobfs_create(struct super_block *sb,struct dentry *parent, const char *name, int mode, u64 *jid, pid_t *pid, char *buf, int type);
                                                          ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#338: FILE: include/linux/job.h:145:
+static int jobfs_open(struct inode *inode, struct file *filp);
                                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#339: FILE: include/linux/job.h:146:
+static ssize_t jobfs_read(struct file *filp, char *buf,size_t count, loff_t *offset);
                                        ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: include/linux/job.h:146:
+static ssize_t jobfs_read(struct file *filp, char *buf,size_t count, loff_t *offset);
                                                       ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#340: FILE: include/linux/job.h:147:
+static ssize_t jobfs_jhandle_write(struct file *filp, const char *buf, size_t count, loff_t *offset);
                                                 ^^^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#340: FILE: include/linux/job.h:147:
+static ssize_t jobfs_jhandle_write(struct file *filp, const char *buf, size_t count, loff_t *offset);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#341: FILE: include/linux/job.h:148:
+static ssize_t jobfs_hid_write(struct file *filp, const char *buf, size_t count, loff_t *offset);
                                             ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#345: FILE: include/linux/job.h:152:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: init/Kconfig:161:
+^I$

WARNING:TYPO_SPELLING: 'contians' may be misspelled - perhaps 'contains'?
#370: FILE: init/Kconfig:164:
+	  and the processes it contians.  The jid can also be used to send
 	                       ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: init/Kconfig:168:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#388: FILE: kernel/job.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#405: FILE: kernel/job.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#406: FILE: kernel/job.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: kernel/job.c:20:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: kernel/job.c:24:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: kernel/job.c:25:
+ * http://www.sgi.com $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: kernel/job.c:26:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: kernel/job.c:27:
+ * For further information regarding this notice, see: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: kernel/job.c:28:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#421: FILE: kernel/job.c:34:
+ * ^I^IFor further information about jobs, consult the file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: kernel/job.c:35:
+ * ^I^IDocumentation/job.txt. Jobs are implemented as a type of PAGG$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: kernel/job.c:36:
+ * ^I^I(process aggregate).  For further information about PAGGs,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#424: FILE: kernel/job.c:37:
+ * ^I^Iconsult the file Documentation/pagg.txt.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: kernel/job.c:44:
+ * have two classes of locks: $

WARNING:TYPO_SPELLING: 'sempahores' may be misspelled - perhaps 'semaphores'?
#436: FILE: kernel/job.c:49:
+ * Most of the locking used is read/write sempahores.  In  rare cases, a
                                           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: kernel/job.c:91:
+ * before downing job->sem. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: kernel/job.c:131:
+static int^I    ^I job_table_refcnt = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#518: FILE: kernel/job.c:131:
+static int	    	 job_table_refcnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: kernel/job.c:132:
+static ^I^I^I DECLARE_RWSEM(job_table_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: kernel/job.c:135:
+static struct job_acctmod ^I*acct_list[JOB_ACCT_COUNT];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#523: FILE: kernel/job.c:136:
+static ^I^I^I^IDECLARE_RWSEM(acct_list_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#528: FILE: kernel/job.c:141:
+static char ^I   *hid = NULL;$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#528: FILE: kernel/job.c:141:
+static char 	   *hid = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: kernel/job.c:158:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: kernel/job.c:165:
+ * The caller should normally down_read() the job_table_sem before calling this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: kernel/job.c:166:
+ * function. $

ERROR:SPACING: space prohibited after that open square bracket '['
#562: FILE: kernel/job.c:175:
+	list_for_each(entry,  &job_table[ jid_hash(jid) ]) {

ERROR:SPACING: space prohibited before that close square bracket ']'
#562: FILE: kernel/job.c:175:
+	list_for_each(entry,  &job_table[ jid_hash(jid) ]) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: kernel/job.c:184:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: kernel/job.c:187:
+ * @task: The task we want to attach to the job $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: kernel/job.c:188:
+ * @new_pagg: The already allocated pagg struct for the task $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#580: FILE: kernel/job.c:193:
+ * In addition, a link from the task to the job is created and added to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: kernel/job.c:194:
+ * task via the data pointer reference.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: kernel/job.c:198:
+ * that the job cannot be removed since at least one process will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: kernel/job.c:213:
+job_attach(struct task_struct *task, struct pagg *new_pagg, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: kernel/job.c:214:
+job_attach(struct task_struct *task, struct pagg *new_pagg, 
+		void  *old_data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: kernel/job.c:221:
+^I/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#618: FILE: kernel/job.c:231:
+		printk(KERN_WARNING "Attach task(pid=%d) to job"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: kernel/job.c:232:
+^I^I^I^I" failed - job is ZOMBIE\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#619: FILE: kernel/job.c:232:
+		printk(KERN_WARNING "Attach task(pid=%d) to job"
+				" failed - job is ZOMBIE\n", 

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#626: FILE: kernel/job.c:239:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: kernel/job.c:242:
+^Iattached = (struct job_attach *)kmalloc(sizeof(struct job_attach), $

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#629: FILE: kernel/job.c:242:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), 

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attached)...) over kmalloc(sizeof(struct job_attach)...)
#629: FILE: kernel/job.c:242:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), 

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#633: FILE: kernel/job.c:246:
+		printk(KERN_ERR "Attach task(pid=%d) to job"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: kernel/job.c:247:
+^I^I^I^I" failed on memory error in kernel\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#634: FILE: kernel/job.c:247:
+		printk(KERN_ERR "Attach task(pid=%d) to job"
+				" failed on memory error in kernel\n", 

WARNING:TYPO_SPELLING: 'attatched' may be misspelled - perhaps 'attached'?
#648: FILE: kernel/job.c:261:
+	/* create files in jobfs for newly attatched job.*/
 	                                   ^^^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#652: FILE: kernel/job.c:265:
+	if(job->jid_dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: kernel/job.c:266:
+^I^Iattached->pid_dentry = jobfs_create(jobsb, job->jid_dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: kernel/job.c:267:
+		attached->pid_dentry = jobfs_create(jobsb, job->jid_dentry, 
+			pid_buf, S_IFREG|0444, 0, 0, attached->jid_buf, JOB_FILE_READ);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#654: FILE: kernel/job.c:267:
+			pid_buf, S_IFREG|0444, 0, 0, attached->jid_buf, JOB_FILE_READ);
 			                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: kernel/job.c:268:
+^Iattached->pids_dentry = jobfs_create(jobsb, piddirs, pid_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: kernel/job.c:269:
+	attached->pids_dentry = jobfs_create(jobsb, piddirs, pid_buf, 
+		S_IFREG|0444, 0, 0, attached->jid_buf, JOB_FILE_READ);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#656: FILE: kernel/job.c:269:
+		S_IFREG|0444, 0, 0, attached->jid_buf, JOB_FILE_READ);
 		       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: kernel/job.c:270:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: kernel/job.c:271:
+^Iup_write(&job->sem);  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#667: FILE: kernel/job.c:280:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: kernel/job.c:284:
+ * @pagg: The pagg reference $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#693: FILE: kernel/job.c:306:
+	 * Obtain the lock on the the job_table_sem and the job->sem for 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: kernel/job.c:306:
+^I * Obtain the lock on the the job_table_sem and the job->sem for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: kernel/job.c:310:
+^Idown_write(&job->sem);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: kernel/job.c:311:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#704: FILE: kernel/job.c:317:
+		struct job_acctmod *acct = acct_list[JOB_ACCT_CSA];
+		if (acct->module) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#706: FILE: kernel/job.c:319:
+				printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#707: FILE: kernel/job.c:320:
+					"job_detach: Tried to get non-living acct module\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: kernel/job.c:348:
+^I^I^Ijob->primepid_dentry = jobfs_create(jobsb, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#736: FILE: kernel/job.c:349:
+^I^I^I^Ijob->jid_dentry, "primepid", S_IFREG|0444, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: kernel/job.c:349:
+			job->primepid_dentry = jobfs_create(jobsb, 
+				job->jid_dentry, "primepid", S_IFREG|0444, 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#736: FILE: kernel/job.c:349:
+				job->jid_dentry, "primepid", S_IFREG|0444, 
 				                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: kernel/job.c:360:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#759: FILE: kernel/job.c:372:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#759: FILE: kernel/job.c:372:
+
+		

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: kernel/job.c:373:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: kernel/job.c:383:
+^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: kernel/job.c:385:
+^I^I/* $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#778: FILE: kernel/job.c:391:
+		for (i=0; i<JOB_ACCT_COUNT; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#778: FILE: kernel/job.c:391:
+		for (i=0; i<JOB_ACCT_COUNT; i++) {
 		           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#781: FILE: kernel/job.c:394:
+				struct job_acctmod *acct = acct_list[i];
+				if (acct->module) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#783: FILE: kernel/job.c:396:
+						printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#784: FILE: kernel/job.c:397:
+							"job_detach: Tried to get non-living acct module\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#801: FILE: kernel/job.c:414:
+						printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#802: FILE: kernel/job.c:415:
+							"job_detach: CSA -"

WARNING:SPLIT_STRING: quoted string split across lines
#803: FILE: kernel/job.c:416:
+							"job_detach: CSA -"
+							" jobend failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#806: FILE: kernel/job.c:419:
+^I^I^I^Iif (acct->module) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#808: FILE: kernel/job.c:421:
+^I^I^I} $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#811: FILE: kernel/job.c:424:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#812: FILE: kernel/job.c:425:
+^I^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#814: FILE: kernel/job.c:427:
+^I         * detached and finished waiting, so now we can free the$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: kernel/job.c:435:
+^I^I * Therefore, only the job->sem is being held - the $

WARNING:RETURN_VOID: void function return statements are not generally useful
#829: FILE: kernel/job.c:442:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: kernel/job.c:444:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: kernel/job.c:463:
+^I/* $

ERROR:SPACING: space required before the open parenthesis '('
#865: FILE: kernel/job.c:478:
+	if(jid == 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: kernel/job.c:483:
+^I/* $

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#875: FILE: kernel/job.c:488:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attached)...) over kmalloc(sizeof(struct job_attach)...)
#875: FILE: kernel/job.c:488:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#882: FILE: kernel/job.c:495:
+	job = (struct job_entry *)kmalloc(sizeof(struct job_entry), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*job)...) over kmalloc(sizeof(struct job_entry)...)
#882: FILE: kernel/job.c:495:
+	job = (struct job_entry *)kmalloc(sizeof(struct job_entry), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#891: FILE: kernel/job.c:504:
+^I * already in use, we don't want to detach that job.  Having this ability $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: kernel/job.c:510:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#902: FILE: kernel/job.c:515:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: kernel/job.c:516:
+^Iif (job_getjob(jid)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#907: FILE: kernel/job.c:520:
+^I^I/* we haven't allocated a new pagg yet so error_return won't unlock $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#908: FILE: kernel/job.c:521:
+		 * this.  We'll unlock here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: kernel/job.c:566:
+^I * could fail too, we don't want to job_create fail at this point. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: kernel/job.c:568:
+^Ijob->jid_dentry = jobfs_create(jobsb, jiddirs, attached->jid_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: kernel/job.c:569:
+	job->jid_dentry = jobfs_create(jobsb, jiddirs, attached->jid_buf, 
+		S_IFDIR|0555, 0, 0, attached->jid_buf, JOB_RDIR );

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#956: FILE: kernel/job.c:569:
+		S_IFDIR|0555, 0, 0, attached->jid_buf, JOB_RDIR );
 		       ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#956: FILE: kernel/job.c:569:
+		S_IFDIR|0555, 0, 0, attached->jid_buf, JOB_RDIR );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: kernel/job.c:570:
+^Iif (!job->jid_dentry) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#958: FILE: kernel/job.c:571:
+^I^Iprintk(KERN_WARNING "jobfs: jid dentry for %s failed", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#958: FILE: kernel/job.c:571:
+		printk(KERN_WARNING "jobfs: jid dentry for %s failed", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: kernel/job.c:572:
+		printk(KERN_WARNING "jobfs: jid dentry for %s failed", 
+			attached->jid_buf);

CHECK:BRACES: Unbalanced braces around else statement
#960: FILE: kernel/job.c:573:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#961: FILE: kernel/job.c:574:
+^I^Ihandle_dentry = jobfs_create(jobsb, job->jid_dentry, "handle", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#962: FILE: kernel/job.c:575:
+^I^I^IS_IFREG|0222, &job->jid, 0, attached->jid_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: kernel/job.c:575:
+		handle_dentry = jobfs_create(jobsb, job->jid_dentry, "handle", 
+			S_IFREG|0222, &job->jid, 0, attached->jid_buf, 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#962: FILE: kernel/job.c:575:
+			S_IFREG|0222, &job->jid, 0, attached->jid_buf, 
 			       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: kernel/job.c:577:
+^I^Iattached->pid_dentry = jobfs_create(jobsb, job->jid_dentry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: kernel/job.c:578:
+^I^I^Ijob->prime_buf, S_IFREG|0444, 0, 0, attached->jid_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: kernel/job.c:578:
+		attached->pid_dentry = jobfs_create(jobsb, job->jid_dentry, 
+			job->prime_buf, S_IFREG|0444, 0, 0, attached->jid_buf, 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#965: FILE: kernel/job.c:578:
+			job->prime_buf, S_IFREG|0444, 0, 0, attached->jid_buf, 
 			                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: kernel/job.c:580:
+^I^Ijob->primepid_dentry = jobfs_create(jobsb, job->jid_dentry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: kernel/job.c:581:
+^I^I^I"primepid", S_IFREG|0444, 0, 0, job->prime_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#968: FILE: kernel/job.c:581:
+		job->primepid_dentry = jobfs_create(jobsb, job->jid_dentry, 
+			"primepid", S_IFREG|0444, 0, 0, job->prime_buf, 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#968: FILE: kernel/job.c:581:
+			"primepid", S_IFREG|0444, 0, 0, job->prime_buf, 
 			                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#972: FILE: kernel/job.c:585:
+	attached->pids_dentry = jobfs_create(jobsb, piddirs, job->prime_buf,
+		S_IFREG|0444, 0, 0, attached->jid_buf, JOB_FILE_READ);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#972: FILE: kernel/job.c:585:
+		S_IFREG|0444, 0, 0, attached->jid_buf, JOB_FILE_READ);
 		       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handle_dentry"
#974: FILE: kernel/job.c:587:
+	if (handle_dentry == NULL || attached->pid_dentry == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attached->pid_dentry"
#974: FILE: kernel/job.c:587:
+	if (handle_dentry == NULL || attached->pid_dentry == NULL ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#975: FILE: kernel/job.c:588:
+	if (handle_dentry == NULL || attached->pid_dentry == NULL ||
+		job->primepid_dentry == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!job->primepid_dentry"
#975: FILE: kernel/job.c:588:
+		job->primepid_dentry == NULL ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#976: FILE: kernel/job.c:589:
+^I^Iattached->pids_dentry == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!attached->pids_dentry"
#976: FILE: kernel/job.c:589:
+		attached->pids_dentry == NULL) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#977: FILE: kernel/job.c:590:
+^I^Iprintk(KERN_WARNING "jid sub dentrys for %s failed", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#977: FILE: kernel/job.c:590:
+		printk(KERN_WARNING "jid sub dentrys for %s failed", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#978: FILE: kernel/job.c:591:
+		printk(KERN_WARNING "jid sub dentrys for %s failed", 
+			attached->jid_buf);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#980: FILE: kernel/job.c:593:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#980: FILE: kernel/job.c:593:
+
+	

ERROR:SPACING: space prohibited after that open square bracket '['
#982: FILE: kernel/job.c:595:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

ERROR:SPACING: space prohibited before that close square bracket ']'
#982: FILE: kernel/job.c:595:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#982: FILE: kernel/job.c:595:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#985: FILE: kernel/job.c:598:
+^Iup_write(&job_table_sem); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#991: FILE: kernel/job.c:604:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#997: FILE: kernel/job.c:610:
+^I} $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1002: FILE: kernel/job.c:615:
+	for (i=0; i<JOB_ACCT_COUNT; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1002: FILE: kernel/job.c:615:
+	for (i=0; i<JOB_ACCT_COUNT; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1005: FILE: kernel/job.c:618:
+			struct job_acctmod *acct = acct_list[i];
+			if (acct->module) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1007: FILE: kernel/job.c:620:
+					printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_create', this function's name, in a string
#1008: FILE: kernel/job.c:621:
+						"job_create: Tried to get non-living acct module\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1024: FILE: kernel/job.c:637:
+					printk(KERN_WARNING "job_create: CSA -"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_create', this function's name, in a string
#1024: FILE: kernel/job.c:637:
+					printk(KERN_WARNING "job_create: CSA -"

WARNING:SPLIT_STRING: quoted string split across lines
#1025: FILE: kernel/job.c:638:
+					printk(KERN_WARNING "job_create: CSA -"
+						" jobstart failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1027: FILE: kernel/job.c:640:
+^I^I^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1028: FILE: kernel/job.c:641:
+^I^I^Iif (acct->module) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1047: FILE: kernel/job.c:660:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1048: FILE: kernel/job.c:661:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: kernel/job.c:662:
+ * job_waitjid - allows a process to wait until a job exits $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1072: FILE: kernel/job.c:685:
+	if ((job = job_getjob(jid)) == NULL ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1072: FILE: kernel/job.c:685:
+	if ((job = job_getjob(jid)) == NULL ) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: kernel/job.c:689:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1078: FILE: kernel/job.c:691:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1084: FILE: kernel/job.c:697:
+^I++job->waitcnt; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1090: FILE: kernel/job.c:703:
+	 * first notifying this current task */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1091: FILE: kernel/job.c:704:
+^Iretcode = wait_event_interruptible(job->wait, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1092: FILE: kernel/job.c:705:
+	retcode = wait_event_interruptible(job->wait, 
+			job->refcnt == 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1095: FILE: kernel/job.c:708:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1096: FILE: kernel/job.c:709:
+^I^I * This data is static at this point, we will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1104: FILE: kernel/job.c:717:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1108: FILE: kernel/job.c:721:
+^I^I/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1127: FILE: kernel/job.c:740:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1149: FILE: kernel/job.c:762:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1161: FILE: kernel/job.c:774:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: kernel/job.c:775:
+         * Check capability to signal job.  The signaling user must be$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: kernel/job.c:796:
+^I^Ierr = send_sig_info(sig, &info, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: kernel/job.c:797:
+		err = send_sig_info(sig, &info, 
+				attached->task);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: kernel/job.c:799:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1191: FILE: kernel/job.c:804:
+^I^I^I * should exit when all the child processes exit. It $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1195: FILE: kernel/job.c:808:
+			if (attached->entry.prev != &job->attached) {
+				retcode = err;
+			}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1214: FILE: kernel/job.c:827:
+	if (list_empty(&job->attached))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1216: FILE: kernel/job.c:829:
+		return -ESRCH;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1216: FILE: kernel/job.c:829:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1218: FILE: kernel/job.c:831:
+^I^Iif (!attached->task) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: kernel/job.c:833:
+^I^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1225: FILE: kernel/job.c:838:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1229: FILE: kernel/job.c:842:
+ * If the hid does not get set, then the jids upper 32 bits will be set to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: kernel/job.c:857:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1248: FILE: kernel/job.c:861:
+^Idown_write(&job_table_sem); $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1258: FILE: kernel/job.c:871:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: kernel/job.c:872:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1262: FILE: kernel/job.c:875:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1263: FILE: kernel/job.c:876:
+ * The job will exit, but the processes are allowed to continue running. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1283: FILE: kernel/job.c:896:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1287: FILE: kernel/job.c:900:
+^Idown_write(&job_table_sem); $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1292: FILE: kernel/job.c:905:
+	if (job) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1295: FILE: kernel/job.c:908:
+^I^I/* Mark job as ZOMBIE so no new processes can attach to it */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1300: FILE: kernel/job.c:913:
+^I^I/* Okay, no new processes can attach to the job.  We can $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1308: FILE: kernel/job.c:921:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1309: FILE: kernel/job.c:922:
+^I^I/* Walk through list of attached tasks and unset the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1310: FILE: kernel/job.c:923:
+^I^I * pagg entries. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: kernel/job.c:924:
+^I^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1314: FILE: kernel/job.c:927:
+^I^I * we could reference memory freed by the pagg hook detach function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1316: FILE: kernel/job.c:929:
+^I^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1322: FILE: kernel/job.c:935:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1330: FILE: kernel/job.c:943:
+
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1341: FILE: kernel/job.c:954:
+^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1353: FILE: kernel/job.c:966:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1354: FILE: kernel/job.c:967:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1356: FILE: kernel/job.c:969:
+ * @pid: The process id to be detached. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1358: FILE: kernel/job.c:971:
+ * That process is allowed to continue running.  You need $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1359: FILE: kernel/job.c:972:
+ * CAP_SYS_RESOURCE capability for this to succeed. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1390: FILE: kernel/job.c:1003:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1454: FILE: kernel/job.c:1067:
+	if (pagg) {
[...]
+	} else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1462: FILE: kernel/job.c:1075:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1462: FILE: kernel/job.c:1075:
+		else {

ERROR:SPACING: space required before the open parenthesis '('
#1464: FILE: kernel/job.c:1077:
+			if(attached) {

CHECK:BRACES: Unbalanced braces around else statement
#1472: FILE: kernel/job.c:1085:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1487: FILE: kernel/job.c:1100:
+int $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1492: FILE: kernel/job.c:1105:
+	if (am->type < 0 || am->type > (JOB_ACCT_COUNT-1))
 	                                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acct_list[am->type]"
#1496: FILE: kernel/job.c:1109:
+	if (acct_list[am->type] != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1506: FILE: kernel/job.c:1119:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1513: FILE: kernel/job.c:1126:
+int $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1518: FILE: kernel/job.c:1131:
+	if (am->type < 0 || am->type > (JOB_ACCT_COUNT-1))
 	                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1533: FILE: kernel/job.c:1146:
+ * job_getjid - return the Job ID for the given task.  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1557: FILE: kernel/job.c:1170:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1574: FILE: kernel/job.c:1187:
+^Iif (!data) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1577: FILE: kernel/job.c:1190:
+^Iif (!jid) $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1590: FILE: kernel/job.c:1203:
+	switch (type) {
+		case JOB_ACCT_CSA: 
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1591: FILE: kernel/job.c:1204:
+^I^Icase JOB_ACCT_CSA: $

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1606: FILE: kernel/job.c:1219:
+			return -EINVAL;
+			break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1613: FILE: kernel/job.c:1226:
+ * job_setacct - accounting subscribers set specific accounting information $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1630: FILE: kernel/job.c:1243:
+^Iif (!data) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1633: FILE: kernel/job.c:1246:
+^Iif (!jid) $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1646: FILE: kernel/job.c:1259:
+	switch (type) {
+		case JOB_ACCT_CSA:
[...]
+		default:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1650: FILE: kernel/job.c:1263:
+^I^I^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1651: FILE: kernel/job.c:1264:
+			if (subfield & JOB_CSA_ACCTFILE) {
+				job->csa.acctfile = csa->job_acctfile;
+			}

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1659: FILE: kernel/job.c:1272:
+			return -EINVAL;
+			break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1665: FILE: kernel/job.c:1278:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1666: FILE: kernel/job.c:1279:
+ * A small virtual filesystem called jobfs is used as the job's kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1668: FILE: kernel/job.c:1281:
+ * from the userland after the job module is loaded. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1671: FILE: kernel/job.c:1284:
+ * ( 0x000013479aa37011 is an example job id (jid), 9812 and 3244 are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1673: FILE: kernel/job.c:1286:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1690: FILE: kernel/job.c:1303:
+ */ $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1695: FILE: kernel/job.c:1308:
+static struct file_operations job_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1696: FILE: kernel/job.c:1309:
+        .owner  = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1696: FILE: kernel/job.c:1309:
+        .owner  = THIS_MODULE,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1699: FILE: kernel/job.c:1312:
+static struct file_operations *jobfs_dir_ops = &simple_dir_operations;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1703: FILE: kernel/job.c:1316:
+        .drop_inode = generic_delete_inode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1703: FILE: kernel/job.c:1316:
+        .drop_inode = generic_delete_inode,$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1706: FILE: kernel/job.c:1319:
+static struct inode_operations job_jidsdir_ops = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1707: FILE: kernel/job.c:1320:
+^I.mkdir = jobfs_mkdir,     $

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1712: FILE: kernel/job.c:1325:
+static struct inode_operations job_jiddir_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1717: FILE: kernel/job.c:1330:
+static struct file_operations job_hid_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1723: FILE: kernel/job.c:1336:
+static struct file_operations job_jidhandle_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1728: FILE: kernel/job.c:1341:
+static struct file_operations job_read_fops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1733: FILE: kernel/job.c:1346:
+static struct inode_operations job_nosetattr_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1740: FILE: kernel/job.c:1353:
+	struct inode * inode = new_inode(sb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1748: FILE: kernel/job.c:1361:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1753: FILE: kernel/job.c:1366:
+static int jobfs_nosetattr(struct dentry *dentry, struct iattr *attr) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1763: FILE: kernel/job.c:1376:
+	struct job_entry *job;
+	if (sscanf(dentry->d_name.name, "%llx", &jid) != 1)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1763: FILE: kernel/job.c:1376:
+	if (sscanf(dentry->d_name.name, "%llx", &jid) != 1)
+                return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1764: FILE: kernel/job.c:1377:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1764: FILE: kernel/job.c:1377:
+                return -EINVAL;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid == job->user'
#1771: FILE: kernel/job.c:1384:
+	if (capable(CAP_SYS_RESOURCE) || (current->uid == job->user)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1773: FILE: kernel/job.c:1386:
+^I^Iif (ia_valid & ATTR_UID) { $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1784: FILE: kernel/job.c:1397:
+static struct dentry *jobfs_create (struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1785: FILE: kernel/job.c:1398:
+static struct dentry *jobfs_create (struct super_block *sb,
+	struct dentry *dir, const char *name,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1793: FILE: kernel/job.c:1406:
+	qname.len = strlen (name);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1797: FILE: kernel/job.c:1410:
+	if (! dentry)
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1800: FILE: kernel/job.c:1413:
+	if (! inode) {
 	    ^

ERROR:SPACING: space required before the open parenthesis '('
#1804: FILE: kernel/job.c:1417:
+	switch(type) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1817: FILE: kernel/job.c:1430:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1817: FILE: kernel/job.c:1430:
+                break;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1828: FILE: kernel/job.c:1441:
+^I} $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1833: FILE: kernel/job.c:1446:
+static int jobfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1833: FILE: kernel/job.c:1446:
+static int jobfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1835: FILE: kernel/job.c:1448:
+	struct inode * inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1836: FILE: kernel/job.c:1449:
+	struct dentry * root;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1852: FILE: kernel/job.c:1465:
+		iput(inode);
 		^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1862: FILE: kernel/job.c:1475:
+                        int flags, const char *name, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1862: FILE: kernel/job.c:1475:
+static struct super_block *jobfs_get_super(struct file_system_type *fst,
+                        int flags, const char *name, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1862: FILE: kernel/job.c:1475:
+                        int flags, const char *name, void *data)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1874: FILE: kernel/job.c:1487:
+^Iif (!delete_dentry->d_inode) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1876: FILE: kernel/job.c:1489:
+	down (&parent->d_inode->i_sem);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1890: FILE: kernel/job.c:1503:
+	int ret;
+	if (sscanf(dentry->d_name.name, "%llx", &jid) != 1)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1890: FILE: kernel/job.c:1503:
+	if (sscanf(dentry->d_name.name, "%llx", &jid) != 1)
+		return -EINVAL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1896: FILE: kernel/job.c:1509:
+static int jobfs_open(struct inode *inode, struct file *filp)
                                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1902: FILE: kernel/job.c:1515:
+static ssize_t jobfs_read(struct file *filp, char *buf,
                                        ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1903: FILE: kernel/job.c:1516:
+              size_t count, loff_t *offset)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1903: FILE: kernel/job.c:1516:
+static ssize_t jobfs_read(struct file *filp, char *buf,
+              size_t count, loff_t *offset)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1903: FILE: kernel/job.c:1516:
+              size_t count, loff_t *offset)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1904: FILE: kernel/job.c:1517:
+{ $

CHECK:SPACING: No space is necessary after a cast
#1905: FILE: kernel/job.c:1518:
+	char *hbuf = (char *) filp->private_data;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1921: FILE: kernel/job.c:1534:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1922: FILE: kernel/job.c:1535:
+static ssize_t jobfs_jhandle_write(struct file *filp, const char *buf,
                                                 ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1923: FILE: kernel/job.c:1536:
+                 size_t count, loff_t *offset)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1923: FILE: kernel/job.c:1536:
+static ssize_t jobfs_jhandle_write(struct file *filp, const char *buf,
+                 size_t count, loff_t *offset)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1923: FILE: kernel/job.c:1536:
+                 size_t count, loff_t *offset)$

CHECK:SPACING: No space is necessary after a cast
#1927: FILE: kernel/job.c:1540:
+	u64 *jid = (u64 *) filp->private_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1941: FILE: kernel/job.c:1554:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1942: FILE: kernel/job.c:1555:
+^Iif (strcmp(tmp, "detach") == 0) $

ERROR:SPACING: space required before the open parenthesis '('
#1950: FILE: kernel/job.c:1563:
+	if(strncmp(tmp, "kill", 4) == 0) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1951: FILE: kernel/job.c:1564:
+		if (sscanf(tmp1, "%d", &sig) != 1)
+			return -EINVAL;

ERROR:SPACING: space required before the open parenthesis '('
#1955: FILE: kernel/job.c:1568:
+	if(strncmp(tmp, "wait", 4) == 0) {

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1956: FILE: kernel/job.c:1569:
+		if (sscanf(tmp1, "%d", &options)!=1)
 		                                ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1956: FILE: kernel/job.c:1569:
+		if (sscanf(tmp1, "%d", &options)!=1)
+			return -EINVAL;

ERROR:SPACING: space required before the open parenthesis '('
#1964: FILE: kernel/job.c:1577:
+	if(strncmp(tmp, "detachpid", 9) == 0) {

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1965: FILE: kernel/job.c:1578:
+		if (sscanf(tmp1, "%d", &pid)!=1)
 		                            ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1965: FILE: kernel/job.c:1578:
+		if (sscanf(tmp1, "%d", &pid)!=1)
+			return -EINVAL;

ERROR:SPACING: space required before the open parenthesis '('
#1969: FILE: kernel/job.c:1582:
+	if(strncmp(tmp, "attachpid", 9) == 0) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1970: FILE: kernel/job.c:1583:
+		if (sscanf(tmp1, "%d", &pid) != 1)
+			return -EINVAL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1977: FILE: kernel/job.c:1590:
+static ssize_t jobfs_hid_write(struct file *filp, const char *buf,
                                             ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1978: FILE: kernel/job.c:1591:
+                 size_t count, loff_t *offset)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1978: FILE: kernel/job.c:1591:
+static ssize_t jobfs_hid_write(struct file *filp, const char *buf,
+                 size_t count, loff_t *offset)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1978: FILE: kernel/job.c:1591:
+                 size_t count, loff_t *offset)$

CHECK:SPACING: No space is necessary after a cast
#1980: FILE: kernel/job.c:1593:
+	char *hbuf = (char *) filp->private_data;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1991: FILE: kernel/job.c:1604:
+	if (sscanf(tmp, "%lu", &h) != 1)
+		return -EINVAL;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2003: FILE: kernel/job.c:1616:
+static int jobfs_create_files (struct super_block *sb, struct dentry *root)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2008: FILE: kernel/job.c:1621:
+	if (!jobfs_create(sb, root, "hid", S_IFREG|0666, 0, 0, data, JOB_HID))
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2009: FILE: kernel/job.c:1622:
+^I^Ireturn -EFAULT;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2010: FILE: kernel/job.c:1623:
+^Ijiddirs = jobfs_create(sb, root, "jids", S_IFDIR|0777, 0, 0, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2010: FILE: kernel/job.c:1623:
+	jiddirs = jobfs_create(sb, root, "jids", S_IFDIR|0777, 0, 0, 
 	                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2011: FILE: kernel/job.c:1624:
+	jiddirs = jobfs_create(sb, root, "jids", S_IFDIR|0777, 0, 0, 
+		data, JOB_WDIR);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2014: FILE: kernel/job.c:1627:
+^Ipiddirs = jobfs_create(sb, root, "pids", S_IFDIR|0555, 0, 0, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2014: FILE: kernel/job.c:1627:
+	piddirs = jobfs_create(sb, root, "pids", S_IFDIR|0555, 0, 0, 
 	                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2015: FILE: kernel/job.c:1628:
+	piddirs = jobfs_create(sb, root, "pids", S_IFDIR|0555, 0, 0, 
+		data, JOB_RDIR);

ERROR:SPACING: space required before the open parenthesis '('
#2016: FILE: kernel/job.c:1629:
+	if(!piddirs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2020: FILE: kernel/job.c:1633:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2025: FILE: kernel/job.c:1638:
+        int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2025: FILE: kernel/job.c:1638:
+        int error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2027: FILE: kernel/job.c:1640:
+        error = register_filesystem(&jobfs_fs_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2027: FILE: kernel/job.c:1640:
+        error = register_filesystem(&jobfs_fs_type);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2028: FILE: kernel/job.c:1641:
+        if (error)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2028: FILE: kernel/job.c:1641:
+        if (error)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2029: FILE: kernel/job.c:1642:
+                return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2029: FILE: kernel/job.c:1642:
+                return error;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2033: FILE: kernel/job.c:1646:
+		printk(KERN_ERR "jobfs: could not mount!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2047: FILE: kernel/job.c:1660:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2057: FILE: kernel/job.c:1670:
+init_job(void) $

CHECK:SPACING: No space is necessary after a cast
#2057: FILE: kernel/job.c:1670:
+init_job(void) 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2059: FILE: kernel/job.c:1672:
+	int i,rc;
 	     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2062: FILE: kernel/job.c:1675:
+	for (i = 0; i < HASH_SIZE; i++) {
+		INIT_LIST_HEAD(&job_table[i]);
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2067: FILE: kernel/job.c:1680:
+	if (hid) {
[...]
+	} else {
[...]

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2068: FILE: kernel/job.c:1681:
+		jid_hid = (int)simple_strtoul(hid, &hid, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2076: FILE: kernel/job.c:1689:
+^Iif (rc < 0) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2081: FILE: kernel/job.c:1694:
+	job_proc_entry = create_proc_entry(JOB_PROC_ENTRY,
+		S_IFDIR | S_IRUGO, &proc_root);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2081: FILE: kernel/job.c:1694:
+		S_IFDIR | S_IRUGO, &proc_root);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:RETURN_VOID: void function return statements are not generally useful
#2113: FILE: kernel/job.c:1726:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2116: FILE: kernel/job.c:1729:
+EXPORT_SYMBOL(job_register_acct);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2117: FILE: kernel/job.c:1730:
+EXPORT_SYMBOL(job_unregister_acct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2118: FILE: kernel/job.c:1731:
+EXPORT_SYMBOL(job_getjid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2119: FILE: kernel/job.c:1732:
+EXPORT_SYMBOL(job_getacct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2120: FILE: kernel/job.c:1733:
+EXPORT_SYMBOL(job_setacct);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216877.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 212 errors, 111 warnings, 74 checks, 2028 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216877.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
