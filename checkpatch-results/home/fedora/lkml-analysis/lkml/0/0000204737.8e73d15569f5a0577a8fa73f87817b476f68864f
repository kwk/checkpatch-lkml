WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#78: FILE: drivers/i2c/i2c-core.c:1347:
+/* Get the first entry off the head of the queue and lock it there.
+   The entry is guaranteed to remain first in the list and the handler

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#79: FILE: drivers/i2c/i2c-core.c:1348:
+   not be called until i2c_entry_put() is called. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: drivers/i2c/i2c-core.c:1349:
+static struct i2c_op_q_entry *_i2c_entry_get(struct i2c_adapter * adap)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#82: FILE: drivers/i2c/i2c-core.c:1351:
+	struct i2c_op_q_entry * entry = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: drivers/i2c/i2c-core.c:1354:
+		struct list_head * link = adap->q.next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: drivers/i2c/i2c-core.c:1355:
+		struct list_head * link = adap->q.next;
+		entry = list_entry(link, struct i2c_op_q_entry, link);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#87: FILE: drivers/i2c/i2c-core.c:1356:
+		if (entry_completed(entry))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#89: FILE: drivers/i2c/i2c-core.c:1358:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#93: FILE: drivers/i2c/i2c-core.c:1362:
+			/* This is subtle.  If we increment the
+			   usecount and the value is 1, that means it

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#96: FILE: drivers/i2c/i2c-core.c:1365:
+			   and is between tha decrement and the
 			                  ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#100: FILE: drivers/i2c/i2c-core.c:1369:
+			   started. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '_i2c_entry_get', this function's name, in a string
#107: FILE: drivers/i2c/i2c-core.c:1376:
+	pr_debug("_i2c_entry_get %p %p\n", adap, entry);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: drivers/i2c/i2c-core.c:1380:
+struct i2c_op_q_entry *i2c_entry_get(struct i2c_adapter * adap)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: drivers/i2c/i2c-core.c:1383:
+	struct i2c_op_q_entry * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: drivers/i2c/i2c-core.c:1391:
+void i2c_entry_put(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: drivers/i2c/i2c-core.c:1392:
+		   struct i2c_op_q_entry * entry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: drivers/i2c/i2c-core.c:1395:
+	struct i2c_op_q_entry * new_entry = NULL;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#131: FILE: drivers/i2c/i2c-core.c:1400:
+	/* Subtle reasons why we don't need a lock before the dec, see
+	   the get routine for more details. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#131: FILE: drivers/i2c/i2c-core.c:1400:
+	   the get routine for more details. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'i2c_op_done', this function's name, in a string
#155: FILE: drivers/i2c/i2c-core.c:1424:
+	pr_debug("i2c_op_done: %p %p\n", adap, e);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#158: FILE: drivers/i2c/i2c-core.c:1427:
+		/* We are the lucky winner!  We get to clean up the
+		   entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#158: FILE: drivers/i2c/i2c-core.c:1427:
+		   entry. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#173: FILE: drivers/i2c/i2c-core.c:1446:
+EXPORT_SYMBOL(i2c_op_done);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: include/linux/i2c.h:196:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#208: FILE: include/linux/i2c.h:203:
+/* Called from an non-blocking interface to get the current working
+   entry.  Returns NULL if there is none.  This is primarily for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#211: FILE: include/linux/i2c.h:206:
+   must call i2c_entry_put() on it. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#212: FILE: include/linux/i2c.h:207:
+struct i2c_op_q_entry *i2c_entry_get(struct i2c_adapter * adap);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: include/linux/i2c.h:208:
+void i2c_entry_put(struct i2c_adapter * adap,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#214: FILE: include/linux/i2c.h:209:
+		   struct i2c_op_q_entry * entry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: include/linux/i2c.h:212:
+/* Called from an non-blocking interface to report that an operation
+   has completed.  Can be called from interrupt context. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: include/linux/i2c.h:212:
+   has completed.  Can be called from interrupt context. */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#229: FILE: include/linux/i2c.h:264:
+	spinlock_t q_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204737.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 17 warnings, 3 checks, 173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204737.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
