CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#60: FILE: fs/cifs/file.c:38:
+static inline struct cifsFileInfo *cifs_init_private(

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#60: FILE: fs/cifs/file.c:38:
+static inline struct cifsFileInfo *cifs_init_private(

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: fs/cifs/file.c:44:
+^Iprivate_data->pid = current->tgid;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <pInode>
#69: FILE: fs/cifs/file.c:47:
+	private_data->pInode = inode;

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#70: FILE: fs/cifs/file.c:48:
+	private_data->invalidHandle = FALSE;

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#71: FILE: fs/cifs/file.c:49:
+	private_data->closePend = FALSE;

CHECK:BRACES: braces {} should be used on all arms of this statement
#78: FILE: fs/cifs/file.c:56:
+	if ((flags & O_ACCMODE) == O_RDONLY)
[...]
+	else if ((flags & O_ACCMODE) == O_WRONLY)
[...]
+	else if ((flags & O_ACCMODE) == O_RDWR) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: fs/cifs/file.c:83:
+static inline int cifs_open_inode_helper(struct inode *inode, struct file *file,
+	struct cifsInodeInfo *pCifsInode, struct cifsFileInfo *pCifsFile,

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#105: FILE: fs/cifs/file.c:83:
+	struct cifsInodeInfo *pCifsInode, struct cifsFileInfo *pCifsFile,

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#105: FILE: fs/cifs/file.c:83:
+	struct cifsInodeInfo *pCifsInode, struct cifsFileInfo *pCifsFile,

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#105: FILE: fs/cifs/file.c:83:
+	struct cifsInodeInfo *pCifsInode, struct cifsFileInfo *pCifsFile,

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#106: FILE: fs/cifs/file.c:84:
+	struct cifsTconInfo *pTcon, int *oplock, FILE_ALL_INFO *buf,

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#106: FILE: fs/cifs/file.c:84:
+	struct cifsTconInfo *pTcon, int *oplock, FILE_ALL_INFO *buf,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: fs/cifs/file.c:94:
+^I^Ilist_add_tail(&pCifsFile->flist, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: fs/cifs/file.c:95:
+		list_add_tail(&pCifsFile->flist, 
+			&pCifsInode->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#117: FILE: fs/cifs/file.c:95:
+			&pCifsInode->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <GlobalSMBSeslock>
#122: FILE: fs/cifs/file.c:100:
+	write_unlock(&GlobalSMBSeslock);

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#124: FILE: fs/cifs/file.c:102:
+	if (pCifsInode->clientCanCacheRead) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#126: FILE: fs/cifs/file.c:104:
+		/* we have the inode open somewhere else
+		   no need to discard cache data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: fs/cifs/file.c:104:
+		   no need to discard cache data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#132: FILE: fs/cifs/file.c:110:
+	/* if not oplocked, invalidate inode pages if mtime or
+	   file size changed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: fs/cifs/file.c:110:
+	   file size changed */

CHECK:CAMELCASE: Avoid CamelCase: <cifs_NTtimeToUnix>
#133: FILE: fs/cifs/file.c:111:
+	temp = cifs_NTtimeToUnix(le64_to_cpu(buf->LastWriteTime));

CHECK:CAMELCASE: Avoid CamelCase: <LastWriteTime>
#133: FILE: fs/cifs/file.c:111:
+	temp = cifs_NTtimeToUnix(le64_to_cpu(buf->LastWriteTime));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: fs/cifs/file.c:112:
+^Iif (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode->i_size == 
 			    (loff_t)le64_to_cpu(buf->EndOfFile)'
#134: FILE: fs/cifs/file.c:112:
+	if (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && 
+			   (file->f_dentry->d_inode->i_size == 
+			    (loff_t)le64_to_cpu(buf->EndOfFile))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: fs/cifs/file.c:113:
+^I^I^I   (file->f_dentry->d_inode->i_size == $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/cifs/file.c:113:
+	if (timespec_equal(&file->f_dentry->d_inode->i_mtime, &temp) && 
+			   (file->f_dentry->d_inode->i_size == 

CHECK:CAMELCASE: Avoid CamelCase: <EndOfFile>
#136: FILE: fs/cifs/file.c:114:
+			    (loff_t)le64_to_cpu(buf->EndOfFile))) {

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#137: FILE: fs/cifs/file.c:115:
+		cFYI(1, ("inode unchanged on server"));

WARNING:SPLIT_STRING: quoted string split across lines
#146: FILE: fs/cifs/file.c:124:
+		cFYI(1, ("invalidating remote inode since open detected it "
+			 "changed"));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: fs/cifs/file.c:131:
+		rc = cifs_get_inode_info_unix(&file->f_dentry->d_inode,
+			full_path, inode->i_sb, xid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/cifs/file.c:134:
+		rc = cifs_get_inode_info(&file->f_dentry->d_inode,
+			full_path, buf, inode->i_sb, xid);

CHECK:BRACES: braces {} should be used on all arms of this statement
#158: FILE: fs/cifs/file.c:136:
+	if ((*oplock & 0xF) == OPLOCK_EXCLUSIVE) {
[...]
+	} else if ((*oplock & 0xF) == OPLOCK_READ)
[...]

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#159: FILE: fs/cifs/file.c:137:
+		pCifsInode->clientCanCacheAll = TRUE;

CHECK:CAMELCASE: Avoid CamelCase: <desiredAccess>
#177: FILE: fs/cifs/file.c:157:
+	int desiredAccess;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: fs/cifs/file.c:168:
+^I^I/* search inode for this file and fill in $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#187: FILE: fs/cifs/file.c:169:
+		/* search inode for this file and fill in 
+		   file->private_data = */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: fs/cifs/file.c:169:
+		   file->private_data = */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: fs/cifs/file.c:174:
+^I^I^Iif ((pCifsFile->pfile == NULL) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pCifsFile->pfile == NULL'
#195: FILE: fs/cifs/file.c:174:
+			if ((pCifsFile->pfile == NULL) && 
+			    (pCifsFile->pid == current->tgid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pCifsFile->pid == current->tgid'
#195: FILE: fs/cifs/file.c:174:
+			if ((pCifsFile->pfile == NULL) && 
+			    (pCifsFile->pid == current->tgid)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pCifsFile->pfile"
#195: FILE: fs/cifs/file.c:174:
+			if ((pCifsFile->pfile == NULL) && 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#210: FILE: fs/cifs/file.c:192:
+				cERROR(1, ("could not find file instance for "

WARNING:SPLIT_STRING: quoted string split across lines
#211: FILE: fs/cifs/file.c:193:
+				cERROR(1, ("could not find file instance for "
+					   "new file %p ", file));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: fs/cifs/file.c:205:
+^IcFYI(1, (" inode = 0x%p file flags are 0x%x for %s", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: fs/cifs/file.c:206:
+	cFYI(1, (" inode = 0x%p file flags are 0x%x for %s", 
+		inode, file->f_flags, full_path));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*file->private_data)...) over kmalloc(sizeof(struct cifsFileInfo)...)
#266: FILE: fs/cifs/file.c:255:
+	file->private_data = kmalloc(sizeof(struct cifsFileInfo), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: fs/cifs/file.c:262:
+^I^I^I CREATE_NOT_DIR, &netfid, &oplock, buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: fs/cifs/file.c:278:
+^I^I^I^I       pCifsFile, pTcon, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: fs/cifs/file.c:278:
+		rc = cifs_open_inode_helper(inode, file, pCifsInode,
+				       pCifsFile, pTcon, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: fs/cifs/file.c:284:
+^Iif (oplock & CIFS_CREATE_ACTION) {           $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#385: FILE: fs/cifs/file.c:286:
+		/* time to set mode which we can not set
+		   earlier due to problems creating new

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#386: FILE: fs/cifs/file.c:287:
+		   read-only files */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: fs/cifs/file.c:288:
+^I^Iif (cifs_sb->tcon->ses->capabilities & $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: fs/cifs/file.c:290:
+^I^I^ICIFSSMBUnixSetPerms(xid, pTcon, $

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBUnixSetPerms>
#389: FILE: fs/cifs/file.c:290:
+			CIFSSMBUnixSetPerms(xid, pTcon, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: fs/cifs/file.c:291:
+			CIFSSMBUnixSetPerms(xid, pTcon, 
+				full_path, inode->i_mode,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: fs/cifs/file.c:292:
+^I^I^I^I(__u64)-1, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#397: FILE: fs/cifs/file.c:298:
+			/* BB implement via Windows security descriptors eg
+			   CIFSSMBWinSetPerms(xid, pTcon, full_path, mode,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: fs/cifs/file.c:300:
+^I^I^I   in the meantime could set r/o dos attribute when $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#400: FILE: fs/cifs/file.c:301:
+			   perms are eg: mode & 0222 == 0 */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: fs/cifs/file.c:372:
+		 inode, file->f_flags,full_path));
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: fs/cifs/file.c:394:
+^I^I^I^ICREATE_NOT_DIR, &netfid, &oplock, NULL, $

CHECK:CAMELCASE: Avoid CamelCase: <pSMBFile>
#504: FILE: fs/cifs/file.c:475:
+		kfree(pSMBFile->search_resume_name);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#532: FILE: fs/cifs/file.c:555:
+	cFYI(1, ("Lock parm: 0x%x flockflags: "
 	               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#533: FILE: fs/cifs/file.c:556:
+	cFYI(1, ("Lock parm: 0x%x flockflags: "
+		 "0x%x flocktype: 0x%x start: %lld end: %lld",

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: fs/cifs/file.c:557:
+^I        cmd, pfLock->fl_flags, pfLock->fl_type, pfLock->fl_start,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:CAMELCASE: Avoid CamelCase: <pfLock>
#534: FILE: fs/cifs/file.c:557:
+	        cmd, pfLock->fl_flags, pfLock->fl_type, pfLock->fl_start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: fs/cifs/file.c:558:
+^I        pfLock->fl_end));$

WARNING:SPLIT_STRING: quoted string split across lines
#545: FILE: fs/cifs/file.c:570:
+		cFYI(1, ("Process suspended by mandatory locking - "
+			 "not implemented yet "));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: fs/cifs/file.c:573:
+^Iif (pfLock->fl_flags & $

WARNING:SPLIT_STRING: quoted string split across lines
#562: FILE: fs/cifs/file.c:623:
+				cERROR(1, ("Error unlocking previously locked "
+					   "range %d during test of lock ",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#570: FILE: fs/cifs/file.c:630:
+			rc = 0;	/* do not change lock type to unlock
+				   since range in use */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#570: FILE: fs/cifs/file.c:630:
+				   since range in use */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#590: FILE: fs/cifs/file.c:739:
+		long_op = FALSE; /* subsequent writes fast -
+				    15 seconds is plenty */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#590: FILE: fs/cifs/file.c:739:
+				    15 seconds is plenty */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: fs/cifs/file.c:760:
+					i_size_write(file->f_dentry->d_inode,
+					*poffset);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: fs/cifs/file.c:818:
+^I^I^I   while we blocked so return what we managed to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#619: FILE: fs/cifs/file.c:819:
+			   write */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: fs/cifs/file.c:837:
+^I^I^I^I   reopen_file not to flush data to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#629: FILE: fs/cifs/file.c:838:
+				   server now */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: fs/cifs/file.c:847:
+^I^I^I^I min_t(const int, cifs_sb->wsize, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: fs/cifs/file.c:861:
+^I^Ilong_op = FALSE; /* subsequent writes fast - $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#649: FILE: fs/cifs/file.c:862:
+		long_op = FALSE; /* subsequent writes fast - 
+				    15 seconds is plenty */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#649: FILE: fs/cifs/file.c:862:
+				    15 seconds is plenty */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: fs/cifs/file.c:881:
+^I^I^I^I^Ii_size_write(file->f_dentry->d_inode, $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#687: FILE: fs/cifs/file.c:945:
+						to-from, &offset);
 						  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: fs/cifs/file.c:948:
+^I^I^Iinode->i_atime = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: fs/cifs/file.c:1030:
+^IcFYI(1, ("commit write for page %p up to position %lld for %d", $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#711: FILE: fs/cifs/file.c:1043:
+					rc = cifs_reopen_file(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: fs/cifs/file.c:1049:
+^I^I^I^I^Irc = CIFSSMBSetFileSize(xid, $

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBSetFileSize>
#718: FILE: fs/cifs/file.c:1049:
+					rc = CIFSSMBSetFileSize(xid, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#719: FILE: fs/cifs/file.c:1050:
+^I^I^I^I^I^I^I^Icifs_sb->tcon, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#745: FILE: fs/cifs/file.c:1146:
+	/* Rather than do the steps manually:
+	   lock the inode for writing

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#751: FILE: fs/cifs/file.c:1152:
+	   filemapfdatawrite appears easier for the time being */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: fs/cifs/file.c:1194:
+^I^Icurrent_read_size = min_t(const int, read_size - total_read, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: fs/cifs/file.c:1199:
+^I^I^Iif ((open_file->invalidHandle) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->invalidHandle'
#769: FILE: fs/cifs/file.c:1199:
+			if ((open_file->invalidHandle) && 
+			    (!open_file->closePend)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!open_file->closePend'
#769: FILE: fs/cifs/file.c:1199:
+			if ((open_file->invalidHandle) && 
+			    (!open_file->closePend)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: fs/cifs/file.c:1213:
+^I^I^Iif (copy_to_user(current_offset, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#782: FILE: fs/cifs/file.c:1215:
+^I^I^I^I^I + le16_to_cpu(pSMBr->DataOffset), $

CHECK:CAMELCASE: Avoid CamelCase: <pSMBr>
#782: FILE: fs/cifs/file.c:1215:
+					 + le16_to_cpu(pSMBr->DataOffset), 

CHECK:CAMELCASE: Avoid CamelCase: <DataOffset>
#782: FILE: fs/cifs/file.c:1215:
+					 + le16_to_cpu(pSMBr->DataOffset), 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: fs/cifs/file.c:1280:
+^I^I^Iif ((open_file->invalidHandle) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->invalidHandle'
#800: FILE: fs/cifs/file.c:1280:
+			if ((open_file->invalidHandle) && 
+			    (!open_file->closePend)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!open_file->closePend'
#800: FILE: fs/cifs/file.c:1280:
+			if ((open_file->invalidHandle) && 
+			    (!open_file->closePend)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: fs/cifs/file.c:1367:
+^I^I^Imemset(target + bytes_read, 0, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: fs/cifs/file.c:1426:
+^I^Iexpected_index = $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#831: FILE: fs/cifs/file.c:1439:
+		/* for reads over a certain size could initiate async
+		   read ahead */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#831: FILE: fs/cifs/file.c:1439:
+		   read ahead */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#842: FILE: fs/cifs/file.c:1448:
+^I^I^Iif ((open_file->invalidHandle) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->invalidHandle'
#842: FILE: fs/cifs/file.c:1448:
+			if ((open_file->invalidHandle) && 
+			    (!open_file->closePend)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!open_file->closePend'
#842: FILE: fs/cifs/file.c:1448:
+			if ((open_file->invalidHandle) && 
+			    (!open_file->closePend)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#864: FILE: fs/cifs/file.c:1494:
+^I^I^I^I/* server copy of file can have smaller size $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#865: FILE: fs/cifs/file.c:1495:
+				/* server copy of file can have smaller size 
+				   than client */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#865: FILE: fs/cifs/file.c:1495:
+				   than client */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#866: FILE: fs/cifs/file.c:1496:
+^I^I^I^I/* BB do we need to verify this common case ? $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#867: FILE: fs/cifs/file.c:1497:
+^I^I^I^I   this case is ok - if we are at server EOF $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#867: FILE: fs/cifs/file.c:1497:
+				/* BB do we need to verify this common case ? 
+				   this case is ok - if we are at server EOF 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#868: FILE: fs/cifs/file.c:1498:
+				   we will hit it on next read */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: fs/cifs/file.c:1501:
+^I^I^I^I^Ipage = list_entry(page_list->prev, $

WARNING:SPLIT_STRING: quoted string split across lines
#883: FILE: fs/cifs/file.c:1510:
+			cFYI(1, ("No bytes read (%d) at offset %lld . "
+				 "Cleaning remaining pages from readahead list",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: fs/cifs/file.c:1512:
+^I^I^I/* BB turn off caching and do new lookup on $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#886: FILE: fs/cifs/file.c:1513:
+			/* BB turn off caching and do new lookup on 
+			   file size at server? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#886: FILE: fs/cifs/file.c:1513:
+			   file size at server? */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: fs/cifs/file.c:1589:
+^IcFYI(1, ("readpage %p at offset %d 0x%x\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#915: FILE: fs/cifs/file.c:1708:
+		cFYI(1, ("Possible sparse file: "
+			 "allocation size less than end of file "));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#924: FILE: fs/cifs/file.c:1841:
+^I/* BB should we pass any errors back? $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#925: FILE: fs/cifs/file.c:1842:
+	/* BB should we pass any errors back? 
+	   e.g. if we do not have read access to the file */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#925: FILE: fs/cifs/file.c:1842:
+	   e.g. if we do not have read access to the file */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 38 warnings, 50 checks, 828 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
