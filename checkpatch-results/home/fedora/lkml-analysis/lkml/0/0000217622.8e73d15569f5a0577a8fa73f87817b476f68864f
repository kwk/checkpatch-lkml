ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#147: FILE: drivers/isdn/hisax/hfc_usb.c:1363:
+	for(i=0;vdata[i].vendor;i++) {
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#147: FILE: drivers/isdn/hisax/hfc_usb.c:1363:
+	for(i=0;vdata[i].vendor;i++) {
 	       ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#147: FILE: drivers/isdn/hisax/hfc_usb.c:1363:
+	for(i=0;vdata[i].vendor;i++) {
 	                       ^

ERROR:SPACING: space required before the open parenthesis '('
#147: FILE: drivers/isdn/hisax/hfc_usb.c:1363:
+	for(i=0;vdata[i].vendor;i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: drivers/isdn/hisax/hfc_usb.c:1364:
+^I^Iif (le16_to_cpu(dev->descriptor.idVendor) == vdata[i].vendor && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#148: FILE: drivers/isdn/hisax/hfc_usb.c:1364:
+		if (le16_to_cpu(dev->descriptor.idVendor) == vdata[i].vendor && 

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#149: FILE: drivers/isdn/hisax/hfc_usb.c:1365:
+		    le16_to_cpu(dev->descriptor.idProduct) == vdata[i].prod_id)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#188: FILE: drivers/media/dvb/dibusb/dvb-dibusb.c:921:
+			dibusb_devices[i].warm_product_id == le16_to_cpu(udev->descriptor.idProduct)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: drivers/media/dvb/dibusb/dvb-dibusb.c:921:
+		if (dibusb_devices[i].cold_product_id == le16_to_cpu(udev->descriptor.idProduct) ||
+			dibusb_devices[i].warm_product_id == le16_to_cpu(udev->descriptor.idProduct)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: drivers/media/dvb/dibusb/dvb-dibusb.c:934:
+				"unknown product ID: %.4x",le16_to_cpu(udev->descriptor.idProduct));
 				                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#201: FILE: drivers/media/dvb/dibusb/dvb-dibusb.c:934:
 		err("something went very wrong, "
+				"unknown product ID: %.4x",le16_to_cpu(udev->descriptor.idProduct));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required before the open parenthesis '('
#213: FILE: drivers/media/dvb/ttusb-budget/dvb-ttusb-budget.c:1351:
+	switch(le16_to_cpu(ttusb->dev->descriptor.idProduct)) {

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice>
#296: FILE: drivers/usb/atm/speedtch.c:597:
+	const u16 bcdDevice = le16_to_cpu(instance->u.usb_dev->descriptor.bcdDevice);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: drivers/usb/atm/speedtch.c:744:
+^Iif ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC'
#312: FILE: drivers/usb/atm/speedtch.c:744:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) || 
+	    (ifnum != 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ifnum != 1'
#312: FILE: drivers/usb/atm/speedtch.c:744:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) || 
+	    (ifnum != 1))

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceClass>
#312: FILE: drivers/usb/atm/speedtch.c:744:
+	if ((dev->descriptor.bDeviceClass != USB_CLASS_VENDOR_SPEC) || 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: drivers/usb/class/audio.c:2974:
+^I^I^Iif (le16_to_cpu(dev->descriptor.idVendor) == 0x04fa && $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#349: FILE: drivers/usb/class/usb-midi.c:1664:
+			if (le16_to_cpu(d->descriptor.idVendor) == USB_VENDOR_ID_ROLAND ) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#352: FILE: drivers/usb/class/usb-midi.c:1666:
+			} else if (le16_to_cpu(d->descriptor.idVendor) == USB_VENDOR_ID_STEINBERG  ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#352: FILE: drivers/usb/class/usb-midi.c:1666:
+			} else if (le16_to_cpu(d->descriptor.idVendor) == USB_VENDOR_ID_STEINBERG  ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#355: FILE: drivers/usb/class/usb-midi.c:1668:
+			} else if (le16_to_cpu(d->descriptor.idVendor) == USB_VENDOR_ID_YAMAHA ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#364: FILE: drivers/usb/class/usb-midi.c:1785:
+	if (le16_to_cpu(d->descriptor.idVendor) != USB_VENDOR_ID_YAMAHA) {
 		return -EINVAL;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#384: FILE: drivers/usb/class/usb-midi.c:1837:
+		if ( le16_to_cpu(d->descriptor.idVendor) != u->idVendor ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/usb/class/usb-midi.c:1838:
+		if ( le16_to_cpu(d->descriptor.idVendor) != u->idVendor ||
+		     le16_to_cpu(d->descriptor.idProduct) != u->idProduct ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: drivers/usb/class/usb-midi.c:1879:
+^I       le16_to_cpu(d->descriptor.idVendor), $

ERROR:SPACING: space prohibited after that open parenthesis '('
#405: FILE: drivers/usb/class/usb-midi.c:1920:
+	if ( le16_to_cpu(d->descriptor.idVendor) != uvendor ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: drivers/usb/class/usb-midi.c:1921:
+	if ( le16_to_cpu(d->descriptor.idVendor) != uvendor ||
+	     le16_to_cpu(d->descriptor.idProduct) != uproduct ||

CHECK:CAMELCASE: Avoid CamelCase: <bcdUSB>
#486: FILE: drivers/usb/core/devices.c:338:
+	u16 bcdUSB = le16_to_cpu(desc->bcdUSB);

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: drivers/usb/core/hcd.c:131:
+ ^I0x00, 0x00, /*  __le16 idProduct; */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#528: FILE: drivers/usb/core/hcd.c:131:
+ ^I0x00, 0x00, /*  __le16 idProduct; */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/usb/core/hcd.c:131:
+ ^I0x00, 0x00, /*  __le16 idProduct; */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: drivers/usb/core/hcd.c:154:
+ ^I0x00, 0x00, /*  __le16 idProduct; */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#549: FILE: drivers/usb/core/hcd.c:154:
+ ^I0x00, 0x00, /*  __le16 idProduct; */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: drivers/usb/core/hcd.c:154:
+ ^I0x00, 0x00, /*  __le16 idProduct; */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: drivers/usb/core/message.c:799:
+^Iif (ret >= 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: drivers/usb/core/otg_whitelist.h:58:
+^Iif ((le16_to_cpu(dev->descriptor.idVendor) == 0x1a0a && $

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice_lo>
#615: FILE: drivers/usb/core/otg_whitelist.h:77:
+		    (id->bcdDevice_lo > le16_to_cpu(dev->descriptor.bcdDevice)))

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice_hi>
#620: FILE: drivers/usb/core/otg_whitelist.h:81:
+		    (id->bcdDevice_hi < le16_to_cpu(dev->descriptor.bcdDevice)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#657: FILE: drivers/usb/core/sysfs.c:171:
+#define usb_descriptor_attr_le16(field, format_string)			\
+static ssize_t								\
+show_##field (struct device *dev, char *buf)				\
+{									\
+	struct usb_device *udev;					\
+									\
+	udev = to_usb_device (dev);					\
+	return sprintf (buf, format_string, 				\
+			le16_to_cpu(udev->descriptor.field));		\
+}									\
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#657: FILE: drivers/usb/core/sysfs.c:171:
+#define usb_descriptor_attr_le16(field, format_string)			\
+static ssize_t								\
+show_##field (struct device *dev, char *buf)				\
+{									\
+	struct usb_device *udev;					\
+									\
+	udev = to_usb_device (dev);					\
+	return sprintf (buf, format_string, 				\
+			le16_to_cpu(udev->descriptor.field));		\
+}									\
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#659: FILE: drivers/usb/core/sysfs.c:173:
+show_##field (struct device *dev, char *buf)				\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#663: FILE: drivers/usb/core/sysfs.c:177:
+	udev = to_usb_device (dev);					\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#664: FILE: drivers/usb/core/sysfs.c:178:
+^Ireturn sprintf (buf, format_string, ^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#664: FILE: drivers/usb/core/sysfs.c:178:
+	return sprintf (buf, format_string, 				\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#667: FILE: drivers/usb/core/sysfs.c:181:
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vendor_id == le16_to_cpu(dev->descriptor.idVendor)'
#740: FILE: drivers/usb/core/usb.c:966:
+	if ((vendor_id == le16_to_cpu(dev->descriptor.idVendor)) &&
+	    (product_id == le16_to_cpu(dev->descriptor.idProduct))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'product_id == le16_to_cpu(dev->descriptor.idProduct)'
#740: FILE: drivers/usb/core/usb.c:966:
+	if ((vendor_id == le16_to_cpu(dev->descriptor.idVendor)) &&
+	    (product_id == le16_to_cpu(dev->descriptor.idProduct))) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#780: FILE: drivers/usb/image/microtek.c:719:
+		   le16_to_cpu(dev->descriptor.idVendor) );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: drivers/usb/input/ati_remote.c:799:
+^I^I^Ile16_to_cpu(ati_remote->udev->descriptor.idVendor), $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#850: FILE: drivers/usb/input/hid-core.c:1602:
+		if ((hid_blacklist[n].idVendor == le16_to_cpu(dev->descriptor.idVendor)) &&
[...]
 				quirks = hid_blacklist[n].quirks;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hid_blacklist[n].idVendor == le16_to_cpu(dev->descriptor.idVendor)'
#850: FILE: drivers/usb/input/hid-core.c:1602:
+		if ((hid_blacklist[n].idVendor == le16_to_cpu(dev->descriptor.idVendor)) &&
+			(hid_blacklist[n].idProduct == le16_to_cpu(dev->descriptor.idProduct)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hid_blacklist[n].idProduct == le16_to_cpu(dev->descriptor.idProduct)'
#850: FILE: drivers/usb/input/hid-core.c:1602:
+		if ((hid_blacklist[n].idVendor == le16_to_cpu(dev->descriptor.idVendor)) &&
+			(hid_blacklist[n].idProduct == le16_to_cpu(dev->descriptor.idProduct)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: drivers/usb/input/hid-core.c:1603:
+		if ((hid_blacklist[n].idVendor == le16_to_cpu(dev->descriptor.idVendor)) &&
+			(hid_blacklist[n].idProduct == le16_to_cpu(dev->descriptor.idProduct)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: drivers/usb/input/hid-core.c:1727:
+^I^Isnprintf(hid->name, 128, "%04x:%04x", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#952: FILE: drivers/usb/input/mtouchusb.c:226:
+        mtouch->input.id.vendor = le16_to_cpu(udev->descriptor.idVendor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#952: FILE: drivers/usb/input/mtouchusb.c:226:
+        mtouch->input.id.vendor = le16_to_cpu(udev->descriptor.idVendor);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#953: FILE: drivers/usb/input/mtouchusb.c:227:
+        mtouch->input.id.product = le16_to_cpu(udev->descriptor.idProduct);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: drivers/usb/input/mtouchusb.c:227:
+        mtouch->input.id.product = le16_to_cpu(udev->descriptor.idProduct);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#954: FILE: drivers/usb/input/mtouchusb.c:228:
+        mtouch->input.id.version = le16_to_cpu(udev->descriptor.bcdDevice);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: drivers/usb/input/mtouchusb.c:228:
+        mtouch->input.id.version = le16_to_cpu(udev->descriptor.bcdDevice);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#973: FILE: drivers/usb/input/powermate.c:383:
+		printk(KERN_WARNING "powermate: unknown product id %04x\n",

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#1092: FILE: drivers/usb/media/dabusb.c:729:
+	    intf->altsetting->desc.bInterfaceNumber);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1234: FILE: drivers/usb/media/se401.c:1318:
+        if (le16_to_cpu(dev->descriptor.idVendor) == 0x03e8 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: drivers/usb/media/se401.c:1318:
+        if (le16_to_cpu(dev->descriptor.idVendor) == 0x03e8 &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1235: FILE: drivers/usb/media/se401.c:1319:
+            le16_to_cpu(dev->descriptor.idProduct) == 0x0004) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: drivers/usb/media/se401.c:1319:
+            le16_to_cpu(dev->descriptor.idProduct) == 0x0004) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1239: FILE: drivers/usb/media/se401.c:1321:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x0471 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1239: FILE: drivers/usb/media/se401.c:1321:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x0471 &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1240: FILE: drivers/usb/media/se401.c:1322:
+            le16_to_cpu(dev->descriptor.idProduct) == 0x030b) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1240: FILE: drivers/usb/media/se401.c:1322:
+            le16_to_cpu(dev->descriptor.idProduct) == 0x030b) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1244: FILE: drivers/usb/media/se401.c:1324:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x047d &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: drivers/usb/media/se401.c:1324:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x047d &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1249: FILE: drivers/usb/media/se401.c:1327:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x047d &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1249: FILE: drivers/usb/media/se401.c:1327:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x047d &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1254: FILE: drivers/usb/media/se401.c:1330:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x047d &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: drivers/usb/media/se401.c:1330:
+        } else if (le16_to_cpu(dev->descriptor.idVendor) == 0x047d &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1339: FILE: drivers/usb/media/ultracam.c:528:
+	info("IBM Ultra camera found (rev. 0x%04x)",
+		le16_to_cpu(dev->descriptor.bcdDevice));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1374: FILE: drivers/usb/media/w9968cf.c:3523:
+^I         le16_to_cpu(udev->descriptor.idProduct) == winbond_id_table[1].idProduct)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1475: FILE: drivers/usb/misc/usblcd.c:89:
+		sprintf(buf,"%1d%1d.%1d%1d",
 		           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1476: FILE: drivers/usb/misc/usblcd.c:90:
+			(bcdDevice & 0xF000)>>12,
 			                    ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1477: FILE: drivers/usb/misc/usblcd.c:91:
+			(bcdDevice & 0xF00)>>8,
 			                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1478: FILE: drivers/usb/misc/usblcd.c:92:
+			(bcdDevice & 0xF0)>>4,
 			                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1553: FILE: drivers/usb/net/catc.c:803:
+^Iif (le16_to_cpu(usbdev->descriptor.idVendor) == 0x0423 && $

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1594: FILE: drivers/usb/serial/belkin_sa.c:185:
+	info("bcdDevice: %04x, bfc: %d", le16_to_cpu(dev->descriptor.bcdDevice), priv->bad_flow_control);

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#1606: FILE: drivers/usb/serial/io_edgeport.c:662:
+	product_info->ProductId		= (__u16)(le16_to_cpu(edge_serial->serial->dev->descriptor.idProduct) & ~ION_DEVICE_ID_80251_NETCHIP);

CHECK:CAMELCASE: Avoid CamelCase: <ProductId>
#1606: FILE: drivers/usb/serial/io_edgeport.c:662:
+	product_info->ProductId		= (__u16)(le16_to_cpu(edge_serial->serial->dev->descriptor.idProduct) & ~ION_DEVICE_ID_80251_NETCHIP);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1615: FILE: drivers/usb/serial/io_edgeport.c:678:
+	if (le16_to_cpu(edge_serial->serial->dev->descriptor.idProduct) & ION_DEVICE_ID_80251_NETCHIP) {

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#1667: FILE: drivers/usb/serial/keyspan.c:2254:
+		dev_err(&serial->dev->dev, "%s - unknown product id %x\n", __FUNCTION__, le16_to_cpu(serial->dev->descriptor.idProduct));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1667: FILE: drivers/usb/serial/keyspan.c:2254:
+		dev_err(&serial->dev->dev, "%s - unknown product id %x\n", __FUNCTION__, le16_to_cpu(serial->dev->descriptor.idProduct));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1715: FILE: drivers/usb/serial/mct_u232.c:179:
+	if (le16_to_cpu(serial->dev->descriptor.idProduct) == MCT_U232_SITECOM_PID
+	  || le16_to_cpu(serial->dev->descriptor.idProduct) == MCT_U232_BELKIN_F5U109_PID) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1737: FILE: drivers/usb/serial/ti_usb_3410_5052.c:411:
+	    __FUNCTION__, le16_to_cpu(dev->descriptor.idProduct),

CHECK:CAMELCASE: Avoid CamelCase: <bNumConfigurations>
#1738: FILE: drivers/usb/serial/ti_usb_3410_5052.c:412:
+	    dev->descriptor.bNumConfigurations,

CHECK:CAMELCASE: Avoid CamelCase: <bConfigurationValue>
#1739: FILE: drivers/usb/serial/ti_usb_3410_5052.c:413:
+	    dev->actconfig->desc.bConfigurationValue);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1751: FILE: drivers/usb/serial/usb-serial.c:724:
+^I^Ilength += sprintf (page+length, " vendor:%04x product:%04x", $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1751: FILE: drivers/usb/serial/usb-serial.c:724:
+		length += sprintf (page+length, " vendor:%04x product:%04x", 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1751: FILE: drivers/usb/serial/usb-serial.c:724:
+		length += sprintf (page+length, " vendor:%04x product:%04x", 
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1752: FILE: drivers/usb/serial/usb-serial.c:725:
+^I^I^I^I   le16_to_cpu(serial->dev->descriptor.idVendor), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'serial->num_interrupt_in == 0'
#1811: FILE: drivers/usb/serial/visor.c:929:
+	if (!((le16_to_cpu(serial->dev->descriptor.idVendor) == HANDSPRING_VENDOR_ID) ||
+	      (le16_to_cpu(serial->dev->descriptor.idVendor) == KYOCERA_VENDOR_ID)) ||
 	    (serial->num_interrupt_in == 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1825: FILE: drivers/usb/storage/scsiglue.c:122:
+	if (le16_to_cpu(us->pusb_dev->descriptor.idVendor) == USB_VENDOR_ID_GENESYS &&
 			sdev->request_queue->max_sectors > 64)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1858: FILE: drivers/usb/storage/usb.c:273:
+		data[32] = 0x30 + ((bcdDevice>>12) & 0x0F);
 		                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1859: FILE: drivers/usb/storage/usb.c:274:
+		data[33] = 0x30 + ((bcdDevice>>8) & 0x0F);
 		                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1860: FILE: drivers/usb/storage/usb.c:275:
+		data[34] = 0x30 + ((bcdDevice>>4) & 0x0F);
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1956: FILE: sound/usb/usbaudio.c:2418:
+^Iif (le16_to_cpu(dev->descriptor.idVendor) == 0x041e && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2013: FILE: sound/usb/usbaudio.c:3005:
+^I^Isnd_iprintf(buffer, "%04x:%04x\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2044: FILE: sound/usb/usbaudio.c:3169:
+^Iif (le16_to_cpu(dev->descriptor.idVendor) == 0x041e && $

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#2098: FILE: sound/usb/usbmixer.c:1498:
+		if (map->vendor == le16_to_cpu(dev->idVendor) && map->product == le16_to_cpu(dev->idProduct)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2110: FILE: sound/usb/usx2y/usX2Yhwdep.c:136:
+	switch (le16_to_cpu(((usX2Ydev_t*)hw->private_data)->chip.dev->descriptor.idProduct)) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <usX2Ydev_t>
#2110: FILE: sound/usb/usx2y/usX2Yhwdep.c:136:
+	switch (le16_to_cpu(((usX2Ydev_t*)hw->private_data)->chip.dev->descriptor.idProduct)) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#2119: FILE: sound/usb/usx2y/usX2Yhwdep.c:188:
+	snd_usb_audio_quirk_t *quirk = le16_to_cpu(dev->descriptor.idProduct) == USB_ID_US428 ? &quirk_2 : &quirk_1;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2144: FILE: sound/usb/usx2y/usbusx2y.c:348:
+	if (le16_to_cpu(device->descriptor.idVendor) != 0x1604 ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 13)
#2159: FILE: sound/usb/usx2y/usbusx2yaudio.c:1026:
+	if (le16_to_cpu(usX2Y(card)->chip.dev->descriptor.idProduct) == USB_ID_US428)
 	     if (0 > (err = usX2Y_audio_stream_new(card, 0, 0xA)))

CHECK:CAMELCASE: Avoid CamelCase: <usX2Y>
#2159: FILE: sound/usb/usx2y/usbusx2yaudio.c:1026:
+	if (le16_to_cpu(usX2Y(card)->chip.dev->descriptor.idProduct) == USB_ID_US428)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217622.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 36 warnings, 35 checks, 1666 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217622.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
