CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: arch/um/include/os.h:161:
+extern int create_mem_file(unsigned long len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: arch/um/include/os.h:162:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: arch/um/include/os.h:162:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: arch/um/include/os.h:187:
+extern int protect_memory(unsigned long addr, unsigned long len, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: arch/um/include/os.h:187:
+extern int protect_memory(unsigned long addr, unsigned long len, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/um/kernel/init_task.c:49:
+^Ios_protect_memory((void *) stack, (1 << CONFIG_KERNEL_STACK_ORDER) * PAGE_SIZE, $

CHECK:SPACING: No space is necessary after a cast
#131: FILE: arch/um/kernel/init_task.c:49:
+	os_protect_memory((void *) stack, (1 << CONFIG_KERNEL_STACK_ORDER) * PAGE_SIZE, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: arch/um/kernel/init_task.c:50:
+	os_protect_memory((void *) stack, (1 << CONFIG_KERNEL_STACK_ORDER) * PAGE_SIZE, 
+		       1, 1, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: arch/um/kernel/tlb.c:310:
+                        os_protect_memory((void *) addr, PAGE_SIZE, 1, 1, 1);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#457: FILE: arch/um/kernel/tlb.c:310:
+                        os_protect_memory((void *) addr, PAGE_SIZE, 1, 1, 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: arch/um/kernel/tlb.c:310:
+                        os_protect_memory((void *) addr, PAGE_SIZE, 1, 1, 1);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#514: FILE: arch/um/os-Linux/mem.c:1:
+#include <stdio.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#535: FILE: arch/um/os-Linux/mem.c:22:
+static char *tempdir = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#539: FILE: arch/um/os-Linux/mem.c:26:
+	char *dirs[] = { "TMP", "TEMP", "TMPDIR", NULL };

ERROR:SPACING: space required before the open parenthesis '('
#543: FILE: arch/um/os-Linux/mem.c:30:
+	if(tempdir != NULL) return;	/* We've already been called */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#543: FILE: arch/um/os-Linux/mem.c:30:
+	if(tempdir != NULL) return;	/* We've already been called */

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tempdir"
#543: FILE: arch/um/os-Linux/mem.c:30:
+	if(tempdir != NULL) return;	/* We've already been called */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open brace '{'
#544: FILE: arch/um/os-Linux/mem.c:31:
+	for(i = 0; dirs[i]; i++){

ERROR:SPACING: space required before the open parenthesis '('
#544: FILE: arch/um/os-Linux/mem.c:31:
+	for(i = 0; dirs[i]; i++){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir != NULL'
#546: FILE: arch/um/os-Linux/mem.c:33:
+		if((dir != NULL) && (*dir != '\0'))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#546: FILE: arch/um/os-Linux/mem.c:33:
+		if((dir != NULL) && (*dir != '\0'))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dir"
#546: FILE: arch/um/os-Linux/mem.c:33:
+		if((dir != NULL) && (*dir != '\0'))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: arch/um/os-Linux/mem.c:36:
+^Iif((dir == NULL) || (*dir == '\0')) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir == NULL'
#549: FILE: arch/um/os-Linux/mem.c:36:
+	if((dir == NULL) || (*dir == '\0')) 

ERROR:SPACING: space required before the open parenthesis '('
#549: FILE: arch/um/os-Linux/mem.c:36:
+	if((dir == NULL) || (*dir == '\0')) 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#549: FILE: arch/um/os-Linux/mem.c:36:
+	if((dir == NULL) || (*dir == '\0')) 

ERROR:SPACING: space required before the open brace '{'
#553: FILE: arch/um/os-Linux/mem.c:40:
+	if(tempdir == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#553: FILE: arch/um/os-Linux/mem.c:40:
+	if(tempdir == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tempdir"
#553: FILE: arch/um/os-Linux/mem.c:40:
+	if(tempdir == NULL){

WARNING:SPLIT_STRING: quoted string split across lines
#555: FILE: arch/um/os-Linux/mem.c:42:
+		fprintf(stderr, "Failed to malloc tempdir, "
+			"errno = %d\n", errno);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required before the open brace '{'
#579: FILE: arch/um/os-Linux/mem.c:66:
+	if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#579: FILE: arch/um/os-Linux/mem.c:66:
+	if(fd < 0){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#580: FILE: arch/um/os-Linux/mem.c:67:
+^I^Ifprintf(stderr, "open - cannot create %s: %s\n", tempname, $

ERROR:SPACING: space required before the open brace '{'
#584: FILE: arch/um/os-Linux/mem.c:71:
+	if(do_unlink && (unlink(tempname) < 0)){

ERROR:SPACING: space required before the open parenthesis '('
#584: FILE: arch/um/os-Linux/mem.c:71:
+	if(do_unlink && (unlink(tempname) < 0)){

ERROR:SPACING: space required before the open brace '{'
#588: FILE: arch/um/os-Linux/mem.c:75:
+	if(out_tempname){

ERROR:SPACING: space required before the open parenthesis '('
#588: FILE: arch/um/os-Linux/mem.c:75:
+	if(out_tempname){

ERROR:SPACING: space required before the open brace '{'
#590: FILE: arch/um/os-Linux/mem.c:77:
+		if(*out_tempname == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#590: FILE: arch/um/os-Linux/mem.c:77:
+		if(*out_tempname == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!out_tempname"
#590: FILE: arch/um/os-Linux/mem.c:77:
+		if(*out_tempname == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#610: FILE: arch/um/os-Linux/mem.c:97:
+	if(fd < 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#610: FILE: arch/um/os-Linux/mem.c:97:
+	if(fd < 0) {
+		exit(1);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#615: FILE: arch/um/os-Linux/mem.c:102:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#615: FILE: arch/um/os-Linux/mem.c:102:
+	if(err < 0){

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: arch/um/os-Linux/mem.c:107:
+        if (lseek64(fd, len, SEEK_SET) < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: arch/um/os-Linux/mem.c:107:
+        if (lseek64(fd, len, SEEK_SET) < 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: arch/um/os-Linux/mem.c:108:
+ ^I^Iperror("os_seek_file");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#621: FILE: arch/um/os-Linux/mem.c:108:
+ ^I^Iperror("os_seek_file");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: arch/um/os-Linux/mem.c:108:
+ ^I^Iperror("os_seek_file");$

ERROR:SPACING: space required before the open brace '{'
#628: FILE: arch/um/os-Linux/mem.c:115:
+	if(err != 1){

ERROR:SPACING: space required before the open parenthesis '('
#628: FILE: arch/um/os-Linux/mem.c:115:
+	if(err != 1){

ERROR:SPACING: space required before the open parenthesis '('
#643: FILE: arch/um/os-Linux/mem.c:130:
+	if(fd < 0) {

ERROR:SPACING: space required before the open brace '{'
#649: FILE: arch/um/os-Linux/mem.c:136:
+	if(addr == MAP_FAILED){

ERROR:SPACING: space required before the open parenthesis '('
#649: FILE: arch/um/os-Linux/mem.c:136:
+	if(addr == MAP_FAILED){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#655: FILE: arch/um/os-Linux/mem.c:142:
+	return(fd);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open parenthesis '('
#664: FILE: arch/um/os-Linux/mem.c:151:
+	if(have_devanon)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#666: FILE: arch/um/os-Linux/mem.c:153:
+	else fd = create_tmp_file(len);

ERROR:SPACING: space required before the open brace '{'
#669: FILE: arch/um/os-Linux/mem.c:156:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#669: FILE: arch/um/os-Linux/mem.c:156:
+	if(err < 0){

ERROR:SPACING: space required before the open brace '{'
#736: FILE: arch/um/os-Linux/start_up.c:297:
+	if(addr == MAP_FAILED){

ERROR:SPACING: space required before the open parenthesis '('
#736: FILE: arch/um/os-Linux/start_up.c:297:
+	if(addr == MAP_FAILED){

ERROR:SPACING: space required before the open parenthesis '('
#739: FILE: arch/um/os-Linux/start_up.c:300:
+		if(err == EPERM)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#765: FILE: arch/um/os-Linux/start_up.c:397:
+int have_devanon = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#771: FILE: arch/um/os-Linux/start_up.c:403:
+	printk("Checking for /dev/anon on the host...");

ERROR:SPACING: space required before the open brace '{'
#773: FILE: arch/um/os-Linux/start_up.c:405:
+	if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#773: FILE: arch/um/os-Linux/start_up.c:405:
+	if(fd < 0){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#774: FILE: arch/um/os-Linux/start_up.c:406:
+		printk("Not available (open failed with errno %d)\n", errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#778: FILE: arch/um/os-Linux/start_up.c:410:
+	printk("OK\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#790: FILE: arch/um/os-Linux/start_up.c:422:
+	file = strchr(str,',');
 	                 ^

ERROR:SPACING: space required before the open brace '{'
#791: FILE: arch/um/os-Linux/start_up.c:423:
+	if(file == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#791: FILE: arch/um/os-Linux/start_up.c:423:
+	if(file == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#791: FILE: arch/um/os-Linux/start_up.c:423:
+	if(file == NULL){

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_iomem', this function's name, in a string
#792: FILE: arch/um/os-Linux/start_up.c:424:
+		printf("parse_iomem : failed to parse iomem\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open brace '{'
#798: FILE: arch/um/os-Linux/start_up.c:430:
+	if(fd < 0){

ERROR:SPACING: space required before the open parenthesis '('
#798: FILE: arch/um/os-Linux/start_up.c:430:
+	if(fd < 0){

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_iomem', this function's name, in a string
#799: FILE: arch/um/os-Linux/start_up.c:431:
+		os_print_error(fd, "parse_iomem - Couldn't open io file");

ERROR:SPACING: space required before the open brace '{'
#804: FILE: arch/um/os-Linux/start_up.c:436:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#804: FILE: arch/um/os-Linux/start_up.c:436:
+	if(err < 0){

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_iomem', this function's name, in a string
#805: FILE: arch/um/os-Linux/start_up.c:437:
+		os_print_error(err, "parse_iomem - cannot stat_fd file");

ERROR:SPACING: space required before the open brace '{'
#810: FILE: arch/um/os-Linux/start_up.c:442:
+	if(new == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#810: FILE: arch/um/os-Linux/start_up.c:442:
+	if(new == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#810: FILE: arch/um/os-Linux/start_up.c:442:
+	if(new == NULL){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#826: FILE: arch/um/os-Linux/start_up.c:458:
+	return(0);

CHECK:SPACING: No space is necessary after a cast
#846: FILE: arch/um/os-Linux/tt.c:44:
+	err = os_protect_memory((void *) addr, len, r, w, x);

ERROR:SPACING: space required before the open brace '{'
#847: FILE: arch/um/os-Linux/tt.c:45:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#847: FILE: arch/um/os-Linux/tt.c:45:
+	if(err < 0){

ERROR:CODE_INDENT: code indent should use tabs where possible
#848: FILE: arch/um/os-Linux/tt.c:46:
+                if(must_succeed)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: arch/um/os-Linux/tt.c:46:
+                if(must_succeed)$

ERROR:SPACING: space required before the open parenthesis '('
#848: FILE: arch/um/os-Linux/tt.c:46:
+                if(must_succeed)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#850: FILE: arch/um/os-Linux/tt.c:48:
+		else return(err);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 59 errors, 16 warnings, 15 checks, 659 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
