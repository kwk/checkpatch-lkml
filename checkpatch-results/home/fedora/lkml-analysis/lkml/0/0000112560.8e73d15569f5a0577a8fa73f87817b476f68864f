WARNING:TYPO_SPELLING: 'remainer' may be misspelled - perhaps 'remainder'?
#58: FILE: Documentation/filesystems/proc/pmap:21:
+The remainer will be composed of letters and numbers, but
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#122: FILE: fs/proc/base.c:207:
+	E(PROC_TGID_PMAP,      "pmap",   S_IFREG|S_IRUGO),
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#122: FILE: fs/proc/base.c:207:
+	E(PROC_TGID_PMAP,      "pmap",   S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#130: FILE: fs/proc/base.c:250:
+	E(PROC_TID_PMAP,       "pmap",    S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#130: FILE: fs/proc/base.c:250:
+	E(PROC_TID_PMAP,       "pmap",    S_IFREG|S_IRUGO),

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#139: FILE: fs/proc/base.c:669:
+extern struct seq_operations proc_pid_pmap_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: fs/proc/base.c:674:
+	int ret = seq_open(file, &proc_pid_pmap_op);
+	if (!ret) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: fs/proc/base.c:676:
+		struct seq_file *m = file->private_data;
+		m->private = task;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#151: FILE: fs/proc/base.c:681:
+static struct file_operations proc_pmap_operations = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: fs/proc/task_mmu.c:312:
+	unsigned shift = PAGE_SHIFT;

WARNING:SIZEOF_PARENTHESIS: sizeof mss should be sizeof(mss)
#199: FILE: fs/proc/task_mmu.c:314:
+	memset(&mss, 0, sizeof mss);

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: fs/proc/task_mmu.c:320:
+		struct inode *inode = vma->vm_file->f_dentry->d_inode;
+		dev = inode->i_sb->s_dev;

WARNING:SIZEOF_PARENTHESIS: sizeof flag_string should be sizeof(flag_string)
#215: FILE: fs/proc/task_mmu.c:330:
+	flag_string[sizeof flag_string - 1] = '\0';

ERROR:SPACING: space required before the open parenthesis '('
#218: FILE: fs/proc/task_mmu.c:333:
+	if(flags & VM_HUGETLB)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#222: FILE: fs/proc/task_mmu.c:337:
+	seq_printf(

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#248: FILE: fs/proc/task_mmu.c:363:
+				if (vma->vm_start <= mm->start_stack && vma->vm_end >= mm->start_stack) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#248: FILE: fs/proc/task_mmu.c:363:
+				if (vma->vm_start <= mm->start_stack && vma->vm_end >= mm->start_stack) {
[...]
+				} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#262: FILE: fs/proc/task_mmu.c:377:
+		m->version = (vma != get_gate_vma(task))? vma->vm_start: 0;
 		                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#262: FILE: fs/proc/task_mmu.c:377:
+		m->version = (vma != get_gate_vma(task))? vma->vm_start: 0;
 		                                                       ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#273: FILE: fs/proc/task_mmu.c:476:
+struct seq_operations proc_pid_pmap_op = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 14 warnings, 3 checks, 227 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000112560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
