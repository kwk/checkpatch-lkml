WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#57: 
- documentation and sample code (could be posted as a seperate patch)
                                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#67: 
  the address of the hook location in a seperate section, may be, 
                                        ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#151: 
diff -urN -X /home/vamsi/.dontdiff /usr/src/40-pure/arch/alpha/config.in 40-hooks/arch/alpha/config.in

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: arch/i386/Config.help:1067:
+  http://www-124.ibm.com/linux/projects/kernelhooks for more details. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#374: FILE: include/asm-generic/hook.h:1:
+#ifndef __ASM_GENERIC_HOOK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: include/asm-generic/hook.h:5:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#381: FILE: include/asm-generic/hook.h:8:
+#include <asm/cacheflush.h>

CHECK:SPACING: No space is necessary after a cast
#385: FILE: include/asm-generic/hook.h:12:
+	unsigned char *addr = (unsigned char *) (hook->hook_addr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: include/asm-generic/hook.h:13:
+	unsigned char *addr = (unsigned char *) (hook->hook_addr);
+	addr[2] = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#389: FILE: include/asm-generic/hook.h:16:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#393: FILE: include/asm-generic/hook.h:20:
+	unsigned char *addr = (unsigned char *) (hook->hook_addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#394: FILE: include/asm-generic/hook.h:21:
+	unsigned char *addr = (unsigned char *) (hook->hook_addr);
+	addr[2] = 1;

WARNING:RETURN_VOID: void function return statements are not generally useful
#397: FILE: include/asm-generic/hook.h:24:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#403: FILE: include/asm-i386/hook.h:1:
+#ifndef __ASM_I386_HOOK_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: include/asm-i386/hook.h:5:
+ * $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#413: FILE: include/asm-i386/hook.h:11:
+#if defined(CONFIG_HOOK) || defined(CONFIG_HOOK_MODULE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#415: FILE: include/asm-i386/hook.h:13:
+#define IF_HOOK_ENABLED(h, h1) \
+	register int tmp; \
+	__asm__ __volatile__ (".global "h"; "h":movl $0, %0":"=r"(tmp)); \
+	if (unlikely(tmp))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#417: FILE: include/asm-i386/hook.h:15:
+	__asm__ __volatile__ (".global "h"; "h":movl $0, %0":"=r"(tmp)); \
 	                                                    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#417: FILE: include/asm-i386/hook.h:15:
+	__asm__ __volatile__ (".global "h"; "h":movl $0, %0":"=r"(tmp)); \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: include/asm-i386/hook.h:31:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#438: FILE: include/asm-i386/hook.h:36:
+	if((addr[0] & OPCODE_MOV1_MASK) == OPCODE_MOV1) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#439: FILE: include/asm-i386/hook.h:37:
+		if (*((unsigned long *)(addr+1)) == 0)
 		                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: include/asm-i386/hook.h:39:
+^I} else if (((addr[0] & OPCODE_MOV2_1_MASK) == OPCODE_MOV2_1) && $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#443: FILE: include/asm-i386/hook.h:41:
+		if (*((unsigned long *)(addr+2)) == 0)
 		                            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#454: FILE: include/asm-ppc/hook.h:1:
+#ifndef __ASM_PPC_HOOK_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: include/asm-ppc/hook.h:5:
+ * $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#463: FILE: include/asm-ppc/hook.h:10:
+#if defined(CONFIG_HOOK) || defined(CONFIG_HOOK_MODULE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#465: FILE: include/asm-ppc/hook.h:12:
+#define IF_HOOK_ENABLED(h, h1) \
+	register int tmp; \
+	__asm__ __volatile__ (".global "h"; "h":li %0, 0x00":"=r"(tmp)); \
+	if (unlikely(tmp))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#467: FILE: include/asm-ppc/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":li %0, 0x00":"=r"(tmp)); \
 	                                                    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#467: FILE: include/asm-ppc/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":li %0, 0x00":"=r"(tmp)); \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#472: FILE: include/asm-ppc/hook.h:19:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#476: FILE: include/asm-ppc/hook.h:23:
+ *^I38 00 00 00       ^Ili    ^Ir0,0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#477: FILE: include/asm-ppc/hook.h:24:
+ *^I2c 00 00 00            ^Icmpwi^Ir0,0$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: include/asm-ppc/hook.h:25:
+ *^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: include/asm-ppc/hook.h:27:
+ * the register name in the second byte and the register cannot be predicted, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: include/asm-ppc/hook.h:31:
+#define OPCODE_MOV1^I^I^I0x38 /* LI (really an extended mnemonic for addi */   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: include/asm-ppc/hook.h:34:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#488: FILE: include/asm-ppc/hook.h:35:
+static inline int is_asm_hook(unsigned char * addr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: include/asm-ppc/hook.h:39:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#493: FILE: include/asm-ppc/hook.h:40:
+	if((addr[0] & OPCODE_MOV1_MASK) == OPCODE_MOV1) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#494: FILE: include/asm-ppc/hook.h:41:
+		if (*((unsigned short *)(addr+1)) == 0)
 		                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#504: FILE: include/asm-ppc64/hook.h:1:
+#ifndef __ASM_PPC_HOOK_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: include/asm-ppc64/hook.h:5:
+ * $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#513: FILE: include/asm-ppc64/hook.h:10:
+#if defined(CONFIG_HOOK) || defined(CONFIG_HOOK_MODULE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#515: FILE: include/asm-ppc64/hook.h:12:
+#define IF_HOOK_ENABLED(h, h1) \
+	register int tmp; \
+	__asm__ __volatile__ (".global "h"; "h":li %0, 0x00":"=r"(tmp)); \
+	if (unlikely(tmp))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#517: FILE: include/asm-ppc64/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":li %0, 0x00":"=r"(tmp)); \
 	                                                    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#517: FILE: include/asm-ppc64/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":li %0, 0x00":"=r"(tmp)); \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#522: FILE: include/asm-ppc64/hook.h:19:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#526: FILE: include/asm-ppc64/hook.h:23:
+ *^I38 00 00 00       ^Ili    ^Ir0,0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#527: FILE: include/asm-ppc64/hook.h:24:
+ *^I2c 00 00 00            ^Icmpwi^Ir0,0$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: include/asm-ppc64/hook.h:25:
+ *^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: include/asm-ppc64/hook.h:27:
+ * the register name in the second byte and the register cannot be predicted, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: include/asm-ppc64/hook.h:31:
+#define OPCODE_MOV1^I^I^I0x38 /* LI (really an extended mnemonic for addi */   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: include/asm-ppc64/hook.h:34:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#538: FILE: include/asm-ppc64/hook.h:35:
+static inline int is_asm_hook(unsigned char * addr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: include/asm-ppc64/hook.h:39:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#543: FILE: include/asm-ppc64/hook.h:40:
+	if((addr[0] & OPCODE_MOV1_MASK) == OPCODE_MOV1) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#544: FILE: include/asm-ppc64/hook.h:41:
+		if (*((unsigned short *)(addr+1)) == 0)
 		                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#554: FILE: include/asm-s390/hook.h:1:
+#ifndef __ASM_S390_HOOK_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: include/asm-s390/hook.h:5:
+ * $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#563: FILE: include/asm-s390/hook.h:10:
+#if defined(CONFIG_HOOK) || defined(CONFIG_HOOK_MODULE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#565: FILE: include/asm-s390/hook.h:12:
+#define IF_HOOK_ENABLED(h, h1) \
+	register int tmp; \
+	__asm__ __volatile__ (".global "h"; "h":lhi %0, 0x00":"=r"(tmp)); \
+	if (unlikely(tmp))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#567: FILE: include/asm-s390/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":lhi %0, 0x00":"=r"(tmp)); \
 	                                                     ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#567: FILE: include/asm-s390/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":lhi %0, 0x00":"=r"(tmp)); \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: include/asm-s390/hook.h:33:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#587: FILE: include/asm-s390/hook.h:34:
+static inline int is_asm_hook(unsigned char * addr)

ERROR:SPACING: space required before the open brace '{'
#589: FILE: include/asm-s390/hook.h:36:
+	if (!addr){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#589: FILE: include/asm-s390/hook.h:36:
+	if (!addr){
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: include/asm-s390/hook.h:39:
+^Iif (((addr[0] & OPCODE_MOV2_1_MASK) == OPCODE_MOV2_1) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: include/asm-s390/hook.h:40:
+	if (((addr[0] & OPCODE_MOV2_1_MASK) == OPCODE_MOV2_1) && 
+		    ((addr[1] & OPCODE_MOV2_2_MASK) == OPCODE_MOV2_2)) {

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#595: FILE: include/asm-s390/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){
 		           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#595: FILE: include/asm-s390/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){
 		                          ^

ERROR:SPACING: space required before the open brace '{'
#595: FILE: include/asm-s390/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#595: FILE: include/asm-s390/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){
+			return 1;
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#606: FILE: include/asm-s390x/hook.h:1:
+#ifndef __ASM_S390X_HOOK_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#610: FILE: include/asm-s390x/hook.h:5:
+ * $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#615: FILE: include/asm-s390x/hook.h:10:
+#if defined(CONFIG_HOOK) || defined(CONFIG_HOOK_MODULE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#617: FILE: include/asm-s390x/hook.h:12:
+#define IF_HOOK_ENABLED(h, h1) \
+	register int tmp; \
+	__asm__ __volatile__ (".global "h"; "h":lhi %0, 0x00":"=r"(tmp)); \
+	if (unlikely(tmp))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#619: FILE: include/asm-s390x/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":lhi %0, 0x00":"=r"(tmp)); \
 	                                                     ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#619: FILE: include/asm-s390x/hook.h:14:
+	__asm__ __volatile__ (".global "h"; "h":lhi %0, 0x00":"=r"(tmp)); \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: include/asm-s390x/hook.h:33:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: include/asm-s390x/hook.h:34:
+static inline int is_asm_hook(unsigned char * addr)

ERROR:SPACING: space required before the open brace '{'
#641: FILE: include/asm-s390x/hook.h:36:
+	if (!addr){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#641: FILE: include/asm-s390x/hook.h:36:
+	if (!addr){
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: include/asm-s390x/hook.h:39:
+^Iif (((addr[0] & OPCODE_MOV2_1_MASK) == OPCODE_MOV2_1) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: include/asm-s390x/hook.h:40:
+	if (((addr[0] & OPCODE_MOV2_1_MASK) == OPCODE_MOV2_1) && 
+		    ((addr[1] & OPCODE_MOV2_2_MASK) == OPCODE_MOV2_2)) {

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#647: FILE: include/asm-s390x/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){
 		           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#647: FILE: include/asm-s390x/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){
 		                          ^

ERROR:SPACING: space required before the open brace '{'
#647: FILE: include/asm-s390x/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#647: FILE: include/asm-s390x/hook.h:42:
+		if (addr[2]== 0 && addr[3]== 0){
+			return 1;
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#658: FILE: include/linux/hook.h:1:
+#ifndef __LINUX_HOOK_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#662: FILE: include/linux/hook.h:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#700: FILE: include/linux/hook.h:43:
+ * Use the DECLARE_HOOK macro to define the hook structure in global $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#703: FILE: include/linux/hook.h:46:
+#if defined(CONFIG_HOOK) || defined(CONFIG_HOOK_MODULE)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#705: FILE: include/linux/hook.h:48:
+#define EXPORT_SYMBOL_NOVERS_GPL(var)  __EXPORT_SYMBOL_GPL(var, __MODULE_STRING(var))

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#705: FILE: include/linux/hook.h:48:
+#define EXPORT_SYMBOL_NOVERS_GPL(var)  __EXPORT_SYMBOL_GPL(var, __MODULE_STRING(var))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hk' - possible side-effects?
#708: FILE: include/linux/hook.h:51:
+#define _DECLARE_HOOK(hk) \
+extern void hk; \
+struct hook hk ## _head = { \
+	hook_addr: &(hk), \
+	hook_name: #hk \
+}; \
+EXPORT_SYMBOL_NOVERS_GPL(hk##_head);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#708: FILE: include/linux/hook.h:51:
+#define _DECLARE_HOOK(hk) \
+extern void hk; \
+struct hook hk ## _head = { \
+	hook_addr: &(hk), \
+	hook_name: #hk \
+}; \
+EXPORT_SYMBOL_NOVERS_GPL(hk##_head);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:INDENTED_LABEL: labels should not be indented
#711: FILE: include/linux/hook.h:54:
+	hook_addr: &(hk), \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#712: FILE: include/linux/hook.h:55:
+	hook_name: #hk \
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#712: FILE: include/linux/hook.h:55:
+	hook_name: #hk \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hk' - possible side-effects?
#717: FILE: include/linux/hook.h:60:
+#define _DECLARE_EXCLUSIVE_HOOK(hk) \
+extern void hk; \
+struct hook hk ## _head = { \
+	hook_addr: &(hk), \
+	hook_name: #hk, \
+	hook_flags: HOOK_EXCLUSIVE \
+}; \
+EXPORT_SYMBOL_NOVERS_GPL(hk##_head);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#717: FILE: include/linux/hook.h:60:
+#define _DECLARE_EXCLUSIVE_HOOK(hk) \
+extern void hk; \
+struct hook hk ## _head = { \
+	hook_addr: &(hk), \
+	hook_name: #hk, \
+	hook_flags: HOOK_EXCLUSIVE \
+}; \
+EXPORT_SYMBOL_NOVERS_GPL(hk##_head);

WARNING:INDENTED_LABEL: labels should not be indented
#720: FILE: include/linux/hook.h:63:
+	hook_addr: &(hk), \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#721: FILE: include/linux/hook.h:64:
+	hook_name: #hk, \
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#721: FILE: include/linux/hook.h:64:
+	hook_name: #hk, \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#722: FILE: include/linux/hook.h:65:
+	hook_flags: HOOK_EXCLUSIVE \
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#722: FILE: include/linux/hook.h:65:
+	hook_flags: HOOK_EXCLUSIVE \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: include/linux/hook.h:73:
+ */ $

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#732: FILE: include/linux/hook.h:75:
+#define _DECLARE_GENERIC_HOOK(hk) \
+struct hook hk ## _head = { \
+	hook_addr: NULL, \
+	hook_name: #hk \
+}; \
+EXPORT_SYMBOL_NOVERS_GPL(hk##_head);

WARNING:INDENTED_LABEL: labels should not be indented
#734: FILE: include/linux/hook.h:77:
+	hook_addr: NULL, \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#735: FILE: include/linux/hook.h:78:
+	hook_name: #hk \
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#735: FILE: include/linux/hook.h:78:
+	hook_name: #hk \

ERROR:SPACING: space required after that ';' (ctx:VxV)
#752: FILE: include/linux/hook.h:95:
+static inline int is_asm_hook(unsigned char *addr) {return 0;}
                                                             ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#758: FILE: include/linux/hook.h:101:
+#define IF_HOOK_ENABLED(h, h1) \
+	__asm__ __volatile__ (".global "h"; "h":"); \
+	if (unlikely(h1##_head.hook_flags & HOOK_ACTIVE))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#758: FILE: include/linux/hook.h:101:
+#define IF_HOOK_ENABLED(h, h1) \
+	__asm__ __volatile__ (".global "h"; "h":"); \
+	if (unlikely(h1##_head.hook_flags & HOOK_ACTIVE))

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#759: FILE: include/linux/hook.h:102:
+	__asm__ __volatile__ (".global "h"; "h":"); \

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#767: FILE: include/linux/hook.h:110:
+#define CALL_EXIT(fn, parm, args...) ((hook_fn_t)(fn)(parm , ##args))
                       ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#767: FILE: include/linux/hook.h:110:
+#define CALL_EXIT(fn, parm, args...) ((hook_fn_t)(fn)(parm , ##args))
                                                       ^^^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#767: FILE: include/linux/hook.h:110:
+#define CALL_EXIT(fn, parm, args...) ((hook_fn_t)(fn)(parm , ##args))
                                                            ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#769: FILE: include/linux/hook.h:112:
+#define DISPATCH_NORMAL(fn, parm, dsprc, args...) \
                             ^^^^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#769: FILE: include/linux/hook.h:112:
+#define DISPATCH_NORMAL(fn, parm, dsprc, args...) \
+	dsprc = CALL_EXIT(fn, parm , ##args);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#769: FILE: include/linux/hook.h:112:
+#define DISPATCH_NORMAL(fn, parm, dsprc, args...) \
+	dsprc = CALL_EXIT(fn, parm , ##args);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#770: FILE: include/linux/hook.h:113:
+	dsprc = CALL_EXIT(fn, parm , ##args);
 	                      ^^^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#770: FILE: include/linux/hook.h:113:
+	dsprc = CALL_EXIT(fn, parm , ##args);
 	                           ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#772: FILE: include/linux/hook.h:115:
+#define DISPATCH_RET(fn, parm, dsprc, args...) { \
                          ^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dsprc' - possible side-effects?
#772: FILE: include/linux/hook.h:115:
+#define DISPATCH_RET(fn, parm, dsprc, args...) { \
+	int rc; \
+	dsprc = CALL_EXIT(fn, parm, &rc , ##args); \
+	if (dsprc == HOOK_RETURN) \
+		return rc; \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#772: FILE: include/linux/hook.h:115:
+#define DISPATCH_RET(fn, parm, dsprc, args...) { \
+	int rc; \
+	dsprc = CALL_EXIT(fn, parm, &rc , ##args); \
+	if (dsprc == HOOK_RETURN) \
+		return rc; \
+}

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#774: FILE: include/linux/hook.h:117:
+	dsprc = CALL_EXIT(fn, parm, &rc , ##args); \
 	                      ^^^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#774: FILE: include/linux/hook.h:117:
+	dsprc = CALL_EXIT(fn, parm, &rc , ##args); \
 	                                ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#779: FILE: include/linux/hook.h:122:
+#define DISPATCH_RET_NORC(fn, parm, dsprc, args...) { \
                               ^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dsprc' - possible side-effects?
#779: FILE: include/linux/hook.h:122:
+#define DISPATCH_RET_NORC(fn, parm, dsprc, args...) { \
+	dsprc = CALL_EXIT(fn, parm , ##args); \
+	if (dsprc == HOOK_RETURN) \
+		return; \
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#779: FILE: include/linux/hook.h:122:
+#define DISPATCH_RET_NORC(fn, parm, dsprc, args...) { \
+	dsprc = CALL_EXIT(fn, parm , ##args); \
+	if (dsprc == HOOK_RETURN) \
+		return; \
+}

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#780: FILE: include/linux/hook.h:123:
+	dsprc = CALL_EXIT(fn, parm , ##args); \
 	                      ^^^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#780: FILE: include/linux/hook.h:123:
+	dsprc = CALL_EXIT(fn, parm , ##args); \
 	                           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#790: FILE: include/linux/hook.h:133:
+			dispatch(rec->hook_exit, rec->hook_head, dsprc , ##args) \
 			                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#797: FILE: include/linux/hook.h:140:
+#define HOOK(h, args...) { \
+	HOOK_TEST(h) \
+	HOOK_DISP_LOOP(h, DISPATCH_NORMAL , ##args); \
+}

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#799: FILE: include/linux/hook.h:142:
+	HOOK_DISP_LOOP(h, DISPATCH_NORMAL , ##args); \
 	                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#802: FILE: include/linux/hook.h:145:
+#define HOOK_RET(h, args...) { \
+	HOOK_TEST(h) \
+	HOOK_DISP_LOOP(h, DISPATCH_RET , ##args); \
+}

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#804: FILE: include/linux/hook.h:147:
+	HOOK_DISP_LOOP(h, DISPATCH_RET , ##args); \
 	                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#807: FILE: include/linux/hook.h:150:
+#define HOOK_RET_NORC(h, args...) { \
+	HOOK_TEST(h) \
+	HOOK_DISP_LOOP(h, DISPATCH_RET_NORC , ##args); \
+}

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#809: FILE: include/linux/hook.h:152:
+	HOOK_DISP_LOOP(h, DISPATCH_RET_NORC , ##args); \
 	                                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#814: FILE: include/linux/hook.h:157:
+	DISPATCH_NORMAL(h##_head.hook_ex_exit, &h##_head , ##args); \
 	                                                 ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#819: FILE: include/linux/hook.h:162:
+	DISPATCH_RET(h##_head.hook_ex_exit, &h##_head , ##args); \
 	                                              ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#824: FILE: include/linux/hook.h:167:
+	DISPATCH_RET_NORC(h##_head.hook_ex_exit, &h##_head , ##args); \
 	                                                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#830: FILE: include/linux/hook.h:173:
+		HOOK_DISP_LOOP(h, DISPATCH_NORMAL , ##args); \
 		                                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: include/linux/hook.h:178:
+extern int _hook_initialise(struct hook *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#836: FILE: include/linux/hook.h:179:
+extern int _hook_terminate(struct hook *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hook *' should also have an identifier name
#836: FILE: include/linux/hook.h:179:
+extern int _hook_terminate(struct hook *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#836: FILE: include/linux/hook.h:179:
+extern int _hook_terminate(struct hook *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#837: FILE: include/linux/hook.h:180:
+extern int _hook_exit_register(struct hook *, struct hook_rec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hook *' should also have an identifier name
#837: FILE: include/linux/hook.h:180:
+extern int _hook_exit_register(struct hook *, struct hook_rec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hook_rec *' should also have an identifier name
#837: FILE: include/linux/hook.h:180:
+extern int _hook_exit_register(struct hook *, struct hook_rec *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#840: FILE: include/linux/hook.h:183:
+extern void hook_exit_deregister(struct hook_rec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hook_rec *' should also have an identifier name
#840: FILE: include/linux/hook.h:183:
+extern void hook_exit_deregister(struct hook_rec *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#841: FILE: include/linux/hook.h:184:
+extern void hook_exit_arm(struct hook_rec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hook_rec *' should also have an identifier name
#841: FILE: include/linux/hook.h:184:
+extern void hook_exit_arm(struct hook_rec *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#842: FILE: include/linux/hook.h:185:
+extern void hook_exit_disarm(struct hook_rec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hook_rec *' should also have an identifier name
#842: FILE: include/linux/hook.h:185:
+extern void hook_exit_disarm(struct hook_rec *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#848: FILE: include/linux/hook.h:191:
+#define HOOK_CONTINUE ^I0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#849: FILE: include/linux/hook.h:192:
+#define HOOK_TERMINATE ^I1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#850: FILE: include/linux/hook.h:193:
+#define HOOK_RETURN ^I-1$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#887: FILE: kernel/hook.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: kernel/hook.c:3:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#901: FILE: kernel/hook.c:15:
+#include <asm/uaccess.h>

ERROR:SPACING: space required before the open parenthesis '('
#909: FILE: kernel/hook.c:23:
+	if(hook->hook_flags & HOOK_ASM_HOOK)

ERROR:SPACING: space required before the open parenthesis '('
#916: FILE: kernel/hook.c:30:
+	if(hook->hook_flags & HOOK_ASM_HOOK)

ERROR:SPACING: space required before the open parenthesis '('
#926: FILE: kernel/hook.c:40:
+		if(rec->hook_flags & HOOK_ARMED) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#926: FILE: kernel/hook.c:40:
+		if(rec->hook_flags & HOOK_ARMED) {
+			return;
+		}

ERROR:SPACING: space required before the open parenthesis '('
#938: FILE: kernel/hook.c:52:
+	if(hook->hook_flags & HOOK_EXCLUSIVE) {

ERROR:SPACING: space required before the open parenthesis '('
#956: FILE: kernel/hook.c:70:
+	if(rec->hook_flags & HOOK_ARMED)

ERROR:SPACING: space required before the open parenthesis '('
#958: FILE: kernel/hook.c:72:
+	if(rec->hook_head->hook_flags & HOOK_EXCLUSIVE)

ERROR:SPACING: space required before the open parenthesis '('
#970: FILE: kernel/hook.c:84:
+	if(!(rec->hook_head->hook_flags & HOOK_ACTIVE))

ERROR:SPACING: space required before the open parenthesis '('
#991: FILE: kernel/hook.c:105:
+		if(strcmp(hook->hook_name, h->hook_name) == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#998: FILE: kernel/hook.c:112:
+	if(is_asm_hook(hook->hook_addr)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#998: FILE: kernel/hook.c:112:
+	if(is_asm_hook(hook->hook_addr)) {
+		hook->hook_flags |= HOOK_ASM_HOOK;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1015: FILE: kernel/hook.c:129:
+	if(hook->hook_flags & HOOK_ACTIVE) {

ERROR:SPACING: space required before the open parenthesis '('
#1016: FILE: kernel/hook.c:130:
+		if(force) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1032: FILE: kernel/hook.c:146:
+	printk(KERN_INFO "Kernel Hooks Interface installed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1038: FILE: kernel/hook.c:152:
+	printk(KERN_INFO "Kernel Hooks Interface terminated.\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1044: FILE: kernel/hook.c:158:
+EXPORT_SYMBOL(hook_exit_deregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1045: FILE: kernel/hook.c:159:
+EXPORT_SYMBOL(hook_exit_arm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1046: FILE: kernel/hook.c:160:
+EXPORT_SYMBOL(hook_exit_disarm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1047: FILE: kernel/hook.c:161:
+EXPORT_SYMBOL(_hook_initialise);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1048: FILE: kernel/hook.c:162:
+EXPORT_SYMBOL(_hook_terminate);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1049: FILE: kernel/hook.c:163:
+EXPORT_SYMBOL(_hook_exit_register);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427365.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 72 errors, 73 warnings, 41 checks, 812 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427365.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
