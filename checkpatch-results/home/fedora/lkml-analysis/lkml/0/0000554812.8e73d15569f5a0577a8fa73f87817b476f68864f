WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#19: 
Here's a proposed v2.4 "quick fix" to allow specifying "module parameters" to

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#390: FILE: drivers/scsi/sr_ioctl.c:27:
+int xa_test = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#406: FILE: include/linux/module.h:281:
+extern int generic_parse_function (char *input, const char *name, void *loc, const char *fmt) __init;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: include/linux/module.h:281:
+extern int generic_parse_function (char *input, const char *name, void *loc, const char *fmt) __init;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#406: FILE: include/linux/module.h:281:
+extern int generic_parse_function (char *input, const char *name, void *loc, const char *fmt) __init;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#412: FILE: include/linux/module.h:287:
+#define MODULE_PARM(var,type) \
                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#412: FILE: include/linux/module.h:287:
+#define MODULE_PARM(var,type) \
+  static int __init _setup_##var (char *str) { \
+    /* are the strings put in the correct section? */ \
+    return generic_parse_function(str, __FILE__##":"#var, &var, type); \
+  } \
+  __setup (__FILE__##":"#var"=", _setup_##var);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#412: FILE: include/linux/module.h:287:
+#define MODULE_PARM(var,type) \
+  static int __init _setup_##var (char *str) { \
+    /* are the strings put in the correct section? */ \
+    return generic_parse_function(str, __FILE__##":"#var, &var, type); \
+  } \
+  __setup (__FILE__##":"#var"=", _setup_##var);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: include/linux/module.h:288:
+  static int __init _setup_##var (char *str) { \$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#413: FILE: include/linux/module.h:288:
+  static int __init _setup_##var (char *str) { \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#413: FILE: include/linux/module.h:288:
+  static int __init _setup_##var (char *str) { \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/linux/module.h:290:
+    return generic_parse_function(str, __FILE__##":"#var, &var, type); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: include/linux/module.h:291:
+  } \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: include/linux/module.h:292:
+  __setup (__FILE__##":"#var"=", _setup_##var);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#417: FILE: include/linux/module.h:292:
+  __setup (__FILE__##":"#var"=", _setup_##var);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#417: FILE: include/linux/module.h:292:
+  __setup (__FILE__##":"#var"=", _setup_##var);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#444: FILE: lib/cmdline.c:130:
+extern int __init generic_parse_function (char *input, const char *name, void *loc, const char *fmt) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#444: FILE: lib/cmdline.c:130:
+extern int __init generic_parse_function (char *input, const char *name, void *loc, const char *fmt) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: lib/cmdline.c:130:
+extern int __init generic_parse_function (char *input, const char *name, void *loc, const char *fmt) {

CHECK:SPACING: No space is necessary after a cast
#450: FILE: lib/cmdline.c:136:
+		min = simple_strtoul(fmt, (char **) &fmt, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#450: FILE: lib/cmdline.c:136:
+		min = simple_strtoul(fmt, (char **) &fmt, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#452: FILE: lib/cmdline.c:138:
+			max = simple_strtoul(fmt + 1, (char **) &fmt, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#452: FILE: lib/cmdline.c:138:
+			max = simple_strtoul(fmt + 1, (char **) &fmt, 10);

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#459: FILE: lib/cmdline.c:145:
+		static char *str __initdata = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#469: FILE: lib/cmdline.c:155:
+				static char *r __initdata = NULL;

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#474: FILE: lib/cmdline.c:160:
+						printk("improperly terminated string argument for %s\n", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: lib/cmdline.c:160:
+						printk("improperly terminated string argument for %s\n", name);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#484: FILE: lib/cmdline.c:170:
+					case 'a': *r = '\a'; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#485: FILE: lib/cmdline.c:171:
+					case 'b': *r = '\b'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#486: FILE: lib/cmdline.c:172:
+					case 'e': *r = '\033'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#487: FILE: lib/cmdline.c:173:
+					case 'f': *r = '\f'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#488: FILE: lib/cmdline.c:174:
+					case 'n': *r = '\n'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#489: FILE: lib/cmdline.c:175:
+					case 'r': *r = '\r'; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#490: FILE: lib/cmdline.c:176:
+					case 't': *r = '\t'; break;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#501: FILE: lib/cmdline.c:187:
+						if ('0' <= input[1] && input[1] <= '7') {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#503: FILE: lib/cmdline.c:189:
+							if ('0' <= input[1] && input[1] <= '7')

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#509: FILE: lib/cmdline.c:195:
+					default: *r = *input; break;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#522: FILE: lib/cmdline.c:208:
+				static char *r __initdata = NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#525: FILE: lib/cmdline.c:211:
+				if ((r = strchr(input, ',')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#545: FILE: lib/cmdline.c:231:
+				if (*(char **)loc == NULL) {
[...]
+				} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!loc"
#545: FILE: lib/cmdline.c:231:
+				if (*(char **)loc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#547: FILE: lib/cmdline.c:233:
+					printk("parameter %s - kmalloc() failed\n", name);

CHECK:BRACES: Unbalanced braces around else statement
#548: FILE: lib/cmdline.c:234:
+				} else

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#554: FILE: lib/cmdline.c:240:
+				static long charssize __initdata = 0;	/* size of each member */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#559: FILE: lib/cmdline.c:245:
+					printk("parameter type 'c' for %s must be followed by"

WARNING:SPLIT_STRING: quoted string split across lines
#560: FILE: lib/cmdline.c:246:
+					printk("parameter type 'c' for %s must be followed by"
+					" the maximum size\n", name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#563: FILE: lib/cmdline.c:249:
+				charssize = simple_strtoul(fmt + 1, (char **) NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#563: FILE: lib/cmdline.c:249:
+				charssize = simple_strtoul(fmt + 1, (char **) NULL, 10);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#566: FILE: lib/cmdline.c:252:
+				if (strlen(str) >= charssize-1) {
 				                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#567: FILE: lib/cmdline.c:253:
+					printk("string too long for %s (max %ld)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: lib/cmdline.c:254:
+					printk("string too long for %s (max %ld)",
+					      name, charssize - 1);

CHECK:SPACING: No space is necessary after a cast
#572: FILE: lib/cmdline.c:258:
+				strcpy((char *) loc, str);	/* safe, see check above */

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#581: FILE: lib/cmdline.c:267:
+			*(char *)loc++ = simple_strtoul(input, &input, 0);

CHECK:SPACING: No space is necessary after a cast
#585: FILE: lib/cmdline.c:271:
+			*(short *) loc = simple_strtoul(input, &input, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#585: FILE: lib/cmdline.c:271:
+			*(short *) loc = simple_strtoul(input, &input, 0);

CHECK:SPACING: No space is necessary after a cast
#590: FILE: lib/cmdline.c:276:
+			*(int *) loc = simple_strtoul(input, &input, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#590: FILE: lib/cmdline.c:276:
+			*(int *) loc = simple_strtoul(input, &input, 0);

CHECK:SPACING: No space is necessary after a cast
#595: FILE: lib/cmdline.c:281:
+			*(long *) loc = simple_strtoul(input, &input, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#595: FILE: lib/cmdline.c:281:
+			*(long *) loc = simple_strtoul(input, &input, 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#600: FILE: lib/cmdline.c:286:
+			printk("unknown parameter type '%c' for %s",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: lib/cmdline.c:287:
+			printk("unknown parameter type '%c' for %s",
+			      *fmt, name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#616: FILE: lib/cmdline.c:302:
+				printk("too many values for %s (max %d)", name, max);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#622: FILE: lib/cmdline.c:308:
+			printk("invalid argument syntax for %s: '%c'",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: lib/cmdline.c:309:
+			printk("invalid argument syntax for %s: '%c'",
+			      name, *input);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n < min'
#628: FILE: lib/cmdline.c:314:
+	if (min && (n < min)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#629: FILE: lib/cmdline.c:315:
+		printk("too few values for %s (min %d)", name, min);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000554812.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 31 warnings, 18 checks, 467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000554812.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
