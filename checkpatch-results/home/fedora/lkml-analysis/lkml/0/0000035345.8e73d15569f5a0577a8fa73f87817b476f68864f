WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: scripts/unifdef.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#81: FILE: scripts/unifdef.c:37:
+#if 0

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#83: FILE: scripts/unifdef.c:39:
+"@(#) Copyright (c) 1985, 1993\n\

CHECK:CAMELCASE: Avoid CamelCase: <Berkeley>
#87: FILE: scripts/unifdef.c:43:
+__IDSTRING(Berkeley, "@(#)unifdef.c	8.1 (Berkeley) 6/6/93");

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <NetBSD>
#88: FILE: scripts/unifdef.c:44:
+__IDSTRING(NetBSD, "$NetBSD: unifdef.c,v 1.8 2000/07/03 02:51:36 matt Exp $");

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#93: FILE: scripts/unifdef.c:49:
+__FBSDID("$FreeBSD: /repoman/r/ncvs/src/usr.bin/unifdef/unifdef.c,v 1.20 2005/05/21 09:55:09 ru Exp $");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#119: FILE: scripts/unifdef.c:75:
+size_t strlcpy(char *dst, const char *src, size_t siz);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#122: FILE: scripts/unifdef.c:78:
+typedef enum {

CHECK:CAMELCASE: Avoid CamelCase: <Linetype>
#138: FILE: scripts/unifdef.c:94:
+} Linetype;

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#140: FILE: scripts/unifdef.c:96:
+static char const * const linetype_name[] = {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#151: FILE: scripts/unifdef.c:107:
+typedef enum {

CHECK:CAMELCASE: Avoid CamelCase: <Ifstate>
#163: FILE: scripts/unifdef.c:119:
+} Ifstate;

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#165: FILE: scripts/unifdef.c:121:
+static char const * const ifstate_name[] = {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#173: FILE: scripts/unifdef.c:129:
+typedef enum {

CHECK:CAMELCASE: Avoid CamelCase: <Comment_state>
#181: FILE: scripts/unifdef.c:137:
+} Comment_state;

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#183: FILE: scripts/unifdef.c:139:
+static char const * const comment_name[] = {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#188: FILE: scripts/unifdef.c:144:
+typedef enum {

CHECK:CAMELCASE: Avoid CamelCase: <Line_state>
#192: FILE: scripts/unifdef.c:148:
+} Line_state;

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#194: FILE: scripts/unifdef.c:150:
+static char const * const linestate_name[] = {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#233: FILE: scripts/unifdef.c:189:
+static char             tline[MAXLINE+EDITSLOP];/* input buffer plus space */
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#267: FILE: scripts/unifdef.c:223:
+#define endsym(c) (!isalpha((unsigned char)c) && !isdigit((unsigned char)c) && c != '_')

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!input"
#336: FILE: scripts/unifdef.c:292:
+		if (input == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#349: FILE: scripts/unifdef.c:305:
+	fprintf(stderr, "usage: unifdef [-cdeklnst] [-Ipath]"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#350: FILE: scripts/unifdef.c:306:
+	fprintf(stderr, "usage: unifdef [-cdeklnst] [-Ipath]"
+	    " [-Dsym[=val]] [-Usym] [-iDsym[=val]] [-iUsym] ... [file]\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#386: FILE: scripts/unifdef.c:342:
+static void Eelif (void) { error("Inappropriate #elif"); }

CHECK:CAMELCASE: Avoid CamelCase: <Eelif>
#386: FILE: scripts/unifdef.c:342:
+static void Eelif (void) { error("Inappropriate #elif"); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#387: FILE: scripts/unifdef.c:343:
+static void Eelse (void) { error("Inappropriate #else"); }

CHECK:CAMELCASE: Avoid CamelCase: <Eelse>
#387: FILE: scripts/unifdef.c:343:
+static void Eelse (void) { error("Inappropriate #else"); }

CHECK:CAMELCASE: Avoid CamelCase: <Eendif>
#388: FILE: scripts/unifdef.c:344:
+static void Eendif(void) { error("Inappropriate #endif"); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: scripts/unifdef.c:345:
+static void Eeof  (void) { error("Premature EOF"); }

CHECK:CAMELCASE: Avoid CamelCase: <Eeof>
#389: FILE: scripts/unifdef.c:345:
+static void Eeof  (void) { error("Premature EOF"); }

CHECK:CAMELCASE: Avoid CamelCase: <Eioccc>
#390: FILE: scripts/unifdef.c:346:
+static void Eioccc(void) { error("Obfuscated preprocessor control line"); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#393: FILE: scripts/unifdef.c:349:
+static void drop  (void) { flushline(false); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#395: FILE: scripts/unifdef.c:351:
+static void Strue (void) { drop();  ignoreoff(); state(IS_TRUE_PREFIX); }

CHECK:CAMELCASE: Avoid CamelCase: <Strue>
#395: FILE: scripts/unifdef.c:351:
+static void Strue (void) { drop();  ignoreoff(); state(IS_TRUE_PREFIX); }

CHECK:CAMELCASE: Avoid CamelCase: <Sfalse>
#396: FILE: scripts/unifdef.c:352:
+static void Sfalse(void) { drop();  ignoreoff(); state(IS_FALSE_PREFIX); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#397: FILE: scripts/unifdef.c:353:
+static void Selse (void) { drop();               state(IS_TRUE_ELSE); }

CHECK:CAMELCASE: Avoid CamelCase: <Selse>
#397: FILE: scripts/unifdef.c:353:
+static void Selse (void) { drop();               state(IS_TRUE_ELSE); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#399: FILE: scripts/unifdef.c:355:
+static void Pelif (void) { print(); ignoreoff(); state(IS_PASS_MIDDLE); }

CHECK:CAMELCASE: Avoid CamelCase: <Pelif>
#399: FILE: scripts/unifdef.c:355:
+static void Pelif (void) { print(); ignoreoff(); state(IS_PASS_MIDDLE); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#400: FILE: scripts/unifdef.c:356:
+static void Pelse (void) { print();              state(IS_PASS_ELSE); }

CHECK:CAMELCASE: Avoid CamelCase: <Pelse>
#400: FILE: scripts/unifdef.c:356:
+static void Pelse (void) { print();              state(IS_PASS_ELSE); }

CHECK:CAMELCASE: Avoid CamelCase: <Pendif>
#401: FILE: scripts/unifdef.c:357:
+static void Pendif(void) { print(); unnest(); }

CHECK:CAMELCASE: Avoid CamelCase: <Dfalse>
#403: FILE: scripts/unifdef.c:359:
+static void Dfalse(void) { drop();  ignoreoff(); state(IS_FALSE_TRAILER); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#404: FILE: scripts/unifdef.c:360:
+static void Delif (void) { drop();  ignoreoff(); state(IS_FALSE_MIDDLE); }

CHECK:CAMELCASE: Avoid CamelCase: <Delif>
#404: FILE: scripts/unifdef.c:360:
+static void Delif (void) { drop();  ignoreoff(); state(IS_FALSE_MIDDLE); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#405: FILE: scripts/unifdef.c:361:
+static void Delse (void) { drop();               state(IS_FALSE_ELSE); }

CHECK:CAMELCASE: Avoid CamelCase: <Delse>
#405: FILE: scripts/unifdef.c:361:
+static void Delse (void) { drop();               state(IS_FALSE_ELSE); }

CHECK:CAMELCASE: Avoid CamelCase: <Dendif>
#406: FILE: scripts/unifdef.c:362:
+static void Dendif(void) { drop();  unnest(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#408: FILE: scripts/unifdef.c:364:
+static void Fdrop (void) { nest();  Dfalse(); }

CHECK:CAMELCASE: Avoid CamelCase: <Fdrop>
#408: FILE: scripts/unifdef.c:364:
+static void Fdrop (void) { nest();  Dfalse(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#409: FILE: scripts/unifdef.c:365:
+static void Fpass (void) { nest();  Pelif(); }

CHECK:CAMELCASE: Avoid CamelCase: <Fpass>
#409: FILE: scripts/unifdef.c:365:
+static void Fpass (void) { nest();  Pelif(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: scripts/unifdef.c:366:
+static void Ftrue (void) { nest();  Strue(); }

CHECK:CAMELCASE: Avoid CamelCase: <Ftrue>
#410: FILE: scripts/unifdef.c:366:
+static void Ftrue (void) { nest();  Strue(); }

CHECK:CAMELCASE: Avoid CamelCase: <Ffalse>
#411: FILE: scripts/unifdef.c:367:
+static void Ffalse(void) { nest();  Sfalse(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#413: FILE: scripts/unifdef.c:369:
+static void Oiffy (void) { if (!iocccok) Eioccc(); Fpass(); ignoreon(); }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#413: FILE: scripts/unifdef.c:369:
+static void Oiffy (void) { if (!iocccok) Eioccc(); Fpass(); ignoreon(); }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <Oiffy>
#413: FILE: scripts/unifdef.c:369:
+static void Oiffy (void) { if (!iocccok) Eioccc(); Fpass(); ignoreon(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#414: FILE: scripts/unifdef.c:370:
+static void Oif   (void) { if (!iocccok) Eioccc(); Fpass(); }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#414: FILE: scripts/unifdef.c:370:
+static void Oif   (void) { if (!iocccok) Eioccc(); Fpass(); }

CHECK:CAMELCASE: Avoid CamelCase: <Oif>
#414: FILE: scripts/unifdef.c:370:
+static void Oif   (void) { if (!iocccok) Eioccc(); Fpass(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#415: FILE: scripts/unifdef.c:371:
+static void Oelif (void) { if (!iocccok) Eioccc(); Pelif(); }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#415: FILE: scripts/unifdef.c:371:
+static void Oelif (void) { if (!iocccok) Eioccc(); Pelif(); }

CHECK:CAMELCASE: Avoid CamelCase: <Oelif>
#415: FILE: scripts/unifdef.c:371:
+static void Oelif (void) { if (!iocccok) Eioccc(); Pelif(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#417: FILE: scripts/unifdef.c:373:
+static void Idrop (void) { Fdrop();  ignoreon(); }

CHECK:CAMELCASE: Avoid CamelCase: <Idrop>
#417: FILE: scripts/unifdef.c:373:
+static void Idrop (void) { Fdrop();  ignoreon(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#418: FILE: scripts/unifdef.c:374:
+static void Itrue (void) { Ftrue();  ignoreon(); }

CHECK:CAMELCASE: Avoid CamelCase: <Itrue>
#418: FILE: scripts/unifdef.c:374:
+static void Itrue (void) { Ftrue();  ignoreon(); }

CHECK:CAMELCASE: Avoid CamelCase: <Ifalse>
#419: FILE: scripts/unifdef.c:375:
+static void Ifalse(void) { Ffalse(); ignoreon(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#421: FILE: scripts/unifdef.c:377:
+static void Mpass (void) { strncpy(keyword, "if  ", 4); Pelif(); }

CHECK:CAMELCASE: Avoid CamelCase: <Mpass>
#421: FILE: scripts/unifdef.c:377:
+static void Mpass (void) { strncpy(keyword, "if  ", 4); Pelif(); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: scripts/unifdef.c:378:
+static void Mtrue (void) { keywordedit("else\n");  state(IS_TRUE_MIDDLE); }

CHECK:CAMELCASE: Avoid CamelCase: <Mtrue>
#422: FILE: scripts/unifdef.c:378:
+static void Mtrue (void) { keywordedit("else\n");  state(IS_TRUE_MIDDLE); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: scripts/unifdef.c:379:
+static void Melif (void) { keywordedit("endif\n"); state(IS_FALSE_TRAILER); }

CHECK:CAMELCASE: Avoid CamelCase: <Melif>
#423: FILE: scripts/unifdef.c:379:
+static void Melif (void) { keywordedit("endif\n"); state(IS_FALSE_TRAILER); }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#424: FILE: scripts/unifdef.c:380:
+static void Melse (void) { keywordedit("endif\n"); state(IS_FALSE_ELSE); }

CHECK:CAMELCASE: Avoid CamelCase: <Melse>
#424: FILE: scripts/unifdef.c:380:
+static void Melse (void) { keywordedit("endif\n"); state(IS_FALSE_ELSE); }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#428: FILE: scripts/unifdef.c:384:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Eelif, Eelif, Eelif, Eelse, Eendif,
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#428: FILE: scripts/unifdef.c:384:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Eelif, Eelif, Eelif, Eelse, Eendif,
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: scripts/unifdef.c:385:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eelif, Eelif, Eelif, Eelse, Eendif,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: scripts/unifdef.c:386:
+  print, done },$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: scripts/unifdef.c:388:
+{ Idrop, Idrop, Fdrop, Fdrop, Fdrop, Mpass, Strue, Sfalse,Selse, Dendif,
                                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: scripts/unifdef.c:389:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Mpass, Eioccc,Eioccc,Eioccc,Eioccc,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#433: FILE: scripts/unifdef.c:389:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Mpass, Eioccc,Eioccc,Eioccc,Eioccc,
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#433: FILE: scripts/unifdef.c:389:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Mpass, Eioccc,Eioccc,Eioccc,Eioccc,
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#433: FILE: scripts/unifdef.c:389:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Mpass, Eioccc,Eioccc,Eioccc,Eioccc,
                                                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: scripts/unifdef.c:390:
+  drop,  Eeof },$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: scripts/unifdef.c:392:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Dfalse,Dfalse,Dfalse,Delse, Dendif,
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: scripts/unifdef.c:392:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Dfalse,Dfalse,Dfalse,Delse, Dendif,
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: scripts/unifdef.c:392:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Dfalse,Dfalse,Dfalse,Delse, Dendif,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: scripts/unifdef.c:392:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Dfalse,Dfalse,Dfalse,Delse, Dendif,
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: scripts/unifdef.c:392:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Dfalse,Dfalse,Dfalse,Delse, Dendif,
                                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: scripts/unifdef.c:393:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#437: FILE: scripts/unifdef.c:393:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#437: FILE: scripts/unifdef.c:393:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#437: FILE: scripts/unifdef.c:393:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#437: FILE: scripts/unifdef.c:393:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: scripts/unifdef.c:394:
+  print, Eeof },$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: scripts/unifdef.c:396:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Pelif, Mtrue, Delif, Pelse, Pendif,
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: scripts/unifdef.c:396:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Pelif, Mtrue, Delif, Pelse, Pendif,
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: scripts/unifdef.c:397:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Pelif, Oelif, Oelif, Pelse, Pendif,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: scripts/unifdef.c:398:
+  print, Eeof },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: scripts/unifdef.c:401:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: scripts/unifdef.c:401:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: scripts/unifdef.c:401:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: scripts/unifdef.c:401:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: scripts/unifdef.c:401:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Eioccc,Eioccc,Eioccc,Eioccc,Eioccc,
                                                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: scripts/unifdef.c:402:
+  drop,  Eeof },$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: scripts/unifdef.c:404:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Melif, Melif, Melif, Melse, Pendif,
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#448: FILE: scripts/unifdef.c:404:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Melif, Melif, Melif, Melse, Pendif,
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: scripts/unifdef.c:405:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Pendif,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#449: FILE: scripts/unifdef.c:405:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Pendif,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#449: FILE: scripts/unifdef.c:405:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Pendif,
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#449: FILE: scripts/unifdef.c:405:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Pendif,
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#449: FILE: scripts/unifdef.c:405:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eioccc,Eioccc,Eioccc,Eioccc,Pendif,
                                                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: scripts/unifdef.c:406:
+  print, Eeof },$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: scripts/unifdef.c:408:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Eelif, Eelif, Eelif, Eelse, Pendif,
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: scripts/unifdef.c:408:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Eelif, Eelif, Eelif, Eelse, Pendif,
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: scripts/unifdef.c:409:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eelif, Eelif, Eelif, Eelse, Pendif,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: scripts/unifdef.c:410:
+  print, Eeof },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: scripts/unifdef.c:413:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Eelif, Eelif, Eelif, Eelse, Eioccc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: scripts/unifdef.c:414:
+  drop,  Eeof },$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: scripts/unifdef.c:416:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Eelif, Eelif, Eelif, Eelse, Dendif,
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: scripts/unifdef.c:416:
+{ Itrue, Ifalse,Fpass, Ftrue, Ffalse,Eelif, Eelif, Eelif, Eelse, Dendif,
                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: scripts/unifdef.c:417:
+  Oiffy, Oiffy, Fpass, Oif,   Oif,   Eelif, Eelif, Eelif, Eelse, Eioccc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: scripts/unifdef.c:418:
+  print, Eeof },$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: scripts/unifdef.c:420:
+{ Idrop, Idrop, Fdrop, Fdrop, Fdrop, Dfalse,Dfalse,Dfalse,Delse, Dendif,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: scripts/unifdef.c:420:
+{ Idrop, Idrop, Fdrop, Fdrop, Fdrop, Dfalse,Dfalse,Dfalse,Delse, Dendif,
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#464: FILE: scripts/unifdef.c:420:
+{ Idrop, Idrop, Fdrop, Fdrop, Fdrop, Dfalse,Dfalse,Dfalse,Delse, Dendif,
                                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: scripts/unifdef.c:421:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Dfalse,Dfalse,Dfalse,Delse, Eioccc,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#465: FILE: scripts/unifdef.c:421:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Dfalse,Dfalse,Dfalse,Delse, Eioccc,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#465: FILE: scripts/unifdef.c:421:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Dfalse,Dfalse,Dfalse,Delse, Eioccc,
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#465: FILE: scripts/unifdef.c:421:
+  Idrop, Idrop, Fdrop, Fdrop, Fdrop, Dfalse,Dfalse,Dfalse,Delse, Eioccc,
                                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: scripts/unifdef.c:422:
+  drop,  Eeof }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#468: FILE: scripts/unifdef.c:424:
+/*TRUEI  FALSEI IF     TRUE   FALSE  ELIF   ELTRUE ELFALSE ELSE  ENDIF
+  TRUEI  FALSEI IF     TRUE   FALSE  ELIF   ELTRUE ELFALSE ELSE  ENDIF (DODGY)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#469: FILE: scripts/unifdef.c:425:
+  PLAIN  EOF */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#482: FILE: scripts/unifdef.c:438:
+}
+static void

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#487: FILE: scripts/unifdef.c:443:
+	ignoring[depth] = ignoring[depth-1];
 	                                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#489: FILE: scripts/unifdef.c:445:
+}
+static void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#494: FILE: scripts/unifdef.c:450:
+}
+static void

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#497: FILE: scripts/unifdef.c:453:
+	strlcpy(keyword, replacement, tline + sizeof(tline) - keyword);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#500: FILE: scripts/unifdef.c:456:
+}
+static void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#508: FILE: scripts/unifdef.c:464:
+}
+static void

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#515: FILE: scripts/unifdef.c:471:
+}
+static void

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process', this function's name, in a string
#554: FILE: scripts/unifdef.c:510:
+		debug("process %s -> %s depth %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: scripts/unifdef.c:511:
+		debug("process %s -> %s depth %d",
+		    linetype_name[lineval],

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fgets"
#574: FILE: scripts/unifdef.c:530:
+	if (fgets(tline, MAXLINE, input) == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#580: FILE: scripts/unifdef.c:536:
+		if (*cp == '#') {
[...]
+		} else if (*cp != '\0')
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#593: FILE: scripts/unifdef.c:549:
+		if (strlcmp("ifdef", keyword, kwlen) == 0 ||
[...]
+		} else if (strlcmp("if", keyword, kwlen) == 0)
[...]
+		else if (strlcmp("elif", keyword, kwlen) == 0)
[...]
+		else if (strlcmp("else", keyword, kwlen) == 0)
[...]
+		else if (strlcmp("endif", keyword, kwlen) == 0)
[...]
+		else {
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#596: FILE: scripts/unifdef.c:552:
+			if ((cursym = findsym(cp)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#596: FILE: scripts/unifdef.c:552:
+			if ((cursym = findsym(cp)) < 0)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#598: FILE: scripts/unifdef.c:554:
+			else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value[cursym]"
#601: FILE: scripts/unifdef.c:557:
+				if (value[cursym] == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#617: FILE: scripts/unifdef.c:573:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: scripts/unifdef.c:600:
+	debug("parser %s comment %s line",
+	    comment_name[incomment], linestate_name[linestate]);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#645: FILE: scripts/unifdef.c:601:
+	return (retval);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#689: FILE: scripts/unifdef.c:645:
+		int (*fn)(int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#689: FILE: scripts/unifdef.c:645:
+		int (*fn)(int, int);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#734: FILE: scripts/unifdef.c:690:
+		cp = skipcomment(cp+7);
 		                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "value[sym]"
#742: FILE: scripts/unifdef.c:698:
+		*valp = (value[sym] != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#753: FILE: scripts/unifdef.c:709:
+		if (value[sym] == NULL)
[...]
+		else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value[sym]"
#753: FILE: scripts/unifdef.c:709:
+		if (value[sym] == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#755: FILE: scripts/unifdef.c:711:
+		else {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#764: FILE: scripts/unifdef.c:720:
+		return (LT_IF);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#769: FILE: scripts/unifdef.c:725:
+	return (*valp ? LT_TRUE : LT_FALSE);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#784: FILE: scripts/unifdef.c:740:
+	if (ops->inner(ops+1, valp, &cp) == LT_IF)
 	                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op->str"
#788: FILE: scripts/unifdef.c:744:
+		for (op = ops->op; op->str != NULL; op++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op->str"
#791: FILE: scripts/unifdef.c:747:
+		if (op->str == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#795: FILE: scripts/unifdef.c:751:
+		if (ops->inner(ops+1, &val, &cp) == LT_IF)
 		                  ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#802: FILE: scripts/unifdef.c:758:
+	return (*valp ? LT_TRUE : LT_FALSE);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#820: FILE: scripts/unifdef.c:776:
+	return (keepthis ? LT_IF : ret);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#837: FILE: scripts/unifdef.c:793:
+		return (cp);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#843: FILE: scripts/unifdef.c:799:
+		else switch (incomment) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#845: FILE: scripts/unifdef.c:801:
+			if (strncmp(cp, "/\\\n", 3) == 0) {
[...]
+			} else if (strncmp(cp, "/*", 2) == 0) {
[...]
+			} else if (strncmp(cp, "//", 2) == 0) {
[...]
+			} else if (strncmp(cp, "\'", 1) == 0) {
[...]
+			} else if (strncmp(cp, "\"", 1) == 0) {
[...]
+			} else if (strncmp(cp, "\n", 1) == 0) {
[...]
+			} else if (strchr(" \t", *cp) != NULL) {
[...]
+			} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strchr"
#865: FILE: scripts/unifdef.c:821:
+			} else if (strchr(" \t", *cp) != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#867: FILE: scripts/unifdef.c:823:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#879: FILE: scripts/unifdef.c:835:
+			if ((incomment == CHAR_LITERAL && cp[0] == '\'') ||
[...]
+			} else if (cp[0] == '\\') {
[...]
+			} else if (strncmp(cp, "\n", 1) == 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#893: FILE: scripts/unifdef.c:849:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#897: FILE: scripts/unifdef.c:853:
+			if (strncmp(cp, "*\\\n", 3) == 0) {
[...]
+			} else if (strncmp(cp, "*/", 2) == 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#903: FILE: scripts/unifdef.c:859:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#919: FILE: scripts/unifdef.c:875:
+			if (*cp == '/') {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#922: FILE: scripts/unifdef.c:878:
+			} else

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#939: FILE: scripts/unifdef.c:895:
+	return (cp);

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#943: FILE: scripts/unifdef.c:899:
+ * Look for the symbol in the symbol table. If is is found, we return

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#956: FILE: scripts/unifdef.c:912:
+		printf("%.*s\n", (int)(cp-str), str);
 		                         ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#958: FILE: scripts/unifdef.c:914:
+		return (0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#961: FILE: scripts/unifdef.c:917:
+		if (strlcmp(symname[symind], str, cp-str) == 0) {
 		                                    ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'findsym', this function's name, in a string
#962: FILE: scripts/unifdef.c:918:
+			debug("findsym %s %s", symname[symind],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: scripts/unifdef.c:919:
+			debug("findsym %s %s", symname[symind],
+			    value[symind] ? value[symind] : "");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#964: FILE: scripts/unifdef.c:920:
+			return (symind);

CHECK:BRACES: braces {} should be used on all arms of this statement
#989: FILE: scripts/unifdef.c:945:
+		if (*val == '=') {
[...]
+		} else if (*val == '\0')
[...]
+		else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#990: FILE: scripts/unifdef.c:946:
+			value[symind] = val+1;
 			                   ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1013: FILE: scripts/unifdef.c:969:
+			return ((unsigned char)*s - (unsigned char)*t);
+		else

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1015: FILE: scripts/unifdef.c:971:
+	return ((unsigned char)*s);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: scripts/unifdef.c:996:
+		warnx("%s: %d: %s (#if line %d depth %d)",
+		    filename, linenum, msg, stifline[depth], depth);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035345.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 67 warnings, 78 checks, 998 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035345.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
