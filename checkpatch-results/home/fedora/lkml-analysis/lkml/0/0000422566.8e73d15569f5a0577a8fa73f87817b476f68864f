WARNING:REPEATED_WORD: Possible repeated word: 'very'
#33: 
> A lot of it can be tidied up by very very few changes that can be done

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
* With dev_printk(), etc. you *can* define attribute names in the fmt string,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: drivers/misc/dev_dummy.c:1:
+#define EVL_FACILITY_NAME dev_dummy

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#150: FILE: drivers/misc/dev_dummy.c:15:
+};
+struct dummy_dev dummy, dope;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: drivers/misc/dev_dummy.c:32:
+static void init_dummy_dev(struct dummy_dev *dd, const char *name,
+	const char *bus_id, int iq, int nthings)

CHECK:SPACING: No space is necessary after a cast
#169: FILE: drivers/misc/dev_dummy.c:34:
+	(void) strcpy(&dd->name[0], name);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: drivers/misc/dev_dummy.c:36:
+	snprintf(&dd->dev.name[0], DEVICE_NAME_SIZE,
+		"dummy dev %s with %d IQ and %d things",

CHECK:SPACING: No space is necessary after a cast
#173: FILE: drivers/misc/dev_dummy.c:38:
+	(void) strcpy(&dd->dev.bus_id[0], bus_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/misc/dev_dummy.c:54:
+	dev_info(dummy.dev,
+"Did I mention that device {ddname}%s has iq=%d and nthings=%d?\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: drivers/misc/dev_dummy.c:57:
+	dev_err(dope.dev,
+"Device {ddname}%s has tipped over.  It now has nthings=%d things.\n",

WARNING:PREFER_DEV_LEVEL: Prefer dev_alert(... to dev_printk(KERN_ALERT, ...
#195: FILE: drivers/misc/dev_dummy.c:60:
+	dev_printk(KERN_ALERT, dummy.dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: drivers/misc/dev_dummy.c:61:
+	dev_printk(KERN_ALERT, dummy.dev,
+"Device {ddname}%s may soon explode!  Its {nthings}%d things may be in danger!\n",

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#228: FILE: include/linux/device.h:430:
+#define dev_printk(sev, dev, format, arg...) \
+	printkat(sev "{driver}%s {bus_id}%s: " format,	\
+		(dev).driver->name, (dev).bus_id, ## arg)

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#236: FILE: include/linux/device.h:436:
+	dev_printk(KERN_DEBUG, (dev), format, ## arg)

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#244: FILE: include/linux/device.h:442:
+	dev_printk(KERN_ERR, (dev), format, ## arg)

WARNING:PREFER_DEV_LEVEL: Prefer dev_info(... to dev_printk(KERN_INFO, ...
#248: FILE: include/linux/device.h:444:
+	dev_printk(KERN_INFO, (dev), format, ## arg)

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#252: FILE: include/linux/device.h:446:
+	dev_printk(KERN_WARNING, (dev), format, ## arg)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#256: FILE: include/linux/device.h:450:
+#define dev_online(dev)	\
+	dev_info((dev), "Device {status}%s: {name}%s\n", "online", (dev).name)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: include/linux/printkat.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#280: FILE: include/linux/printkat.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#281: FILE: include/linux/printkat.h:18:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/printkat.h:30:
+extern int __printkat(const char *facname, int event_type, const char *fmt,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/printkat.h:31:
+extern int __printkat(const char *facname, int event_type, const char *fmt,
+	...);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#299: FILE: include/linux/printkat.h:36:
+#define printkat(fmt, ...) __printkat((const char*)0, 0, fmt, ##__VA_ARGS__)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/printkat.h:58:
+extern int evl_gen_event_type(const char *s1, const char *s2, const char *s3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: include/linux/printkat.h:66:
+   int line;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: include/linux/printkat.h:67:
+   char function[64 - sizeof(int)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: include/linux/printkat.h:68:
+   char file[128];$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#334: FILE: include/linux/printkat.h:71:
+#define _LOG_POS { __LINE__, __FUNCTION__, __FILE__ }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: include/linux/printkat.h:80:
+   char format[128+64];$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#343: FILE: include/linux/printkat.h:80:
+   char format[128+64];
                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: include/linux/printkat.h:81:
+   char facility[64];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: include/linux/printkat.h:82:
+   struct log_position pos;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#348: FILE: include/linux/printkat.h:85:
+#define printkat(fmt, ...) \
+({ \
+   static struct log_info __attribute__((section(".log"),unused)) ___ \
+      = { fmt, __stringify(EVL_FACILITY_NAME), _LOG_POS }; \
+   __printkat(__stringify(EVL_FACILITY_NAME), \
+      evl_gen_event_type(__FILE__, __FUNCTION__, fmt), \
+      fmt, ##__VA_ARGS__); \
+})

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: include/linux/printkat.h:87:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: include/linux/printkat.h:87:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \
                                                         ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".log") over __attribute__((section(".log")))
#350: FILE: include/linux/printkat.h:87:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#351: FILE: include/linux/printkat.h:88:
+   static struct log_info __attribute__((section(".log"),unused)) ___ \
+      = { fmt, __stringify(EVL_FACILITY_NAME), _LOG_POS }; \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: include/linux/printkat.h:88:
+      = { fmt, __stringify(EVL_FACILITY_NAME), _LOG_POS }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: include/linux/printkat.h:89:
+   __printkat(__stringify(EVL_FACILITY_NAME), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: include/linux/printkat.h:90:
+      evl_gen_event_type(__FILE__, __FUNCTION__, fmt), \$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#353: FILE: include/linux/printkat.h:90:
+      evl_gen_event_type(__FILE__, __FUNCTION__, fmt), \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: include/linux/printkat.h:91:
+      fmt, ##__VA_ARGS__); \$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: kernel/printk.c:38:
+extern int evl_printkat(const char *facname, int evtype, char *recbuf,
+	va_list args);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#377: FILE: kernel/printk.c:40:
+#define POSIX_LOG_ENTRY_MAXLEN (8*1024)
                                  ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#387: FILE: kernel/printk.c:447:
+int vprintk(const char *fmt, va_list args);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#435: FILE: kernel/printk.c:761:
+		if (!lcb) {
+			goto done;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#438: FILE: kernel/printk.c:764:
+		rcb = strstr(lcb+2, "}%");
 		                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#439: FILE: kernel/printk.c:765:
+		if (!rcb) {
+			goto done;
+		}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#443: FILE: kernel/printk.c:769:
+		c = lcb+1;
 		       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#444: FILE: kernel/printk.c:770:
+		if (*c != '_' && !isalpha(*c)) {
+			goto scan_again;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#448: FILE: kernel/printk.c:774:
+			if (*c != '_' && !isalnum(*c)) {
+				goto scan_again;
+			}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#452: FILE: kernel/printk.c:778:
+		copy_len = min(lcb - copy_this, bufsz-(dlen+1));
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#452: FILE: kernel/printk.c:778:
+		copy_len = min(lcb - copy_this, bufsz-(dlen+1));
 		                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#455: FILE: kernel/printk.c:781:
+		copy_this = rcb+1;
 		               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#457: FILE: kernel/printk.c:783:
+		scan_this = rcb+2;
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#460: FILE: kernel/printk.c:786:
+	copy_len = bufsz-(dlen+1);
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#460: FILE: kernel/printk.c:786:
+	copy_len = bufsz-(dlen+1);
 	                      ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#463: FILE: kernel/printk.c:789:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#481: FILE: kernel/printk.c:807:
+	(void) vprintk(printkat_buf, args);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 29 warnings, 27 checks, 369 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
