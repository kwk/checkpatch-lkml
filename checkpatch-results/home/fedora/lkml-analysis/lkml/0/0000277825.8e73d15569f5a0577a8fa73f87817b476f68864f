WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#35: FILE: drivers/md/Kconfig:183:
+config DM_SNAPSHOT
+       tristate "Snapshot target (EXPERIMENTAL)"
+       depends on BLK_DEV_DM && EXPERIMENTAL
+       ---help---
+         Allow volume managers to take writeable snapshots of a device.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: drivers/md/dm-exception-store.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#85: FILE: drivers/md/dm-exception-store.c:22:
+ *---------------------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#122: FILE: drivers/md/dm-exception-store.c:59:
+	uint32_t magic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#128: FILE: drivers/md/dm-exception-store.c:65:
+	uint32_t valid;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#134: FILE: drivers/md/dm-exception-store.c:71:
+	uint32_t version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#137: FILE: drivers/md/dm-exception-store.c:74:
+	uint32_t chunk_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#141: FILE: drivers/md/dm-exception-store.c:78:
+	uint64_t old_chunk;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#142: FILE: drivers/md/dm-exception-store.c:79:
+	uint64_t new_chunk;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#146: FILE: drivers/md/dm-exception-store.c:83:
+	void (*callback)(void *, int success);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#157: FILE: drivers/md/dm-exception-store.c:94:
+	uint32_t chunk_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#158: FILE: drivers/md/dm-exception-store.c:95:
+	uint32_t exceptions_per_area;

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#162: FILE: drivers/md/dm-exception-store.c:99:
+	 * need for large chunk sizes, so it wont hurt to have a
 	                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#171: FILE: drivers/md/dm-exception-store.c:108:
+	uint32_t current_area;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#176: FILE: drivers/md/dm-exception-store.c:113:
+	uint32_t next_free;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#182: FILE: drivers/md/dm-exception-store.c:119:
+	uint32_t current_committed;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#185: FILE: drivers/md/dm-exception-store.c:122:
+	uint32_t callback_count;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#239: FILE: drivers/md/dm-exception-store.c:176:
+	uint32_t chunk;

CHECK:SPACING: No space is necessary after a cast
#267: FILE: drivers/md/dm-exception-store.c:204:
+	dh = (struct disk_header *) ps->area;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#292: FILE: drivers/md/dm-exception-store.c:229:
+	dh = (struct disk_header *) ps->area;

CHECK:SPACING: No space is necessary after a cast
#309: FILE: drivers/md/dm-exception-store.c:246:
+	return ((struct disk_exception *) ps->area) + index;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#313: FILE: drivers/md/dm-exception-store.c:250:
+			  uint32_t index, struct disk_exception *result)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#329: FILE: drivers/md/dm-exception-store.c:266:
+			   uint32_t index, struct disk_exception *de)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#395: FILE: drivers/md/dm-exception-store.c:332:
+	uint32_t area;

CHECK:SPACING: No space is necessary after a cast
#417: FILE: drivers/md/dm-exception-store.c:354:
+	return (struct pstore *) store->context;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#495: FILE: drivers/md/dm-exception-store.c:432:
+	uint32_t stride;

WARNING:SPACING: Unnecessary space before function pointer arguments
#518: FILE: drivers/md/dm-exception-store.c:455:
+			      void (*callback) (void *, int success),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ps->current_committed == ps->exceptions_per_area'
#546: FILE: drivers/md/dm-exception-store.c:483:
+	if (atomic_dec_and_test(&ps->pending_count) ||
+	    (ps->current_committed == ps->exceptions_per_area)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INDENTED_LABEL: labels should not be indented
#632: FILE: drivers/md/dm-exception-store.c:569:
+      bad:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#645: FILE: drivers/md/dm-exception-store.c:582:
+ *---------------------------------------------------------------*/

CHECK:SPACING: No space is necessary after a cast
#662: FILE: drivers/md/dm-exception-store.c:599:
+	struct transient_c *tc = (struct transient_c *) store->context;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: drivers/md/dm-exception-store.c:612:
+static void transient_commit(struct exception_store *store,
+		      struct exception *e,

WARNING:SPACING: Unnecessary space before function pointer arguments
#676: FILE: drivers/md/dm-exception-store.c:613:
+		      void (*callback) (void *, int success),

CHECK:SPACING: No space is necessary after a cast
#686: FILE: drivers/md/dm-exception-store.c:623:
+	*numerator = ((struct transient_c *) store->context)->next_free;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tc)...) over kmalloc(sizeof(struct transient_c)...)
#703: FILE: drivers/md/dm-exception-store.c:640:
+	tc = kmalloc(sizeof(struct transient_c), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#715: FILE: drivers/md/dm-snap.c:1:
+/*

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#816: FILE: drivers/md/dm-snap.c:102:
+	_origins = kmalloc(ORIGIN_HASH_SIZE * sizeof(struct list_head),
+			   GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#846: FILE: drivers/md/dm-snap.c:132:
+	list_for_each_entry (o, ol, hash_list)

WARNING:LINE_SPACING: Missing a blank line after declarations
#856: FILE: drivers/md/dm-snap.c:142:
+	struct list_head *sl = &_origins[origin_hash(o->bdev)];
+	list_add_tail(&o->hash_list, sl);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#936: FILE: drivers/md/dm-snap.c:222:
+		list_for_each_entry_safe (ex, next, slot, hash_list)

WARNING:LINE_SPACING: Missing a blank line after declarations
#951: FILE: drivers/md/dm-snap.c:237:
+	struct list_head *l = &eh->table[exception_hash(eh, e->old_chunk)];
+	list_add(&e->hash_list, l);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#970: FILE: drivers/md/dm-snap.c:256:
+	list_for_each_entry (e, slot, hash_list)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1024: FILE: drivers/md/dm-snap.c:310:
+	unsigned long mem = 2 * 1024 * 1024;
+	mem /= sizeof(struct list_head);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1118: FILE: drivers/md/dm-snap.c:404:
+	chunk_size = simple_strtoul(argv[3], &value, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#1119: FILE: drivers/md/dm-snap.c:405:
+	if (chunk_size == 0 || value == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s"
#1126: FILE: drivers/md/dm-snap.c:412:
+	if (s == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1128: FILE: drivers/md/dm-snap.c:414:
+		ti->error = "Cannot allocate snapshot context private "
+		    "structure";

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1244: FILE: drivers/md/dm-snap.c:530:
+	struct dm_snapshot *s = (struct dm_snapshot *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#1369: FILE: drivers/md/dm-snap.c:655:
+	struct pending_exception *pe = (struct pending_exception *) context;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1370: FILE: drivers/md/dm-snap.c:656:
+	struct pending_exception *pe = (struct pending_exception *) context;
+	pending_complete(pe, success);

CHECK:SPACING: No space is necessary after a cast
#1379: FILE: drivers/md/dm-snap.c:665:
+	struct pending_exception *pe = (struct pending_exception *) context;

CHECK:SPACING: No space is necessary after a cast
#1485: FILE: drivers/md/dm-snap.c:771:
+	struct dm_snapshot *s = (struct dm_snapshot *) ti->private;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1502: FILE: drivers/md/dm-snap.c:788:
+	if (bio_rw(bio) == WRITE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1504: FILE: drivers/md/dm-snap.c:790:
+		 * to copy an exception */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1526: FILE: drivers/md/dm-snap.c:812:
+				if (!pe->started) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1531: FILE: drivers/md/dm-snap.c:817:
+				} else

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#1548: FILE: drivers/md/dm-snap.c:834:
+		/* See if it it has been remapped */

CHECK:SPACING: No space is necessary after a cast
#1563: FILE: drivers/md/dm-snap.c:849:
+	struct dm_snapshot *s = (struct dm_snapshot *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#1580: FILE: drivers/md/dm-snap.c:866:
+	struct dm_snapshot *snap = (struct dm_snapshot *) ti->private;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1586: FILE: drivers/md/dm-snap.c:872:
+		if (!snap->valid)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1588: FILE: drivers/md/dm-snap.c:874:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1589: FILE: drivers/md/dm-snap.c:875:
+			if (snap->store.fraction_full) {
[...]
+			else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1591: FILE: drivers/md/dm-snap.c:877:
+				sector_t numerator, denominator;
+				snap->store.fraction_full(&snap->store,

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1598: FILE: drivers/md/dm-snap.c:884:
+			}
+			else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1621: FILE: drivers/md/dm-snap.c:907:
+ *---------------------------------------------------------------*/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1645: FILE: drivers/md/dm-snap.c:931:
+	list_for_each_entry (snap, snapshots, list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1646: FILE: drivers/md/dm-snap.c:932:
+	list_for_each_entry (snap, snapshots, list) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1693: FILE: drivers/md/dm-snap.c:979:
+			if (!pe->started) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1697: FILE: drivers/md/dm-snap.c:983:
+			} else

CHECK:SPACING: No space is necessary after a cast
#1758: FILE: drivers/md/dm-snap.c:1044:
+	struct dm_dev *dev = (struct dm_dev *) ti->private;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1759: FILE: drivers/md/dm-snap.c:1045:
+	struct dm_dev *dev = (struct dm_dev *) ti->private;
+	dm_put_device(ti, dev);

CHECK:SPACING: No space is necessary after a cast
#1765: FILE: drivers/md/dm-snap.c:1051:
+	struct dm_dev *dev = (struct dm_dev *) ti->private;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1766: FILE: drivers/md/dm-snap.c:1052:
+	struct dm_dev *dev = (struct dm_dev *) ti->private;
+	bio->bi_bdev = dev->bdev;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1772: FILE: drivers/md/dm-snap.c:1058:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#1772: FILE: drivers/md/dm-snap.c:1058:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#1772: FILE: drivers/md/dm-snap.c:1058:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#1772: FILE: drivers/md/dm-snap.c:1058:
+#define min_not_zero(l, r) (l == 0) ? r : ((r == 0) ? l : min(l, r))

CHECK:SPACING: No space is necessary after a cast
#1780: FILE: drivers/md/dm-snap.c:1066:
+	struct dm_dev *dev = (struct dm_dev *) ti->private;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1788: FILE: drivers/md/dm-snap.c:1074:
+		list_for_each_entry (snap, &o->snapshots, list)

CHECK:SPACING: No space is necessary after a cast
#1798: FILE: drivers/md/dm-snap.c:1084:
+	struct dm_dev *dev = (struct dm_dev *) ti->private;

WARNING:INDENTED_LABEL: labels should not be indented
#1890: FILE: drivers/md/dm-snap.c:1176:
+      bad5:

WARNING:INDENTED_LABEL: labels should not be indented
#1892: FILE: drivers/md/dm-snap.c:1178:
+      bad4:

WARNING:INDENTED_LABEL: labels should not be indented
#1894: FILE: drivers/md/dm-snap.c:1180:
+      bad3:

WARNING:INDENTED_LABEL: labels should not be indented
#1896: FILE: drivers/md/dm-snap.c:1182:
+      bad2:

WARNING:INDENTED_LABEL: labels should not be indented
#1898: FILE: drivers/md/dm-snap.c:1184:
+      bad1:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1931: FILE: drivers/md/dm-snap.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1946: FILE: drivers/md/dm-snap.h:16:
+	uint32_t hash_mask;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1955: FILE: drivers/md/dm-snap.h:25:
+typedef sector_t chunk_t;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1973: FILE: drivers/md/dm-snap.h:43:
+struct exception_store {
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#1977: FILE: drivers/md/dm-snap.h:47:
+	void (*destroy) (struct exception_store *store);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1983: FILE: drivers/md/dm-snap.h:53:
+	int (*read_metadata) (struct exception_store *store);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1988: FILE: drivers/md/dm-snap.h:58:
+	int (*prepare_exception) (struct exception_store *store,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1994: FILE: drivers/md/dm-snap.h:64:
+	void (*commit_exception) (struct exception_store *store,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1996: FILE: drivers/md/dm-snap.h:66:
+				  void (*callback) (void *, int success),

WARNING:SPACING: Unnecessary space before function pointer arguments
#2002: FILE: drivers/md/dm-snap.h:72:
+	void (*drop_snapshot) (struct exception_store *store);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2007: FILE: drivers/md/dm-snap.h:77:
+	void (*fraction_full) (struct exception_store *store,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 42 warnings, 52 checks, 2047 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277825.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
