WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#74: FILE: drivers/block/ll_rw_blk.c:274:
+EXPORT_SYMBOL(blk_queue_ordered);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->ordered == QUEUE_ORDERED_NONE'
#102: FILE: drivers/block/ll_rw_blk.c:2039:
+	if (barrier && (q->ordered == QUEUE_ORDERED_NONE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#155: FILE: drivers/ide/ide-io.c:110:
+	if (!post) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#158: FILE: drivers/ide/ide-io.c:113:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#182: FILE: drivers/ide/ide-io.c:169:
+		if (blk_barrier_rq(rq))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: drivers/ide/ide-io.c:171:
+		else {

WARNING:TYPO_SPELLING: 'cacheing' may be misspelled - perhaps 'caching'?
#213: FILE: drivers/ide/ide-io.c:318:
+			printk("%s: cache flushing failed. disable write back cacheing for journalled file systems\n", drive->name);
 			                                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#213: FILE: drivers/ide/ide-io.c:318:
+			printk("%s: cache flushing failed. disable write back cacheing for journalled file systems\n", drive->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#213: FILE: drivers/ide/ide-io.c:318:
+			printk("%s: cache flushing failed. disable write back cacheing for journalled file systems\n", drive->name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rw == WRITE'
#313: FILE: fs/buffer.c:2673:
+	if (test_bit(BH_Ordered, &bh->b_state) && (rw == WRITE))

CHECK:BIT_MACRO: Prefer using the BIT macro
#347: FILE: include/linux/blkdev.h:223:
+#define REQ_BAR_PREFLUSH	(1 << __REQ_BAR_PREFLUSH)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#348: FILE: include/linux/blkdev.h:224:
+#define REQ_BAR_POSTFLUSH	(1 << __REQ_BAR_POSTFLUSH)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: include/linux/blkdev.h:581:
+extern void blk_queue_ordered(request_queue_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#390: FILE: include/linux/blkdev.h:581:
+extern void blk_queue_ordered(request_queue_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#390: FILE: include/linux/blkdev.h:581:
+extern void blk_queue_ordered(request_queue_t *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000330516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 6 warnings, 9 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000330516.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
