CHECK:SPACING: No space is necessary after a cast
#109: FILE: mm/slab.c:525:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#109: FILE: mm/slab.c:525:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#109: FILE: mm/slab.c:525:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#109: FILE: mm/slab.c:525:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);
 	                                                ^

CHECK:SPACING: No space is necessary after a cast
#118: FILE: mm/slab.c:532:
+		return (unsigned long*) (objp+cachep->buffer_size-2*BYTES_PER_WORD);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#118: FILE: mm/slab.c:532:
+		return (unsigned long*) (objp+cachep->buffer_size-2*BYTES_PER_WORD);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#118: FILE: mm/slab.c:532:
+		return (unsigned long*) (objp+cachep->buffer_size-2*BYTES_PER_WORD);
 		                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#118: FILE: mm/slab.c:532:
+		return (unsigned long*) (objp+cachep->buffer_size-2*BYTES_PER_WORD);
 		                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#118: FILE: mm/slab.c:532:
+		return (unsigned long*) (objp+cachep->buffer_size-2*BYTES_PER_WORD);
 		                                                   ^

CHECK:SPACING: No space is necessary after a cast
#119: FILE: mm/slab.c:533:
+	return (unsigned long*) (objp+cachep->buffer_size-BYTES_PER_WORD);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#119: FILE: mm/slab.c:533:
+	return (unsigned long*) (objp+cachep->buffer_size-BYTES_PER_WORD);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: mm/slab.c:533:
+	return (unsigned long*) (objp+cachep->buffer_size-BYTES_PER_WORD);
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#119: FILE: mm/slab.c:533:
+	return (unsigned long*) (objp+cachep->buffer_size-BYTES_PER_WORD);
 	                                                 ^

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#126: FILE: mm/slab.c:539:
+	return (void**)(objp+cachep->buffer_size-BYTES_PER_WORD);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: mm/slab.c:539:
+	return (void**)(objp+cachep->buffer_size-BYTES_PER_WORD);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#126: FILE: mm/slab.c:539:
+	return (void**)(objp+cachep->buffer_size-BYTES_PER_WORD);
 	                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#134: FILE: mm/slab.c:545:
+#define obj_size(cachep)		(cachep->buffer_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: mm/slab.c:1064:
+	cache_estimate(0, cache_cache.buffer_size, cache_line_size(), 0,
 				&left_over, &cache_cache.num);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#173: FILE: mm/slab.c:1270:
+	addr = (unsigned long *)&((char*)addr)[obj_offset(cachep)];

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: mm/slab.c:1301:
+	int size = obj_size(cachep);
+	addr = &((char*)addr)[obj_offset(cachep)];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#184: FILE: mm/slab.c:1301:
+	addr = &((char*)addr)[obj_offset(cachep)];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#194: FILE: mm/slab.c:1338:
+	realobj = (char*)objp+obj_offset(cachep);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#194: FILE: mm/slab.c:1338:
+	realobj = (char*)objp+obj_offset(cachep);
 	                     ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#205: FILE: mm/slab.c:1355:
+	realobj = (char*)objp+obj_offset(cachep);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#205: FILE: mm/slab.c:1355:
+	realobj = (char*)objp+obj_offset(cachep);
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#215: FILE: mm/slab.c:1391:
+		objnr = (objp-slabp->s_mem)/cachep->buffer_size;
 		             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#215: FILE: mm/slab.c:1391:
+		objnr = (objp-slabp->s_mem)/cachep->buffer_size;
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: mm/slab.c:1393:
+			objp = slabp->s_mem+(objnr-1)*cachep->buffer_size;
 			                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#219: FILE: mm/slab.c:1393:
+			objp = slabp->s_mem+(objnr-1)*cachep->buffer_size;
 			                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#219: FILE: mm/slab.c:1393:
+			objp = slabp->s_mem+(objnr-1)*cachep->buffer_size;
 			                             ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#220: FILE: mm/slab.c:1394:
+			realobj = (char*)objp+obj_offset(cachep);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#220: FILE: mm/slab.c:1394:
+			realobj = (char*)objp+obj_offset(cachep);
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: mm/slab.c:1400:
+			objp = slabp->s_mem+(objnr+1)*cachep->buffer_size;
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: mm/slab.c:1400:
+			objp = slabp->s_mem+(objnr+1)*cachep->buffer_size;
 			                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#228: FILE: mm/slab.c:1400:
+			objp = slabp->s_mem+(objnr+1)*cachep->buffer_size;
 			                             ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#229: FILE: mm/slab.c:1401:
+			realobj = (char*)objp+obj_offset(cachep);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#229: FILE: mm/slab.c:1401:
+			realobj = (char*)objp+obj_offset(cachep);
 			                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#244: FILE: mm/slab.c:1425:
+			if ((cachep->buffer_size%PAGE_SIZE)==0 && OFF_SLAB(cachep))
 			                        ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#244: FILE: mm/slab.c:1425:
+			if ((cachep->buffer_size%PAGE_SIZE)==0 && OFF_SLAB(cachep))
 			                                   ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#245: FILE: mm/slab.c:1426:
+				kernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE,1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#245: FILE: mm/slab.c:1426:
+				kernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE,1);
 				                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: mm/slab.c:1426:
+				kernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE,1);
 				                                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: mm/slab.c:1442:
+			(cachep->dtor)(objp+obj_offset(cachep), cachep, 0);
 			                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#254: FILE: mm/slab.c:1442:
+			(cachep->dtor)(objp+obj_offset(cachep), cachep, 0);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#261: FILE: mm/slab.c:1448:
+			void* objp = slabp->s_mem+cachep->buffer_size*i;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#261: FILE: mm/slab.c:1448:
+			void* objp = slabp->s_mem+cachep->buffer_size*i;
 			                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#261: FILE: mm/slab.c:1448:
+			void* objp = slabp->s_mem+cachep->buffer_size*i;
 			                                             ^

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#306: FILE: mm/slab.c:1665:
+	if (size >= malloc_sizes[INDEX_L3+1].cs_size && cachep->obj_size > cache_line_size() && size < PAGE_SIZE) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#306: FILE: mm/slab.c:1665:
+	if (size >= malloc_sizes[INDEX_L3+1].cs_size && cachep->obj_size > cache_line_size() && size < PAGE_SIZE) {
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#325: FILE: mm/slab.c:2098:
+		void *objp = slabp->s_mem+cachep->buffer_size*i;
 		                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#325: FILE: mm/slab.c:2098:
+		void *objp = slabp->s_mem+cachep->buffer_size*i;
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#334: FILE: mm/slab.c:2116:
+			cachep->ctor(objp+obj_offset(cachep), cachep, ctor_flags);
 			                 ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#344: FILE: mm/slab.c:2126:
+		if ((cachep->buffer_size % PAGE_SIZE) == 0 && OFF_SLAB(cachep) && cachep->flags & SLAB_POISON)

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: mm/slab.c:2127:
+^I       ^I^Ikernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: mm/slab.c:2127:
+^I       ^I^Ikernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE, 0);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#345: FILE: mm/slab.c:2127:
+	       		kernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE, 0);
 	       		                                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#363: FILE: mm/slab.c:2311:
+	objnr = (objp-slabp->s_mem)/cachep->buffer_size;
 	             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#363: FILE: mm/slab.c:2311:
+	objnr = (objp-slabp->s_mem)/cachep->buffer_size;
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: mm/slab.c:2314:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->buffer_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#367: FILE: mm/slab.c:2314:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->buffer_size);
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#375: FILE: mm/slab.c:2321:
+		cachep->ctor(objp+obj_offset(cachep),
 		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#383: FILE: mm/slab.c:2328:
+		cachep->dtor(objp+obj_offset(cachep), cachep, 0);
 		                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: mm/slab.c:2334:
+^I       ^I^Ikernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE, 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: mm/slab.c:2334:
+^I       ^I^Ikernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE, 0);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#391: FILE: mm/slab.c:2334:
+	       		kernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE, 0);
 	       		                                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#400: FILE: mm/slab.c:2434:
+				slabp->free*cachep->buffer_size;
 				           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#411: FILE: mm/slab.c:2494:
+			kernel_map_pages(virt_to_page(objp), cachep->buffer_size/PAGE_SIZE, 1);
 			                                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: mm/slab.c:2601:
+ ^Iobj =  slabp->s_mem + slabp->free*cachep->buffer_size;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#429: FILE: mm/slab.c:2601:
+ ^Iobj =  slabp->s_mem + slabp->free*cachep->buffer_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: mm/slab.c:2601:
+ ^Iobj =  slabp->s_mem + slabp->free*cachep->buffer_size;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#429: FILE: mm/slab.c:2601:
+ 	obj =  slabp->s_mem + slabp->free*cachep->buffer_size;
  	                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120624.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 9 warnings, 46 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120624.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
