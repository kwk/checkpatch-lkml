WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Respin of the dynamic ticks patch for i386 by Tony Lindgen and Tuukka Tikkanen 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: arch/i386/Kconfig:484:
+^I  run properly. Symptoms include slow system boot, and time running $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: arch/i386/Kconfig:490:
+^I  either by passing dyntick=noapic command line option, or via $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#155: FILE: arch/i386/kernel/apic.c:963:
 static void __devinit setup_APIC_timer(unsigned int clocks)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#184: FILE: arch/i386/kernel/dyn-tick.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#185: FILE: arch/i386/kernel/dyn-tick.c:2:
+ * linux/arch/i386/kernel/dyn-tick.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: arch/i386/kernel/dyn-tick.c:58:
+static irqreturn_t dyn_tick_timer_interrupt(int irq, void *dev_id,
+				     struct pt_regs *regs)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#244: FILE: arch/i386/kernel/dyn-tick.c:61:
+	volatile unsigned long long now;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#277: FILE: arch/i386/kernel/dyn-tick.c:94:
+	printk(KERN_INFO "dyn-tick: Maximum ticks to skip limited to %i\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#298: FILE: arch/i386/kernel/dyn-tick.c:115:
+		printk(KERN_INFO "dyn-tick: Cannot use local APIC\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: arch/i386/kernel/dyn-tick.c:120:
+^Iunsigned long seq; $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#308: FILE: arch/i386/kernel/dyn-tick.c:125:
+			if (dyn_tick->skip_cpu == cpu &&
[...]
+					dyn_tick->interrupt(99, NULL, regs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: arch/i386/kernel/dyn-tick.c:126:
+			if (dyn_tick->skip_cpu == cpu &&
+				dyn_tick->skip > DYN_TICK_MIN_SKIP)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#328: FILE: arch/i386/kernel/dyn-tick.c:145:
+		printk(KERN_INFO "dyn-tick: Found suitable timer: %s\n",

CHECK:BRACES: Unbalanced braces around else statement
#330: FILE: arch/i386/kernel/dyn-tick.c:147:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#331: FILE: arch/i386/kernel/dyn-tick.c:148:
+		printk(KERN_ERR "dyn-tick: Cannot use timer %s\n",

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#443: FILE: arch/i386/kernel/timers/timer_pit.c:159:
+	extern spinlock_t i8253_lock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#460: FILE: arch/i386/kernel/timers/timer_pit.c:176:
+	extern spinlock_t i8253_lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#608: FILE: include/asm-i386/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#609: FILE: include/asm-i386/dyn-tick.h:2:
+ * linux/include/asm-i386/dyn-tick.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#626: FILE: include/asm-i386/dyn-tick.h:19:
+extern int dyn_tick_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#627: FILE: include/asm-i386/dyn-tick.h:20:
+extern void disable_pit_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#628: FILE: include/asm-i386/dyn-tick.h:21:
+extern void reprogram_pit_timer(int jiffies_to_skip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#629: FILE: include/asm-i386/dyn-tick.h:22:
+extern void replace_timer_interrupt(void *new_handler);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#630: FILE: include/asm-i386/dyn-tick.h:23:
+extern void set_dyn_tick_max_skip(u32 apic_timer_val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#631: FILE: include/asm-i386/dyn-tick.h:24:
+extern void setup_dyn_tick_use_apic(unsigned int calibration_result);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#632: FILE: include/asm-i386/dyn-tick.h:25:
+extern void wakeup_pit_or_apic(int cpu, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#633: FILE: include/asm-i386/dyn-tick.h:26:
+extern void dyn_tick_interrupt(int irq, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#634: FILE: include/asm-i386/dyn-tick.h:27:
+extern void dyn_tick_time_init(struct timer_opts *cur_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#635: FILE: include/asm-i386/dyn-tick.h:28:
+extern void do_timer_interrupt(int irq, void *dev_id, struct pt_regs *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#706: FILE: include/linux/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#707: FILE: include/linux/dyn-tick.h:2:
+ * linux/include/linux/dyn-tick.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#724: FILE: include/linux/dyn-tick.h:19:
+#define DYN_TICK_APICABLE	(1 << 5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#725: FILE: include/linux/dyn-tick.h:20:
+#define DYN_TICK_TIMER_INT	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#726: FILE: include/linux/dyn-tick.h:21:
+#define DYN_TICK_USE_APIC	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#727: FILE: include/linux/dyn-tick.h:22:
+#define DYN_TICK_SKIPPING	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#728: FILE: include/linux/dyn-tick.h:23:
+#define DYN_TICK_ENABLED	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#729: FILE: include/linux/dyn-tick.h:24:
+#define DYN_TICK_SUITABLE	(1 << 0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#740: FILE: include/linux/dyn-tick.h:35:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#740: FILE: include/linux/dyn-tick.h:35:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#740: FILE: include/linux/dyn-tick.h:35:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#744: FILE: include/linux/dyn-tick.h:39:
+	int (*arch_init) (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#745: FILE: include/linux/dyn-tick.h:40:
+	void (*arch_enable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#746: FILE: include/linux/dyn-tick.h:41:
+	void (*arch_disable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#747: FILE: include/linux/dyn-tick.h:42:
+	void (*arch_reprogram_timer) (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#751: FILE: include/linux/dyn-tick.h:46:
+extern void dyn_tick_register(struct dyn_tick_timer *new_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: include/linux/dyn-tick.h:49:
+extern unsigned long dyn_tick_reprogram_timer(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#786: FILE: kernel/dyn-tick.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#787: FILE: kernel/dyn-tick.c:2:
+ * linux/kernel/dyn-tick.c

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#810: FILE: kernel/dyn-tick.c:25:
+#include <asm/io.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#815: FILE: kernel/dyn-tick.c:30:
+#define DYN_TICK_IS_SET(x)	((dyn_tick->state & (x)) == (x))

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#852: FILE: kernel/dyn-tick.c:67:
+		if (jiffies > next)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#875: FILE: kernel/dyn-tick.c:90:
+	printk(KERN_INFO "dyn-tick: Registering dynamic tick timer v%s\n",

WARNING:MISPLACED_INIT: __initdata should be placed after dyntick_autoenable
#884: FILE: kernel/dyn-tick.c:99:
+static int __initdata dyntick_autoenable = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after dyntick_useapic
#885: FILE: kernel/dyn-tick.c:100:
+static int __initdata dyntick_useapic = 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: kernel/dyn-tick.c:104:
+ */ $

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#904: FILE: kernel/dyn-tick.c:119:
+__setup("dyntick=", dyntick_setup);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#912: FILE: kernel/dyn-tick.c:127:
+extern struct sys_device device_timer;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: kernel/dyn-tick.c:149:
+static ssize_t set_dyn_tick_enable(struct sys_device *dev, const char *buf,
+				size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#937: FILE: kernel/dyn-tick.c:152:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#964: FILE: kernel/dyn-tick.c:179:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

WARNING:LINE_SPACING: Missing a blank line after declarations
#996: FILE: kernel/dyn-tick.c:211:
+	int error = 0;
+	if ((error = sysdev_class_register(&dyn_tick_sysclass)))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#996: FILE: kernel/dyn-tick.c:211:
+	if ((error = sysdev_class_register(&dyn_tick_sysclass)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#998: FILE: kernel/dyn-tick.c:213:
+	if ((error = sysdev_register(&device_dyn_tick)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1000: FILE: kernel/dyn-tick.c:215:
+	if ((error = sysdev_create_file(&device_dyn_tick, &attr_state)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1002: FILE: kernel/dyn-tick.c:217:
+	if ((error = sysdev_create_file(&device_dyn_tick, &attr_enable)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyn_tick_cfg"
#1033: FILE: kernel/dyn-tick.c:248:
+	if (dyn_tick_cfg == NULL || dyn_tick_cfg->arch_init == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyn_tick_cfg->arch_init"
#1033: FILE: kernel/dyn-tick.c:248:
+	if (dyn_tick_cfg == NULL || dyn_tick_cfg->arch_init == NULL ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1035: FILE: kernel/dyn-tick.c:250:
+		printk(KERN_ERR "dyn-tick: No suitable timer found\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1044: FILE: kernel/dyn-tick.c:259:
+	if ((ret = dyn_tick_cfg->arch_init())) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1045: FILE: kernel/dyn-tick.c:260:
+		printk(KERN_ERR "dyn-tick: Init failed\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1049: FILE: kernel/dyn-tick.c:264:
+	if (!ret && dyntick_autoenable) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1051: FILE: kernel/dyn-tick.c:266:
+		printk(KERN_INFO "dyn-tick: Timer using dynamic tick\n");

CHECK:BRACES: Unbalanced braces around else statement
#1052: FILE: kernel/dyn-tick.c:267:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1053: FILE: kernel/dyn-tick.c:268:
+		printk(KERN_INFO "dyn-tick: Timer not enabled during boot\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 38 warnings, 28 checks, 906 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
