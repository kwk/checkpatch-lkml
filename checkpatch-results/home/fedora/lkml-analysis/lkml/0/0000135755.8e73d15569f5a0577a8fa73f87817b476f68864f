WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#122: FILE: mm/slab.c:107:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#123: FILE: mm/slab.c:108:
+#include <asm/cacheflush.h>

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#181: FILE: mm/slab.c:203:
+#define SLAB_LIMIT	(((kmem_bufctl_t)(~0U))-2)
                   	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#248: FILE: mm/slab.c:297:
+	spinlock_t		list_lock;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#276: FILE: mm/slab.c:322:
+#define CACHE(x)		\
+	if (size <= x)		\
+		return i;	\
+	else			\
 		i++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#276: FILE: mm/slab.c:322:
+#define CACHE(x)		\
+	if (size <= x)		\
+		return i;	\
+	else			\
 		i++;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#276: FILE: mm/slab.c:322:
+#define CACHE(x)		\
+	if (size <= x)		\
+		return i;	\
+	else			\
 		i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#276: FILE: mm/slab.c:322:
+#define CACHE(x)		\
+	if (size <= x)		\
+		return i;	\
+	else			\
 		i++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#291: FILE: mm/slab.c:353:
+#define MAKE_LIST(cachep, listp, slab, nodeid)				\
+	do {								\
+		INIT_LIST_HEAD(listp);					\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp);	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'listp' - possible side-effects?
#291: FILE: mm/slab.c:353:
+#define MAKE_LIST(cachep, listp, slab, nodeid)				\
+	do {								\
+		INIT_LIST_HEAD(listp);					\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp);	\
 	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'slab' may be better as '(slab)' to avoid precedence issues
#291: FILE: mm/slab.c:353:
+#define MAKE_LIST(cachep, listp, slab, nodeid)				\
+	do {								\
+		INIT_LIST_HEAD(listp);					\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp);	\
 	} while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]->slab
#294: FILE: mm/slab.c:356:
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp);	\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cachep' - possible side-effects?
#302: FILE: mm/slab.c:359:
+#define MAKE_ALL_LISTS(cachep, ptr, nodeid)				\
+	do {								\
+	MAKE_LIST((cachep), &(ptr)->slabs_full, slabs_full, nodeid);	\
+	MAKE_LIST((cachep), &(ptr)->slabs_partial, slabs_partial, nodeid);\
+	MAKE_LIST((cachep), &(ptr)->slabs_free, slabs_free, nodeid);	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#302: FILE: mm/slab.c:359:
+#define MAKE_ALL_LISTS(cachep, ptr, nodeid)				\
+	do {								\
+	MAKE_LIST((cachep), &(ptr)->slabs_full, slabs_full, nodeid);	\
+	MAKE_LIST((cachep), &(ptr)->slabs_partial, slabs_partial, nodeid);\
+	MAKE_LIST((cachep), &(ptr)->slabs_free, slabs_free, nodeid);	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nodeid' - possible side-effects?
#302: FILE: mm/slab.c:359:
+#define MAKE_ALL_LISTS(cachep, ptr, nodeid)				\
+	do {								\
+	MAKE_LIST((cachep), &(ptr)->slabs_full, slabs_full, nodeid);	\
+	MAKE_LIST((cachep), &(ptr)->slabs_partial, slabs_partial, nodeid);\
+	MAKE_LIST((cachep), &(ptr)->slabs_free, slabs_free, nodeid);	\
 	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#303: FILE: mm/slab.c:360:
+	do {								\
+	MAKE_LIST((cachep), &(ptr)->slabs_full, slabs_full, nodeid);	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#348: FILE: mm/slab.c:450:
+#define STATS_SET_HIGH(x)	do { if ((x)->num_active > (x)->high_mark) \
+					(x)->high_mark = (x)->num_active;  \
 				} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#360: FILE: mm/slab.c:456:
+#define STATS_SET_FREEABLE(x,i)	do { if ((x)->max_freeable < i)	\
                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#360: FILE: mm/slab.c:456:
+#define STATS_SET_FREEABLE(x,i)	do { if ((x)->max_freeable < i)	\
+					(x)->max_freeable = i;	\
 				} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#360: FILE: mm/slab.c:456:
+#define STATS_SET_FREEABLE(x,i)	do { if ((x)->max_freeable < i)	\
+					(x)->max_freeable = i;	\
 				} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#360: FILE: mm/slab.c:456:
+#define STATS_SET_FREEABLE(x,i)	do { if ((x)->max_freeable < i)	\
+					(x)->max_freeable = i;	\
 				} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: mm/slab.c:474:
+#define STATS_SET_FREEABLE(x,i)	do { } while (0)
                             ^

CHECK:SPACING: No space is necessary after a cast
#439: FILE: mm/slab.c:518:
+	return (unsigned long *) (objp + obj_dbghead(cachep) - BYTES_PER_WORD);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#511: FILE: mm/slab.c:572:
+#define SET_PAGE_CACHE(pg,x)  ((pg)->lru.next = (struct list_head *)(x))
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: mm/slab.c:574:
+#define SET_PAGE_SLAB(pg,x)   ((pg)->lru.prev = (struct list_head *)(x))
                         ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#672: FILE: mm/slab.c:834:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#704: FILE: mm/slab.c:860:
+				if (!(l3 = kmalloc_node(memsize, GFP_KERNEL,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#856: FILE: mm/slab.c:1118:
+		BUG_ON(ac_data(malloc_sizes[INDEX_AC].cs_cachep) !=

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#877: FILE: mm/slab.c:1135:
+				  &initkmem_list3[SIZE_AC+node], node);
 				                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#885: FILE: mm/slab.c:1139:
+					  &initkmem_list3[SIZE_L3+node], node);
 					                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1090: FILE: mm/slab.c:1347:
+				printk(KERN_ERR "Slab corruption: start=%p, "

WARNING:SPLIT_STRING: quoted string split across lines
#1091: FILE: mm/slab.c:1348:
+				printk(KERN_ERR "Slab corruption: start=%p, "
+				       "len=%d\n", realobj, size);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1163: FILE: mm/slab.c:1407:
+						 cachep->objsize/PAGE_SIZE, 1);
 						                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#1172: FILE: mm/slab.c:1423:
+			(cachep->dtor)(objp + obj_dbghead(cachep), cachep, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1314: FILE: mm/slab.c:1622:
+	if (size >= malloc_sizes[INDEX_L3+1].cs_size &&
 	                                 ^

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#1436: FILE: mm/slab.c:1803:
+			 * destroy its slab cache and noone else reuses the
 			                              ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1439: FILE: mm/slab.c:1806:
+			if (__get_user(tmp,pc->name)) {
 			                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1440: FILE: mm/slab.c:1807:
+				printk("%s: cache with size %d has lost its name\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1441: FILE: mm/slab.c:1808:
+				       __FUNCTION__, pc->objsize);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1444: FILE: mm/slab.c:1811:
+			if (!strcmp(pc->name,name)) {
 			                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1445: FILE: mm/slab.c:1812:
+				printk("%s: duplicate cache %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1446: FILE: mm/slab.c:1813:
+				       __FUNCTION__, name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1451: FILE: mm/slab.c:1816:
+				BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1464: FILE: mm/slab.c:1862:
+#define check_irq_off()				do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1465: FILE: mm/slab.c:1863:
+#define check_irq_on()				do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1466: FILE: mm/slab.c:1864:
+#define check_spinlock_acquired(x)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1467: FILE: mm/slab.c:1865:
+#define check_spinlock_acquired_node(x, y)	do { } while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1718: FILE: mm/slab.c:2264:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1723: FILE: mm/slab.c:2268:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kfree_debugcheck', this function's name, in a string
#1723: FILE: mm/slab.c:2268:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1741: FILE: mm/slab.c:2286:
+		printk(KERN_ERR "mismatch in kmem_cache_free: "

WARNING:SPLIT_STRING: quoted string split across lines
#1742: FILE: mm/slab.c:2287:
+		printk(KERN_ERR "mismatch in kmem_cache_free: "
+		       "expected cache %p, got %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1746: FILE: mm/slab.c:2290:
+		printk(KERN_ERR "%p is %s.\n", GET_PAGE_CACHE(page),

WARNING:SPLIT_STRING: quoted string split across lines
#1760: FILE: mm/slab.c:2300:
 			slab_error(cachep, "double free, or memory outside"
+				   " object was overwritten");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1761: FILE: mm/slab.c:2301:
+			printk(KERN_ERR "%p: redzone 1: 0x%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#1762: FILE: mm/slab.c:2302:
+			printk(KERN_ERR "%p: redzone 1: 0x%lx, "
+			       "redzone 2: 0x%lx.\n", objp,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1773: FILE: mm/slab.c:2315:
+	BUG_ON(objp != slabp->s_mem + objnr * cachep->objsize);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1785: FILE: mm/slab.c:2324:
+			     SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_VERIFY);
 			                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1814: FILE: mm/slab.c:2362:
+		printk(KERN_ERR "slab: Internal list corruption detected in "

WARNING:SPLIT_STRING: quoted string split across lines
#1815: FILE: mm/slab.c:2363:
+		printk(KERN_ERR "slab: Internal list corruption detected in "
+		       "cache '%s'(%d), slabp %p(%d). Hexdump:\n",

ERROR:SPACING: space required before the open parenthesis '('
#1831: FILE: mm/slab.c:2377:
+#define kfree_debugcheck(x)			do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1832: FILE: mm/slab.c:2378:
+#define cache_free_debugcheck(x,objp,z)		(objp)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1832: FILE: mm/slab.c:2378:
+#define cache_free_debugcheck(x,objp,z)		(objp)
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1833: FILE: mm/slab.c:2379:
+#define check_slabp(x,y)			do { } while(0)
                      ^

ERROR:SPACING: space required before the open parenthesis '('
#1833: FILE: mm/slab.c:2379:
+#define check_slabp(x,y)			do { } while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shared_array->entry[shared_array->avail]
#1853: FILE: mm/slab.c:2413:
+			       &(shared_array->entry[shared_array->avail]),

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1872: FILE: mm/slab.c:2470:
+		/* cache_grow can reenable interrupts, then ac could change. */
 		                  ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1928: FILE: mm/slab.c:2516:
+			slab_error(cachep, "double free, or memory outside "
+				   "object was overwritten");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1929: FILE: mm/slab.c:2517:
+			printk(KERN_ERR "%p: redzone 1: 0x%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#1930: FILE: mm/slab.c:2518:
+			printk(KERN_ERR "%p: redzone 1: 0x%lx, "
+			       "redzone 2: 0x%lx.\n", objp,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1987: FILE: mm/slab.c:2588:
+	BUG_ON(!l3);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2044: FILE: mm/slab.c:2608:
+	BUG_ON(slabp->inuse == cachep->num);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2059: FILE: mm/slab.c:2623:
+	if (slabp->free == BUFCTL_END) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#2177: FILE: mm/slab.c:2789:
+				spin_lock(&(cachep->nodelists[nodeid])->list_lock);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#2181: FILE: mm/slab.c:2791:
+				spin_unlock(&(cachep->nodelists[nodeid])->list_lock);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2209: FILE: mm/slab.c:2886:
+		printk(KERN_WARNING "slab: not allocating in inactive node %d "

WARNING:SPLIT_STRING: quoted string split across lines
#2210: FILE: mm/slab.c:2887:
+		printk(KERN_WARNING "slab: not allocating in inactive node %d "
+		       "for cache %s\n", nodeid, cachep->name);

CHECK:SPACING: No space is necessary after a cast
#2252: FILE: mm/slab.c:2989:
+	return (void *)(~(unsigned long) pdata);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2285: FILE: mm/slab.c:3110:
+		if (!(new = alloc_arraycache(node, cachep->shared *

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135755.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 36 warnings, 25 checks, 2451 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135755.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
