WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff -u -r linux-2.4.0-test12-pre3.clean/drivers/char/generic_serial.c linux/drivers/char/generic_serial.c

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#57: FILE: drivers/char/generic_serial.c:372:
+	if (timeout == 0) timeout = MAX_SCHEDULE_TIMEOUT;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#70: FILE: drivers/char/generic_serial.c:383:
+	while ((charsleft = gs_real_chars_in_buffer (port->tty)) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: drivers/char/generic_serial.c:384:
+	while ((charsleft = gs_real_chars_in_buffer (port->tty)) &&
 	        time_after (end_jiffies, jiffies)) {

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#78: FILE: drivers/char/rio/linux_compat.h:16:
  *      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#88: FILE: drivers/char/rio/linux_compat.h:25:
+#define sysbrk(x) kmalloc ((x),in_interrupt()? GFP_ATOMIC : GFP_KERNEL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#88: FILE: drivers/char/rio/linux_compat.h:25:
+#define sysbrk(x) kmalloc ((x),in_interrupt()? GFP_ATOMIC : GFP_KERNEL)
                               ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#88: FILE: drivers/char/rio/linux_compat.h:25:
+#define sysbrk(x) kmalloc ((x),in_interrupt()? GFP_ATOMIC : GFP_KERNEL)
                                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#88: FILE: drivers/char/rio/linux_compat.h:25:
+#define sysbrk(x) kmalloc ((x),in_interrupt()? GFP_ATOMIC : GFP_KERNEL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: drivers/char/rio/rio_linux.c:383:
+  return (MAJOR (device) == RIO_NORMAL_MAJOR0) ||$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: drivers/char/rio/rio_linux.c:383:
+  return (MAJOR (device) == RIO_NORMAL_MAJOR0) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: drivers/char/rio/rio_linux.c:384:
+         (MAJOR (device) == RIO_NORMAL_MAJOR1);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: drivers/char/rio/rio_linux.c:384:
+         (MAJOR (device) == RIO_NORMAL_MAJOR1);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#123: FILE: drivers/char/rio/rio_linux.c:384:
+         (MAJOR (device) == RIO_NORMAL_MAJOR1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: drivers/char/rio/rio_linux.c:515:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: drivers/char/rio/rio_linux.c:515:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#140: FILE: drivers/char/rio/rio_linux.c:515:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", 

ERROR:SPACING: space prohibited after that open parenthesis '('
#140: FILE: drivers/char/rio/rio_linux.c:515:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: drivers/char/rio/rio_linux.c:516:
+  rio_dprintk ( RIO_DEBUG_IFLOW, "riointr() doing host %p type %d\n", 
                 (int) ptr, HostP->Type);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: drivers/char/rio/rio_linux.c:623:
+  struct Port *PortP;$

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#148: FILE: drivers/char/rio/rio_linux.c:623:
+  struct Port *PortP;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#148: FILE: drivers/char/rio/rio_linux.c:623:
+  struct Port *PortP;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/char/rio/rio_linux.c:627:
+  PortP = (struct Port *)ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/char/rio/rio_linux.c:628:
+  PortP->gs.tty = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: drivers/char/rio/rio_linux.c:657:
+  struct Port *PortP;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/char/rio/rio_linux.c:659:
+  func_enter();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: drivers/char/rio/rio_linux.c:660:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/char/rio/rio_linux.c:660:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/char/rio/rio_linux.c:661:
+  PortP = (struct Port *)ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: drivers/char/rio/rio_linux.c:662:
+  PortP->gs.tty = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: drivers/char/rio/rio_linux.c:688:
+  PortP->gs.tty = NULL;$

CHECK:CAMELCASE: Avoid CamelCase: <RIOShortCommand>
#188: FILE: drivers/char/rio/rio_linux.c:708:
+extern int RIOShortCommand(struct rio_info *p, struct Port *PortP,

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: drivers/char/rio/rio_linux.c:709:
+               int command, int len, int arg);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/char/rio/rio_linux.c:709:
+extern int RIOShortCommand(struct rio_info *p, struct Port *PortP,
+               int command, int len, int arg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: drivers/char/rio/rio_linux.c:709:
+               int command, int len, int arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/char/rio/rio_linux.c:715:
+  struct Port *PortP;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: drivers/char/rio/rio_linux.c:718:
+  func_enter();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/char/rio/rio_linux.c:720:
+  PortP = (struct Port *)tty->driver_data;$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#207: FILE: drivers/char/rio/rio_linux.c:724:
+#if 0

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#218: FILE: drivers/char/rio/rio_linux.c:740:
     if ((rc = verify_area(VERIFY_WRITE, (void *) arg,
[...]
+      gs_getserial(&PortP->gs, (struct serial_struct *) arg);

CHECK:SPACING: No space is necessary after a cast
#221: FILE: drivers/char/rio/rio_linux.c:742:
+      gs_getserial(&PortP->gs, (struct serial_struct *) arg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: drivers/char/rio/rio_linux.c:742:
+      gs_getserial(&PortP->gs, (struct serial_struct *) arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: drivers/char/rio/rio_linux.c:743:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/char/rio/rio_linux.c:744:
+  case TCSBRK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/char/rio/rio_linux.c:745:
+    if ( PortP->State & RIO_DELETED ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#224: FILE: drivers/char/rio/rio_linux.c:745:
+    if ( PortP->State & RIO_DELETED ) {
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#224: FILE: drivers/char/rio/rio_linux.c:745:
+    if ( PortP->State & RIO_DELETED ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#224: FILE: drivers/char/rio/rio_linux.c:745:
+    if ( PortP->State & RIO_DELETED ) {

CHECK:CAMELCASE: Avoid CamelCase: <State>
#224: FILE: drivers/char/rio/rio_linux.c:745:
+    if ( PortP->State & RIO_DELETED ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: drivers/char/rio/rio_linux.c:746:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: drivers/char/rio/rio_linux.c:746:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: drivers/char/rio/rio_linux.c:747:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/char/rio/rio_linux.c:747:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: drivers/char/rio/rio_linux.c:748:
+    } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#227: FILE: drivers/char/rio/rio_linux.c:748:
+    } else {
+      if (RIOShortCommand(p, PortP, SBREAK, 2, 250) == RIO_FAIL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: drivers/char/rio/rio_linux.c:749:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, 250) == RIO_FAIL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#228: FILE: drivers/char/rio/rio_linux.c:749:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, 250) == RIO_FAIL) {
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: drivers/char/rio/rio_linux.c:750:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/char/rio/rio_linux.c:750:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#229: FILE: drivers/char/rio/rio_linux.c:750:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: drivers/char/rio/rio_linux.c:751:
+         rc = -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/char/rio/rio_linux.c:751:
+         rc = -EIO;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: drivers/char/rio/rio_linux.c:752:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/char/rio/rio_linux.c:752:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: drivers/char/rio/rio_linux.c:753:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/char/rio/rio_linux.c:754:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/char/rio/rio_linux.c:755:
+  case TCSBRKP:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: drivers/char/rio/rio_linux.c:756:
+    if ( PortP->State & RIO_DELETED ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#235: FILE: drivers/char/rio/rio_linux.c:756:
+    if ( PortP->State & RIO_DELETED ) {
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#235: FILE: drivers/char/rio/rio_linux.c:756:
+    if ( PortP->State & RIO_DELETED ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#235: FILE: drivers/char/rio/rio_linux.c:756:
+    if ( PortP->State & RIO_DELETED ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/char/rio/rio_linux.c:757:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#236: FILE: drivers/char/rio/rio_linux.c:757:
+      rio_dprintk (RIO_DEBUG_TTY, "BREAK on deleted RTA\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: drivers/char/rio/rio_linux.c:758:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/char/rio/rio_linux.c:758:
+      rc = -EIO;      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: drivers/char/rio/rio_linux.c:759:
+    } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#238: FILE: drivers/char/rio/rio_linux.c:759:
+    } else {
+      int l;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: drivers/char/rio/rio_linux.c:760:
+      int l;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: drivers/char/rio/rio_linux.c:761:
+      int l;
+      l = arg?arg*100:250;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: drivers/char/rio/rio_linux.c:761:
+      l = arg?arg*100:250;$

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#240: FILE: drivers/char/rio/rio_linux.c:761:
+      l = arg?arg*100:250;
              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#240: FILE: drivers/char/rio/rio_linux.c:761:
+      l = arg?arg*100:250;
                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#240: FILE: drivers/char/rio/rio_linux.c:761:
+      l = arg?arg*100:250;
                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: drivers/char/rio/rio_linux.c:762:
+      if (l > 255) l = 255;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#241: FILE: drivers/char/rio/rio_linux.c:762:
+      if (l > 255) l = 255;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: drivers/char/rio/rio_linux.c:763:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#242: FILE: drivers/char/rio/rio_linux.c:763:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#242: FILE: drivers/char/rio/rio_linux.c:763:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#242: FILE: drivers/char/rio/rio_linux.c:763:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
                                                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#242: FILE: drivers/char/rio/rio_linux.c:763:
+      if (RIOShortCommand(p, PortP, SBREAK, 2, arg?arg*100:250) == RIO_FAIL) {
                                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: drivers/char/rio/rio_linux.c:764:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: drivers/char/rio/rio_linux.c:764:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: drivers/char/rio/rio_linux.c:764:
+         rio_dprintk (RIO_DEBUG_INTR, "SBREAK RIOShortCommand failed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: drivers/char/rio/rio_linux.c:765:
+         rc = -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/char/rio/rio_linux.c:765:
+         rc = -EIO;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: drivers/char/rio/rio_linux.c:766:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: drivers/char/rio/rio_linux.c:766:
+      }          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: drivers/char/rio/rio_linux.c:767:
+    }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#249: FILE: drivers/char/rio/rio_linux.c:770:
     if ((rc = verify_area(VERIFY_READ, (void *) arg,
[...]
+      rc = gs_setserial(&PortP->gs, (struct serial_struct *) arg);

CHECK:SPACING: No space is necessary after a cast
#252: FILE: drivers/char/rio/rio_linux.c:772:
+      rc = gs_setserial(&PortP->gs, (struct serial_struct *) arg);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: drivers/char/rio/rio_linux.c:772:
+      rc = gs_setserial(&PortP->gs, (struct serial_struct *) arg);$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#254: FILE: drivers/char/rio/rio_linux.c:774:
+#if 0

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/char/rio/rio_linux.c:811:
+  func_exit();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: drivers/char/rio/rio_linux.c:1287:
+      hp->HostLock = SPIN_LOCK_UNLOCKED;$

CHECK:CAMELCASE: Avoid CamelCase: <HostLock>
#282: FILE: drivers/char/rio/rio_linux.c:1287:
+      hp->HostLock = SPIN_LOCK_UNLOCKED;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: drivers/char/rio/rio_linux.c:1343:
+    hp->HostLock = SPIN_LOCK_UNLOCKED;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: drivers/char/rio/rio_linux.h:99:
+^I                                 sem, __FILE__, __LINE__);\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: drivers/char/rio/rio_linux.h:104:
+^I                                 sem, __FILE__, __LINE__);\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: drivers/char/rio/rio_linux.h:111:
+^I                                 sem, __FILE__, __LINE__);\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: drivers/char/rio/rio_linux.h:116:
+^I                                 sem, __FILE__, __LINE__);\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!PortP->gs.tty->termios"
#389: FILE: drivers/char/rio/riocmd.c:553:
+				if (PortP->gs.tty->termios == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlkP>
#399: FILE: drivers/char/rio/riocmd.c:629:
+	if (CmdBlkP)

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlk>
#400: FILE: drivers/char/rio/riocmd.c:630:
+		bzero(CmdBlkP, sizeof(struct CmdBlk));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: drivers/char/rio/riocmd.c:790:
+^I^I^I^I^I$

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#420: FILE: drivers/char/rio/rioinit.c:1449:
+			HostP->UnixRups[rup].RupLock = SPIN_LOCK_UNLOCKED;

CHECK:CAMELCASE: Avoid CamelCase: <UnixRups>
#420: FILE: drivers/char/rio/rioinit.c:1449:
+			HostP->UnixRups[rup].RupLock = SPIN_LOCK_UNLOCKED;

CHECK:CAMELCASE: Avoid CamelCase: <RupLock>
#420: FILE: drivers/char/rio/rioinit.c:1449:
+			HostP->UnixRups[rup].RupLock = SPIN_LOCK_UNLOCKED;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#432: FILE: drivers/char/rio/riointr.c:276:
+		rio_dprintk (RIO_DEBUG_INTR,  "riointr() doing host %p type %d\n", host, HostP->Type);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#432: FILE: drivers/char/rio/riointr.c:276:
+		rio_dprintk (RIO_DEBUG_INTR,  "riointr() doing host %p type %d\n", host, HostP->Type);

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#432: FILE: drivers/char/rio/riointr.c:276:
+		rio_dprintk (RIO_DEBUG_INTR,  "riointr() doing host %p type %d\n", host, HostP->Type);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: drivers/char/rio/riotty.c:98:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#456: FILE: drivers/char/rio/riotty.c:98:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: drivers/char/rio/riotty.c:99:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, 
 			   int command, int len, int arg);

CHECK:CAMELCASE: Avoid CamelCase: <portSem>
#464: FILE: drivers/char/rio/riotty.c:454:
+				rio_spin_unlock_irqrestore(&PortP->portSem, flags);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#465: FILE: drivers/char/rio/riotty.c:455:
+				if (RIODelay (PortP, HUNDRED_MS) == RIO_FAIL)
[...]
 				if ( sleep((caddr_t)&tp->tm.c_canqo, TTIPRI|PCATCH))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#465: FILE: drivers/char/rio/riotty.c:455:
+				if (RIODelay (PortP, HUNDRED_MS) == RIO_FAIL)

CHECK:CAMELCASE: Avoid CamelCase: <RIODelay>
#465: FILE: drivers/char/rio/riotty.c:455:
+				if (RIODelay (PortP, HUNDRED_MS) == RIO_FAIL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: drivers/char/rio/riotty.c:512:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: drivers/char/rio/riotty.c:533:
+^Iint^Irepeat_this = -1; /* Congrats to those having 15 years of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#496: FILE: drivers/char/rio/riotty.c:534:
+	int	repeat_this = -1; /* Congrats to those having 15 years of 
+				     uptime! (You get to break the driver.) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#496: FILE: drivers/char/rio/riotty.c:534:
+				     uptime! (You get to break the driver.) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: drivers/char/rio/riotty.c:549:
+^Iif (PortP->gs.closing_wait) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#506: FILE: drivers/char/rio/riotty.c:549:
+	if (PortP->gs.closing_wait) 
+	  end_time = jiffies + PortP->gs.closing_wait;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: drivers/char/rio/riotty.c:551:
+^Ielse $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#508: FILE: drivers/char/rio/riotty.c:551:
+	else 
+	  end_time = jiffies + MAX_SCHEDULE_TIMEOUT;

CHECK:CAMELCASE: Avoid CamelCase: <ModemState>
#520: FILE: drivers/char/rio/riotty.c:587:
+	PortP->ModemState &= ~MSVR1_CD;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: drivers/char/rio/riotty.c:619:
 
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#547: FILE: drivers/char/rio/riotty.c:676:
+		if (time_after (jiffies, end_time)) {
 		  rio_dprintk (RIO_DEBUG_TTY, "Run out of tries - force the bugger shut!\n" );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#547: FILE: drivers/char/rio/riotty.c:676:
+		if (time_after (jiffies, end_time)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#557: FILE: drivers/char/rio/riotty.c:689:
+			rio_dprintk (RIO_DEBUG_TTY, "RTA EINTR in delay \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#557: FILE: drivers/char/rio/riotty.c:689:
+			rio_dprintk (RIO_DEBUG_TTY, "RTA EINTR in delay \n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#558: FILE: drivers/char/rio/riotty.c:690:
+			RIOPreemptiveCmd(p, PortP,FCLOSE);
 			                         ^

CHECK:CAMELCASE: Avoid CamelCase: <RIOPreemptiveCmd>
#558: FILE: drivers/char/rio/riotty.c:690:
+			RIOPreemptiveCmd(p, PortP,FCLOSE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: drivers/char/rio/riotty.c:798:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP,
 		int command, int len, int arg)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563716.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 80 warnings, 30 checks, 462 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563716.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
