WARNING:TYPO_SPELLING: 'leathal' may be misspelled - perhaps 'lethal'?
#41: 
suggest that it would have any leathal effect.  Am I wrong and will my 
                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: fs/proc/array.c:340:
+	if (current->uid == task->uid || current->euid == task->uid ||
+							capable(CAP_SYS_NICE))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: fs/proc/base.c:616:
+  E(PROC_PID_MAPS,^I"maps",^I^IS_IFREG|S_IRUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#96: FILE: fs/proc/base.c:616:
+  E(PROC_PID_MAPS,	"maps",		S_IFREG|S_IRUSR),
                   	       		       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#96: FILE: fs/proc/base.c:616:
+  E(PROC_PID_MAPS,	"maps",		S_IFREG|S_IRUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: fs/binfmt_aout.c:410:
+^Iretval = setup_arg_pages(bprm, 1); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#118: FILE: fs/binfmt_elf.c:47:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned int);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#118: FILE: fs/binfmt_elf.c:47:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned int);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#173: FILE: fs/binfmt_elf.c:235:
+elf_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned int total_size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#173: FILE: fs/binfmt_elf.c:235:
+elf_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned int total_size)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#238: FILE: fs/binfmt_elf.c:340:
+	    map_addr = elf_map(interpreter, load_addr + vaddr, eppnt, elf_prot, elf_type, total_size);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#259: FILE: fs/binfmt_elf.c:581:
+	if (current->personality == PER_LINUX)
+	switch (exec_shield) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: fs/binfmt_elf.c:693:
+^I $

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#354: FILE: fs/binfmt_elf.c:739:
+		error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt, elf_prot, elf_flags, total_size);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#415: FILE: fs/exec.c:333:
+	stack_base = arch_align_stack(STACK_TOP - MAX_ARG_PAGES*PAGE_SIZE);
 	                                                       ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#452: FILE: fs/exec.c:683:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#465: FILE: fs/exec.c:695:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#465: FILE: fs/exec.c:695:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#467: FILE: fs/exec.c:697:
+#ifdef __i386__

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#481: FILE: kernel/signal.c:846:
+int print_fatal_signals = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#488: FILE: kernel/signal.c:853:
+	printk("%s/%d: potentially unexpected fatal signal %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: kernel/signal.c:854:
+	printk("%s/%d: potentially unexpected fatal signal %d.\n",
+		current->comm, current->pid, signr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#490: FILE: kernel/signal.c:855:
+	printk("code at %08lx: ", regs->eip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#493: FILE: kernel/signal.c:858:
+		printk("%02x ", insn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#495: FILE: kernel/signal.c:860:
+	printk("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: kernel/signal.c:866:
+	get_option (&str, &print_fatal_signals);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#506: FILE: kernel/signal.c:871:
+__setup("print-fatal-signals=", setup_print_fatal_signals);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#516: FILE: kernel/sysctl.c:45:
+extern int print_fatal_signals;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#600: FILE: mm/mmap.c:623:
+static inline unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags, unsigned long exec)
                                                                 ^^^^

WARNING:LONG_LINE: line length of 170 exceeds 100 columns
#600: FILE: mm/mmap.c:623:
+static inline unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags, unsigned long exec)

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#609: FILE: mm/mmap.c:649:
+extern unsigned long arch_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#613: FILE: mm/mmap.c:652:
+unsigned long get_unmapped_area(struct file *file, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags, unsigned long exec)

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#779: FILE: mm/mremap.c:336:
+			new_addr = get_unmapped_area(vma->vm_file, 0, new_len, vma->vm_pgoff, map_flags, vma->vm_flags & VM_EXEC);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#802: FILE: include/linux/binfmts.h:55:
+extern int setup_arg_pages(struct linux_binprm * bprm, int exec_stack);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#802: FILE: include/linux/binfmts.h:55:
+extern int setup_arg_pages(struct linux_binprm * bprm, int exec_stack);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#825: FILE: include/linux/mm.h:553:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#833: FILE: include/linux/mm.h:576:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: include/linux/mm.h:577:
+extern void arch_remove_exec_range(struct mm_struct *mm, unsigned long limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#855: FILE: include/linux/sched.h:34:
+extern void print_fatal_signal(struct pt_regs *regs, int signr);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#883: FILE: include/linux/sched.h:459:
+#define _STK_LIM	(10*1024*1024)
                 	   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#883: FILE: include/linux/sched.h:459:
+#define _STK_LIM	(10*1024*1024)
                 	        ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#950: FILE: include/asm-i386/desc.h:16:
+} __attribute__ ((packed));

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#953: FILE: include/asm-i386/desc.h:18:
+extern struct Xgt_desc_struct idt_descr, cpu_gdt_descr[NR_CPUS];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#956: FILE: include/asm-i386/desc.h:20:
+#define load_TR_desc() __asm__ __volatile__("ltr %%ax"::"a" (GDT_ENTRY_TSS*8))
                                                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#956: FILE: include/asm-i386/desc.h:20:
+#define load_TR_desc() __asm__ __volatile__("ltr %%ax"::"a" (GDT_ENTRY_TSS*8))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#957: FILE: include/asm-i386/desc.h:21:
+#define load_LDT_desc() __asm__ __volatile__("lldt %%ax"::"a" (GDT_ENTRY_LDT*8))
                                                                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#957: FILE: include/asm-i386/desc.h:21:
+#define load_LDT_desc() __asm__ __volatile__("lldt %%ax"::"a" (GDT_ENTRY_LDT*8))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: include/asm-i386/desc.h:30:
+#define _set_tssldt_desc(n,addr,limit,type) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: include/asm-i386/desc.h:30:
+#define _set_tssldt_desc(n,addr,limit,type) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#968: FILE: include/asm-i386/desc.h:30:
+#define _set_tssldt_desc(n,addr,limit,type) \
                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#968: FILE: include/asm-i386/desc.h:30:
+#define _set_tssldt_desc(n,addr,limit,type) \
+__asm__ __volatile__ ("movw %w3,0(%2)\n\t" \
+	"movw %%ax,2(%2)\n\t" \
+	"rorl $16,%%eax\n\t" \
+	"movb %%al,4(%2)\n\t" \
+	"movb %4,5(%2)\n\t" \
+	"movb $0,6(%2)\n\t" \
+	"movb %%ah,7(%2)\n\t" \
+	"rorl $16,%%eax" \
+	: "=m"(*(n)) : "a" (addr), "r"(n), "ir"(limit), "i"(type))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#968: FILE: include/asm-i386/desc.h:30:
+#define _set_tssldt_desc(n,addr,limit,type) \
+__asm__ __volatile__ ("movw %w3,0(%2)\n\t" \
+	"movw %%ax,2(%2)\n\t" \
+	"rorl $16,%%eax\n\t" \
+	"movb %%al,4(%2)\n\t" \
+	"movb %4,5(%2)\n\t" \
+	"movb $0,6(%2)\n\t" \
+	"movb %%ah,7(%2)\n\t" \
+	"rorl $16,%%eax" \
+	: "=m"(*(n)) : "a" (addr), "r"(n), "ir"(limit), "i"(type))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#986: FILE: include/asm-i386/desc.h:48:
+	_set_tssldt_desc(&cpu_gdt_table[cpu][GDT_ENTRY_LDT], (int)addr, ((size << 3)-1), 0x82);
 	                                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#989: FILE: include/asm-i386/desc.h:51:
+#define LDT_entry_a(info) \
+	((((info)->base_addr & 0x0000ffff) << 16) | ((info)->limit & 0x0ffff))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#992: FILE: include/asm-i386/desc.h:54:
+#define LDT_entry_b(info) \
+	(((info)->base_addr & 0xff000000) | \
+	(((info)->base_addr & 0x00ff0000) >> 16) | \
+	((info)->limit & 0xf0000) | \
+	(((info)->read_exec_only ^ 1) << 9) | \
+	((info)->contents << 10) | \
+	(((info)->seg_not_present ^ 1) << 15) | \
+	((info)->seg_32bit << 22) | \
+	((info)->limit_in_pages << 23) | \
+	((info)->useable << 20) | \
+	0x7000)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1001: FILE: include/asm-i386/desc.h:63:
+	((info)->useable << 20) | \
 	         ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1004: FILE: include/asm-i386/desc.h:66:
+#define LDT_empty(info) (\
+	(info)->base_addr	== 0	&& \
+	(info)->limit		== 0	&& \
+	(info)->contents	== 0	&& \
+	(info)->read_exec_only	== 1	&& \
+	(info)->seg_32bit	== 0	&& \
+	(info)->limit_in_pages	== 0	&& \
+	(info)->seg_not_present	== 1	&& \
+	(info)->useable		== 0	)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1012: FILE: include/asm-i386/desc.h:74:
+	(info)->useable		== 0	)
 	        ^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1012: FILE: include/asm-i386/desc.h:74:
+	(info)->useable		== 0	)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1055: FILE: include/asm-i386/elf.h:106:
+extern void randomize_brk(unsigned long old_brk);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1120: FILE: include/asm-i386/pgalloc.h:246:
+#define load_user_cs_desc(cpu, mm) \
+    	cpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs

ERROR:CODE_INDENT: code indent should use tabs where possible
#1121: FILE: include/asm-i386/pgalloc.h:247:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1121: FILE: include/asm-i386/pgalloc.h:247:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: include/asm-i386/pgalloc.h:247:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1123: FILE: include/asm-i386/pgalloc.h:249:
+extern void arch_add_exec_range(struct mm_struct *mm, unsigned long limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1124: FILE: include/asm-i386/pgalloc.h:250:
+extern void arch_remove_exec_range(struct mm_struct *mm, unsigned long limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1125: FILE: include/asm-i386/pgalloc.h:251:
+extern void arch_flush_exec_range(struct mm_struct *mm);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1141: FILE: include/asm-i386/pgtable-2level.h:67:
+#define __mk_pte(nr,prot)	pfn_pte(nr,prot)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1141: FILE: include/asm-i386/pgtable-2level.h:67:
+#define __mk_pte(nr,prot)	pfn_pte(nr,prot)
                          	          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1153: FILE: include/asm-i386/pgtable-3level.h:94:
+#define pte_pfn(x)	(((x).pte_low >> PAGE_SHIFT) | ((x).pte_high << (32 - PAGE_SHIFT)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1156: FILE: include/asm-i386/pgtable-3level.h:96:
+#define __mk_pte(nr,prot)	pfn_pte(nr,prot)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1156: FILE: include/asm-i386/pgtable-3level.h:96:
+#define __mk_pte(nr,prot)	pfn_pte(nr,prot)
                          	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1180: FILE: include/asm-i386/processor.h:22:
+	unsigned long a,b;
 	               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1183: FILE: include/asm-i386/processor.h:25:
+#define desc_empty(desc) \
+		(!((desc)->a + (desc)->b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc1' - possible side-effects?
#1186: FILE: include/asm-i386/processor.h:28:
+#define desc_equal(desc1, desc2) \
+		(((desc1)->a == (desc2)->a) && ((desc1)->b == (desc2)->b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc2' - possible side-effects?
#1186: FILE: include/asm-i386/processor.h:28:
+#define desc_equal(desc1, desc2) \
+		(((desc1)->a == (desc2)->a) && ((desc1)->b == (desc2)->b))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1196: FILE: include/asm-i386/processor.h:276:
+#define TASK_UNMAPPED_BASE    PAGE_ALIGN(TASK_SIZE/3)
                                                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: include/asm-i386/processor.h:281:
+extern unsigned long arch_align_stack(unsigned long sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1204: FILE: include/asm-i386/processor.h:284:
+extern unsigned long mmap_top(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1213: FILE: include/asm-i386/processor.h:419:
+	GDT_ENTRY_LDT,0, /* ldt */					\
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1266: FILE: include/asm-i386/segment.h:37:
+ *  23 - APM BIOS support $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1270: FILE: include/asm-i386/segment.h:41:
+#define GDT_ENTRY_TLS_MAX ^I(GDT_ENTRY_TLS_MIN + GDT_ENTRY_TLS_ENTRIES - 1)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1319: FILE: include/asm-i386/system.h:63:
+extern void set_desc_limit(struct desc_struct *desc, unsigned long limit);

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#1350: FILE: arch/i386/boot/setup.S:1081:
+# the GDT, but those wont be used so it's not a problem.
                      ^^^^

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1382: FILE: arch/i386/mm/fault.c:289:
+		nr = (address - idt_descr.address) >> 3;
 		              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1417: FILE: arch/i386/kernel/apm.c:635:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1442: FILE: arch/i386/kernel/apm.c:694:
+^I$

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)0x40' could be '0x40UL'
#1474: FILE: arch/i386/kernel/apm.c:2002:
+	set_base(bad_bios_desc, __va((unsigned long)0x40 << 4));

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1486: FILE: arch/i386/kernel/apm.c:2008:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1520: FILE: arch/i386/kernel/apm.c:2027:
+			_set_limit((char *)&cpu_gdt_table[i][APM_CS >> 3],
+				(apm_info.bios.cseg_len - 1) & 0xffff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1522: FILE: arch/i386/kernel/apm.c:2029:
+			_set_limit((char *)&cpu_gdt_table[i][APM_CS_16 >> 3],
+				(apm_info.bios.cseg_16_len - 1) & 0xffff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1524: FILE: arch/i386/kernel/apm.c:2031:
+			_set_limit((char *)&cpu_gdt_table[i][APM_DS >> 3],
+				(apm_info.bios.dseg_len - 1) & 0xffff);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1725: FILE: arch/i386/kernel/process.c:860:
+       ^Iget_random_bytes(&jitter, sizeof(jitter));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1725: FILE: arch/i386/kernel/process.c:860:
+       ^Iget_random_bytes(&jitter, sizeof(jitter));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1725: FILE: arch/i386/kernel/process.c:860:
+       ^Iget_random_bytes(&jitter, sizeof(jitter));$

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1745: FILE: arch/i386/kernel/process.c:880:
+static unsigned long arch_get_unmapped_nonexecutable_area(struct mm_struct *mm, unsigned long addr, unsigned long len)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1750: FILE: arch/i386/kernel/process.c:885:
+		printk("hm, %s:%d, !mmap_top.\n", current->comm, current->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1754: FILE: arch/i386/kernel/process.c:889:
+^Iif (len > TASK_SIZE) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1758: FILE: arch/i386/kernel/process.c:893:
+        if (addr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1758: FILE: arch/i386/kernel/process.c:893:
+        if (addr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1759: FILE: arch/i386/kernel/process.c:894:
+                addr = PAGE_ALIGN(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1759: FILE: arch/i386/kernel/process.c:894:
+                addr = PAGE_ALIGN(addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1760: FILE: arch/i386/kernel/process.c:895:
+                vma = find_vma(mm, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1760: FILE: arch/i386/kernel/process.c:895:
+                vma = find_vma(mm, addr);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1761: FILE: arch/i386/kernel/process.c:896:
+^I^Iif (TASK_SIZE - len >= addr && $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1764: FILE: arch/i386/kernel/process.c:899:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1764: FILE: arch/i386/kernel/process.c:899:
+        }$

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#1770: FILE: arch/i386/kernel/process.c:905:
+	/* either no address requested or cant fit in requested address hole */
 	                                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1771: FILE: arch/i386/kernel/process.c:906:
+        addr = (mm->mmap_top - len) & PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1771: FILE: arch/i386/kernel/process.c:906:
+        addr = (mm->mmap_top - len) & PAGE_MASK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1773: FILE: arch/i386/kernel/process.c:908:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1773: FILE: arch/i386/kernel/process.c:908:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1773: FILE: arch/i386/kernel/process.c:908:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1773: FILE: arch/i386/kernel/process.c:908:
+       	 	if (!(vma = find_vma_prev(mm, addr, &prev_vma)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1774: FILE: arch/i386/kernel/process.c:909:
+                        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1774: FILE: arch/i386/kernel/process.c:909:
+                        return -ENOMEM;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1779: FILE: arch/i386/kernel/process.c:914:
+		if (addr+len <= vma->vm_start &&
 		        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= prev_vma->vm_end'
#1779: FILE: arch/i386/kernel/process.c:914:
+		if (addr+len <= vma->vm_start &&
+				(!prev_vma || (addr >= prev_vma->vm_end)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1780: FILE: arch/i386/kernel/process.c:915:
+		if (addr+len <= vma->vm_start &&
+				(!prev_vma || (addr >= prev_vma->vm_end)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1785: FILE: arch/i386/kernel/process.c:920:
+        } while (len <= vma->vm_start);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1785: FILE: arch/i386/kernel/process.c:920:
+        } while (len <= vma->vm_start);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1793: FILE: arch/i386/kernel/process.c:928:
+	unsigned long range = end - len - start;
+	if (end <= start + len)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1798: FILE: arch/i386/kernel/process.c:933:
+static inline unsigned long stock_arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags)
                                                                       ^^^^

WARNING:LONG_LINE: line length of 156 exceeds 100 columns
#1798: FILE: arch/i386/kernel/process.c:933:
+static inline unsigned long stock_arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1824: FILE: arch/i386/kernel/process.c:959:
+unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr0,
                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1825: FILE: arch/i386/kernel/process.c:960:
+unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr0,
+		unsigned long len0, unsigned long pgoff, unsigned long flags,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#1837: FILE: arch/i386/kernel/process.c:972:
+	if (unlikely(!(current->flags & PF_RELOCEXEC)))
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1838: FILE: arch/i386/kernel/process.c:973:
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);
 	                                           ^^^^

WARNING:TABSTOP: Statements should start on a tabstop
#1838: FILE: arch/i386/kernel/process.c:973:
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1858: FILE: arch/i386/kernel/process.c:993:
+		if ((tmp = arch_get_unmapped_nonexecutable_area(mm, addr, len)) != -ENOMEM)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= 0x01000000'
#1881: FILE: arch/i386/kernel/process.c:1016:
+			if (ascii_shield && (addr >= 0x01000000)) {

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#1889: FILE: arch/i386/kernel/process.c:1024:
+			 * Ok, randomization didnt work out - return
 			                     ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end > limit'
#1915: FILE: arch/i386/kernel/process.c:1050:
+			if ((vma->vm_flags & VM_EXEC) && (vma->vm_end > limit))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1952: FILE: arch/i386/kernel/process.c:1087:
+#define MIN_GAP (128*1024*1024)
                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1952: FILE: arch/i386/kernel/process.c:1087:
+#define MIN_GAP (128*1024*1024)
                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1953: FILE: arch/i386/kernel/process.c:1088:
+#define MAX_GAP (TASK_SIZE/6*5)
                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1953: FILE: arch/i386/kernel/process.c:1088:
+#define MAX_GAP (TASK_SIZE/6*5)
                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1978: FILE: arch/i386/kernel/setup.c:2670:
+	get_option (&str, &exec_shield);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1982: FILE: arch/i386/kernel/setup.c:2674:
+__setup("exec-shield=", setup_exec_shield);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1994: FILE: arch/i386/kernel/setup.c:3159:
+	struct tss_struct * t = &init_tss[cpu];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2000: FILE: arch/i386/kernel/setup.c:3163:
+		printk(KERN_WARNING "CPU#%d already initialized!\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2004: FILE: arch/i386/kernel/setup.c:3166:
+	printk(KERN_INFO "Initializing CPU#%d\n", cpu);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2019: FILE: arch/i386/kernel/setup.c:3185:
+		cpu_gdt_descr[cpu].size = GDT_SIZE-1;
 		                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2023: FILE: arch/i386/kernel/setup.c:3189:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2025: FILE: arch/i386/kernel/setup.c:3191:
+
+

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2027: FILE: arch/i386/kernel/setup.c:3193:
+	__asm__ __volatile__("lgdt %0": "=m" (cpu_gdt_descr[cpu]));
 	                              ^

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#2108: FILE: arch/i386/kernel/traps.c:425:
+		 * we wont hit this branch next time around.
 		      ^^^^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#2116: FILE: arch/i386/kernel/traps.c:433:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2116: FILE: arch/i386/kernel/traps.c:433:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2116: FILE: arch/i386/kernel/traps.c:433:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());
 		                                                                       ^

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#2117: FILE: arch/i386/kernel/traps.c:434:
+		printk(" exec_limit: %08lx, user_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, current->mm->context.user_cs.a, current->mm->context.user_cs.b);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2117: FILE: arch/i386/kernel/traps.c:434:
+		printk(" exec_limit: %08lx, user_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, current->mm->context.user_cs.a, current->mm->context.user_cs.b);

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#2177: FILE: Makefile:4:
+EXTRAVERSION = -exec-shield
 ^^^^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000314248.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 70 warnings, 52 checks, 1931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000314248.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
