CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#45: FILE: include/linux/kernel.h:201:
+#define TAINT_USER			(1<<6)
                   			  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#45: FILE: include/linux/kernel.h:201:
+#define TAINT_USER			(1<<6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/sysctl.h:918:
+extern int proc_dointvec_taint(ctl_table *, int, struct file *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ctl_table *' should also have an identifier name
#57: FILE: include/linux/sysctl.h:918:
+extern int proc_dointvec_taint(ctl_table *, int, struct file *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#57: FILE: include/linux/sysctl.h:918:
+extern int proc_dointvec_taint(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#57: FILE: include/linux/sysctl.h:918:
+extern int proc_dointvec_taint(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#57: FILE: include/linux/sysctl.h:918:
+extern int proc_dointvec_taint(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#57: FILE: include/linux/sysctl.h:918:
+extern int proc_dointvec_taint(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#57: FILE: include/linux/sysctl.h:918:
+extern int proc_dointvec_taint(ctl_table *, int, struct file *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: kernel/panic.c:163:
+		snprintf(buf, sizeof(buf), "Tainted: %c%c%c%c%c%c%c",
 			tainted & TAINT_PROPRIETARY_MODULE ? 'P' : 'G',

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#113: FILE: kernel/sysctl.c:1841:
+int proc_dointvec_taint(ctl_table *table, int write, struct file *filp,
                                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#118: FILE: kernel/sysctl.c:1846:
+	if (!capable(CAP_SYS_ADMIN)) {
+		return -EPERM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#123: FILE: kernel/sysctl.c:1851:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,ppos,
 	                                    ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: kernel/sysctl.c:1851:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,ppos,
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: kernel/sysctl.c:1851:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,ppos,
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: kernel/sysctl.c:1851:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,ppos,
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: kernel/sysctl.c:1851:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,ppos,
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: kernel/sysctl.c:1851:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,ppos,
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#124: FILE: kernel/sysctl.c:1852:
+				do_proc_dointvec_bset_conv,&op);
 				                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#124: FILE: kernel/sysctl.c:1852:
+				do_proc_dointvec_bset_conv,&op);
 				                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075478.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 9 warnings, 4 checks, 71 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075478.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
