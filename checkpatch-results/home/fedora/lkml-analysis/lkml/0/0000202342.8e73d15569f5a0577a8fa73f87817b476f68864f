WARNING:TYPO_SPELLING: 'unnessesary' may be misspelled - perhaps 'unnecessary'?
#48: 
some unnessesary casts that can go the way of the Dodo (I believe Domen 
     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'interrested' may be misspelled - perhaps 'interested'?
#53: 
about whitespace changes only, but if you are interrested in such further 
                                              ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: fs/cifs/file.c:65:
+^I^I^IpCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#91: FILE: fs/cifs/file.c:65:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#91: FILE: fs/cifs/file.c:65:
+			pCifsFile = list_entry(tmp, struct cifsFileInfo, flist);           

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#100: FILE: fs/cifs/file.c:74:
+		if (file->private_data != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#108: FILE: fs/cifs/file.c:80:
+				cERROR(1, ("could not find file instance for new file %p ", file));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#116: FILE: fs/cifs/file.c:87:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#122: FILE: fs/cifs/file.c:92:
+	cFYI(1, (" inode = 0x%p file flags are 0x%x for %s", inode, file->f_flags, full_path));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#148: FILE: fs/cifs/file.c:152:
+	if (buf == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#169: FILE: fs/cifs/file.c:175:
+			pCifsFile->closePend = FALSE;

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#173: FILE: fs/cifs/file.c:178:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#173: FILE: fs/cifs/file.c:178:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#176: FILE: fs/cifs/file.c:180:
+			if (pCifsInode) {

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#190: FILE: fs/cifs/file.c:191:
+				if (pCifsInode->clientCanCacheRead) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: fs/cifs/file.c:202:
+^I^I^I^I^I^Iif (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && $

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#203: FILE: fs/cifs/file.c:202:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#203: FILE: fs/cifs/file.c:202:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

ERROR:SPACING: space required after that ',' (ctx:VxO)
#203: FILE: fs/cifs/file.c:202:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 						                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#203: FILE: fs/cifs/file.c:202:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 						                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile)'
#203: FILE: fs/cifs/file.c:202:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 							(file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: fs/cifs/file.c:203:
+						if (timespec_equal(&file->f_dentry->d_inode->i_mtime,&temp) && 
 							(file->f_dentry->d_inode->i_size == (loff_t)le64_to_cpu(buf->EndOfFile))) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#209: FILE: fs/cifs/file.c:206:
+							if (file->f_dentry->d_inode->i_mapping) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#225: FILE: fs/cifs/file.c:224:
+				if ((oplock & 0xF) == OPLOCK_EXCLUSIVE) {
[...]
-				} else if((oplock & 0xF) == OPLOCK_READ)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#230: FILE: fs/cifs/file.c:227:
+					cFYI(1, ("Exclusive Oplock granted on inode %p", file->f_dentry->d_inode));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: fs/cifs/file.c:234:
+^I^I^Iif (oplock & CIFS_CREATE_ACTION) {           $

CHECK:CAMELCASE: Avoid CamelCase: <cifsFile>
#247: FILE: fs/cifs/file.c:262:
+static int cifs_relock_file(struct cifsFileInfo *cifsFile)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: fs/cifs/file.c:271:
+static int $

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#273: FILE: fs/cifs/file.c:294:
+	if (pCifsFile->invalidHandle == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#273: FILE: fs/cifs/file.c:294:
+	if (pCifsFile->invalidHandle == FALSE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#280: FILE: fs/cifs/file.c:300:
+	if (file->f_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#292: FILE: fs/cifs/file.c:313:
+	if (full_path == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#303: FILE: fs/cifs/file.c:344:
+/*	buf = kmalloc(sizeof(FILE_ALL_INFO), GFP_KERNEL);
+	if (!buf) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#328: FILE: fs/cifs/file.c:385:
+				cFYI(1, ("Exclusive Oplock granted on inode %p", file->f_dentry->d_inode));

CHECK:CAMELCASE: Avoid CamelCase: <pSMBFile>
#365: FILE: fs/cifs/file.c:431:
+		if (pSMBFile->search_resume_name)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == 0'
#382: FILE: fs/cifs/file.c:445:
+	if ((rc == 0) && CIFS_I(inode)->write_behind_rc)

CHECK:CAMELCASE: Avoid CamelCase: <pCFileStruct>
#413: FILE: fs/cifs/file.c:470:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:CAMELCASE: Avoid CamelCase: <endOfSearch>
#413: FILE: fs/cifs/file.c:470:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#413: FILE: fs/cifs/file.c:470:
+		if (pCFileStruct->srch_inf.endOfSearch == FALSE) {

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#425: FILE: fs/cifs/file.c:479:
+			cFYI(1, ("freeing smb buf in srch struct in closedir")); /* BB removeme BB */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <pfLock>
#443: FILE: fs/cifs/file.c:497:
+int cifs_lock(struct file *file, int cmd, struct file_lock *pfLock)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#484: FILE: fs/cifs/file.c:615:
+	if (file->f_dentry == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#489: FILE: fs/cifs/file.c:619:
+	if (cifs_sb == NULL) {
 		return -EBADF;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#489: FILE: fs/cifs/file.c:619:
+	if (cifs_sb == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#500: FILE: fs/cifs/file.c:649:
+			if (file->private_data == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#518: FILE: fs/cifs/file.c:665:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#518: FILE: fs/cifs/file.c:665:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#518: FILE: fs/cifs/file.c:665:
+				if ((file->f_dentry == NULL) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: fs/cifs/file.c:666:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#578: FILE: fs/cifs/file.c:736:
+	if (file->f_dentry == NULL)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#583: FILE: fs/cifs/file.c:740:
+	if (cifs_sb == NULL) {
 		return -EBADF;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#583: FILE: fs/cifs/file.c:740:
+	if (cifs_sb == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#602: FILE: fs/cifs/file.c:756:
+	if (file->f_dentry->d_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#613: FILE: fs/cifs/file.c:770:
+			if (file->private_data == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry == NULL'
#631: FILE: fs/cifs/file.c:786:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_dentry->d_inode == NULL'
#631: FILE: fs/cifs/file.c:786:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#631: FILE: fs/cifs/file.c:786:
+				if ((file->f_dentry == NULL) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: fs/cifs/file.c:787:
+				if ((file->f_dentry == NULL) ||
 				   (file->f_dentry->d_inode == NULL)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#673: FILE: fs/cifs/file.c:845:
+cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#673: FILE: fs/cifs/file.c:845:
+cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to > PAGE_CACHE_SIZE'
#696: FILE: fs/cifs/file.c:874:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from > to'
#696: FILE: fs/cifs/file.c:874:
+	if ((to > PAGE_CACHE_SIZE) || (from > to)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: fs/cifs/file.c:898:
+^I^Iif ((open_file->pfile) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#725: FILE: fs/cifs/file.c:898:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 
 			(open_file->pfile->f_flags & O_WRONLY))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: fs/cifs/file.c:899:
+		if ((open_file->pfile) && 
 		   ((open_file->pfile->f_flags & O_RDWR) || 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp->next"
#746: FILE: fs/cifs/file.c:924:
+		if (tmp->next == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!open_file"
#754: FILE: fs/cifs/file.c:930:
+	if (open_file == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: fs/cifs/file.c:994:
+^I^I^I^Iif ((open_file->invalidHandle) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: fs/cifs/file.c:1017:
+			cFYI(1, ("Illegal offsets, can not copy from %d to %d",
+				offset, to));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#845: FILE: fs/cifs/file.c:1026:
+		/* BB check if anything else missing out of ppw
+		   such as updating last write time */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#845: FILE: fs/cifs/file.c:1026:
+		   such as updating last write time */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#848: FILE: fs/cifs/file.c:1028:
+		rc = cifs_write(file, page_data+offset, to-offset,
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#848: FILE: fs/cifs/file.c:1028:
+		rc = cifs_write(file, page_data+offset, to-offset,
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: fs/cifs/file.c:1029:
+		rc = cifs_write(file, page_data+offset, to-offset,
                                         &position);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#913: FILE: fs/cifs/file.c:1097:
+	/* Rather than do the steps manually:
+	   lock the inode for writing

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#919: FILE: fs/cifs/file.c:1103:
+	   filemapfdatawrite appears easier for the time being */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: fs/cifs/file.c:1116:
+cifs_user_read(struct file *file, char __user *read_data, size_t read_size,
+	  loff_t *poffset)

CHECK:CAMELCASE: Avoid CamelCase: <pSMBr>
#952: FILE: fs/cifs/file.c:1128:
+	struct smb_com_read_rsp *pSMBr;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1086: FILE: fs/cifs/file.c:1313:
+		if (PAGE_CACHE_SIZE > bytes_read) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required before the open parenthesis '('
#1128: FILE: fs/cifs/file.c:1362:
+	for(i = 0; i < num_pages; ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1135: FILE: fs/cifs/file.c:1367:
+		if (list_empty(page_list)) {
 			break;
 		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1152: FILE: fs/cifs/file.c:1384:
+		if (contig_pages + i >  num_pages) {
 			contig_pages = num_pages - i;
 		}

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#1180: FILE: fs/cifs/file.c:1408:
+			if (rc== -EAGAIN) {
 			      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1207: FILE: fs/cifs/file.c:1452:
+^I^I^IcFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", $

WARNING:LONG_LINE_STRING: line length of 117 exceeds 100 columns
#1207: FILE: fs/cifs/file.c:1452:
+			cFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", 

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1208: FILE: fs/cifs/file.c:1453:
+^I^I^I^Ibytes_read, offset)); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1208: FILE: fs/cifs/file.c:1453:
+			cFYI(1, ("No bytes read (%d) at offset %lld . Cleaning remaining pages from readahead list", 
+				bytes_read, offset)); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1235: FILE: fs/cifs/file.c:1481:
+static int $

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#1276: FILE: fs/cifs/file.c:1545:
+int is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:CAMELCASE: Avoid CamelCase: <cifsInode>
#1276: FILE: fs/cifs/file.c:1545:
+int is_size_safe_to_change(struct cifsInodeInfo *cifsInode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsInode"
#1284: FILE: fs/cifs/file.c:1552:
+	if (cifsInode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!open_file"
#1292: FILE: fs/cifs/file.c:1558:
+		if (open_file == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1303: FILE: fs/cifs/file.c:1565:
+^I^Iif ((open_file->pfile) && $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1303: FILE: fs/cifs/file.c:1565:
+		if ((open_file->pfile) && 
[...]
 			 rc = FALSE;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#1303: FILE: fs/cifs/file.c:1565:
+		if ((open_file->pfile) && 
+		   ((open_file->pfile->f_flags & O_RDWR) || 
+		   (open_file->pfile->f_flags & O_WRONLY))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1304: FILE: fs/cifs/file.c:1566:
+^I^I   ((open_file->pfile->f_flags & O_RDWR) || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1304: FILE: fs/cifs/file.c:1566:
+		if ((open_file->pfile) && 
+		   ((open_file->pfile->f_flags & O_RDWR) || 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp->next"
#1311: FILE: fs/cifs/file.c:1571:
+		if (tmp->next == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1324: FILE: fs/cifs/file.c:1581:
+fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData, $

CHECK:CAMELCASE: Avoid CamelCase: <pfindData>
#1324: FILE: fs/cifs/file.c:1581:
+fill_in_inode(struct inode *tmp_inode, FILE_DIRECTORY_INFO *pfindData, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1335: FILE: fs/cifs/file.c:1603:
+		   or retrieve from NTFS stream extended attribute */

CHECK:CAMELCASE: Avoid CamelCase: <cifsInfo>
#1336: FILE: fs/cifs/file.c:1604:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <inUse>
#1336: FILE: fs/cifs/file.c:1604:
+	if (atomic_read(&cifsInfo->inUse) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#1383: FILE: fs/cifs/file.c:1774:
+		if (*ptmp_inode == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#1386: FILE: fs/cifs/file.c:1776:
+			if (*ptmp_inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1395: FILE: fs/cifs/file.c:1783:
+		if (tmp_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptmp_inode"
#1404: FILE: fs/cifs/file.c:1791:
+		if (*ptmp_inode == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1415: FILE: fs/cifs/file.c:1803:
+static void $

CHECK:CAMELCASE: Avoid CamelCase: <Unicode>
#1417: FILE: fs/cifs/file.c:1805:
+		 unsigned int len, int Unicode, struct nls_table *nls_tab)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1427: FILE: fs/cifs/file.c:1816:
+^Iif (Unicode) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1438: FILE: fs/cifs/file.c:1825:
+		cERROR(1, ("failed new resume key allocate, length %d",
 				  cifsFile->resume_name_length));

CHECK:CAMELCASE: Avoid CamelCase: <cifs_strtoUCS>
#1444: FILE: fs/cifs/file.c:1829:
+		cifs_strtoUCS((wchar_t *)cifsFile->search_resume_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1445: FILE: fs/cifs/file.c:1830:
+		cifs_strtoUCS((wchar_t *)cifsFile->search_resume_name,
 			filename, len, nls_tab);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_inode == NULL'
#1471: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_dentry == NULL'
#1471: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1471: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {
 		return -ENOMEM;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_inode"
#1471: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1471: FILE: fs/cifs/file.c:1850:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <FileName>
#1489: FILE: fs/cifs/file.c:1867:
+		cFYI(1, ("Error %d on filldir of %s", rc, pfindData->FileName));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1499: FILE: fs/cifs/file.c:1874:
+cifs_filldir_unix(struct qstr *pqstring, FILE_UNIX_INFO *pUnixFindData, $

CHECK:CAMELCASE: Avoid CamelCase: <pUnixFindData>
#1499: FILE: fs/cifs/file.c:1874:
+cifs_filldir_unix(struct qstr *pqstring, FILE_UNIX_INFO *pUnixFindData, 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_inode == NULL'
#1509: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp_dentry == NULL'
#1509: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_inode"
#1509: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_dentry"
#1509: FILE: fs/cifs/file.c:1885:
+	if ((tmp_inode == NULL) || (tmp_dentry == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <experimEnabled>
#1548: FILE: fs/cifs/file.c:1931:
+	if (!experimEnabled)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#1556: FILE: fs/cifs/file.c:1938:
+	if (file->f_dentry == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSMaxBufSize>
#1565: FILE: fs/cifs/file.c:1946:
+	if (bufsize > CIFSMaxBufSize) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1574: FILE: fs/cifs/file.c:1953:
+	if (data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#1583: FILE: fs/cifs/file.c:1962:
+	if (full_path == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#1618: FILE: fs/cifs/file.c:2015:
+			if (file->private_data == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1630: FILE: fs/cifs/file.c:2033:
+^I^I^I^I(FILE_DIRECTORY_INFO *)((char *) pfindData + $

CHECK:SPACING: No space is necessary after a cast
#1630: FILE: fs/cifs/file.c:2033:
+				(FILE_DIRECTORY_INFO *)((char *) pfindData + 

CHECK:CAMELCASE: Avoid CamelCase: <lastFindData>
#1634: FILE: fs/cifs/file.c:2035:
+			if ((char *)lastFindData > (char *)pfindData + bufsize) {

CHECK:CAMELCASE: Avoid CamelCase: <UnixSearch>
#1642: FILE: fs/cifs/file.c:2042:
+			if (UnixSearch == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#1642: FILE: fs/cifs/file.c:2042:
+			if (UnixSearch == FALSE) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1649: FILE: fs/cifs/file.c:2047:
+					cFYI(1, ("Illegal resume file name length %d",
 						cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1657: FILE: fs/cifs/file.c:2054:
+				cFYI(1, ("Last file: %s with name %d bytes long",
 					lastFindData->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1660: FILE: fs/cifs/file.c:2056:
+				if (cifsFile->search_resume_name == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1669: FILE: fs/cifs/file.c:2066:
+^I^I^I^I^Ifor(i = 0; (pfindDataUnix->FileName[i] $

ERROR:SPACING: space required before the open parenthesis '('
#1669: FILE: fs/cifs/file.c:2066:
+					for(i = 0; (pfindDataUnix->FileName[i] 

CHECK:CAMELCASE: Avoid CamelCase: <pfindDataUnix>
#1669: FILE: fs/cifs/file.c:2066:
+					for(i = 0; (pfindDataUnix->FileName[i] 

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1674: FILE: fs/cifs/file.c:2069:
+						if (i > bufsize - 64)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1688: FILE: fs/cifs/file.c:2080:
+					cFYI(1, ("Illegal resume file name length %d",
 						cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1696: FILE: fs/cifs/file.c:2087:
+				cFYI(1, ("Last file: %s with name %d bytes long",
 					pfindDataUnix->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1699: FILE: fs/cifs/file.c:2089:
+				if (cifsFile->search_resume_name == NULL) {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1708: FILE: fs/cifs/file.c:2123:
+							reset_resume_key(file, pfindData->FileName, qstring.len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1709: FILE: fs/cifs/file.c:2124:
+							reset_resume_key(file, pfindData->FileName, qstring.len,
 								Unicode, cifs_sb->local_nls);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1726: FILE: fs/cifs/file.c:2154:
+						if (cifs_filldir_unix(&qstring,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1727: FILE: fs/cifs/file.c:2155:
+						if (cifs_filldir_unix(&qstring,
 								  pfindDataUnix,

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1735: FILE: fs/cifs/file.c:2164:
+								qstring.len, Unicode, cifs_sb->local_nls);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1745: FILE: fs/cifs/file.c:2210:
+			cFYI(1, ("Count: %d  End: %d ",
 			      le16_to_cpu(findNextParms.SearchCount),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1767: FILE: fs/cifs/file.c:2231:
+						cFYI(1, ("Illegal resume file name length %d",
 							cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1781: FILE: fs/cifs/file.c:2243:
+					cFYI(1, ("Last file: %s with name %d bytes long",
 						lastFindData->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1784: FILE: fs/cifs/file.c:2245:
+					if (cifsFile->search_resume_name == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1793: FILE: fs/cifs/file.c:2256:
+^I^I^I^I^I^Ifor (i=0; (pfindDataUnix->FileName[i] $

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1793: FILE: fs/cifs/file.c:2256:
+						for (i=0; (pfindDataUnix->FileName[i] 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1793: FILE: fs/cifs/file.c:2256:
+						for (i=0; (pfindDataUnix->FileName[i] 
 						      ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1798: FILE: fs/cifs/file.c:2259:
+							if (i > bufsize - 64)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1810: FILE: fs/cifs/file.c:2271:
+						cFYI(1, ("Illegal resume file name length %d",
 								cifsFile->resume_name_length));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1824: FILE: fs/cifs/file.c:2283:
+					cFYI(1, ("fnext last file: %s with name %d bytes long",
 						pfindDataUnix->FileName,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsFile->search_resume_name"
#1827: FILE: fs/cifs/file.c:2285:
+					if (cifsFile->search_resume_name == NULL) {

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1837: FILE: fs/cifs/file.c:2364:
+								reset_resume_key(file, pfindDataUnix->FileName, qstring.len,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1838: FILE: fs/cifs/file.c:2365:
+									Unicode, cifs_sb->local_nls);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1838: FILE: fs/cifs/file.c:2365:
+								reset_resume_key(file, pfindDataUnix->FileName, qstring.len,
+									Unicode, cifs_sb->local_nls);

CHECK:CAMELCASE: Avoid CamelCase: <FreeXid>
#1848: FILE: fs/cifs/file.c:2391:
+	FreeXid(xid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1854: FILE: fs/cifs/file.c:2395:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1855: FILE: fs/cifs/file.c:2396:
+cifs_prepare_write(struct file *file, struct page *page, unsigned from, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1855: FILE: fs/cifs/file.c:2396:
+cifs_prepare_write(struct file *file, struct page *page, unsigned from, 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1856: FILE: fs/cifs/file.c:2397:
+		   unsigned to)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1861: FILE: fs/cifs/file.c:2401:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1861: FILE: fs/cifs/file.c:2401:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1861: FILE: fs/cifs/file.c:2401:
+	cFYI(1, ("prepare write for page %p from %d to %d",page,from,to));
 	                                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'to == PAGE_CACHE_SIZE'
#1870: FILE: fs/cifs/file.c:2412:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from == 0'
#1870: FILE: fs/cifs/file.c:2412:
+		if ((to == PAGE_CACHE_SIZE) && (from == 0))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202342.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 34 warnings, 112 checks, 1717 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202342.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
