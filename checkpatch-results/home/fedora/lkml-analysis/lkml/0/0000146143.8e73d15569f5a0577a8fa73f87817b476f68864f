CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/key.h:266:
+extern int copy_keys(struct task_struct *tsk, struct pnotify_subscriber *sub, void *olddata);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/key.h:268:
+extern void exit_keys(struct task_struct *task, struct pnotify_subscriber *sub);

WARNING:TYPO_SPELLING: 'assocated' may be misspelled - perhaps 'associated'?
#155: FILE: security/keys/key.c:1046:
+	/* Allocate memory for task assocated key_task structure */
 	                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#156: FILE: security/keys/key.c:1047:
+	kt = (struct key_task *)kmalloc(sizeof(struct key_task),GFP_KERNEL);
 	                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#156: FILE: security/keys/key.c:1047:
+	kt = (struct key_task *)kmalloc(sizeof(struct key_task),GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*kt)...) over kmalloc(sizeof(struct key_task)...)
#156: FILE: security/keys/key.c:1047:
+	kt = (struct key_task *)kmalloc(sizeof(struct key_task),GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#158: FILE: security/keys/key.c:1049:
+		printk(KERN_ERR "Insufficient memory to allocate key_task structure"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#158: FILE: security/keys/key.c:1049:
+	if (!kt) {
+		printk(KERN_ERR "Insufficient memory to allocate key_task structure"

WARNING:SPLIT_STRING: quoted string split across lines
#159: FILE: security/keys/key.c:1050:
+		printk(KERN_ERR "Insufficient memory to allocate key_task structure"
+		  " in key_init function.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: security/keys/key.c:1052:
+   }$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#167: FILE: security/keys/key.c:1058:
+		printk(KERN_ERR "Insufficient memory to add to subscriber list structure"

WARNING:SPLIT_STRING: quoted string split across lines
#168: FILE: security/keys/key.c:1059:
+		printk(KERN_ERR "Insufficient memory to add to subscriber list structure"
+		  " in key_init function.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#203: FILE: security/keys/process_keys.c:157:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#203: FILE: security/keys/process_keys.c:157:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#204: FILE: security/keys/process_keys.c:158:
+		printk(KERN_ERR "install_thread_keyring pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#204: FILE: security/keys/process_keys.c:158:
+		printk(KERN_ERR "install_thread_keyring pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: security/keys/process_keys.c:290:
+	kt = (struct key_task *)kmalloc(sizeof(struct key_task),GFP_KERNEL);
 	                                                       ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#230: FILE: security/keys/process_keys.c:290:
+	kt = (struct key_task *)kmalloc(sizeof(struct key_task),GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*kt)...) over kmalloc(sizeof(struct key_task)...)
#230: FILE: security/keys/process_keys.c:290:
+	kt = (struct key_task *)kmalloc(sizeof(struct key_task),GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#232: FILE: security/keys/process_keys.c:292:
+		printk(KERN_ERR "Insufficient memory to allocate key_task structure"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#232: FILE: security/keys/process_keys.c:292:
+	if (!kt) {
+		printk(KERN_ERR "Insufficient memory to allocate key_task structure"

WARNING:SPLIT_STRING: quoted string split across lines
#233: FILE: security/keys/process_keys.c:293:
+		printk(KERN_ERR "Insufficient memory to allocate key_task structure"
+		  " in copy_keys function.  Task was: %d", tsk->pid);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_keys', this function's name, in a string
#233: FILE: security/keys/process_keys.c:293:
+		  " in copy_keys function.  Task was: %d", tsk->pid);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: security/keys/process_keys.c:325:
+	struct key_task *kt = ((struct key_task *)(sub->data));
+	if (kt == NULL) { /* shouldn't ever happen */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kt"
#258: FILE: security/keys/process_keys.c:325:
+	if (kt == NULL) { /* shouldn't ever happen */

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#259: FILE: security/keys/process_keys.c:326:
+		printk(KERN_ERR "exit_keys pnotify subscriber data ptr null, task: %d\n", task->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#259: FILE: security/keys/process_keys.c:326:
+		printk(KERN_ERR "exit_keys pnotify subscriber data ptr null, task: %d\n", task->pid);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exit_keys', this function's name, in a string
#259: FILE: security/keys/process_keys.c:326:
+		printk(KERN_ERR "exit_keys pnotify subscriber data ptr null, task: %d\n", task->pid);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#280: FILE: security/keys/process_keys.c:348:
+	 * need to retrieve the data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#284: FILE: security/keys/process_keys.c:352:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#284: FILE: security/keys/process_keys.c:352:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#285: FILE: security/keys/process_keys.c:353:
+		printk(KERN_ERR "exec_keys pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#285: FILE: security/keys/process_keys.c:353:
+		printk(KERN_ERR "exec_keys pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#310: FILE: security/keys/process_keys.c:403:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#310: FILE: security/keys/process_keys.c:403:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#311: FILE: security/keys/process_keys.c:404:
+		printk(KERN_ERR "key_fsuid_changed pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#311: FILE: security/keys/process_keys.c:404:
+		printk(KERN_ERR "key_fsuid_changed pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#341: FILE: security/keys/process_keys.c:432:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#341: FILE: security/keys/process_keys.c:432:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#342: FILE: security/keys/process_keys.c:433:
+		printk(KERN_ERR "key_fsgid_changed pnotify subscriber or data ptr was null, task: %d\n", tsk->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#342: FILE: security/keys/process_keys.c:433:
+		printk(KERN_ERR "key_fsgid_changed pnotify subscriber or data ptr was null, task: %d\n", tsk->pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#377: FILE: security/keys/process_keys.c:480:
+	if (sub == NULL || sub->data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#377: FILE: security/keys/process_keys.c:480:
+	if (sub == NULL || sub->data == NULL) {

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#378: FILE: security/keys/process_keys.c:481:
+		printk(KERN_ERR "search_process_keyrings pnotify subscriber or data ptr null, task: %d\n", context->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#378: FILE: security/keys/process_keys.c:481:
+		printk(KERN_ERR "search_process_keyrings pnotify subscriber or data ptr null, task: %d\n", context->pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#420: FILE: security/keys/process_keys.c:640:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#420: FILE: security/keys/process_keys.c:640:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#421: FILE: security/keys/process_keys.c:641:
+		printk(KERN_ERR "search_process_keyrings pnotify subscriber or data ptr null, task: %d\n", context->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#421: FILE: security/keys/process_keys.c:641:
+		printk(KERN_ERR "search_process_keyrings pnotify subscriber or data ptr null, task: %d\n", context->pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#480: FILE: security/keys/keyctl.c:940:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#480: FILE: security/keys/keyctl.c:940:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#481: FILE: security/keys/keyctl.c:941:
+		printk(KERN_ERR "keyctl_set_reqkey_keyring pnotify subscriber or data ptr null, task: %d\n", current->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#481: FILE: security/keys/keyctl.c:941:
+		printk(KERN_ERR "keyctl_set_reqkey_keyring pnotify subscriber or data ptr null, task: %d\n", current->pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#547: FILE: security/keys/request_key.c:48:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#547: FILE: security/keys/request_key.c:48:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#548: FILE: security/keys/request_key.c:49:
+		printk(KERN_ERR "call_request_key pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#548: FILE: security/keys/request_key.c:49:
+		printk(KERN_ERR "call_request_key pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub"
#582: FILE: security/keys/request_key.c:321:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sub->data"
#582: FILE: security/keys/request_key.c:321:
+	if (sub == NULL || sub->data == NULL) { /* shouldn't happen */

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#583: FILE: security/keys/request_key.c:322:
+		printk(KERN_ERR "request_key_link pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#583: FILE: security/keys/request_key.c:322:
+		printk(KERN_ERR "request_key_link pnotify subscriber or data ptr null, task: %d\n", tsk->pid);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 36 warnings, 23 checks, 502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146143.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
