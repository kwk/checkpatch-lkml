WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
diff -ruNp 406-dynamic-pageflags.patch-old/include/linux/dyn_pageflags.h 406-dynamic-pageflags.patch-new/include/linux/dyn_pageflags.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#31: FILE: include/linux/dyn_pageflags.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#32: FILE: include/linux/dyn_pageflags.h:2:
+ * include/linux/dyn_pageflags.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#48: FILE: include/linux/dyn_pageflags.h:18:
+typedef unsigned long ** dyn_pageflags_t;

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#48: FILE: include/linux/dyn_pageflags.h:18:
+typedef unsigned long ** dyn_pageflags_t;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#52: FILE: include/linux/dyn_pageflags.h:22:
+#define PAGEBIT(page) ((int) ((page_to_pfn(page))%(8 * sizeof(unsigned long))))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#52: FILE: include/linux/dyn_pageflags.h:22:
+#define PAGEBIT(page) ((int) ((page_to_pfn(page))%(8 * sizeof(unsigned long))))
                                                  ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#58: FILE: include/linux/dyn_pageflags.h:28:
+#define PAGEINDEX(page) ((BITNUMBER(page) - (BITS_PER_PAGE * PAGENUMBER(page)))/(8*sizeof(unsigned long)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#58: FILE: include/linux/dyn_pageflags.h:28:
+#define PAGEINDEX(page) ((BITNUMBER(page) - (BITS_PER_PAGE * PAGENUMBER(page)))/(8*sizeof(unsigned long)))
                                                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#58: FILE: include/linux/dyn_pageflags.h:28:
+#define PAGEINDEX(page) ((BITNUMBER(page) - (BITS_PER_PAGE * PAGENUMBER(page)))/(8*sizeof(unsigned long)))
                                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#58: FILE: include/linux/dyn_pageflags.h:28:
+#define PAGEINDEX(page) ((BITNUMBER(page) - (BITS_PER_PAGE * PAGENUMBER(page)))/(8*sizeof(unsigned long)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#60: FILE: include/linux/dyn_pageflags.h:30:
+#define PAGE_UL_PTR(bitmap, pagenum) ((bitmap[PAGENUMBER(pagenum)])+PAGEINDEX(pagenum))
                                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pagenum' - possible side-effects?
#60: FILE: include/linux/dyn_pageflags.h:30:
+#define PAGE_UL_PTR(bitmap, pagenum) ((bitmap[PAGENUMBER(pagenum)])+PAGEINDEX(pagenum))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'counter' - possible side-effects?
#62: FILE: include/linux/dyn_pageflags.h:32:
+#define __get_next_bit_on_safe(bitmap, counter) \
+	do { \
+		(counter)++; \
+	} while(((counter) < max_mapnr) && \
+		(!test_bit(PAGEBIT(pfn_to_page((counter))), \
+			PAGE_UL_PTR(bitmap, pfn_to_page((counter))))));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#62: FILE: include/linux/dyn_pageflags.h:32:
+#define __get_next_bit_on_safe(bitmap, counter) \
+	do { \
+		(counter)++; \
+	} while(((counter) < max_mapnr) && \
+		(!test_bit(PAGEBIT(pfn_to_page((counter))), \
+			PAGE_UL_PTR(bitmap, pfn_to_page((counter))))));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#65: FILE: include/linux/dyn_pageflags.h:35:
+	} while(((counter) < max_mapnr) && \

ERROR:SPACING: space required before the open parenthesis '('
#73: FILE: include/linux/dyn_pageflags.h:43:
+	} while((counter < max_mapnr) &&

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#80: FILE: include/linux/dyn_pageflags.h:50:
+/* With the above macros defined, you can do...
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/dyn_pageflags.h:59:
+extern void clear_dyn_pageflags(dyn_pageflags_t pagemap);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/dyn_pageflags.h:60:
+extern int allocate_dyn_pageflags(dyn_pageflags_t *pagemap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/dyn_pageflags.h:61:
+extern int free_dyn_pageflags(dyn_pageflags_t *pagemap);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: lib/dyn_pageflags.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#99: FILE: lib/dyn_pageflags.c:2:
+ * lib/dyn_pageflags.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: lib/dyn_pageflags.c:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: lib/dyn_pageflags.c:31:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: lib/dyn_pageflags.c:45:
+	BUG_ON(*pagemap);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#147: FILE: lib/dyn_pageflags.c:50:
+		(*pagemap)[i] = (unsigned long *) get_zeroed_page(GFP_ATOMIC);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#149: FILE: lib/dyn_pageflags.c:52:
+			printk("Error. Unable to allocate memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#150: FILE: lib/dyn_pageflags.c:53:
+			printk("Error. Unable to allocate memory for "
+					"dynamic pageflags.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: lib/dyn_pageflags.c:69:
+	int i = 0;
+	if (!*pagemap)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: lib/dyn_pageflags.c:71:
+^I$

CHECK:SPACING: No space is necessary after a cast
#170: FILE: lib/dyn_pageflags.c:73:
+		free_pages((unsigned long) (*pagemap)[i], 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: lib/dyn_pageflags.c:74:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170368.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 13 warnings, 13 checks, 149 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170368.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
