WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: kernel/msa.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#76: FILE: kernel/msa.c:11:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#87: FILE: kernel/msa.c:22:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#105: FILE: kernel/msa.c:40:
+static DEFINE_PER_CPU(struct msa_irq[NR_IRQS+1], msa_irq);
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: kernel/msa.c:42:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: kernel/msa.c:48:
+ * Update the times in both prev and next.  It may be necessary to infer the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: kernel/msa.c:76:
+		clk_t qfp = per_cpu(queueflip_time, msnext->lastqueued);
+		msnext->cur_state = ONACTIVEQUEUE;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: kernel/msa.c:83:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: kernel/msa.c:94:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: kernel/msa.c:108:
+^I^Icase TASK_RUNNING:^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: kernel/msa.c:116:
+^I^I} $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#181: FILE: kernel/msa.c:116:
+
+		} 

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#188: FILE: kernel/msa.c:123:
+		switch(prev->state) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#189: FILE: kernel/msa.c:124:
+		case TASK_INTERRUPTIBLE: /* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: kernel/msa.c:138:
+^I^Icase TASK_RUNNING:^I^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#223: FILE: kernel/msa.c:158:
+	msnext->cur_state = interrupted ? INTERRUPTED : (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: kernel/msa.c:170:
+ * It initialises the microstate timers to zero, and sets the $

WARNING:SIZEOF_PARENTHESIS: sizeof *msp should be sizeof(*msp)
#242: FILE: kernel/msa.c:177:
+	memset(msp, 0, sizeof *msp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: kernel/msa.c:188:
+ * The time spent in the current state is updated, and the time of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: kernel/msa.c:189:
+ * last state change set to MSA_NOW().  Then the current state is updated $

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#257: FILE: kernel/msa.c:192:
+static void inline __msa_set_timer(struct microstates *msp, int next_state)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#266: FILE: kernel/msa.c:201:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: kernel/msa.c:208:
+ * This function is called, e.g., from __activate_task(), when an $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: kernel/msa.c:222:
+ * Helper routines, to be called from assembly language stubs $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: kernel/msa.c:229:
+ * if the process is interrupted, the system remembers that the code $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: kernel/msa.c:258:
+ * Update the current task state to INTERRUPTED, and start accumulating time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: kernel/msa.c:261:
+void msa_start_irq(int irq) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: kernel/msa.c:269:
+	BUG_ON(!in_interrupt());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: kernel/msa.c:283:
+ * Architectures such as IA64 can handle more than one interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: kernel/msa.c:284:
+ * without allowing the interrupted process to continue.  This function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: kernel/msa.c:287:
+void msa_continue_irq(int oldirq, int newirq) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#359: FILE: kernel/msa.c:294:
+	BUG_ON(!in_interrupt());

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: kernel/msa.c:305:
+ * Update the time spent handling irq, then update the current task's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: kernel/msa.c:308:
+void msa_finish_irq(int irq) $

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#387: FILE: kernel/msa.c:322:
+	 * (This charges the remainder of the interupt handler and 
 	                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: kernel/msa.c:322:
+^I * (This charges the remainder of the interupt handler and $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: kernel/msa.c:326:
+		BUG_ON(mp->cur_state != INTERRUPTED);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#399: FILE: kernel/msa.c:334:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: kernel/msa.c:341:
+ * Return the total number of microseconds since boot spent $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: kernel/msa.c:344:
+clk_t msa_irq_time(int cpu, int irq) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: kernel/msa.c:347:
+	clk_t x = per_cpu(msa_irq, cpu)[irq].times;
+	x = MSA_TO_NSEC(x);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#417: FILE: kernel/msa.c:352:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: kernel/msa.c:358:
+ * Called from release_task(). (Note: it may be better to call this $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#442: FILE: kernel/msa.c:377:
+	for (s = 0; s < NR_MICRO_STATES; s++) {
+		*msp++ += *msc++ + *msgc++;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: kernel/msa.c:388:
+ * 'which' can take the values $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: kernel/msa.c:390:
+ *   MSA_SELF:  return times for current process, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: kernel/msa.c:393:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: kernel/msa.c:395:
+ * Thus a user program can ask for only the  few most interesting ones $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: kernel/msa.c:396:
+ * if it wishes.  Also, we can add more in the kernel as we need $

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#464: FILE: kernel/msa.c:399:
+long asmlinkage sys_msa(int ntimers, int which, __u64 __user *timers)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#485: FILE: kernel/msa.c:420:
+			printk("In Syscall; msa_state = %d \n", msp->cur_state);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#485: FILE: kernel/msa.c:420:
+			printk("In Syscall; msa_state = %d \n", msp->cur_state);

CHECK:BRACES: braces {} should be used on all arms of this statement
#493: FILE: kernel/msa.c:428:
+		if (which == MSA_SELF) {
[...]
+		else 
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#500: FILE: kernel/msa.c:435:
+			leader_task = task = current->group_leader;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: kernel/msa.c:445:
+^I^Ielse $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#510: FILE: kernel/msa.c:445:
+		}
+		else 

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#522: FILE: kernel/msa.c:457:
+		__u64 x = MSA_TO_NSEC(*tp++);
+		if (copy_to_user(timers++, &x, sizeof x))

WARNING:SIZEOF_PARENTHESIS: sizeof x should be sizeof(x)
#522: FILE: kernel/msa.c:457:
+		if (copy_to_user(timers++, &x, sizeof x))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#535: FILE: kernel/msa.c:470:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: include/linux/msa.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#543: FILE: include/linux/msa.h:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: include/linux/msa.h:29:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#575: FILE: include/linux/msa.h:33:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: include/linux/msa.h:36:
+ * The number of timers wanted is passed as argument, in case not all $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/linux/msa.h:44:
+extern long msa(int ntimers, int which, __u64 __user *timers);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: include/linux/sched.h:630:
+   ^Istruct microstates microstates;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#619: FILE: include/linux/sched.h:630:
+   ^Istruct microstates microstates;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: include/linux/sched.h:630:
+   ^Istruct microstates microstates;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#629: FILE: include/asm-generic/msa.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: include/asm-generic/msa.h:3:
+ * Provide a generic time-of-day clock for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#642: FILE: include/asm-generic/msa.h:14:
+ * Every architecture is supposed to provide sched_clock, a free-running, $

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#645: FILE: include/asm-generic/msa.h:17:
+#  define MSA_NOW(now)  do { (now) = sched_clock(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: include/linux/msa-kernel.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#655: FILE: include/linux/msa-kernel.h:1:
+/* 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#670: FILE: include/linux/msa-kernel.h:16:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#680: FILE: include/linux/msa-kernel.h:26:
+	unsigned flags;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#689: FILE: include/linux/msa-kernel.h:35:
+#define QUEUE_FLIPPED	(1<<0)	/* Active and Expired queues were swapped */
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#689: FILE: include/linux/msa-kernel.h:35:
+#define QUEUE_FLIPPED	(1<<0)	/* Active and Expired queues were swapped */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#690: FILE: include/linux/msa-kernel.h:36:
+#define MSA_SYS		(1<<1)	/* This task executing in system call */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#690: FILE: include/linux/msa-kernel.h:36:
+#define MSA_SYS		(1<<1)	/* This task executing in system call */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#692: FILE: include/linux/msa-kernel.h:38:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: include/linux/msa-kernel.h:39:
+extern long sys_msa(int ntimers, int which, clk_t __user *timers);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#695: FILE: include/linux/msa-kernel.h:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#700: FILE: include/linux/msa-kernel.h:46:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: include/linux/msa-kernel.h:64:
+static inline void msa_next_state(struct task_struct *p, enum thread_state next_state) $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#723: FILE: include/linux/msa-kernel.h:69:
+static inline void msa_flip_expired(struct task_struct *prev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200059.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 24 warnings, 21 checks, 670 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200059.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
