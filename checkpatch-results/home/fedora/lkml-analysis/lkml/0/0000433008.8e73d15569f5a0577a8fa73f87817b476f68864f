WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .7234-linux-2.5.34/arch/i386/kernel/smpboot.c .7234-linux-2.5.34.updated/arch/i386/kernel/smpboot.c

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#44: FILE: arch/i386/kernel/smpboot.c:1225:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#50: FILE: arch/i386/kernel/smpboot.c:1231:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#65: FILE: arch/ppc/kernel/smp.c:443:
+	return -ENOSYS;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#71: FILE: arch/ppc/kernel/smp.c:449:
+	BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/asm-i386/smp.h:126:
+extern int __cpu_disable(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/asm-i386/smp.h:127:
+extern void __cpu_die(unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/asm-ppc/smp.h:71:
+extern int __cpu_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/asm-ppc/smp.h:72:
+extern void __cpu_die(unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/sched.h:435:
+extern void migrate_all_tasks(void);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#146: FILE: include/linux/smp.h:113:
+static inline int cpu_up(unsigned int cpu) { return -ENOSYS; }

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#161: FILE: kernel/cpu.c:15:
+#include <asm/uaccess.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#170: FILE: kernel/cpu.c:24:
+ * cpu' with certain environment variables set.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#186: FILE: kernel/cpu.c:40:
+	envp [i++] = "HOME=/";

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#187: FILE: kernel/cpu.c:41:
+	envp [i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#188: FILE: kernel/cpu.c:42:
+	envp [i++] = cpu_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#189: FILE: kernel/cpu.c:43:
+	envp [i++] = action_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#190: FILE: kernel/cpu.c:44:
+	envp [i] = NULL;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#192: FILE: kernel/cpu.c:46:
+	return call_usermodehelper(argv [0], argv, envp);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#198: FILE: kernel/cpu.c:52:
+	DECLARE_BITMAP(mask, NR_CPUS) = CPU_MASK_ALL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: kernel/cpu.c:54:
+^Iif ((ret = down_interruptible(&cpucontrol)) != 0) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#200: FILE: kernel/cpu.c:54:
+	if ((ret = down_interruptible(&cpucontrol)) != 0) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: kernel/cpu.c:75:
+		printk("CPU disable failed: %i\n", ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#224: FILE: kernel/cpu.c:78:
+	BUG_ON(cpu_online(cpu));

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: kernel/cpu.c:81:
+           not running now). */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#227: FILE: kernel/cpu.c:81:
+	/* Move other tasks off to other CPUs (simple since they are
+           not running now). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#227: FILE: kernel/cpu.c:81:
+           not running now). */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#244: FILE: kernel/cpu.c:98:
+	printk("Running CPU hotplug remove for cpu %u\n", cpu);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: kernel/cpu.c:100:
+^Iprintk("Done sbin hotplug\n"); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#246: FILE: kernel/cpu.c:100:
+	printk("Done sbin hotplug\n"); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: kernel/cpu.c:102:
+^Iprintk("Done with cpucontrol\n"); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#248: FILE: kernel/cpu.c:102:
+	printk("Done with cpucontrol\n"); 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: kernel/cpu.c:109:
+				printk("Left %p: %s\n", p, p->comm);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#269: FILE: kernel/cpu.c:123:
+struct cpu_device
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#283: FILE: kernel/cpu.c:137:
+	if (off >= strlen(out)) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#284: FILE: kernel/cpu.c:138:
+	if (off + count > strlen(out)) count = strlen(out) - off;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#285: FILE: kernel/cpu.c:139:
+	memcpy(buf, out+off, count);
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#338: FILE: kernel/cpu.c:192:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: kernel/cpu.c:195:
+			struct cpu_device *cpudir;
+			cpudir = kmalloc(sizeof(*cpudir), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#356: FILE: kernel/cpu.c:210:
+__initcall(create_per_cpu_entries);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: kernel/cpu.c:216:
+       return -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#362: FILE: kernel/cpu.c:216:
+       return -ENOSYS;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#378: FILE: kernel/cpu.c:258:
+#if 0 /* FIXME: Don't do this during boot. --RR */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: kernel/sched.c:415:
+^I^I * currently. Do not violate hard affinity. Do not pull $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#410: FILE: kernel/sched.c:750:
+	/* CPU going down is a special case: we don't pull more tasks
+	   onboard */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#410: FILE: kernel/sched.c:750:
+	   onboard */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#422: FILE: kernel/sched.c:1979:
+/* Move (not current) task off this cpu, onto dest cpu.  Reference to
+   task must be held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#422: FILE: kernel/sched.c:1979:
+   task must be held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#450: FILE: kernel/sched.c:2007:
+/* Slow but sure.  We don't fight against load_balance, new people
+   setting affinity, or try_to_wake_up's fast path pulling things in,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#451: FILE: kernel/sched.c:2008:
+   as cpu_online() no longer true. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#457: FILE: kernel/sched.c:2014:
+	DECLARE_BITMAP(cpus_allowed, NR_CPUS);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#466: FILE: kernel/sched.c:2023:
+		/* Kernel threads which are bound to specific
+		   processors need to look after themselves

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#467: FILE: kernel/sched.c:2024:
+		   with their own callbacks */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->mm"
#468: FILE: kernel/sched.c:2025:
+		if (p->mm == NULL

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#469: FILE: kernel/sched.c:2026:
+		if (p->mm == NULL
+		    && find_first_zero_bit(p->cpus_allowed,NR_CPUS) != NR_CPUS)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: kernel/sched.c:2026:
+		    && find_first_zero_bit(p->cpus_allowed,NR_CPUS) != NR_CPUS)
 		                                          ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#469: FILE: kernel/sched.c:2026:
+		    && find_first_zero_bit(p->cpus_allowed,NR_CPUS) != NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#487: FILE: kernel/sched.c:2044:
+	if (dest_cpu == NR_CPUS) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#510: FILE: kernel/sched.c:2067:
+		schedule_timeout(30*HZ);
 		                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#562: FILE: kernel/sched.c:2128:
+ ^I^Imove_task_away(p, any_online_cpu(p->cpus_allowed));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#562: FILE: kernel/sched.c:2128:
+ ^I^Imove_task_away(p, any_online_cpu(p->cpus_allowed));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: kernel/sched.c:2128:
+ ^I^Imove_task_away(p, any_online_cpu(p->cpus_allowed));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#567: FILE: kernel/sched.c:2133:
+	printk("Migration thread for %u exiting\n", cpu);

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#611: FILE: kernel/softirq.c:357:
+static struct task_struct *ksoftirq_killer = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#618: FILE: kernel/softirq.c:364:
+		BUG();

WARNING:MEMORY_BARRIER: memory barrier without comment
#632: FILE: kernel/softirq.c:385:
+		rmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#642: FILE: kernel/softirq.c:400:
+	printk("ksoftirqd for %i dying\n", cpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ksoftirqd', this function's name, in a string
#642: FILE: kernel/softirq.c:400:
+	printk("ksoftirqd for %i dying\n", cpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:MEMORY_BARRIER: memory barrier without comment
#644: FILE: kernel/softirq.c:402:
+	wmb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#650: FILE: kernel/softirq.c:408:
 static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#661: FILE: kernel/softirq.c:417:
+			printk("ksoftirqd for %u failed\n", hotcpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ksoftirqd', this function's name, in a string
#661: FILE: kernel/softirq.c:417:
+			printk("ksoftirqd for %u failed\n", hotcpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#674: FILE: kernel/softirq.c:429:
+		printk("Killing ksoftirqd for %u\n", hotcpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ksoftirqd', this function's name, in a string
#674: FILE: kernel/softirq.c:429:
+		printk("Killing ksoftirqd for %u\n", hotcpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: kernel/softirq.c:431:
+                   wake it */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#676: FILE: kernel/softirq.c:431:
+		/* Kill ksoftirqd: get ref in case it exits before we
+                   wake it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#676: FILE: kernel/softirq.c:431:
+                   wake it */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#698: FILE: kernel/softirq.c:453:
+		printk("Moving ksoftirqs for %u\n", hotcpu);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#706: FILE: kernel/softirq.c:461:
+		for (i=0; i<32; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#706: FILE: kernel/softirq.c:461:
+		for (i=0; i<32; i++)
 		           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#707: FILE: kernel/softirq.c:462:
+			if (pending & (1<<i))
 			                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list"
#710: FILE: kernel/softirq.c:465:
+		if (list != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list->next"
#712: FILE: kernel/softirq.c:467:
+			while (list->next != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: kernel/softirq.c:473:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list"
#720: FILE: kernel/softirq.c:475:
+		if (list != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list->next"
#722: FILE: kernel/softirq.c:477:
+			while (list->next != NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#754: FILE: net/core/dev.c:2869:
+static int dev_cpu_callback(struct notifier_block *nfb, unsigned long action, void * ocpu)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#756: FILE: net/core/dev.c:2871:
+        struct sk_buff *list_sk, *sk_head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: net/core/dev.c:2871:
+        struct sk_buff *list_sk, *sk_head;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#757: FILE: net/core/dev.c:2872:
+        struct net_device *list_net, *net_head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: net/core/dev.c:2872:
+        struct net_device *list_net, *net_head;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#758: FILE: net/core/dev.c:2873:
+        struct softnet_data *queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: net/core/dev.c:2873:
+        struct softnet_data *queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#759: FILE: net/core/dev.c:2874:
+        struct sk_buff *skb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: net/core/dev.c:2874:
+        struct sk_buff *skb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: net/core/dev.c:2875:
+        unsigned int  cpu = smp_processor_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: net/core/dev.c:2875:
+        unsigned int  cpu = smp_processor_id();$

CHECK:SPACING: No space is necessary after a cast
#761: FILE: net/core/dev.c:2876:
+	unsigned long oldcpu = (unsigned long) ocpu;

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: net/core/dev.c:2884:
+        /* Move completion queue */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: net/core/dev.c:2886:
+        list_sk = softnet_data[oldcpu].completion_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: net/core/dev.c:2886:
+        list_sk = softnet_data[oldcpu].completion_queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#772: FILE: net/core/dev.c:2887:
+        if (list_sk != NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: net/core/dev.c:2887:
+        if (list_sk != NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list_sk"
#772: FILE: net/core/dev.c:2887:
+        if (list_sk != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: net/core/dev.c:2888:
+                sk_head = list_sk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: net/core/dev.c:2888:
+                sk_head = list_sk;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: net/core/dev.c:2889:
+                while (list_sk->next != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: net/core/dev.c:2889:
+                while (list_sk->next != NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list_sk->next"
#774: FILE: net/core/dev.c:2889:
+                while (list_sk->next != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#775: FILE: net/core/dev.c:2890:
+                        list_sk = list_sk->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#775: FILE: net/core/dev.c:2890:
+                        list_sk = list_sk->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: net/core/dev.c:2891:
+                list_sk->next = softnet_data[cpu].completion_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: net/core/dev.c:2891:
+                list_sk->next = softnet_data[cpu].completion_queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#777: FILE: net/core/dev.c:2892:
+                softnet_data[cpu].completion_queue = sk_head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: net/core/dev.c:2892:
+                softnet_data[cpu].completion_queue = sk_head;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: net/core/dev.c:2893:
+                softnet_data[oldcpu].completion_queue = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: net/core/dev.c:2893:
+                softnet_data[oldcpu].completion_queue = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#779: FILE: net/core/dev.c:2894:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: net/core/dev.c:2894:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: net/core/dev.c:2896:
+        /* Move output_queue */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: net/core/dev.c:2898:
+        list_net = softnet_data[oldcpu].output_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: net/core/dev.c:2898:
+        list_net = softnet_data[oldcpu].output_queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: net/core/dev.c:2899:
+        if (list_net != NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: net/core/dev.c:2899:
+        if (list_net != NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list_net"
#784: FILE: net/core/dev.c:2899:
+        if (list_net != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#785: FILE: net/core/dev.c:2900:
+                net_head = list_net;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: net/core/dev.c:2900:
+                net_head = list_net;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#786: FILE: net/core/dev.c:2901:
+                while (list_net->next != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: net/core/dev.c:2901:
+                while (list_net->next != NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list_net->next"
#786: FILE: net/core/dev.c:2901:
+                while (list_net->next != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: net/core/dev.c:2902:
+                        list_net = list_net->next_sched;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: net/core/dev.c:2902:
+                        list_net = list_net->next_sched;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: net/core/dev.c:2903:
+                list_net->next_sched = softnet_data[cpu].output_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: net/core/dev.c:2903:
+                list_net->next_sched = softnet_data[cpu].output_queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#789: FILE: net/core/dev.c:2904:
+                softnet_data[cpu].output_queue = net_head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: net/core/dev.c:2904:
+                softnet_data[cpu].output_queue = net_head;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: net/core/dev.c:2905:
+                softnet_data[oldcpu].output_queue = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: net/core/dev.c:2905:
+                softnet_data[oldcpu].output_queue = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#791: FILE: net/core/dev.c:2906:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: net/core/dev.c:2906:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#794: FILE: net/core/dev.c:2909:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#794: FILE: net/core/dev.c:2909:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: net/core/dev.c:2909:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#795: FILE: net/core/dev.c:2910:
+        /* Move input_pkt_queue */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: net/core/dev.c:2913:
+        for (;;) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: net/core/dev.c:2913:
+        for (;;) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: net/core/dev.c:2914:
+                skb = __skb_dequeue(&queue->input_pkt_queue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: net/core/dev.c:2914:
+                skb = __skb_dequeue(&queue->input_pkt_queue);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#800: FILE: net/core/dev.c:2915:
+                if (skb == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: net/core/dev.c:2915:
+                if (skb == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#800: FILE: net/core/dev.c:2915:
+                if (skb == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#801: FILE: net/core/dev.c:2916:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: net/core/dev.c:2916:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: net/core/dev.c:2917:
+                netif_rx(skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: net/core/dev.c:2917:
+                netif_rx(skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#803: FILE: net/core/dev.c:2918:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: net/core/dev.c:2918:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#805: FILE: net/core/dev.c:2920:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: net/core/dev.c:2920:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#812: FILE: net/core/dev.c:2927:
+        register_cpu_notifier(&cpu_callback_nfb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: net/core/dev.c:2927:
+        register_cpu_notifier(&cpu_callback_nfb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: net/core/dev.c:2928:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: net/core/dev.c:2928:
+        return 0;$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#816: FILE: net/core/dev.c:2931:
+__initcall(dev_cpu_callback_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433008.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 84 warnings, 20 checks, 728 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433008.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
