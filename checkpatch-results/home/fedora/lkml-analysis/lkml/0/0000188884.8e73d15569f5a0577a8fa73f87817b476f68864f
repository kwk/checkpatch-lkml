WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#88: 
        # This cat will become the guest scheduler by opening guest_o1_scheduler

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: fs/proc/base.c:1705:
+        struct task_struct *task;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: fs/proc/base.c:1705:
+        struct task_struct *task;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: fs/proc/base.c:1707:
+        read_lock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: fs/proc/base.c:1707:
+        read_lock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: fs/proc/base.c:1712:
+        pid = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: fs/proc/base.c:1712:
+        pid = -ENOENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: fs/proc/base.c:1716:
+        pid = task_sched_pid(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: fs/proc/base.c:1716:
+        pid = task_sched_pid(task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: fs/proc/base.c:1719:
+        return pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: fs/proc/base.c:1719:
+        return pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: fs/proc/base.c:1724:
+        char *end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: fs/proc/base.c:1724:
+        char *end;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: fs/proc/base.c:1725:
+        int pid = simple_strtol(name, &end, 10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: fs/proc/base.c:1725:
+        int pid = simple_strtol(name, &end, 10);$

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#310: FILE: fs/proc/base.c:1725:
+        int pid = simple_strtol(name, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: fs/proc/base.c:1727:
+        if(*end != '\0')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: fs/proc/base.c:1727:
+        if(*end != '\0')$

ERROR:SPACING: space required before the open parenthesis '('
#312: FILE: fs/proc/base.c:1727:
+        if(*end != '\0')

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: fs/proc/base.c:1728:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: fs/proc/base.c:1728:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: fs/proc/base.c:1730:
+        return sched_group(pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: fs/proc/base.c:1730:
+        return sched_group(pid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: fs/proc/base.c:1737:
+        int group = sched_group_str(dentry->d_name.name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: fs/proc/base.c:1737:
+        int group = sched_group_str(dentry->d_name.name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: fs/proc/base.c:1739:
+        if(group < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: fs/proc/base.c:1739:
+        if(group < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#324: FILE: fs/proc/base.c:1739:
+        if(group < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: fs/proc/base.c:1740:
+                return group;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: fs/proc/base.c:1740:
+                return group;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: fs/proc/base.c:1743:
+	return vfs_readlink(dentry,buffer,buflen,tmp);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: fs/proc/base.c:1743:
+	return vfs_readlink(dentry,buffer,buflen,tmp);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: fs/proc/base.c:1743:
+	return vfs_readlink(dentry,buffer,buflen,tmp);
 	                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: fs/proc/base.c:1746:
+static int proc_pid_sched_follow_link(struct dentry *dentry, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/proc/base.c:1747:
+				      struct nameidata *nd)
 				                        ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: fs/proc/base.c:1750:
+        int group = sched_group_str(dentry->d_name.name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: fs/proc/base.c:1750:
+        int group = sched_group_str(dentry->d_name.name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: fs/proc/base.c:1752:
+        if(group < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: fs/proc/base.c:1752:
+        if(group < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#337: FILE: fs/proc/base.c:1752:
+        if(group < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: fs/proc/base.c:1753:
+                return group;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: fs/proc/base.c:1753:
+                return group;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#341: FILE: fs/proc/base.c:1756:
+	return vfs_follow_link(nd,tmp);
 	                       ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: fs/proc/base.c:1756:
+	return vfs_follow_link(nd,tmp);
 	                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: fs/proc/base.c:1757:
+}^I$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#344: FILE: fs/proc/base.c:1759:
+static struct inode_operations proc_pid_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: fs/proc/base.c:1818:
+struct dentry *sched_group_lookup(struct inode *dir, struct dentry * dentry, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#356: FILE: fs/proc/base.c:1818:
+struct dentry *sched_group_lookup(struct inode *dir, struct dentry * dentry, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#357: FILE: fs/proc/base.c:1819:
+                                  struct nameidata *nd)
                                                     ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: fs/proc/base.c:1819:
+                                  struct nameidata *nd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: fs/proc/base.c:1819:
+                                  struct nameidata *nd)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: fs/proc/base.c:1821:
+        struct proc_dir_entry *entry = PDE(dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: fs/proc/base.c:1821:
+        struct proc_dir_entry *entry = PDE(dir);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#362: FILE: fs/proc/base.c:1824:
+	unsigned tgid;

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: fs/proc/base.c:1839:
+        if(sched_group(tgid) != sched_pid(entry->data))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: fs/proc/base.c:1839:
+        if(sched_group(tgid) != sched_pid(entry->data))$

ERROR:SPACING: space required before the open parenthesis '('
#377: FILE: fs/proc/base.c:1839:
+        if(sched_group(tgid) != sched_pid(entry->data))

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: fs/proc/base.c:1840:
+                goto out_put;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: fs/proc/base.c:1840:
+                goto out_put;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#386: FILE: fs/proc/base.c:1848:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#386: FILE: fs/proc/base.c:1848:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;
 	                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#386: FILE: fs/proc/base.c:1848:
+	inode->i_mode = S_IFDIR|S_IRUGO|S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#432: FILE: fs/proc/base.c:1918:
+	inode->i_mode = S_IFLNK|S_IRWXUGO;
 	                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#432: FILE: fs/proc/base.c:1918:
+	inode->i_mode = S_IFLNK|S_IRWXUGO;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#442: FILE: fs/proc/base.c:2061:
+int sched_group_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                       ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#442: FILE: fs/proc/base.c:2061:
+int sched_group_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#442: FILE: fs/proc/base.c:2061:
+int sched_group_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: fs/proc/base.c:2068:
+        struct proc_dir_entry *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: fs/proc/base.c:2068:
+        struct proc_dir_entry *entry;$

ERROR:SPACING: space required before the open brace '{'
#451: FILE: fs/proc/base.c:2070:
+	if (filp->f_pos < FIRST_PROCESS_ENTRY){

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: fs/proc/base.c:2072:
+                nr = filp->f_pos - FIRST_PROCESS_ENTRY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: fs/proc/base.c:2072:
+                nr = filp->f_pos - FIRST_PROCESS_ENTRY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: fs/proc/base.c:2073:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: fs/proc/base.c:2073:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: fs/proc/base.c:2075:
+        /* The remnants of /proc/self */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: fs/proc/base.c:2077:
+                filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: fs/proc/base.c:2077:
+                filp->f_pos++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: fs/proc/base.c:2078:
+                nr++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: fs/proc/base.c:2078:
+                nr++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: fs/proc/base.c:2079:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: fs/proc/base.c:2079:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: fs/proc/base.c:2081:
+        entry = PDE(filp->f_dentry->d_inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: fs/proc/base.c:2081:
+        entry = PDE(filp->f_dentry->d_inode);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#483: FILE: fs/proc/base.c:2102:
+		for (i=0;i<nr_tgids;i++) {
 		      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#483: FILE: fs/proc/base.c:2102:
+		for (i=0;i<nr_tgids;i++) {
 		        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#483: FILE: fs/proc/base.c:2102:
+		for (i=0;i<nr_tgids;i++) {
 		          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#483: FILE: fs/proc/base.c:2102:
+		for (i=0;i<nr_tgids;i++) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#485: FILE: fs/proc/base.c:2104:
+			ino_t ino = fake_ino(tgid,PROC_TGID_INO);
 			                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: fs/proc/base.c:2106:
+                        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: fs/proc/base.c:2106:
+                        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: fs/proc/base.c:2106:
+                        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: fs/proc/base.c:2107:
+                        if(sched_group(tgid) != sched_pid(entry->data)){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: fs/proc/base.c:2107:
+                        if(sched_group(tgid) != sched_pid(entry->data)){$

ERROR:SPACING: space required before the open brace '{'
#488: FILE: fs/proc/base.c:2107:
+                        if(sched_group(tgid) != sched_pid(entry->data)){

ERROR:SPACING: space required before the open parenthesis '('
#488: FILE: fs/proc/base.c:2107:
+                        if(sched_group(tgid) != sched_pid(entry->data)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: fs/proc/base.c:2108:
+                                filp->f_pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: fs/proc/base.c:2108:
+                                filp->f_pos++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: fs/proc/base.c:2109:
+                                nr++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: fs/proc/base.c:2109:
+                                nr++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: fs/proc/base.c:2110:
+                                continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: fs/proc/base.c:2110:
+                                continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: fs/proc/base.c:2111:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: fs/proc/base.c:2111:
+                        }$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#498: FILE: fs/proc/base.c:2117:
+			if (filldir(dirent, buf+j, PROC_NUMBUF-j, filp->f_pos, ino, DT_DIR) < 0) {
 			                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#498: FILE: fs/proc/base.c:2117:
+			if (filldir(dirent, buf+j, PROC_NUMBUF-j, filp->f_pos, ino, DT_DIR) < 0) {
 			                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#500: FILE: fs/proc/base.c:2119:
+				 * pid for the next readir call */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#520: FILE: fs/proc/base.c:2176:
+			if (filldir(dirent, buf+j, PROC_NUMBUF-j, filp->f_pos, ino, DT_LNK) < 0) {
 			                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#520: FILE: fs/proc/base.c:2176:
+			if (filldir(dirent, buf+j, PROC_NUMBUF-j, filp->f_pos, ino, DT_LNK) < 0) {
 			                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: include/linux/init_task.h:114:
+        .scheduler^I= &o1_scheduler,^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: include/linux/init_task.h:114:
+        .scheduler^I= &o1_scheduler,^I^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#556: FILE: include/linux/kernel_stat.h:55:
+#define account_user_time(task, t) \
+        (task)->scheduler->task_ops.account_user_time(task, t)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#556: FILE: include/linux/kernel_stat.h:55:
+#define account_user_time(task, t) \
+        (task)->scheduler->task_ops.account_user_time(task, t)

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: include/linux/kernel_stat.h:56:
+        (task)->scheduler->task_ops.account_user_time(task, t)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: include/linux/kernel_stat.h:56:
+        (task)->scheduler->task_ops.account_user_time(task, t)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#558: FILE: include/linux/kernel_stat.h:57:
+#define account_system_time(task, o, t) \
+        (task)->scheduler->task_ops.account_system_time(task, o, t)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#558: FILE: include/linux/kernel_stat.h:57:
+#define account_system_time(task, o, t) \
+        (task)->scheduler->task_ops.account_system_time(task, o, t)

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: include/linux/kernel_stat.h:58:
+        (task)->scheduler->task_ops.account_system_time(task, o, t)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: include/linux/kernel_stat.h:58:
+        (task)->scheduler->task_ops.account_system_time(task, o, t)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#560: FILE: include/linux/kernel_stat.h:59:
+#define account_steal_time(task, t) \
+        (task)->scheduler->task_ops.account_steal_time(task, t)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#560: FILE: include/linux/kernel_stat.h:59:
+#define account_steal_time(task, t) \
+        (task)->scheduler->task_ops.account_steal_time(task, t)

ERROR:CODE_INDENT: code indent should use tabs where possible
#561: FILE: include/linux/kernel_stat.h:60:
+        (task)->scheduler->task_ops.account_steal_time(task, t)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: include/linux/kernel_stat.h:60:
+        (task)->scheduler->task_ops.account_steal_time(task, t)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#602: FILE: include/linux/sched.h:164:
+#define task_timeslice(p) (p)->scheduler->task_ops.task_timeslice(p)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#602: FILE: include/linux/sched.h:164:
+#define task_timeslice(p) (p)->scheduler->task_ops.task_timeslice(p)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#603: FILE: include/linux/sched.h:165:
+#define try_to_wake_up(p, state, sync) \
+        (p)->scheduler->task_ops.try_to_wake_up(p, state, sync)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#603: FILE: include/linux/sched.h:165:
+#define try_to_wake_up(p, state, sync) \
+        (p)->scheduler->task_ops.try_to_wake_up(p, state, sync)

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: include/linux/sched.h:166:
+        (p)->scheduler->task_ops.try_to_wake_up(p, state, sync)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: include/linux/sched.h:166:
+        (p)->scheduler->task_ops.try_to_wake_up(p, state, sync)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#607: FILE: include/linux/sched.h:169:
+#define init_idle(t, cpu) (t)->scheduler->task_ops.init_idle(t, cpu)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#607: FILE: include/linux/sched.h:169:
+#define init_idle(t, cpu) (t)->scheduler->task_ops.init_idle(t, cpu)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#609: FILE: include/linux/sched.h:171:
+#define schedule_tail(p) (p)->scheduler->task_ops.schedule_tail(p)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#609: FILE: include/linux/sched.h:171:
+#define schedule_tail(p) (p)->scheduler->task_ops.schedule_tail(p)

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: include/linux/sched.h:189:
+        current->scheduler->task_ops.io_schedule_timeout(timeout)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: include/linux/sched.h:189:
+        current->scheduler->task_ops.io_schedule_timeout(timeout)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#649: FILE: include/linux/sched.h:227:
+        /* Sleep */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#650: FILE: include/linux/sched.h:228:
+        asmlinkage void (*schedule)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: include/linux/sched.h:228:
+        asmlinkage void (*schedule)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: include/linux/sched.h:229:
+        void (*io_schedule)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: include/linux/sched.h:229:
+        void (*io_schedule)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: include/linux/sched.h:230:
+        long (*io_schedule_timeout)(long timeout);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: include/linux/sched.h:230:
+        long (*io_schedule_timeout)(long timeout);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: include/linux/sched.h:232:
+        /* Wake-up */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: include/linux/sched.h:234:
+        void (*wait_task_inactive)(task_t * p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: include/linux/sched.h:234:
+        void (*wait_task_inactive)(task_t * p);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#656: FILE: include/linux/sched.h:234:
+        void (*wait_task_inactive)(task_t * p);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: include/linux/sched.h:236:
+        void fastcall (*wake_up_new_task)(task_t * p, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: include/linux/sched.h:236:
+        void fastcall (*wake_up_new_task)(task_t * p, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: include/linux/sched.h:236:
+        void fastcall (*wake_up_new_task)(task_t * p, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#658: FILE: include/linux/sched.h:236:
+        void fastcall (*wake_up_new_task)(task_t * p, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: include/linux/sched.h:237:
+                                          unsigned long clone_flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: include/linux/sched.h:237:
+                                          unsigned long clone_flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: include/linux/sched.h:238:
+        void fastcall (*sched_exit)(task_t * p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: include/linux/sched.h:238:
+        void fastcall (*sched_exit)(task_t * p);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#660: FILE: include/linux/sched.h:238:
+        void fastcall (*sched_exit)(task_t * p);

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: include/linux/sched.h:239:
+        asmlinkage void (*schedule_tail)(task_t *prev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: include/linux/sched.h:239:
+        asmlinkage void (*schedule_tail)(task_t *prev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: include/linux/sched.h:241:
+        /* Policy */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: include/linux/sched.h:242:
+        void (*set_user_nice)(task_t *p, long nice);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: include/linux/sched.h:242:
+        void (*set_user_nice)(task_t *p, long nice);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: include/linux/sched.h:243:
+        int (*sched_setscheduler)(struct task_struct *p, int policy, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: include/linux/sched.h:243:
+        int (*sched_setscheduler)(struct task_struct *p, int policy, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: include/linux/sched.h:243:
+        int (*sched_setscheduler)(struct task_struct *p, int policy, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: include/linux/sched.h:244:
+                                  struct sched_param *param);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: include/linux/sched.h:244:
+                                  struct sched_param *param);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: include/linux/sched.h:246:
+        int (*set_cpus_allowed)(task_t *p, cpumask_t new_mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: include/linux/sched.h:246:
+        int (*set_cpus_allowed)(task_t *p, cpumask_t new_mask);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: include/linux/sched.h:248:
+        long (*sched_yield)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: include/linux/sched.h:248:
+        long (*sched_yield)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#671: FILE: include/linux/sched.h:249:
+        unsigned long (*nr_running)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: include/linux/sched.h:249:
+        unsigned long (*nr_running)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: include/linux/sched.h:250:
+        unsigned long (*nr_uninterruptible)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: include/linux/sched.h:250:
+        unsigned long (*nr_uninterruptible)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: include/linux/sched.h:251:
+        unsigned long long (*nr_context_switches)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: include/linux/sched.h:251:
+        unsigned long long (*nr_context_switches)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#674: FILE: include/linux/sched.h:252:
+        unsigned long (*nr_iowait)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: include/linux/sched.h:252:
+        unsigned long (*nr_iowait)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: include/linux/sched.h:253:
+        unsigned long long (*current_sched_time)(const task_t *tsk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: include/linux/sched.h:253:
+        unsigned long long (*current_sched_time)(const task_t *tsk);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: include/linux/sched.h:254:
+        void (*account_user_time)(struct task_struct *p, cputime_t cputime);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: include/linux/sched.h:254:
+        void (*account_user_time)(struct task_struct *p, cputime_t cputime);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: include/linux/sched.h:255:
+        void (*account_system_time)(struct task_struct *p, int hardirq_offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: include/linux/sched.h:255:
+        void (*account_system_time)(struct task_struct *p, int hardirq_offset,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#678: FILE: include/linux/sched.h:256:
+                                    cputime_t cputime);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: include/linux/sched.h:256:
+                                    cputime_t cputime);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: include/linux/sched.h:257:
+        void (*account_steal_time)(struct task_struct *p, cputime_t steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: include/linux/sched.h:257:
+        void (*account_steal_time)(struct task_struct *p, cputime_t steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: include/linux/sched.h:258:
+        void (*scheduler_tick)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: include/linux/sched.h:258:
+        void (*scheduler_tick)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: include/linux/sched.h:259:
+        int (*idle_cpu)(int cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: include/linux/sched.h:259:
+        int (*idle_cpu)(int cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: include/linux/sched.h:260:
+        task_t *(*idle_task)(int cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: include/linux/sched.h:260:
+        task_t *(*idle_task)(int cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: include/linux/sched.h:261:
+        unsigned int (*task_timeslice)(task_t *p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: include/linux/sched.h:261:
+        unsigned int (*task_timeslice)(task_t *p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: include/linux/sched.h:262:
+        int (*try_to_wake_up)(task_t * p, unsigned int state, int sync);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: include/linux/sched.h:262:
+        int (*try_to_wake_up)(task_t * p, unsigned int state, int sync);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#684: FILE: include/linux/sched.h:262:
+        int (*try_to_wake_up)(task_t * p, unsigned int state, int sync);

ERROR:CODE_INDENT: code indent should use tabs where possible
#685: FILE: include/linux/sched.h:263:
+        void (*sched_init_fn)(void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: include/linux/sched.h:263:
+        void (*sched_init_fn)(void);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: include/linux/sched.h:264:
+        int (*task_curr)(const task_t *p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: include/linux/sched.h:264:
+        int (*task_curr)(const task_t *p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: include/linux/sched.h:265:
+        void (*init_idle)(task_t *idle, int cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: include/linux/sched.h:265:
+        void (*init_idle)(task_t *idle, int cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: include/linux/sched.h:269:
+        struct list_head list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: include/linux/sched.h:269:
+        struct list_head list;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#692: FILE: include/linux/sched.h:270:
+        struct task_struct *container;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: include/linux/sched.h:270:
+        struct task_struct *container;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: include/linux/sched.h:271:
+        char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: include/linux/sched.h:271:
+        char *name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#694: FILE: include/linux/sched.h:272:
+        int is_guest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: include/linux/sched.h:272:
+        int is_guest;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: include/linux/sched.h:273:
+        unsigned int inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: include/linux/sched.h:273:
+        unsigned int inode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#696: FILE: include/linux/sched.h:274:
+        struct completion wakeup;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: include/linux/sched.h:274:
+        struct completion wakeup;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#697: FILE: include/linux/sched.h:275:
+        spinlock_t lock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: include/linux/sched.h:275:
+        spinlock_t lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#697: FILE: include/linux/sched.h:275:
+        spinlock_t lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#698: FILE: include/linux/sched.h:276:
+        struct list_head incoming;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: include/linux/sched.h:276:
+        struct list_head incoming;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#699: FILE: include/linux/sched.h:277:
+        struct sched_task_ops task_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: include/linux/sched.h:277:
+        struct sched_task_ops task_ops;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#704: FILE: include/linux/sched.h:282:
+extern int register_scheduler(struct scheduler *scheduler, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#705: FILE: include/linux/sched.h:283:
+extern int register_sched_group(int pid, struct scheduler *scheduler);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#706: FILE: include/linux/sched.h:284:
+extern int task_sched_pid(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#707: FILE: include/linux/sched.h:285:
+extern int init_sched_instance(struct scheduler *scheduler);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#708: FILE: include/linux/sched.h:286:
+extern void uninit_sched_instance(struct scheduler *scheduler);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#709: FILE: include/linux/sched.h:287:
+extern int sched_pid(void *sched);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#710: FILE: include/linux/sched.h:288:
+extern void handle_incoming(struct scheduler *scheduler);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#712: FILE: include/linux/sched.h:290:
+#define sched_add_task(p) p->scheduler->task_ops.sched_add_task(p)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#712: FILE: include/linux/sched.h:290:
+#define sched_add_task(p) p->scheduler->task_ops.sched_add_task(p)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#713: FILE: include/linux/sched.h:291:
+#define sched_remove_task(p) p->scheduler->task_ops.sched_remove_task(p)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#713: FILE: include/linux/sched.h:291:
+#define sched_remove_task(p) p->scheduler->task_ops.sched_remove_task(p)

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: include/linux/sched.h:806:
+        struct scheduler *scheduler;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: include/linux/sched.h:806:
+        struct scheduler *scheduler;$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#730: FILE: include/linux/sched.h:896:
+#define current_sched_time(t) (t)->scheduler->task_ops.current_sched_time(t)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#730: FILE: include/linux/sched.h:896:
+#define current_sched_time(t) (t)->scheduler->task_ops.current_sched_time(t)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#739: FILE: include/linux/sched.h:912:
+#define set_user_nice(p, nice) (p)->scheduler->task_ops.set_user_nice(p, nice)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#739: FILE: include/linux/sched.h:912:
+#define set_user_nice(p, nice) (p)->scheduler->task_ops.set_user_nice(p, nice)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#746: FILE: include/linux/sched.h:915:
+#define task_curr(p) (p)->scheduler->task_ops.task_curr(p)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#746: FILE: include/linux/sched.h:915:
+#define task_curr(p) (p)->scheduler->task_ops.task_curr(p)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#748: FILE: include/linux/sched.h:917:
+#define sched_setscheduler(p, policy, param) \
+        (p)->scheduler->task_ops.sched_setscheduler(p, policy, param)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#748: FILE: include/linux/sched.h:917:
+#define sched_setscheduler(p, policy, param) \
+        (p)->scheduler->task_ops.sched_setscheduler(p, policy, param)

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: include/linux/sched.h:918:
+        (p)->scheduler->task_ops.sched_setscheduler(p, policy, param)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: include/linux/sched.h:918:
+        (p)->scheduler->task_ops.sched_setscheduler(p, policy, param)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#760: FILE: include/linux/sched.h:969:
+#define wake_up_new_task(tsk, clone_flags) \
+        (tsk)->scheduler->task_ops.wake_up_new_task(tsk, clone_flags)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#760: FILE: include/linux/sched.h:969:
+#define wake_up_new_task(tsk, clone_flags) \
+        (tsk)->scheduler->task_ops.wake_up_new_task(tsk, clone_flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: include/linux/sched.h:970:
+        (tsk)->scheduler->task_ops.wake_up_new_task(tsk, clone_flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: include/linux/sched.h:970:
+        (tsk)->scheduler->task_ops.wake_up_new_task(tsk, clone_flags)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#770: FILE: include/linux/sched.h:979:
+#define sched_exit(p) (p)->scheduler->task_ops.sched_exit(p)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#770: FILE: include/linux/sched.h:979:
+#define sched_exit(p) (p)->scheduler->task_ops.sched_exit(p)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#800: FILE: kernel/host_sched.c:1:
+#include <linux/sched.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#837: FILE: kernel/sched.c:863:
+static void wait_task_inactive(task_t * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#846: FILE: kernel/sched.c:987:
+static int o1_try_to_wake_up(task_t * p, unsigned int state, int sync)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#855: FILE: kernel/sched.c:1207:
+static void fastcall o1_wake_up_new_task(task_t * p, unsigned long clone_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#864: FILE: kernel/sched.c:1293:
+static void fastcall o1_sched_exit(task_t * p)

ERROR:CODE_INDENT: code indent should use tabs where possible
#938: FILE: kernel/sched.c:2315:
+                                   cputime_t cputime)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: kernel/sched.c:2315:
+                                   cputime_t cputime)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: kernel/sched.c:3355:
+static int o1_sched_setscheduler(struct task_struct *p, int policy, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1023: FILE: kernel/sched.c:3356:
+                                 struct sched_param *param)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: kernel/sched.c:3356:
+                                 struct sched_param *param)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1050: FILE: kernel/sched.c:3722:
+        return do_sched_yield();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: kernel/sched.c:3722:
+        return do_sched_yield();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1134: FILE: kernel/sched.c:5018:
+        .list^I^I= LIST_HEAD_INIT(o1_scheduler.list),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: kernel/sched.c:5018:
+        .list^I^I= LIST_HEAD_INIT(o1_scheduler.list),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1136: FILE: kernel/sched.c:5020:
+        .container^I= &init_task,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: kernel/sched.c:5020:
+        .container^I= &init_task,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1138: FILE: kernel/sched.c:5022:
+        .inode^I^I= 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: kernel/sched.c:5022:
+        .inode^I^I= 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1139: FILE: kernel/sched.c:5023:
+        .wakeup^I^I= COMPLETION_INITIALIZER(o1_scheduler.wakeup),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: kernel/sched.c:5023:
+        .wakeup^I^I= COMPLETION_INITIALIZER(o1_scheduler.wakeup),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1140: FILE: kernel/sched.c:5024:
+        .lock^I^I= SPIN_LOCK_UNLOCKED,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: kernel/sched.c:5024:
+        .lock^I^I= SPIN_LOCK_UNLOCKED,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1141: FILE: kernel/sched.c:5025:
+        .incoming^I= LIST_HEAD_INIT(o1_scheduler.incoming),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: kernel/sched.c:5025:
+        .incoming^I= LIST_HEAD_INIT(o1_scheduler.incoming),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1150: FILE: kernel/sched.c:5034:
+                .sched_exit^I^I= o1_sched_exit,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1150: FILE: kernel/sched.c:5034:
+                .sched_exit^I^I= o1_sched_exit,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1151: FILE: kernel/sched.c:5035:
+                .schedule_tail^I^I= o1_schedule_tail,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1151: FILE: kernel/sched.c:5035:
+                .schedule_tail^I^I= o1_schedule_tail,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1158: FILE: kernel/sched.c:5042:
+                .nr_running^I^I= o1_nr_running,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: kernel/sched.c:5042:
+                .nr_running^I^I= o1_nr_running,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1159: FILE: kernel/sched.c:5043:
+                .nr_uninterruptible^I= o1_nr_uninterruptible,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1159: FILE: kernel/sched.c:5043:
+                .nr_uninterruptible^I= o1_nr_uninterruptible,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1160: FILE: kernel/sched.c:5044:
+                .nr_context_switches^I= o1_nr_context_switches,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: kernel/sched.c:5044:
+                .nr_context_switches^I= o1_nr_context_switches,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1161: FILE: kernel/sched.c:5045:
+                .nr_iowait^I^I= o1_nr_iowait,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1161: FILE: kernel/sched.c:5045:
+                .nr_iowait^I^I= o1_nr_iowait,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: kernel/sched.c:5046:
+                .current_sched_time^I= o1_current_sched_time,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: kernel/sched.c:5046:
+                .current_sched_time^I= o1_current_sched_time,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1163: FILE: kernel/sched.c:5047:
+                .account_user_time^I= o1_account_user_time,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: kernel/sched.c:5047:
+                .account_user_time^I= o1_account_user_time,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: kernel/sched.c:5048:
+                .account_system_time^I= o1_account_system_time,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: kernel/sched.c:5048:
+                .account_system_time^I= o1_account_system_time,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1165: FILE: kernel/sched.c:5049:
+                .account_steal_time^I= o1_account_steal_time,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: kernel/sched.c:5049:
+                .account_steal_time^I= o1_account_steal_time,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1166: FILE: kernel/sched.c:5050:
+                .scheduler_tick^I^I= o1_scheduler_tick,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1166: FILE: kernel/sched.c:5050:
+                .scheduler_tick^I^I= o1_scheduler_tick,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1167: FILE: kernel/sched.c:5051:
+                .idle_cpu^I^I= o1_idle_cpu,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: kernel/sched.c:5051:
+                .idle_cpu^I^I= o1_idle_cpu,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1168: FILE: kernel/sched.c:5052:
+                .idle_task^I^I= o1_idle_task,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: kernel/sched.c:5052:
+                .idle_task^I^I= o1_idle_task,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1169: FILE: kernel/sched.c:5053:
+                .task_timeslice^I^I= o1_task_timeslice,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: kernel/sched.c:5053:
+                .task_timeslice^I^I= o1_task_timeslice,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1170: FILE: kernel/sched.c:5054:
+                .try_to_wake_up^I^I= o1_try_to_wake_up,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1170: FILE: kernel/sched.c:5054:
+                .try_to_wake_up^I^I= o1_try_to_wake_up,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1171: FILE: kernel/sched.c:5055:
+                .sched_init_fn^I^I= o1_sched_init,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: kernel/sched.c:5055:
+                .sched_init_fn^I^I= o1_sched_init,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1172: FILE: kernel/sched.c:5056:
+                .task_curr^I^I= o1_task_curr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: kernel/sched.c:5056:
+                .task_curr^I^I= o1_task_curr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1173: FILE: kernel/sched.c:5057:
+                .init_idle^I^I= o1_init_idle,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: kernel/sched.c:5057:
+                .init_idle^I^I= o1_init_idle,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1179: FILE: kernel/sched.c:5063:
+        char *name = THIS_MODULE ? THIS_MODULE->name : o1_scheduler.name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: kernel/sched.c:5063:
+        char *name = THIS_MODULE ? THIS_MODULE->name : o1_scheduler.name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1182: FILE: kernel/sched.c:5066:
+        err = init_sched_instance(&o1_scheduler);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1182: FILE: kernel/sched.c:5066:
+        err = init_sched_instance(&o1_scheduler);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1183: FILE: kernel/sched.c:5067:
+        if(err)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: kernel/sched.c:5067:
+        if(err)$

ERROR:SPACING: space required before the open parenthesis '('
#1183: FILE: kernel/sched.c:5067:
+        if(err)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1184: FILE: kernel/sched.c:5068:
+                goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: kernel/sched.c:5068:
+                goto error;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: kernel/sched.c:5069:
+                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1185: FILE: kernel/sched.c:5069:
+                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: kernel/sched.c:5069:
+                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1187: FILE: kernel/sched.c:5071:
+        if(err)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1187: FILE: kernel/sched.c:5071:
+        if(err)$

ERROR:SPACING: space required before the open parenthesis '('
#1187: FILE: kernel/sched.c:5071:
+        if(err)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1188: FILE: kernel/sched.c:5072:
+                goto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: kernel/sched.c:5072:
+                goto error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1190: FILE: kernel/sched.c:5074:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: kernel/sched.c:5074:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1193: FILE: kernel/sched.c:5077:
+        uninit_sched_instance(&o1_scheduler);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: kernel/sched.c:5077:
+        uninit_sched_instance(&o1_scheduler);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1203: FILE: kernel/sched_group.c:1:
+#include <linux/sched.h>

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1212: FILE: kernel/sched_group.c:10:
+static struct proc_dir_entry *schedulers_entry = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1213: FILE: kernel/sched_group.c:11:
+static struct proc_dir_entry *sched_groups_entry = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1218: FILE: kernel/sched_group.c:16:
+        sched_groups_entry = proc_mkdir("sched-groups", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1218: FILE: kernel/sched_group.c:16:
+        sched_groups_entry = proc_mkdir("sched-groups", NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1226: FILE: kernel/sched_group.c:24:
+        struct scheduler *s, *found = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: kernel/sched_group.c:24:
+        struct scheduler *s, *found = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1227: FILE: kernel/sched_group.c:25:
+        struct list_head *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1227: FILE: kernel/sched_group.c:25:
+        struct list_head *entry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1228: FILE: kernel/sched_group.c:26:
+        int err = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: kernel/sched_group.c:26:
+        int err = -ENOENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1230: FILE: kernel/sched_group.c:28:
+        spin_lock(&schedulers_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1230: FILE: kernel/sched_group.c:28:
+        spin_lock(&schedulers_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1231: FILE: kernel/sched_group.c:29:
+        list_for_each(entry, &schedulers){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: kernel/sched_group.c:29:
+        list_for_each(entry, &schedulers){$

ERROR:SPACING: space required before the open brace '{'
#1231: FILE: kernel/sched_group.c:29:
+        list_for_each(entry, &schedulers){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1232: FILE: kernel/sched_group.c:30:
+                s = list_entry(entry, struct scheduler, list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: kernel/sched_group.c:30:
+                s = list_entry(entry, struct scheduler, list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1233: FILE: kernel/sched_group.c:31:
+                if(s->inode == inode->i_ino){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1233: FILE: kernel/sched_group.c:31:
+                if(s->inode == inode->i_ino){$

ERROR:SPACING: space required before the open brace '{'
#1233: FILE: kernel/sched_group.c:31:
+                if(s->inode == inode->i_ino){

ERROR:SPACING: space required before the open parenthesis '('
#1233: FILE: kernel/sched_group.c:31:
+                if(s->inode == inode->i_ino){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1234: FILE: kernel/sched_group.c:32:
+                        found = s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: kernel/sched_group.c:32:
+                        found = s;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1235: FILE: kernel/sched_group.c:33:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: kernel/sched_group.c:33:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1236: FILE: kernel/sched_group.c:34:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1236: FILE: kernel/sched_group.c:34:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1237: FILE: kernel/sched_group.c:35:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: kernel/sched_group.c:35:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1238: FILE: kernel/sched_group.c:36:
+        spin_unlock(&schedulers_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: kernel/sched_group.c:36:
+        spin_unlock(&schedulers_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1240: FILE: kernel/sched_group.c:38:
+        if(found == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1240: FILE: kernel/sched_group.c:38:
+        if(found == NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#1240: FILE: kernel/sched_group.c:38:
+        if(found == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!found"
#1240: FILE: kernel/sched_group.c:38:
+        if(found == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#1241: FILE: kernel/sched_group.c:39:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1241: FILE: kernel/sched_group.c:39:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1243: FILE: kernel/sched_group.c:41:
+        err = -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1243: FILE: kernel/sched_group.c:41:
+        err = -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1244: FILE: kernel/sched_group.c:42:
+        if(!found->is_guest)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: kernel/sched_group.c:42:
+        if(!found->is_guest)$

ERROR:SPACING: space required before the open parenthesis '('
#1244: FILE: kernel/sched_group.c:42:
+        if(!found->is_guest)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1245: FILE: kernel/sched_group.c:43:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: kernel/sched_group.c:43:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1247: FILE: kernel/sched_group.c:45:
+        found->task_ops.sched_init_fn();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: kernel/sched_group.c:45:
+        found->task_ops.sched_init_fn();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1250: FILE: kernel/sched_group.c:48:
+        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: kernel/sched_group.c:48:
+        return -EINVAL;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1253: FILE: kernel/sched_group.c:51:
+static struct file_operations scheduler_file_ops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1254: FILE: kernel/sched_group.c:52:
+        .open^I= scheduler_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: kernel/sched_group.c:52:
+        .open^I= scheduler_open,$

ERROR:SPACING: space required before the open parenthesis '('
#1262: FILE: kernel/sched_group.c:60:
+	if(schedulers_entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!schedulers_entry"
#1262: FILE: kernel/sched_group.c:60:
+	if(schedulers_entry == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1269: FILE: kernel/sched_group.c:67:
+	if(entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1269: FILE: kernel/sched_group.c:67:
+	if(entry == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1272: FILE: kernel/sched_group.c:70:
+        entry->proc_fops = &scheduler_file_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: kernel/sched_group.c:70:
+        entry->proc_fops = &scheduler_file_ops;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1273: FILE: kernel/sched_group.c:71:
+        scheduler->inode = entry->low_ino;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1273: FILE: kernel/sched_group.c:71:
+        scheduler->inode = entry->low_ino;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1275: FILE: kernel/sched_group.c:73:
+	printk("Registering scheduler '%s'\n", scheduler->name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1285: FILE: kernel/sched_group.c:83:
+        goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: kernel/sched_group.c:83:
+        goto out;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1288: FILE: kernel/sched_group.c:86:
+EXPORT_SYMBOL(register_scheduler);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1290: FILE: kernel/sched_group.c:88:
+extern int sched_group_readdir(struct file * filp, void * dirent, 
                                              ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1290: FILE: kernel/sched_group.c:88:
+extern int sched_group_readdir(struct file * filp, void * dirent, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1290: FILE: kernel/sched_group.c:88:
+extern int sched_group_readdir(struct file * filp, void * dirent, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1290: FILE: kernel/sched_group.c:88:
+extern int sched_group_readdir(struct file * filp, void * dirent, 

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1290: FILE: kernel/sched_group.c:88:
+extern int sched_group_readdir(struct file * filp, void * dirent, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#1291: FILE: kernel/sched_group.c:89:
+                               filldir_t filldir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1291: FILE: kernel/sched_group.c:89:
+                               filldir_t filldir);$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1293: FILE: kernel/sched_group.c:91:
+static struct file_operations sched_group_file_ops = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1298: FILE: kernel/sched_group.c:96:
+extern struct dentry *sched_group_lookup(struct inode *dir, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1298: FILE: kernel/sched_group.c:96:
+extern struct dentry *sched_group_lookup(struct inode *dir, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1299: FILE: kernel/sched_group.c:97:
+                                         struct dentry * dentry, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1299: FILE: kernel/sched_group.c:97:
+                                         struct dentry * dentry, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1299: FILE: kernel/sched_group.c:97:
+                                         struct dentry * dentry, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1299: FILE: kernel/sched_group.c:97:
+                                         struct dentry * dentry, 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1300: FILE: kernel/sched_group.c:98:
+                                         struct nameidata *nd);
                                                            ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: kernel/sched_group.c:98:
+                                         struct nameidata *nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: kernel/sched_group.c:98:
+                                         struct nameidata *nd);$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1302: FILE: kernel/sched_group.c:100:
+static struct inode_operations sched_group_inode_ops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1308: FILE: kernel/sched_group.c:106:
+        struct proc_dir_entry *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1308: FILE: kernel/sched_group.c:106:
+        struct proc_dir_entry *entry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: kernel/sched_group.c:107:
+        char name[sizeof("12345\0")];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: kernel/sched_group.c:107:
+        char name[sizeof("12345\0")];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: kernel/sched_group.c:108:
+        int err = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: kernel/sched_group.c:108:
+        int err = -ENOENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1312: FILE: kernel/sched_group.c:110:
+        if(sched_groups_entry == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1312: FILE: kernel/sched_group.c:110:
+        if(sched_groups_entry == NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#1312: FILE: kernel/sched_group.c:110:
+        if(sched_groups_entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sched_groups_entry"
#1312: FILE: kernel/sched_group.c:110:
+        if(sched_groups_entry == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1313: FILE: kernel/sched_group.c:111:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: kernel/sched_group.c:111:
+                goto out;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1314: FILE: kernel/sched_group.c:112:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1314: FILE: kernel/sched_group.c:112:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1314: FILE: kernel/sched_group.c:112:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1315: FILE: kernel/sched_group.c:113:
+        sprintf(name, "%d", pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1315: FILE: kernel/sched_group.c:113:
+        sprintf(name, "%d", pid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1316: FILE: kernel/sched_group.c:114:
+        entry = proc_mkdir(name, sched_groups_entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: kernel/sched_group.c:114:
+        entry = proc_mkdir(name, sched_groups_entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1317: FILE: kernel/sched_group.c:115:
+        if(entry == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: kernel/sched_group.c:115:
+        if(entry == NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#1317: FILE: kernel/sched_group.c:115:
+        if(entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1317: FILE: kernel/sched_group.c:115:
+        if(entry == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1318: FILE: kernel/sched_group.c:116:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1318: FILE: kernel/sched_group.c:116:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1320: FILE: kernel/sched_group.c:118:
+        entry->data = scheduler;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1320: FILE: kernel/sched_group.c:118:
+        entry->data = scheduler;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1324: FILE: kernel/sched_group.c:122:
+        err = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1324: FILE: kernel/sched_group.c:122:
+        err = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1325: FILE: kernel/sched_group.c:123:
+        printk("Created sched_group %d ('%s')\n", pid, scheduler->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: kernel/sched_group.c:123:
+        printk("Created sched_group %d ('%s')\n", pid, scheduler->name);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1325: FILE: kernel/sched_group.c:123:
+        printk("Created sched_group %d ('%s')\n", pid, scheduler->name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1327: FILE: kernel/sched_group.c:125:
+        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1327: FILE: kernel/sched_group.c:125:
+        return err;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1330: FILE: kernel/sched_group.c:128:
+EXPORT_SYMBOL(register_sched_group);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1334: FILE: kernel/sched_group.c:132:
+        return(task->scheduler->container->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1334: FILE: kernel/sched_group.c:132:
+        return(task->scheduler->container->pid);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1334: FILE: kernel/sched_group.c:132:
+        return(task->scheduler->container->pid);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1339: FILE: kernel/sched_group.c:137:
+        return(((struct scheduler *) scheduler)->container->pid);$

CHECK:SPACING: No space is necessary after a cast
#1339: FILE: kernel/sched_group.c:137:
+        return(((struct scheduler *) scheduler)->container->pid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1339: FILE: kernel/sched_group.c:137:
+        return(((struct scheduler *) scheduler)->container->pid);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1381: FILE: arch/um/kernel/process_kern.c:132:
+EXPORT_SYMBOL(_switch_to);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1394: FILE: arch/um/kernel/signal_kern.c:149:
+EXPORT_SYMBOL(do_signal);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1407: FILE: arch/um/kernel/time_kern.c:42:
+EXPORT_SYMBOL(sched_clock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1420: FILE: include/linux/rcupdate.h:126:
+extern void rcu_qsctr_inc_fn(int cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1433: FILE: include/linux/sched.h:266:
+        void (*sched_add_task)(struct task_struct *p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1433: FILE: include/linux/sched.h:266:
+        void (*sched_add_task)(struct task_struct *p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1434: FILE: include/linux/sched.h:267:
+        void (*sched_remove_task)(struct task_struct *p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1434: FILE: include/linux/sched.h:267:
+        void (*sched_remove_task)(struct task_struct *p);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1496: FILE: kernel/Makefile:59:
+$(obj)/guest_o1_sched.o $(obj)/host_o1_sched.o : $(obj)/%_o1_sched.o : $(obj)/%_o1_scheduler.o $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1519: FILE: kernel/acct.c:551:
+EXPORT_SYMBOL(acct_update_integrals);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1532: FILE: kernel/fork.c:106:
+EXPORT_SYMBOL(__put_task_struct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1541: FILE: kernel/fork.c:346:
+EXPORT_SYMBOL(__mmdrop);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1551: FILE: kernel/guest_sched.c:1:
+#include <linux/sched.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1554: FILE: kernel/guest_sched.c:4:
+#include <asm/mmu_context.h>

ERROR:CODE_INDENT: code indent should use tabs where possible
#1570: FILE: kernel/guest_sched.c:20:
+        if(mm != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1570: FILE: kernel/guest_sched.c:20:
+        if(mm != NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#1570: FILE: kernel/guest_sched.c:20:
+        if(mm != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mm"
#1570: FILE: kernel/guest_sched.c:20:
+        if(mm != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1571: FILE: kernel/guest_sched.c:21:
+                switch_mm(oldmm, mm, to);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1571: FILE: kernel/guest_sched.c:21:
+                switch_mm(oldmm, mm, to);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1573: FILE: kernel/guest_sched.c:23:
+        _switch_to(from, to, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1573: FILE: kernel/guest_sched.c:23:
+        _switch_to(from, to, NULL);$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1578: FILE: kernel/guest_sched.c:28:
+static int initialized = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1586: FILE: kernel/guest_sched.c:36:
+        (*host_sched_init)();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1586: FILE: kernel/guest_sched.c:36:
+        (*host_sched_init)();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1587: FILE: kernel/guest_sched.c:37:
+        initialized = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1587: FILE: kernel/guest_sched.c:37:
+        initialized = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1589: FILE: kernel/guest_sched.c:39:
+        while(1){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1589: FILE: kernel/guest_sched.c:39:
+        while(1){$

ERROR:SPACING: space required before the open brace '{'
#1589: FILE: kernel/guest_sched.c:39:
+        while(1){

ERROR:SPACING: space required before the open parenthesis '('
#1589: FILE: kernel/guest_sched.c:39:
+        while(1){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1590: FILE: kernel/guest_sched.c:40:
+                schedule();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1590: FILE: kernel/guest_sched.c:40:
+                schedule();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1591: FILE: kernel/guest_sched.c:41:
+                do_switch(current, guest_scheduler->container);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1591: FILE: kernel/guest_sched.c:41:
+                do_switch(current, guest_scheduler->container);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1592: FILE: kernel/guest_sched.c:42:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1592: FILE: kernel/guest_sched.c:42:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1594: FILE: kernel/guest_sched.c:44:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1594: FILE: kernel/guest_sched.c:44:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1607: FILE: kernel/guest_sched.c:57:
+        int ret = (*host_try_to_wake_up)(p, state, sync);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1607: FILE: kernel/guest_sched.c:57:
+        int ret = (*host_try_to_wake_up)(p, state, sync);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1608: FILE: kernel/guest_sched.c:58:
+        complete(&p->scheduler->wakeup);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1608: FILE: kernel/guest_sched.c:58:
+        int ret = (*host_try_to_wake_up)(p, state, sync);
+        complete(&p->scheduler->wakeup);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1608: FILE: kernel/guest_sched.c:58:
+        complete(&p->scheduler->wakeup);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1610: FILE: kernel/guest_sched.c:60:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1610: FILE: kernel/guest_sched.c:60:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1624: FILE: kernel/guest_sched.c:74:
+        if(!initialized)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1624: FILE: kernel/guest_sched.c:74:
+        if(!initialized)$

ERROR:SPACING: space required before the open parenthesis '('
#1624: FILE: kernel/guest_sched.c:74:
+        if(!initialized)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1625: FILE: kernel/guest_sched.c:75:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1625: FILE: kernel/guest_sched.c:75:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1627: FILE: kernel/guest_sched.c:77:
+        tick_task = current;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1627: FILE: kernel/guest_sched.c:77:
+        tick_task = current;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1628: FILE: kernel/guest_sched.c:78:
+        do_switch(current, guest_scheduler->container);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1628: FILE: kernel/guest_sched.c:78:
+        do_switch(current, guest_scheduler->container);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1629: FILE: kernel/guest_sched.c:79:
+        (*host_scheduler_tick)();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1629: FILE: kernel/guest_sched.c:79:
+        (*host_scheduler_tick)();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1634: FILE: kernel/guest_sched.c:84:
+        struct task_struct *guest_task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1634: FILE: kernel/guest_sched.c:84:
+        struct task_struct *guest_task;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1635: FILE: kernel/guest_sched.c:85:
+        int pid = kernel_thread(guest_idle, NULL, CLONE_FS | CLONE_FILES | $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1635: FILE: kernel/guest_sched.c:85:
+        int pid = kernel_thread(guest_idle, NULL, CLONE_FS | CLONE_FILES | $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1635: FILE: kernel/guest_sched.c:85:
+        int pid = kernel_thread(guest_idle, NULL, CLONE_FS | CLONE_FILES | $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1636: FILE: kernel/guest_sched.c:86:
+                            CLONE_SIGHAND | CLONE_STOPPED | SIGCHLD);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1636: FILE: kernel/guest_sched.c:86:
+                            CLONE_SIGHAND | CLONE_STOPPED | SIGCHLD);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1638: FILE: kernel/guest_sched.c:88:
+        if(pid < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1638: FILE: kernel/guest_sched.c:88:
+        if(pid < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#1638: FILE: kernel/guest_sched.c:88:
+        if(pid < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1639: FILE: kernel/guest_sched.c:89:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1639: FILE: kernel/guest_sched.c:89:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1641: FILE: kernel/guest_sched.c:91:
+        guest_idle_task = find_task_by_pid(pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1641: FILE: kernel/guest_sched.c:91:
+        guest_idle_task = find_task_by_pid(pid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1642: FILE: kernel/guest_sched.c:92:
+        if(guest_idle_task == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1642: FILE: kernel/guest_sched.c:92:
+        if(guest_idle_task == NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#1642: FILE: kernel/guest_sched.c:92:
+        if(guest_idle_task == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!guest_idle_task"
#1642: FILE: kernel/guest_sched.c:92:
+        if(guest_idle_task == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1643: FILE: kernel/guest_sched.c:93:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1643: FILE: kernel/guest_sched.c:93:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1645: FILE: kernel/guest_sched.c:95:
+        guest_idle_task->scheduler = guest_scheduler;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1645: FILE: kernel/guest_sched.c:95:
+        guest_idle_task->scheduler = guest_scheduler;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1646: FILE: kernel/guest_sched.c:96:
+        guest_scheduler->container = current;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1646: FILE: kernel/guest_sched.c:96:
+        guest_scheduler->container = current;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1648: FILE: kernel/guest_sched.c:98:
+        register_sched_group(current->pid, guest_scheduler);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1648: FILE: kernel/guest_sched.c:98:
+        register_sched_group(current->pid, guest_scheduler);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1650: FILE: kernel/guest_sched.c:100:
+        guest_task = guest_idle_task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1650: FILE: kernel/guest_sched.c:100:
+        guest_task = guest_idle_task;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1651: FILE: kernel/guest_sched.c:101:
+        while(1){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1651: FILE: kernel/guest_sched.c:101:
+        while(1){$

ERROR:SPACING: space required before the open brace '{'
#1651: FILE: kernel/guest_sched.c:101:
+        while(1){

ERROR:SPACING: space required before the open parenthesis '('
#1651: FILE: kernel/guest_sched.c:101:
+        while(1){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1652: FILE: kernel/guest_sched.c:102:
+                INIT_COMPLETION(guest_scheduler->wakeup);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1652: FILE: kernel/guest_sched.c:102:
+                INIT_COMPLETION(guest_scheduler->wakeup);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1653: FILE: kernel/guest_sched.c:103:
+                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1653: FILE: kernel/guest_sched.c:103:
+                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1653: FILE: kernel/guest_sched.c:103:
+                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1654: FILE: kernel/guest_sched.c:104:
+                do_switch(current, guest_task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1654: FILE: kernel/guest_sched.c:104:
+                do_switch(current, guest_task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1655: FILE: kernel/guest_sched.c:105:
+                if(tick_task != NULL){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1655: FILE: kernel/guest_sched.c:105:
+                if(tick_task != NULL){$

ERROR:SPACING: space required before the open brace '{'
#1655: FILE: kernel/guest_sched.c:105:
+                if(tick_task != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#1655: FILE: kernel/guest_sched.c:105:
+                if(tick_task != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tick_task"
#1655: FILE: kernel/guest_sched.c:105:
+                if(tick_task != NULL){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1656: FILE: kernel/guest_sched.c:106:
+                        guest_task = tick_task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1656: FILE: kernel/guest_sched.c:106:
+                        guest_task = tick_task;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1657: FILE: kernel/guest_sched.c:107:
+                        tick_task = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1657: FILE: kernel/guest_sched.c:107:
+                        tick_task = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1658: FILE: kernel/guest_sched.c:108:
+                        scheduler_tick();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1658: FILE: kernel/guest_sched.c:108:
+                        scheduler_tick();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1660: FILE: kernel/guest_sched.c:110:
+                        if(need_resched()) schedule();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1660: FILE: kernel/guest_sched.c:110:
+                        if(need_resched()) schedule();$

ERROR:SPACING: space required before the open parenthesis '('
#1660: FILE: kernel/guest_sched.c:110:
+                        if(need_resched()) schedule();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1660: FILE: kernel/guest_sched.c:110:
+                        if(need_resched()) schedule();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1661: FILE: kernel/guest_sched.c:111:
+                        if(test_tsk_thread_flag(current, TIF_SIGPENDING)) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1661: FILE: kernel/guest_sched.c:111:
+                        if(test_tsk_thread_flag(current, TIF_SIGPENDING)) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1661: FILE: kernel/guest_sched.c:111:
+                        if(test_tsk_thread_flag(current, TIF_SIGPENDING)) $

ERROR:SPACING: space required before the open parenthesis '('
#1661: FILE: kernel/guest_sched.c:111:
+                        if(test_tsk_thread_flag(current, TIF_SIGPENDING)) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#1662: FILE: kernel/guest_sched.c:112:
+                                do_signal();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1662: FILE: kernel/guest_sched.c:112:
+                                do_signal();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1663: FILE: kernel/guest_sched.c:113:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1663: FILE: kernel/guest_sched.c:113:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1664: FILE: kernel/guest_sched.c:114:
+                else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1664: FILE: kernel/guest_sched.c:114:
+                else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1664: FILE: kernel/guest_sched.c:114:
+                }
+                else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1664: FILE: kernel/guest_sched.c:114:
+                else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1665: FILE: kernel/guest_sched.c:115:
+                        wait_for_completion(&guest_scheduler->wakeup);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1665: FILE: kernel/guest_sched.c:115:
+                        wait_for_completion(&guest_scheduler->wakeup);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1666: FILE: kernel/guest_sched.c:116:
+                        guest_task = guest_idle_task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1666: FILE: kernel/guest_sched.c:116:
+                        guest_task = guest_idle_task;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1667: FILE: kernel/guest_sched.c:117:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1667: FILE: kernel/guest_sched.c:117:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1668: FILE: kernel/guest_sched.c:118:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1668: FILE: kernel/guest_sched.c:118:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1673: FILE: kernel/guest_sched.c:123:
+        scheduler->name = "guest_o1_scheduler";$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1673: FILE: kernel/guest_sched.c:123:
+        scheduler->name = "guest_o1_scheduler";$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1674: FILE: kernel/guest_sched.c:124:
+        scheduler->container = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1674: FILE: kernel/guest_sched.c:124:
+        scheduler->container = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1675: FILE: kernel/guest_sched.c:125:
+        scheduler->is_guest = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1675: FILE: kernel/guest_sched.c:125:
+        scheduler->is_guest = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1677: FILE: kernel/guest_sched.c:127:
+        host_sched_init = scheduler->task_ops.sched_init_fn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1677: FILE: kernel/guest_sched.c:127:
+        host_sched_init = scheduler->task_ops.sched_init_fn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1678: FILE: kernel/guest_sched.c:128:
+        scheduler->task_ops.sched_init_fn = guest_sched_init;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1678: FILE: kernel/guest_sched.c:128:
+        scheduler->task_ops.sched_init_fn = guest_sched_init;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1680: FILE: kernel/guest_sched.c:130:
+        host_try_to_wake_up = scheduler->task_ops.try_to_wake_up;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1680: FILE: kernel/guest_sched.c:130:
+        host_try_to_wake_up = scheduler->task_ops.try_to_wake_up;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1681: FILE: kernel/guest_sched.c:131:
+        scheduler->task_ops.try_to_wake_up = guest_try_to_wake_up;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1681: FILE: kernel/guest_sched.c:131:
+        scheduler->task_ops.try_to_wake_up = guest_try_to_wake_up;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1683: FILE: kernel/guest_sched.c:133:
+        host_scheduler_tick = scheduler->task_ops.scheduler_tick;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1683: FILE: kernel/guest_sched.c:133:
+        host_scheduler_tick = scheduler->task_ops.scheduler_tick;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1684: FILE: kernel/guest_sched.c:134:
+        scheduler->task_ops.scheduler_tick = guest_scheduler_tick;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1684: FILE: kernel/guest_sched.c:134:
+        scheduler->task_ops.scheduler_tick = guest_scheduler_tick;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1686: FILE: kernel/guest_sched.c:136:
+        guest_scheduler = scheduler;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1686: FILE: kernel/guest_sched.c:136:
+        guest_scheduler = scheduler;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1687: FILE: kernel/guest_sched.c:137:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1687: FILE: kernel/guest_sched.c:137:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1706: FILE: kernel/o1_sched.c:718:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1706: FILE: kernel/o1_sched.c:718:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1706: FILE: kernel/o1_sched.c:718:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1708: FILE: kernel/o1_sched.c:720:
+        activate_task(p, rq, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1708: FILE: kernel/o1_sched.c:720:
+        activate_task(p, rq, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1709: FILE: kernel/o1_sched.c:721:
+        task_rq_unlock(rq, &flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1709: FILE: kernel/o1_sched.c:721:
+        task_rq_unlock(rq, &flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1723: FILE: kernel/o1_sched.c:738:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1723: FILE: kernel/o1_sched.c:738:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1723: FILE: kernel/o1_sched.c:738:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1725: FILE: kernel/o1_sched.c:740:
+        deactivate_task(p, rq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1725: FILE: kernel/o1_sched.c:740:
+        deactivate_task(p, rq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1726: FILE: kernel/o1_sched.c:741:
+        task_rq_unlock(rq, &flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1726: FILE: kernel/o1_sched.c:741:
+        task_rq_unlock(rq, &flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1745: FILE: kernel/o1_sched.c:3503:
+                .sched_add_task^I^I= o1_sched_add_task,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1745: FILE: kernel/o1_sched.c:3503:
+                .sched_add_task^I^I= o1_sched_add_task,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1746: FILE: kernel/o1_sched.c:3504:
+                .sched_remove_task^I= o1_sched_remove_task,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1746: FILE: kernel/o1_sched.c:3504:
+                .sched_remove_task^I= o1_sched_remove_task,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1764: FILE: kernel/profile.c:382:
+EXPORT_SYMBOL(profile_hit);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1779: FILE: kernel/rcupdate.c:77:
+        rcu_qsctr_inc(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1779: FILE: kernel/rcupdate.c:77:
+        rcu_qsctr_inc(cpu);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1782: FILE: kernel/rcupdate.c:80:
+EXPORT_SYMBOL(rcu_qsctr_inc_fn);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1795: FILE: kernel/sched_group.c:100:
+static int proc_tgid_rename(struct inode *from_dir, struct dentry *from_file, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1796: FILE: kernel/sched_group.c:101:
+                            struct inode *to_dir, struct dentry *to_file)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1796: FILE: kernel/sched_group.c:101:
+                            struct inode *to_dir, struct dentry *to_file)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1798: FILE: kernel/sched_group.c:103:
+        struct proc_dir_entry *entry = PDE(to_dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1798: FILE: kernel/sched_group.c:103:
+        struct proc_dir_entry *entry = PDE(to_dir);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1799: FILE: kernel/sched_group.c:104:
+        struct task_struct *task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1799: FILE: kernel/sched_group.c:104:
+        struct task_struct *task;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1801: FILE: kernel/sched_group.c:106:
+        int err = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1801: FILE: kernel/sched_group.c:106:
+        int err = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1802: FILE: kernel/sched_group.c:107:
+        int pid = simple_strtoul(from_file->d_name.name, &end, 10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1802: FILE: kernel/sched_group.c:107:
+        int pid = simple_strtoul(from_file->d_name.name, &end, 10);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1802: FILE: kernel/sched_group.c:107:
+        int pid = simple_strtoul(from_file->d_name.name, &end, 10);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1804: FILE: kernel/sched_group.c:109:
+        if(*end != '\0')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1804: FILE: kernel/sched_group.c:109:
+        if(*end != '\0')$

ERROR:SPACING: space required before the open parenthesis '('
#1804: FILE: kernel/sched_group.c:109:
+        if(*end != '\0')

ERROR:CODE_INDENT: code indent should use tabs where possible
#1805: FILE: kernel/sched_group.c:110:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1805: FILE: kernel/sched_group.c:110:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1807: FILE: kernel/sched_group.c:112:
+        err = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1807: FILE: kernel/sched_group.c:112:
+        err = -ENOENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1808: FILE: kernel/sched_group.c:113:
+        read_lock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1808: FILE: kernel/sched_group.c:113:
+        read_lock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1813: FILE: kernel/sched_group.c:118:
+        if(task == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1813: FILE: kernel/sched_group.c:118:
+        if(task == NULL)$

ERROR:SPACING: space required before the open parenthesis '('
#1813: FILE: kernel/sched_group.c:118:
+        if(task == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1813: FILE: kernel/sched_group.c:118:
+        if(task == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1814: FILE: kernel/sched_group.c:119:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1814: FILE: kernel/sched_group.c:119:
+                goto out;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1815: FILE: kernel/sched_group.c:120:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1815: FILE: kernel/sched_group.c:120:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1815: FILE: kernel/sched_group.c:120:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1816: FILE: kernel/sched_group.c:121:
+        if(task->state == TASK_RUNNING){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1816: FILE: kernel/sched_group.c:121:
+        if(task->state == TASK_RUNNING){$

ERROR:SPACING: space required before the open brace '{'
#1816: FILE: kernel/sched_group.c:121:
+        if(task->state == TASK_RUNNING){

ERROR:SPACING: space required before the open parenthesis '('
#1816: FILE: kernel/sched_group.c:121:
+        if(task->state == TASK_RUNNING){

CHECK:BRACES: braces {} should be used on all arms of this statement
#1816: FILE: kernel/sched_group.c:121:
+        if(task->state == TASK_RUNNING){
[...]
+        else task->scheduler = entry->data;
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1818: FILE: kernel/sched_group.c:123:
+                /* What I think we need to do here is force both current and$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1819: FILE: kernel/sched_group.c:124:
+                 * the moving process onto the same CPU.  Then when we are $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1819: FILE: kernel/sched_group.c:124:
+                 * the moving process onto the same CPU.  Then when we are $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1820: FILE: kernel/sched_group.c:125:
+                 * running, we know that the other guy has context-switched,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1821: FILE: kernel/sched_group.c:126:
+                 * and it not about to try to call schedule() or do anything$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1822: FILE: kernel/sched_group.c:127:
+                 * else tricky.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1823: FILE: kernel/sched_group.c:128:
+                 * As for an implementation, what I have in mind is:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1824: FILE: kernel/sched_group.c:129:
+                 *    find the common parent scheduler of these two processes$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1825: FILE: kernel/sched_group.c:130:
+                 *    force the container processes of these processes (which$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1826: FILE: kernel/sched_group.c:131:
+                 *        may be the process itself) onto the same (possibly$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1827: FILE: kernel/sched_group.c:132:
+                 *        virtual) CPU$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1828: FILE: kernel/sched_group.c:133:
+                 *    Do the move$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1829: FILE: kernel/sched_group.c:134:
+                 *    restore the CPU masks of the processes$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1830: FILE: kernel/sched_group.c:135:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1832: FILE: kernel/sched_group.c:137:
+                sched_remove_task(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1832: FILE: kernel/sched_group.c:137:
+                sched_remove_task(task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1833: FILE: kernel/sched_group.c:138:
+                task->scheduler = entry->data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1833: FILE: kernel/sched_group.c:138:
+                task->scheduler = entry->data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1834: FILE: kernel/sched_group.c:139:
+                sched_add_task(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1834: FILE: kernel/sched_group.c:139:
+                sched_add_task(task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1836: FILE: kernel/sched_group.c:141:
+                wake_up_process(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1836: FILE: kernel/sched_group.c:141:
+                wake_up_process(task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1837: FILE: kernel/sched_group.c:142:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1837: FILE: kernel/sched_group.c:142:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1838: FILE: kernel/sched_group.c:143:
+        else task->scheduler = entry->data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1838: FILE: kernel/sched_group.c:143:
+        else task->scheduler = entry->data;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1838: FILE: kernel/sched_group.c:143:
+        else task->scheduler = entry->data;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1838: FILE: kernel/sched_group.c:143:
+        }
+        else task->scheduler = entry->data;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1840: FILE: kernel/sched_group.c:145:
+        put_task_struct(task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1840: FILE: kernel/sched_group.c:145:
+        put_task_struct(task);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1841: FILE: kernel/sched_group.c:146:
+        err = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1841: FILE: kernel/sched_group.c:146:
+        err = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1843: FILE: kernel/sched_group.c:148:
+        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1843: FILE: kernel/sched_group.c:148:
+        return err;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1848: FILE: kernel/sched_group.c:153:
+        .rename^I^I= proc_tgid_rename,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1848: FILE: kernel/sched_group.c:153:
+        .rename^I^I= proc_tgid_rename,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1860: FILE: mm/memory.c:2272:
+EXPORT_SYMBOL(update_mem_hiwater);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 368 errors, 289 warnings, 45 checks, 1424 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
