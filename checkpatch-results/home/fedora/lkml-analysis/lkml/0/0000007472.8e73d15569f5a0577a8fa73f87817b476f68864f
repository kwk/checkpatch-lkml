WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:BRACES: braces {} are not necessary for single statement blocks
#120: FILE: drivers/ata/libata-scsi.c:961:
+	if (cdb[1] & 0x1) {
 		;	/* ignore IMMED bit, violates sat-r05 */
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#313: FILE: drivers/ata/libata-scsi.c:1150:
+	if (cdb[0] == VERIFY) {
[...]
+	} else if (cdb[0] == VERIFY_16) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#321: FILE: drivers/ata/libata-scsi.c:1158:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'scmd->sc_data_direction != DMA_TO_DEVICE'
#491: FILE: drivers/ata/libata-scsi.c:2399:
+		if (atapi_dmadir && (scmd->sc_data_direction != DMA_TO_DEVICE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#523: FILE: drivers/ata/libata-scsi.c:2537:
+	if ((tf->protocol = ata_scsi_map_proto(cdb[1])) == ATA_PROT_UNKNOWN)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#552: FILE: drivers/ata/libata-scsi.c:2558:
+		if (cdb[1] & 0x01) {
[...]
 		} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#674: FILE: drivers/ata/pata_cs5530.c:376:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#719: FILE: drivers/ata/sata_svw.c:138:
+		writeb(tf->ctl, (void __iomem *) ioaddr->ctl_addr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#730: FILE: drivers/ata/sata_svw.c:144:
+		       (void __iomem *) ioaddr->feature_addr);

CHECK:SPACING: No space is necessary after a cast
#732: FILE: drivers/ata/sata_svw.c:146:
+		       (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#734: FILE: drivers/ata/sata_svw.c:148:
+		       (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#736: FILE: drivers/ata/sata_svw.c:150:
+		       (void __iomem *) ioaddr->lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#738: FILE: drivers/ata/sata_svw.c:152:
+		       (void __iomem *) ioaddr->lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#745: FILE: drivers/ata/sata_svw.c:154:
+		writew(tf->feature, (void __iomem *) ioaddr->feature_addr);

CHECK:SPACING: No space is necessary after a cast
#746: FILE: drivers/ata/sata_svw.c:155:
+		writew(tf->nsect, (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#747: FILE: drivers/ata/sata_svw.c:156:
+		writew(tf->lbal, (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#748: FILE: drivers/ata/sata_svw.c:157:
+		writew(tf->lbam, (void __iomem *) ioaddr->lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#749: FILE: drivers/ata/sata_svw.c:158:
+		writew(tf->lbah, (void __iomem *) ioaddr->lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#754: FILE: drivers/ata/sata_svw.c:162:
+		writeb(tf->device, (void __iomem *) ioaddr->device_addr);

CHECK:SPACING: No space is necessary after a cast
#791: FILE: drivers/ata/sata_vsc.c:153:
+		       (void __iomem *) ioaddr->feature_addr);

CHECK:SPACING: No space is necessary after a cast
#793: FILE: drivers/ata/sata_vsc.c:155:
+		       (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#795: FILE: drivers/ata/sata_vsc.c:157:
+		       (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#797: FILE: drivers/ata/sata_vsc.c:159:
+		       (void __iomem *) ioaddr->lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#799: FILE: drivers/ata/sata_vsc.c:161:
+		       (void __iomem *) ioaddr->lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#806: FILE: drivers/ata/sata_vsc.c:163:
+		writew(tf->feature, (void __iomem *) ioaddr->feature_addr);

CHECK:SPACING: No space is necessary after a cast
#807: FILE: drivers/ata/sata_vsc.c:164:
+		writew(tf->nsect, (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#808: FILE: drivers/ata/sata_vsc.c:165:
+		writew(tf->lbal, (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#809: FILE: drivers/ata/sata_vsc.c:166:
+		writew(tf->lbam, (void __iomem *) ioaddr->lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#810: FILE: drivers/ata/sata_vsc.c:167:
+		writew(tf->lbah, (void __iomem *) ioaddr->lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#815: FILE: drivers/ata/sata_vsc.c:171:
+		writeb(tf->device, (void __iomem *) ioaddr->device_addr);

CHECK:SPACING: No space is necessary after a cast
#829: FILE: drivers/ata/sata_vsc.c:183:
+	tf->device = readw((void __iomem *) ioaddr->device_addr);

CHECK:SPACING: No space is necessary after a cast
#830: FILE: drivers/ata/sata_vsc.c:184:
+	feature = readw((void __iomem *) ioaddr->error_addr);

CHECK:SPACING: No space is necessary after a cast
#831: FILE: drivers/ata/sata_vsc.c:185:
+	nsect = readw((void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#832: FILE: drivers/ata/sata_vsc.c:186:
+	lbal = readw((void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#833: FILE: drivers/ata/sata_vsc.c:187:
+	lbam = readw((void __iomem *) ioaddr->lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#834: FILE: drivers/ata/sata_vsc.c:188:
+	lbah = readw((void __iomem *) ioaddr->lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#844: FILE: drivers/ata/sata_vsc.c:335:
+	writel(0, (void __iomem *) base + VSC_SATA_UP_DESCRIPTOR_OFFSET);

CHECK:SPACING: No space is necessary after a cast
#845: FILE: drivers/ata/sata_vsc.c:336:
+	writel(0, (void __iomem *) base + VSC_SATA_UP_DATA_BUFFER_OFFSET);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000007472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 3 warnings, 35 checks, 721 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000007472.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
