WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
diff -u --new-file --recursive --exclude-from /usr/src/exclude linux.2.5.41/drivers/scsi/wd7000.c linux.2.5.41-ac2/drivers/scsi/wd7000.c

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#55: FILE: drivers/scsi/wd7000.c:228:
+	struct Scsi_Host *sh;	/* Pointer to Scsi_Host structure    */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Mailbox>
#63: FILE: drivers/scsi/wd7000.c:236:
+		Mailbox ogmb[OGMB_CNT];	/* Outgoing mailboxes                */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#126: FILE: drivers/scsi/wd7000.c:284:
+	unsigned iobase;	/* I/O base address                           */

CHECK:CAMELCASE: Avoid CamelCase: <Config>
#143: FILE: drivers/scsi/wd7000.c:295:
+static Config configs[] = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: drivers/scsi/wd7000.c:311:
+	unsigned len;		/* length of string              */

CHECK:CAMELCASE: Avoid CamelCase: <Signature>
#166: FILE: drivers/scsi/wd7000.c:314:
+static const Signature signatures[] = {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#229: FILE: drivers/scsi/wd7000.c:440:
+	volatile unchar status;	/* SCSI Return Status                        */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#230: FILE: drivers/scsi/wd7000.c:441:
+	volatile unchar vue;	/* Vendor Unique Error Code                  */

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#237: FILE: drivers/scsi/wd7000.c:448:
+	Scsi_Cmnd *SCpnt;	/* Scsi_Cmnd using this SCB                  */

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#237: FILE: drivers/scsi/wd7000.c:448:
+	Scsi_Cmnd *SCpnt;	/* Scsi_Cmnd using this SCB                  */

CHECK:CAMELCASE: Avoid CamelCase: <Sgb>
#238: FILE: drivers/scsi/wd7000.c:449:
+	Sgb sgb[WD7000_SG];	/* Scatter/gather list for this SCB          */

CHECK:CAMELCASE: Avoid CamelCase: <Adapter>
#239: FILE: drivers/scsi/wd7000.c:450:
+	Adapter *host;		/* host adapter                              */

CHECK:CAMELCASE: Avoid CamelCase: <IDlun>
#257: FILE: drivers/scsi/wd7000.c:484:
+	unchar IDlun;		/* Initiator SCSI ID/lun     */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#261: FILE: drivers/scsi/wd7000.c:488:
+	volatile unchar vue;	/* vendor-unique error code  */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#262: FILE: drivers/scsi/wd7000.c:489:
+	volatile unchar status;	/* returned (icmb) status    */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#263: FILE: drivers/scsi/wd7000.c:490:
+	volatile unchar phase;	/* used by interrupt handler */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#278: FILE: drivers/scsi/wd7000.c:498:
+	volatile unchar vue;	/* vendor-unique error code            */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#279: FILE: drivers/scsi/wd7000.c:499:
+	volatile unchar status;	/* returned (icmb) status              */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#280: FILE: drivers/scsi/wd7000.c:500:
+	volatile unchar phase;	/* used by interrupt handler           */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#292: FILE: drivers/scsi/wd7000.c:505:
+	volatile unchar primary;	/* primary revision level (returned)   */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#293: FILE: drivers/scsi/wd7000.c:506:
+	volatile unchar secondary;	/* secondary revision level (returned) */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#295: FILE: drivers/scsi/wd7000.c:508:
+	volatile unchar vue;	/* vendor-unique error code            */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#296: FILE: drivers/scsi/wd7000.c:509:
+	volatile unchar status;	/* returned (icmb) status              */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#297: FILE: drivers/scsi/wd7000.c:510:
+	volatile unchar phase;	/* used by interrupt handler           */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#304: FILE: drivers/scsi/wd7000.c:515:
+	volatile unchar mask[14];	/* mask bits                 */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#312: FILE: drivers/scsi/wd7000.c:519:
+	volatile unchar vue;	/* vendor-unique error code  */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#313: FILE: drivers/scsi/wd7000.c:520:
+	volatile unchar status;	/* returned (icmb) status    */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#314: FILE: drivers/scsi/wd7000.c:521:
+	volatile unchar phase;	/* used by interrupt handler */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#331: FILE: drivers/scsi/wd7000.c:530:
+	volatile unchar vue;	/* vendor-unique error code    */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#332: FILE: drivers/scsi/wd7000.c:531:
+	volatile unchar status;	/* returned (icmb) status      */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#333: FILE: drivers/scsi/wd7000.c:532:
+	volatile unchar phase;	/* used by interrupt handler   */

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#352: FILE: drivers/scsi/wd7000.c:543:
+	unchar len[3];		/* parms buffer length       */
 	              		   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#353: FILE: drivers/scsi/wd7000.c:544:
+	unchar ptr[3];		/* parms buffer address      */
 	              		   ^^^^^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#356: FILE: drivers/scsi/wd7000.c:547:
+	volatile unchar vue;	/* vendor-unique error code  */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#357: FILE: drivers/scsi/wd7000.c:548:
+	volatile unchar status;	/* returned (icmb) status    */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#358: FILE: drivers/scsi/wd7000.c:549:
+	volatile unchar phase;	/* used by interrupt handler */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#369: FILE: drivers/scsi/wd7000.c:555:
+	volatile unchar vue;	/* vendor-unique error code  */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#370: FILE: drivers/scsi/wd7000.c:556:
+	volatile unchar status;	/* returned (icmb) status    */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#371: FILE: drivers/scsi/wd7000.c:557:
+	volatile unchar phase;	/* used by interrupt handler */

CHECK:CAMELCASE: Avoid CamelCase: <IcbRecvCmd>
#384: FILE: drivers/scsi/wd7000.c:562:
+	IcbRecvCmd recv_cmd;	/* format for receive command     */

CHECK:CAMELCASE: Avoid CamelCase: <IcbSendStat>
#385: FILE: drivers/scsi/wd7000.c:563:
+	IcbSendStat send_stat;	/* format for send status         */

CHECK:CAMELCASE: Avoid CamelCase: <IcbRevLvl>
#386: FILE: drivers/scsi/wd7000.c:564:
+	IcbRevLvl rev_lvl;	/* format for get revision level  */

CHECK:CAMELCASE: Avoid CamelCase: <IcbDiag>
#387: FILE: drivers/scsi/wd7000.c:565:
+	IcbDiag diag;		/* format for execute diagnostics */

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#388: FILE: drivers/scsi/wd7000.c:566:
+	IcbParms eparms;	/* format for get/set exec parms  */
 	                	                           ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <IcbParms>
#388: FILE: drivers/scsi/wd7000.c:566:
+	IcbParms eparms;	/* format for get/set exec parms  */

CHECK:CAMELCASE: Avoid CamelCase: <IcbAny>
#389: FILE: drivers/scsi/wd7000.c:567:
+	IcbAny icb;		/* generic format                 */

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#416: FILE: drivers/scsi/wd7000.c:593:
+		printk(KERN_ERR "wd7000_setup: \"wd7000=%d,%d,0x%x\" -> %s\n", ints[1], ints[2], ints[3], mesg);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#416: FILE: drivers/scsi/wd7000.c:593:
+		printk(KERN_ERR "wd7000_setup: \"wd7000=%d,%d,0x%x\" -> %s\n", ints[1], ints[2], ints[3], mesg);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#418: FILE: drivers/scsi/wd7000.c:595:
+		printk(KERN_ERR "wd7000_setup: \"wd7000=%d,%d,0x%x,%d\" -> %s\n", ints[1], ints[2], ints[3], ints[4], mesg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#418: FILE: drivers/scsi/wd7000.c:595:
+		printk(KERN_ERR "wd7000_setup: \"wd7000=%d,%d,0x%x,%d\" -> %s\n", ints[1], ints[2], ints[3], ints[4], mesg);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#420: FILE: drivers/scsi/wd7000.c:597:
+		printk(KERN_ERR "wd7000_setup: \"wd7000=%d,%d,0x%x,%d,%d\" -> %s\n", ints[1], ints[2], ints[3], ints[4], ints[5], mesg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#420: FILE: drivers/scsi/wd7000.c:597:
+		printk(KERN_ERR "wd7000_setup: \"wd7000=%d,%d,0x%x,%d,%d\" -> %s\n", ints[1], ints[2], ints[3], ints[4], ints[5], mesg);

CHECK:SPACING: No space is necessary after a cast
#434: FILE: drivers/scsi/wd7000.c:621:
+	(void) get_options(str, ARRAY_SIZE(ints), ints);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#440: FILE: drivers/scsi/wd7000.c:624:
+		printk(KERN_ERR "%s: Too many \"wd7000=\" configurations in " "command line!\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#440: FILE: drivers/scsi/wd7000.c:624:
+		printk(KERN_ERR "%s: Too many \"wd7000=\" configurations in " "command line!\n", __FUNCTION__);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#440: FILE: drivers/scsi/wd7000.c:624:
+		printk(KERN_ERR "%s: Too many \"wd7000=\" configurations in " "command line!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#440: FILE: drivers/scsi/wd7000.c:624:
+		printk(KERN_ERR "%s: Too many \"wd7000=\" configurations in " "command line!\n", __FUNCTION__);

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#448: FILE: drivers/scsi/wd7000.c:629:
+		printk(KERN_ERR "%s: Error in command line!  " "Usage: wd7000=<IRQ>,<DMA>,IO>[,<BUS_ON>" "[,<BUS_OFF>]]\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#448: FILE: drivers/scsi/wd7000.c:629:
+		printk(KERN_ERR "%s: Error in command line!  " "Usage: wd7000=<IRQ>,<DMA>,IO>[,<BUS_ON>" "[,<BUS_OFF>]]\n", __FUNCTION__);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#448: FILE: drivers/scsi/wd7000.c:629:
+		printk(KERN_ERR "%s: Error in command line!  " "Usage: wd7000=<IRQ>,<DMA>,IO>[,<BUS_ON>" "[,<BUS_OFF>]]\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#448: FILE: drivers/scsi/wd7000.c:629:
+		printk(KERN_ERR "%s: Error in command line!  " "Usage: wd7000=<IRQ>,<DMA>,IO>[,<BUS_ON>" "[,<BUS_OFF>]]\n", __FUNCTION__);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#458: FILE: drivers/scsi/wd7000.c:663:
+				setup_error("BUS_ON value is out of range (500" " to 31875 nanoseconds)!", ints);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#458: FILE: drivers/scsi/wd7000.c:663:
+				setup_error("BUS_ON value is out of range (500" " to 31875 nanoseconds)!", ints);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#468: FILE: drivers/scsi/wd7000.c:672:
+				setup_error("BUS_OFF value is out of range (500" " to 31875 nanoseconds)!", ints);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#468: FILE: drivers/scsi/wd7000.c:672:
+				setup_error("BUS_OFF value is out of range (500" " to 31875 nanoseconds)!", ints);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#499: FILE: drivers/scsi/wd7000.c:689:
+					setup_error("duplicated DMA " "channel!", ints);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#503: FILE: drivers/scsi/wd7000.c:693:
+					setup_error("duplicated I/O " "base address!", ints);

WARNING:LONG_LINE: line length of 227 exceeds 100 columns
#516: FILE: drivers/scsi/wd7000.c:700:
+			"BUS_ON=%dns, BUS_OFF=%dns\n", configs[wd7000_card_num].irq, configs[wd7000_card_num].dma, configs[wd7000_card_num].iobase, configs[wd7000_card_num].bus_on * 125, configs[wd7000_card_num].bus_off * 125);

WARNING:SPLIT_STRING: quoted string split across lines
#516: FILE: drivers/scsi/wd7000.c:700:
 		dprintk(KERN_DEBUG "wd7000_setup: IRQ=%d, DMA=%d, I/O=0x%x, "
+			"BUS_ON=%dns, BUS_OFF=%dns\n", configs[wd7000_card_num].irq, configs[wd7000_card_num].dma, configs[wd7000_card_num].iobase, configs[wd7000_card_num].bus_on * 125, configs[wd7000_card_num].bus_off * 125);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: drivers/scsi/wd7000.c:724:
+static inline void any2scsi(unchar * scsi, int any)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#544: FILE: drivers/scsi/wd7000.c:732:
+static inline int scsi2int(unchar * scsi)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#559: FILE: drivers/scsi/wd7000.c:741:
+	return (result.i);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#568: FILE: drivers/scsi/wd7000.c:759:
+static inline void wd7000_enable_intr(Adapter * host)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#578: FILE: drivers/scsi/wd7000.c:766:
+static inline void wd7000_enable_dma(Adapter * host)

WARNING:LINE_SPACING: Missing a blank line after declarations
#590: FILE: drivers/scsi/wd7000.c:769:
+	unsigned long flags;
+	host->control |= DMA_EN;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: drivers/scsi/wd7000.c:782:
+static inline short WAIT(unsigned port, unsigned mask, unsigned allof, unsigned noneof)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: drivers/scsi/wd7000.c:782:
+static inline short WAIT(unsigned port, unsigned mask, unsigned allof, unsigned noneof)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: drivers/scsi/wd7000.c:782:
+static inline short WAIT(unsigned port, unsigned mask, unsigned allof, unsigned noneof)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: drivers/scsi/wd7000.c:782:
+static inline short WAIT(unsigned port, unsigned mask, unsigned allof, unsigned noneof)

CHECK:CAMELCASE: Avoid CamelCase: <WAITbits>
#608: FILE: drivers/scsi/wd7000.c:784:
+	register unsigned WAITbits;

CHECK:CAMELCASE: Avoid CamelCase: <WAITtimeout>
#609: FILE: drivers/scsi/wd7000.c:785:
+	register unsigned long WAITtimeout = jiffies + WAITnexttimeout;

CHECK:CAMELCASE: Avoid CamelCase: <WAITnexttimeout>
#609: FILE: drivers/scsi/wd7000.c:785:
+	register unsigned long WAITtimeout = jiffies + WAITnexttimeout;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: drivers/scsi/wd7000.c:798:
+static inline int command_out(Adapter * host, unchar * cmd, int len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: drivers/scsi/wd7000.c:798:
+static inline int command_out(Adapter * host, unchar * cmd, int len)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#655: FILE: drivers/scsi/wd7000.c:813:
+	printk(KERN_WARNING "wd7000 command_out: WAIT failed(%d)\n", len + 1);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#658: FILE: drivers/scsi/wd7000.c:815:
+	return (0);

CHECK:CAMELCASE: Avoid CamelCase: <Scb>
#689: FILE: drivers/scsi/wd7000.c:831:
+	register Scb *scb, *p = NULL;

WARNING:INDENTED_LABEL: labels should not be indented
#700: FILE: drivers/scsi/wd7000.c:842:
+      retry:

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#705: FILE: drivers/scsi/wd7000.c:847:
+			for (now = jiffies; now == jiffies;)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#713: FILE: drivers/scsi/wd7000.c:855:
+			printk(KERN_ERR "wd7000: can't get enough free SCBs.\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#714: FILE: drivers/scsi/wd7000.c:856:
+			return (NULL);

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#718: FILE: drivers/scsi/wd7000.c:860:
+	/* Take the lock, then check we didnt get beaten, if so try again */
 	                                ^^^^^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#759: FILE: drivers/scsi/wd7000.c:878:
+	return (scb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#764: FILE: drivers/scsi/wd7000.c:882:
+static inline void free_scb(Scb * scb)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scbs[0]
#807: FILE: drivers/scsi/wd7000.c:905:
+	scbfree = &(scbs[0]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around scbs[i + 1]
#810: FILE: drivers/scsi/wd7000.c:908:
+		scbs[i].next = &(scbs[i + 1]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#819: FILE: drivers/scsi/wd7000.c:916:
+static int mail_out(Adapter * host, Scb * scbptr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#819: FILE: drivers/scsi/wd7000.c:916:
+static int mail_out(Adapter * host, Scb * scbptr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around host->next_ogmb
#844: FILE: drivers/scsi/wd7000.c:925:
+	int *next_ogmb = &(host->next_ogmb);

CHECK:SPACING: No space is necessary after a cast
#846: FILE: drivers/scsi/wd7000.c:927:
+	dprintk("wd7000_mail_out: 0x%06lx", (long) scbptr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#852: FILE: drivers/scsi/wd7000.c:933:
+		if (ogmbs[ogmb].status == 0) {
[...]
+			*next_ogmb = (ogmb + 1) % OGMB_CNT;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#855: FILE: drivers/scsi/wd7000.c:936:
+			any2scsi((unchar *) ogmbs[ogmb].scbptr, (int) scbptr);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#861: FILE: drivers/scsi/wd7000.c:940:
+			break;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#861: FILE: drivers/scsi/wd7000.c:940:
+		} else

CHECK:SPACING: No space is necessary after a cast
#884: FILE: drivers/scsi/wd7000.c:945:
+	dprintk(", scb is 0x%06lx", (long) scbptr);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#896: FILE: drivers/scsi/wd7000.c:957:
+		return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#911: FILE: drivers/scsi/wd7000.c:967:
+	return (1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#916: FILE: drivers/scsi/wd7000.c:971:
+static int make_code(unsigned hosterr, unsigned scsierr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#916: FILE: drivers/scsi/wd7000.c:971:
+static int make_code(unsigned hosterr, unsigned scsierr)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#994: FILE: drivers/scsi/wd7000.c:1012:
+		dprintk("\nSCSI command error: SCSI 0x%02x host 0x%04x return %d\n", scsierr, in_error, hosterr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1002: FILE: drivers/scsi/wd7000.c:1018:
+static void wd7000_scsi_done(Scsi_Cmnd * SCpnt)

CHECK:SPACING: No space is necessary after a cast
#1006: FILE: drivers/scsi/wd7000.c:1020:
+	dprintk("wd7000_scsi_done: 0x%06lx\n", (long) SCpnt);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_scsi_done', this function's name, in a string
#1006: FILE: drivers/scsi/wd7000.c:1020:
+	dprintk("wd7000_scsi_done: 0x%06lx\n", (long) SCpnt);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <SCp>
#1007: FILE: drivers/scsi/wd7000.c:1021:
+	SCpnt->SCp.phase = 0;

CHECK:SPACING: No space is necessary after a cast
#1071: FILE: drivers/scsi/wd7000.c:1034:
+	Adapter *host = (Adapter *) dev_id;

CHECK:SPACING: No space is necessary after a cast
#1076: FILE: drivers/scsi/wd7000.c:1039:
+	dprintk("wd7000_intr_handle: irq = %d, host = 0x%06lx\n", irq, (long) host);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_intr_handle', this function's name, in a string
#1076: FILE: drivers/scsi/wd7000.c:1039:
+	dprintk("wd7000_intr_handle: irq = %d, host = 0x%06lx\n", irq, (long) host);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_intr_handle', this function's name, in a string
#1080: FILE: drivers/scsi/wd7000.c:1043:
+	dprintk("wd7000_intr_handle: intr stat = 0x%02x\n", flag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_intr_handle', this function's name, in a string
#1091: FILE: drivers/scsi/wd7000.c:1054:
+		dprintk("wd7000_intr_handle: phantom interrupt...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_intr_handle', this function's name, in a string
#1122: FILE: drivers/scsi/wd7000.c:1062:
+			dprintk("wd7000_intr_handle: free outgoing mailbox\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1130: FILE: drivers/scsi/wd7000.c:1070:
+			return;
+		} else {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1135: FILE: drivers/scsi/wd7000.c:1075:
+				dprintk("wd7000_intr_handle: unsolicited interrupt 0x%02x\n", icmb_status);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_intr_handle', this function's name, in a string
#1135: FILE: drivers/scsi/wd7000.c:1075:
+				dprintk("wd7000_intr_handle: unsolicited interrupt 0x%02x\n", icmb_status);

CHECK:SPACING: No space is necessary after a cast
#1140: FILE: drivers/scsi/wd7000.c:1080:
+			scb = isa_bus_to_virt(scsi2int((unchar *) icmbs[icmb].scbptr));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'SCpnt->SCp.phase'
#1144: FILE: drivers/scsi/wd7000.c:1084:
+				if (--(SCpnt->SCp.phase) <= 0) {	/* all scbs are done */

CHECK:SPACING: No space is necessary after a cast
#1155: FILE: drivers/scsi/wd7000.c:1095:
+				icb = (IcbAny *) scb;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_intr_handle', this function's name, in a string
#1166: FILE: drivers/scsi/wd7000.c:1104:
+	dprintk("wd7000_intr_handle: return from interrupt handler\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1187: FILE: drivers/scsi/wd7000.c:1118:
+static int wd7000_queuecommand(Scsi_Cmnd * SCpnt, void (*done) (Scsi_Cmnd *))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1205: FILE: drivers/scsi/wd7000.c:1121:
+	register Scb *scb;
+	register Sgb *sgb;

CHECK:SPACING: No space is necessary after a cast
#1206: FILE: drivers/scsi/wd7000.c:1122:
+	register unchar *cdb = (unchar *) SCpnt->cmnd;

CHECK:SPACING: No space is necessary after a cast
#1209: FILE: drivers/scsi/wd7000.c:1125:
+	Adapter *host = (Adapter *) SCpnt->host->hostdata;

CHECK:SPACING: No space is necessary after a cast
#1227: FILE: drivers/scsi/wd7000.c:1137:
+	SCpnt->host_scribble = (unchar *) scb;

CHECK:SPACING: No space is necessary after a cast
#1235: FILE: drivers/scsi/wd7000.c:1141:
+		struct scatterlist *sg = (struct scatterlist *) SCpnt->request_buffer;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1236: FILE: drivers/scsi/wd7000.c:1142:
+		unsigned i;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1242: FILE: drivers/scsi/wd7000.c:1144:
+		if (SCpnt->host->sg_tablesize == SG_NONE) {
+			panic("wd7000_queuecommand: scatter/gather not supported.\n");
+		}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_queuecommand', this function's name, in a string
#1243: FILE: drivers/scsi/wd7000.c:1145:
+			panic("wd7000_queuecommand: scatter/gather not supported.\n");

CHECK:SPACING: No space is necessary after a cast
#1253: FILE: drivers/scsi/wd7000.c:1151:
+		any2scsi(scb->dataptr, (int) sgb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1287: FILE: drivers/scsi/wd7000.c:1173:
+static int wd7000_command(Scsi_Cmnd * SCpnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1308: FILE: drivers/scsi/wd7000.c:1186:
+static int wd7000_diagnostics(Adapter * host, int code)

CHECK:SPACING: No space is necessary after a cast
#1335: FILE: drivers/scsi/wd7000.c:1194:
+	any2scsi(icb.ptr, (int) &buf);

CHECK:SPACING: No space is necessary after a cast
#1342: FILE: drivers/scsi/wd7000.c:1201:
+	mail_out(host, (struct scb *) &icb);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1359: FILE: drivers/scsi/wd7000.c:1209:
+		printk("wd7000_diagnostics: timed out.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_diagnostics', this function's name, in a string
#1359: FILE: drivers/scsi/wd7000.c:1209:
+		printk("wd7000_diagnostics: timed out.\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1360: FILE: drivers/scsi/wd7000.c:1210:
+		return (0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1363: FILE: drivers/scsi/wd7000.c:1213:
+		printk("wd7000_diagnostics: failed (0x%02x,0x%02x)\n", icb.vue, icb.status);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_diagnostics', this function's name, in a string
#1363: FILE: drivers/scsi/wd7000.c:1213:
+		printk("wd7000_diagnostics: failed (0x%02x,0x%02x)\n", icb.vue, icb.status);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1364: FILE: drivers/scsi/wd7000.c:1214:
+		return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1373: FILE: drivers/scsi/wd7000.c:1221:
+static int wd7000_adapter_reset(Adapter * host)

CHECK:CAMELCASE: Avoid CamelCase: <InitCmd>
#1461: FILE: drivers/scsi/wd7000.c:1223:
+	InitCmd init_cmd = {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1477: FILE: drivers/scsi/wd7000.c:1239:
+	udelay(40);		/* reset pulse: this is 40us, only need 25us */

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1482: FILE: drivers/scsi/wd7000.c:1244:
+		printk("wd7000_init: WAIT timed out.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1486: FILE: drivers/scsi/wd7000.c:1248:
+	if ((diag = inb(host->iobase + ASC_INTR_STAT)) != 1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1487: FILE: drivers/scsi/wd7000.c:1249:
+		printk("wd7000_init: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1491: FILE: drivers/scsi/wd7000.c:1253:
+			printk("RAM failure.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1494: FILE: drivers/scsi/wd7000.c:1256:
+			printk("FIFO R/W failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1497: FILE: drivers/scsi/wd7000.c:1259:
+			printk("SBIC register R/W failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1500: FILE: drivers/scsi/wd7000.c:1262:
+			printk("Initialization D-FF failed.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1503: FILE: drivers/scsi/wd7000.c:1265:
+			printk("Host IRQ D-FF failed.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1506: FILE: drivers/scsi/wd7000.c:1268:
+			printk("ROM checksum error.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1509: FILE: drivers/scsi/wd7000.c:1271:
+			printk("diagnostic code 0x%02Xh received.\n", diag);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around host->mb
#1514: FILE: drivers/scsi/wd7000.c:1276:
+	memset(&(host->mb), 0, sizeof(host->mb));

CHECK:SPACING: No space is necessary after a cast
#1517: FILE: drivers/scsi/wd7000.c:1279:
+	any2scsi((unchar *) & (init_cmd.mailboxes), (int) &(host->mb));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1517: FILE: drivers/scsi/wd7000.c:1279:
+	any2scsi((unchar *) & (init_cmd.mailboxes), (int) &(host->mb));
 	                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around init_cmd.mailboxes
#1517: FILE: drivers/scsi/wd7000.c:1279:
+	any2scsi((unchar *) & (init_cmd.mailboxes), (int) &(host->mb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around host->mb
#1517: FILE: drivers/scsi/wd7000.c:1279:
+	any2scsi((unchar *) & (init_cmd.mailboxes), (int) &(host->mb));

CHECK:SPACING: No space is necessary after a cast
#1518: FILE: drivers/scsi/wd7000.c:1280:
+	if (!command_out(host, (unchar *) & init_cmd, sizeof(init_cmd))) {

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1518: FILE: drivers/scsi/wd7000.c:1280:
+	if (!command_out(host, (unchar *) & init_cmd, sizeof(init_cmd))) {
 	                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1519: FILE: drivers/scsi/wd7000.c:1281:
+		printk(KERN_ERR "wd7000_adapter_reset: adapter initialization failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_adapter_reset', this function's name, in a string
#1519: FILE: drivers/scsi/wd7000.c:1281:
+		printk(KERN_ERR "wd7000_adapter_reset: adapter initialization failed.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1524: FILE: drivers/scsi/wd7000.c:1286:
+		printk("wd7000_adapter_reset: WAIT timed out.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_adapter_reset', this function's name, in a string
#1524: FILE: drivers/scsi/wd7000.c:1286:
+		printk("wd7000_adapter_reset: WAIT timed out.\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1531: FILE: drivers/scsi/wd7000.c:1292:
+static int wd7000_init(Adapter * host)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1536: FILE: drivers/scsi/wd7000.c:1297:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1538: FILE: drivers/scsi/wd7000.c:1299:
+		printk("wd7000_init: can't get IRQ %d.\n", host->irq);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_init', this function's name, in a string
#1538: FILE: drivers/scsi/wd7000.c:1299:
+		printk("wd7000_init: can't get IRQ %d.\n", host->irq);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1539: FILE: drivers/scsi/wd7000.c:1300:
+		return (0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1542: FILE: drivers/scsi/wd7000.c:1303:
+		printk("wd7000_init: can't get DMA channel %d.\n", host->dma);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_init', this function's name, in a string
#1542: FILE: drivers/scsi/wd7000.c:1303:
+		printk("wd7000_init: can't get DMA channel %d.\n", host->dma);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1544: FILE: drivers/scsi/wd7000.c:1305:
+		return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1552: FILE: drivers/scsi/wd7000.c:1313:
+		return (0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1560: FILE: drivers/scsi/wd7000.c:1320:
+static void wd7000_revision(Adapter * host)

CHECK:SPACING: No space is necessary after a cast
#1589: FILE: drivers/scsi/wd7000.c:1331:
+	mail_out(host, (struct scb *) &icb);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1617: FILE: drivers/scsi/wd7000.c:1352:
+	return (length);

WARNING:TYPO_SPELLING: 'inout' may be misspelled - perhaps 'input'?
#1622: FILE: drivers/scsi/wd7000.c:1356:
+static int wd7000_proc_info(char *buffer, char **start, off_t offset, int length, int hostno, int inout)
                                                                                                   ^^^^^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1622: FILE: drivers/scsi/wd7000.c:1356:
+static int wd7000_proc_info(char *buffer, char **start, off_t offset, int length, int hostno, int inout)

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#1631: FILE: drivers/scsi/wd7000.c:1359:
+	Scsi_Device *scd;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wd7000_host[i]->host_no == hostno'
#1680: FILE: drivers/scsi/wd7000.c:1374:
+		if (wd7000_host[i] && (wd7000_host[i]->host_no == hostno)) {

WARNING:TYPO_SPELLING: 'inout' may be misspelled - perhaps 'input'?
#1707: FILE: drivers/scsi/wd7000.c:1389:
+	if (inout)
 	    ^^^^^

CHECK:SPACING: No space is necessary after a cast
#1711: FILE: drivers/scsi/wd7000.c:1392:
+	adapter = (Adapter *) host->hostdata;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1718: FILE: drivers/scsi/wd7000.c:1395:
+	SPRINTF("Host scsi%d: Western Digital WD-7000 (rev %d.%d)\n", hostno, adapter->rev1, adapter->rev2);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1809: FILE: drivers/scsi/wd7000.c:1443:
+			SPRINTF("  [Channel: %02d, Id: %02d, Lun: %02d]  ", scd->channel, scd->id, scd->lun);

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#1810: FILE: drivers/scsi/wd7000.c:1444:
+			SPRINTF("%s ", (scd->type < MAX_SCSI_DEVICE_CODE) ? scsi_device_types[(short) scd->type] : "Unknown device");

CHECK:SPACING: No space is necessary after a cast
#1810: FILE: drivers/scsi/wd7000.c:1444:
+			SPRINTF("%s ", (scd->type < MAX_SCSI_DEVICE_CODE) ? scsi_device_types[(short) scd->type] : "Unknown device");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1844: FILE: drivers/scsi/wd7000.c:1484:
+static int wd7000_detect(Scsi_Host_Template * tpnt)

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#1844: FILE: drivers/scsi/wd7000.c:1484:
+static int wd7000_detect(Scsi_Host_Template * tpnt)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1854: FILE: drivers/scsi/wd7000.c:1488:
+	unsigned iobase;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_detect', this function's name, in a string
#1860: FILE: drivers/scsi/wd7000.c:1493:
+	dprintk("wd7000_detect: started\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1873: FILE: drivers/scsi/wd7000.c:1500:
+	for (i = 0; i < UNITS; wd7000_host[i++] = NULL);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1874: FILE: drivers/scsi/wd7000.c:1501:
+	for (i = 0; i < NUM_CONFIGS; biosptr[i++] = -1);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1922: FILE: drivers/scsi/wd7000.c:1522:
+					void *biosaddr = ioremap(wd7000_biosaddr[biosaddr_ptr] + signatures[sig_ptr].ofs,

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#1927: FILE: drivers/scsi/wd7000.c:1527:
+						bios_match = memcmp((char *) biosaddr, signatures[sig_ptr].sig, signatures[sig_ptr].len);

CHECK:SPACING: No space is necessary after a cast
#1927: FILE: drivers/scsi/wd7000.c:1527:
+						bios_match = memcmp((char *) biosaddr, signatures[sig_ptr].sig, signatures[sig_ptr].len);

WARNING:INDENTED_LABEL: labels should not be indented
#1940: FILE: drivers/scsi/wd7000.c:1536:
+	      bios_matched:

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_detect', this function's name, in a string
#1946: FILE: drivers/scsi/wd7000.c:1541:
+		dprintk("wd7000_detect: pass %d\n", pass + 1);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1956: FILE: drivers/scsi/wd7000.c:1546:
+			dprintk("WD-7000 SST BIOS detected at 0x%lx: checking...\n", wd7000_biosaddr[biosaddr_ptr]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_detect', this function's name, in a string
#2035: FILE: drivers/scsi/wd7000.c:1557:
+		dprintk("wd7000_detect: check IO 0x%x region...\n", iobase);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2037: FILE: drivers/scsi/wd7000.c:1559:
+		if (request_region(iobase, 4, "wd7000")) {
[...]
+			}
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2038: FILE: drivers/scsi/wd7000.c:1560:
+		if (request_region(iobase, 4, "wd7000")) {
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_detect', this function's name, in a string
#2039: FILE: drivers/scsi/wd7000.c:1561:
+			dprintk("wd7000_detect: ASC reset (IO 0x%x) ...", iobase);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2048: FILE: drivers/scsi/wd7000.c:1570:
+			if (WAIT(iobase + ASC_STAT, ASC_STATMASK, CMD_RDY, 0)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2051: FILE: drivers/scsi/wd7000.c:1573:
+			} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sh"
#2064: FILE: drivers/scsi/wd7000.c:1585:
+				if (sh == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#2067: FILE: drivers/scsi/wd7000.c:1588:
+				host = (Adapter *) sh->hostdata;

CHECK:SPACING: No space is necessary after a cast
#2069: FILE: drivers/scsi/wd7000.c:1590:
+				dprintk("wd7000_detect: adapter allocated at 0x%x\n", (int) host);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_detect', this function's name, in a string
#2069: FILE: drivers/scsi/wd7000.c:1590:
+				dprintk("wd7000_detect: adapter allocated at 0x%x\n", (int) host);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2078: FILE: drivers/scsi/wd7000.c:1599:
+				host->sh = wd7000_host[unit] = sh;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#2081: FILE: drivers/scsi/wd7000.c:1602:
+				dprintk("wd7000_detect: Trying init WD-7000 card at IO " "0x%x, IRQ %d, DMA %d...\n", host->iobase, host->irq, host->dma);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_detect', this function's name, in a string
#2081: FILE: drivers/scsi/wd7000.c:1602:
+				dprintk("wd7000_detect: Trying init WD-7000 card at IO " "0x%x, IRQ %d, DMA %d...\n", host->iobase, host->irq, host->dma);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#2081: FILE: drivers/scsi/wd7000.c:1602:
+				dprintk("wd7000_detect: Trying init WD-7000 card at IO " "0x%x, IRQ %d, DMA %d...\n", host->iobase, host->irq, host->dma);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2102: FILE: drivers/scsi/wd7000.c:1623:
+				printk(KERN_INFO "Western Digital WD-7000 (rev %d.%d) ", host->rev1, host->rev2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2102: FILE: drivers/scsi/wd7000.c:1623:
+				printk(KERN_INFO "Western Digital WD-7000 (rev %d.%d) ", host->rev1, host->rev2);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#2103: FILE: drivers/scsi/wd7000.c:1624:
+				printk("using IO 0x%x, IRQ %d, DMA %d.\n", host->iobase, host->irq, host->dma);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2103: FILE: drivers/scsi/wd7000.c:1624:
+				printk("using IO 0x%x, IRQ %d, DMA %d.\n", host->iobase, host->irq, host->dma);

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#2104: FILE: drivers/scsi/wd7000.c:1625:
+				printk("  BUS_ON time: %dns, BUS_OFF time: %dns\n", host->bus_on * 125, host->bus_off * 125);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2104: FILE: drivers/scsi/wd7000.c:1625:
+				printk("  BUS_ON time: %dns, BUS_OFF time: %dns\n", host->bus_on * 125, host->bus_off * 125);

CHECK:BRACES: Unbalanced braces around else statement
#2106: FILE: drivers/scsi/wd7000.c:1627:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_detect', this function's name, in a string
#2107: FILE: drivers/scsi/wd7000.c:1628:
+			dprintk("wd7000_detect: IO 0x%x region already allocated!\n", iobase);

WARNING:INDENTED_LABEL: labels should not be indented
#2130: FILE: drivers/scsi/wd7000.c:1632:
+	      err_unregister:

WARNING:INDENTED_LABEL: labels should not be indented
#2132: FILE: drivers/scsi/wd7000.c:1634:
+	      err_release:

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2136: FILE: drivers/scsi/wd7000.c:1637:
 
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2141: FILE: drivers/scsi/wd7000.c:1640:
+		printk("Failed initialization of WD-7000 SCSI card!\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2144: FILE: drivers/scsi/wd7000.c:1642:
+	return (present);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2152: FILE: drivers/scsi/wd7000.c:1649:
+static int wd7000_abort(Scsi_Cmnd * SCpnt)

CHECK:SPACING: No space is necessary after a cast
#2155: FILE: drivers/scsi/wd7000.c:1651:
+	Adapter *host = (Adapter *) SCpnt->host->hostdata;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2161: FILE: drivers/scsi/wd7000.c:1654:
+		printk("wd7000_abort: lost interrupt\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_abort', this function's name, in a string
#2161: FILE: drivers/scsi/wd7000.c:1654:
+		printk("wd7000_abort: lost interrupt\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2176: FILE: drivers/scsi/wd7000.c:1666:
+static int wd7000_bus_reset(Scsi_Cmnd * SCpnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2183: FILE: drivers/scsi/wd7000.c:1671:
+static int wd7000_device_reset(Scsi_Cmnd * SCpnt)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2195: FILE: drivers/scsi/wd7000.c:1680:
+static int wd7000_host_reset(Scsi_Cmnd * SCpnt)

CHECK:SPACING: No space is necessary after a cast
#2203: FILE: drivers/scsi/wd7000.c:1682:
+	Adapter *host = (Adapter *) SCpnt->host->hostdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2217: FILE: drivers/scsi/wd7000.c:1695:
+static int wd7000_biosparam(Disk * disk, struct block_device *bdev, int *ip)

CHECK:CAMELCASE: Avoid CamelCase: <Disk>
#2217: FILE: drivers/scsi/wd7000.c:1695:
+static int wd7000_biosparam(Disk * disk, struct block_device *bdev, int *ip)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_biosparam', this function's name, in a string
#2221: FILE: drivers/scsi/wd7000.c:1697:
+	dprintk("wd7000_biosparam: dev=%s, size=%d, ", bdevname(bdev), disk->capacity);

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#2270: FILE: drivers/scsi/wd7000.c:1715:
+		if ((scsicam_bios_param(disk, bdev, info) < 0) || !(((info[0] == 64) && (info[1] == 32)) || ((info[0] == 255) && (info[1] == 63)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info[0] == 64'
#2270: FILE: drivers/scsi/wd7000.c:1715:
+		if ((scsicam_bios_param(disk, bdev, info) < 0) || !(((info[0] == 64) && (info[1] == 32)) || ((info[0] == 255) && (info[1] == 63)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info[1] == 32'
#2270: FILE: drivers/scsi/wd7000.c:1715:
+		if ((scsicam_bios_param(disk, bdev, info) < 0) || !(((info[0] == 64) && (info[1] == 32)) || ((info[0] == 255) && (info[1] == 63)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info[0] == 255'
#2270: FILE: drivers/scsi/wd7000.c:1715:
+		if ((scsicam_bios_param(disk, bdev, info) < 0) || !(((info[0] == 64) && (info[1] == 32)) || ((info[0] == 255) && (info[1] == 63)))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info[1] == 63'
#2270: FILE: drivers/scsi/wd7000.c:1715:
+		if ((scsicam_bios_param(disk, bdev, info) < 0) || !(((info[0] == 64) && (info[1] == 32)) || ((info[0] == 255) && (info[1] == 63)))) {

WARNING:LONG_LINE_STRING: line length of 150 exceeds 100 columns
#2271: FILE: drivers/scsi/wd7000.c:1716:
+			printk("wd7000_biosparam: unable to verify geometry for disk with >1GB.\n" "                  using extended translation.\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2271: FILE: drivers/scsi/wd7000.c:1716:
+			printk("wd7000_biosparam: unable to verify geometry for disk with >1GB.\n" "                  using extended translation.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wd7000_biosparam', this function's name, in a string
#2271: FILE: drivers/scsi/wd7000.c:1716:
+			printk("wd7000_biosparam: unable to verify geometry for disk with >1GB.\n" "                  using extended translation.\n");

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#2271: FILE: drivers/scsi/wd7000.c:1716:
+			printk("wd7000_biosparam: unable to verify geometry for disk with >1GB.\n" "                  using extended translation.\n");

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#2282: FILE: drivers/scsi/wd7000.c:1727:
+				printk(KERN_INFO "%s: current partition table is " "using extended translation.\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2282: FILE: drivers/scsi/wd7000.c:1727:
+				printk(KERN_INFO "%s: current partition table is " "using extended translation.\n", __FUNCTION__);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#2282: FILE: drivers/scsi/wd7000.c:1727:
+				printk(KERN_INFO "%s: current partition table is " "using extended translation.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2282: FILE: drivers/scsi/wd7000.c:1727:
+				printk(KERN_INFO "%s: current partition table is " "using extended translation.\n", __FUNCTION__);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2293: FILE: drivers/scsi/wd7000.c:1734:
+	return (0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424951.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 143 warnings, 74 checks, 2252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424951.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
