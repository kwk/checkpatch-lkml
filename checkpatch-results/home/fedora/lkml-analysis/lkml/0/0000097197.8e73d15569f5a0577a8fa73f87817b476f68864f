CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#71: 
Signed-off-by: Juha Yrjölä <juha.yrjola@nokia.com>
                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#113: FILE: drivers/mmc/omap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#117: FILE: drivers/mmc/omap.c:5:
+ *  Written by Tuukka Tikkanen and Juha Yrjölä<juha.yrjola@nokia.com>
                                            ^

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#147: FILE: drivers/mmc/omap.c:35:
+#include <asm/io.h>

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#162: FILE: drivers/mmc/omap.c:50:
+#define RSP_TYPE(x)	((x) & ~(MMC_RSP_BUSY|MMC_RSP_OPCODE))
                    	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: drivers/mmc/omap.c:53:
+ * when the cover switch is open */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#173: FILE: drivers/mmc/omap.c:61:
+	struct mmc_request *	mrq;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#174: FILE: drivers/mmc/omap.c:62:
+	struct mmc_command *	cmd;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#175: FILE: drivers/mmc/omap.c:63:
+	struct mmc_data *	data;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#176: FILE: drivers/mmc/omap.c:64:
+	struct mmc_host *	mmc;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#177: FILE: drivers/mmc/omap.c:65:
+	struct device *		dev;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#179: FILE: drivers/mmc/omap.c:67:
+	struct clk *		iclk;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#180: FILE: drivers/mmc/omap.c:68:
+	struct clk *		fclk;

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#188: FILE: drivers/mmc/omap.c:76:
+	u16 *			buffer;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#197: FILE: drivers/mmc/omap.c:85:
+	spinlock_t		dma_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#199: FILE: drivers/mmc/omap.c:87:
+	unsigned		dma_len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: drivers/mmc/omap.c:108:
+mmc_omap_show_cover_switch(struct device *dev,
+	struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'mmc_omap_show_cover_switch' to 'cover_switch_show'
#226: FILE: drivers/mmc/omap.c:114:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#228: FILE: drivers/mmc/omap.c:116:
+static DEVICE_ATTR(cover_switch, S_IRUGO, mmc_omap_show_cover_switch, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: drivers/mmc/omap.c:120:
+mmc_omap_show_enable_poll(struct device *dev,
+	struct device_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/mmc/omap.c:127:
+mmc_omap_store_enable_poll(struct device *dev,
+	struct device_attribute *attr, const char *buf,

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions '0664' used
#255: FILE: drivers/mmc/omap.c:143:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#288: FILE: drivers/mmc/omap.c:176:
+	if (mmc_cmd_type(cmd) == MMC_CMD_ADTC) {
[...]
+	} else if (mmc_cmd_type(cmd) == MMC_CMD_BC) {
[...]
+	} else if (mmc_cmd_type(cmd) == MMC_CMD_BCR) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#329: FILE: drivers/mmc/omap.c:217:
+		BUG_ON(host->dma_ch < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#383: FILE: drivers/mmc/omap.c:271:
+	struct mmc_omap_host *host = (struct mmc_omap_host *) data;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: drivers/mmc/omap.c:273:
+	BUG_ON(host->dma_ch < 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->data"
#435: FILE: drivers/mmc/omap.c:323:
+	if (host->data == NULL || cmd->error != MMC_ERR_NONE) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: drivers/mmc/omap.c:353:
+		BUG_ON(host->sg_idx == host->sg_len);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#475: FILE: drivers/mmc/omap.c:363:
+	if (write) {
[...]
+	} else {
[...]

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#484: FILE: drivers/mmc/omap.c:372:
+	static const char *mmc_omap_status_bits[] = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#493: FILE: drivers/mmc/omap.c:381:
+				printk(" ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#494: FILE: drivers/mmc/omap.c:382:
+			printk("%s", mmc_omap_status_bits[i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#501: FILE: drivers/mmc/omap.c:389:
+	struct mmc_omap_host * host = (struct mmc_omap_host *)dev_id;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->cmd"
#507: FILE: drivers/mmc/omap.c:395:
+	if (host->cmd == NULL && host->data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->data"
#507: FILE: drivers/mmc/omap.c:395:
+	if (host->cmd == NULL && host->data == NULL) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: drivers/mmc/omap.c:397:
+		dev_info(mmc_dev(host->mmc),"spurious irq 0x%04x\n", status);
 		                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->cmd"
#525: FILE: drivers/mmc/omap.c:413:
+			status, host->cmd != NULL ? host->cmd->opcode : -1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#527: FILE: drivers/mmc/omap.c:415:
+		printk("\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#537: FILE: drivers/mmc/omap.c:425:
+		if (status & OMAP_MMC_STAT_END_OF_DATA) {
+			end_transfer = 1;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: drivers/mmc/omap.c:441:
+				dev_dbg(mmc_dev(host->mmc),
+					 "data CRC error, bytes left %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: drivers/mmc/omap.c:453:
+				if (host->cmd->opcode != MMC_ALL_SEND_CID &&
+						host->cmd->opcode !=

CHECK:BRACES: Unbalanced braces around else statement
#585: FILE: drivers/mmc/omap.c:473:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: drivers/mmc/omap.c:505:
+^I^I * starting a write $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#625: FILE: drivers/mmc/omap.c:513:
+	if (end_command) {
+		mmc_omap_cmd_done(host, host->cmd);
+	}

CHECK:SPACING: No space is necessary after a cast
#638: FILE: drivers/mmc/omap.c:526:
+	struct mmc_omap_host *host = (struct mmc_omap_host *) dev_id;

CHECK:SPACING: No space is necessary after a cast
#647: FILE: drivers/mmc/omap.c:535:
+	struct mmc_omap_host *host = (struct mmc_omap_host *) arg;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#653: FILE: drivers/mmc/omap.c:541:
+ * for MMC state? */

CHECK:SPACING: No space is necessary after a cast
#660: FILE: drivers/mmc/omap.c:548:
+	struct mmc_omap_host *host = (struct mmc_omap_host *) data;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#662: FILE: drivers/mmc/omap.c:550:
+	static int complained = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: No space is necessary after a cast
#703: FILE: drivers/mmc/omap.c:591:
+	data_addr = io_v2p((u32) host->base) + OMAP_MMC_REG_DATA;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'data->blocks == 1'
#707: FILE: drivers/mmc/omap.c:595:
+	if ((data->blocks == 1) && (count > (1 << data->blksz_bits)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#763: FILE: drivers/mmc/omap.c:651:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#774: FILE: drivers/mmc/omap.c:662:
+	struct mmc_omap_host *host = (struct mmc_omap_host *) data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#784: FILE: drivers/mmc/omap.c:672:
+		dev_err(mmc_dev(host->mmc),"DMA timeout\n");
 		                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#791: FILE: drivers/mmc/omap.c:679:
+	if (!(ch_status & OMAP_DMA_BLOCK_IRQ)) {
+		return;
+	}

CHECK:BRACES: braces {} should be used on all arms of this statement
#796: FILE: drivers/mmc/omap.c:684:
+	if (host->sg_idx < host->sg_len) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#799: FILE: drivers/mmc/omap.c:687:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#869: FILE: drivers/mmc/omap.c:757:
+	if (timeout > 0xffff) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#872: FILE: drivers/mmc/omap.c:760:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#883: FILE: drivers/mmc/omap.c:771:
+	unsigned sg_len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#886: FILE: drivers/mmc/omap.c:774:
+	if (data == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#895: FILE: drivers/mmc/omap.c:783:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#920: FILE: drivers/mmc/omap.c:808:
+		if (mmc_omap_get_dma_channel(host, data) == 0) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#929: FILE: drivers/mmc/omap.c:817:
+			host->sg_len = dma_map_sg(mmc_dev(host->mmc), data->sg,
+						sg_len, dma_data_dir);

CHECK:BRACES: Unbalanced braces around else statement
#935: FILE: drivers/mmc/omap.c:823:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->mrq"
#953: FILE: drivers/mmc/omap.c:841:
+	WARN_ON(host->mrq != NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/mmc/omap.c:858:
+		fpga_write(fpga_read(OMAP1510_FPGA_POWER) | (1 << 3),
+		     OMAP1510_FPGA_POWER);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: drivers/mmc/omap.c:861:
+		fpga_write(fpga_read(OMAP1510_FPGA_POWER) & ~(1 << 3),
+		     OMAP1510_FPGA_POWER);

CHECK:BRACES: braces {} should be used on all arms of this statement
#985: FILE: drivers/mmc/omap.c:873:
+		if (machine_is_omap_innovator())
[...]
+		else if (machine_is_omap_h2())
[...]
+		else if (machine_is_omap_h3())
[...]
+		else if (cpu_is_omap24xx()) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#994: FILE: drivers/mmc/omap.c:882:
+			u16 reg = OMAP_MMC_READ(host->base, CON);
+			OMAP_MMC_WRITE(host->base, CON, reg | (1 << 11));

CHECK:BRACES: Unbalanced braces around else statement
#995: FILE: drivers/mmc/omap.c:883:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#999: FILE: drivers/mmc/omap.c:887:
+		if (machine_is_omap_innovator())
[...]
+		else if (machine_is_omap_h2())
[...]
+		else if (machine_is_omap_h3())
[...]
+		else if (cpu_is_omap24xx()) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1007: FILE: drivers/mmc/omap.c:895:
+			u16 reg = OMAP_MMC_READ(host->base, CON);
+			OMAP_MMC_WRITE(host->base, CON, reg & ~(1 << 11));

CHECK:BRACES: Unbalanced braces around else statement
#1008: FILE: drivers/mmc/omap.c:896:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1022: FILE: drivers/mmc/omap.c:910:
+	if (ios->clock == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1024: FILE: drivers/mmc/omap.c:912:
+	else {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1049: FILE: drivers/mmc/omap.c:937:
+		dsor |= 1<<11;
 		         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1061: FILE: drivers/mmc/omap.c:949:
+	 * Writing to the CON register twice seems to do the trick. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1068: FILE: drivers/mmc/omap.c:956:
+		OMAP_MMC_WRITE(host->base, CMD, 1<<7);
 		                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1069: FILE: drivers/mmc/omap.c:957:
+		while (0 == (OMAP_MMC_READ(host->base, STAT) & 1));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1094: FILE: drivers/mmc/omap.c:982:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: drivers/mmc/omap.c:984:
+	if (platform_get_resource(pdev, IORESOURCE_MEM, 0) ||
+			platform_get_irq(pdev, IORESOURCE_IRQ, 0)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mmc_omap_probe', this function's name, in a string
#1097: FILE: drivers/mmc/omap.c:985:
+		dev_err(&pdev->dev, "mmc_omap_probe: invalid resource type\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#1120: FILE: drivers/mmc/omap.c:1008:
+	host->dma_timer.data = (unsigned long) host;

WARNING:TABSTOP: Statements should start on a tabstop
#1158: FILE: drivers/mmc/omap.c:1046:
+	 if (minfo->wire4)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#1158: FILE: drivers/mmc/omap.c:1046:
+	 if (minfo->wire4)
+		 mmc->caps |= MMC_CAP_4_BIT_DATA;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1164: FILE: drivers/mmc/omap.c:1052:
+	mmc->ocr_avail = MMC_VDD_32_33|MMC_VDD_33_34;
 	                              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1176: FILE: drivers/mmc/omap.c:1064:
+		if ((ret = omap_request_gpio(host->power_pin)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#1197: FILE: drivers/mmc/omap.c:1085:
+		host->switch_timer.data = (unsigned long) host;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1274: FILE: drivers/mmc/omap.c:1162:
+	release_mem_region(pdev->resource[0].start,
+			pdev->resource[0].end - pdev->resource[0].start + 1);

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1343: FILE: drivers/mmc/omap.c:1231:
+MODULE_AUTHOR("Juha Yrjölä");
                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1349: FILE: drivers/mmc/omap.h:1:
+#ifndef	DRIVERS_MEDIA_MMC_OMAP_H

CHECK:BIT_MACRO: Prefer using the BIT macro
#1378: FILE: drivers/mmc/omap.h:30:
+#define	OMAP_MMC_STAT_CARD_ERR		(1 << 14)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1379: FILE: drivers/mmc/omap.h:31:
+#define	OMAP_MMC_STAT_CARD_IRQ		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1380: FILE: drivers/mmc/omap.h:32:
+#define	OMAP_MMC_STAT_OCR_BUSY		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1381: FILE: drivers/mmc/omap.h:33:
+#define	OMAP_MMC_STAT_A_EMPTY		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1382: FILE: drivers/mmc/omap.h:34:
+#define	OMAP_MMC_STAT_A_FULL		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1383: FILE: drivers/mmc/omap.h:35:
+#define	OMAP_MMC_STAT_CMD_CRC		(1 <<  8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1384: FILE: drivers/mmc/omap.h:36:
+#define	OMAP_MMC_STAT_CMD_TOUT		(1 <<  7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1385: FILE: drivers/mmc/omap.h:37:
+#define	OMAP_MMC_STAT_DATA_CRC		(1 <<  6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1386: FILE: drivers/mmc/omap.h:38:
+#define	OMAP_MMC_STAT_DATA_TOUT		(1 <<  5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1387: FILE: drivers/mmc/omap.h:39:
+#define	OMAP_MMC_STAT_END_BUSY		(1 <<  4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1388: FILE: drivers/mmc/omap.h:40:
+#define	OMAP_MMC_STAT_END_OF_DATA	(1 <<  3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1389: FILE: drivers/mmc/omap.h:41:
+#define	OMAP_MMC_STAT_CARD_BUSY		(1 <<  2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1390: FILE: drivers/mmc/omap.h:42:
+#define	OMAP_MMC_STAT_END_OF_CMD	(1 <<  0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 29 warnings, 60 checks, 1309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
