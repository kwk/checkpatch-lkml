CHECK:BRACES: Unbalanced braces around else statement
#135: FILE: drivers/net/8139too.c:1637:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#146: FILE: drivers/net/8139too.c:1649:
+static void rtl8139_tx_timeout_task (void *_data)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#182: FILE: drivers/net/8139too.c:1693:
+static void rtl8139_tx_timeout (struct net_device *dev)

CHECK:BRACES: Unbalanced braces around else statement
#189: FILE: drivers/net/8139too.c:1700:
+	} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#192: FILE: drivers/net/8139too.c:1703:
+
+}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#239: FILE: drivers/net/bonding/bond_main.c:1148:
+	(NETIF_F_SG|NETIF_F_IP_CSUM|NETIF_F_NO_CSUM|NETIF_F_HW_CSUM|\
 	           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#239: FILE: drivers/net/bonding/bond_main.c:1148:
+	(NETIF_F_SG|NETIF_F_IP_CSUM|NETIF_F_NO_CSUM|NETIF_F_HW_CSUM|\
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#239: FILE: drivers/net/bonding/bond_main.c:1148:
+	(NETIF_F_SG|NETIF_F_IP_CSUM|NETIF_F_NO_CSUM|NETIF_F_HW_CSUM|\
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#239: FILE: drivers/net/bonding/bond_main.c:1148:
+	(NETIF_F_SG|NETIF_F_IP_CSUM|NETIF_F_NO_CSUM|NETIF_F_HW_CSUM|\
 	                                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#240: FILE: drivers/net/bonding/bond_main.c:1149:
+	NETIF_F_TSO|NETIF_F_UFO)
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: drivers/net/bonding/bond_main.c:1172:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: drivers/net/bonding/bond_main.c:1173:
+^I * features will include NETIF_F_TSO (NETIF_F_UFO) iff all $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#249: FILE: drivers/net/bonding/bond_main.c:1173:
+	/* 
+	 * features will include NETIF_F_TSO (NETIF_F_UFO) iff all 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: drivers/net/bonding/bond_main.c:1174:
+^I * slave devices support NETIF_F_TSO (NETIF_F_UFO), which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: drivers/net/bonding/bond_main.c:1175:
+^I * implies that all slaves also support scatter-gather $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: drivers/net/bonding/bond_main.c:1176:
+^I * (NETIF_F_SG), which implies that features also includes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: drivers/net/bonding/bond_main.c:1177:
+^I * NETIF_F_SG. So no need to check whether we have an  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: drivers/net/bonding/bond_main.c:1178:
+^I * illegal combination of NETIF_F_{TSO,UFO} and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: drivers/net/bonding/bond_main.c:1179:
+^I * !NETIF_F_SG $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#324: FILE: drivers/net/gianfar.c:202:
+	priv->regs = ioremap(r->start, sizeof (struct gfar));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: drivers/net/gianfar.c:456:
+		memset_io(&(priv->regs->rmon), 0, sizeof (struct rmon_mib));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around priv->regs->rmon
#352: FILE: drivers/net/gianfar.c:456:
+		memset_io(&(priv->regs->rmon), 0, sizeof (struct rmon_mib));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#439: FILE: drivers/net/gianfar.h:721:
+static inline u32 gfar_read(volatile unsigned __iomem *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#447: FILE: drivers/net/gianfar.h:728:
+static inline void gfar_write(volatile unsigned __iomem *addr, u32 val)

CHECK:SPACING: No space is necessary after a cast
#460: FILE: drivers/net/gianfar_ethtool.c:147:
+		u32 __iomem *rmon = (u32 __iomem *) & priv->regs->rmon;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#460: FILE: drivers/net/gianfar_ethtool.c:147:
+		u32 __iomem *rmon = (u32 __iomem *) & priv->regs->rmon;
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#465: FILE: drivers/net/gianfar_ethtool.c:151:
+			stats->rmon[i] = (u64) gfar_read(&rmon[i]);

CHECK:SPACING: No space is necessary after a cast
#474: FILE: drivers/net/gianfar_ethtool.c:224:
+	u32 __iomem *theregs = (u32 __iomem *) priv->regs;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#529: FILE: drivers/net/gianfar_mii.c:158:
+	regs = ioremap(r->start, sizeof (struct gfar_mii));

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#575: FILE: drivers/net/r8169.c:492:
+		udelay(25);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#593: FILE: drivers/net/r8169.c:508:
+		udelay(25);

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#624: FILE: drivers/net/sky2.c:23:
  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#649: FILE: drivers/net/sky2.c:99:
+static int disable_msi = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: drivers/net/sky2.c:2181:
+		err = pci_write_config_dword(hw->pdev, PEX_UNC_ERR_STAT,
+						 0xffffffffUL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#760: FILE: drivers/net/sky2.c:2300:
+	printk(KERN_ERR PFX "%s: can't access PCI config space\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#772: FILE: drivers/net/sky2.c:2558:
+	unsigned port = sky2->port;

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#810: FILE: drivers/net/sky2.c:3067:
+static irqreturn_t __devinit sky2_test_intr(int irq, void *dev_id,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#830: FILE: drivers/net/sky2.c:3087:
+static int __devinit sky2_test_msi(struct sky2_hw *hw)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#839: FILE: drivers/net/sky2.c:3096:
+		printk(KERN_ERR PFX "%s: cannot assign irq %d\n",

WARNING:MEMORY_BARRIER: memory barrier without comment
#845: FILE: drivers/net/sky2.c:3102:
+	wmb();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#864: FILE: drivers/net/sky2.c:3121:
 static int __devinit sky2_probe(struct pci_dev *pdev,

CHECK:BRACES: braces {} should be used on all arms of this statement
#887: FILE: drivers/net/sky2.c:3243:
+		if (err == -EOPNOTSUPP) {
[...]
+		else if (err)
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#889: FILE: drivers/net/sky2.c:3245:
+			printk(KERN_WARNING PFX "%s: No interrupt was generated using MSI, "

WARNING:SPLIT_STRING: quoted string split across lines
#890: FILE: drivers/net/sky2.c:3246:
+			printk(KERN_WARNING PFX "%s: No interrupt was generated using MSI, "
+			       "switching to INTx mode. Please report this failure to "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#891: FILE: drivers/net/sky2.c:3247:
+			       "switching to INTx mode. Please report this failure to "
+			       "the PCI maintainer and include system chipset information.\n",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#895: FILE: drivers/net/sky2.c:3251:
+		}
+		else if (err)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#952: FILE: drivers/net/sky2.c:3372:
+				printk(KERN_ERR PFX "%s: could not up: %d\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107233.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 19 warnings, 16 checks, 803 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107233.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
