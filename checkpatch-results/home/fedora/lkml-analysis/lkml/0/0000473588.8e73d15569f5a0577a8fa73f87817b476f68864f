WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
diff -urN linus/Documentation/filesystems/proc.txt linux/Documentation/filesystems/proc.txt

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: fs/proc/array.c:701:
+int proc_pid_affinity_read(struct task_struct *task, char * buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#116: FILE: fs/proc/array.c:713:
+	new_mask = simple_strtoul(buffer, &end, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != task->euid'
#123: FILE: fs/proc/array.c:720:
+	if ((current->euid != task->euid) && (current->euid != task->uid)
+			&& !capable(CAP_SYS_NICE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != task->uid'
#123: FILE: fs/proc/array.c:720:
+	if ((current->euid != task->euid) && (current->euid != task->uid)
+			&& !capable(CAP_SYS_NICE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#124: FILE: fs/proc/array.c:721:
+	if ((current->euid != task->euid) && (current->euid != task->uid)
+			&& !capable(CAP_SYS_NICE)) {

ERROR:SPACING: space required after that ',' (ctx:OxV)
#144: FILE: fs/proc/base.c:50:
+int proc_pid_affinity_read(struct task_struct*,char*);
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#144: FILE: fs/proc/base.c:50:
+int proc_pid_affinity_read(struct task_struct*,char*);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct*' should also have an identifier name
#144: FILE: fs/proc/base.c:50:
+int proc_pid_affinity_read(struct task_struct*,char*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char*' should also have an identifier name
#144: FILE: fs/proc/base.c:50:
+int proc_pid_affinity_read(struct task_struct*,char*);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#145: FILE: fs/proc/base.c:51:
+int proc_pid_affinity_write(struct task_struct*,char*,size_t);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#145: FILE: fs/proc/base.c:51:
+int proc_pid_affinity_write(struct task_struct*,char*,size_t);
                                                      ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#145: FILE: fs/proc/base.c:51:
+int proc_pid_affinity_write(struct task_struct*,char*,size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct*' should also have an identifier name
#145: FILE: fs/proc/base.c:51:
+int proc_pid_affinity_write(struct task_struct*,char*,size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char*' should also have an identifier name
#145: FILE: fs/proc/base.c:51:
+int proc_pid_affinity_write(struct task_struct*,char*,size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#145: FILE: fs/proc/base.c:51:
+int proc_pid_affinity_write(struct task_struct*,char*,size_t);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: fs/proc/base.c:336:
+static ssize_t proc_info_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: fs/proc/base.c:336:
+static ssize_t proc_info_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: fs/proc/base.c:339:
+	struct inode * inode = file->f_dentry->d_inode;

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: fs/proc/base.c:344:
+	ssize_t ret;
+	if (ei->op.proc_write == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ei->op.proc_write"
#161: FILE: fs/proc/base.c:344:
+	if (ei->op.proc_write == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#167: FILE: fs/proc/base.c:350:
+	if (!(page = __get_free_page(GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#170: FILE: fs/proc/base.c:353:
+	if (copy_from_user((char *) page, buf, count)) {

CHECK:SPACING: No space is necessary after a cast
#175: FILE: fs/proc/base.c:358:
+	((char *) page)[count] = '\0';

CHECK:SPACING: No space is necessary after a cast
#177: FILE: fs/proc/base.c:360:
+	ret = ei->op.proc_write(task, (char*) page, count);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#177: FILE: fs/proc/base.c:360:
+	ret = ei->op.proc_write(task, (char*) page, count);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#190: FILE: fs/proc/base.c:373:
+	write:		proc_info_write
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#190: FILE: fs/proc/base.c:373:
+	write:		proc_info_write

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: fs/proc/base.c:602:
+  E(PROC_PID_AFFINITY,^I"affinity",^IS_IFREG|S_IRUGO|S_IWUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#206: FILE: fs/proc/base.c:602:
+  E(PROC_PID_AFFINITY,	"affinity",	S_IFREG|S_IRUGO|S_IWUSR),
                       	           	       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#206: FILE: fs/proc/base.c:602:
+  E(PROC_PID_AFFINITY,	"affinity",	S_IFREG|S_IRUGO|S_IWUSR),
                       	           	               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#206: FILE: fs/proc/base.c:602:
+  E(PROC_PID_AFFINITY,	"affinity",	S_IFREG|S_IRUGO|S_IWUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: fs/proc/base.c:983:
+ ^I^I^Ibreak;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: fs/proc/base.c:983:
+ ^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/proc/base.c:983:
+ ^I^I^Ibreak;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000473588.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 15 warnings, 9 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000473588.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
