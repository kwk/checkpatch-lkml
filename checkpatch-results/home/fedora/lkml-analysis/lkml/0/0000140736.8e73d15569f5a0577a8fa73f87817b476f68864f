WARNING:TYPO_SPELLING: 'compeletely' may be misspelled - perhaps 'completely'?
#37: 
This is a compeletely new implementation and much simpler than the
          ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#58: 
--- a/include/asm-i386/atomic.h

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:INLINE: plain inline is preferred over __inline__
#64: FILE: include/asm-i386/atomic.h:181:
+static __inline__ int atomic_xchg(atomic_t *v, int i)

WARNING:INLINE: plain inline is preferred over __inline__
#86: FILE: include/asm-x86_64/atomic.h:182:
+static __inline__ int atomic_xchg(atomic_t *v, int i)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#97: FILE: include/linux/brsem-generic.h:1:
+#ifndef _LINUX_BRSEM_GENERIC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#100: FILE: include/linux/brsem-generic.h:4:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#106: FILE: include/linux/brsem-generic.h:10:
+typedef int brsem_cnt_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#107: FILE: include/linux/brsem-generic.h:11:
+typedef unsigned int brsem_unsigned_cnt_t;

WARNING:LINE_SPACING: Missing a blank line after declarations
#123: FILE: include/linux/brsem-generic.h:27:
+	brsem_cnt_t v;
+	p = brsem_local_down_cnt(sem);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: include/linux/brsem-generic.h:38:
+	brsem_cnt_t v;
+	p = brsem_local_down_cnt(sem);

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: include/linux/brsem-generic.h:49:
+	brsem_cnt_t v;
+	p = brsem_local_up_cnt(sem);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: include/linux/brsem.h:1:
+#ifndef _LINUX_BRSEM_H

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#172: FILE: include/linux/brsem.h:17:
+	spinlock_t master_lock;

WARNING:IF_1: Consider removing the #if 1 and its #endif
#188: FILE: include/linux/brsem.h:33:
+#if 1	/* CONFIG_BRSEM_GENERIC */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#232: FILE: kernel/brsem.c:1:
+#include <linux/brsem.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#247: FILE: kernel/brsem.c:16:
+	BUG_ON(sizeof(brsem_cnt_t) >= sizeof(long long));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sem)...) over kzalloc(sizeof(struct brsem)...)
#249: FILE: kernel/brsem.c:18:
+	sem = kzalloc(sizeof(struct brsem), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: kernel/brsem.c:76:
+		BUG_ON(*dcnt < 0 || *ucnt < 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: kernel/brsem.c:83:
+	brsem_cnt_t dcnt, ucnt;
+	bias_cnt(sem, cpu_dcnt, BRSEM_READER_BIAS, &dcnt, &ucnt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#321: FILE: kernel/brsem.c:90:
+	BUG_ON(sem->drain_cnt <= 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#326: FILE: kernel/brsem.c:95:
+	if (waitqueue_active(&sem->write_wait)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#326: FILE: kernel/brsem.c:95:
+	if (waitqueue_active(&sem->write_wait)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: kernel/brsem.c:97:
+		long long dcnt, ucnt;
+		bias_all_cnts(sem, BRSEM_READER_BIAS, BRSEM_WRITER_BIAS,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#331: FILE: kernel/brsem.c:100:
+		BUG_ON(sem->master_cnt <= 0);

CHECK:BRACES: Unbalanced braces around else statement
#333: FILE: kernel/brsem.c:102:
+	} else

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#365: FILE: kernel/brsem.c:134:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: kernel/brsem.c:136:
+		BUG_ON(in_writer_range(last));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#397: FILE: kernel/brsem.c:166:
+		/* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#399: FILE: kernel/brsem.c:168:
+		BUG_ON(in_writer_range(last));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: kernel/brsem.c:187:
+			BUG_ON(sem->master_cnt < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#427: FILE: kernel/brsem.c:196:
+		BUG();

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#435: FILE: kernel/brsem.c:204:
+		/* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: kernel/brsem.c:206:
+		BUG_ON(in_writer_range(last));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: kernel/brsem.c:239:
+		BUG_ON(sem->master_cnt < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#500: FILE: kernel/brsem.c:269:
+	BUG_ON(sem->master_cnt < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#524: FILE: kernel/brsem.c:293:
+	BUG_ON(sem->writer_state != BRSEM_WSTAT_LOCKED || sem->master_cnt);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#526: FILE: kernel/brsem.c:295:
+	if (waitqueue_active(&sem->write_wait)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#530: FILE: kernel/brsem.c:299:
+		long long dcnt, ucnt;
+		sem->writer_state = BRSEM_WSTAT_NONE;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#545: FILE: kernel/brsem.c:314:
+EXPORT_SYMBOL(brsem_down_read_failed);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#546: FILE: kernel/brsem.c:315:
+EXPORT_SYMBOL(brsem_down_read_trylock_failed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#547: FILE: kernel/brsem.c:316:
+EXPORT_SYMBOL(brsem_down_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#548: FILE: kernel/brsem.c:317:
+EXPORT_SYMBOL(brsem_down_write_trylock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#549: FILE: kernel/brsem.c:318:
+EXPORT_SYMBOL(brsem_up_write);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140736.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 38 warnings, 4 checks, 473 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140736.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
