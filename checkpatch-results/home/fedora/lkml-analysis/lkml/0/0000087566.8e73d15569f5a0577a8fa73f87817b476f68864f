WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
===============================================================================================

WARNING:NEW_TYPEDEFS: do not add new typedefs
#55: FILE: include/linux/skbuff.h:132:
+typedef struct zccd                            /* Zero Copy Callback Descriptor */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zccd *' should also have an identifier name
#58: FILE: include/linux/skbuff.h:135:
+	void           (*zccd_destructor)(struct zccd *); /* callback when refcount reaches zero */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#61: FILE: include/linux/skbuff.h:138:
+static inline void zccd_init (zccd_t *d, void (*callback)(zccd_t *))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#63: FILE: include/linux/skbuff.h:140:
+	atomic_set (&d->zccd_count, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#67: FILE: include/linux/skbuff.h:144:
+static inline void zccd_get (zccd_t *d)                /* take a reference */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#69: FILE: include/linux/skbuff.h:146:
+	atomic_inc (&d->zccd_count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#72: FILE: include/linux/skbuff.h:149:
+static inline void zccd_put (zccd_t *d)                /* release a reference */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#74: FILE: include/linux/skbuff.h:151:
+	if (atomic_dec_and_test (&d->zccd_count))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&d->zccd_count'
#74: FILE: include/linux/skbuff.h:151:
+	if (atomic_dec_and_test (&d->zccd_count))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (d->zccd_destructor)
#75: FILE: include/linux/skbuff.h:152:
+		(d->zccd_destructor)(d);

WARNING:TYPO_SPELLING: 'unneccessarily' may be misspelled - perhaps 'unnecessarily'?
#88: FILE: include/linux/skbuff.h:167:
+	* having 2 zccds means we don't unneccessarily split the packet
 	                                ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#88: FILE: include/linux/skbuff.h:167:
+	/* NB we expect zero-copy data to be at least 1 packet, so
+	* having 2 zccds means we don't unneccessarily split the packet

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#102: FILE: include/net/tcp.h:786:
+extern ssize_t                 tcp_sendpage_zccd(struct socket *sock, struct page *page, int offset, size_t size,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/net/tcp.h:786:
+extern ssize_t                 tcp_sendpage_zccd(struct socket *sock, struct page *page, int offset, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: include/net/tcp.h:787:
+extern ssize_t                 tcp_sendpage_zccd(struct socket *sock, struct page *page, int offset, size_t size,
+						int flags, zccd_t *zccd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/net/tcp.h:885:
+extern int                     tcp_recvpackets(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: include/net/tcp.h:886:
+extern int                     tcp_recvpackets(struct sock *sk,
+						struct sk_buff_head *packets,

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#138: FILE: net/core/skbuff.c:162:
+	skb_shinfo(skb)->zccd = NULL;           /* skbuffs kick off with NO user zero copy descriptors */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd"
#148: FILE: net/core/skbuff.c:253:
+		if (skb_shinfo(skb)->zccd != NULL) /* zero copy callback descriptor? */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#149: FILE: net/core/skbuff.c:254:
+			zccd_put (skb_shinfo(skb)->zccd); /* release hold */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd2"
#150: FILE: net/core/skbuff.c:255:
+		if (skb_shinfo(skb)->zccd2 != NULL) /* 2nd zero copy callback descriptor? */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#151: FILE: net/core/skbuff.c:256:
+			zccd_put (skb_shinfo(skb)->zccd2); /* release hold */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd"
#159: FILE: net/core/skbuff.c:539:
+	if (skb_shinfo(skb)->zccd != NULL)      /* user zero copy descriptor? */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#160: FILE: net/core/skbuff.c:540:
+		zccd_get (skb_shinfo(skb)->zccd); /* 1 more ref (pages are shared) */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd2"
#163: FILE: net/core/skbuff.c:543:
+	if (skb_shinfo(skb)->zccd2 != NULL)     /* 2nd user zero copy descriptor? */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#164: FILE: net/core/skbuff.c:544:
+		zccd_get (skb_shinfo(skb)->zccd2); /* 1 more ref (pages are shared) */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd"
#184: FILE: net/core/skbuff.c:613:
+	if (zccd != NULL)                       /* user zero copy descriptor? */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#185: FILE: net/core/skbuff.c:614:
+		zccd_get (zccd);                /* extra ref (pages are shared) */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd2"
#186: FILE: net/core/skbuff.c:615:
+	if (zccd2 != NULL)                      /* 2nd user zero copy descriptor? */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#187: FILE: net/core/skbuff.c:616:
+		zccd_get (zccd2);               /* extra ref (pages are shared) */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#221: FILE: net/ipv4/tcp.c:684:
+		if (zccd != NULL &&             /* this is a zcc I/O */
+				skb_shinfo(skb)->zccd != NULL && /* skb is part of a zcc I/O */
+				skb_shinfo(skb)->zccd2 != NULL &&
+				skb_shinfo(skb)->zccd != zccd && /* not the same one */
+				skb_shinfo(skb)->zccd2 != zccd)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd"
#221: FILE: net/ipv4/tcp.c:684:
+		if (zccd != NULL &&             /* this is a zcc I/O */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd"
#222: FILE: net/ipv4/tcp.c:685:
+				skb_shinfo(skb)->zccd != NULL && /* skb is part of a zcc I/O */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd2"
#223: FILE: net/ipv4/tcp.c:686:
+				skb_shinfo(skb)->zccd2 != NULL &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#227: FILE: net/ipv4/tcp.c:690:
+			tcp_mark_push (tp, skb);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#238: FILE: net/ipv4/tcp.c:710:
+		if (zccd != NULL &&     /* this is a zcc I/O */
+			skb_shinfo(skb)->zccd != zccd && /* not already referencing this zccd */
+			skb_shinfo(skb)->zccd2 != zccd)
+		{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zccd"
#238: FILE: net/ipv4/tcp.c:710:
+		if (zccd != NULL &&     /* this is a zcc I/O */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: net/ipv4/tcp.c:714:
+			zccd_get (zccd);        /* bump ref count */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: net/ipv4/tcp.c:716:
+			BUG_TRAP (skb_shinfo(skb)->zccd2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zccd2"
#244: FILE: net/ipv4/tcp.c:716:
+			BUG_TRAP (skb_shinfo(skb)->zccd2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zccd"
#246: FILE: net/ipv4/tcp.c:718:
+			if (skb_shinfo(skb)->zccd == NULL) /* reference this zccd */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: net/ipv4/tcp.c:792:
+	res = do_tcp_sendpages(sk, &page, offset, size, flags,NULL);
 	                                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: net/ipv4/tcp.c:799:
+                          int flags, zccd_t *zccd)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: net/ipv4/tcp.c:799:
+                          int flags, zccd_t *zccd)$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: net/ipv4/tcp.c:804:
+#define TCP_ZC_CSUM_FLAGS (NETIF_F_IP_CSUM|NETIF_F_NO_CSUM|NETIF_F_HW_CSUM)
                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: net/ipv4/tcp.c:804:
+#define TCP_ZC_CSUM_FLAGS (NETIF_F_IP_CSUM|NETIF_F_NO_CSUM|NETIF_F_HW_CSUM)
                                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#276: FILE: net/ipv4/tcp.c:808:
+		BUG ();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#276: FILE: net/ipv4/tcp.c:808:
+		BUG ();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#290: FILE: net/ipv4/tcp.c:822:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#298: FILE: net/ipv4/tcp.c:1585:
+int tcp_recvpackets (struct sock *sk, struct sk_buff_head *packets,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#305: FILE: net/ipv4/tcp.c:1592:
+	BUG_TRAP (len > 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: net/ipv4/tcp.c:1607:
+		struct sk_buff * skb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#331: FILE: net/ipv4/tcp.c:1618:
+		 * handling. FIXME: Need to check this doesnt impact 1003.1g
 		                                       ^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#345: FILE: net/ipv4/tcp.c:1632:
+		if (skb == NULL)		/* nothing ready */
+		{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#345: FILE: net/ipv4/tcp.c:1632:
+		if (skb == NULL)		/* nothing ready */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: net/ipv4/tcp.c:1675:
+		BUG_TRAP (atomic_read (&skb->users) == 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: net/ipv4/tcp.c:1675:
+		BUG_TRAP (atomic_read (&skb->users) == 1);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#390: FILE: net/ipv4/tcp.c:1677:
+		exhausted = eaten = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#400: FILE: net/ipv4/tcp.c:1687:
+			u32 urg_offset = tp->urg_seq - tp->copied_seq;
+			if (urg_offset < used) {

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#403: FILE: net/ipv4/tcp.c:1690:
+						tp->copied_seq++; /* discard the single byte of urgent data */

CHECK:BRACES: Unbalanced braces around else statement
#407: FILE: net/ipv4/tcp.c:1694:
+				} else		/* truncate read */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#412: FILE: net/ipv4/tcp.c:1699:
+		BUG_TRAP (used >= 0);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#418: FILE: net/ipv4/tcp.c:1705:
+		else
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#420: FILE: net/ipv4/tcp.c:1707:
+			if (skb_is_nonlinear (skb))
+			{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#420: FILE: net/ipv4/tcp.c:1707:
+			if (skb_is_nonlinear (skb))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: net/ipv4/tcp.c:1709:
+				int   rc = skb_linearize (skb, GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#424: FILE: net/ipv4/tcp.c:1711:
+				printk ("tcp_recvpackets(): linearising: %d\n", rc);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#424: FILE: net/ipv4/tcp.c:1711:
+				printk ("tcp_recvpackets(): linearising: %d\n", rc);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tcp_recvpackets', this function's name, in a string
#424: FILE: net/ipv4/tcp.c:1711:
+				printk ("tcp_recvpackets(): linearising: %d\n", rc);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#426: FILE: net/ipv4/tcp.c:1713:
+				if (rc)
+				{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#434: FILE: net/ipv4/tcp.c:1721:
+			if ((offset + used) == skb->len) /* consuming the whole packet */
+			{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#436: FILE: net/ipv4/tcp.c:1723:
+				__skb_unlink (skb, &sk->sk_receive_queue);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#437: FILE: net/ipv4/tcp.c:1724:
+				dst_release (skb->dst);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#438: FILE: net/ipv4/tcp.c:1725:
+				skb_orphan (skb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#439: FILE: net/ipv4/tcp.c:1726:
+				__skb_pull (skb, offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#440: FILE: net/ipv4/tcp.c:1727:
+				__skb_queue_tail (packets, skb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#441: FILE: net/ipv4/tcp.c:1728:
+				exhausted = eaten = 1;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#443: FILE: net/ipv4/tcp.c:1730:
+			else			/* consuming only part of the packet */
+			{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#443: FILE: net/ipv4/tcp.c:1730:
+			}
+			else			/* consuming only part of the packet */

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#445: FILE: net/ipv4/tcp.c:1732:
+				struct sk_buff *skb2 = skb_clone (skb, GFP_KERNEL);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#447: FILE: net/ipv4/tcp.c:1734:
+				if (skb2 == NULL)
+				{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb2"
#447: FILE: net/ipv4/tcp.c:1734:
+				if (skb2 == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#454: FILE: net/ipv4/tcp.c:1741:
+				dst_release (skb2->dst);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#455: FILE: net/ipv4/tcp.c:1742:
+				__skb_pull (skb2, offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#456: FILE: net/ipv4/tcp.c:1743:
+				__skb_trim (skb2, used);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#457: FILE: net/ipv4/tcp.c:1744:
+				__skb_queue_tail (packets, skb2);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#465: FILE: net/ipv4/tcp.c:1752:
+		if (tp->urg_data && after(tp->copied_seq,tp->urg_seq)) {
 		                                        ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#473: FILE: net/ipv4/tcp.c:1760:
+		if (skb->h.th->fin)
+		{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#477: FILE: net/ipv4/tcp.c:1764:
+				sk_eat_skb (sk, skb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#482: FILE: net/ipv4/tcp.c:1769:
+			sk_eat_skb (sk, skb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#502: FILE: net/ipv4/tcp.c:2632:
+EXPORT_SYMBOL(tcp_recvpackets);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 51 warnings, 26 checks, 427 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
