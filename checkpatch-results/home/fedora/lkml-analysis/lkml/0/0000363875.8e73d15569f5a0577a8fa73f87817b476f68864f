WARNING:TYPO_SPELLING: 'indentified' may be misspelled - perhaps 'identified'?
#38: 
> correct cache can be indentified at compile time.
                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'use'
#42: 
> Just FYI: The function that forced me to use use switch/case instead of 

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
--- linux-2.5.70-bk/include/linux/slab.h	2003-05-26 22:27:29.000000000 -0400

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#72: FILE: include/linux/slab.h:71:
+};
+extern struct cache_sizes malloc_sizes[];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/slab.h:72:
+extern void *__kmalloc(size_t, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#73: FILE: include/linux/slab.h:72:
+extern void *__kmalloc(size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#73: FILE: include/linux/slab.h:72:
+extern void *__kmalloc(size_t, int);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#79: FILE: include/linux/slab.h:78:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#79: FILE: include/linux/slab.h:78:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#79: FILE: include/linux/slab.h:78:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#79: FILE: include/linux/slab.h:78:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/slab.h:85:
+		extern void __you_cannot_kmalloc_that_much(void);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#108: FILE: kernel/ksyms.c:99:
+EXPORT_SYMBOL(__kmalloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: mm/slab.c:1966:
+void * __kmalloc (size_t size, int flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: mm/slab.c:1966:
+void * __kmalloc (size_t size, int flags)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 9 warnings, 4 checks, 66 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000363875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
