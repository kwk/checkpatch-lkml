WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
Thanks for these nits, they should be fixed in the new attached version of the 

WARNING:TYPO_SPELLING: 'ment' may be misspelled - perhaps 'meant'?
#74: 
I do not know what you ment with the RCU infrastructure, but the 
                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#108: 
neccessary) or just if the translation is invalidated from the kernel (then 
^^^^^^^^^^

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#109: 
this patch is neccessary).
              ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#128: FILE: include/linux/tlbhook.h:1:
+#ifndef _LINUX_TLBHOOK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: include/linux/tlbhook.h:11:
+	void (*flush_tlb_page)(struct vm_area_struct *vma,
+				unsigned long addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: include/linux/tlbhook.h:15:
+	void (*flush_tlb_kernel_range)(unsigned long start,
+				unsigned long end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: include/linux/tlbhook.h:17:
+	void (*flush_tlb_pgtables)(struct mm_struct *mm,
+				unsigned long start, unsigned long end);

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: include/linux/tlbhook.h:21:
+        volatile int used;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: include/linux/tlbhook.h:21:
+        volatile int used;$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#148: FILE: include/linux/tlbhook.h:21:
+        volatile int used;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/tlbhook.h:26:
+extern int register_tlb_hook(struct tlb_hook_struct *hook);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/tlbhook.h:27:
+extern int unregister_tlb_hook(struct tlb_hook_struct *hook);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#160: FILE: include/linux/tlbhook.h:33:
+	while(hook)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: include/linux/tlbhook.h:33:
+	while(hook)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#162: FILE: include/linux/tlbhook.h:35:
+		if(hook->flush_tlb)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: include/linux/tlbhook.h:35:
+		if(hook->flush_tlb)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#172: FILE: include/linux/tlbhook.h:45:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#177: FILE: include/linux/tlbhook.h:50:
+	while(hook)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#177: FILE: include/linux/tlbhook.h:50:
+	while(hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#179: FILE: include/linux/tlbhook.h:52:
+		if(hook->flush_tlb_all)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#179: FILE: include/linux/tlbhook.h:52:
+		if(hook->flush_tlb_all)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: include/linux/tlbhook.h:62:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#194: FILE: include/linux/tlbhook.h:67:
+	while(hook)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#194: FILE: include/linux/tlbhook.h:67:
+	while(hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#196: FILE: include/linux/tlbhook.h:69:
+		if(hook->flush_tlb_mm)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: include/linux/tlbhook.h:69:
+		if(hook->flush_tlb_mm)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#206: FILE: include/linux/tlbhook.h:79:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: include/linux/tlbhook.h:81:
+static inline void flush_tlb_page_hook(struct vm_area_struct *vma,
+				unsigned long addr)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#212: FILE: include/linux/tlbhook.h:85:
+	while(hook)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#212: FILE: include/linux/tlbhook.h:85:
+	while(hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#214: FILE: include/linux/tlbhook.h:87:
+		if(hook->flush_tlb_page)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#214: FILE: include/linux/tlbhook.h:87:
+		if(hook->flush_tlb_page)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: include/linux/tlbhook.h:97:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: include/linux/tlbhook.h:99:
+static inline void flush_tlb_range_hook(struct vm_area_struct *vma,
+				unsigned long start, unsigned long end)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#230: FILE: include/linux/tlbhook.h:103:
+	while(hook)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: include/linux/tlbhook.h:103:
+	while(hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#232: FILE: include/linux/tlbhook.h:105:
+		if(hook->flush_tlb_range)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: include/linux/tlbhook.h:105:
+		if(hook->flush_tlb_range)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#242: FILE: include/linux/tlbhook.h:115:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: include/linux/tlbhook.h:117:
+static inline void flush_tlb_kernel_range_hook(unsigned long start,
+				unsigned long end)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#248: FILE: include/linux/tlbhook.h:121:
+	while(hook)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: include/linux/tlbhook.h:121:
+	while(hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#250: FILE: include/linux/tlbhook.h:123:
+		if(hook->flush_tlb_kernel_range)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: include/linux/tlbhook.h:123:
+		if(hook->flush_tlb_kernel_range)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: include/linux/tlbhook.h:133:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: include/linux/tlbhook.h:135:
+static inline void flush_tlb_pgtables_hook(struct mm_struct *mm,
+				unsigned long start, unsigned long end)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#266: FILE: include/linux/tlbhook.h:139:
+	while(hook)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#266: FILE: include/linux/tlbhook.h:139:
+	while(hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#268: FILE: include/linux/tlbhook.h:141:
+		if(hook->flush_tlb_pgtables)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: include/linux/tlbhook.h:141:
+		if(hook->flush_tlb_pgtables)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: mm/tlbhook.c:1:
+#include <linux/module.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#309: FILE: mm/tlbhook.c:6:
+struct tlb_hook_struct *tlb_hook_root = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#311: FILE: mm/tlbhook.c:8:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: mm/tlbhook.c:12:
+	if(!hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#325: FILE: mm/tlbhook.c:22:
+	if(tlb_hook_root)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#325: FILE: mm/tlbhook.c:22:
+	if(tlb_hook_root)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#336: FILE: mm/tlbhook.c:33:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: mm/tlbhook.c:37:
+	if(!hook)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#346: FILE: mm/tlbhook.c:43:
+	if(hook->last)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: mm/tlbhook.c:43:
+	if(hook->last)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#346: FILE: mm/tlbhook.c:43:
+	if(hook->last)
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#353: FILE: mm/tlbhook.c:50:
+	if(hook->next)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#353: FILE: mm/tlbhook.c:50:
+	if(hook->next)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#361: FILE: mm/tlbhook.c:58:
+	while(hook->used)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#361: FILE: mm/tlbhook.c:58:
+	while(hook->used)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#369: FILE: mm/tlbhook.c:66:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#370: FILE: mm/tlbhook.c:67:
+EXPORT_SYMBOL(register_tlb_hook);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#371: FILE: mm/tlbhook.c:68:
+EXPORT_SYMBOL(unregister_tlb_hook);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#406: FILE: arch/i386/kernel/smp.c:399:
+void smp_flush_tlb_mm(struct mm_struct * mm)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#415: FILE: arch/i386/kernel/smp.c:418:
+void smp_flush_tlb_page(struct vm_area_struct * vma, unsigned long va)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: arch/i386/mach-voyager/voyager_smp.c:968:
+smp_flush_tlb_mm(struct mm_struct * mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: arch/i386/mach-voyager/voyager_smp.c:988:
+void smp_flush_tlb_page(struct vm_area_struct * vma, unsigned long va)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: arch/i386/mm/pageattr.c:56:
+^Ilocal_flush_tlb_all(); ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#553: FILE: arch/i386/mm/pageattr.c:56:
+^Ilocal_flush_tlb_all(); ^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: include/asm-i386/tlbflush.h:118:
+static inline void flush_tlb_kernel_range(unsigned long start,
+	unsigned long end)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#685: FILE: include/asm-i386/tlbflush.h:128:
+extern void smp_flush_tlb(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#686: FILE: include/asm-i386/tlbflush.h:129:
+extern void smp_flush_tlb_all(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#687: FILE: include/asm-i386/tlbflush.h:130:
+extern void smp_flush_tlb_mm(struct mm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#687: FILE: include/asm-i386/tlbflush.h:130:
+extern void smp_flush_tlb_mm(struct mm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#688: FILE: include/asm-i386/tlbflush.h:131:
+extern void smp_flush_tlb_page(struct vm_area_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#688: FILE: include/asm-i386/tlbflush.h:131:
+extern void smp_flush_tlb_page(struct vm_area_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#688: FILE: include/asm-i386/tlbflush.h:131:
+extern void smp_flush_tlb_page(struct vm_area_struct *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: include/asm-i386/tlbflush.h:152:
+static inline void flush_tlb_page(struct vm_area_struct *vma,
+	unsigned long addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#720: FILE: include/asm-i386/tlbflush.h:158:
+static inline void flush_tlb_range(struct vm_area_struct * vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: include/asm-i386/tlbflush.h:159:
+static inline void flush_tlb_range(struct vm_area_struct * vma,
+	unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: include/asm-i386/tlbflush.h:166:
+static inline void flush_tlb_kernel_range(unsigned long start,
+	unsigned long end)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000397322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 15 warnings, 26 checks, 559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000397322.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
