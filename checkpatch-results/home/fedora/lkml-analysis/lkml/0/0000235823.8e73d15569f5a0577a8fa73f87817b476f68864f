WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
currently doesn't work on 40x || BOOKE, but that problem is more generic (the

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: arch/ppc/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#159: FILE: arch/ppc/kernel/kgdb.c:28:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'alingment' may be misspelled - perhaps 'alignment'?
#194: FILE: arch/ppc/kernel/kgdb.c:63:
+	{ 0x0600, 0x0a /* SIGBUS */ },		/* alingment */
 	                              		   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#207: FILE: arch/ppc/kernel/kgdb.c:76:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <computeSignal>
#209: FILE: arch/ppc/kernel/kgdb.c:78:
+static int computeSignal(unsigned int tt)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: arch/ppc/kernel/kgdb.c:92:
+static void kgdb_debugger (struct pt_regs *regs)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#235: FILE: arch/ppc/kernel/kgdb.c:104:
+	if (atomic_read (&kgdb_setting_breakpoint))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&kgdb_setting_breakpoint'
#235: FILE: arch/ppc/kernel/kgdb.c:104:
+	if (atomic_read (&kgdb_setting_breakpoint))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: arch/ppc/kernel/kgdb.c:110:
+static int kgdb_singlestep (struct pt_regs *regs)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#273: FILE: arch/ppc/kernel/kgdb.c:142:
+	memset(gdb_regs, 0, MAXREG*4);
 	                          ^

CHECK:SPACING: No space is necessary after a cast
#291: FILE: arch/ppc/kernel/kgdb.c:160:
+	struct pt_regs *regs = (struct pt_regs *) (p->thread.ksp +

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: arch/ppc/kernel/kgdb.c:161:
+^I                                           STACK_FRAME_OVERHEAD);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#296: FILE: arch/ppc/kernel/kgdb.c:165:
+	memset(gdb_regs, 0, MAXREG*4);
 	                          ^

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#341: FILE: arch/ppc/kernel/kgdb.c:210:
+ * This function does PoerPC specific procesing for interfacing to gdb.
                                       ^^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#343: FILE: arch/ppc/kernel/kgdb.c:212:
+int kgdb_arch_handle_exception (int vector, int signo, int err_code,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: arch/ppc/kernel/kgdb.c:213:
+int kgdb_arch_handle_exception (int vector, int signo, int err_code,
+		char *remcom_in_buffer, char *remcom_out_buffer,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#350: FILE: arch/ppc/kernel/kgdb.c:219:
+	switch (remcom_in_buffer[0])
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#358: FILE: arch/ppc/kernel/kgdb.c:227:
+			if (kgdb_contthread && kgdb_contthread != current)
+			{

ERROR:SPACING: space required after that ',' (ctx:VxO)
#369: FILE: arch/ppc/kernel/kgdb.c:238:
+			atomic_set(&cpu_doing_single_step,-1);
 			                                 ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#369: FILE: arch/ppc/kernel/kgdb.c:238:
+			atomic_set(&cpu_doing_single_step,-1);
 			                                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#371: FILE: arch/ppc/kernel/kgdb.c:240:
+			if (remcom_in_buffer[0] == 's')
+			{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#373: FILE: arch/ppc/kernel/kgdb.c:242:
+#if defined (CONFIG_40x) || defined(CONFIG_BOOKE)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: arch/ppc/kernel/kgdb.c:250:
+					atomic_set(&cpu_doing_single_step,smp_processor_id());
 					                                 ^

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#392: FILE: arch/ppc/kernel/kgdb.c:261:
+struct kgdb_arch arch_kgdb_ops =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#393: FILE: arch/ppc/kernel/kgdb.c:262:
+struct kgdb_arch arch_kgdb_ops =
+{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#397: FILE: arch/ppc/kernel/kgdb.c:266:
+int kgdb_arch_init (void)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1624: FILE: include/asm-ppc/kgdb.h:18:
+#define MAXREG			(PT_FPSCR+1)
               			         ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1628: FILE: include/asm-ppc/kgdb.h:22:
+#define BREAKPOINT()		asm(".long 0x7d821008"); /* twge r2, r2 */

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1630: FILE: include/asm-ppc/kgdb.h:24:
+#define CHECK_EXCEPTION_STACK() ^I1$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 14 warnings, 8 checks, 468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
