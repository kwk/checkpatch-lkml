CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#40: FILE: arch/um/include/os.h:164:
+extern void os_check_bugs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: arch/um/kernel/sigio_kern.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: arch/um/kernel/sigio_user.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: arch/um/kernel/um_arch.c:490:
+ ^Ios_check_bugs();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#302: FILE: arch/um/kernel/um_arch.c:490:
+ ^Ios_check_bugs();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: arch/um/kernel/um_arch.c:490:
+ ^Ios_check_bugs();$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#322: FILE: arch/um/os-Linux/start_up.c:543:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#324: FILE: arch/um/os-Linux/start_up.c:545:
+int pty_output_sigio = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#325: FILE: arch/um/os-Linux/start_up.c:546:
+int pty_close_sigio = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#328: FILE: arch/um/os-Linux/start_up.c:549:
+static volatile int got_sigio = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#328: FILE: arch/um/os-Linux/start_up.c:549:
+static volatile int got_sigio = 0;

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: arch/um/os-Linux/start_up.c:567:
+	if(openpty(&info->master, &info->slave, NULL, NULL, NULL))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#357: FILE: arch/um/os-Linux/start_up.c:578:
+	if(pty.err){

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: arch/um/os-Linux/start_up.c:578:
+	if(pty.err){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#358: FILE: arch/um/os-Linux/start_up.c:579:
+		printk("openpty failed, errno = %d\n", -pty.err);

ERROR:SPACING: space required before the open brace '{'
#365: FILE: arch/um/os-Linux/start_up.c:586:
+	if((master == -1) || (slave == -1)){

ERROR:SPACING: space required before the open parenthesis '('
#365: FILE: arch/um/os-Linux/start_up.c:586:
+	if((master == -1) || (slave == -1)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#366: FILE: arch/um/os-Linux/start_up.c:587:
+		printk("openpty failed to allocate a pty\n");

ERROR:SPACING: space required before the open parenthesis '('
#376: FILE: arch/um/os-Linux/start_up.c:597:
+	if(err < 0)

ERROR:SPACING: space required before the open parenthesis '('
#379: FILE: arch/um/os-Linux/start_up.c:600:
+	if(sigaction(SIGIO, NULL, &old) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#383: FILE: arch/um/os-Linux/start_up.c:604:
+	if(sigaction(SIGIO, &new, NULL) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#392: FILE: arch/um/os-Linux/start_up.c:613:
+	if(sigaction(SIGIO, &old, NULL) < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: arch/um/os-Linux/start_up.c:622:
+	printk("Checking that host ptys support output SIGIO...");

WARNING:SPACING: space prohibited before semicolon
#405: FILE: arch/um/os-Linux/start_up.c:626:
+	while(os_write_file(master, buf, sizeof(buf)) > 0) ;

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: arch/um/os-Linux/start_up.c:626:
+	while(os_write_file(master, buf, sizeof(buf)) > 0) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#405: FILE: arch/um/os-Linux/start_up.c:626:
+	while(os_write_file(master, buf, sizeof(buf)) > 0) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#406: FILE: arch/um/os-Linux/start_up.c:627:
+	if(errno != EAGAIN)

WARNING:SPACING: space prohibited before semicolon
#408: FILE: arch/um/os-Linux/start_up.c:629:
+	while(((n = os_read_file(slave, buf, sizeof(buf))) > 0) && !got_sigio) ;

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: arch/um/os-Linux/start_up.c:629:
+	while(((n = os_read_file(slave, buf, sizeof(buf))) > 0) && !got_sigio) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#408: FILE: arch/um/os-Linux/start_up.c:629:
+	while(((n = os_read_file(slave, buf, sizeof(buf))) > 0) && !got_sigio) ;

ERROR:SPACING: space required before the open brace '{'
#410: FILE: arch/um/os-Linux/start_up.c:631:
+	if(got_sigio){

ERROR:SPACING: space required before the open parenthesis '('
#410: FILE: arch/um/os-Linux/start_up.c:631:
+	if(got_sigio){

CHECK:BRACES: braces {} should be used on all arms of this statement
#410: FILE: arch/um/os-Linux/start_up.c:631:
+	if(got_sigio){
[...]
+	else if(n == -EAGAIN) printk("No, enabling workaround\n");
[...]
+	else panic("check_sigio : read failed, err = %d\n", n);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#411: FILE: arch/um/os-Linux/start_up.c:632:
+		printk("Yes\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: arch/um/os-Linux/start_up.c:635:
+	else if(n == -EAGAIN) printk("No, enabling workaround\n");

ERROR:SPACING: space required before the open parenthesis '('
#414: FILE: arch/um/os-Linux/start_up.c:635:
+	else if(n == -EAGAIN) printk("No, enabling workaround\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#414: FILE: arch/um/os-Linux/start_up.c:635:
+	else if(n == -EAGAIN) printk("No, enabling workaround\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#414: FILE: arch/um/os-Linux/start_up.c:635:
+	}
+	else if(n == -EAGAIN) printk("No, enabling workaround\n");

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#415: FILE: arch/um/os-Linux/start_up.c:636:
+	else panic("check_sigio : read failed, err = %d\n", n);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#420: FILE: arch/um/os-Linux/start_up.c:641:
+	printk("Checking that host ptys support SIGIO on close...");

ERROR:SPACING: space required before the open brace '{'
#423: FILE: arch/um/os-Linux/start_up.c:644:
+	if(got_sigio){

ERROR:SPACING: space required before the open parenthesis '('
#423: FILE: arch/um/os-Linux/start_up.c:644:
+	if(got_sigio){

CHECK:BRACES: braces {} should be used on all arms of this statement
#423: FILE: arch/um/os-Linux/start_up.c:644:
+	if(got_sigio){
[...]
+	else printk("No, enabling workaround\n");
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#424: FILE: arch/um/os-Linux/start_up.c:645:
+		printk("Yes\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#427: FILE: arch/um/os-Linux/start_up.c:648:
+	else printk("No, enabling workaround\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#427: FILE: arch/um/os-Linux/start_up.c:648:
+	else printk("No, enabling workaround\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#427: FILE: arch/um/os-Linux/start_up.c:648:
+	}
+	else printk("No, enabling workaround\n");

ERROR:SPACING: space required before the open parenthesis '('
#432: FILE: arch/um/os-Linux/start_up.c:653:
+	if((os_access("/dev/ptmx", OS_ACC_R_OK) < 0) &&

ERROR:SPACING: space required before the open brace '{'
#433: FILE: arch/um/os-Linux/start_up.c:654:
+	   (os_access("/dev/ptyp0", OS_ACC_R_OK) < 0)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: arch/um/os-Linux/start_up.c:655:
+		printk("No pseudo-terminals available - skipping pty SIGIO "

WARNING:SPLIT_STRING: quoted string split across lines
#435: FILE: arch/um/os-Linux/start_up.c:656:
+		printk("No pseudo-terminals available - skipping pty SIGIO "
+		       "check\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090836.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 17 warnings, 4 checks, 379 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090836.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
