WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
In article <20030225160634.A4525@infradead.org> (at Tue, 25 Feb 2003 16:06:34 +0000), Christoph Hellwig <hch@infradead.org> says:

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: md5.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#135: FILE: md5.c:18:
+ * $USAGI: md5.c,v 1.1.6.2 2003/02/25 17:18:27 yoshfuji Exp $

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: md5.c:26:
+#define byteReverse(buf, len)	do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <byteReverse>
#143: FILE: md5.c:26:
+#define byteReverse(buf, len)	do { } while(0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <MD5Init>
#158: FILE: md5.c:41:
+void MD5Init(struct MD5Context *ctx)

CHECK:CAMELCASE: Avoid CamelCase: <MD5Context>
#158: FILE: md5.c:41:
+void MD5Init(struct MD5Context *ctx)

CHECK:CAMELCASE: Avoid CamelCase: <MD5Update>
#174: FILE: md5.c:57:
+MD5Update(struct MD5Context *ctx, u8 const *buf, unsigned int len)

CHECK:SPACING: No space is necessary after a cast
#181: FILE: md5.c:64:
+	if ((ctx->bits[0] = t + ((u32) len << 3)) < t)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#181: FILE: md5.c:64:
+	if ((ctx->bits[0] = t + ((u32) len << 3)) < t)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#190: FILE: md5.c:73:
+		u8 *p = (u8 *) ctx->in + t;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#198: FILE: md5.c:81:
+		byteReverse((u32*)ctx->in, 16);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#199: FILE: md5.c:82:
+		MD5Transform(ctx->buf, (u32 *) ctx->in);

CHECK:CAMELCASE: Avoid CamelCase: <MD5Transform>
#199: FILE: md5.c:82:
+		MD5Transform(ctx->buf, (u32 *) ctx->in);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#207: FILE: md5.c:90:
+		byteReverse((u32*)ctx->in, 16);

CHECK:SPACING: No space is necessary after a cast
#208: FILE: md5.c:91:
+		MD5Transform(ctx->buf, (u32 *) ctx->in);

CHECK:CAMELCASE: Avoid CamelCase: <MD5Final>
#222: FILE: md5.c:105:
+void MD5Final(u8 digest[16], struct MD5Context *ctx)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#231: FILE: md5.c:114:
+	 *         always at least one byte free */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#242: FILE: md5.c:125:
+		byteReverse((u32*)ctx->in, 16);

CHECK:SPACING: No space is necessary after a cast
#243: FILE: md5.c:126:
+		MD5Transform(ctx->buf, (u32 *) ctx->in);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#251: FILE: md5.c:134:
+	byteReverse((u32*)ctx->in, 14);

CHECK:SPACING: No space is necessary after a cast
#254: FILE: md5.c:137:
+	((u32 *) ctx->in)[14] = ctx->bits[0];

CHECK:SPACING: No space is necessary after a cast
#255: FILE: md5.c:138:
+	((u32 *) ctx->in)[15] = ctx->bits[1];

CHECK:SPACING: No space is necessary after a cast
#257: FILE: md5.c:140:
+	MD5Transform(ctx->buf, (u32 *) ctx->in);

CHECK:SPACING: No space is necessary after a cast
#260: FILE: md5.c:143:
+	memset((char *) ctx, 0, sizeof(ctx));	/* In case it's sensitive */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#266: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#266: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#266: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#266: FILE: md5.c:149:
+#define F1(x, y, z) (z ^ (x & (y ^ z)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#268: FILE: md5.c:151:
+#define F3(x, y, z) (x ^ y ^ z)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#268: FILE: md5.c:151:
+#define F3(x, y, z) (x ^ y ^ z)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#268: FILE: md5.c:151:
+#define F3(x, y, z) (x ^ y ^ z)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#269: FILE: md5.c:152:
+#define F4(x, y, z) (y ^ (x | ~z))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#269: FILE: md5.c:152:
+#define F4(x, y, z) (y ^ (x | ~z))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#269: FILE: md5.c:152:
+#define F4(x, y, z) (y ^ (x | ~z))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#272: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#272: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#272: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'data' may be better as '(data)' to avoid precedence issues
#272: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#272: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#272: FILE: md5.c:155:
+#define MD5STEP(f, w, x, y, z, data, s) 	\
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#273: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )
 	                               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#273: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )
 	                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#273: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )
 	                                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#273: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#273: FILE: md5.c:156:
+	( w += f(x, y, z) + data, w = w<<s | w>>(32-s), w += x )

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#363: FILE: md5.c:246:
+EXPORT_SYMBOL(MD5Init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#364: FILE: md5.c:247:
+EXPORT_SYMBOL(MD5Update);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#365: FILE: md5.c:248:
+EXPORT_SYMBOL(MD5Final);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#366: FILE: md5.c:249:
+EXPORT_SYMBOL(MD5Transform);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 12 warnings, 34 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
