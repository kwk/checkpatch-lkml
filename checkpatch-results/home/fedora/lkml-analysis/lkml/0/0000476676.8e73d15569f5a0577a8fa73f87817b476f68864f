WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#67: FILE: fs/exec.c:54:
+/* The format string for the core file name...
+   We default to "core" such that past behavior

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#69: FILE: fs/exec.c:56:
+   arbitrary but must match the sysctl table. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#80: FILE: fs/exec.c:945:
+/* This is the maximum expanded core file name.  We use
+   a reasonable number here since we use the stack to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#84: FILE: fs/exec.c:949:
+   is in the core_name_format string. */

CHECK:CAMELCASE: Avoid CamelCase: <addPID>
#97: FILE: fs/exec.c:961:
+	int addPID;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#101: FILE: fs/exec.c:965:
+	/* The +11 is here to simplify the code path.  What
+	   we do is always check that we are less than MAX

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#108: FILE: fs/exec.c:972:
+	   the code path means a more reliable implementation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#123: FILE: fs/exec.c:986:
+	/* Set this to true if we are going to add the PID.  If the PID
+	   already is added in the format we will end up clearing this.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: fs/exec.c:989:
+	   was included via the file name format pattern. */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#130: FILE: fs/exec.c:993:
+	for (fmt_i=0, name_n=0;
+	     name_n < MAX_CORE_NAME && core_name_format[fmt_i];
+	     fmt_i++)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: fs/exec.c:993:
+	for (fmt_i=0, name_n=0;
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: fs/exec.c:993:
+	for (fmt_i=0, name_n=0;
 	                    ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#134: FILE: fs/exec.c:997:
+		switch (core_name_format[fmt_i])
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#138: FILE: fs/exec.c:1001:
+			switch (core_name_format[fmt_i])
+			{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#145: FILE: fs/exec.c:1008:
+				cname=current->comm;
 				     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#148: FILE: fs/exec.c:1011:
+				/* Only copy as much as will fit within the
+				   MAX_CORE_NAME */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#148: FILE: fs/exec.c:1011:
+				   MAX_CORE_NAME */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#149: FILE: fs/exec.c:1012:
+				while (*cname && (name_n < MAX_CORE_NAME))
+				{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#158: FILE: fs/exec.c:1021:
+				cname=system_utsname.nodename;
 				     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#161: FILE: fs/exec.c:1024:
+				/* Only copy as much as will fit within the
+				   MAX_CORE_NAME */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#161: FILE: fs/exec.c:1024:
+				   MAX_CORE_NAME */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#162: FILE: fs/exec.c:1025:
+				while (*cname && (name_n < MAX_CORE_NAME))
+				{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#172: FILE: fs/exec.c:1035:
+				addPID=0;
 				      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#175: FILE: fs/exec.c:1038:
+				/* We don't need to pre-check that the number
+				   fits since we added a padding of 11

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#178: FILE: fs/exec.c:1041:
+				   check */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: fs/exec.c:1042:
+				name_n += sprintf(&corename[name_n],"%d",current->pid);
 				                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: fs/exec.c:1042:
+				name_n += sprintf(&corename[name_n],"%d",current->pid);
 				                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#184: FILE: fs/exec.c:1047:
+				/* We don't need to pre-check that the number
+				   fits since we added a padding of 11

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: fs/exec.c:1050:
+				   check */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: fs/exec.c:1051:
+				name_n += sprintf(&corename[name_n],"%d",current->uid);
 				                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#188: FILE: fs/exec.c:1051:
+				name_n += sprintf(&corename[name_n],"%d",current->uid);
 				                                        ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#200: FILE: fs/exec.c:1063:
+	if (addPID && (name_n < MAX_CORE_NAME))
+	{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'name_n < MAX_CORE_NAME'
#200: FILE: fs/exec.c:1063:
+	if (addPID && (name_n < MAX_CORE_NAME))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: fs/exec.c:1065:
+		name_n += sprintf(&corename[name_n],".%d",current->pid);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: fs/exec.c:1065:
+		name_n += sprintf(&corename[name_n],".%d",current->pid);
 		                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#206: FILE: fs/exec.c:1069:
+	corename[name_n]='\0';
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#218: FILE: include/linux/sysctl.h:127:
+	KERN_CORE_NAME_FORMAT=55, /* string: core file name format string */
 	                     ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#229: FILE: kernel/sysctl.c:53:
+extern char core_name_format[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476676.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 17 warnings, 2 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476676.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
