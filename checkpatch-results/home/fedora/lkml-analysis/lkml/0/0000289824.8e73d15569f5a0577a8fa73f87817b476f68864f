WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > > 	I must be missing something here, but did you not include mempolicy.h

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#83: FILE: include/linux/gfp.h:78:
+extern struct page *alloc_pages_current(unsigned gfp_mask, unsigned order);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#83: FILE: include/linux/gfp.h:78:
+extern struct page *alloc_pages_current(unsigned gfp_mask, unsigned order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/gfp.h:78:
+extern struct page *alloc_pages_current(unsigned gfp_mask, unsigned order);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: include/linux/gfp.h:82:
+static inline struct page * alloc_pages(unsigned int gfp_mask, unsigned int order)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: include/linux/gfp.h:89:
+extern struct page *__alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#94: FILE: include/linux/gfp.h:89:
+}
+extern struct page *__alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#94: FILE: include/linux/gfp.h:89:
+extern struct page *__alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/gfp.h:89:
+extern struct page *__alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: include/linux/gfp.h:90:
+extern struct page *__alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, 
+				   unsigned long off);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: include/linux/gfp.h:92:
+extern struct page *alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#97: FILE: include/linux/gfp.h:92:
+extern struct page *alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/gfp.h:92:
+extern struct page *alloc_page_vma(unsigned gfp_mask, struct vm_area_struct *vma, 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: include/linux/mempolicy.h:1:
+#ifndef _LINUX_MEMPOLICY_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#134: FILE: include/linux/mempolicy.h:20:
+#define MPOL_F_NODE   (1<<0)  /* return next IL mode instead of node mask */
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: include/linux/mempolicy.h:20:
+#define MPOL_F_NODE   (1<<0)  /* return next IL mode instead of node mask */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#135: FILE: include/linux/mempolicy.h:21:
+#define MPOL_F_ADDR     (1<<1)  /* look up vma using address */
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: include/linux/mempolicy.h:21:
+#define MPOL_F_ADDR     (1<<1)  /* look up vma using address */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#138: FILE: include/linux/mempolicy.h:24:
+#define MPOL_MF_STRICT  (1<<0)  /* Verify existing pages in the mapping */
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#138: FILE: include/linux/mempolicy.h:24:
+#define MPOL_MF_STRICT  (1<<0)  /* Verify existing pages in the mapping */

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#165: FILE: include/linux/mempolicy.h:51:
+ * must be also aquired to protect il_next.
                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: include/linux/mempolicy.h:62:
+^Ishort policy; ^I/* See MPOL_* above */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: include/linux/mempolicy.h:65:
+^I^Ishort ^I^I preferred_node; /* preferred */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/mempolicy.h:79:
+extern void __mpol_free(struct mempolicy *pol);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/mempolicy.h:86:
+extern struct mempolicy *__mpol_copy(struct mempolicy *pol);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: include/linux/mempolicy.h:103:
+extern int __mpol_equal(struct mempolicy *a, struct mempolicy *b);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#224: FILE: include/linux/mempolicy.h:110:
+}
+#define vma_mpol_equal(a,b) mpol_equal(vma_policy(a), vma_policy(b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: include/linux/mempolicy.h:110:
+#define vma_mpol_equal(a,b) mpol_equal(vma_policy(a), vma_policy(b))
                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: include/linux/mempolicy.h:120:
+extern int mpol_first_node(struct vm_area_struct *vma, unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/linux/mempolicy.h:121:
+extern int mpol_node_valid(int nid, struct vm_area_struct *vma, unsigned long addr);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#246: FILE: include/linux/mempolicy.h:132:
+	struct rb_node nd;
 	               ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: include/linux/mempolicy.h:149:
+int mpol_set_shared_policy(struct shared_policy *info,
+				  struct vm_area_struct *vma,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#277: FILE: include/linux/mempolicy.h:163:
+}
+#define vma_mpol_equal(a,b) 1

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: include/linux/mempolicy.h:163:
+#define vma_mpol_equal(a,b) 1
                         ^

ERROR:SPACING: space required before the open parenthesis '('
#279: FILE: include/linux/mempolicy.h:165:
+#define mpol_set_vma_default(vma) do {} while(0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: include/linux/mempolicy.h:193:
+static inline int mpol_set_shared_policy(struct shared_policy *info,
+				      struct vm_area_struct *vma,

ERROR:SPACING: space required before the open parenthesis '('
#328: FILE: include/linux/mempolicy.h:214:
+#define vma_set_policy(vma, pol) do {} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: include/linux/mm.h:52:
+ * But if you want to recover the 4 bytes justr remove vm_next. It is redundant $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: include/linux/mm.h:53:
+ * with vm_rb. Will be a lot of editing work though. vm_rb.color is redundant too.] $

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: include/linux/sched.h:506:
+  ^Istruct mempolicy *mempolicy;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: include/linux/sched.h:506:
+  ^Istruct mempolicy *mempolicy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: include/linux/sched.h:506:
+  ^Istruct mempolicy *mempolicy;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: include/linux/sched.h:507:
+  ^Ishort il_next;^I^I/* could be shared with used_math */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: include/linux/sched.h:507:
+  ^Ishort il_next;^I^I/* could be shared with used_math */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: include/linux/sched.h:507:
+  ^Ishort il_next;^I^I/* could be shared with used_math */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#442: FILE: include/linux/mempolicy.h:1:
+#ifndef _LINUX_MEMPOLICY_H

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#461: FILE: include/linux/mempolicy.h:20:
+#define MPOL_F_NODE   (1<<0)  /* return next IL mode instead of node mask */
                         ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#461: FILE: include/linux/mempolicy.h:20:
+#define MPOL_F_NODE   (1<<0)  /* return next IL mode instead of node mask */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#462: FILE: include/linux/mempolicy.h:21:
+#define MPOL_F_ADDR     (1<<1)  /* look up vma using address */
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#462: FILE: include/linux/mempolicy.h:21:
+#define MPOL_F_ADDR     (1<<1)  /* look up vma using address */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#465: FILE: include/linux/mempolicy.h:24:
+#define MPOL_MF_STRICT  (1<<0)  /* Verify existing pages in the mapping */
                           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#465: FILE: include/linux/mempolicy.h:24:
+#define MPOL_MF_STRICT  (1<<0)  /* Verify existing pages in the mapping */

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#492: FILE: include/linux/mempolicy.h:51:
+ * must be also aquired to protect il_next.
                 ^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#503: FILE: include/linux/mempolicy.h:62:
+^Ishort policy; ^I/* See MPOL_* above */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: include/linux/mempolicy.h:65:
+^I^Ishort ^I^I preferred_node; /* preferred */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: include/linux/mempolicy.h:79:
+extern void __mpol_free(struct mempolicy *pol);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: include/linux/mempolicy.h:86:
+extern struct mempolicy *__mpol_copy(struct mempolicy *pol);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: include/linux/mempolicy.h:103:
+extern int __mpol_equal(struct mempolicy *a, struct mempolicy *b);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#551: FILE: include/linux/mempolicy.h:110:
+}
+#define vma_mpol_equal(a,b) mpol_equal(vma_policy(a), vma_policy(b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: include/linux/mempolicy.h:110:
+#define vma_mpol_equal(a,b) mpol_equal(vma_policy(a), vma_policy(b))
                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#561: FILE: include/linux/mempolicy.h:120:
+extern int mpol_first_node(struct vm_area_struct *vma, unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#562: FILE: include/linux/mempolicy.h:121:
+extern int mpol_node_valid(int nid, struct vm_area_struct *vma, unsigned long addr);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#573: FILE: include/linux/mempolicy.h:132:
+	struct rb_node nd;
 	               ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: include/linux/mempolicy.h:149:
+int mpol_set_shared_policy(struct shared_policy *info,
+				  struct vm_area_struct *vma,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#604: FILE: include/linux/mempolicy.h:163:
+}
+#define vma_mpol_equal(a,b) 1

ERROR:SPACING: space required after that ',' (ctx:VxV)
#604: FILE: include/linux/mempolicy.h:163:
+#define vma_mpol_equal(a,b) 1
                         ^

ERROR:SPACING: space required before the open parenthesis '('
#606: FILE: include/linux/mempolicy.h:165:
+#define mpol_set_vma_default(vma) do {} while(0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: include/linux/mempolicy.h:193:
+static inline int mpol_set_shared_policy(struct shared_policy *info,
+				      struct vm_area_struct *vma,

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: include/linux/mempolicy.h:214:
+#define vma_set_policy(vma, pol) do {} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#665: FILE: mm/mempolicy.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#714: FILE: mm/mempolicy.c:50:
+/* Notebook:
+   fix mmap readahead to honour policy and enable policy for any page cache

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#738: FILE: mm/mempolicy.c:74:
+#include <asm/uaccess.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#743: FILE: mm/mempolicy.c:79:
+#define round_up(x,y) (((x) + (y) - 1) & ~((y)-1))
                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#743: FILE: mm/mempolicy.c:79:
+#define round_up(x,y) (((x) + (y) - 1) & ~((y)-1))
                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#743: FILE: mm/mempolicy.c:79:
+#define round_up(x,y) (((x) + (y) - 1) & ~((y)-1))

CHECK:CAMELCASE: Avoid CamelCase: <PDprintk>
#744: FILE: mm/mempolicy.c:80:
+#define PDprintk(fmt...)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#747: FILE: mm/mempolicy.c:83:
+/* Highest zone. An specific allocation for a zone below that is not
+   policied. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#747: FILE: mm/mempolicy.c:83:
+   policied. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#759: FILE: mm/mempolicy.c:95:
+	DECLARE_BITMAP(offline, MAX_NUMNODES);
+	bitmap_copy(offline, node_online_map, MAX_NUMNODES);

WARNING:LINE_SPACING: Missing a blank line after declarations
#773: FILE: mm/mempolicy.c:109:
+	int empty = bitmap_empty(nodes, MAX_NUMNODES);
+	switch (mode) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#781: FILE: mm/mempolicy.c:117:
+		/* Preferred will only use the first bit, but allow
+		   more for now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#781: FILE: mm/mempolicy.c:117:
+		   more for now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#805: FILE: mm/mempolicy.c:141:
+	/* When the user specified more nodes than supported just check
+	   if the non supported part is all zero. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#805: FILE: mm/mempolicy.c:141:
+	   if the non supported part is all zero. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: mm/mempolicy.c:145:
+			unsigned long t;
+			if (get_user(t,  nmask + k))

CHECK:BRACES: braces {} should be used on all arms of this statement
#811: FILE: mm/mempolicy.c:147:
+			if (k == nlongs - 1) {
[...]
+			} else if (t)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#822: FILE: mm/mempolicy.c:158:
+	if (nmask && copy_from_user(nodes, nmask, nlongs*sizeof(unsigned long)))
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#824: FILE: mm/mempolicy.c:160:
+	nodes[nlongs-1] &= endmask;
 	            ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#832: FILE: mm/mempolicy.c:168:
+	int num, max, nd;
 	              ^^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#835: FILE: mm/mempolicy.c:171:
+	zl = kmalloc(sizeof(void *) * max, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#839: FILE: mm/mempolicy.c:175:
+	for (nd = find_first_bit(nodes, MAX_NUMNODES);
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#840: FILE: mm/mempolicy.c:176:
+	     nd < MAX_NUMNODES;
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#841: FILE: mm/mempolicy.c:177:
+	     nd = find_next_bit(nodes, MAX_NUMNODES, 1+nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#841: FILE: mm/mempolicy.c:177:
+	     nd = find_next_bit(nodes, MAX_NUMNODES, 1+nd)) {
 	                                               ^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#841: FILE: mm/mempolicy.c:177:
+	     nd = find_next_bit(nodes, MAX_NUMNODES, 1+nd)) {
 	                                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#843: FILE: mm/mempolicy.c:179:
+		int k;
+		for (k = MAX_NR_ZONES-1; k >= 0; k--) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#843: FILE: mm/mempolicy.c:179:
+		for (k = MAX_NR_ZONES-1; k >= 0; k--) {
 		                     ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#844: FILE: mm/mempolicy.c:180:
+			struct zone *z = &NODE_DATA(nd)->node_zones[k];
 			                            ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#845: FILE: mm/mempolicy.c:181:
+			struct zone *z = &NODE_DATA(nd)->node_zones[k];
+			if (!z->present_pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#852: FILE: mm/mempolicy.c:188:
+	BUG_ON(num >= max);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#861: FILE: mm/mempolicy.c:197:
+	struct mempolicy *policy;
+	PDprintk("setting mode %d nodes[0] %lx\n", mode, nodes[0]);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!policy->v.zonelist"
#879: FILE: mm/mempolicy.c:215:
+		if (policy->v.zonelist == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#898: FILE: mm/mempolicy.c:234:
+		pgd_t *pgd = pgd_offset_k(addr);
+		if (pgd_none(*pgd)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#913: FILE: mm/mempolicy.c:249:
+			unsigned nid = page_zone(p)->zone_pgdat->node_id;

WARNING:LINE_SPACING: Missing a blank line after declarations
#914: FILE: mm/mempolicy.c:250:
+			unsigned nid = page_zone(p)->zone_pgdat->node_id;
+			if (!test_bit(nid, nodes))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1002: FILE: mm/mempolicy.c:338:
+			  unsigned flags)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1032: FILE: mm/mempolicy.c:368:
+	PDprintk("mbind %lx-%lx mode:%ld nodes:%lx\n",start,start+len,
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1032: FILE: mm/mempolicy.c:368:
+	PDprintk("mbind %lx-%lx mode:%ld nodes:%lx\n",start,start+len,
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1032: FILE: mm/mempolicy.c:368:
+	PDprintk("mbind %lx-%lx mode:%ld nodes:%lx\n",start,start+len,
 	                                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: mm/mempolicy.c:369:
+	PDprintk("mbind %lx-%lx mode:%ld nodes:%lx\n",start,start+len,
+			mode,nodes[0]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1033: FILE: mm/mempolicy.c:369:
+			mode,nodes[0]);
 			    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: mm/mempolicy.c:383:
+asmlinkage long sys_set_mempolicy(int mode, unsigned long *nmask,
+				   unsigned long maxnode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1072: FILE: mm/mempolicy.c:408:
+	int i;
+	bitmap_clear(nodes, MAX_NUMNODES);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1087: FILE: mm/mempolicy.c:423:
+^I^Ielse^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1091: FILE: mm/mempolicy.c:427:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: mm/mempolicy.c:428:
+^I}^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1099: FILE: mm/mempolicy.c:435:
+	int err;
+	err = get_user_pages(current, mm, addr & PAGE_MASK, 1, 0, 0, &p, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: mm/mempolicy.c:439:
+^I}^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1111: FILE: mm/mempolicy.c:447:
+	unsigned long copy = round_up(maxnode-1, BITS_PER_LONG) / 8;
 	                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1112: FILE: mm/mempolicy.c:448:
+	unsigned long copy = round_up(maxnode-1, BITS_PER_LONG) / 8;
+	if (copy > sizeof(nodes)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1115: FILE: mm/mempolicy.c:451:
+		if (clear_user((char*)user_mask + sizeof(nodes), copy - sizeof(nodes)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1125: FILE: mm/mempolicy.c:461:
+^I^I^I^I  unsigned long addr, unsigned long flags)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1129: FILE: mm/mempolicy.c:465:
+^Istruct vm_area_struct *vma = NULL; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1129: FILE: mm/mempolicy.c:465:
+^Istruct vm_area_struct *vma = NULL; ^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1132: FILE: mm/mempolicy.c:468:
+	if (flags & ~(unsigned long)(MPOL_F_NODE|MPOL_F_ADDR))
 	                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nmask"
#1134: FILE: mm/mempolicy.c:470:
+	if (nmask != NULL && maxnode < numnodes)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1136: FILE: mm/mempolicy.c:472:
+	if (flags & MPOL_F_ADDR) {
[...]
+	} else if (addr)
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1138: FILE: mm/mempolicy.c:474:
+		vma = find_vma_intersection(mm, addr, addr+1);
 		                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1149: FILE: mm/mempolicy.c:485:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1152: FILE: mm/mempolicy.c:488:
+^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1153: FILE: mm/mempolicy.c:489:
+	if (flags & MPOL_F_NODE) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1154: FILE: mm/mempolicy.c:490:
+		if (flags & MPOL_F_ADDR) {
[...]
+		} else if (pol == current->mempolicy && pol->policy == MPOL_INTERLEAVE)
[...]
+		else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: mm/mempolicy.c:494:
+^I^I^Ipval = err;^I$

CHECK:BRACES: Unbalanced braces around else statement
#1161: FILE: mm/mempolicy.c:497:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1164: FILE: mm/mempolicy.c:500:
+^I^I}^I$

CHECK:BRACES: Unbalanced braces around else statement
#1165: FILE: mm/mempolicy.c:501:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1175: FILE: mm/mempolicy.c:511:
+		DECLARE_BITMAP(nodes, MAX_NUMNODES);
+		get_zonemask(pol, nodes);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1177: FILE: mm/mempolicy.c:513:
+^I}^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1190: FILE: mm/mempolicy.c:526:
+	struct mempolicy *pol = current->mempolicy;
+	if (vma) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: mm/mempolicy.c:528:
+^I^I        pol = vma->vm_ops->get_policy(vma, addr);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1202: FILE: mm/mempolicy.c:538:
+static struct zonelist *zonelist_policy(unsigned gfp, struct mempolicy *policy)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1204: FILE: mm/mempolicy.c:540:
+	int nd;
 	    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1205: FILE: mm/mempolicy.c:541:
+	int nd;
+	switch (policy->policy) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1207: FILE: mm/mempolicy.c:543:
+		nd = policy->v.preferred_node;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1208: FILE: mm/mempolicy.c:544:
+		if (nd < 0)
 		    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1209: FILE: mm/mempolicy.c:545:
+			nd = numa_node_id();
 			^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1215: FILE: mm/mempolicy.c:551:
+		/*FALL THROUGH*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1218: FILE: mm/mempolicy.c:554:
+		nd = numa_node_id();
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1221: FILE: mm/mempolicy.c:557:
+		nd = 0;
 		^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1222: FILE: mm/mempolicy.c:558:
+		BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1224: FILE: mm/mempolicy.c:560:
+	return NODE_DATA(nd)->node_zonelists + (gfp & GFP_ZONEMASK);
 	                 ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1228: FILE: mm/mempolicy.c:564:
+static unsigned interleave_nodes(struct mempolicy *policy)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1230: FILE: mm/mempolicy.c:566:
+^Iunsigned nid, next; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1230: FILE: mm/mempolicy.c:566:
+^Iunsigned nid, next; ^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1230: FILE: mm/mempolicy.c:566:
+	unsigned nid, next; 	

WARNING:LINE_SPACING: Missing a blank line after declarations
#1232: FILE: mm/mempolicy.c:568:
+	struct task_struct *me = current;
+	nid = me->il_next;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1233: FILE: mm/mempolicy.c:569:
+	BUG_ON(nid >= MAX_NUMNODES);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1234: FILE: mm/mempolicy.c:570:
+	next = find_next_bit(policy->v.nodes, MAX_NUMNODES, 1+nid);
 	                                                     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1245: FILE: mm/mempolicy.c:581:
+	unsigned target = (unsigned)off % (unsigned)numnodes;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1245: FILE: mm/mempolicy.c:581:
+	unsigned target = (unsigned)off % (unsigned)numnodes;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1245: FILE: mm/mempolicy.c:581:
+	unsigned target = (unsigned)off % (unsigned)numnodes;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1248: FILE: mm/mempolicy.c:584:
+	int nid = -1;
+	c = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1250: FILE: mm/mempolicy.c:586:
+		nid = find_next_bit(pol->v.nodes, MAX_NUMNODES, nid+1);
 		                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1252: FILE: mm/mempolicy.c:588:
+^I^I^Inid = -1; ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1252: FILE: mm/mempolicy.c:588:
+^I^I^Inid = -1; ^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1257: FILE: mm/mempolicy.c:593:
+	BUG_ON(nid >= MAX_NUMNODES);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1262: FILE: mm/mempolicy.c:598:
+/* Allocate a page in interleaved policy for a VMA. Use the offset
+   into the VMA as key. Own path because it needs to do special accounting. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1262: FILE: mm/mempolicy.c:598:
+   into the VMA as key. Own path because it needs to do special accounting. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1263: FILE: mm/mempolicy.c:599:
+static struct page *alloc_page_interleave(unsigned gfp, unsigned nid)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1263: FILE: mm/mempolicy.c:599:
+static struct page *alloc_page_interleave(unsigned gfp, unsigned nid)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1267: FILE: mm/mempolicy.c:603:
+	struct page *page;
+	BUG_ON(!test_bit(nid, node_online_map));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1267: FILE: mm/mempolicy.c:603:
+	BUG_ON(!test_bit(nid, node_online_map));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1278: FILE: mm/mempolicy.c:614:
+ * ^Ialloc_page_vma^I- Allocate a page for a VMA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1280: FILE: mm/mempolicy.c:616:
+ * ^I@gfp:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1287: FILE: mm/mempolicy.c:623:
+ * ^I@vma:  Pointer to VMA or NULL if not available.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1290: FILE: mm/mempolicy.c:626:
+ * ^IThis function allocates a page from the kernel page pool and applies$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1295: FILE: mm/mempolicy.c:631:
+ * ^Iuser space. Returns NULL when no page can be allocated.$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1300: FILE: mm/mempolicy.c:636:
+alloc_page_vma(unsigned gfp, struct vm_area_struct *vma, unsigned long addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1303: FILE: mm/mempolicy.c:639:
+	struct mempolicy *pol = get_vma_policy(vma, addr);
+	if (unlikely(pol->policy == MPOL_INTERLEAVE)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1304: FILE: mm/mempolicy.c:640:
+		unsigned nid;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1305: FILE: mm/mempolicy.c:641:
+^I^Iif (vma) { ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1305: FILE: mm/mempolicy.c:641:
+^I^Iif (vma) { ^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1305: FILE: mm/mempolicy.c:641:
+		unsigned nid;
+		if (vma) { 	

WARNING:LINE_SPACING: Missing a blank line after declarations
#1307: FILE: mm/mempolicy.c:643:
+			unsigned long off;
+			BUG_ON(addr >= vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1307: FILE: mm/mempolicy.c:643:
+			BUG_ON(addr >= vma->vm_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1308: FILE: mm/mempolicy.c:644:
+			BUG_ON(addr < vma->vm_start);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: mm/mempolicy.c:647:
+^I^I^Inid = offset_il_node(pol, vma, off);^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1322: FILE: mm/mempolicy.c:658:
+ * ^Ialloc_pages_current - Allocate pages.$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1335: FILE: mm/mempolicy.c:671:
+struct page *alloc_pages_current(unsigned gfp, unsigned order)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1335: FILE: mm/mempolicy.c:671:
+struct page *alloc_pages_current(unsigned gfp, unsigned order)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1336: FILE: mm/mempolicy.c:672:
+{ ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1336: FILE: mm/mempolicy.c:672:
+{ ^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1338: FILE: mm/mempolicy.c:674:
+	struct mempolicy *pol = current->mempolicy;
+	if (!pol || in_interrupt())

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1345: FILE: mm/mempolicy.c:681:
+EXPORT_SYMBOL(alloc_pages_current);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1349: FILE: mm/mempolicy.c:685:
+{^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1351: FILE: mm/mempolicy.c:687:
+	struct mempolicy *new = kmem_cache_alloc(policy_cache, GFP_KERNEL);
+	if (!new)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1353: FILE: mm/mempolicy.c:689:
+^I*new = *old;^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1357: FILE: mm/mempolicy.c:693:
+		int sz = ksize(old->v.zonelist);
+		new->v.zonelist = kmalloc(sz, SLAB_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1383: FILE: mm/mempolicy.c:719:
+		int i;
+		for (i = 0; a->v.zonelist->zones[i]; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1385: FILE: mm/mempolicy.c:721:
+^I^I^I^Ireturn 0; ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1385: FILE: mm/mempolicy.c:721:
+^I^I^I^Ireturn 0; ^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!b->v.zonelist->zones[i]"
#1386: FILE: mm/mempolicy.c:722:
+		return b->v.zonelist->zones[i] == NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1389: FILE: mm/mempolicy.c:725:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1414: FILE: mm/mempolicy.c:750:
+	struct mempolicy *pol = get_vma_policy(vma, addr);
+	switch (pol->policy) {

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1422: FILE: mm/mempolicy.c:758:
+		return pol->v.preferred_node >= 0 ? pol->v.preferred_node:numa_node_id();
 		                                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1424: FILE: mm/mempolicy.c:760:
+	BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1432: FILE: mm/mempolicy.c:768:
+	struct mempolicy *pol = get_vma_policy(vma, addr);
+	switch (pol->policy) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1439: FILE: mm/mempolicy.c:775:
+		struct zone **z;
+		for (z = pol->v.zonelist->zones; *z; z++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1445: FILE: mm/mempolicy.c:781:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1465: FILE: mm/mempolicy.c:801:
+	struct rb_node *n = sp->root.rb_node;
+	while (n) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1466: FILE: mm/mempolicy.c:802:
+		struct sp_node *p = rb_entry(n, struct sp_node, nd);
 		                                                ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1467: FILE: mm/mempolicy.c:803:
+		struct sp_node *p = rb_entry(n, struct sp_node, nd);
+		if (start >= p->end) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1467: FILE: mm/mempolicy.c:803:
+		if (start >= p->end) {
[...]
+		} else if (end < p->start) {
[...]
+		} else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1480: FILE: mm/mempolicy.c:816:
+		struct rb_node *prev = rb_prev(n);
+		if (!prev)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1482: FILE: mm/mempolicy.c:818:
+		w = rb_entry(prev, struct sp_node, nd);
 		                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1487: FILE: mm/mempolicy.c:823:
+	return rb_entry(n, struct sp_node, nd);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1496: FILE: mm/mempolicy.c:832:
+	struct sp_node *nd;
 	                ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1497: FILE: mm/mempolicy.c:833:
+	struct sp_node *nd;
+	while (*p) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1499: FILE: mm/mempolicy.c:835:
+		nd = rb_entry(parent, struct sp_node, nd);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1499: FILE: mm/mempolicy.c:835:
+		nd = rb_entry(parent, struct sp_node, nd);
 		                                      ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1505: FILE: mm/mempolicy.c:841:
+			BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1507: FILE: mm/mempolicy.c:843:
+	rb_link_node(&new->nd, parent, p);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1508: FILE: mm/mempolicy.c:844:
+	rb_insert_color(&new->nd, &sp->root);
 	                      ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1519: FILE: mm/mempolicy.c:855:
+	struct sp_node *sn;
+	down(&sp->sem);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1520: FILE: mm/mempolicy.c:856:
+	sn = sp_lookup(sp, idx, idx+1);
 	                           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1532: FILE: mm/mempolicy.c:868:
+	rb_erase(&n->nd, &sp->root);
 	             ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1541: FILE: mm/mempolicy.c:877:
+	struct sp_node *n = kmem_cache_alloc(sn_cache, GFP_KERNEL);
+	if (!n)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1560: FILE: mm/mempolicy.c:896:
+		struct rb_node *next = rb_next(&n->nd);
 		                                   ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1561: FILE: mm/mempolicy.c:897:
+		struct rb_node *next = rb_next(&n->nd);
+		if (n->start >= start) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1583: FILE: mm/mempolicy.c:919:
+		n = rb_entry(next, struct sp_node, nd);
 		                                   ^^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1600: FILE: mm/mempolicy.c:936:
+		 sz, npol? npol->policy : -1,
 		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1602: FILE: mm/mempolicy.c:938:
+^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1608: FILE: mm/mempolicy.c:944:
+	err = shared_policy_replace(info, vma->vm_pgoff, vma->vm_pgoff+sz, new);
 	                                                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1619: FILE: mm/mempolicy.c:955:
+	struct rb_node *next;
+	down(&p->sem);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1622: FILE: mm/mempolicy.c:958:
+		n = rb_entry(next, struct sp_node, nd);		
 		                                   ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1622: FILE: mm/mempolicy.c:958:
+^I^In = rb_entry(next, struct sp_node, nd);^I^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1623: FILE: mm/mempolicy.c:959:
+		next = rb_next(&n->nd);
 		                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1624: FILE: mm/mempolicy.c:960:
+		rb_erase(&n->nd, &p->root);
 		             ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1626: FILE: mm/mempolicy.c:962:
+^I^Ikmem_cache_free(sn_cache, n);^I^I$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1645: FILE: mm/mempolicy.c:981:
+__initcall(numa_policy_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289824.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 135 warnings, 62 checks, 1540 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289824.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
