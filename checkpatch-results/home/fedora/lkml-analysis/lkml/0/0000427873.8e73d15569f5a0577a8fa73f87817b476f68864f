WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#68: FILE: kernel/sched.c:34:
+#include <asm/topology.h>

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#70: FILE: kernel/sched.c:35:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#77: FILE: kernel/sched.c:637:
 }
+#if CONFIG_NUMA

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#81: FILE: kernel/sched.c:641:
+static inline runqueue_t *find_busiest_queue(runqueue_t *this_rq, int this=
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#83: FILE: kernel/sched.c:642:
+static inline runqueue_t *find_busiest_queue(runqueue_t *this_rq, int this=
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->nr_running > this_rq->prev_nr_running[this_cpu]'
#124: FILE: kernel/sched.c:683:
+	if (idle || (this_rq->nr_running > this_rq->prev_nr_running[this_cpu]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#125: FILE: kernel/sched.c:684:
+		nr_running =3D this_rq->nr_running;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#127: FILE: kernel/sched.c:686:
+		nr_running =3D this_rq->prev_nr_running[this_cpu];
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#129: FILE: kernel/sched.c:688:
+		nr_running =3D 1;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#131: FILE: kernel/sched.c:690:
+	busiest_on_node =3D NULL;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#132: FILE: kernel/sched.c:691:
+	busiest_off_node =3D NULL;
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#133: FILE: kernel/sched.c:692:
+	busiest =3D NULL;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#134: FILE: kernel/sched.c:693:
+	max_load_on_node =3D 1;
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#135: FILE: kernel/sched.c:694:
+	max_load_off_node =3D 1;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#136: FILE: kernel/sched.c:695:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#137: FILE: kernel/sched.c:696:
+	for (i =3D 0; i < NR_CPUS; i++) {
 	       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#137: FILE: kernel/sched.c:696:
+	for (i =3D 0; i < NR_CPUS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#141: FILE: kernel/sched.c:700:
+		rq_src =3D cpu_rq(i);
 		       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq_src->nr_running < this_rq->prev_nr_running[i]'
#142: FILE: kernel/sched.c:701:
+		if (idle || (rq_src->nr_running < this_rq->prev_nr_running[i]))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#143: FILE: kernel/sched.c:702:
+			load =3D rq_src->nr_running;
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#145: FILE: kernel/sched.c:704:
+			load =3D this_rq->prev_nr_running[i];
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#147: FILE: kernel/sched.c:706:
+		this_rq->prev_nr_running[i] =3D rq_src->nr_running;
 		                            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#149: FILE: kernel/sched.c:708:
+		if (__cpu_to_node(i) =3D=3D __cpu_to_node(this_cpu)) {
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#149: FILE: kernel/sched.c:708:
+		if (__cpu_to_node(i) =3D=3D __cpu_to_node(this_cpu)) {
 		                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#149: FILE: kernel/sched.c:708:
+		if (__cpu_to_node(i) =3D=3D __cpu_to_node(this_cpu)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#150: FILE: kernel/sched.c:709:
+			if ((load > max_load_on_node) && (rq_src !=3D this_rq)) {
 			                                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'load > max_load_on_node'
#150: FILE: kernel/sched.c:709:
+			if ((load > max_load_on_node) && (rq_src !=3D this_rq)) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#151: FILE: kernel/sched.c:710:
+				busiest_on_node =3D rq_src;
 				                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#152: FILE: kernel/sched.c:711:
+				max_load_on_node =3D load;
 				                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#156: FILE: kernel/sched.c:715:
+				busiest_off_node =3D rq_src;
 				                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#157: FILE: kernel/sched.c:716:
+				max_load_off_node =3D load;
 				                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#163: FILE: kernel/sched.c:722:
+		if (idle || ((nr_running*5)/4 < max_load_on_node)) {
 		                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#163: FILE: kernel/sched.c:722:
+		if (idle || ((nr_running*5)/4 < max_load_on_node)) {
 		                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#164: FILE: kernel/sched.c:723:
+			busiest =3D busiest_on_node;
 			        ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#165: FILE: kernel/sched.c:724:
+			*imbalance =3D (max_load_on_node - nr_running) / 2;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#165: FILE: kernel/sched.c:724:
+			*imbalance =3D (max_load_on_node - nr_running) / 2;
 			           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#170: FILE: kernel/sched.c:729:
+		if (nr_running*2 >=3D max_load_off_node)=20
 		              ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#170: FILE: kernel/sched.c:729:
+		if (nr_running*2 >=3D max_load_off_node)=20
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#170: FILE: kernel/sched.c:729:
+		if (nr_running*2 >=3D max_load_off_node)=20
 		                                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#170: FILE: kernel/sched.c:729:
+		if (nr_running*2 >=3D max_load_off_node)=20

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#172: FILE: kernel/sched.c:731:
+		busiest =3D busiest_off_node;=20
 		        ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#172: FILE: kernel/sched.c:731:
+		busiest =3D busiest_off_node;=20
 		                            ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#172: FILE: kernel/sched.c:731:
+		busiest =3D busiest_off_node;=20
 		                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#173: FILE: kernel/sched.c:732:
+		*imbalance =3D 1;
 		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#173: FILE: kernel/sched.c:732:
+		*imbalance =3D 1;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#174: FILE: kernel/sched.c:733:
+	}=20
 	 ^

ERROR:SPACING: space required after that close brace '}'
#174: FILE: kernel/sched.c:733:
+	}=20

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#176: FILE: kernel/sched.c:735:
+		if (busiest =3D=3D this_rq) {
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#176: FILE: kernel/sched.c:735:
+		if (busiest =3D=3D this_rq) {
 		               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#176: FILE: kernel/sched.c:735:
+		if (busiest =3D=3D this_rq) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#176: FILE: kernel/sched.c:735:
+		if (busiest =3D=3D this_rq) {
+			return NULL;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#179: FILE: kernel/sched.c:738:
+		nr_running =3D double_lock_balance(this_rq, busiest, this_cpu, idle, nr_=
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#179: FILE: kernel/sched.c:738:
+		nr_running =3D double_lock_balance(this_rq, busiest, this_cpu, idle, nr_=
 		                                                                        ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#185: FILE: kernel/sched.c:743:
+		if (busiest->nr_running <=3D nr_running) {
 		                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#187: FILE: kernel/sched.c:745:
+			busiest =3D NULL;
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#220: FILE: kernel/sched.c:2236:
+	old_mask =3D p->cpus_allowed;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: kernel/sched.c:2253:
+	int i, minload, best_cpu;
+	best_cpu =3D task_cpu(p);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#237: FILE: kernel/sched.c:2253:
+	best_cpu =3D task_cpu(p);
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#238: FILE: kernel/sched.c:2254:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#239: FILE: kernel/sched.c:2255:
+	minload =3D cpu_rq(best_cpu)->nr_running;
 	        ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#241: FILE: kernel/sched.c:2257:
+	if (minload <=3D 2)
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#244: FILE: kernel/sched.c:2260:
+	for (i =3D 0; i < NR_CPUS; i++) {
 	       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#244: FILE: kernel/sched.c:2260:
+	for (i =3D 0; i < NR_CPUS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#249: FILE: kernel/sched.c:2265:
+			minload =3D cpu_rq(i)->nr_running;
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#250: FILE: kernel/sched.c:2266:
+			best_cpu =3D i;
 			         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#261: FILE: kernel/sched.c:2277:
+		new_cpu =3D sched_best_cpu(current);
 		        ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#262: FILE: kernel/sched.c:2278:
+		if (new_cpu !=3D smp_processor_id())
 		            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/linux/sched.h:170:
+extern void sched_balance_exec(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 6 warnings, 9 checks, 228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
