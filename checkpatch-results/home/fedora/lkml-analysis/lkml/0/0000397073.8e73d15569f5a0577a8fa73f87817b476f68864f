WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#20: 
In message <Pine.LNX.4.44.0301251229120.6749-100000@chaos.physics.uiowa.edu> you write:

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: include/linux/module.h:42:
+           easily be used in non-versioned kernels and vice-versa. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#91: FILE: include/linux/module.h:42:
+	/* This is here unconditionally, so versioned modules can
+           easily be used in non-versioned kernels and vice-versa. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#91: FILE: include/linux/module.h:42:
+           easily be used in non-versioned kernels and vice-versa. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#136: FILE: include/linux/module.h:169:
+/* Mark the CRC weak since genksyms apparently decides not to generate
+   a checksums for some symbols */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#136: FILE: include/linux/module.h:169:
+   a checksums for some symbols */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#137: FILE: include/linux/module.h:170:
+#define __EXPORT_SYMBOL(sym, sec)					\
+	extern unsigned long __crc_##sym __attribute__((weak));		\
+	static const char __kstrtab_##sym[]				\
+	__attribute__((section("__ksymtab_strings")))			\
+	= MODULE_SYMBOL_PREFIX #sym;					\
+	static const struct kernel_symbol __ksymtab_##sym		\
+	__attribute__((section("__ksymtab" sec)))			\
+	= { (unsigned long)&sym, __kstrtab_##sym, __CRC_SYMBOL(sym) }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#137: FILE: include/linux/module.h:170:
+#define __EXPORT_SYMBOL(sym, sec)					\
+	extern unsigned long __crc_##sym __attribute__((weak));		\
+	static const char __kstrtab_##sym[]				\
+	__attribute__((section("__ksymtab_strings")))			\
+	= MODULE_SYMBOL_PREFIX #sym;					\
+	static const struct kernel_symbol __ksymtab_##sym		\
+	__attribute__((section("__ksymtab" sec)))			\
+	= { (unsigned long)&sym, __kstrtab_##sym, __CRC_SYMBOL(sym) }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#138: FILE: include/linux/module.h:171:
+	extern unsigned long __crc_##sym __attribute__((weak));		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab_strings") over __attribute__((section("__ksymtab_strings")))
#140: FILE: include/linux/module.h:173:
+	__attribute__((section("__ksymtab_strings")))			\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#141: FILE: include/linux/module.h:174:
+	__attribute__((section("__ksymtab_strings")))			\
+	= MODULE_SYMBOL_PREFIX #sym;					\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab" sec) over __attribute__((section("__ksymtab" sec)))
#143: FILE: include/linux/module.h:176:
+	__attribute__((section("__ksymtab" sec)))			\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#144: FILE: include/linux/module.h:177:
+	__attribute__((section("__ksymtab" sec)))			\
+	= { (unsigned long)&sym, __kstrtab_##sym, __CRC_SYMBOL(sym) }

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#202: FILE: kernel/module.c:745:
+	num_versions = sechdrs[versindex].sh_size/sizeof(versions[0]);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: kernel/module.c:762:
+		printk("%s: no version for \"%s\" found: kernel tainted.\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#253: FILE: kernel/module.c:798:
+				   &ksg->syms[symidx])
+		    || !use_module(mod, ksg->owner))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#264: FILE: kernel/module.c:1142:
+				  "__vermagic") == 0
+			   && (sechdrs[i].sh_flags & SHF_ALLOC)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#276: FILE: kernel/module.c:1150:
+		if (strcmp(secstrings+sechdrs[i].sh_name, "__versions") == 0
 		                     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#277: FILE: kernel/module.c:1151:
+		if (strcmp(secstrings+sechdrs[i].sh_name, "__versions") == 0
+		    && (sechdrs[i].sh_flags & SHF_ALLOC)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: kernel/module.c:1178:
+           Otherwise, if versindex is set, module symbole versions are$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#293: FILE: kernel/module.c:1178:
+	/* This is allowed: modprobe --force will invalidate it.
+           Otherwise, if versindex is set, module symbole versions are

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: kernel/module.c:1179:
+           used instead. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#294: FILE: kernel/module.c:1179:
+           used instead. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#301: FILE: kernel/module.c:1185:
+	} else if (strcmp((char *)sechdrs[vmagindex].sh_addr, vermagic) != 0
+		   && !versindex) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000397073.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 11 warnings, 10 checks, 273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000397073.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
