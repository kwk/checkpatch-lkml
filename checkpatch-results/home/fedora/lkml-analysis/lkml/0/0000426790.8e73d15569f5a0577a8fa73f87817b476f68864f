ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#50: 
--- a/drivers/scsi/hosts.c	Fri Oct  4 08:05:55 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: drivers/scsi/hosts.c:54:
+struct Scsi_Device_Template * scsi_devicelist;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device_Template>
#99: FILE: drivers/scsi/hosts.c:54:
+struct Scsi_Device_Template * scsi_devicelist;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: drivers/scsi/hosts.c:65:
+ * ^I0 on Success / 1 on Failure$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#115: FILE: drivers/scsi/hosts.c:67:
+int shost_tp_for_each_shost(Scsi_Host_Template *shost_tp, int
+			    (*callback)(struct Scsi_Host *shost))
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#115: FILE: drivers/scsi/hosts.c:67:
+int shost_tp_for_each_shost(Scsi_Host_Template *shost_tp, int

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#116: FILE: drivers/scsi/hosts.c:68:
+			    (*callback)(struct Scsi_Host *shost))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: drivers/scsi/hosts.c:91:
+ * @shost: $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: drivers/scsi/hosts.c:92:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: drivers/scsi/hosts.c:94:
+ * ^IThis is the default case for the release function.  It should do$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: drivers/scsi/hosts.c:95:
+ * ^Ithe right thing for most correctly written host adapters.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: drivers/scsi/hosts.c:112:
+ * ^I0 on Success / 1 on Failure$

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#181: FILE: drivers/scsi/hosts.c:117:
+	Scsi_Device *sdev;

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#183: FILE: drivers/scsi/hosts.c:119:
+	Scsi_Cmnd *scmd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: drivers/scsi/hosts.c:132:
+^Ifor (sdev = shost->host_queue; sdev; sdev = sdev->next) $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#208: FILE: drivers/scsi/hosts.c:144:
+				printk(KERN_ERR "SCSI device not inactive"

WARNING:SPLIT_STRING: quoted string split across lines
#209: FILE: drivers/scsi/hosts.c:145:
+				printk(KERN_ERR "SCSI device not inactive"
+				       "- rq_status=%d, target=%d, pid=%ld,"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#210: FILE: drivers/scsi/hosts.c:146:
+				       "- rq_status=%d, target=%d, pid=%ld,"
+				       "state=%d, owner=%d.\n",

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#218: FILE: drivers/scsi/hosts.c:154:
+						if (scmd->request->rq_status ==

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#222: FILE: drivers/scsi/hosts.c:158:
+				printk(KERN_ERR "Device busy???\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#233: FILE: drivers/scsi/hosts.c:169:
+					RQ_SCSI_DISCONNECTING;	/* Mark as
+								   busy */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#233: FILE: drivers/scsi/hosts.c:169:
+								   busy */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#294: FILE: drivers/scsi/hosts.c:185:
+			printk(KERN_ERR "Attached usage count = %d\n",

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#311: FILE: drivers/scsi/hosts.c:202:
+		if (sdev->inquiry)
+			kfree(sdev->inquiry);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#317: FILE: drivers/scsi/hosts.c:208:
+	if (shost->hostt->release)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#319: FILE: drivers/scsi/hosts.c:210:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Name>
#336: FILE: drivers/scsi/hosts.c:227:
+	Scsi_Host_Name *shost_name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: drivers/scsi/hosts.c:246:
+		DECLARE_MUTEX_LOCKED(sem);
+		shost->eh_notify = &sem;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: drivers/scsi/hosts.c:271:
+ * ^IPointer to a new Scsi_Host_Name$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#390: FILE: drivers/scsi/hosts.c:281:
+		printk(KERN_ERR "%s: out of memory at line %d.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#391: FILE: drivers/scsi/hosts.c:282:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#397: FILE: drivers/scsi/hosts.c:288:
+		printk(KERN_ERR "%s: out of memory at line %d.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#398: FILE: drivers/scsi/hosts.c:289:
+		       __FUNCTION__, __LINE__);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: drivers/scsi/hosts.c:309:
+ * ^IWe call this when we come across a new host adapter. We only do$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: drivers/scsi/hosts.c:310:
+ * ^Ithis once we are 100% sure that we want to use this host adapter -$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: drivers/scsi/hosts.c:311:
+ * ^Iit is a pain to reverse this, so we try to avoid it $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: drivers/scsi/hosts.c:311:
+ * ^Iit is a pain to reverse this, so we try to avoid it $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: drivers/scsi/hosts.c:314:
+ * ^IPointer to a new Scsi_Host$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#427: FILE: drivers/scsi/hosts.c:317:
+struct Scsi_Host * scsi_register(Scsi_Host_Template *shost_tp, int xtr_bytes)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*shost)...) over kmalloc(sizeof(struct Scsi_Host)...)
#526: FILE: drivers/scsi/hosts.c:332:
+	shost = kmalloc(sizeof(struct Scsi_Host) + xtr_bytes, gfp_mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#528: FILE: drivers/scsi/hosts.c:334:
+		printk(KERN_ERR "%s: out of memory.\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#528: FILE: drivers/scsi/hosts.c:334:
+	if (!shost) {
+		printk(KERN_ERR "%s: out of memory.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#528: FILE: drivers/scsi/hosts.c:334:
+		printk(KERN_ERR "%s: out of memory.\n", __FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#567: FILE: drivers/scsi/hosts.c:371:
+	atomic_set(&shost->host_active,0);
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#590: FILE: drivers/scsi/hosts.c:393:
+	printk("%s: %x %x: %d\n", __FUNCTION_ (int)shost,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#590: FILE: drivers/scsi/hosts.c:393:
+	printk("%s: %x %x: %d\n", __FUNCTION_ (int)shost,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#627: FILE: drivers/scsi/hosts.c:407:
+	if (!blk_nohighio)
+	shost->highmem_io = shost_tp->highmem_io;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#659: FILE: drivers/scsi/hosts.c:439:
+		DEVICE_NAME_SIZE-1);
 		                ^

CHECK:SPACING: No space is necessary after a cast
#666: FILE: drivers/scsi/hosts.c:446:
+	kernel_thread((int (*)(void *)) scsi_error_handler, (void *) shost, 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#679: FILE: drivers/scsi/hosts.c:459:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#685: FILE: drivers/scsi/hosts.c:465:
+ * ^I0 on Success / 1 on Failure.$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: drivers/scsi/hosts.c:508:
+				printk(KERN_ERR "scsi: Failure to register"

WARNING:SPLIT_STRING: quoted string split across lines
#729: FILE: drivers/scsi/hosts.c:509:
+				printk(KERN_ERR "scsi: Failure to register"
+				       "low-level scsi driver");

WARNING:MISSING_SPACE: break quoted strings at a space character
#729: FILE: drivers/scsi/hosts.c:509:
+				printk(KERN_ERR "scsi: Failure to register"
+				       "low-level scsi driver");

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#737: FILE: drivers/scsi/hosts.c:517:
+			if(scsi_register(shost_tp, 0)==NULL) {
 			                             ^

ERROR:SPACING: space required before the open parenthesis '('
#737: FILE: drivers/scsi/hosts.c:517:
+			if(scsi_register(shost_tp, 0)==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scsi_register"
#737: FILE: drivers/scsi/hosts.c:517:
+			if(scsi_register(shost_tp, 0)==NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#738: FILE: drivers/scsi/hosts.c:518:
+				printk(KERN_ERR "scsi: register failed.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#753: FILE: drivers/scsi/hosts.c:533:
+				const char *dm_name;
+				if (shost_tp->info) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#753: FILE: drivers/scsi/hosts.c:533:
+				if (shost_tp->info) {
[...]
+				} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#758: FILE: drivers/scsi/hosts.c:538:
+				printk(KERN_INFO "scsi%d : %s\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#762: FILE: drivers/scsi/hosts.c:542:
+				if (shost->select_queue_depths != NULL) {
+					(shost->select_queue_depths) (shost, shost->host_queue);
+				}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shost->select_queue_depths"
#762: FILE: drivers/scsi/hosts.c:542:
+				if (shost->select_queue_depths != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (shost->select_queue_depths)
#763: FILE: drivers/scsi/hosts.c:543:
+					(shost->select_queue_depths) (shost, shost->host_queue);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: drivers/scsi/hosts.c:555:
+^I^I * Next we create the Scsi_Cmnd structures for this host $

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#784: FILE: drivers/scsi/hosts.c:564:
+						if (sdev_tp->attach)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#788: FILE: drivers/scsi/hosts.c:568:
+						if (0 == sdev->has_cmdblocks)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#788: FILE: drivers/scsi/hosts.c:568:
+						if (0 == sdev->has_cmdblocks)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#797: FILE: drivers/scsi/hosts.c:577:
+			if (sdev_tp->finish && sdev_tp->nr_dev) {
+				(*sdev_tp->finish) ();
+			}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#815: FILE: drivers/scsi/hosts.c:595:
+ * ^ISimilarly, this entry point should be called by a loadable module$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#816: FILE: drivers/scsi/hosts.c:596:
+ * ^Iif it is trying to remove a low level scsi driver from the system.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#819: FILE: drivers/scsi/hosts.c:599:
+ * ^I0 on Success / 1 on Failure$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#822: FILE: drivers/scsi/hosts.c:602:
+ * ^Irmmod does not care what we return here the module will be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#823: FILE: drivers/scsi/hosts.c:603:
+ * ^Iremoved.$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#837: FILE: drivers/scsi/hosts.c:617:
+		printk(KERN_INFO "scsi : %d host%s left.\n", registered_shosts,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#844: FILE: drivers/scsi/hosts.c:624:
+	if (!shost_tp->present) {
+		list_del(&shost_tp->shtp_list);
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#853: FILE: drivers/scsi/hosts.c:633:
+
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: drivers/scsi/hosts.c:640:
+ * ^IA pointer to next Scsi_Host in list or NULL.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#892: FILE: drivers/scsi/hosts.c:672:
+ * ^IA pointer to located Scsi_Host or NULL.$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#920: FILE: drivers/scsi/hosts.c:700:
+{
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#925: FILE: drivers/scsi/hosts.c:705:
+	return;
+}

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __exit scsi_shost_hn_release() should probably be void __exit scsi_shost_hn_release(void)
#950: FILE: drivers/scsi/hosts.c:730:
+void __exit scsi_shost_hn_release()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#958: FILE: drivers/scsi/hosts.c:738:
+		if (shn->name)
+			kfree(shn->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: drivers/scsi/hosts.h:60:
+    struct list_head^Ishtp_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: drivers/scsi/hosts.h:316:
+    struct list_head      sh_list;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1027: FILE: drivers/scsi/hosts.h:447:
+extern void scsi_free_host_dev(Scsi_Device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Device *' should also have an identifier name
#1027: FILE: drivers/scsi/hosts.h:447:
+extern void scsi_free_host_dev(Scsi_Device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1028: FILE: drivers/scsi/hosts.h:448:
+extern Scsi_Device * scsi_get_host_dev(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1028: FILE: drivers/scsi/hosts.h:448:
+extern Scsi_Device * scsi_get_host_dev(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1028: FILE: drivers/scsi/hosts.h:448:
+extern Scsi_Device * scsi_get_host_dev(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1033: FILE: drivers/scsi/hosts.h:450:
+extern void scsi_unblock_requests(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1033: FILE: drivers/scsi/hosts.h:450:
+extern void scsi_unblock_requests(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1034: FILE: drivers/scsi/hosts.h:451:
+extern void scsi_block_requests(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1034: FILE: drivers/scsi/hosts.h:451:
+extern void scsi_block_requests(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1035: FILE: drivers/scsi/hosts.h:452:
+extern void scsi_report_bus_reset(struct Scsi_Host *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1035: FILE: drivers/scsi/hosts.h:452:
+extern void scsi_report_bus_reset(struct Scsi_Host *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1035: FILE: drivers/scsi/hosts.h:452:
+extern void scsi_report_bus_reset(struct Scsi_Host *, int);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1044: FILE: drivers/scsi/hosts.h:455:
 typedef struct SHN
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1058: FILE: drivers/scsi/hosts.h:464:
+extern void scsi_proc_shost_mkdir(Scsi_Host_Template *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Host_Template *' should also have an identifier name
#1058: FILE: drivers/scsi/hosts.h:464:
+extern void scsi_proc_shost_mkdir(Scsi_Host_Template *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1059: FILE: drivers/scsi/hosts.h:465:
+extern void scsi_proc_shost_add(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1059: FILE: drivers/scsi/hosts.h:465:
+extern void scsi_proc_shost_add(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1060: FILE: drivers/scsi/hosts.h:466:
+extern void scsi_proc_shost_rm(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1060: FILE: drivers/scsi/hosts.h:466:
+extern void scsi_proc_shost_rm(struct Scsi_Host *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1072: FILE: drivers/scsi/hosts.h:475:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1072: FILE: drivers/scsi/hosts.h:475:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Host_Template *' should also have an identifier name
#1072: FILE: drivers/scsi/hosts.h:475:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1072: FILE: drivers/scsi/hosts.h:475:
+extern struct Scsi_Host * scsi_register(Scsi_Host_Template *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1073: FILE: drivers/scsi/hosts.h:476:
+extern void scsi_unregister(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1073: FILE: drivers/scsi/hosts.h:476:
+extern void scsi_unregister(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1074: FILE: drivers/scsi/hosts.h:477:
+extern void scsi_register_blocked_host(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1074: FILE: drivers/scsi/hosts.h:477:
+extern void scsi_register_blocked_host(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1075: FILE: drivers/scsi/hosts.h:478:
+extern void scsi_deregister_blocked_host(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1075: FILE: drivers/scsi/hosts.h:478:
+extern void scsi_deregister_blocked_host(struct Scsi_Host *);

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#1091: FILE: drivers/scsi/hosts.h:489:
+	shost->host_driverfs_dev.parent=&pdev->dev;
 	                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1091: FILE: drivers/scsi/hosts.h:489:
+	shost->host_driverfs_dev.parent=&pdev->dev;
 	                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1103: FILE: drivers/scsi/hosts.h:496:
+extern void scan_scsis(struct Scsi_Host *, uint, uint, uint, uint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1106: FILE: drivers/scsi/hosts.h:498:
+extern void scsi_mark_host_reset(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1106: FILE: drivers/scsi/hosts.h:498:
+extern void scsi_mark_host_reset(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Device *' should also have an identifier name
#1115: FILE: drivers/scsi/hosts.h:527:
+void  scsi_initialize_queue(Scsi_Device *, struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1115: FILE: drivers/scsi/hosts.h:527:
+void  scsi_initialize_queue(Scsi_Device *, struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1123: FILE: drivers/scsi/hosts.h:538:
+extern struct Scsi_Host *scsi_shost_get_next(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1123: FILE: drivers/scsi/hosts.h:538:
+extern struct Scsi_Host *scsi_shost_get_next(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1124: FILE: drivers/scsi/hosts.h:539:
+extern struct Scsi_Host *scsi_shost_hn_get(unsigned short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned short' should also have an identifier name
#1124: FILE: drivers/scsi/hosts.h:539:
+extern struct Scsi_Host *scsi_shost_hn_get(unsigned short);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1125: FILE: drivers/scsi/hosts.h:540:
+extern void scsi_shost_put(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#1125: FILE: drivers/scsi/hosts.h:540:
+extern void scsi_shost_put(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1126: FILE: drivers/scsi/hosts.h:541:
+extern void scsi_shost_hn_init(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1126: FILE: drivers/scsi/hosts.h:541:
+extern void scsi_shost_hn_init(char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1127: FILE: drivers/scsi/hosts.h:542:
+extern void scsi_shost_hn_release(void);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1153: FILE: drivers/scsi/hosts.h:586:
+        Scsi_Device *sdev;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: drivers/scsi/hosts.h:586:
+        Scsi_Device *sdev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1160: FILE: drivers/scsi/hosts.h:588:
+        for (sdev = shost->host_queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: drivers/scsi/hosts.h:588:
+        for (sdev = shost->host_queue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1161: FILE: drivers/scsi/hosts.h:589:
+            sdev != NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1161: FILE: drivers/scsi/hosts.h:589:
+            sdev != NULL;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#1161: FILE: drivers/scsi/hosts.h:589:
+            sdev != NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: drivers/scsi/hosts.h:590:
+            sdev = sdev->next)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: drivers/scsi/hosts.h:590:
+            sdev = sdev->next)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1163: FILE: drivers/scsi/hosts.h:591:
+                if (sdev->channel == channel && sdev->id == pun$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: drivers/scsi/hosts.h:591:
+                if (sdev->channel == channel && sdev->id == pun$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: drivers/scsi/hosts.h:592:
+                   && sdev->lun ==lun)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1164: FILE: drivers/scsi/hosts.h:592:
+                if (sdev->channel == channel && sdev->id == pun
+                   && sdev->lun ==lun)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: drivers/scsi/hosts.h:592:
+                   && sdev->lun ==lun)$

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#1164: FILE: drivers/scsi/hosts.h:592:
+                   && sdev->lun ==lun)
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1167: FILE: drivers/scsi/hosts.h:594:
+        return sdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: drivers/scsi/hosts.h:594:
+        return sdev;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 84 warnings, 37 checks, 1105 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
