WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> ccache gcc -D__KERNEL__ -I/home/barryn/lsx/kernels/2.4/build/linux-2.4.22-pre10-ac1/include -Wall -Wstrict-prototypes -Wno-trigraphs -Os -fno-strict-aliasing -fno-common -fomit-frame-pointer -pipe -mpreferred-stack-boundary=2 -march=athlon -DMODULE -DMODVERSIONS -include /home/barryn/lsx/kernels/2.4/build/linux-2.4.22-pre10-ac1/include/linux/modversions.h  -nostdinc -iwithprefix include -DKBUILD_BASENAME=firmware_class  -DEXPORT_SYMTAB -c firmware_class.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: Documentation/firmware_class/README:27:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: Documentation/firmware_class/README:38:
+^I  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: Documentation/firmware_class/firmware_sample_driver.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#179: FILE: Documentation/firmware_class/firmware_sample_driver.c:24:
+static char ghost_device[] = "ghost0";

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: Documentation/firmware_class/firmware_sample_driver.c:28:
+	u8 buf[size+1];
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: Documentation/firmware_class/firmware_sample_driver.c:29:
+	u8 buf[size+1];
+	memcpy(buf, firmware, size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: Documentation/firmware_class/firmware_sample_driver.c:31:
+	printk("firmware_sample_driver: firmware: %s\n", buf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: Documentation/firmware_class/firmware_sample_driver.c:37:
+        const struct firmware *fw_entry;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: Documentation/firmware_class/firmware_sample_driver.c:37:
+        const struct firmware *fw_entry;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: Documentation/firmware_class/firmware_sample_driver.c:38:
+	printk("firmware_sample_driver: a ghost device got inserted :)\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: Documentation/firmware_class/firmware_sample_driver.c:40:
+        if(request_firmware(&fw_entry, "sample_driver_fw", ghost_device)!=0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: Documentation/firmware_class/firmware_sample_driver.c:40:
+        if(request_firmware(&fw_entry, "sample_driver_fw", ghost_device)!=0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#195: FILE: Documentation/firmware_class/firmware_sample_driver.c:40:
+        if(request_firmware(&fw_entry, "sample_driver_fw", ghost_device)!=0)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#195: FILE: Documentation/firmware_class/firmware_sample_driver.c:40:
+        if(request_firmware(&fw_entry, "sample_driver_fw", ghost_device)!=0)
                                                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: Documentation/firmware_class/firmware_sample_driver.c:40:
+        if(request_firmware(&fw_entry, "sample_driver_fw", ghost_device)!=0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#197: FILE: Documentation/firmware_class/firmware_sample_driver.c:42:
+		printk(KERN_ERR

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: Documentation/firmware_class/firmware_sample_driver.c:46:
+^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#208: FILE: Documentation/firmware_class/firmware_sample_driver.c:53:
+}
+static void sample_probe_specific(void)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#211: FILE: Documentation/firmware_class/firmware_sample_driver.c:56:
+	 * userspace  directly into the hardware, or via some sysfs file */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#215: FILE: Documentation/firmware_class/firmware_sample_driver.c:60:
+	printk("firmware_sample_driver: a ghost device got inserted :)\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: Documentation/firmware_class/firmware_sample_driver.c:62:
+        if(request_firmware(NULL, "sample_driver_fw", ghost_device)!=0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: Documentation/firmware_class/firmware_sample_driver.c:62:
+        if(request_firmware(NULL, "sample_driver_fw", ghost_device)!=0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#217: FILE: Documentation/firmware_class/firmware_sample_driver.c:62:
+        if(request_firmware(NULL, "sample_driver_fw", ghost_device)!=0)
+	{

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#217: FILE: Documentation/firmware_class/firmware_sample_driver.c:62:
+        if(request_firmware(NULL, "sample_driver_fw", ghost_device)!=0)
                                                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: Documentation/firmware_class/firmware_sample_driver.c:62:
+        if(request_firmware(NULL, "sample_driver_fw", ghost_device)!=0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#219: FILE: Documentation/firmware_class/firmware_sample_driver.c:64:
+		printk(KERN_ERR

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: Documentation/firmware_class/firmware_sample_driver.c:68:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: Documentation/firmware_class/firmware_sample_driver.c:70:
+	 * this point the firmware should be already in the device */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#229: FILE: Documentation/firmware_class/firmware_sample_driver.c:74:
+}
+static void sample_probe_async_cont(const struct firmware *fw, void *context)

ERROR:SPACING: space required before the open brace '{'
#231: FILE: Documentation/firmware_class/firmware_sample_driver.c:76:
+	if(!fw){

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: Documentation/firmware_class/firmware_sample_driver.c:76:
+	if(!fw){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#232: FILE: Documentation/firmware_class/firmware_sample_driver.c:77:
+		printk(KERN_ERR

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#237: FILE: Documentation/firmware_class/firmware_sample_driver.c:82:
+	printk("firmware_sample_driver: device pointer \"%s\"\n",

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#241: FILE: Documentation/firmware_class/firmware_sample_driver.c:86:
+}
+static void sample_probe_async(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: Documentation/firmware_class/firmware_sample_driver.c:90:
+	int error;
+	error = request_firmware_nowait (THIS_MODULE,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: Documentation/firmware_class/firmware_sample_driver.c:90:
+	error = request_firmware_nowait (THIS_MODULE,

ERROR:SPACING: space required before the open brace '{'
#249: FILE: Documentation/firmware_class/firmware_sample_driver.c:94:
+	if(error){

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: Documentation/firmware_class/firmware_sample_driver.c:94:
+	if(error){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: Documentation/firmware_class/firmware_sample_driver.c:95:
+^I^Iprintk(KERN_ERR $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#250: FILE: Documentation/firmware_class/firmware_sample_driver.c:95:
+		printk(KERN_ERR 

WARNING:SPLIT_STRING: quoted string split across lines
#252: FILE: Documentation/firmware_class/firmware_sample_driver.c:97:
+		       "firmware_sample_driver:"
+		       " request_firmware_nowait failed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#263: FILE: Documentation/firmware_class/firmware_sample_driver.c:108:
+	 * sample probe functions here */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#269: FILE: Documentation/firmware_class/firmware_sample_driver.c:114:
+}
+static void __exit sample_exit(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#273: FILE: Documentation/firmware_class/firmware_sample_driver.c:118:
+module_init (sample_init);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#274: FILE: Documentation/firmware_class/firmware_sample_driver.c:119:
+module_exit (sample_exit);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#282: FILE: Documentation/firmware_class/hotplug-script:2:
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: Documentation/firmware_class/hotplug-script:4:
+# $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#301: FILE: include/linux/firmware.h:1:
+#ifndef _LINUX_FIRMWARE_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: include/linux/firmware.h:5:
+#define FIRMWARE_NAME_MAX 30 $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#310: FILE: include/linux/firmware.h:10:
+};
+int request_firmware (const struct firmware **fw, const char *name,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#310: FILE: include/linux/firmware.h:10:
+int request_firmware (const struct firmware **fw, const char *name,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#312: FILE: include/linux/firmware.h:12:
+int request_firmware_nowait (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#312: FILE: include/linux/firmware.h:12:
+int request_firmware_nowait (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#318: FILE: include/linux/firmware.h:18:
+void release_firmware (const struct firmware *fw);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#319: FILE: include/linux/firmware.h:19:
+void register_firmware (const char *name, const u8 *data, size_t size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: lib/firmware_class.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: lib/firmware_class.c:13:
+        kernel/kmod.c$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#367: FILE: lib/firmware_class.c:13:
+/*
+        kernel/kmod.c

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: lib/firmware_class.c:14:
+        Kirk Petersen$

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: lib/firmware_class.c:16:
+        Reorganized not to be a daemon by Adam Richter, with guidance$

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: lib/firmware_class.c:17:
+        from Greg Zornetzer.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: lib/firmware_class.c:19:
+        Modified to avoid chroot and file sharing problems.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: lib/firmware_class.c:20:
+        Mikael Pettersson$

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: lib/firmware_class.c:22:
+        Limit the concurrent number of kmod modprobes to catch loops from$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: lib/firmware_class.c:23:
+        "modprobe needs a service that is in a module".$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: lib/firmware_class.c:24:
+        Keith Owens <kaos@ocs.com.au> December 1999$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: lib/firmware_class.c:26:
+        Unblock all signals when we exec a usermode process.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: lib/firmware_class.c:27:
+        Shuu Yamaguchi <shuu@wondernetworkresources.com> December 2000$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: lib/firmware_class.c:60:
+     printk(KERN_ERR  "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#414: FILE: lib/firmware_class.c:60:
+     printk(KERN_ERR  "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: lib/firmware_class.c:60:
+     printk(KERN_ERR  "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)
                                            ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#414: FILE: lib/firmware_class.c:60:
+     printk(KERN_ERR  "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)
                                                                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#414: FILE: lib/firmware_class.c:60:
+     printk(KERN_ERR  "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: lib/firmware_class.c:62:
+     printk(KERN_WARNING "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#416: FILE: lib/firmware_class.c:62:
+     printk(KERN_WARNING "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#416: FILE: lib/firmware_class.c:62:
+     printk(KERN_WARNING "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)
                                               ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#416: FILE: lib/firmware_class.c:62:
+     printk(KERN_WARNING "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)
                                                                       ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#416: FILE: lib/firmware_class.c:62:
+     printk(KERN_WARNING "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: lib/firmware_class.c:64:
+     printk(KERN_DEBUG "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#418: FILE: lib/firmware_class.c:64:
+     printk(KERN_DEBUG "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#418: FILE: lib/firmware_class.c:64:
+     printk(KERN_DEBUG "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)
                                             ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#418: FILE: lib/firmware_class.c:64:
+     printk(KERN_DEBUG "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)
                                                                     ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#418: FILE: lib/firmware_class.c:64:
+     printk(KERN_DEBUG "%s:%s: " format "\n",__FILE__, __FUNCTION__ , ## arg)

CHECK:SPACING: No space is necessary after a cast
#443: FILE: lib/firmware_class.c:89:
+	if (!(envp = (char **) kmalloc(20 * sizeof (char *), GFP_KERNEL))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: lib/firmware_class.c:89:
+	if (!(envp = (char **) kmalloc(20 * sizeof (char *), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#443: FILE: lib/firmware_class.c:89:
+	if (!(envp = (char **) kmalloc(20 * sizeof (char *), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#443: FILE: lib/firmware_class.c:89:
+	if (!(envp = (char **) kmalloc(20 * sizeof (char *), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#447: FILE: lib/firmware_class.c:93:
+	if (!(buf = kmalloc(256, GFP_KERNEL))) {

ERROR:SPACING: exactly one space required after that #ifdef
#462: FILE: lib/firmware_class.c:108:
+#ifdef  DEBUG

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#470: FILE: lib/firmware_class.c:116:
+		scratch += snprintf(scratch, FIRMWARE_NAME_MAX+25,
 		                                              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#486: FILE: lib/firmware_class.c:132:
+	if (retval) {
+		printk("call_usermodehelper return %d\n", retval);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#487: FILE: lib/firmware_class.c:133:
+		printk("call_usermodehelper return %d\n", retval);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: lib/firmware_class.c:168:
+ *  $

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#528: FILE: lib/firmware_class.c:174:
+	loading_timeout = simple_strtol(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: lib/firmware_class.c:183:
+	struct firmware_priv *fw_priv = data;
+	return sprintf(buf, "%d\n", fw_priv->loading);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: lib/firmware_class.c:189:
+ *^IThe relevant values are: $

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#556: FILE: lib/firmware_class.c:202:
+	fw_priv->loading = simple_strtol(buf, NULL, 10);

WARNING:MEMORY_BARRIER: memory barrier without comment
#561: FILE: lib/firmware_class.c:207:
+		wmb();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#592: FILE: lib/firmware_class.c:238:
+	*start = (void*)count;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#595: FILE: lib/firmware_class.c:241:
+}
+static int

ERROR:SPACING: space required before the open parenthesis '('
#603: FILE: lib/firmware_class.c:249:
+	if((min_size % PAGE_SIZE) == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#609: FILE: lib/firmware_class.c:255:
+		printk(KERN_ERR "%s: unable to alloc buffer\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#609: FILE: lib/firmware_class.c:255:
+		printk(KERN_ERR "%s: unable to alloc buffer\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#620: FILE: lib/firmware_class.c:266:
+	BUG_ON(min_size > fw_priv->alloc_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#643: FILE: lib/firmware_class.c:289:
+		printk("%s: retval:%d\n", __FUNCTION__, retval);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#643: FILE: lib/firmware_class.c:289:
+		printk("%s: retval:%d\n", __FUNCTION__, retval);

CHECK:SPACING: No space is necessary after a cast
#657: FILE: lib/firmware_class.c:303:
+	struct firmware_priv *fw_priv = (struct firmware_priv *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#658: FILE: lib/firmware_class.c:304:
+	struct firmware_priv *fw_priv = (struct firmware_priv *) data;
+	fw_priv->abort = 1;

WARNING:MEMORY_BARRIER: memory barrier without comment
#659: FILE: lib/firmware_class.c:305:
+	wmb();

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#662: FILE: lib/firmware_class.c:308:
+}
+static int

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#667: FILE: lib/firmware_class.c:313:
+	struct firmware_priv *fw_priv = kmalloc(sizeof (struct firmware_priv),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fw_priv)...) over kmalloc(sizeof (struct firmware_priv)...)
#667: FILE: lib/firmware_class.c:313:
+	struct firmware_priv *fw_priv = kmalloc(sizeof (struct firmware_priv),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#674: FILE: lib/firmware_class.c:320:
+	memset(fw_priv, 0, sizeof (*fw_priv));

CHECK:SPACING: No space is necessary after a cast
#679: FILE: lib/firmware_class.c:325:
+	fw_priv->timeout.data = (u_long) fw_priv;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#706: FILE: lib/firmware_class.c:352:
+	fw_priv->fw = kmalloc(sizeof (struct firmware), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fw_priv->fw)...) over kmalloc(sizeof (struct firmware)...)
#706: FILE: lib/firmware_class.c:352:
+	fw_priv->fw = kmalloc(sizeof (struct firmware), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#708: FILE: lib/firmware_class.c:354:
+		printk(KERN_ERR "%s: kmalloc(struct firmware) failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#709: FILE: lib/firmware_class.c:355:
+		       __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#713: FILE: lib/firmware_class.c:359:
+	memset(fw_priv->fw, 0, sizeof (*fw_priv->fw));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#728: FILE: lib/firmware_class.c:374:
+}
+static void

ERROR:TRAILING_WHITESPACE: trailing whitespace
#736: FILE: lib/firmware_class.c:382:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: lib/firmware_class.c:447:
+ * $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#813: FILE: lib/firmware_class.c:459:
+	 * noop */

WARNING:LINE_SPACING: Missing a blank line after declarations
#831: FILE: lib/firmware_class.c:477:
+	const struct firmware *fw;
+	if (!arg)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#855: FILE: lib/firmware_class.c:501:
+request_firmware_nowait(

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#860: FILE: lib/firmware_class.c:506:
+	struct firmware_work *fw_work = kmalloc(sizeof (struct firmware_work),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fw_work)...) over kmalloc(sizeof (struct firmware_work)...)
#860: FILE: lib/firmware_class.c:506:
+	struct firmware_work *fw_work = kmalloc(sizeof (struct firmware_work),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#898: FILE: lib/firmware_class.c:544:
+}
+static void __exit

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#908: FILE: lib/firmware_class.c:554:
+EXPORT_SYMBOL(release_firmware);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#909: FILE: lib/firmware_class.c:555:
+EXPORT_SYMBOL(request_firmware);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#910: FILE: lib/firmware_class.c:556:
+EXPORT_SYMBOL(request_firmware_nowait);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#911: FILE: lib/firmware_class.c:557:
+EXPORT_SYMBOL(register_firmware);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 68 warnings, 19 checks, 824 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000349134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
