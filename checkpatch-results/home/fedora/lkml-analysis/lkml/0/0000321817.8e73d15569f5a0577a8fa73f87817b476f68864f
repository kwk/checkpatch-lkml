WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> +	FIX_KMAP_BEGIN = __virt_to_fix(__fix_to_virt(FIX_WP_TEST+1) & PAGE_MASK) - PAGE_MMUCOUNT + 1,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kmap_atomic', this function's name, in a string
#66: FILE: arch/i386/mm/highmem.c:48:
+	pr_debug("kmap_atomic(%d) has pfn 0x%lx, idx %d, vaddr 0x%lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: arch/i386/mm/highmem.c:49:
+	pr_debug("kmap_atomic(%d) has pfn 0x%lx, idx %d, vaddr 0x%lx\n",
+		type, page_to_pfn(page), idx, vaddr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#68: FILE: arch/i386/mm/highmem.c:50:
+	BUG_ON(vaddr % PAGE_SIZE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#77: FILE: arch/i386/mm/highmem.c:61:
+	BUG_ON(pmd_none(*pmd));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: arch/i386/mm/highmem.c:76:
+		pr_debug("%s: mapping pfn 0x%lx at vaddr 0x%lx\n",
+				__FUNCTION__, pfn, vaddr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#88: FILE: arch/i386/mm/highmem.c:76:
+				__FUNCTION__, pfn, vaddr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kmap_atomic', this function's name, in a string
#90: FILE: arch/i386/mm/highmem.c:78:
+			pr_debug("%s: skipping already-set kmap_atomic() pte\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: arch/i386/mm/highmem.c:79:
+			pr_debug("%s: skipping already-set kmap_atomic() pte\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#91: FILE: arch/i386/mm/highmem.c:79:
+				__FUNCTION__);

CHECK:BRACES: Unbalanced braces around else statement
#111: FILE: arch/i386/mm/highmem.c:120:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: arch/i386/mm/highmem.c:122:
+		pr_debug("%s: skipping already-set kmap_atomic() pte\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#113: FILE: arch/i386/mm/highmem.c:122:
+				__FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#125: FILE: arch/i386/mm/highmem.c:138:
+	BUG_ON(vaddr >= VMALLOC_START && vaddr < __VMALLOC_END);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#131: FILE: arch/i386/mm/highmem.c:144:
+	BUG_ON(pmd_none(*pmd));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kmap_atomic_sg', this function's name, in a string
#145: FILE: arch/i386/mm/highmem.c:162:
+	pr_debug("kmap_atomic_sg(%d) has idx %d, vaddr 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: arch/i386/mm/highmem.c:163:
+	pr_debug("kmap_atomic_sg(%d) has idx %d, vaddr 0x%lx\n",
+		type, idx, vaddr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#147: FILE: arch/i386/mm/highmem.c:164:
+	BUG_ON(vaddr % PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: arch/i386/mm/highmem.c:170:
+	BUG_ON(pmd_none(*pmd));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: arch/i386/mm/highmem.c:185:
+		pr_debug("%s: mapping pfn 0x%lx at vaddr 0x%lx\n",
+				__FUNCTION__, pfn, vaddr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#162: FILE: arch/i386/mm/highmem.c:185:
+				__FUNCTION__, pfn, vaddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: include/asm-generic/rmap.h:61:
+	pr_debug("%s: installing pte page at pfn 0x%lx at uvaddr 0x%lx\n",
+			__FUNCTION__, page_to_pfn(page), page->index);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#206: FILE: include/asm-generic/rmap.h:61:
+			__FUNCTION__, page_to_pfn(page), page->index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: include/asm-generic/rmap.h:81:
+	pr_debug("%s: removing pte page at pfn 0x%lx at uvaddr 0x%lx\n",
+			__FUNCTION__, page_to_pfn(page), page->index);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#215: FILE: include/asm-generic/rmap.h:81:
+			__FUNCTION__, page_to_pfn(page), page->index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/asm-generic/rmap.h:134:
+		pr_debug("ptep_to_address() saw ptep held in pfn 0x%lx\n",
+			pfn);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#247: FILE: include/asm-generic/rmap.h:138:
+		vaddr = page->index + PMD_SIZE*(pfn % PAGE_MMUCOUNT)
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#272: FILE: include/asm-i386/fixmap.h:77:
+#define __fixmap_align(x,a)	__virt_to_fix(__fix_to_virt(x) & (a))
                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#282: FILE: include/asm-i386/fixmap.h:108:
+	FIX_KMAP_BEGIN = __fixmap_align(FIX_HIGHMEM_HOLE+1, PAGE_MASK) + 1,
 	                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#283: FILE: include/asm-i386/fixmap.h:109:
+	FIX_KMAP_END = FIX_KMAP_BEGIN + KM_TYPE_NR*NR_CPUS*PAGE_MMUCOUNT - 1,
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#283: FILE: include/asm-i386/fixmap.h:109:
+	FIX_KMAP_END = FIX_KMAP_BEGIN + KM_TYPE_NR*NR_CPUS*PAGE_MMUCOUNT - 1,
 	                                                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#283: FILE: include/asm-i386/fixmap.h:109:
+	FIX_KMAP_END = FIX_KMAP_BEGIN + KM_TYPE_NR*NR_CPUS*PAGE_MMUCOUNT - 1,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: include/asm-i386/fixmap.h:110:
+	FIX_PKMAP_BEGIN = __fixmap_align(FIX_KMAP_END+1, PKMAP_MASK) + 1,
 	                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#285: FILE: include/asm-i386/fixmap.h:111:
+	FIX_PKMAP_END = FIX_PKMAP_BEGIN + LAST_PKMAP*PAGE_MMUCOUNT - 1,
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#311: FILE: include/asm-i386/pgtable.h:85:
+#define VMALLOC_END	((__VMALLOC_END-2*MMUPAGE_SIZE) & PMD_MASK)
                    	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#311: FILE: include/asm-i386/pgtable.h:85:
+#define VMALLOC_END	((__VMALLOC_END-2*MMUPAGE_SIZE) & PMD_MASK)
                    	                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000321817.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 17 warnings, 18 checks, 224 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000321817.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
