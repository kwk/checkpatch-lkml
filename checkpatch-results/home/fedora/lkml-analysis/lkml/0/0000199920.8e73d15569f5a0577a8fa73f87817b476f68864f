WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: drivers/serial/jsm/jsm_neo.c:1:
+/************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: drivers/serial/jsm/jsm_neo.c:10:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: drivers/serial/jsm/jsm_neo.c:12:
+ * but WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED; without even the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: drivers/serial/jsm/jsm_neo.c:13:
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: drivers/serial/jsm/jsm_neo.c:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: drivers/serial/jsm/jsm_neo.c:16:
+ * You should have received a copy of the GNU General Public License $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: drivers/serial/jsm/jsm_neo.c:17:
+ * along with this program; if not, write to the Free Software $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: drivers/serial/jsm/jsm_neo.c:17:
+ * along with this program; if not, write to the Free Software $

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#77: FILE: drivers/serial/jsm/jsm_neo.c:30:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: drivers/serial/jsm/jsm_neo.c:104:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#302: FILE: drivers/serial/jsm/jsm_neo.c:255:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#339: FILE: drivers/serial/jsm/jsm_neo.c:292:
+	if ((qleft = tail - head - 1) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#349: FILE: drivers/serial/jsm/jsm_neo.c:302:
+	if (!(ch->ch_flags & CH_FIFO_ENABLED))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#351: FILE: drivers/serial/jsm/jsm_neo.c:304:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: drivers/serial/jsm/jsm_neo.c:326:
+^Iwhile (total > 0) { $

CHECK:SPACING: No space is necessary after a cast
#389: FILE: drivers/serial/jsm/jsm_neo.c:342:
+		n = min(((u32) total), (RQUEUESIZE - (u32) tail));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#397: FILE: drivers/serial/jsm/jsm_neo.c:350:
+		n = min((u32) n, (u32) 12);

WARNING:MINMAX: min() should probably be min_t(u32, n, 12)
#397: FILE: drivers/serial/jsm/jsm_neo.c:350:
+		n = min((u32) n, (u32) 12);

WARNING:TYPO_SPELLING: 'guarenteed' may be misspelled - perhaps 'guaranteed'?
#412: FILE: drivers/serial/jsm/jsm_neo.c:365:
+		 * Since RX_FIFO_DATA_ERROR was 0, we are guarenteed
 		                                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#437: FILE: drivers/serial/jsm/jsm_neo.c:390:
+	while (1) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#472: FILE: drivers/serial/jsm/jsm_neo.c:425:
+			u8 discard;
+			linestatus = 0;

WARNING:REPEATED_WORD: Possible repeated word: 'way'
#480: FILE: drivers/serial/jsm/jsm_neo.c:433:
+		 * things way way before we got to this point.

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#483: FILE: drivers/serial/jsm/jsm_neo.c:436:
+		 * I hope thats okay with everyone? Yes? Good.
 		          ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: drivers/serial/jsm/jsm_neo.c:439:
+^I^I^Ijsm_printk(READ, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: drivers/serial/jsm/jsm_neo.c:440:
+			jsm_printk(READ, INFO, &ch->ch_bd->pci_dev, 
+				"Queue full, dropping DATA:%x LSR:%x\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#490: FILE: drivers/serial/jsm/jsm_neo.c:443:
+			ch->ch_r_tail = tail = (tail + 1) & RQUEUEMASK;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#496: FILE: drivers/serial/jsm/jsm_neo.c:449:
+		ch->ch_equeue[head] = (u8) linestatus;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: drivers/serial/jsm/jsm_neo.c:451:
+^I^Ijsm_printk(READ, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: drivers/serial/jsm/jsm_neo.c:452:
+		jsm_printk(READ, INFO, &ch->ch_bd->pci_dev, 
+				"DATA/LSR pair: %x %x\n", ch->ch_rqueue[head], ch->ch_equeue[head]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: drivers/serial/jsm/jsm_neo.c:484:
+^I/* No data to write to the UART */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: drivers/serial/jsm/jsm_neo.c:502:
+^I^I^Ijsm_printk(WRITE, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: drivers/serial/jsm/jsm_neo.c:503:
+			jsm_printk(WRITE, INFO, &ch->ch_bd->pci_dev, 
+					"Tx data: %x\n", ch->ch_wqueue[ch->ch_w_head]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: drivers/serial/jsm/jsm_neo.c:515:
+^I^Ireturn; $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#576: FILE: drivers/serial/jsm/jsm_neo.c:529:
+	while (n > 0) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: drivers/serial/jsm/jsm_neo.c:558:
+^Ijsm_printk(MSIGS, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/serial/jsm/jsm_neo.c:559:
+	jsm_printk(MSIGS, INFO, &ch->ch_bd->pci_dev, 
+			"neo_parse_modem: port: %d msignals: %x\n", ch->ch_portnum, msignals);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'neo_parse_modem', this function's name, in a string
#606: FILE: drivers/serial/jsm/jsm_neo.c:559:
+			"neo_parse_modem: port: %d msignals: %x\n", ch->ch_portnum, msignals);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: drivers/serial/jsm/jsm_neo.c:587:
+^Ijsm_printk(MSIGS, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: drivers/serial/jsm/jsm_neo.c:588:
+	jsm_printk(MSIGS, INFO, &ch->ch_bd->pci_dev, 
+			"Port: %d DTR: %d RTS: %d CTS: %d DSR: %d " "RI: %d CD: %d\n",

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#635: FILE: drivers/serial/jsm/jsm_neo.c:588:
+			"Port: %d DTR: %d RTS: %d CTS: %d DSR: %d " "RI: %d CD: %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: drivers/serial/jsm/jsm_neo.c:592:
+^I^I!!((ch->ch_mistat | ch->ch_mostat) & UART_MSR_CTS), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#640: FILE: drivers/serial/jsm/jsm_neo.c:593:
+^I^I!!((ch->ch_mistat | ch->ch_mostat) & UART_MSR_DSR), $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#677: FILE: drivers/serial/jsm/jsm_neo.c:630:
+	for (i = 0; i < 10; i++) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#680: FILE: drivers/serial/jsm/jsm_neo.c:633:
+		if (tmp & 4) {
[...]
+		else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: drivers/serial/jsm/jsm_neo.c:634:
+^I^I^Ijsm_printk(IOCTL, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: drivers/serial/jsm/jsm_neo.c:635:
+			jsm_printk(IOCTL, INFO, &ch->ch_bd->pci_dev, 
+					"Still flushing TX UART... i: %d\n", i);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#683: FILE: drivers/serial/jsm/jsm_neo.c:636:
+			udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#685: FILE: drivers/serial/jsm/jsm_neo.c:638:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#692: FILE: drivers/serial/jsm/jsm_neo.c:645:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#709: FILE: drivers/serial/jsm/jsm_neo.c:662:
+	for (i = 0; i < 10; i++) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#712: FILE: drivers/serial/jsm/jsm_neo.c:665:
+		if (tmp & 2) {
[...]
+		else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#713: FILE: drivers/serial/jsm/jsm_neo.c:666:
+^I^I^Ijsm_printk(IOCTL, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: drivers/serial/jsm/jsm_neo.c:667:
+			jsm_printk(IOCTL, INFO, &ch->ch_bd->pci_dev, 
+					"Still flushing RX UART... i: %d\n", i);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#715: FILE: drivers/serial/jsm/jsm_neo.c:668:
+			udelay(10);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#717: FILE: drivers/serial/jsm/jsm_neo.c:670:
+		}
+		else

WARNING:LINE_SPACING: Missing a blank line after declarations
#734: FILE: drivers/serial/jsm/jsm_neo.c:687:
+		u8 temp = readb(&ch->ch_neo_uart->lcr);
+		writeb((temp & ~UART_LCR_SBC), &ch->ch_neo_uart->lcr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#737: FILE: drivers/serial/jsm/jsm_neo.c:690:
+^I^Ijsm_printk(IOCTL, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: drivers/serial/jsm/jsm_neo.c:691:
+		jsm_printk(IOCTL, INFO, &ch->ch_bd->pci_dev, 
+				"clear break Finishing UART_LCR_SBC! finished: %lx\n", jiffies);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#765: FILE: drivers/serial/jsm/jsm_neo.c:718:
+	while (1) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: drivers/serial/jsm/jsm_neo.c:730:
+^I^Ijsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: drivers/serial/jsm/jsm_neo.c:731:
+		jsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, 
+				"%s:%d isr: %x\n", __FILE__, __LINE__, isr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: drivers/serial/jsm/jsm_neo.c:754:
+^I^I^Ijsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: drivers/serial/jsm/jsm_neo.c:755:
+			jsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, 
+					"Port %d. Got ISR_XONXOFF: cause:%x\n", port, cause);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#812: FILE: drivers/serial/jsm/jsm_neo.c:765:
+				if (brd->channels[port]->ch_flags & CH_STOP) {
+					ch->ch_flags &= ~(CH_STOP);
+				}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: drivers/serial/jsm/jsm_neo.c:768:
+^I^I^I^Ijsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/serial/jsm/jsm_neo.c:769:
+				jsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, 
+						"Port %d. XON detected in incoming data\n", port);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#817: FILE: drivers/serial/jsm/jsm_neo.c:770:
+^I^I^I} $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#818: FILE: drivers/serial/jsm/jsm_neo.c:771:
+			} 
+			else if (cause == UART_17158_XOFF_DETECT) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: drivers/serial/jsm/jsm_neo.c:774:
+^I^I^I^I^Ijsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: drivers/serial/jsm/jsm_neo.c:775:
+					jsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, 
+							"Setting CH_STOP\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: drivers/serial/jsm/jsm_neo.c:777:
+^I^I^I^Ijsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: drivers/serial/jsm/jsm_neo.c:778:
+				jsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, 
+						"Port: %d. XOFF detected in incoming data\n", port);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#854: FILE: drivers/serial/jsm/jsm_neo.c:807:
+^I^Ijsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: drivers/serial/jsm/jsm_neo.c:808:
+		jsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, 
+				"MOD_STAT: sending to parse_modem_sigs\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#878: FILE: drivers/serial/jsm/jsm_neo.c:831:
+^Ijsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: drivers/serial/jsm/jsm_neo.c:832:
+	jsm_printk(INTR, INFO, &ch->ch_bd->pci_dev, 
+			"%s:%d port: %d linestatus: %x\n", __FILE__, __LINE__, port, linestatus);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: drivers/serial/jsm/jsm_neo.c:851:
+^I^Ijsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: drivers/serial/jsm/jsm_neo.c:852:
+		jsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, 
+			"%s:%d Port: %d Got an RX error, need to parse LSR\n",

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#904: FILE: drivers/serial/jsm/jsm_neo.c:857:
+	 * should encapsulate all 3... At least, thats what Exar says.
 	                                         ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#909: FILE: drivers/serial/jsm/jsm_neo.c:862:
+^I^Ijsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: drivers/serial/jsm/jsm_neo.c:863:
+		jsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, 
+			"%s:%d Port: %d. PAR ERR!\n", __FILE__, __LINE__, port);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: drivers/serial/jsm/jsm_neo.c:868:
+^I^Ijsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: drivers/serial/jsm/jsm_neo.c:869:
+		jsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, 
+			"%s:%d Port: %d. FRM ERR!\n", __FILE__, __LINE__, port);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#921: FILE: drivers/serial/jsm/jsm_neo.c:874:
+^I^Ijsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: drivers/serial/jsm/jsm_neo.c:875:
+		jsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, 
+			"%s:%d Port: %d. BRK INTR!\n", __FILE__, __LINE__, port);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#933: FILE: drivers/serial/jsm/jsm_neo.c:886:
+^I^Ijsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: drivers/serial/jsm/jsm_neo.c:887:
+		jsm_printk(INTR, DEBUG, &ch->ch_bd->pci_dev, 
+			"%s:%d Port: %d. Rx Overrun!\n", __FILE__, __LINE__, port);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#945: FILE: drivers/serial/jsm/jsm_neo.c:898:
+	}
+	else if (linestatus & UART_17158_TX_AND_FIFO_CLR) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#976: FILE: drivers/serial/jsm/jsm_neo.c:929:
+		ch->ch_r_head = ch->ch_r_tail = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#977: FILE: drivers/serial/jsm/jsm_neo.c:930:
+		ch->ch_e_head = ch->ch_e_tail = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#978: FILE: drivers/serial/jsm/jsm_neo.c:931:
+		ch->ch_w_head = ch->ch_w_tail = 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#989: FILE: drivers/serial/jsm/jsm_neo.c:942:
+	} else if (ch->ch_custom_speed) {
+			baud = ch->ch_custom_speed;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: drivers/serial/jsm/jsm_neo.c:951:
+^I^I^I^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1003: FILE: drivers/serial/jsm/jsm_neo.c:956:
+^I^I^I^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1008: FILE: drivers/serial/jsm/jsm_neo.c:961:
+^I^I^I^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1013: FILE: drivers/serial/jsm/jsm_neo.c:966:
+^I^I^I^I{ $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iindex >= 0'
#1027: FILE: drivers/serial/jsm/jsm_neo.c:980:
+			if ((iindex >= 0) && (iindex < 4) && (jindex >= 0) && (jindex < 16))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iindex < 4'
#1027: FILE: drivers/serial/jsm/jsm_neo.c:980:
+			if ((iindex >= 0) && (iindex < 4) && (jindex >= 0) && (jindex < 16))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jindex >= 0'
#1027: FILE: drivers/serial/jsm/jsm_neo.c:980:
+			if ((iindex >= 0) && (iindex < 4) && (jindex >= 0) && (jindex < 16))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jindex < 16'
#1027: FILE: drivers/serial/jsm/jsm_neo.c:980:
+			if ((iindex >= 0) && (iindex < 4) && (jindex >= 0) && (jindex < 16))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1027: FILE: drivers/serial/jsm/jsm_neo.c:980:
+			if ((iindex >= 0) && (iindex < 4) && (jindex >= 0) && (jindex < 16))
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1029: FILE: drivers/serial/jsm/jsm_neo.c:982:
+			else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: drivers/serial/jsm/jsm_neo.c:983:
+^I^I^I^Ijsm_printk(IOCTL, DEBUG, &ch->ch_bd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: drivers/serial/jsm/jsm_neo.c:984:
+				jsm_printk(IOCTL, DEBUG, &ch->ch_bd->pci_dev, 
+					"baud indices were out of range (%d)(%d)",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: drivers/serial/jsm/jsm_neo.c:1002:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: drivers/serial/jsm/jsm_neo.c:1007:
+^Iif (ch->ch_c_cflag & CMSPAR) $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1061: FILE: drivers/serial/jsm/jsm_neo.c:1014:
+	switch (ch->ch_c_cflag & CSIZE) {
+		case CS5:
[...]
+		case CS6:
[...]
+		case CS7:
[...]
+		case CS8:
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: braces {} should be used on all arms of this statement
#1106: FILE: drivers/serial/jsm/jsm_neo.c:1059:
+	if (ch->ch_c_cflag & CRTSCTS)
[...]
+	else if (ch->ch_c_iflag & IXON) {
[...]
+	else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->ch_startc == __DISABLED_CHAR'
#1110: FILE: drivers/serial/jsm/jsm_neo.c:1063:
+		if ((ch->ch_startc == __DISABLED_CHAR) || (ch->ch_stopc == __DISABLED_CHAR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->ch_stopc == __DISABLED_CHAR'
#1110: FILE: drivers/serial/jsm/jsm_neo.c:1063:
+		if ((ch->ch_startc == __DISABLED_CHAR) || (ch->ch_stopc == __DISABLED_CHAR))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1115: FILE: drivers/serial/jsm/jsm_neo.c:1068:
+	}
+	else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1118: FILE: drivers/serial/jsm/jsm_neo.c:1071:
+	if (ch->ch_c_cflag & CRTSCTS)
[...]
+	else if (ch->ch_c_iflag & IXOFF) {
[...]
+	else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->ch_startc == __DISABLED_CHAR'
#1122: FILE: drivers/serial/jsm/jsm_neo.c:1075:
+		if ((ch->ch_startc == __DISABLED_CHAR) || (ch->ch_stopc == __DISABLED_CHAR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->ch_stopc == __DISABLED_CHAR'
#1122: FILE: drivers/serial/jsm/jsm_neo.c:1075:
+		if ((ch->ch_startc == __DISABLED_CHAR) || (ch->ch_stopc == __DISABLED_CHAR))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1126: FILE: drivers/serial/jsm/jsm_neo.c:1079:
+^I} $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1127: FILE: drivers/serial/jsm/jsm_neo.c:1080:
+	} 
+	else

WARNING:RETURN_VOID: void function return statements are not generally useful
#1144: FILE: drivers/serial/jsm/jsm_neo.c:1097:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#1153: FILE: drivers/serial/jsm/jsm_neo.c:1106:
+	struct jsm_board *brd = (struct jsm_board *) voidbrd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: drivers/serial/jsm/jsm_neo.c:1129:
+^Ijsm_printk(INTR, INFO, &brd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: drivers/serial/jsm/jsm_neo.c:1130:
+	jsm_printk(INTR, INFO, &brd->pci_dev, 
+		"%s:%d uart_poll: %x\n", __FILE__, __LINE__, uart_poll);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1180: FILE: drivers/serial/jsm/jsm_neo.c:1133:
+^I^Ijsm_printk(INTR, INFO, &brd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: drivers/serial/jsm/jsm_neo.c:1134:
+		jsm_printk(INTR, INFO, &brd->pci_dev, 
+			"Kernel interrupted to me, but no pending interrupts...\n");

ERROR:SPACING: space required before the open brace '{'
#1191: FILE: drivers/serial/jsm/jsm_neo.c:1144:
+	while (((uart_poll & 0xff) != 0) && (outofloop_count < 0xff)){

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1192: FILE: drivers/serial/jsm/jsm_neo.c:1145:
+	while (((uart_poll & 0xff) != 0) && (outofloop_count < 0xff)){
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1206: FILE: drivers/serial/jsm/jsm_neo.c:1159:
+^I^Ijsm_printk(INTR, INFO, &brd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: drivers/serial/jsm/jsm_neo.c:1160:
+		jsm_printk(INTR, INFO, &brd->pci_dev, 
+		"%s:%d port: %x type: %x\n", __FILE__, __LINE__, port, type);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: drivers/serial/jsm/jsm_neo.c:1167:
+^I^I^Ijsm_printk(INTR, ERR, &brd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: drivers/serial/jsm/jsm_neo.c:1168:
+			jsm_printk(INTR, ERR, &brd->pci_dev, 
+				"Interrupt with no type! port: %d\n", port);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1221: FILE: drivers/serial/jsm/jsm_neo.c:1174:
+		switch (type) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1225: FILE: drivers/serial/jsm/jsm_neo.c:1178:
+			 * RXRDY Time-out is cleared by reading data in the
+			* RX FIFO until it falls below the trigger level.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1226: FILE: drivers/serial/jsm/jsm_neo.c:1179:
+			* RX FIFO until it falls below the trigger level.
+			 */

WARNING:TYPO_SPELLING: 'occassionally' may be misspelled - perhaps 'occasionally'?
#1259: FILE: drivers/serial/jsm/jsm_neo.c:1212:
+			 * it seems to be occassionally wrong. Instead of TX, which
 			                  ^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1279: FILE: drivers/serial/jsm/jsm_neo.c:1232:
+^I^I^Ijsm_printk(INTR, ERR, &brd->pci_dev, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1280: FILE: drivers/serial/jsm/jsm_neo.c:1233:
+			jsm_printk(INTR, ERR, &brd->pci_dev, 
+				"%s:%d Unknown Interrupt type: %x\n", __FILE__, __LINE__, type);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1299: FILE: drivers/serial/jsm/jsm_neo.c:1252:
+	u8 tmp = readb(&ch->ch_neo_uart->ier);
+	tmp &= ~(UART_IER_RDI);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1303: FILE: drivers/serial/jsm/jsm_neo.c:1256:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1312: FILE: drivers/serial/jsm/jsm_neo.c:1265:
+	u8 tmp = readb(&ch->ch_neo_uart->ier);
+	tmp |= (UART_IER_RDI);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1319: FILE: drivers/serial/jsm/jsm_neo.c:1272:
+	unsigned char xdata;
+	if (!ch)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1358: FILE: drivers/serial/jsm/jsm_neo.c:1311:
+	writeb((UART_FCR_ENABLE_FIFO|UART_FCR_CLEAR_RCVR|UART_FCR_CLEAR_XMIT), &ch->ch_neo_uart->isr_fcr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1358: FILE: drivers/serial/jsm/jsm_neo.c:1311:
+	writeb((UART_FCR_ENABLE_FIFO|UART_FCR_CLEAR_RCVR|UART_FCR_CLEAR_XMIT), &ch->ch_neo_uart->isr_fcr);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1358: FILE: drivers/serial/jsm/jsm_neo.c:1311:
+	writeb((UART_FCR_ENABLE_FIFO|UART_FCR_CLEAR_RCVR|UART_FCR_CLEAR_XMIT), &ch->ch_neo_uart->isr_fcr);
 	                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1387: FILE: drivers/serial/jsm/jsm_neo.c:1340:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1387: FILE: drivers/serial/jsm/jsm_neo.c:1340:
+ $

CHECK:BRACES: braces {} should be used on all arms of this statement
#1389: FILE: drivers/serial/jsm/jsm_neo.c:1342:
+	if (!(lsr & UART_LSR_TEMT))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1391: FILE: drivers/serial/jsm/jsm_neo.c:1344:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1411: FILE: drivers/serial/jsm/jsm_neo.c:1364:
+		u8 temp = readb(&ch->ch_neo_uart->lcr);
+		writeb((temp | UART_LCR_SBC), &ch->ch_neo_uart->lcr);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199920.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 56 errors, 23 warnings, 67 checks, 1402 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199920.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
