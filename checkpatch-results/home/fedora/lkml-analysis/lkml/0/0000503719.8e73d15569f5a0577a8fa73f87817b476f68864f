WARNING:TYPO_SPELLING: 'perfomance' may be misspelled - perhaps 'performance'?
#98: 
big lock impact the scheduler perfomance in a significant way on
                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#129: 
static inline int goodness(struct task_struct * p, int this_cpu, struct mm_struct *this_mm)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
#ifdef CONFIG_SMP

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#155: 
# schedcnt -- cpuhog --ntasks N

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#214: 
#ifdef CONFIG_SMP

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#216: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#265: 
#ifdef CONFIG_SMP

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#267: 
#endif  /* #ifdef CONFIG_SMP */

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#330: 
#ifdef CONFIG_SMP

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#334: 
#endif  /* #ifdef CONFIG_SMP */

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#372: 
The first part of the test is to show the the proposed scheduler does not

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#392: 
# schedcnt --ttime 12 -- lat-sched --ttime 20 --size S --ntasks N

WARNING:TYPO_SPELLING: 'perfom' may be misspelled - perhaps 'perform'?
#397: 
The new scheduler without the "CPU history" evaluation perfom exactly
                                                       ^^^^^^

WARNING:TYPO_SPELLING: 'sufficent' may be misspelled - perhaps 'sufficient'?
#398: 
like the old one and the very small noise on the measure is sufficent
                                                            ^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#412: 
# shcedcnt --ttime 30 -- cpuhog --ttime 40 --size S --ntasks N

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#433: 
# schedcnt --ttime 12 -- lat-sched --ttime 20 --ntasks N

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#457: 
# schedcnt --time 4 -- cpuhog --time 8 --ntasks 2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#531: 
# schedcnt --time 4 -- cpuhog --time 8 --ntasks 2

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#678: FILE: Makefile:4:
+EXTRAVERSION = xsched
 ^^^^^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#703: FILE: arch/i386/kernel/smpboot.c:774:
+static void __init do_boot_cpu (int apicid)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#722: FILE: arch/i386/kernel/smpboot.c:808:
+	idle->thread.eip = (unsigned long) start_secondary;

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#743: FILE: include/linux/sched.h:18:
+#include <asm/atomic.h>

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#809: FILE: include/linux/sched.h:495:
+    alloc_lock:		SPIN_LOCK_UNLOCKED,				\
               ^

WARNING:INDENTED_LABEL: labels should not be indented
#809: FILE: include/linux/sched.h:495:
+    alloc_lock:		SPIN_LOCK_UNLOCKED,				\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#812: FILE: include/linux/sched.h:498:
+	proclist_cpu:	LIST_HEAD_INIT(tsk.proclist_cpu),			\
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#812: FILE: include/linux/sched.h:498:
+	proclist_cpu:	LIST_HEAD_INIT(tsk.proclist_cpu),			\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#820: FILE: include/linux/sched.h:778:
+extern void del_from_runqueue(struct task_struct * p);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#820: FILE: include/linux/sched.h:778:
+extern void del_from_runqueue(struct task_struct * p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: include/linux/sched.h:779:
+extern void add_to_proclist(struct task_struct * p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#821: FILE: include/linux/sched.h:779:
+extern void add_to_proclist(struct task_struct * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#822: FILE: include/linux/sched.h:780:
+extern void del_from_proclist(struct task_struct * p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#822: FILE: include/linux/sched.h:780:
+extern void del_from_proclist(struct task_struct * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#823: FILE: include/linux/sched.h:781:
+extern int move_to_cpu(struct task_struct * p, int cpu, int stick);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#823: FILE: include/linux/sched.h:781:
+extern int move_to_cpu(struct task_struct * p, int cpu, int stick);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#824: FILE: include/linux/sched.h:782:
+extern int get_best_cpu(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#825: FILE: include/linux/sched.h:783:
+extern int runqueue_balance(int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#826: FILE: include/linux/sched.h:784:
+extern void runqueue_spin_lock(struct task_struct * p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#826: FILE: include/linux/sched.h:784:
+extern void runqueue_spin_lock(struct task_struct * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#827: FILE: include/linux/sched.h:785:
+extern void runqueue_spin_unlock(struct task_struct * p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#827: FILE: include/linux/sched.h:785:
+extern void runqueue_spin_unlock(struct task_struct * p);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#829: FILE: include/linux/sched.h:787:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#832: FILE: include/linux/sched.h:790:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#883: FILE: kernel/fork.c:24:
+#include <asm/atomic.h>

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#910: FILE: kernel/fork.c:643:
+		p->processor = clone_flags & CLONE_PID ? current->processor: get_best_cpu();
 		                                                           ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#996: FILE: kernel/sched.c:101:
+		spinlock_t runqueue_lock;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1002: FILE: kernel/sched.c:105:
+} aligned_data [NR_CPUS] __cacheline_aligned;

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1002: FILE: kernel/sched.c:105:
+} aligned_data [NR_CPUS] __cacheline_aligned;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#1033: FILE: kernel/sched.c:145:
+#define rq_unlock(p)	spin_unlock(&runqueue_lock(p->processor))

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1035: FILE: kernel/sched.c:147:
+#define rq_unlock_irq(p)	do { spin_unlock(&runqueue_lock(p->processor)); local_irq_enable(); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#1035: FILE: kernel/sched.c:147:
+#define rq_unlock_irq(p)	do { spin_unlock(&runqueue_lock(p->processor)); local_irq_enable(); } while (0)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1037: FILE: kernel/sched.c:149:
+#define rq_unlock_irqrestore(p, f)	do { spin_unlock(&runqueue_lock(p->processor)); local_irq_restore(f); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#1037: FILE: kernel/sched.c:149:
+#define rq_unlock_irqrestore(p, f)	do { spin_unlock(&runqueue_lock(p->processor)); local_irq_restore(f); } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1039: FILE: kernel/sched.c:151:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1063: FILE: kernel/sched.c:181:
+static inline int goodness(struct task_struct * p, struct mm_struct *this_mm)

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1082: FILE: kernel/sched.c:212:
+		if (p->cpu_jtime > jiffies)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1092: FILE: kernel/sched.c:236:
+static inline int preemption_goodness(struct task_struct * prev, struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1092: FILE: kernel/sched.c:236:
+static inline int preemption_goodness(struct task_struct * prev, struct task_struct * p)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu != this_cpu'
#1183: FILE: kernel/sched.c:263:
+		if ((best_cpu != this_cpu) && !need_resched)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1212: FILE: kernel/sched.c:287:
+static inline void __add_to_runqueue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1219: FILE: kernel/sched.c:294:
+static inline void __del_from_runqueue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1228: FILE: kernel/sched.c:303:
+void del_from_runqueue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1237: FILE: kernel/sched.c:312:
+static inline void __add_to_proclist(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1243: FILE: kernel/sched.c:318:
+void add_to_proclist(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1252: FILE: kernel/sched.c:327:
+static inline void __del_from_proclist(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1262: FILE: kernel/sched.c:334:
+void del_from_proclist(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1271: FILE: kernel/sched.c:343:
+void runqueue_spin_lock(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1276: FILE: kernel/sched.c:348:
+void runqueue_spin_unlock(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1281: FILE: kernel/sched.c:353:
+static inline void __move_last_runqueue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1289: FILE: kernel/sched.c:359:
+static inline void __move_first_runqueue(struct task_struct * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1296: FILE: kernel/sched.c:365:
+int move_to_cpu(struct task_struct * p, int cpu, int stick)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1302: FILE: kernel/sched.c:371:
+	if (p == idle_task(p->processor)) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1302: FILE: kernel/sched.c:371:
+	if (p == idle_task(p->processor)) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1305: FILE: kernel/sched.c:374:
+			p->move_to_cpu = stick ? -cpu - 1: cpu + 1;
 			                                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1330: FILE: kernel/sched.c:399:
+		if (nr == this_cpu) continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1336: FILE: kernel/sched.c:405:
+		} else if (cpu_running == min_nr_running &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1337: FILE: kernel/sched.c:406:
+				(cpu_processes = atomic_read(&qnr_processes(nr))) < min_nr_processes) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1375: FILE: kernel/sched.c:444:
+		if (nr == this_cpu) continue;

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1495: FILE: kernel/sched.c:673:
+		prev->cpu_jtime = prev->cpu_jtime > prev->sched_jtime ? (prev->cpu_jtime - prev->sched_jtime) >> 1: 0;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1495: FILE: kernel/sched.c:673:
+		prev->cpu_jtime = prev->cpu_jtime > prev->sched_jtime ? (prev->cpu_jtime - prev->sched_jtime) >> 1: 0;
 		                                                                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1729: FILE: kernel/sched.c:1112:
+asmlinkage long sys_sched_setscheduler(pid_t pid, int policy,
 				      struct sched_param *param)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1804: FILE: kernel/sched.c:1456:
+	for (nr = 0; nr < NR_CPUS; nr++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1839: FILE: kernel/softirq.c:372:
+	if (!move_to_cpu(current, cpu, 1)) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1839: FILE: kernel/softirq.c:372:
+	if (!move_to_cpu(current, cpu, 1)) BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000503719.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 34 warnings, 18 checks, 1088 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000503719.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
