WARNING:TYPO_SPELLING: 'continious' may be misspelled - perhaps 'continuous'?
#13: 
Subject: get_user_pages rewrite (was: Huge TLB pages always physically continious?)
                                                                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
> 2: Split get_user_pages up into a pagetable walker and a callback function.

WARNING:TYPO_SPELLING: 'benefical' may be misspelled - perhaps 'beneficial'?
#93: 
2) It looks benefical to implement follow_one_hugetlb_page(),
            ^^^^^^^^^

WARNING:TYPO_SPELLING: 'implemtation' may be misspelled - perhaps 'implementation'?
#96: 
   hugetlb_page implemtation.
                ^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: include/linux/mm.h:398:
+typedef int (*custom_page_walker_t)(struct vm_area_struct *vma, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: include/linux/mm.h:403:
+struct page *get_one_user_page(struct task_struct *tsk, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/linux/mm.h:404:
+struct page *get_one_user_page(struct task_struct *tsk, 
+		struct mm_struct *mm, struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/linux/mm.h:408:
+int walk_user_pages(struct task_struct *tsk, struct mm_struct *mm,
+		unsigned long start, int write, int force,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: include/linux/mm.h:411:
+int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: include/linux/mm.h:412:
+^I^Iunsigned long start, int len, int write, int force, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: include/linux/mm.h:412:
+int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, 
+		unsigned long start, int len, int write, int force, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: mm/memory.c:38:
+/* 04.11.02  -  Page walker API added by Ingo Oeser $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: mm/memory.c:39:
+ * ^I^I<ioe@informatik.tu-chemnitz.de>$

WARNING:TYPO_SPELLING: 'intial' may be misspelled - perhaps 'initial'?
#172: FILE: mm/memory.c:40:
+ * 		Thanks go to Andrew Morton for his intial idea and general help.
    		                                   ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: mm/memory.c:40:
+ * ^I^IThanks go to Andrew Morton for his intial idea and general help.$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#202: FILE: mm/memory.c:528:
+	while (gup->count--) {
+		page_cache_release(gup->pages[gup->count]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: mm/memory.c:535:
+static int gup_add_pages(struct vm_area_struct *vma, struct page *page,
+	      unsigned long virt_addr, void *customdata)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#211: FILE: mm/memory.c:537:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: mm/memory.c:540:
+	BUG_ON(!customdata);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#245: FILE: mm/memory.c:571:
+	while (gup->page_count--) {
+		page_cache_release(gup->pages[gup->page_count]);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: mm/memory.c:578:
+static int gup_add_pv(struct vm_area_struct *vma, struct page *page,
+	   unsigned long virt_addr, void *customdata)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#254: FILE: mm/memory.c:580:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: mm/memory.c:584:
+	BUG_ON(!customdata);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: mm/memory.c:589:
+^I^I^I * uniquely, this simple check is enough. -ioe $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#266: FILE: mm/memory.c:592:
+			if (!gup->vma_count
+			    || gup->vmas[gup->vma_count - 1] != vma) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: mm/memory.c:622:
+ * called with mm->page_table_lock held $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#326: FILE: mm/memory.c:652:
+			BUG();

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#333: FILE: mm/memory.c:659:
+ * (e.g. find_vma_extend(mm,start) has been called sucessfully already 
                                                    ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: mm/memory.c:659:
+ * (e.g. find_vma_extend(mm,start) has been called sucessfully already $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: mm/memory.c:662:
+struct page *get_one_user_page(struct task_struct *tsk,
+			   struct mm_struct *mm, struct vm_area_struct *vma,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: mm/memory.c:668:
+^I/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#354: FILE: mm/memory.c:680:
+	/*
+	   if (is_vm_hugetlb_page(vma)) {

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: mm/memory.c:705:
+int walk_user_pages(struct task_struct *tsk, struct mm_struct *mm,
+		unsigned long start, int write, int force,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#409: FILE: mm/memory.c:724:
+		if (!vma || (vma->vm_flags & VM_IO)
+		    || !(flags & vma->vm_flags))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#415: FILE: mm/memory.c:730:
+		/*
+		   if (is_vm_hugetlb_page(vma)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: mm/memory.c:740:
+			struct page *page;
+			page = single_page_walk(tsk, mm, vma, start, write);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: mm/memory.c:755:
+^I^I^I^I/* Error cases do unlock, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#470: FILE: mm/memory.c:756:
+				 * if necessary. -ioe */

WARNING:INDENTED_LABEL: labels should not be indented
#485: FILE: mm/memory.c:763:
+      out:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: mm/memory.c:769:
+int get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
+	       unsigned long start, int len, int write, int force,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#503: FILE: mm/memory.c:781:
+	memset(&gup_u, 0, sizeof (gup_u));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#510: FILE: mm/memory.c:788:
+		printk("Obsolete argument \"vmas\" used!"

WARNING:SPLIT_STRING: quoted string split across lines
#511: FILE: mm/memory.c:789:
+		printk("Obsolete argument \"vmas\" used!"
+		       " Please send this report to linux-mm@vger.kernel.org"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#512: FILE: mm/memory.c:790:
+		       " Please send this report to linux-mm@vger.kernel.org"
+		       " or fix the caller. Stack trace follows...\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: mm/memory.c:795:
+	BUG_ON(vmas);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#529: FILE: mm/memory.c:807:
+	if (ret == 0) {
+		ret = gup_u.pg.count;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#540: FILE: mm/memory.c:1519:
 
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#546: FILE: mm/memory.c:1525:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: mm/memory.c:1553:
+^I * also a slight optimization. -ioe $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416606.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 24 warnings, 14 checks, 469 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416606.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
