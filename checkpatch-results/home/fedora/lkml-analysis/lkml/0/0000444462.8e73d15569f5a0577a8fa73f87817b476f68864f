ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#33: 
--- a/arch/i386/kernel/traps.c	Thu Jul 25 01:11:24 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#41: FILE: arch/i386/kernel/traps.c:204:
+	printk("CPU:    %d\nEIP:    %04x:[<%08lx>]",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#42: FILE: arch/i386/kernel/traps.c:205:
+	       smp_processor_id(), 0xffff & regs->xcs, regs->eip );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#44: FILE: arch/i386/kernel/traps.c:207:
+	printk(" %s\nEFLAGS: %08lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#57: FILE: arch/i386/mm/fault.c:326:
+	printk("%08lx", regs->eip);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#58: FILE: arch/i386/mm/fault.c:327:
+	module_print_addr(" ",regs->eip, NULL);
 	                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#59: FILE: arch/i386/mm/fault.c:328:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#72: FILE: arch/ppc/kernel/process.c:248:
+	printk("NIP: %08lX");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#74: FILE: arch/ppc/kernel/process.c:250:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#75: FILE: arch/ppc/kernel/process.c:251:
+	printk("XER: %08lX LR: %08lX SP: %08lX REGS: %p TRAP: %04lx    %s\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#76: FILE: arch/ppc/kernel/process.c:252:
+	       regs->xer, regs->link, regs->gpr[1], regs,regs->trap, print_tainted());
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: include/linux/module.h:417:
+#define module_print_addr(x,y,z) do { } while (0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: include/linux/module.h:417:
+#define module_print_addr(x,y,z) do { } while (0)
                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: kernel/module.c:250:
+        unsigned long best_match = 0; /* so far */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: kernel/module.c:250:
+        unsigned long best_match = 0; /* so far */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: kernel/module.c:251:
+        char best_match_string[60] = {0, }; /* so far */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: kernel/module.c:251:
+        char best_match_string[60] = {0, }; /* so far */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: kernel/module.c:252:
+        struct module *mod;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: kernel/module.c:252:
+        struct module *mod;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: kernel/module.c:253:
+        struct module_symbol *sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: kernel/module.c:253:
+        struct module_symbol *sym;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: kernel/module.c:254:
+        int j;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: kernel/module.c:254:
+        int j;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: kernel/module.c:256:
+        /* user addresses - just print user and return -- Cort */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: kernel/module.c:257:
+        if ( addr < PAGE_OFFSET )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: kernel/module.c:257:
+        if ( addr < PAGE_OFFSET )$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#117: FILE: kernel/module.c:257:
+        if ( addr < PAGE_OFFSET )
+        {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#117: FILE: kernel/module.c:257:
+        if ( addr < PAGE_OFFSET )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#117: FILE: kernel/module.c:257:
+        if ( addr < PAGE_OFFSET )

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: kernel/module.c:258:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: kernel/module.c:258:
+        {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#119: FILE: kernel/module.c:259:
+		if ( s1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#119: FILE: kernel/module.c:259:
+		if ( s1 )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#120: FILE: kernel/module.c:260:
+			printk("%s", s1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: kernel/module.c:261:
+                printk("(user)");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: kernel/module.c:261:
+                printk("(user)");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#121: FILE: kernel/module.c:261:
+                printk("(user)");

ERROR:SPACING: space prohibited after that open parenthesis '('
#122: FILE: kernel/module.c:262:
+		if ( s2 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#122: FILE: kernel/module.c:262:
+		if ( s2 )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#123: FILE: kernel/module.c:263:
+			printk("%s", s2);

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: kernel/module.c:264:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: kernel/module.c:264:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: kernel/module.c:265:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: kernel/module.c:265:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: kernel/module.c:267:
+        for (mod = module_list; mod; mod = mod->next)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: kernel/module.c:267:
+        for (mod = module_list; mod; mod = mod->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#127: FILE: kernel/module.c:267:
+        for (mod = module_list; mod; mod = mod->next)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: kernel/module.c:268:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: kernel/module.c:268:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: kernel/module.c:269:
+                for ( j = 0, sym = mod->syms; j < mod->nsyms; ++j, ++sym)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: kernel/module.c:269:
+                for ( j = 0, sym = mod->syms; j < mod->nsyms; ++j, ++sym)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#129: FILE: kernel/module.c:269:
+                for ( j = 0, sym = mod->syms; j < mod->nsyms; ++j, ++sym)
+                {

ERROR:SPACING: space prohibited after that open parenthesis '('
#129: FILE: kernel/module.c:269:
+                for ( j = 0, sym = mod->syms; j < mod->nsyms; ++j, ++sym)

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: kernel/module.c:270:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: kernel/module.c:270:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: kernel/module.c:271:
+                        /* is this a better match than what we've$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: kernel/module.c:272:
+                         * found so far? -- Cort */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: kernel/module.c:272:
+                         * found so far? -- Cort */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: kernel/module.c:273:
+                        if ( (sym->value < addr) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: kernel/module.c:273:
+                        if ( (sym->value < addr) &&$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#133: FILE: kernel/module.c:273:
+                        if ( (sym->value < addr) &&
+                             ((addr - sym->value) < (addr - best_match)) )
+                        {

ERROR:SPACING: space prohibited after that open parenthesis '('
#133: FILE: kernel/module.c:273:
+                        if ( (sym->value < addr) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sym->value < addr'
#133: FILE: kernel/module.c:273:
+                        if ( (sym->value < addr) &&
+                             ((addr - sym->value) < (addr - best_match)) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: kernel/module.c:274:
+                             ((addr - sym->value) < (addr - best_match)) )$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: kernel/module.c:274:
+                        if ( (sym->value < addr) &&
+                             ((addr - sym->value) < (addr - best_match)) )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: kernel/module.c:274:
+                             ((addr - sym->value) < (addr - best_match)) )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#134: FILE: kernel/module.c:274:
+                             ((addr - sym->value) < (addr - best_match)) )

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: kernel/module.c:275:
+                        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: kernel/module.c:275:
+                        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: kernel/module.c:276:
+                                best_match = sym->value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: kernel/module.c:276:
+                                best_match = sym->value;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: kernel/module.c:277:
+                                /* kernelmodule.name is "" so we$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: kernel/module.c:278:
+                                 * have a special case -- Cort */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#138: FILE: kernel/module.c:278:
+                                 * have a special case -- Cort */

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: kernel/module.c:279:
+                                if ( mod->name[0] == 0 )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: kernel/module.c:279:
+                                if ( mod->name[0] == 0 )$

ERROR:SPACING: space prohibited after that open parenthesis '('
#139: FILE: kernel/module.c:279:
+                                if ( mod->name[0] == 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#139: FILE: kernel/module.c:279:
+                                if ( mod->name[0] == 0 )

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: kernel/module.c:280:
+                                        sprintf(best_match_string, "%s",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: kernel/module.c:280:
+                                        sprintf(best_match_string, "%s",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: kernel/module.c:281:
+                                                sym->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: kernel/module.c:281:
+                                                sym->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: kernel/module.c:282:
+                                else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: kernel/module.c:282:
+                                else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: kernel/module.c:283:
+                                        sprintf(best_match_string, "%s:%s",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: kernel/module.c:283:
+                                        sprintf(best_match_string, "%s:%s",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: kernel/module.c:284:
+                                                sym->name, mod->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: kernel/module.c:284:
+                                                sym->name, mod->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: kernel/module.c:285:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: kernel/module.c:285:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: kernel/module.c:286:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: kernel/module.c:286:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: kernel/module.c:287:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: kernel/module.c:287:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: kernel/module.c:289:
+        if ( best_match )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: kernel/module.c:289:
+        if ( best_match )$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#149: FILE: kernel/module.c:289:
+        if ( best_match )
+	{

ERROR:SPACING: space prohibited after that open parenthesis '('
#149: FILE: kernel/module.c:289:
+        if ( best_match )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#149: FILE: kernel/module.c:289:
+        if ( best_match )

ERROR:SPACING: space prohibited after that open parenthesis '('
#151: FILE: kernel/module.c:291:
+		if ( s1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#151: FILE: kernel/module.c:291:
+		if ( s1 )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#152: FILE: kernel/module.c:292:
+			printk("%s", s1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: kernel/module.c:293:
+		printk("(%s + 0x%lx)", best_match_string, addr - best_match);

ERROR:SPACING: space prohibited after that open parenthesis '('
#154: FILE: kernel/module.c:294:
+		if ( s2 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#154: FILE: kernel/module.c:294:
+		if ( s2 )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: kernel/module.c:295:
+			printk("%s", s2);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 61 errors, 43 warnings, 2 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
