WARNING:LINE_SPACING: Missing a blank line after declarations
#93: FILE: drivers/char/tty_io.c:1096:
+		struct pid *pid;
+		for_each_task_pid(tty->session, PIDTYPE_SID, p, pid) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: fs/fcntl.c:489:
+		struct pid *pidp;
+		for_each_task_pid(-pid, PIDTYPE_PGID, p, pidp) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: fs/fcntl.c:525:
+		struct pid *pidp;
+		for_each_task_pid(-pid, PIDTYPE_PGID, p, pidp) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: fs/proc/base.c:1273:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#439: FILE: include/linux/pid.h:32:
+extern void FASTCALL(put_pid(struct pid *pid));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#440: FILE: include/linux/pid.h:33:
+extern struct task_struct *FASTCALL(pid_task(struct pid *pid, enum pid_type type));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#441: FILE: include/linux/pid.h:34:
+extern struct task_struct *FASTCALL(get_pid_task(struct pid *pid, enum pid_type type));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#450: FILE: include/linux/pid.h:42:
+extern void FASTCALL(detach_pid(struct task_struct *task, enum pid_type, int nr));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/linux/pid.h:48:
+extern struct pid *FASTCALL(find_pid(int nr));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: include/linux/pid.h:53:
+extern struct pid *alloc_pid(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: include/linux/pid.h:54:
+extern void FASTCALL(free_pid(struct pid *pid));

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#467: FILE: include/linux/pid.h:56:
+#define for_each_task_pid(who, type, task, pid)	\
+	if ((pid = find_pid(who)))		\
+		list_for_each_entry_rcu(task, &pid->tasks[type], pid_list[type])

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pid' - possible side-effects?
#467: FILE: include/linux/pid.h:56:
+#define for_each_task_pid(who, type, task, pid)	\
+	if ((pid = find_pid(who)))		\
+		list_for_each_entry_rcu(task, &pid->tasks[type], pid_list[type])

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#468: FILE: include/linux/pid.h:57:
+	if ((pid = find_pid(who)))		\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: kernel/cpuset.c:2421:
+	struct pid *pid = PROC_I(inode)->pid;
+	return single_open(file, proc_cpuset_show, pid);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#748: FILE: kernel/fork.c:1342:
+	p = copy_process(clone_flags, stack_start, regs, stack_size, parent_tidptr, child_tidptr, nr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: kernel/pid.c:141:
+	if ((atomic_read(&pid->count) == 1) ||
+	     atomic_dec_and_test(&pid->count))

WARNING:LINE_SPACING: Missing a blank line after declarations
#828: FILE: kernel/pid.c:148:
+	struct pid *pid = container_of(rhp, struct pid, rcu);
+	put_pid(pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: kernel/pid.c:170:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: kernel/pid.c:173:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: kernel/pid.c:228:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#972: FILE: kernel/pid.c:235:
+	struct task_struct *result = NULL;
+	if (pid) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#974: FILE: kernel/pid.c:237:
+		struct list_head *list, *next;
+		list = rcu_dereference(&pid->tasks[type]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#999: FILE: kernel/pid.c:255:
+	struct task_struct *result;
+	rcu_read_lock();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: kernel/pid.c:298:
+	pid_cachep = kmem_cache_create("pid", sizeof(struct pid),
+					__alignof__(struct pid),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097334.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 9 warnings, 10 checks, 921 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000097334.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
