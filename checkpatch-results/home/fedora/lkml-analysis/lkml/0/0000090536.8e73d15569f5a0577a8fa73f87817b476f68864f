WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: include/linux/rtmutex.h:44:
+ extern int rt_mutex_debug_check_no_locks_freed(const void *from,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/rtmutex.h:44:
+ extern int rt_mutex_debug_check_no_locks_freed(const void *from,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: include/linux/rtmutex.h:46:
+ extern void rt_mutex_debug_check_no_locks_held(struct task_struct *task);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/rtmutex.h:46:
+ extern void rt_mutex_debug_check_no_locks_held(struct task_struct *task);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/linux/rtmutex.h:48:
+ static inline int rt_mutex_debug_check_no_locks_freed(const void *from,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/linux/rtmutex.h:50:
+ {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: include/linux/rtmutex.h:52:
+ }$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: kernel/rtmutex-debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#168: FILE: kernel/rtmutex-debug.c:39:
+# define TRACE_BUG_ON(x)			BUG_ON(x)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#175: FILE: kernel/rtmutex-debug.c:46:
+		if (spin_is_locked(&current->pi_lock))		\

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: kernel/rtmutex-debug.c:63:
+	BUG();					\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: kernel/rtmutex-debug.c:86:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: kernel/rtmutex-debug.c:110:
+		printk("%16s:%5d [%p, %3d]", p->comm, p->pid, p, p->prio);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#241: FILE: kernel/rtmutex-debug.c:112:
+		printk("<none>");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#247: FILE: kernel/rtmutex-debug.c:118:
+		printk("%s/%d [%p, %3d]", p->comm, p->pid, p, p->prio);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: kernel/rtmutex-debug.c:120:
+		printk("<none>");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: kernel/rtmutex-debug.c:126:
+		printk(" [%p] {%s}\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: kernel/rtmutex-debug.c:127:
+		printk(" [%p] {%s}\n",
+			lock, lock->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#258: FILE: kernel/rtmutex-debug.c:129:
+		printk(" [%p] {%s:%d}\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: kernel/rtmutex-debug.c:130:
+		printk(" [%p] {%s:%d}\n",
+			lock, lock->file, lock->line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: kernel/rtmutex-debug.c:133:
+		printk(".. ->owner: %p\n", lock->owner);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#263: FILE: kernel/rtmutex-debug.c:134:
+		printk(".. held by:  ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#265: FILE: kernel/rtmutex-debug.c:136:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#268: FILE: kernel/rtmutex-debug.c:139:
+		printk("... acquired at:               ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: kernel/rtmutex-debug.c:146:
+	printk("-------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: kernel/rtmutex-debug.c:147:
+	printk("| waiter struct %p:\n", w);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#277: FILE: kernel/rtmutex-debug.c:148:
+	printk("| w->list_entry: [DP:%p/%p|SP:%p/%p|PRI:%d]\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#281: FILE: kernel/rtmutex-debug.c:152:
+	printk("| w->pi_list_entry: [DP:%p/%p|SP:%p/%p|PRI:%d]\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#285: FILE: kernel/rtmutex-debug.c:156:
+	printk("\n| lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#287: FILE: kernel/rtmutex-debug.c:158:
+	printk("| w->ti->task:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: kernel/rtmutex-debug.c:160:
+	printk("| blocked at:  ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#291: FILE: kernel/rtmutex-debug.c:162:
+	printk("-------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: kernel/rtmutex-debug.c:168:
+	case TASK_RUNNING:		printk("R"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#297: FILE: kernel/rtmutex-debug.c:168:
+	case TASK_RUNNING:		printk("R"); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: kernel/rtmutex-debug.c:169:
+	case TASK_INTERRUPTIBLE:	printk("S"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#298: FILE: kernel/rtmutex-debug.c:169:
+	case TASK_INTERRUPTIBLE:	printk("S"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#299: FILE: kernel/rtmutex-debug.c:170:
+	case TASK_UNINTERRUPTIBLE:	printk("D"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#299: FILE: kernel/rtmutex-debug.c:170:
+	case TASK_UNINTERRUPTIBLE:	printk("D"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: kernel/rtmutex-debug.c:171:
+	case TASK_STOPPED:		printk("T"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#300: FILE: kernel/rtmutex-debug.c:171:
+	case TASK_STOPPED:		printk("T"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#301: FILE: kernel/rtmutex-debug.c:172:
+	case EXIT_ZOMBIE:		printk("Z"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#301: FILE: kernel/rtmutex-debug.c:172:
+	case EXIT_ZOMBIE:		printk("Z"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: kernel/rtmutex-debug.c:173:
+	case EXIT_DEAD:			printk("X"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#302: FILE: kernel/rtmutex-debug.c:173:
+	case EXIT_DEAD:			printk("X"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: kernel/rtmutex-debug.c:174:
+	default:			printk("?"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#303: FILE: kernel/rtmutex-debug.c:174:
+	default:			printk("?"); break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#306: FILE: kernel/rtmutex-debug.c:177:
+	if (p->pi_blocked_on) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#309: FILE: kernel/rtmutex-debug.c:180:
+		printk(" blocked on:");

CHECK:BRACES: Unbalanced braces around else statement
#311: FILE: kernel/rtmutex-debug.c:182:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: kernel/rtmutex-debug.c:183:
+		printk(" (not blocked)\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#327: FILE: kernel/rtmutex-debug.c:198:
+		printk("------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#328: FILE: kernel/rtmutex-debug.c:199:
+		printk("| showing all locks held by: |  (");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: kernel/rtmutex-debug.c:201:
+		printk("):\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#331: FILE: kernel/rtmutex-debug.c:202:
+		printk("------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#333: FILE: kernel/rtmutex-debug.c:204:
+		printk("---------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#334: FILE: kernel/rtmutex-debug.c:205:
+		printk("| showing all locks held: |\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#335: FILE: kernel/rtmutex-debug.c:206:
+		printk("---------------------------\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't != filter'
#350: FILE: kernel/rtmutex-debug.c:221:
+		if (filter && (t != filter))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#356: FILE: kernel/rtmutex-debug.c:227:
+		printk("\n#%03d:            ", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#361: FILE: kernel/rtmutex-debug.c:232:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#370: FILE: kernel/rtmutex-debug.c:241:
+	printk("\nshowing all tasks:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: kernel/rtmutex-debug.c:252:
+			printk("hm, tasklist_lock locked, retrying... ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#384: FILE: kernel/rtmutex-debug.c:255:
+			printk(" #%d", 10-count);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#384: FILE: kernel/rtmutex-debug.c:255:
+			printk(" #%d", 10-count);
 			                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#388: FILE: kernel/rtmutex-debug.c:259:
+		printk(" ignoring it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#392: FILE: kernel/rtmutex-debug.c:263:
+		printk(" locked it.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: kernel/rtmutex-debug.c:272:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#403: FILE: kernel/rtmutex-debug.c:274:
+	printk("=============================================\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#419: FILE: kernel/rtmutex-debug.c:290:
+		printk("BUG: PI priority boost leaked!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#421: FILE: kernel/rtmutex-debug.c:292:
+		printk("\n");

ERROR:SPACING: space required before the open parenthesis '('
#429: FILE: kernel/rtmutex-debug.c:300:
+		if(task != rt_mutex_owner(lock))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#435: FILE: kernel/rtmutex-debug.c:306:
+		printk("BUG: %s/%d, lock held at task exit time!\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: kernel/rtmutex-debug.c:310:
+			printk("exiting task is not even the owner??\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: kernel/rtmutex-debug.c:317:
+		printk("hm, PI interest held at exit time? Task:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#480: FILE: kernel/rtmutex-debug.c:351:
+		printk("BUG: %s/%d, active lock [%p(%p-%p)] freed!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: kernel/rtmutex-debug.c:352:
+		printk("BUG: %s/%d, active lock [%p(%p-%p)] freed!\n",
+			current->comm, current->pid, lock, from, to);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#485: FILE: kernel/rtmutex-debug.c:356:
+			printk("freeing task is not even the owner??\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#533: FILE: kernel/rtmutex-debug.c:404:
+	printk("\n============================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: kernel/rtmutex-debug.c:405:
+	printk(  "[ BUG: circular locking deadlock detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#534: FILE: kernel/rtmutex-debug.c:405:
+	printk(  "[ BUG: circular locking deadlock detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#535: FILE: kernel/rtmutex-debug.c:406:
+	printk(  "--------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#535: FILE: kernel/rtmutex-debug.c:406:
+	printk(  "--------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#536: FILE: kernel/rtmutex-debug.c:407:
+	printk("%s/%d is deadlocking current task %s/%d\n\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#539: FILE: kernel/rtmutex-debug.c:410:
+	printk("\n1) %s/%d is trying to acquire this lock:\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#543: FILE: kernel/rtmutex-debug.c:414:
+	printk("... trying at:                 ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#546: FILE: kernel/rtmutex-debug.c:417:
+	printk("\n2) %s/%d is blocked on this lock:\n", task->comm, task->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: kernel/rtmutex-debug.c:423:
+	printk("\n%s/%d's [blocked] stackdump:\n\n", task->comm, task->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#554: FILE: kernel/rtmutex-debug.c:425:
+	printk("\n%s/%d's [current] stackdump:\n\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#558: FILE: kernel/rtmutex-debug.c:429:
+	printk("[ turning off deadlock detection."

WARNING:SPLIT_STRING: quoted string split across lines
#559: FILE: kernel/rtmutex-debug.c:430:
+	printk("[ turning off deadlock detection."
+	       "Please report this trace. ]\n\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#646: FILE: kernel/rtmutex-debug.h:1:
+/*

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#659: FILE: kernel/rtmutex-debug.h:14:
+#define __IP_DECL__		, unsigned long ip
                    		^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#660: FILE: kernel/rtmutex-debug.h:15:
+#define __IP__			, ip
               			^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#660: FILE: kernel/rtmutex-debug.h:15:
+#define __IP__			, ip

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#661: FILE: kernel/rtmutex-debug.h:16:
+#define __RET_IP__		, (unsigned long)__builtin_return_address(0)
                   		^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#661: FILE: kernel/rtmutex-debug.h:16:
+#define __RET_IP__		, (unsigned long)__builtin_return_address(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#665: FILE: kernel/rtmutex-debug.h:20:
+extern void rt_mutex_deadlock_account_unlock(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#666: FILE: kernel/rtmutex-debug.h:21:
+extern void debug_rt_mutex_init_waiter(struct rt_mutex_waiter *waiter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#667: FILE: kernel/rtmutex-debug.h:22:
+extern void debug_rt_mutex_free_waiter(struct rt_mutex_waiter *waiter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#668: FILE: kernel/rtmutex-debug.h:23:
+extern void debug_rt_mutex_init(struct rt_mutex *lock, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#669: FILE: kernel/rtmutex-debug.h:24:
+extern void debug_rt_mutex_lock(struct rt_mutex *lock __IP_DECL__);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#670: FILE: kernel/rtmutex-debug.h:25:
+extern void debug_rt_mutex_unlock(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#671: FILE: kernel/rtmutex-debug.h:26:
+extern void debug_rt_mutex_proxy_unlock(struct rt_mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#672: FILE: kernel/rtmutex-debug.h:27:
+extern void debug_rt_mutex_deadlock(int detect, struct rt_mutex_waiter *waiter,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#674: FILE: kernel/rtmutex-debug.h:29:
+extern void debug_rt_mutex_print_deadlock(struct rt_mutex_waiter *waiter);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#676: FILE: kernel/rtmutex-debug.h:31:
+# define debug_rt_mutex_reset_waiter(w)			\
+	do { (w)->deadlock_lock = NULL; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#686: FILE: lib/Kconfig.debug:124:
+config DEBUG_RT_MUTEXES
+	bool "RT Mutex debugging, deadlock detection"
+	default y
+	depends on DEBUG_KERNEL && RT_MUTEXES
+	help
+	 This allows rt mutex semantics violations and rt mutex related
+	 deadlocks (lockups) to be detected and reported automatically.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090536.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 73 warnings, 19 checks, 617 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090536.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
