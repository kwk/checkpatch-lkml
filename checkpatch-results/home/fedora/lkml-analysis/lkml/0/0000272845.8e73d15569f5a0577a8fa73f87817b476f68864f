WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#71: FILE: arch/ppc64/kernel/traps.c:551:
+		printk(KERN_EMERG "VMX/Altivec assist exception in kernel mode"

WARNING:SPLIT_STRING: quoted string split across lines
#72: FILE: arch/ppc64/kernel/traps.c:552:
+		printk(KERN_EMERG "VMX/Altivec assist exception in kernel mode"
+		       " at %lx\n", regs->nip);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#92: FILE: arch/ppc64/kernel/traps.c:570:
+		info.si_addr = (void *) regs->nip;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#97: FILE: arch/ppc64/kernel/traps.c:575:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#98: FILE: arch/ppc64/kernel/traps.c:576:
+			printk(KERN_ERR "Unrecognized altivec instruction "

WARNING:SPLIT_STRING: quoted string split across lines
#99: FILE: arch/ppc64/kernel/traps.c:577:
+			printk(KERN_ERR "Unrecognized altivec instruction "
+			       "in %s at %lx\n", current->comm, regs->nip);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: arch/ppc64/kernel/vecemu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#117: FILE: arch/ppc64/kernel/vecemu.c:9:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#118: FILE: arch/ppc64/kernel/vecemu.c:10:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#121: FILE: arch/ppc64/kernel/vecemu.c:13:
+extern void vaddfp(vector128 *dst, vector128 *a, vector128 *b);
                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#121: FILE: arch/ppc64/kernel/vecemu.c:13:
+extern void vaddfp(vector128 *dst, vector128 *a, vector128 *b);
                                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#121: FILE: arch/ppc64/kernel/vecemu.c:13:
+extern void vaddfp(vector128 *dst, vector128 *a, vector128 *b);
                                                            ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#122: FILE: arch/ppc64/kernel/vecemu.c:14:
+extern void vsubfp(vector128 *dst, vector128 *a, vector128 *b);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#123: FILE: arch/ppc64/kernel/vecemu.c:15:
+extern void vmaddfp(vector128 *dst, vector128 *a, vector128 *b, vector128 *c);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#124: FILE: arch/ppc64/kernel/vecemu.c:16:
+extern void vnmsubfp(vector128 *dst, vector128 *a, vector128 *b, vector128 *c);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#125: FILE: arch/ppc64/kernel/vecemu.c:17:
+extern void vrefp(vector128 *dst, vector128 *src);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#126: FILE: arch/ppc64/kernel/vecemu.c:18:
+extern void vrsqrtefp(vector128 *dst, vector128 *src);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#127: FILE: arch/ppc64/kernel/vecemu.c:19:
+extern void vexptep(vector128 *dst, vector128 *src);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#156: FILE: arch/ppc64/kernel/vecemu.c:48:
+		return (s & 0x80000000)? 0: 0x7f800000;	/* 0 or +Inf */
 		                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#156: FILE: arch/ppc64/kernel/vecemu.c:48:
+		return (s & 0x80000000)? 0: 0x7f800000;	/* 0 or +Inf */
 		                          ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#277: FILE: arch/ppc64/kernel/vecemu.c:169:
+		return (x & 0x80000000)? 0x80000000: 0x7fffffff;
 		                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#277: FILE: arch/ppc64/kernel/vecemu.c:169:
+		return (x & 0x80000000)? 0x80000000: 0x7fffffff;
 		                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#281: FILE: arch/ppc64/kernel/vecemu.c:173:
+	return (x & 0x80000000)? -mant: mant;
 	                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#281: FILE: arch/ppc64/kernel/vecemu.c:173:
+	return (x & 0x80000000)? -mant: mant;
 	                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#343: FILE: arch/ppc64/kernel/vecemu.c:235:
+	/* mantissa overflows into exponent - that's OK,
+	   it can't overflow into the sign bit */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#343: FILE: arch/ppc64/kernel/vecemu.c:235:
+	   it can't overflow into the sign bit */

CHECK:SPACING: No space is necessary after a cast
#374: FILE: arch/ppc64/kernel/vecemu.c:266:
+	if (get_user(instr, (unsigned int *) regs->nip))

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: arch/ppc64/kernel/vecemu.c:310:
+				u32 x = vrs[vb].u[i];
+				x = (x & 0x80000000)? rfiz(x): rfii(x);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#418: FILE: arch/ppc64/kernel/vecemu.c:310:
+				x = (x & 0x80000000)? rfiz(x): rfii(x);
 				                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#418: FILE: arch/ppc64/kernel/vecemu.c:310:
+				x = (x & 0x80000000)? rfiz(x): rfii(x);
 				                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: arch/ppc64/kernel/vecemu.c:317:
+				u32 x = vrs[vb].u[i];
+				x = (x & 0x80000000)? rfii(x): rfiz(x);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#425: FILE: arch/ppc64/kernel/vecemu.c:317:
+				x = (x & 0x80000000)? rfii(x): rfiz(x);
 				                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#425: FILE: arch/ppc64/kernel/vecemu.c:317:
+				x = (x & 0x80000000)? rfii(x): rfiz(x);
 				                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: arch/ppc64/kernel/vecemu.c:324:
+				vrs[vd].u[i] = ctuxs(vrs[vb].u[i], va,
+						&current->thread.vscr.u[3]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: arch/ppc64/kernel/vecemu.c:329:
+				vrs[vd].u[i] = ctsxs(vrs[vb].u[i], va,
+						&current->thread.vscr.u[3]);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#459: FILE: arch/ppc64/kernel/vector.S:1:
+#include <asm/ppc_asm.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: include/asm-ppc64/system.h:119:
+extern int emulate_altivec(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#638: FILE: include/asm-ppc64/system.h:119:
+extern int emulate_altivec(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 18 warnings, 10 checks, 572 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272845.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
