WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
--- 2.6.6-rc3-mm2.orig/include/asm-alpha/unistd.h	2004-05-05 09:35:45.000000000 -0700

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#58: FILE: include/asm-alpha/unistd.h:382:
+#define _syscall_return(type)	return ((type) _sc_ret)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#58: FILE: include/asm-alpha/unistd.h:382:
+#define _syscall_return(type)	return ((type) _sc_ret)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#75: FILE: include/asm-arm26/unistd.h:281:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#75: FILE: include/asm-arm26/unistd.h:281:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#97: FILE: include/asm-arm/unistd.h:328:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#97: FILE: include/asm-arm/unistd.h:328:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#119: FILE: include/asm-h8300/unistd.h:280:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#119: FILE: include/asm-h8300/unistd.h:280:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#141: FILE: include/asm-i386/unistd.h:297:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#141: FILE: include/asm-i386/unistd.h:297:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#163: FILE: include/asm-m68knommu/unistd.h:230:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#163: FILE: include/asm-m68knommu/unistd.h:230:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: include/asm-m68knommu/unistd.h:252:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: include/asm-m68knommu/unistd.h:267:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: include/asm-m68knommu/unistd.h:284:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/asm-m68knommu/unistd.h:303:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/asm-m68knommu/unistd.h:325:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: include/asm-m68knommu/unistd.h:349:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: include/asm-m68k/unistd.h:248:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#268: FILE: include/asm-m68k/unistd.h:248:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#290: FILE: include/asm-mips/unistd.h:824:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#290: FILE: include/asm-mips/unistd.h:824:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#292: FILE: include/asm-mips/unistd.h:826:
+do { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#421: FILE: include/asm-parisc/unistd.h:745:
+#define __syscall_return					\
+        if (__sys_res >= (unsigned long)-4095) {		\
+		errno = -__sys_res;				\
+                __sys_res = (unsigned long)-1;			\
+        }							\
+        __sys_res;						\
+#endif
+
 /* The system call number MUST ALWAYS be loaded in the delay slot of
    the ble instruction, or restarting system calls WILL NOT WORK.  See
    arch/parisc/kernel/signal.c - dhd, 2000-07-26 */

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: include/asm-parisc/unistd.h:746:
+        if (__sys_res >= (unsigned long)-4095) {^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: include/asm-parisc/unistd.h:746:
+        if (__sys_res >= (unsigned long)-4095) {^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: include/asm-parisc/unistd.h:748:
+                __sys_res = (unsigned long)-1;^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: include/asm-parisc/unistd.h:748:
+                __sys_res = (unsigned long)-1;^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: include/asm-parisc/unistd.h:749:
+        }^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: include/asm-parisc/unistd.h:749:
+        }^I^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: include/asm-parisc/unistd.h:750:
+        __sys_res;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: include/asm-parisc/unistd.h:750:
+        __sys_res;^I^I^I^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#454: FILE: include/asm-ppc64/unistd.h:290:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+		__sc_ret = - __sc_ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#454: FILE: include/asm-ppc64/unistd.h:290:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+		__sc_ret = - __sc_ret;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#456: FILE: include/asm-ppc64/unistd.h:292:
+		__sc_ret = - __sc_ret;
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#458: FILE: include/asm-ppc64/unistd.h:294:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+	{								\
+		errno = __sc_ret;					\
+		__sc_ret = -1;						\
+	}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#459: FILE: include/asm-ppc64/unistd.h:295:
+	if (__sc_err & 0x10000000)					\
+	{								\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#491: FILE: include/asm-ppc/unistd.h:281:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+		__sc_ret = - __sc_ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#491: FILE: include/asm-ppc/unistd.h:281:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+		__sc_ret = - __sc_ret;

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#493: FILE: include/asm-ppc/unistd.h:283:
+		__sc_ret = - __sc_ret;
 		           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#495: FILE: include/asm-ppc/unistd.h:285:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+	{								\
+		errno = __sc_ret;					\
+		__sc_ret = -1;						\
+	}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#496: FILE: include/asm-ppc/unistd.h:286:
+	if (__sc_err & 0x10000000)					\
+	{								\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#528: FILE: include/asm-s390/unistd.h:364:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#528: FILE: include/asm-s390/unistd.h:364:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#550: FILE: include/asm-sh/unistd.h:290:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#550: FILE: include/asm-sh/unistd.h:290:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#572: FILE: include/asm-sparc64/unistd.h:307:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#572: FILE: include/asm-sparc64/unistd.h:307:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#574: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#574: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'res' may be better as '(res)' to avoid precedence issues
#574: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#574: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#574: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#665: FILE: include/asm-sparc/unistd.h:306:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#665: FILE: include/asm-sparc/unistd.h:306:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#667: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#667: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'res' may be better as '(res)' to avoid precedence issues
#667: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#667: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#667: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#758: FILE: include/asm-v850/unistd.h:249:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#758: FILE: include/asm-v850/unistd.h:249:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#781: FILE: include/asm-x86_64/unistd.h:564:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#781: FILE: include/asm-x86_64/unistd.h:564:
+#define __syscall_return(type, res) return ((type)(res))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 32 warnings, 4 checks, 621 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
