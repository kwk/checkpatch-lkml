WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#22: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#23: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#24: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
# fs/Config.help          |   11 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# fs/Config.in            |    1 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# fs/ext2/Makefile        |    4 

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
# fs/ext2/acl.c           |  576 ++++++++++++++++++++++++++++++++++++++++++++++++

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# fs/ext2/acl.c           |  576 ++++++++++++++++++++++++++++++++++++++++++++++++

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# fs/ext2/acl.h           |   88 +++++++

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# fs/ext2/ext2.h          |    5 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# fs/ext2/file.c          |    3 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
# fs/ext2/ialloc.c        |   37 +--

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
# fs/ext2/inode.c         |   22 +

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# fs/ext2/namei.c         |   10 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# fs/ext2/super.c         |   44 +++

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
# fs/ext2/xattr.c         |   21 +

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# fs/ext2/xattr_user.c    |    6 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# include/linux/ext2_fs.h |    1 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# 14 files changed, 802 insertions(+), 27 deletions(-)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# 02/10/18	tytso@snap.thunk.org	1.816

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# Port of (bugfixed) 0.8.50 acl-ext2 to 2.5

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# This patch adds ACL support to the ext2 filesystem.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#50: 
--- a/fs/Config.help	Fri Oct 18 14:28:18 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: fs/ext2/acl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#99: FILE: fs/ext2/acl.c:2:
+ * linux/fs/ext2/acl.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#124: FILE: fs/ext2/acl.c:27:
+	if (size < sizeof(ext2_acl_header))
+		 return ERR_PTR(-EINVAL);

WARNING:TABSTOP: Statements should start on a tabstop
#125: FILE: fs/ext2/acl.c:28:
+		 return ERR_PTR(-EINVAL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#138: FILE: fs/ext2/acl.c:41:
+	for (n=0; n < count; n++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#145: FILE: fs/ext2/acl.c:48:
+		switch(acl->a_entries[n].e_tag) {
+			case ACL_USER_OBJ:
+			case ACL_GROUP_OBJ:
+			case ACL_MASK:
+			case ACL_OTHER:
[...]
+			case ACL_USER:
+			case ACL_GROUP:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#145: FILE: fs/ext2/acl.c:48:
+		switch(acl->a_entries[n].e_tag) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#188: FILE: fs/ext2/acl.c:91:
+	ext_acl = (ext2_acl_header *)kmalloc(sizeof(ext2_acl_header) +

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#194: FILE: fs/ext2/acl.c:97:
+	for (n=0; n < acl->a_count; n++) {
 	      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: fs/ext2/acl.c:99:
+		ext2_acl_entry *entry = (ext2_acl_entry *)e;
+		entry->e_tag  = cpu_to_le16(acl->a_entries[n].e_tag);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#198: FILE: fs/ext2/acl.c:101:
+		switch(acl->a_entries[n].e_tag) {
+			case ACL_USER:
+			case ACL_GROUP:
[...]
+			case ACL_USER_OBJ:
+			case ACL_GROUP_OBJ:
+			case ACL_MASK:
+			case ACL_OTHER:
[...]
+			default:

ERROR:SPACING: space required before the open parenthesis '('
#198: FILE: fs/ext2/acl.c:101:
+		switch(acl->a_entries[n].e_tag) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#239: FILE: fs/ext2/acl.c:142:
+	switch(type) {
+		case ACL_TYPE_ACCESS:
[...]
+		case ACL_TYPE_DEFAULT:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: fs/ext2/acl.c:142:
+	switch(type) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#261: FILE: fs/ext2/acl.c:164:
+	if (retval == -ENODATA || retval == -ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#261: FILE: fs/ext2/acl.c:164:
+	if (retval == -ENODATA || retval == -ENOSYS)
[...]
+	else if (retval < 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#265: FILE: fs/ext2/acl.c:168:
+	else {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#291: FILE: fs/ext2/acl.c:194:
+	switch(type) {
+		case ACL_TYPE_ACCESS:
[...]
+		case ACL_TYPE_DEFAULT:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#291: FILE: fs/ext2/acl.c:194:
+	switch(type) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: fs/ext2/acl.c:200:
+				mode_t mode = inode->i_mode;
+				error = posix_acl_equiv_mode(acl, &mode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#298: FILE: fs/ext2/acl.c:201:
+				if (error < 0)
[...]
+				else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#300: FILE: fs/ext2/acl.c:203:
+					return error;
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#300: FILE: fs/ext2/acl.c:203:
+				else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: fs/ext2/acl.c:222:
+ ^Iif (acl) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: fs/ext2/acl.c:222:
+ ^Iif (acl) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: fs/ext2/acl.c:222:
+ ^Iif (acl) {$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#330: FILE: fs/ext2/acl.c:233:
+	if (value)
+		kfree(value);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#349: FILE: fs/ext2/acl.c:252:
+	if ((mask & MAY_WRITE) && IS_IMMUTABLE(inode))
+	    return -EACCES;

WARNING:TABSTOP: Statements should start on a tabstop
#350: FILE: fs/ext2/acl.c:253:
+	    return -EACCES;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#355: FILE: fs/ext2/acl.c:258:
+		/* ACL can't contain additional permissions if
+		   the ACL_MASK entry is 0 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#355: FILE: fs/ext2/acl.c:258:
+		   the ACL_MASK entry is 0 */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#356: FILE: fs/ext2/acl.c:259:
+		if (!(mode & S_IRWXG))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: braces {} should be used on all arms of this statement
#361: FILE: fs/ext2/acl.c:264:
+			if (lock) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#365: FILE: fs/ext2/acl.c:268:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#374: FILE: fs/ext2/acl.c:277:
+		if (EXT2_I(inode)->i_acl) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#380: FILE: fs/ext2/acl.c:283:
+			return error;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#380: FILE: fs/ext2/acl.c:283:
+		} else

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#387: FILE: fs/ext2/acl.c:290:
+	if ((mode & mask & S_IRWXO) == mask)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#392: FILE: fs/ext2/acl.c:295:
+	if ((mask & (MAY_READ|MAY_WRITE)) || (inode->i_mode & S_IXUGO))
 	                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#392: FILE: fs/ext2/acl.c:295:
+	if ((mask & (MAY_READ|MAY_WRITE)) || (inode->i_mode & S_IXUGO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_READ'
#396: FILE: fs/ext2/acl.c:299:
+	if (capable(CAP_DAC_READ_SEARCH) && ((mask == MAY_READ) ||
+	    (S_ISDIR(inode->i_mode) && !(mask & MAY_WRITE))))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: fs/ext2/acl.c:300:
+	if (capable(CAP_DAC_READ_SEARCH) && ((mask == MAY_READ) ||
+	    (S_ISDIR(inode->i_mode) && !(mask & MAY_WRITE))))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: fs/ext2/acl.c:331:
+ * BKL held [before 2.5.x] $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#447: FILE: fs/ext2/acl.c:350:
+	if (test_opt(inode->i_sb, POSIX_ACL) && acl) {
+               struct posix_acl *clone;

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: fs/ext2/acl.c:351:
+               struct posix_acl *clone;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: fs/ext2/acl.c:351:
+               struct posix_acl *clone;$

WARNING:TABSTOP: Statements should start on a tabstop
#449: FILE: fs/ext2/acl.c:352:
+	       mode_t mode;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: fs/ext2/acl.c:377:
+       posix_acl_release(acl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: fs/ext2/acl.c:378:
+       return error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: fs/ext2/acl.c:400:
+        int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: fs/ext2/acl.c:400:
+        int error;$

WARNING:TYPO_SPELLING: 'attribut' may be misspelled - perhaps 'attribute'?
#518: FILE: fs/ext2/acl.c:421:
+ * Extended attribut handlers
             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#524: FILE: fs/ext2/acl.c:427:
+	const size_t len = sizeof(XATTR_NAME_ACL_ACCESS)-1;
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#537: FILE: fs/ext2/acl.c:440:
+	const size_t len = sizeof(XATTR_NAME_ACL_DEFAULT)-1;
 	                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acl"
#558: FILE: fs/ext2/acl.c:461:
+	if (acl == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->fsuid != inode->i_uid'
#592: FILE: fs/ext2/acl.c:495:
+	if ((current->fsuid != inode->i_uid) && !capable(CAP_FOWNER))

CHECK:BRACES: braces {} should be used on all arms of this statement
#595: FILE: fs/ext2/acl.c:498:
+	if (value) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#597: FILE: fs/ext2/acl.c:500:
+		if (IS_ERR(acl))
[...]
+		else if (acl) {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#604: FILE: fs/ext2/acl.c:507:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#633: FILE: fs/ext2/acl.c:536:
+	prefix:	XATTR_NAME_ACL_ACCESS,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#634: FILE: fs/ext2/acl.c:537:
+	list:	ext2_xattr_list_acl_access,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#634: FILE: fs/ext2/acl.c:537:
+	list:	ext2_xattr_list_acl_access,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#635: FILE: fs/ext2/acl.c:538:
+	get:	ext2_xattr_get_acl_access,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#635: FILE: fs/ext2/acl.c:538:
+	get:	ext2_xattr_get_acl_access,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#636: FILE: fs/ext2/acl.c:539:
+	set:	ext2_xattr_set_acl_access,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#636: FILE: fs/ext2/acl.c:539:
+	set:	ext2_xattr_set_acl_access,

WARNING:INDENTED_LABEL: labels should not be indented
#640: FILE: fs/ext2/acl.c:543:
+	prefix:	XATTR_NAME_ACL_DEFAULT,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#641: FILE: fs/ext2/acl.c:544:
+	list:	ext2_xattr_list_acl_default,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#641: FILE: fs/ext2/acl.c:544:
+	list:	ext2_xattr_list_acl_default,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#642: FILE: fs/ext2/acl.c:545:
+	get:	ext2_xattr_get_acl_default,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#642: FILE: fs/ext2/acl.c:545:
+	get:	ext2_xattr_get_acl_default,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#643: FILE: fs/ext2/acl.c:546:
+	set:	ext2_xattr_set_acl_default,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#643: FILE: fs/ext2/acl.c:546:
+	set:	ext2_xattr_set_acl_default,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#678: FILE: fs/ext2/acl.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#679: FILE: fs/ext2/acl.h:2:
+  File: fs/ext2/acl.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#679: FILE: fs/ext2/acl.h:2:
+/*
+  File: fs/ext2/acl.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#689: FILE: fs/ext2/acl.h:12:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#695: FILE: fs/ext2/acl.h:18:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#700: FILE: fs/ext2/acl.h:23:
+typedef struct {

WARNING:LINE_SPACING: Missing a blank line after declarations
#719: FILE: fs/ext2/acl.h:42:
+	ssize_t s;
+	size -= sizeof(ext2_acl_header);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#725: FILE: fs/ext2/acl.h:48:
+		return size / sizeof(ext2_acl_entry_short);
+	} else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#735: FILE: fs/ext2/acl.h:58:
+/* Value for inode->u.ext2_i.i_acl and inode->u.ext2_i.i_default_acl
+   if the ACL has not been cached */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#735: FILE: fs/ext2/acl.h:58:
+   if the ACL has not been cached */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#739: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#739: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#739: FILE: fs/ext2/acl.h:62:
+extern int ext2_permission (struct inode *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#740: FILE: fs/ext2/acl.h:63:
+extern int ext2_permission_locked (struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#740: FILE: fs/ext2/acl.h:63:
+extern int ext2_permission_locked (struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#740: FILE: fs/ext2/acl.h:63:
+extern int ext2_permission_locked (struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#740: FILE: fs/ext2/acl.h:63:
+extern int ext2_permission_locked (struct inode *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#741: FILE: fs/ext2/acl.h:64:
+extern int ext2_acl_chmod (struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#741: FILE: fs/ext2/acl.h:64:
+extern int ext2_acl_chmod (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#741: FILE: fs/ext2/acl.h:64:
+extern int ext2_acl_chmod (struct inode *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#742: FILE: fs/ext2/acl.h:65:
+extern int ext2_init_acl (struct inode *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#742: FILE: fs/ext2/acl.h:65:
+extern int ext2_init_acl (struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#742: FILE: fs/ext2/acl.h:65:
+extern int ext2_init_acl (struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#742: FILE: fs/ext2/acl.h:65:
+extern int ext2_init_acl (struct inode *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#744: FILE: fs/ext2/acl.h:67:
+extern int init_ext2_acl(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#745: FILE: fs/ext2/acl.h:68:
+extern void exit_ext2_acl(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#754: FILE: fs/ext2/acl.h:77:
+ext2_acl_chmod (struct inode *inode)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#759: FILE: fs/ext2/acl.h:82:
+static inline int ext2_init_acl (struct inode *inode, struct inode *dir)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#784: FILE: fs/ext2/ext2.h:85:
+extern int ext2_setattr (struct dentry *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#784: FILE: fs/ext2/ext2.h:85:
+extern int ext2_setattr (struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#784: FILE: fs/ext2/ext2.h:85:
+extern int ext2_setattr (struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#784: FILE: fs/ext2/ext2.h:85:
+extern int ext2_setattr (struct dentry *, struct iattr *);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#874: FILE: fs/ext2/ialloc.c:416:
+	iput(inode);
 	^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1051: FILE: fs/ext2/super.c:268:
 		else
[...]
+		if (!strcmp(this_char, "acl"))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1058: FILE: fs/ext2/super.c:275:
+		else
[...]
 		if (!strcmp (this_char, "bsddf"))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 92 warnings, 25 checks, 1041 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
