WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
In order to support the specific board, we have ported the generic SPI core to the 2.6 kernel. This core provides basic API to create/manage SPI devices like the I2C core does. We need to continue providing support of SPI devices and would like to maintain the SPI subtree. It would be nice if SPI core patch were applied to the vanilla kernel.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#46: FILE: drivers/spi/Kconfig:7:
+config SPI
+	tristate "SPI support"
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#49: FILE: drivers/spi/Kconfig:10:
+config SPI_ALGOBIT
+	tristate "SPI bit-banging interfaces"
+	depends on SPI
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: drivers/spi/Kconfig:23:
+^I  This support is also available as a module.  If so, the module $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: drivers/spi/spi-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#87: FILE: drivers/spi/spi-core.c:2:
+ *  linux/drivers/spi/spi-core.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#198: FILE: drivers/spi/spi-core.c:113:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#329: FILE: drivers/spi/spi-core.c:244:
+		printk(KERN_ERR "%s: unable to get adapter: %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#329: FILE: drivers/spi/spi-core.c:244:
+		printk(KERN_ERR "%s: unable to get adapter: %d\n", __FUNCTION__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#332: FILE: drivers/spi/spi-core.c:247:
+		printk(KERN_ERR "%s: unable to get driver: %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#332: FILE: drivers/spi/spi-core.c:247:
+		printk(KERN_ERR "%s: unable to get driver: %s\n", __FUNCTION__,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#391: FILE: drivers/spi/spi-core.c:306:
+	int ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#455: FILE: drivers/spi/spi-core.c:370:
+EXPORT_SYMBOL(spi_add_adapter);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#456: FILE: drivers/spi/spi-core.c:371:
+EXPORT_SYMBOL(spi_del_adapter);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#457: FILE: drivers/spi/spi-core.c:372:
+EXPORT_SYMBOL(spi_get_adapter);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#458: FILE: drivers/spi/spi-core.c:373:
+EXPORT_SYMBOL(spi_put_adapter);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#460: FILE: drivers/spi/spi-core.c:375:
+EXPORT_SYMBOL(spi_add_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#461: FILE: drivers/spi/spi-core.c:376:
+EXPORT_SYMBOL(spi_del_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#462: FILE: drivers/spi/spi-core.c:377:
+EXPORT_SYMBOL(spi_get_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#463: FILE: drivers/spi/spi-core.c:378:
+EXPORT_SYMBOL(spi_put_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#465: FILE: drivers/spi/spi-core.c:380:
+EXPORT_SYMBOL(spi_attach_client);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#466: FILE: drivers/spi/spi-core.c:381:
+EXPORT_SYMBOL(spi_detach_client);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#468: FILE: drivers/spi/spi-core.c:383:
+EXPORT_SYMBOL(spi_transfer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#469: FILE: drivers/spi/spi-core.c:384:
+EXPORT_SYMBOL(spi_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#470: FILE: drivers/spi/spi-core.c:385:
+EXPORT_SYMBOL(spi_read);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#475: FILE: drivers/spi/spi-dev.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: drivers/spi/spi-dev.c:2:
+    spi-dev.c - spi-bus driver, char device interface  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#476: FILE: drivers/spi/spi-dev.c:2:
+/*
+    spi-dev.c - spi-bus driver, char device interface  

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#493: FILE: drivers/spi/spi-dev.c:19:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#494: FILE: drivers/spi/spi-dev.c:20:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#500: FILE: drivers/spi/spi-dev.c:26:
+/* Note that this is a complete rewrite of Simon Vogl's i2c-dev module.
+   But I have used so much of his original code and ideas that it seems

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: drivers/spi/spi-dev.c:27:
+   only fair to recognize him as co-author -- Frodo */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: drivers/spi/spi-dev.c:29:
+/* The devfs code is contributed by Philipp Matthias Hahn $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#504: FILE: drivers/spi/spi-dev.c:30:
+/* The devfs code is contributed by Philipp Matthias Hahn 
+   <pmhahn@titan.lahn.de> */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: drivers/spi/spi-dev.c:30:
+   <pmhahn@titan.lahn.de> */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: drivers/spi/spi-dev.c:32:
+/* Modifications to allow work with current spi-core by $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#507: FILE: drivers/spi/spi-dev.c:33:
+/* Modifications to allow work with current spi-core by 
+   Andrey Ivolgin <aivolgin@ru.mvista.com>, Sep 2004

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: drivers/spi/spi-dev.c:37:
+   by Vitaly Wool <vwool@ru.mvista.com> (C) 2004 MontaVista Software, Inc. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#511: FILE: drivers/spi/spi-dev.c:37:
+/* devfs code corrected to support automatic device addition/deletion
+   by Vitaly Wool <vwool@ru.mvista.com> (C) 2004 MontaVista Software, Inc. 

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#514: FILE: drivers/spi/spi-dev.c:40:
+/* $Id: cee_lsp-philips-melody.patch,v 1.1.4.8 2005/02/25 10:20:15 wool Exp $ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#533: FILE: drivers/spi/spi-dev.c:59:
+#define DBG(args...)	printk(KERN_INFO"spi-dev.o: " args)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#533: FILE: drivers/spi/spi-dev.c:59:
+#define DBG(args...)	printk(KERN_INFO"spi-dev.o: " args)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#539: FILE: drivers/spi/spi-dev.c:65:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#545: FILE: drivers/spi/spi-dev.c:71:
+extern struct spi_adapter *spi_get_adapter(int id);	/* spi-core.c ? */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#546: FILE: drivers/spi/spi-dev.c:72:
+extern void spi_put_adapter(struct spi_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#546: FILE: drivers/spi/spi-dev.c:72:
+extern void spi_put_adapter(struct spi_adapter *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#551: FILE: drivers/spi/spi-dev.c:77:
+			   loff_t * offset);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#553: FILE: drivers/spi/spi-dev.c:79:
+			    loff_t * offset);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#564: FILE: drivers/spi/spi-dev.c:90:
+static struct file_operations spidev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#565: FILE: drivers/spi/spi-dev.c:91:
+      owner:THIS_MODULE,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#566: FILE: drivers/spi/spi-dev.c:92:
+      llseek:no_llseek,
             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#566: FILE: drivers/spi/spi-dev.c:92:
+      llseek:no_llseek,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#567: FILE: drivers/spi/spi-dev.c:93:
+      read:spidev_read,
           ^

WARNING:INDENTED_LABEL: labels should not be indented
#567: FILE: drivers/spi/spi-dev.c:93:
+      read:spidev_read,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#568: FILE: drivers/spi/spi-dev.c:94:
+      write:spidev_write,
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#568: FILE: drivers/spi/spi-dev.c:94:
+      write:spidev_write,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#569: FILE: drivers/spi/spi-dev.c:95:
+      open:spidev_open,
           ^

WARNING:INDENTED_LABEL: labels should not be indented
#569: FILE: drivers/spi/spi-dev.c:95:
+      open:spidev_open,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#570: FILE: drivers/spi/spi-dev.c:96:
+      release:spidev_release,
              ^

WARNING:INDENTED_LABEL: labels should not be indented
#570: FILE: drivers/spi/spi-dev.c:96:
+      release:spidev_release,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#571: FILE: drivers/spi/spi-dev.c:97:
+      ioctl:spidev_ioctl,
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#571: FILE: drivers/spi/spi-dev.c:97:
+      ioctl:spidev_ioctl,

WARNING:INDENTED_LABEL: labels should not be indented
#575: FILE: drivers/spi/spi-dev.c:101:
+      name:"spi",

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#576: FILE: drivers/spi/spi-dev.c:102:
+      attach_adapter:spidev_attach_adapter,
                     ^

WARNING:INDENTED_LABEL: labels should not be indented
#576: FILE: drivers/spi/spi-dev.c:102:
+      attach_adapter:spidev_attach_adapter,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#577: FILE: drivers/spi/spi-dev.c:103:
+      detach_adapter:spidev_detach_adapter,
                     ^

WARNING:INDENTED_LABEL: labels should not be indented
#577: FILE: drivers/spi/spi-dev.c:103:
+      detach_adapter:spidev_detach_adapter,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#578: FILE: drivers/spi/spi-dev.c:104:
+      owner:THIS_MODULE,
            ^

WARNING:INDENTED_LABEL: labels should not be indented
#578: FILE: drivers/spi/spi-dev.c:104:
+      owner:THIS_MODULE,

ERROR:SPACING: space required before that '&' (ctx:OxV)
#582: FILE: drivers/spi/spi-dev.c:108:
+      driver:&spidev_driver
              ^

WARNING:INDENTED_LABEL: labels should not be indented
#582: FILE: drivers/spi/spi-dev.c:108:
+      driver:&spidev_driver

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#598: FILE: drivers/spi/spi-dev.c:124:
+struct spi_dev *spi_dev_get_by_minor(unsigned index)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'spi_dev_array[adap->nr]'
#613: FILE: drivers/spi/spi-dev.c:139:
+	if ((spi_dev_array[adap->nr]) &&
+	    (spi_dev_array[adap->nr]->adap == adap))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'spi_dev_array[adap->nr]->adap == adap'
#613: FILE: drivers/spi/spi-dev.c:139:
+	if ((spi_dev_array[adap->nr]) &&
+	    (spi_dev_array[adap->nr]->adap == adap))

WARNING:INDENTED_LABEL: labels should not be indented
#640: FILE: drivers/spi/spi-dev.c:166:
+      error:

WARNING:LINE_SPACING: Missing a blank line after declarations
#655: FILE: drivers/spi/spi-dev.c:181:
+	struct spi_dev *spi_dev = to_spi_dev(class_dev);
+	return print_dev_t(buf, MKDEV(SPI_MAJOR, spi_dev->minor));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#658: FILE: drivers/spi/spi-dev.c:184:
+static CLASS_DEVICE_ATTR(dev, S_IRUGO, show_dev, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#663: FILE: drivers/spi/spi-dev.c:189:
+	struct spi_dev *spi_dev = to_spi_dev(class_dev);
+	return sprintf(buf, "%s\n", spi_dev->adap->name);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#666: FILE: drivers/spi/spi-dev.c:192:
+static CLASS_DEVICE_ATTR(name, S_IRUGO, show_adapter_name, NULL);

WARNING:SPACING: Unnecessary space before function pointer arguments
#675: FILE: drivers/spi/spi-dev.c:201:
+	unsigned long (*cpy_to_user) (void *to_user, const void *from,

WARNING:SPACING: Unnecessary space before function pointer arguments
#677: FILE: drivers/spi/spi-dev.c:203:
+	unsigned long (*cpy_from_user) (void *to, const void *from_user,

WARNING:SPACING: Unnecessary space before function pointer arguments
#679: FILE: drivers/spi/spi-dev.c:205:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#679: FILE: drivers/spi/spi-dev.c:205:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#679: FILE: drivers/spi/spi-dev.c:205:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#680: FILE: drivers/spi/spi-dev.c:206:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#680: FILE: drivers/spi/spi-dev.c:206:
+	void (*free) (const void *);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'client->adapter->copy_to_user'
#687: FILE: drivers/spi/spi-dev.c:213:
+	    client->adapter->copy_to_user ? client->adapter->
+	    copy_to_user : copy_to_user;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'client->adapter->copy_from_user'
#690: FILE: drivers/spi/spi-dev.c:216:
+	    client->adapter->copy_from_user ? client->adapter->
+	    copy_from_user : copy_from_user;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#701: FILE: drivers/spi/spi-dev.c:227:
+		rdwr_pa = (struct spi_msg *)
+		    kmalloc(rdwr_arg.nmsgs * sizeof(struct spi_msg),
+			    GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rdwr_pa"
#705: FILE: drivers/spi/spi-dev.c:231:
+		if (rdwr_pa == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rdwr_pa[i]
#710: FILE: drivers/spi/spi-dev.c:236:
+			if (copy_from_user(&(rdwr_pa[i]),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rdwr_arg.msgs[i]
#711: FILE: drivers/spi/spi-dev.c:237:
+					   &(rdwr_arg.msgs[i]),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rdwr_pa[i].buf"
#717: FILE: drivers/spi/spi-dev.c:243:
+			if (rdwr_pa[i].buf == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#756: FILE: drivers/spi/spi-dev.c:282:
+	struct spi_dev *spi_dev = to_spi_dev(dev);
+	complete(&spi_dev->released);

ERROR:SPACING: space prohibited after that open parenthesis '('
#773: FILE: drivers/spi/spi-dev.c:299:
+#if defined( CONFIG_DEVFS_FS )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#773: FILE: drivers/spi/spi-dev.c:299:
+#if defined( CONFIG_DEVFS_FS )

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#775: FILE: drivers/spi/spi-dev.c:301:
+		      S_IFCHR | S_IRUSR | S_IWUSR, "spi/%d", spi_dev->minor);

WARNING:INDENTED_LABEL: labels should not be indented
#794: FILE: drivers/spi/spi-dev.c:320:
+      error:

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#799: FILE: drivers/spi/spi-dev.c:325:
+
+}

ERROR:SPACING: space prohibited after that open parenthesis '('
#810: FILE: drivers/spi/spi-dev.c:336:
+#if defined( CONFIG_DEVFS_FS )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#810: FILE: drivers/spi/spi-dev.c:336:
+#if defined( CONFIG_DEVFS_FS )

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#821: FILE: drivers/spi/spi-dev.c:347:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#824: FILE: drivers/spi/spi-dev.c:350:
+			   loff_t * offset)

WARNING:SPACING: Unnecessary space before function pointer arguments
#833: FILE: drivers/spi/spi-dev.c:359:
+	unsigned long (*cpy_to_user) (void *to_user, const void *from,

WARNING:SPACING: Unnecessary space before function pointer arguments
#835: FILE: drivers/spi/spi-dev.c:361:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#835: FILE: drivers/spi/spi-dev.c:361:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#835: FILE: drivers/spi/spi-dev.c:361:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#836: FILE: drivers/spi/spi-dev.c:362:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#836: FILE: drivers/spi/spi-dev.c:362:
+	void (*free) (const void *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#837: FILE: drivers/spi/spi-dev.c:363:
+	void (*free) (const void *);
+	if (count > SPI_TRANSFER_MAX)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'client->adapter->copy_to_user'
#842: FILE: drivers/spi/spi-dev.c:368:
+	    client->adapter->copy_to_user ? client->adapter->
+	    copy_to_user : copy_to_user;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#848: FILE: drivers/spi/spi-dev.c:374:
+	if (tmp == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#861: FILE: drivers/spi/spi-dev.c:387:
+			    loff_t * offset)

WARNING:SPACING: Unnecessary space before function pointer arguments
#869: FILE: drivers/spi/spi-dev.c:395:
+	unsigned long (*cpy_from_user) (void *to, const void *from_user,

WARNING:SPACING: Unnecessary space before function pointer arguments
#871: FILE: drivers/spi/spi-dev.c:397:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#871: FILE: drivers/spi/spi-dev.c:397:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#871: FILE: drivers/spi/spi-dev.c:397:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#872: FILE: drivers/spi/spi-dev.c:398:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#872: FILE: drivers/spi/spi-dev.c:398:
+	void (*free) (const void *);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'client->adapter->copy_from_user'
#879: FILE: drivers/spi/spi-dev.c:405:
+	    client->adapter->copy_from_user ? client->adapter->
+	    copy_from_user : copy_from_user;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#885: FILE: drivers/spi/spi-dev.c:411:
+	if (tmp == NULL)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#927: FILE: drivers/spi/spi-dev.c:453:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#944: FILE: drivers/spi/spi-dev.c:470:
+	printk(KERN_INFO "spi /dev entries driver\n");

WARNING:INDENTED_LABEL: labels should not be indented
#963: FILE: drivers/spi/spi-dev.c:489:
+      out_unreg_class:

WARNING:INDENTED_LABEL: labels should not be indented
#965: FILE: drivers/spi/spi-dev.c:491:
+      out_unreg_chrdev:

WARNING:INDENTED_LABEL: labels should not be indented
#967: FILE: drivers/spi/spi-dev.c:493:
+      out:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#968: FILE: drivers/spi/spi-dev.c:494:
+	printk(KERN_ERR "%s: Driver Initialisation failed\n", __FILE__);

WARNING:LONG_LINE_STRING: line length of 121 exceeds 100 columns
#983: FILE: drivers/spi/spi-dev.c:509:
+    ("Jamey Hicks <jamey.hicks@compaq.com> Frodo Looijaard <frodol@dds.nl> and Simon G. Vogl <simon@tk.uni-linz.ac.at>");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: drivers/spi/spi-dev.c:509:
+    ("Jamey Hicks <jamey.hicks@compaq.com> Frodo Looijaard <frodol@dds.nl> and Simon G. Vogl <simon@tk.uni-linz.ac.at>");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#993: FILE: include/linux/spi/spi.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#994: FILE: include/linux/spi/spi.h:2:
+ *  linux/include/linux/spi/spi.h

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1028: FILE: include/linux/spi/spi.h:36:
+};
+/*------------^^^^^^^^^^^^^^^--------------*/

WARNING:SPACING: Unnecessary space before function pointer arguments
#1042: FILE: include/linux/spi/spi.h:50:
+	int (*open) (struct spi_client *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1042: FILE: include/linux/spi/spi.h:50:
+	int (*open) (struct spi_client *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1043: FILE: include/linux/spi/spi.h:51:
+	int (*command) (struct spi_client *, int cmd, void *arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1043: FILE: include/linux/spi/spi.h:51:
+	int (*command) (struct spi_client *, int cmd, void *arg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1044: FILE: include/linux/spi/spi.h:52:
+	void (*close) (struct spi_client *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1044: FILE: include/linux/spi/spi.h:52:
+	void (*close) (struct spi_client *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1061: FILE: include/linux/spi/spi.h:69:
+	int (*attach_adapter) (struct spi_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#1061: FILE: include/linux/spi/spi.h:69:
+	int (*attach_adapter) (struct spi_adapter *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1065: FILE: include/linux/spi/spi.h:73:
+	int (*detach_adapter) (struct spi_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#1065: FILE: include/linux/spi/spi.h:73:
+	int (*detach_adapter) (struct spi_adapter *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1073: FILE: include/linux/spi/spi.h:81:
+	int (*attach_client) (struct spi_client *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1073: FILE: include/linux/spi/spi.h:81:
+	int (*attach_client) (struct spi_client *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1081: FILE: include/linux/spi/spi.h:89:
+	void (*detach_client) (struct spi_client *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1081: FILE: include/linux/spi/spi.h:89:
+	void (*detach_client) (struct spi_client *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: include/linux/spi/spi.h:97:
+^I * Module structure, if any.    $

WARNING:SPACING: Unnecessary space before function pointer arguments
#1106: FILE: include/linux/spi/spi.h:114:
+	int (*xfer) (struct spi_adapter *, struct spi_msg msgs[], int num);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#1106: FILE: include/linux/spi/spi.h:114:
+	int (*xfer) (struct spi_adapter *, struct spi_msg msgs[], int num);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1160: FILE: include/linux/spi/spi.h:168:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1160: FILE: include/linux/spi/spi.h:168:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1160: FILE: include/linux/spi/spi.h:168:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1161: FILE: include/linux/spi/spi.h:169:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1161: FILE: include/linux/spi/spi.h:169:
+	void (*free) (const void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1167: FILE: include/linux/spi/spi.h:175:
+	unsigned long (*copy_from_user) (void *to, const void *from_user,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1169: FILE: include/linux/spi/spi.h:177:
+	unsigned long (*copy_to_user) (void *to_user, const void *from,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: include/linux/spi/spi.h:191:
+ * spi_client identifies a single device (i.e. chip) that is connected to an $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1194: FILE: include/linux/spi/spi.h:202:
+extern int spi_add_adapter(struct spi_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#1194: FILE: include/linux/spi/spi.h:202:
+extern int spi_add_adapter(struct spi_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1195: FILE: include/linux/spi/spi.h:203:
+extern int spi_del_adapter(struct spi_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#1195: FILE: include/linux/spi/spi.h:203:
+extern int spi_del_adapter(struct spi_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1197: FILE: include/linux/spi/spi.h:205:
+extern int spi_add_driver(struct spi_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#1197: FILE: include/linux/spi/spi.h:205:
+extern int spi_add_driver(struct spi_driver *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1198: FILE: include/linux/spi/spi.h:206:
+extern int spi_del_driver(struct spi_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#1198: FILE: include/linux/spi/spi.h:206:
+extern int spi_del_driver(struct spi_driver *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1200: FILE: include/linux/spi/spi.h:208:
+extern int spi_attach_client(struct spi_client *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1200: FILE: include/linux/spi/spi.h:208:
+extern int spi_attach_client(struct spi_client *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1200: FILE: include/linux/spi/spi.h:208:
+extern int spi_attach_client(struct spi_client *, int, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1200: FILE: include/linux/spi/spi.h:208:
+extern int spi_attach_client(struct spi_client *, int, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: include/linux/spi/spi.h:209:
+extern int spi_detach_client(struct spi_client *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1201: FILE: include/linux/spi/spi.h:209:
+extern int spi_detach_client(struct spi_client *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1203: FILE: include/linux/spi/spi.h:211:
+extern int spi_transfer(struct spi_adapter *, struct spi_msg msgs[], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_adapter *' should also have an identifier name
#1203: FILE: include/linux/spi/spi.h:211:
+extern int spi_transfer(struct spi_adapter *, struct spi_msg msgs[], int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1203: FILE: include/linux/spi/spi.h:211:
+extern int spi_transfer(struct spi_adapter *, struct spi_msg msgs[], int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1204: FILE: include/linux/spi/spi.h:212:
+extern int spi_write(struct spi_client *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1204: FILE: include/linux/spi/spi.h:212:
+extern int spi_write(struct spi_client *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1204: FILE: include/linux/spi/spi.h:212:
+extern int spi_write(struct spi_client *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1204: FILE: include/linux/spi/spi.h:212:
+extern int spi_write(struct spi_client *, int, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1204: FILE: include/linux/spi/spi.h:212:
+extern int spi_write(struct spi_client *, int, const char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1205: FILE: include/linux/spi/spi.h:213:
+extern int spi_read(struct spi_client *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_client *' should also have an identifier name
#1205: FILE: include/linux/spi/spi.h:213:
+extern int spi_read(struct spi_client *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1205: FILE: include/linux/spi/spi.h:213:
+extern int spi_read(struct spi_client *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1205: FILE: include/linux/spi/spi.h:213:
+extern int spi_read(struct spi_client *, int, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1205: FILE: include/linux/spi/spi.h:213:
+extern int spi_read(struct spi_client *, int, char *, int);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1252: FILE: include/linux/spi/spi.h:260:
+	struct spi_ops *ops = clnt->driver->ops;
+	if (ops && ops->close)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179767.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 135 warnings, 32 checks, 1202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179767.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
