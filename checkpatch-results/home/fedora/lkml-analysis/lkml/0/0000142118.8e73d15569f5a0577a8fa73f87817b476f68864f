CHECK:LINE_SPACING: Please don't use multiple blank lines
#67: FILE: drivers/char/ipmi/ipmi_msghandler.c:68:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#94: FILE: drivers/char/ipmi/ipmi_msghandler.c:106:
+	 * every individual deletion of a command. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#113: FILE: drivers/char/ipmi/ipmi_msghandler.c:174:
+	 * protects this. */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#123: FILE: drivers/char/ipmi/ipmi_msghandler.c:212:
+	spinlock_t       cmd_rcvrs_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#133: FILE: drivers/char/ipmi/ipmi_msghandler.c:317:
+ * a slot doesn't get reused too quickly. */

CHECK:SPACING: No space is necessary after a cast
#134: FILE: drivers/char/ipmi/ipmi_msghandler.c:318:
+#define IPMI_INVALID_INTERFACE_ENTRY ((ipmi_smi_t) ((long) 1))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long) 1' could be '1L'
#134: FILE: drivers/char/ipmi/ipmi_msghandler.c:318:
+#define IPMI_INVALID_INTERFACE_ENTRY ((ipmi_smi_t) ((long) 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#135: FILE: drivers/char/ipmi/ipmi_msghandler.c:319:
+#define IPMI_INVALID_INTERFACE(i) (((i) == NULL) \
+				   || (i == IPMI_INVALID_INTERFACE_ENTRY))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#136: FILE: drivers/char/ipmi/ipmi_msghandler.c:320:
+#define IPMI_INVALID_INTERFACE(i) (((i) == NULL) \
+				   || (i == IPMI_INVALID_INTERFACE_ENTRY))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: drivers/char/ipmi/ipmi_msghandler.c:333:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#178: FILE: drivers/char/ipmi/ipmi_msghandler.c:355:
+	 * interface and wait for RCU to know that none are in use. */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#189: FILE: drivers/char/ipmi/ipmi_msghandler.c:366:
+		if ((intf->seq_table[i].inuse)
+		    && (intf->seq_table[i].recv_msg))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'intf->seq_table[i].inuse'
#189: FILE: drivers/char/ipmi/ipmi_msghandler.c:366:
+		if ((intf->seq_table[i].inuse)
+		    && (intf->seq_table[i].recv_msg))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'intf->seq_table[i].recv_msg'
#189: FILE: drivers/char/ipmi/ipmi_msghandler.c:366:
+		if ((intf->seq_table[i].inuse)
+		    && (intf->seq_table[i].recv_msg))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#190: FILE: drivers/char/ipmi/ipmi_msghandler.c:367:
+		if ((intf->seq_table[i].inuse)
+		    && (intf->seq_table[i].recv_msg))

WARNING:LINE_SPACING: Missing a blank line after declarations
#221: FILE: drivers/char/ipmi/ipmi_msghandler.c:393:
+		ipmi_smi_t intf = ipmi_interfaces[i];
+		if (IPMI_INVALID_INTERFACE(intf))

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: drivers/char/ipmi/ipmi_msghandler.c:545:
+		ipmi_user_t user = msg->user;
+		user->handler->ipmi_recv_hndl(msg, user->handler_data);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'if_num >= MAX_IPMI_INTERFACES'
#255: FILE: drivers/char/ipmi/ipmi_msghandler.c:737:
+	if ((if_num >= MAX_IPMI_INTERFACES) || IPMI_INVALID_INTERFACE(intf)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: drivers/char/ipmi/ipmi_msghandler.c:781:
+	ipmi_user_t user = container_of(ref, struct ipmi_user, refcount);
+	kfree(user);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'intf->seq_table[i].recv_msg->user == user'
#351: FILE: drivers/char/ipmi/ipmi_msghandler.c:801:
+		if (intf->seq_table[i].inuse
+		    && (intf->seq_table[i].recv_msg->user == user))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#352: FILE: drivers/char/ipmi/ipmi_msghandler.c:802:
+		if (intf->seq_table[i].inuse
+		    && (intf->seq_table[i].recv_msg->user == user))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rcvr->netfn == netfn'
#473: FILE: drivers/char/ipmi/ipmi_msghandler.c:930:
+		if ((rcvr->netfn == netfn) && (rcvr->cmd == cmd))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rcvr->cmd == cmd'
#473: FILE: drivers/char/ipmi/ipmi_msghandler.c:930:
+		if ((rcvr->netfn == netfn) && (rcvr->cmd == cmd))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rcvr->user == user'
#553: FILE: drivers/char/ipmi/ipmi_msghandler.c:981:
+	if ((rcvr) && (rcvr->user == user)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#559: FILE: drivers/char/ipmi/ipmi_msghandler.c:987:
+		return 0;
+	} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: drivers/char/ipmi/ipmi_msghandler.c:996:
+	ipmi_smi_t intf = user->intf;
+	intf->handlers->set_run_to_completion(intf->send_info, val);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#769: FILE: drivers/char/ipmi/ipmi_msghandler.c:1884:
+	/* FIXME - this is an ugly kludge, this sets the intf for the
+	   caller before sending any messages with it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#769: FILE: drivers/char/ipmi/ipmi_msghandler.c:1884:
+	   caller before sending any messages with it. */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#772: FILE: drivers/char/ipmi/ipmi_msghandler.c:1887:
+	if ((version_major > 1)
+	    || ((version_major == 1) && (version_minor >= 5)))
+	{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'version_major > 1'
#772: FILE: drivers/char/ipmi/ipmi_msghandler.c:1887:
+	if ((version_major > 1)
+	    || ((version_major == 1) && (version_minor >= 5)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'version_major == 1'
#772: FILE: drivers/char/ipmi/ipmi_msghandler.c:1887:
+	if ((version_major > 1)
+	    || ((version_major == 1) && (version_minor >= 5)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'version_minor >= 5'
#772: FILE: drivers/char/ipmi/ipmi_msghandler.c:1887:
+	if ((version_major > 1)
+	    || ((version_major == 1) && (version_minor >= 5)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#773: FILE: drivers/char/ipmi/ipmi_msghandler.c:1888:
+	if ((version_major > 1)
+	    || ((version_major == 1) && (version_minor >= 5)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#776: FILE: drivers/char/ipmi/ipmi_msghandler.c:1891:
+		/* Start scanning the channels to see what is
+		   available. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#776: FILE: drivers/char/ipmi/ipmi_msghandler.c:1891:
+		   available. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#885: FILE: drivers/char/ipmi/ipmi_msghandler.c:1940:
+			 * are done. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#894: FILE: drivers/char/ipmi/ipmi_msghandler.c:1946:
+	spin_unlock_irqrestore(&interfaces_lock,flags);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#917: FILE: drivers/char/ipmi/ipmi_msghandler.c:1963:
+	spin_unlock_irqrestore(&interfaces_lock,flags);
 	                                       ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#962: FILE: drivers/char/ipmi/ipmi_msghandler.c:2063:
+	if (rcvr) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#965: FILE: drivers/char/ipmi/ipmi_msghandler.c:2066:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1018: FILE: drivers/char/ipmi/ipmi_msghandler.c:2243:
+	if (rcvr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1021: FILE: drivers/char/ipmi/ipmi_msghandler.c:2246:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1157: FILE: drivers/char/ipmi/ipmi_msghandler.c:2605:
 	if ((msg->data_size >= 2)
 	    && (msg->data[0] == (IPMI_NETFN_APP_REQUEST << 2))
 	    && (msg->data[1] == IPMI_SEND_MSG_CMD)
+	    && (msg->user_data == NULL))
+	{

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1161: FILE: drivers/char/ipmi/ipmi_msghandler.c:2608:
 	    && (msg->data[1] == IPMI_SEND_MSG_CMD)
+	    && (msg->user_data == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg->user_data"
#1161: FILE: drivers/char/ipmi/ipmi_msghandler.c:2608:
+	    && (msg->user_data == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1265: FILE: drivers/char/ipmi/ipmi_msghandler.c:2754:
+		/* Start with the max timer, set to normal
+		   timer after the message is sent. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1265: FILE: drivers/char/ipmi/ipmi_msghandler.c:2754:
+		   timer after the message is sent. */

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1277: FILE: drivers/char/ipmi/ipmi_msghandler.c:2766:
+		if (! smi_msg)
 		    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1285: FILE: drivers/char/ipmi/ipmi_msghandler.c:2774:
+		 * local MC, which don't get resent. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around intf->seq_table[j]
#1384: FILE: drivers/char/ipmi/ipmi_msghandler.c:2819:
+			check_msg_timeout(intf, &(intf->seq_table[j]),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 18 warnings, 26 checks, 1387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
