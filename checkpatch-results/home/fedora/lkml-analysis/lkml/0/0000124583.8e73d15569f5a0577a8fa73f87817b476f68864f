WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#40: 
uptodate and clean pages in the page or swap cache have state volatile,
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#44: 
can immediatly be reused at the time of the transition to unused state.
    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'indepedent' may be misspelled - perhaps 'independent'?
#85: 
   indication is indepedent from the hardware dirty bit. We must not
                 ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#92: 
7) The page is not uptodate. The i/o to get the page uptodate has not
                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#92: 
7) The page is not uptodate. The i/o to get the page uptodate has not
                                                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#94: 
   been uptodate once.
        ^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
#01 - #10 becomes false would be the 100% solution. We can be a bit

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#237: FILE: include/linux/mm.h:309:
+#define put_page_testzero(p)					\
+	({							\
+		int ret;					\
+		BUG_ON(page_count(p) == 0);			\
+		ret = atomic_add_negative(-1, &(p)->_count);	\
+		if (!ret)					\
+			page_hva_make_volatile(p, 1);		\
+		ret;						\
+	})

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: include/linux/mm.h:312:
+		BUG_ON(page_count(p) == 0);			\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: include/linux/page_hva.h:1:
+#ifndef _LINUX_PAGE_HVA_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#295: FILE: include/linux/page_hva.h:5:
+ * include/linux/page_hva.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: include/linux/page_hva.h:19:
+extern int page_hva_make_stable(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#310: FILE: include/linux/page_hva.h:20:
+extern void page_hva_discard_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#311: FILE: include/linux/page_hva.h:21:
+extern void __page_hva_discard_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/page_hva.h:22:
+extern void __page_hva_make_volatile(struct page *page, unsigned int offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/page_hva.h:23:
+extern void page_hva_unmap_all(struct page *page);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: include/linux/page_hva.h:40:
+#define page_hva_make_volatile(_page,_offset)	do { } while (0)
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == VM_FAULT_OOM'
#550: FILE: mm/memory.c:1977:
+		if ((rc == VM_FAULT_OOM) || (rc == VM_FAULT_DISCARD))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == VM_FAULT_DISCARD'
#550: FILE: mm/memory.c:1977:
+		if ((rc == VM_FAULT_OOM) || (rc == VM_FAULT_DISCARD))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#591: FILE: mm/page_alloc.c:171:
+			1 << PG_discarded );

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#614: FILE: mm/page_alloc.c:446:
+		page_hva_set_unused(page+i);
 		                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#649: FILE: mm/page_alloc.c:839:
+		page_hva_set_stable(page+i);
 		                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#657: FILE: mm/page_hva.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#658: FILE: mm/page_hva.c:2:
+ * mm/page_hva.c

ERROR:SPACING: space required after that ',' (ctx:VxV)
#680: FILE: mm/page_hva.c:24:
+static inline int __page_hva_discardable(struct page *page,unsigned int offset)
                                                           ^

WARNING:TYPO_SPELLING: 'makeing' may be misspelled - perhaps 'making'?
#696: FILE: mm/page_hva.c:40:
+	 * If the page has been truncated there is no point in makeing
 	                                                       ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#832: FILE: mm/rmap.c:524:
+	struct mm_struct * mm = vma->vm_mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#835: FILE: mm/rmap.c:527:
+	spinlock_t *ptl;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#845: FILE: mm/rmap.c:537:
+	BUG_ON(vma->vm_flags & (VM_LOCKED|VM_RESERVED));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#845: FILE: mm/rmap.c:537:
+	BUG_ON(vma->vm_flags & (VM_LOCKED|VM_RESERVED));
 	                                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#852: FILE: mm/rmap.c:544:
+	BUG_ON(pte_dirty(pteval));

CHECK:BRACES: braces {} should be used on all arms of this statement
#857: FILE: mm/rmap.c:549:
+	if (PageAnon(page)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#863: FILE: mm/rmap.c:555:
+		BUG_ON(!PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#872: FILE: mm/rmap.c:564:
+		BUG_ON(pte_file(*pte));

CHECK:BRACES: Unbalanced braces around else statement
#874: FILE: mm/rmap.c:566:
+	} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#933: FILE: mm/rmap.c:625:
+void page_hva_unmap_all(struct page* page)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#940: FILE: mm/rmap.c:632:
+	BUG_ON(PageReserved(page) || PageAnon(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: mm/rmap.c:645:
+	list_for_each_entry(vma, &mapping->i_mmap_nonlinear,
+						shared.vm_set.list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1039: FILE: mm/vmscan.c:626:
+	BUG_ON(PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1042: FILE: mm/vmscan.c:629:
+	BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1045: FILE: mm/vmscan.c:632:
+	BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1049: FILE: mm/vmscan.c:636:
+	BUG_ON(!mapping);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1056: FILE: mm/vmscan.c:643:
+		swp_entry_t swap = { .val = page_private(page) };
+		__delete_from_swap_cache(page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1070: FILE: mm/vmscan.c:657:
+^I__put_page(page); ^I/* Pagecache ref */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124583.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 24 warnings, 15 checks, 802 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124583.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
