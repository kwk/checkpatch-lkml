WARNING:TYPO_SPELLING: 'susbsystems' may be misspelled - perhaps 'subsystems'?
#29: 
Leave the overloaded "hotplug" word to susbsystems which are handling
                                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: block/genhd.c:466:
+static int block_uevent(struct kset *kset, struct kobject *kobj, char **envp,
 			 int num_envp, char *buffer, int buffer_size)

WARNING:CONST_STRUCT: struct kset_uevent_ops should normally be const
#258: FILE: block/genhd.c:523:
+static struct kset_uevent_ops block_uevent_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: drivers/acpi/scan.c:82:
+static int namespace_uevent(struct kset *kset, struct kobject *kobj,
 			     char **envp, int num_envp, char *buffer,

WARNING:CONST_STRUCT: struct kset_uevent_ops should normally be const
#367: FILE: drivers/acpi/scan.c:101:
+static struct kset_uevent_ops namespace_uevent_ops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: drivers/base/class.c:182:
+static int class_device_create_uevent(struct class_device *class_dev,
 				       char **envp, int num_envp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: drivers/base/class.c:354:
+static int class_uevent(struct kset *kset, struct kobject *kobj, char **envp,
 			 int num_envp, char *buffer, int buffer_size)

WARNING:CONST_STRUCT: struct kset_uevent_ops should normally be const
#523: FILE: drivers/base/class.c:417:
+static struct kset_uevent_ops class_uevent_ops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/base/core.c:113:
+static int dev_uevent(struct kset *kset, struct kobject *kobj, char **envp,
 			int num_envp, char *buffer, int buffer_size)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#631: FILE: drivers/base/core.c:142:
 			if (retval) {
+			pr_debug ("%s - uevent() returned %d\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#633: FILE: drivers/base/core.c:143:
+			pr_debug ("%s - uevent() returned %d\n",

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct kset_uevent_ops should normally be const
#645: FILE: drivers/base/core.c:151:
+static struct kset_uevent_ops device_uevent_ops = {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#725: FILE: drivers/base/firmware_class.c:88:
+int firmware_class_uevent(struct class_device *dev, char **envp,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: drivers/base/firmware_class.c:89:
+int firmware_class_uevent(struct class_device *dev, char **envp,
 			   int num_envp, char *buffer, int buffer_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: drivers/base/firmware_class.c:99:
+firmware_class_uevent(struct class_device *class_dev, char **envp,
 		       int num_envp, char *buffer, int buffer_size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#833: FILE: drivers/base/firmware_class.c:476:
+        int uevent = 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: drivers/base/firmware_class.c:476:
+        int uevent = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#834: FILE: drivers/base/firmware_class.c:477:
+        return _request_firmware(firmware_p, name, device, uevent);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#834: FILE: drivers/base/firmware_class.c:477:
+        int uevent = 1;
+        return _request_firmware(firmware_p, name, device, uevent);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: drivers/base/firmware_class.c:477:
+        return _request_firmware(firmware_p, name, device, uevent);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: drivers/base/memory.c:38:
+static int memory_uevent(struct kset *kset, struct kobject *kobj, char **envp,
 			int num_envp, char *buffer, int buffer_size)

WARNING:CONST_STRUCT: struct kset_uevent_ops should normally be const
#909: FILE: drivers/base/memory.c:45:
+static struct kset_uevent_ops memory_uevent_ops = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#986: FILE: drivers/ieee1394/nodemgr.c:1622:
+		 * this point. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: drivers/input/input.c:617:
+static int input_add_uevent_bm_var(char **envp, int num_envp, int *cur_index,
 				    char *buffer, int buffer_size, int *cur_len,

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1098: FILE: drivers/input/serio/serio.c:803:
+#define SERIO_ADD_UEVENT_VAR(fmt, val...)				\
 	do {								\
+		int err = add_uevent_var(envp, num_envp, &i,	\
 					buffer, buffer_size, &len,	\
 					fmt, val);			\
 		if (err)						\
 			return err;					\
 	} while (0)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1109: FILE: drivers/input/serio/serio.c:812:
+static int serio_uevent(struct device *dev, char **envp, int num_envp, char *buffer, int buffer_size)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1127: FILE: drivers/input/serio/serio.c:828:
+	SERIO_ADD_UEVENT_VAR("MODALIAS=serio:ty%02Xpr%02Xid%02Xex%02X",
 				serio->id.type, serio->id.proto, serio->id.id, serio->id.extra);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1133: FILE: drivers/input/serio/serio.c:833:
 }
+#undef SERIO_ADD_UEVENT_VAR

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1138: FILE: drivers/input/serio/serio.c:837:
+static int serio_uevent(struct device *dev, char **envp, int num_envp, char *buffer, int buffer_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: drivers/macintosh/macio_asic.c:132:
+static int macio_uevent(struct device *dev, char **envp, int num_envp,
                           char *buffer, int buffer_size)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: drivers/macintosh/macio_asic.c:206:
+       .uevent = macio_uevent,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: drivers/mmc/mmc_sysfs.c:84:
+mmc_bus_uevent(struct device *dev, char **envp, int num_envp, char *buf,
 		int buf_size)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1298: FILE: drivers/pci/pci.h:3:
+extern int pci_uevent(struct device *dev, char **envp, int num_envp,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1314: FILE: drivers/pcmcia/cs.c:905:
+^I^I^I        int num_envp, char *buffer, int buffer_size)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1314: FILE: drivers/pcmcia/cs.c:905:
+static int pcmcia_socket_uevent(struct class_device *dev, char **envp,
+			        int num_envp, char *buffer, int buffer_size)

WARNING:SPLIT_STRING: quoted string split across lines
#1390: FILE: drivers/pcmcia/ds.c:818:
+			   "MODALIAS=pcmcia:m%04Xc%04Xf%02Xfn%02Xpfn%02X"
+			   "pa%08Xpb%08Xpc%08Xpd%08X",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#1390: FILE: drivers/pcmcia/ds.c:818:
+			   "MODALIAS=pcmcia:m%04Xc%04Xf%02Xfn%02Xpfn%02X"
+			   "pa%08Xpb%08Xpc%08Xpd%08X",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1409: FILE: drivers/pcmcia/ds.c:838:
+static int pcmcia_bus_uevent(struct device *dev, char **envp, int num_envp,
 			      char *buffer, int buffer_size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1476: FILE: drivers/usb/core/usb.c:569:
+	pr_debug ("usb %s: uevent\n", dev->bus_id);

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#1505: FILE: drivers/usb/core/usb.c:607:
+			   le16_to_cpu(usb_dev->descriptor.idVendor),

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#1506: FILE: drivers/usb/core/usb.c:608:
+			   le16_to_cpu(usb_dev->descriptor.idProduct),

CHECK:CAMELCASE: Avoid CamelCase: <bcdDevice>
#1507: FILE: drivers/usb/core/usb.c:609:
+			   le16_to_cpu(usb_dev->descriptor.bcdDevice)))

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceClass>
#1520: FILE: drivers/usb/core/usb.c:616:
+			   usb_dev->descriptor.bDeviceClass,

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceSubClass>
#1521: FILE: drivers/usb/core/usb.c:617:
+			   usb_dev->descriptor.bDeviceSubClass,

CHECK:CAMELCASE: Avoid CamelCase: <bDeviceProtocol>
#1522: FILE: drivers/usb/core/usb.c:618:
+			   usb_dev->descriptor.bDeviceProtocol))

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceClass>
#1534: FILE: drivers/usb/core/usb.c:624:
+			   alt->desc.bInterfaceClass,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceSubClass>
#1535: FILE: drivers/usb/core/usb.c:625:
+			   alt->desc.bInterfaceSubClass,

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceProtocol>
#1536: FILE: drivers/usb/core/usb.c:626:
+			   alt->desc.bInterfaceProtocol))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1572: FILE: drivers/usb/core/usb.c:651:
+static int usb_uevent(struct device *dev, char **envp,
 			int num_envp, char *buffer, int buffer_size)

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#1639: FILE: drivers/w1/w1.c:389:
+	err = add_uevent_var(envp, num_envp, &cur_index, buffer, buffer_size, &cur_len, "W1_FID=%02X", sl->reg_num.family);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#1644: FILE: drivers/w1/w1.c:393:
+	err = add_uevent_var(envp, num_envp, &cur_index, buffer, buffer_size, &cur_len, "W1_SLAVE_ID=%024LX", (u64)sl->reg_num.id);

WARNING:PRINTF_L: %LX is non-standard C, use %llX
#1644: FILE: drivers/w1/w1.c:393:
+	err = add_uevent_var(envp, num_envp, &cur_index, buffer, buffer_size, &cur_len, "W1_SLAVE_ID=%024LX", (u64)sl->reg_num.id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1707: FILE: include/linux/device.h:155:
+	int	(*uevent)(struct class_device *dev, char **envp,
 			   int num_envp, char *buffer, int buffer_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1729: FILE: include/linux/device.h:231:
+	int	(*uevent)(struct class_device *dev, char **envp,
 			   int num_envp, char *buffer, int buffer_size);

WARNING:TYPO_SPELLING: 'supress' may be misspelled - perhaps 'suppress'?
#1779: FILE: include/linux/kobject.h:104:
+ *	supress the event generation or add subsystem specific
   	^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1788: FILE: include/linux/kobject.h:111:
+	int (*uevent)(struct kset *kset, struct kobject *kobj, char **envp,
 			int num_envp, char *buffer, int buffer_size);

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#1796: FILE: include/linux/kobject.h:120:
+	struct kset_uevent_ops	* uevent_ops;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct kset_uevent_ops should normally be const
#1796: FILE: include/linux/kobject.h:120:
+	struct kset_uevent_ops	* uevent_ops;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1805: FILE: include/linux/kobject.h:168:
+#define decl_subsys(_name,_type,_uevent_ops) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1805: FILE: include/linux/kobject.h:168:
+#define decl_subsys(_name,_type,_uevent_ops) \
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1811: FILE: include/linux/kobject.h:173:
+		.uevent_ops =_uevent_ops, \
 		            ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1815: FILE: include/linux/kobject.h:176:
 }
+#define decl_subsys_name(_varname,_name,_type,_uevent_ops) \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: include/linux/kobject.h:176:
+#define decl_subsys_name(_varname,_name,_type,_uevent_ops) \
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: include/linux/kobject.h:176:
+#define decl_subsys_name(_varname,_name,_type,_uevent_ops) \
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1815: FILE: include/linux/kobject.h:176:
+#define decl_subsys_name(_varname,_name,_type,_uevent_ops) \
                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1821: FILE: include/linux/kobject.h:181:
+		.uevent_ops =_uevent_ops, \
 		            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1834: FILE: include/linux/kobject.h:260:
+int add_uevent_var(char **envp, int num_envp, int *cur_index,
 			char *buffer, int buffer_size, int *cur_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1843: FILE: include/linux/kobject.h:267:
+static inline int add_uevent_var(char **envp, int num_envp, int *cur_index,
 				      char *buffer, int buffer_size, int *cur_len, 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1855: FILE: include/linux/sysctl.h:127:
+	KERN_HOTPLUG=49,	/* string: path to uevent helper (deprecated) */
 	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1894: FILE: kernel/ksysfs.c:40:
+	if (count+1 > UEVENT_HELPER_PATH_LEN)
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1902: FILE: kernel/ksysfs.c:44:
+	if (count && uevent_helper[count-1] == '\n')
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1903: FILE: kernel/ksysfs.c:45:
+		uevent_helper[count-1] = '\0';
 		                   ^

WARNING:CONST_STRUCT: struct kset_uevent_ops should normally be const
#1985: FILE: lib/kobject_uevent.c:68:
+	struct kset_uevent_ops *uevent_ops;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2027: FILE: lib/kobject_uevent.c:142:
+			pr_debug ("%s - uevent() returned %d\n",

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#2049: FILE: lib/kobject_uevent.c:183:
+		argv [0] = uevent_helper;

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 27 warnings, 35 checks, 1813 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
