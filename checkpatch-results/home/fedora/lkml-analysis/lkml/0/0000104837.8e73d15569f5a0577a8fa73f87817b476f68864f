WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: drivers/rtc/rtc-x1205.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#80: FILE: drivers/rtc/rtc-x1205.c:7:
+ * ^IKaren Spearel <kas111 at gmail dot com>$

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#108: FILE: drivers/rtc/rtc-x1205.c:35:
+ * unknown chips, the user must explicitely set the probe parameter.
                                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/rtc/rtc-x1205.c:116:
+static int x1205_get_datetime(struct i2c_client *client, struct rtc_time *tm,
+				unsigned char reg_base)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#202: FILE: drivers/rtc/rtc-x1205.c:129:
+		dev_err(&client->dev, "%s: read error\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#208: FILE: drivers/rtc/rtc-x1205.c:135:
+		"%s: raw read data - sec=%02x, min=%02x, hr=%02x, "
+		"mday=%02x, mon=%02x, year=%02x, wday=%02x, y2k=%02x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#209: FILE: drivers/rtc/rtc-x1205.c:136:
+		__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#223: FILE: drivers/rtc/rtc-x1205.c:150:
+	dev_dbg(&client->dev, "%s: tm is secs=%d, mins=%d, hours=%d, "
+		"mday=%d, mon=%d, year=%d, wday=%d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#224: FILE: drivers/rtc/rtc-x1205.c:151:
+		__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#242: FILE: drivers/rtc/rtc-x1205.c:169:
+		dev_err(&client->dev, "%s: read error\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: drivers/rtc/rtc-x1205.c:177:
+static int x1205_set_datetime(struct i2c_client *client, struct rtc_time *tm,
+				int datetoo, u8 reg_base)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#265: FILE: drivers/rtc/rtc-x1205.c:192:
+		__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#278: FILE: drivers/rtc/rtc-x1205.c:205:
+			__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#295: FILE: drivers/rtc/rtc-x1205.c:222:
+		dev_err(&client->dev, "%s: wel - %d\n", __FUNCTION__, xfer);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#301: FILE: drivers/rtc/rtc-x1205.c:228:
+		dev_err(&client->dev, "%s: rwel - %d\n", __FUNCTION__, xfer);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#313: FILE: drivers/rtc/rtc-x1205.c:240:
+				__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#322: FILE: drivers/rtc/rtc-x1205.c:249:
+		dev_err(&client->dev, "%s: diswe - %d\n", __FUNCTION__, xfer);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#338: FILE: drivers/rtc/rtc-x1205.c:265:
+	if ((err = x1205_set_datetime(client, &tm, 0, X1205_CCR_BASE)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#352: FILE: drivers/rtc/rtc-x1205.c:279:
+^I^I{ client->addr, I2C_M_RD, 1, &dtr }, ^I/* read dtr */$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#357: FILE: drivers/rtc/rtc-x1205.c:284:
+		dev_err(&client->dev, "%s: read error\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#361: FILE: drivers/rtc/rtc-x1205.c:288:
+	dev_dbg(&client->dev, "%s: raw dtr=%x\n", __FUNCTION__, dtr);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#384: FILE: drivers/rtc/rtc-x1205.c:311:
+^I^I{ client->addr, I2C_M_RD, 1, &atr }, ^I/* read atr */$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#389: FILE: drivers/rtc/rtc-x1205.c:316:
+		dev_err(&client->dev, "%s: read error\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#393: FILE: drivers/rtc/rtc-x1205.c:320:
+	dev_dbg(&client->dev, "%s: raw atr=%x\n", __FUNCTION__, atr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#402: FILE: drivers/rtc/rtc-x1205.c:329:
+	dev_dbg(&client->dev, "%s: raw atr=%x (%d)\n", __FUNCTION__, atr, atr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#406: FILE: drivers/rtc/rtc-x1205.c:333:
+	dev_dbg(&client->dev, "%s: real=%d\n", __FUNCTION__, *trim);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#412: FILE: drivers/rtc/rtc-x1205.c:339:
+struct x1205_limit
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#464: FILE: drivers/rtc/rtc-x1205.c:391:
+				__FUNCTION__, addr[1]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#469: FILE: drivers/rtc/rtc-x1205.c:396:
+		if ((buf & probe_zero_pattern[i+1]) != 0) {
 		                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#472: FILE: drivers/rtc/rtc-x1205.c:399:
+				__FUNCTION__, addr[1], i, buf);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#494: FILE: drivers/rtc/rtc-x1205.c:421:
+				__FUNCTION__, addr[1]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: drivers/rtc/rtc-x1205.c:429:
+		if (value > probe_limits_pattern[i].max ||
+			value < probe_limits_pattern[i].min) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#505: FILE: drivers/rtc/rtc-x1205.c:432:
+				__FUNCTION__, addr[1], i, value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: drivers/rtc/rtc-x1205.c:442:
+static int x1205_rtc_read_alarm(struct device *dev,
+	struct rtc_wkalrm *alrm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/rtc/rtc-x1205.c:449:
+static int x1205_rtc_set_alarm(struct device *dev,
+	struct rtc_wkalrm *alrm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#529: FILE: drivers/rtc/rtc-x1205.c:456:
+static int x1205_rtc_read_time(struct device *dev,
+	struct rtc_time *tm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: drivers/rtc/rtc-x1205.c:463:
+static int x1205_rtc_set_time(struct device *dev,
+	struct rtc_time *tm)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#548: FILE: drivers/rtc/rtc-x1205.c:475:
+	if ((err = x1205_rtc_read_time(dev, &old_tm) == 0))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#575: FILE: drivers/rtc/rtc-x1205.c:502:
+	seq_printf(seq, "24hr\t\t: yes\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/rtc/rtc-x1205.c:511:
+		seq_printf(seq, "analog_trim\t: %d.%02d pF\n",
+			atrim / 1000, atrim % 1000);

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#588: FILE: drivers/rtc/rtc-x1205.c:515:
+static struct rtc_class_ops x1205_rtc_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: drivers/rtc/rtc-x1205.c:525:
+static ssize_t x1205_sysfs_show_atrim(struct device *dev,
+				struct device_attribute *attr, char *buf)

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: drivers/rtc/rtc-x1205.c:529:
+        if (x1205_get_atrim(to_i2c_client(dev), &atrim) == 0) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: drivers/rtc/rtc-x1205.c:529:
+        if (x1205_get_atrim(to_i2c_client(dev), &atrim) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: drivers/rtc/rtc-x1205.c:530:
+                return sprintf(buf, "%d.%02d pF\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: drivers/rtc/rtc-x1205.c:530:
+                return sprintf(buf, "%d.%02d pF\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: drivers/rtc/rtc-x1205.c:531:
+                        atrim / 1000, atrim % 1000);        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/rtc/rtc-x1205.c:531:
+                        atrim / 1000, atrim % 1000);        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: drivers/rtc/rtc-x1205.c:532:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: drivers/rtc/rtc-x1205.c:532:
+        return 0;$

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'x1205_sysfs_show_atrim' to 'atrim_show'
#606: FILE: drivers/rtc/rtc-x1205.c:533:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#607: FILE: drivers/rtc/rtc-x1205.c:534:
+static DEVICE_ATTR(atrim, S_IRUGO, x1205_sysfs_show_atrim, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: drivers/rtc/rtc-x1205.c:537:
+static ssize_t x1205_sysfs_show_dtrim(struct device *dev,
+				struct device_attribute *attr, char *buf)

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: drivers/rtc/rtc-x1205.c:541:
+        if (x1205_get_dtrim(to_i2c_client(dev), &dtrim) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: drivers/rtc/rtc-x1205.c:541:
+        if (x1205_get_dtrim(to_i2c_client(dev), &dtrim) == 0) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#614: FILE: drivers/rtc/rtc-x1205.c:541:
+        if (x1205_get_dtrim(to_i2c_client(dev), &dtrim) == 0) {
+                return sprintf(buf, "%d ppm\n", dtrim);
+        }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#615: FILE: drivers/rtc/rtc-x1205.c:542:
+                return sprintf(buf, "%d ppm\n", dtrim);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: drivers/rtc/rtc-x1205.c:542:
+                return sprintf(buf, "%d ppm\n", dtrim);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: drivers/rtc/rtc-x1205.c:543:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: drivers/rtc/rtc-x1205.c:543:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: drivers/rtc/rtc-x1205.c:544:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: drivers/rtc/rtc-x1205.c:544:
+        return 0;$

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'x1205_sysfs_show_dtrim' to 'dtrim_show'
#618: FILE: drivers/rtc/rtc-x1205.c:545:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#619: FILE: drivers/rtc/rtc-x1205.c:546:
+static DEVICE_ATTR(dtrim, S_IRUGO, x1205_sysfs_show_dtrim, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#621: FILE: drivers/rtc/rtc-x1205.c:548:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#624: FILE: drivers/rtc/rtc-x1205.c:551:
+	dev_dbg(&adapter->dev, "%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#636: FILE: drivers/rtc/rtc-x1205.c:563:
+	dev_dbg(&adapter->dev, "%s\n", __FUNCTION__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#643: FILE: drivers/rtc/rtc-x1205.c:570:
+	if (!(client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*client)...) over kzalloc(sizeof(struct i2c_client)...)
#643: FILE: drivers/rtc/rtc-x1205.c:570:
+	if (!(client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#653: FILE: drivers/rtc/rtc-x1205.c:580:
+	strlcpy(client->name, x1205_driver.driver.name, I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#664: FILE: drivers/rtc/rtc-x1205.c:591:
+	if ((err = i2c_attach_client(client)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: drivers/rtc/rtc-x1205.c:597:
+	rtc = rtc_device_register(x1205_driver.driver.name, &client->dev,
+				&x1205_rtc_ops, THIS_MODULE);

WARNING:TYPO_SPELLING: 'eventualy' may be misspelled - perhaps 'eventually'?
#681: FILE: drivers/rtc/rtc-x1205.c:608:
+	/* Check for power failures and eventualy enable the osc */
 	                                ^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#682: FILE: drivers/rtc/rtc-x1205.c:609:
+	if ((err = x1205_get_status(client, &sr)) == 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#682: FILE: drivers/rtc/rtc-x1205.c:609:
+	if ((err = x1205_get_status(client, &sr)) == 0) {
[...]
+	else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#686: FILE: drivers/rtc/rtc-x1205.c:613:
+				"power failure detected, "
+				"please set the clock\n");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#687: FILE: drivers/rtc/rtc-x1205.c:614:
+			udelay(50);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#691: FILE: drivers/rtc/rtc-x1205.c:618:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#714: FILE: drivers/rtc/rtc-x1205.c:641:
+	dev_dbg(&client->dev, "%s\n", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: drivers/rtc/rtc-x1205.c:643:
+ ^Iif (rtc)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: drivers/rtc/rtc-x1205.c:643:
+ ^Iif (rtc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: drivers/rtc/rtc-x1205.c:643:
+ ^Iif (rtc)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#719: FILE: drivers/rtc/rtc-x1205.c:646:
+	if ((err = i2c_detach_client(client)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#737: FILE: drivers/rtc/rtc-x1205.c:664:
+MODULE_AUTHOR(

WARNING:SPLIT_STRING: quoted string split across lines
#739: FILE: drivers/rtc/rtc-x1205.c:666:
+	"Karen Spearel <kas111 at gmail dot com>, "
+	"Alessandro Zummo <a.zummo@towertech.it>");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104837.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 51 warnings, 17 checks, 692 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104837.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
