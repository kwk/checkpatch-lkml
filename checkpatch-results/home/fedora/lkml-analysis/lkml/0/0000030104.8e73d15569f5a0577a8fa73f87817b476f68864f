WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: include/net/sock.h:758:
+#define sock_lock_init_class_and_name(sk, sname, skey, name, key) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sk' - possible side-effects?
#200: FILE: include/net/sock.h:758:
+#define sock_lock_init_class_and_name(sk, sname, skey, name, key) 	\
+do {									\
+	sk->sk_lock.owner = NULL;					\
+	init_waitqueue_head(&sk->sk_lock.wq);				\
+	spin_lock_init(&(sk)->sk_lock.slock);				\
+	debug_check_no_locks_freed((void *)&(sk)->sk_lock,		\
+			sizeof((sk)->sk_lock));				\
+	lockdep_set_class_and_name(&(sk)->sk_lock.slock,		\
+		       	(skey), (sname));				\
+	lockdep_init_map(&(sk)->sk_lock.dep_map, (name), (key), 0);	\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sk' may be better as '(sk)' to avoid precedence issues
#200: FILE: include/net/sock.h:758:
+#define sock_lock_init_class_and_name(sk, sname, skey, name, key) 	\
+do {									\
+	sk->sk_lock.owner = NULL;					\
+	init_waitqueue_head(&sk->sk_lock.wq);				\
+	spin_lock_init(&(sk)->sk_lock.slock);				\
+	debug_check_no_locks_freed((void *)&(sk)->sk_lock,		\
+			sizeof((sk)->sk_lock));				\
+	lockdep_set_class_and_name(&(sk)->sk_lock.slock,		\
+		       	(skey), (sname));				\
+	lockdep_init_map(&(sk)->sk_lock.dep_map, (name), (key), 0);	\
+} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: include/net/sock.h:766:
+^I^I       ^I(skey), (sname));^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: include/net/sock.h:766:
+^I^I       ^I(skey), (sname));^I^I^I^I\$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: net/core/sock.c:814:
+	sock_lock_init_class_and_name(sk,
+			af_family_slock_key_strings[sk->sk_family],

WARNING:LINE_SPACING: Missing a blank line after declarations
#276: FILE: net/sunrpc/xprtsock.c:1014:
+	struct sock *sk = sock->sk;
+	BUG_ON(sk->sk_lock.owner != NULL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#276: FILE: net/sunrpc/xprtsock.c:1014:
+	BUG_ON(sk->sk_lock.owner != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk->sk_lock.owner"
#276: FILE: net/sunrpc/xprtsock.c:1014:
+	BUG_ON(sk->sk_lock.owner != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#277: FILE: net/sunrpc/xprtsock.c:1015:
+	switch (sk->sk_family) {
+		case AF_INET:
[...]
+		case AF_INET6:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: net/sunrpc/xprtsock.c:1018:
+			sock_lock_init_class_and_name(sk,
+				"slock-AF_INET-NFS", &xs_slock_key[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: net/sunrpc/xprtsock.c:1024:
+			sock_lock_init_class_and_name(sk,
+				"slock-AF_INET6-NFS", &xs_slock_key[1],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#291: FILE: net/sunrpc/xprtsock.c:1029:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: net/sunrpc/svcsock.c:83:
+	struct sock *sk = sock->sk;
+	BUG_ON(sk->sk_lock.owner != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: net/sunrpc/svcsock.c:83:
+	BUG_ON(sk->sk_lock.owner != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk->sk_lock.owner"
#334: FILE: net/sunrpc/svcsock.c:83:
+	BUG_ON(sk->sk_lock.owner != NULL);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#335: FILE: net/sunrpc/svcsock.c:84:
+	switch (sk->sk_family) {
+		case AF_INET:
[...]
+		case AF_INET6:
[...]
+		default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: net/sunrpc/svcsock.c:87:
+			sock_lock_init_class_and_name(sk,
+				"slock-AF_INET-NFSD", &svc_slock_key[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: net/sunrpc/svcsock.c:93:
+			sock_lock_init_class_and_name(sk,
+				"slock-AF_INET6-NFSD", &svc_slock_key[1],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: net/sunrpc/svcsock.c:98:
+			BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 9 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030104.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
