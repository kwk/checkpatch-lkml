CHECK:BRACES: braces {} should be used on all arms of this statement
#95: FILE: fs/9p/9p.c:59:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#98: FILE: fs/9p/9p.c:62:
+	} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#114: FILE: fs/9p/9p.c:84:
+	struct v9fs_fcall* tc;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#127: FILE: fs/9p/9p.c:91:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#130: FILE: fs/9p/9p.c:94:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#195: FILE: fs/9p/9p.c:170:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#198: FILE: fs/9p/9p.c:173:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#225: FILE: fs/9p/9p.c:197:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#228: FILE: fs/9p/9p.c:200:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#254: FILE: fs/9p/9p.c:226:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#257: FILE: fs/9p/9p.c:229:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: fs/9p/9p.c:264:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#300: FILE: fs/9p/9p.c:267:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#327: FILE: fs/9p/9p.c:294:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#330: FILE: fs/9p/9p.c:297:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#356: FILE: fs/9p/9p.c:322:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#359: FILE: fs/9p/9p.c:325:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#387: FILE: fs/9p/9p.c:354:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#390: FILE: fs/9p/9p.c:357:
+	} else

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#428: FILE: fs/9p/9p.c:380:
+	dprintk(DEBUG_9P, "fid %d offset 0x%llux count 0x%x\n", fid,

Prefixing 0x with decimal output is defective and should be corrected.

CHECK:SPACING: No space is necessary after a cast
#429: FILE: fs/9p/9p.c:381:
+		(long long unsigned) offset, count);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#429: FILE: fs/9p/9p.c:381:
+		(long long unsigned) offset, count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#434: FILE: fs/9p/9p.c:385:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#444: FILE: fs/9p/9p.c:395:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: fs/9p/9p.c:412:
+v9fs_t_write(struct v9fs_session_info *v9ses, u32 fid, u64 offset, u32 count, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: fs/9p/9p.c:413:
+v9fs_t_write(struct v9fs_session_info *v9ses, u32 fid, u64 offset, u32 count, 
+	const char __user *data, struct v9fs_fcall **rcp)

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#477: FILE: fs/9p/9p.c:418:
+	dprintk(DEBUG_9P, "fid %d offset 0x%llux count 0x%x\n", fid,

CHECK:SPACING: No space is necessary after a cast
#478: FILE: fs/9p/9p.c:419:
+		(long long unsigned) offset, count);

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#478: FILE: fs/9p/9p.c:419:
+		(long long unsigned) offset, count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#484: FILE: fs/9p/9p.c:423:
+	if (!IS_ERR(tc)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#495: FILE: fs/9p/9p.c:434:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: fs/9p/9p.h:144:
+   The is similar to v9fs_stat, but the strings don't point to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#551: FILE: fs/9p/9p.h:144:
+/* file metadata (stat) structure used to create Twstat message
+   The is similar to v9fs_stat, but the strings don't point to 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fcall' - possible side-effects?
#678: FILE: fs/9p/9p.h:339:
+#define PRINT_FCALL_ERROR(s, fcall) dprintk(DEBUG_ERROR, "%s: %.*s\n", s, \
+	fcall?fcall->params.rerror.error.len:0, \
+	fcall?fcall->params.rerror.error.str:"");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#678: FILE: fs/9p/9p.h:339:
+#define PRINT_FCALL_ERROR(s, fcall) dprintk(DEBUG_ERROR, "%s: %.*s\n", s, \
+	fcall?fcall->params.rerror.error.len:0, \
+	fcall?fcall->params.rerror.error.str:"");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#679: FILE: fs/9p/9p.h:340:
+	fcall?fcall->params.rerror.error.len:0, \
 	     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#679: FILE: fs/9p/9p.h:340:
+	fcall?fcall->params.rerror.error.len:0, \
 	                                    ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#680: FILE: fs/9p/9p.h:341:
+	fcall?fcall->params.rerror.error.str:"");
 	     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#680: FILE: fs/9p/9p.h:341:
+	fcall?fcall->params.rerror.error.str:"");
 	                                    ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#693: FILE: fs/9p/9p.h:360:
+		 struct v9fs_wstat *wstat, struct v9fs_fcall **rcall);
 		                                               ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#702: FILE: fs/9p/9p.h:378:
+		 u32 count, const char __user * data,

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#703: FILE: fs/9p/9p.h:379:
+		 struct v9fs_fcall **rcall);
 		                     ^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#740: FILE: fs/9p/conv.c:33:
+#include <asm/uaccess.h>

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wstat"
#913: FILE: fs/9p/conv.c:239:
+	if (wstat == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#994: FILE: fs/9p/conv.c:278:
+ * buf_get_stat - safely decode a recieved metadata (stat) structure
                                   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1075: FILE: fs/9p/conv.c:321:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: fs/9p/conv.c:322:
+v9fs_deserialize_stat(void *buf, u32 buflen, struct v9fs_stat *stat, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: fs/9p/conv.c:323:
+v9fs_deserialize_stat(void *buf, u32 buflen, struct v9fs_stat *stat, 
+		int extended)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1382: FILE: fs/9p/conv.c:434:
+static inline void v9fs_put_int8(struct cbuf *bufp, u8 val, u8 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1388: FILE: fs/9p/conv.c:440:
+static inline void v9fs_put_int16(struct cbuf *bufp, u16 val, u16 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1394: FILE: fs/9p/conv.c:446:
+static inline void v9fs_put_int32(struct cbuf *bufp, u32 val, u32 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1400: FILE: fs/9p/conv.c:452:
+static inline void v9fs_put_int64(struct cbuf *bufp, u64 val, u64 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1421: FILE: fs/9p/conv.c:473:
+v9fs_put_user_data(struct cbuf *bufp, const char __user * data, int count,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct v9fs_fcall)...)
#1462: FILE: fs/9p/conv.c:514:
+	fc = kmalloc(sizeof(struct v9fs_fcall) + size, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#1478: FILE: fs/9p/conv.c:530:
+	*(__le16 *) (fc->sdata + 5) = cpu_to_le16(tag);

WARNING:INDENTED_LABEL: labels should not be indented
#1500: FILE: fs/9p/conv.c:552:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1524: FILE: fs/9p/conv.c:576:
+      error:

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1536: FILE: fs/9p/conv.c:588:
+	size = 4 + 4 + 2 + strlen(uname) + 2 + strlen(aname);	/* fid[4] afid[4] uname[s] aname[s] */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INDENTED_LABEL: labels should not be indented
#1546: FILE: fs/9p/conv.c:598:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1568: FILE: fs/9p/conv.c:620:
+      error:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1586: FILE: fs/9p/conv.c:638:
+	for (i = 0; i < nwname; i++) {
+		size += 2 + strlen(wnames[i]);	/* wname[s] */
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1597: FILE: fs/9p/conv.c:649:
+	for (i = 0; i < nwname; i++) {
+		v9fs_put_str(bufp, wnames[i], &fc->params.twalk.wnames[i]);
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#1605: FILE: fs/9p/conv.c:657:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1628: FILE: fs/9p/conv.c:680:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1653: FILE: fs/9p/conv.c:705:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1677: FILE: fs/9p/conv.c:729:
+      error:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1682: FILE: fs/9p/conv.c:734:
+				      const char __user * data)

WARNING:INDENTED_LABEL: labels should not be indented
#1707: FILE: fs/9p/conv.c:759:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1729: FILE: fs/9p/conv.c:781:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1751: FILE: fs/9p/conv.c:803:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1773: FILE: fs/9p/conv.c:825:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#1799: FILE: fs/9p/conv.c:851:
+      error:

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1826: FILE: fs/9p/conv.h:30:
+int v9fs_deserialize_fcall(void *buf, u32 buflen, struct v9fs_fcall *rcall, 
                                                                      ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1826: FILE: fs/9p/conv.h:30:
+int v9fs_deserialize_fcall(void *buf, u32 buflen, struct v9fs_fcall *rcall, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1827: FILE: fs/9p/conv.h:31:
+int v9fs_deserialize_fcall(void *buf, u32 buflen, struct v9fs_fcall *rcall, 
+	int extended);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1835: FILE: fs/9p/conv.h:37:
+struct v9fs_fcall *v9fs_create_tattach(u32 fid, u32 afid, char *uname, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1836: FILE: fs/9p/conv.h:38:
+struct v9fs_fcall *v9fs_create_tattach(u32 fid, u32 afid, char *uname, 
+	char *aname);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1838: FILE: fs/9p/conv.h:40:
+struct v9fs_fcall *v9fs_create_twalk(u32 fid, u32 newfid, u16 nwname, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1839: FILE: fs/9p/conv.h:41:
+struct v9fs_fcall *v9fs_create_twalk(u32 fid, u32 newfid, u16 nwname, 
+	char **wnames);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1844: FILE: fs/9p/conv.h:46:
+struct v9fs_fcall *v9fs_create_twrite(u32 fid, u64 offset, u32 count,
+	const char __user *data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1848: FILE: fs/9p/conv.h:50:
+struct v9fs_fcall *v9fs_create_twstat(u32 fid, struct v9fs_wstat *wstat, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1849: FILE: fs/9p/conv.h:51:
+struct v9fs_fcall *v9fs_create_twstat(u32 fid, struct v9fs_wstat *wstat, 
+	int extended);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1861: FILE: fs/9p/debug.h:55:
+	char buf[5*8];
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1871: FILE: fs/9p/debug.h:60:
+		n += snprintf(buf+n, sizeof(buf)-n, "%02x", data[i++]);
 		                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1871: FILE: fs/9p/debug.h:60:
+		n += snprintf(buf+n, sizeof(buf)-n, "%02x", data[i++]);
 		                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1872: FILE: fs/9p/debug.h:61:
+		if (i%4 == 0)
 		     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1873: FILE: fs/9p/debug.h:62:
+			n += snprintf(buf+n, sizeof(buf)-n, " ");
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1873: FILE: fs/9p/debug.h:62:
+			n += snprintf(buf+n, sizeof(buf)-n, " ");
 			                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1875: FILE: fs/9p/debug.h:64:
+		if (i%16 == 0) {
 		     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1923: FILE: fs/9p/error.c:80:
+		if (c->namelen==len && !memcmp(c->name, errstr, len)) {
 		              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1944: FILE: fs/9p/error.h:179:
+extern int v9fs_errstr2errno(char *errstr, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#1977: FILE: fs/9p/mux.c:79:
+	struct v9fs_fcall *rcall;
 	                   ^^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1985: FILE: fs/9p/mux.c:107:
+extern int v9fs_errstr2errno(char *str, int len);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m)...) over kmalloc(sizeof(struct v9fs_mux_data)...)
#2014: FILE: fs/9p/mux.c:264:
+	m = kmalloc(sizeof(struct v9fs_mux_data), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2022: FILE: fs/9p/mux.c:279:
+	m->rcall = NULL;
 	   ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2122: FILE: fs/9p/mux.c:529:
+				PRINT_FCALL_ERROR("unknown error", req->rcall);
 				                                        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2154: FILE: fs/9p/mux.c:576:
+	if (!m->rcall) {
 	        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2155: FILE: fs/9p/mux.c:577:
+		m->rcall =
 		   ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2157: FILE: fs/9p/mux.c:579:
+		if (!m->rcall) {
 		        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2162: FILE: fs/9p/mux.c:584:
+		m->rbuf = (char *)m->rcall + sizeof(struct v9fs_fcall);
 		                     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2184: FILE: fs/9p/mux.c:614:
+		    v9fs_deserialize_fcall(m->rbuf, n, m->rcall, *m->extended);
 		                                          ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2190: FILE: fs/9p/mux.c:619:
+		rcall = m->rcall;
 		^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2190: FILE: fs/9p/mux.c:619:
+		rcall = m->rcall;
 		           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2193: FILE: fs/9p/mux.c:622:
+			m->rcall = kmalloc(sizeof(struct v9fs_fcall) + m->msize,
 			   ^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m->rcall)...) over kmalloc(sizeof(struct v9fs_fcall)...)
#2193: FILE: fs/9p/mux.c:622:
+			m->rcall = kmalloc(sizeof(struct v9fs_fcall) + m->msize,

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2195: FILE: fs/9p/mux.c:624:
+			if (!m->rcall) {
 			        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2200: FILE: fs/9p/mux.c:629:
+			m->rbuf = (char *)m->rcall + sizeof(struct v9fs_fcall);
 			                     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2204: FILE: fs/9p/mux.c:633:
+			m->rcall = NULL;
 			   ^^^^^

CHECK:SPACING: No space is necessary after a cast
#2283: FILE: fs/9p/mux.c:951:
+		return (u16) tag;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_stat *' should also have an identifier name
#2334: FILE: fs/9p/v9fs_vfs.h:48:
+void v9fs_stat2inode(struct v9fs_stat *, struct inode *, struct super_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2334: FILE: fs/9p/v9fs_vfs.h:48:
+void v9fs_stat2inode(struct v9fs_stat *, struct inode *, struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2334: FILE: fs/9p/v9fs_vfs.h:48:
+void v9fs_stat2inode(struct v9fs_stat *, struct inode *, struct super_block *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2357: FILE: fs/9p/vfs_dentry.c:110:
+^I^I^I^Idprintk(DEBUG_ERROR, "clunk failed: %d name %s\n", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2414: FILE: fs/9p/vfs_dir.c:108:
+			over = filldir(dirent, stat.name.str, stat.name.len,
+				    filp->f_pos, v9fs_qid2ino(&stat.qid),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2424: FILE: fs/9p/vfs_dir.c:129:
+			v9ses->maxdata-V9FS_IOHDRSZ, &fcall);
 			              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2446: FILE: fs/9p/vfs_dir.c:150:
+			over = filldir(dirent, stat.name.str, stat.name.len,
+				    filp->f_pos, v9fs_qid2ino(&stat.qid),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2710: FILE: fs/9p/vfs_inode.c:356:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2710: FILE: fs/9p/vfs_inode.c:356:
 
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2711: FILE: fs/9p/vfs_inode.c:357:
+^Ifile_inode = v9fs_get_inode(sb, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2712: FILE: fs/9p/vfs_inode.c:358:
+	file_inode = v9fs_get_inode(sb, 
+		p9mode2unixmode(v9ses, fcall->params.rstat.stat.mode));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2754: FILE: fs/9p/vfs_inode.c:540:
+^Iinode = v9fs_get_inode(sb, p9mode2unixmode(v9ses, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2755: FILE: fs/9p/vfs_inode.c:541:
+	inode = v9fs_get_inode(sb, p9mode2unixmode(v9ses, 
+		fcall->params.rstat.stat.mode));

CHECK:SPACING: No space is necessary after a cast
#2816: FILE: fs/9p/vfs_inode.c:653:
+	wstat.name = (char *) new_dentry->d_name.name;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2838: FILE: fs/9p/vfs_inode.c:695:
+		v9fs_stat2inode(&fcall->params.rstat.stat, dentry->d_inode,
 				  dentry->d_inode->i_sb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2927: FILE: fs/9p/vfs_inode.c:768:
+v9fs_stat2inode(struct v9fs_stat *stat, struct inode *inode, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2928: FILE: fs/9p/vfs_inode.c:769:
+v9fs_stat2inode(struct v9fs_stat *stat, struct inode *inode, 
+	struct super_block *sb)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#2975: FILE: fs/9p/vfs_inode.c:795:
+		sscanf(ext, "%c %u %u", &type, &major, &minor);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3088: FILE: fs/9p/vfs_inode.c:887:
+	buffer[buflen-1] = 0;
 	             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3096: FILE: fs/9p/vfs_inode.c:977:
+static int v9fs_vfs_mkspecial(struct inode *dir, struct dentry *dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3097: FILE: fs/9p/vfs_inode.c:978:
+static int v9fs_vfs_mkspecial(struct inode *dir, struct dentry *dentry, 
+	int mode, const char *extension)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3104: FILE: fs/9p/vfs_inode.c:985:
+^I$

CHECK:SPACING: No space is necessary after a cast
#3128: FILE: fs/9p/vfs_inode.c:1009:
+	wstat.extension = (char *) extension;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*v9ses)...) over kmalloc(sizeof(struct v9fs_session_info)...)
#3361: FILE: fs/9p/vfs_super.c:125:
+	v9ses = kmalloc(sizeof(struct v9fs_session_info), GFP_KERNEL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 44 warnings, 63 checks, 3145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
