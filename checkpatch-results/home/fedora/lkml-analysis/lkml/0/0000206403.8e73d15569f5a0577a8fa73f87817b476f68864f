WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#39: 
would have to be seperate from those which don't.... it turns
                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#define for_each_pud(pgd, start, end, pud, pud_start, pud_end) \

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:TYPO_SPELLING: 'didi' may be misspelled - perhaps 'did'?
#61: 
npiggin@didi:~/usr/src/linux-2.6$ size mm/memory.o.before
        ^^^^

WARNING:TYPO_SPELLING: 'didi' may be misspelled - perhaps 'did'?
#64: 
npiggin@didi:~/usr/src/linux-2.6$ size mm/memory.o.after
        ^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mm' - possible side-effects?
#113: FILE: include/asm-generic/pgtable.h:150:
+#define for_each_pgd(mm, start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset(mm, start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset(mm, end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#113: FILE: include/asm-generic/pgtable.h:150:
+#define for_each_pgd(mm, start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset(mm, start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset(mm, end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#113: FILE: include/asm-generic/pgtable.h:150:
+#define for_each_pgd(mm, start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset(mm, start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset(mm, end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#113: FILE: include/asm-generic/pgtable.h:150:
+#define for_each_pgd(mm, start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset(mm, start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset(mm, end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd' - possible side-effects?
#113: FILE: include/asm-generic/pgtable.h:150:
+#define for_each_pgd(mm, start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset(mm, start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset(mm, end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd_start' - possible side-effects?
#113: FILE: include/asm-generic/pgtable.h:150:
+#define for_each_pgd(mm, start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset(mm, start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset(mm, end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd_end' - possible side-effects?
#113: FILE: include/asm-generic/pgtable.h:150:
+#define for_each_pgd(mm, start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset(mm, start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset(mm, end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

ERROR:SPACING: space prohibited after that open parenthesis '('
#114: FILE: include/asm-generic/pgtable.h:151:
+	for (	pgd = pgd_offset(mm, start),				\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#118: FILE: include/asm-generic/pgtable.h:155:
+		  pgd <= pgd_offset(mm, end-1);				\
 		                           ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#120: FILE: include/asm-generic/pgtable.h:157:
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#127: FILE: include/asm-generic/pgtable.h:164:
+#define for_each_pgd_k(start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset_k(start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset_k(end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#127: FILE: include/asm-generic/pgtable.h:164:
+#define for_each_pgd_k(start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset_k(start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset_k(end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#127: FILE: include/asm-generic/pgtable.h:164:
+#define for_each_pgd_k(start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset_k(start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset_k(end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd' - possible side-effects?
#127: FILE: include/asm-generic/pgtable.h:164:
+#define for_each_pgd_k(start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset_k(start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset_k(end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd_start' - possible side-effects?
#127: FILE: include/asm-generic/pgtable.h:164:
+#define for_each_pgd_k(start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset_k(start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset_k(end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd_end' - possible side-effects?
#127: FILE: include/asm-generic/pgtable.h:164:
+#define for_each_pgd_k(start, end, pgd, pgd_start, pgd_end)		\
+	for (	pgd = pgd_offset_k(start),				\
+		  pgd_start = start;					\
+		pgd_end = (pgd_start + PGDIR_SIZE) & PGDIR_MASK,	\
+		  pgd_end = ((pgd_end && pgd_end <= end) ? pgd_end : end), \
+		  pgd <= pgd_offset_k(end-1);				\
+		pgd_start = pgd_end,					\
+		  pgd++ )

ERROR:SPACING: space prohibited after that open parenthesis '('
#128: FILE: include/asm-generic/pgtable.h:165:
+	for (	pgd = pgd_offset_k(start),				\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#132: FILE: include/asm-generic/pgtable.h:169:
+		  pgd <= pgd_offset_k(end-1);				\
 		                         ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#134: FILE: include/asm-generic/pgtable.h:171:
+		  pgd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgd' - possible side-effects?
#141: FILE: include/asm-generic/pgtable.h:178:
+#define for_each_pud(pgd, start, end, pud, pud_start, pud_end)		\
+	for (	pud = pud_offset(pgd, start),				\
+		  pud_start = start;					\
+		pud_end = (pud_start + PUD_SIZE) & PUD_MASK,		\
+		  pud_end = ((pud_end && pud_end <= end) ? pud_end : end), \
+		  pud <= pud_offset(pgd, end-1);			\
+		pud_start = pud_end,					\
+		  pud++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#141: FILE: include/asm-generic/pgtable.h:178:
+#define for_each_pud(pgd, start, end, pud, pud_start, pud_end)		\
+	for (	pud = pud_offset(pgd, start),				\
+		  pud_start = start;					\
+		pud_end = (pud_start + PUD_SIZE) & PUD_MASK,		\
+		  pud_end = ((pud_end && pud_end <= end) ? pud_end : end), \
+		  pud <= pud_offset(pgd, end-1);			\
+		pud_start = pud_end,					\
+		  pud++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#141: FILE: include/asm-generic/pgtable.h:178:
+#define for_each_pud(pgd, start, end, pud, pud_start, pud_end)		\
+	for (	pud = pud_offset(pgd, start),				\
+		  pud_start = start;					\
+		pud_end = (pud_start + PUD_SIZE) & PUD_MASK,		\
+		  pud_end = ((pud_end && pud_end <= end) ? pud_end : end), \
+		  pud <= pud_offset(pgd, end-1);			\
+		pud_start = pud_end,					\
+		  pud++ )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#141: FILE: include/asm-generic/pgtable.h:178:
+#define for_each_pud(pgd, start, end, pud, pud_start, pud_end)		\
+	for (	pud = pud_offset(pgd, start),				\
+		  pud_start = start;					\
+		pud_end = (pud_start + PUD_SIZE) & PUD_MASK,		\
+		  pud_end = ((pud_end && pud_end <= end) ? pud_end : end), \
+		  pud <= pud_offset(pgd, end-1);			\
+		pud_start = pud_end,					\
+		  pud++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pud' - possible side-effects?
#141: FILE: include/asm-generic/pgtable.h:178:
+#define for_each_pud(pgd, start, end, pud, pud_start, pud_end)		\
+	for (	pud = pud_offset(pgd, start),				\
+		  pud_start = start;					\
+		pud_end = (pud_start + PUD_SIZE) & PUD_MASK,		\
+		  pud_end = ((pud_end && pud_end <= end) ? pud_end : end), \
+		  pud <= pud_offset(pgd, end-1);			\
+		pud_start = pud_end,					\
+		  pud++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pud_start' - possible side-effects?
#141: FILE: include/asm-generic/pgtable.h:178:
+#define for_each_pud(pgd, start, end, pud, pud_start, pud_end)		\
+	for (	pud = pud_offset(pgd, start),				\
+		  pud_start = start;					\
+		pud_end = (pud_start + PUD_SIZE) & PUD_MASK,		\
+		  pud_end = ((pud_end && pud_end <= end) ? pud_end : end), \
+		  pud <= pud_offset(pgd, end-1);			\
+		pud_start = pud_end,					\
+		  pud++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pud_end' - possible side-effects?
#141: FILE: include/asm-generic/pgtable.h:178:
+#define for_each_pud(pgd, start, end, pud, pud_start, pud_end)		\
+	for (	pud = pud_offset(pgd, start),				\
+		  pud_start = start;					\
+		pud_end = (pud_start + PUD_SIZE) & PUD_MASK,		\
+		  pud_end = ((pud_end && pud_end <= end) ? pud_end : end), \
+		  pud <= pud_offset(pgd, end-1);			\
+		pud_start = pud_end,					\
+		  pud++ )

ERROR:SPACING: space prohibited after that open parenthesis '('
#142: FILE: include/asm-generic/pgtable.h:179:
+	for (	pud = pud_offset(pgd, start),				\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#146: FILE: include/asm-generic/pgtable.h:183:
+		  pud <= pud_offset(pgd, end-1);			\
 		                            ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#148: FILE: include/asm-generic/pgtable.h:185:
+		  pud++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pud' - possible side-effects?
#155: FILE: include/asm-generic/pgtable.h:192:
+#define for_each_pmd(pud, start, end, pmd, pmd_start, pmd_end)		\
+	for (	pmd = pmd_offset(pud, start),				\
+		  pmd_start = start;					\
+		pmd_end = (pmd_start + PMD_SIZE) & PMD_MASK,		\
+		  pmd_end = ((pmd_end && pmd_end <= end) ? pmd_end : end), \
+		  pmd <= pmd_offset(pud, end-1);			\
+		pmd_start = pmd_end,					\
+		  pmd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#155: FILE: include/asm-generic/pgtable.h:192:
+#define for_each_pmd(pud, start, end, pmd, pmd_start, pmd_end)		\
+	for (	pmd = pmd_offset(pud, start),				\
+		  pmd_start = start;					\
+		pmd_end = (pmd_start + PMD_SIZE) & PMD_MASK,		\
+		  pmd_end = ((pmd_end && pmd_end <= end) ? pmd_end : end), \
+		  pmd <= pmd_offset(pud, end-1);			\
+		pmd_start = pmd_end,					\
+		  pmd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#155: FILE: include/asm-generic/pgtable.h:192:
+#define for_each_pmd(pud, start, end, pmd, pmd_start, pmd_end)		\
+	for (	pmd = pmd_offset(pud, start),				\
+		  pmd_start = start;					\
+		pmd_end = (pmd_start + PMD_SIZE) & PMD_MASK,		\
+		  pmd_end = ((pmd_end && pmd_end <= end) ? pmd_end : end), \
+		  pmd <= pmd_offset(pud, end-1);			\
+		pmd_start = pmd_end,					\
+		  pmd++ )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#155: FILE: include/asm-generic/pgtable.h:192:
+#define for_each_pmd(pud, start, end, pmd, pmd_start, pmd_end)		\
+	for (	pmd = pmd_offset(pud, start),				\
+		  pmd_start = start;					\
+		pmd_end = (pmd_start + PMD_SIZE) & PMD_MASK,		\
+		  pmd_end = ((pmd_end && pmd_end <= end) ? pmd_end : end), \
+		  pmd <= pmd_offset(pud, end-1);			\
+		pmd_start = pmd_end,					\
+		  pmd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd' - possible side-effects?
#155: FILE: include/asm-generic/pgtable.h:192:
+#define for_each_pmd(pud, start, end, pmd, pmd_start, pmd_end)		\
+	for (	pmd = pmd_offset(pud, start),				\
+		  pmd_start = start;					\
+		pmd_end = (pmd_start + PMD_SIZE) & PMD_MASK,		\
+		  pmd_end = ((pmd_end && pmd_end <= end) ? pmd_end : end), \
+		  pmd <= pmd_offset(pud, end-1);			\
+		pmd_start = pmd_end,					\
+		  pmd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd_start' - possible side-effects?
#155: FILE: include/asm-generic/pgtable.h:192:
+#define for_each_pmd(pud, start, end, pmd, pmd_start, pmd_end)		\
+	for (	pmd = pmd_offset(pud, start),				\
+		  pmd_start = start;					\
+		pmd_end = (pmd_start + PMD_SIZE) & PMD_MASK,		\
+		  pmd_end = ((pmd_end && pmd_end <= end) ? pmd_end : end), \
+		  pmd <= pmd_offset(pud, end-1);			\
+		pmd_start = pmd_end,					\
+		  pmd++ )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pmd_end' - possible side-effects?
#155: FILE: include/asm-generic/pgtable.h:192:
+#define for_each_pmd(pud, start, end, pmd, pmd_start, pmd_end)		\
+	for (	pmd = pmd_offset(pud, start),				\
+		  pmd_start = start;					\
+		pmd_end = (pmd_start + PMD_SIZE) & PMD_MASK,		\
+		  pmd_end = ((pmd_end && pmd_end <= end) ? pmd_end : end), \
+		  pmd <= pmd_offset(pud, end-1);			\
+		pmd_start = pmd_end,					\
+		  pmd++ )

ERROR:SPACING: space prohibited after that open parenthesis '('
#156: FILE: include/asm-generic/pgtable.h:193:
+	for (	pmd = pmd_offset(pud, start),				\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: include/asm-generic/pgtable.h:197:
+		  pmd <= pmd_offset(pud, end-1);			\
 		                            ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#162: FILE: include/asm-generic/pgtable.h:199:
+		  pmd++ )

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: include/asm-generic/pgtable.h:214:
+ * ^I// do something with pte and/or addr$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: include/asm-generic/pgtable.h:217:
+#define for_each_pte_map(pmd, start, end, pte, addr) ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#180: FILE: include/asm-generic/pgtable.h:217:
+#define for_each_pte_map(pmd, start, end, pte, addr) 			\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#180: FILE: include/asm-generic/pgtable.h:217:
+#define for_each_pte_map(pmd, start, end, pte, addr) 			\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#180: FILE: include/asm-generic/pgtable.h:217:
+#define for_each_pte_map(pmd, start, end, pte, addr) 			\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#180: FILE: include/asm-generic/pgtable.h:217:
+#define for_each_pte_map(pmd, start, end, pte, addr) 			\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#180: FILE: include/asm-generic/pgtable.h:217:
+#define for_each_pte_map(pmd, start, end, pte, addr) 			\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

ERROR:SPACING: space prohibited after that open parenthesis '('
#185: FILE: include/asm-generic/pgtable.h:222:
+	for (	addr = start;						\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: include/asm-generic/pgtable.h:226:
+#define for_each_pte_map_end^I^I^I ^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#189: FILE: include/asm-generic/pgtable.h:226:
+#define for_each_pte_map_end			 			\
+	pte_unmap(___p);						\
+} while (0)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: include/asm-generic/pgtable.h:235:
+#define for_each_pte_map_nested(pmd, start, end, pte, addr) ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#198: FILE: include/asm-generic/pgtable.h:235:
+#define for_each_pte_map_nested(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map_nested(pmd, start);		\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#198: FILE: include/asm-generic/pgtable.h:235:
+#define for_each_pte_map_nested(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map_nested(pmd, start);		\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#198: FILE: include/asm-generic/pgtable.h:235:
+#define for_each_pte_map_nested(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map_nested(pmd, start);		\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#198: FILE: include/asm-generic/pgtable.h:235:
+#define for_each_pte_map_nested(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map_nested(pmd, start);		\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#198: FILE: include/asm-generic/pgtable.h:235:
+#define for_each_pte_map_nested(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_map_nested(pmd, start);		\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

ERROR:SPACING: space prohibited after that open parenthesis '('
#203: FILE: include/asm-generic/pgtable.h:240:
+	for (	addr = start;						\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: include/asm-generic/pgtable.h:244:
+#define for_each_pte_map_nested_end^I^I ^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#207: FILE: include/asm-generic/pgtable.h:244:
+#define for_each_pte_map_nested_end		 			\
+	pte_unmap_nested(___p);						\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: include/asm-generic/pgtable.h:253:
+#define for_each_pte_kernel(pmd, start, end, pte, addr) ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start' - possible side-effects?
#216: FILE: include/asm-generic/pgtable.h:253:
+#define for_each_pte_kernel(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_kernel(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#216: FILE: include/asm-generic/pgtable.h:253:
+#define for_each_pte_kernel(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_kernel(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'end' may be better as '(end)' to avoid precedence issues
#216: FILE: include/asm-generic/pgtable.h:253:
+#define for_each_pte_kernel(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_kernel(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#216: FILE: include/asm-generic/pgtable.h:253:
+#define for_each_pte_kernel(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_kernel(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#216: FILE: include/asm-generic/pgtable.h:253:
+#define for_each_pte_kernel(pmd, start, end, pte, addr) 		\
+do {									\
+	int ___i = (end - start) >> PAGE_SHIFT;				\
+	pte_t *___p = pte_offset_kernel(pmd, start);			\
+	pte = ___p;							\
+	for (	addr = start;						\
+		___i--;							\
+		addr += PAGE_SIZE, pte++)

ERROR:SPACING: space prohibited after that open parenthesis '('
#221: FILE: include/asm-generic/pgtable.h:258:
+	for (	addr = start;						\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: include/asm-generic/pgtable.h:262:
+#define for_each_pte_kernel_end^I^I^I ^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#225: FILE: include/asm-generic/pgtable.h:262:
+#define for_each_pte_kernel_end			 			\
+} while (0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: mm/memory.c:159:
+	pgd_t * pgd;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#423: FILE: mm/memory.c:201:
+pte_t fastcall * pte_alloc_map(struct mm_struct *mm, pmd_t *pmd, unsigned long address)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#445: FILE: mm/memory.c:318:
+	d = dst_pte = pte_alloc_map(dst_mm, dst_pmd, start);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: mm/memory.c:359:
+		err = copy_pte_range(dst_mm, src_mm, dst_pmd, src_pmd, vma,
+						pmd_start, pmd_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: mm/memory.c:390:
+		err = copy_pmd_range(dst_mm, src_mm, dst_pud, src_pud, vma,
+						pud_start, pud_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: mm/memory.c:425:
+		err = copy_pud_range(dst, src, dst_pgd, src_pgd, vma,
+						pgd_start, pgd_end);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#703: FILE: mm/memory.c:525:
+		pgd_t * pgd, unsigned long start,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#746: FILE: mm/memory.c:551:
+	BUG_ON(start >= end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#777: FILE: mm/memory.c:955:
+static void zeromap_pte_range(pmd_t * pmd, unsigned long start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: mm/memory.c:956:
+                                     unsigned long end, pgprot_t prot)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: mm/memory.c:956:
+static void zeromap_pte_range(pmd_t * pmd, unsigned long start,
+                                     unsigned long end, pgprot_t prot)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: mm/memory.c:956:
+                                     unsigned long end, pgprot_t prot)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#802: FILE: mm/memory.c:968:
+static inline int zeromap_pmd_range(struct mm_struct *mm, pud_t * pud,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: mm/memory.c:969:
+static inline int zeromap_pmd_range(struct mm_struct *mm, pud_t * pud,
+			unsigned long start, unsigned long end, pgprot_t prot)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#807: FILE: mm/memory.c:972:
+	pmd_t * pmd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#833: FILE: mm/memory.c:982:
+static inline int zeromap_pud_range(struct mm_struct *mm, pgd_t * pgd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: mm/memory.c:983:
+static inline int zeromap_pud_range(struct mm_struct *mm, pgd_t * pgd,
+					unsigned long start, unsigned long end,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#839: FILE: mm/memory.c:987:
+	pud_t * pud;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#868: FILE: mm/memory.c:999:
 }
+int zeromap_page_range(struct vm_area_struct *vma, unsigned long start,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: mm/memory.c:1000:
+int zeromap_page_range(struct vm_area_struct *vma, unsigned long start,
 					unsigned long size, pgprot_t prot)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#880: FILE: mm/memory.c:1005:
+	pgd_t * pgd;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#886: FILE: mm/memory.c:1008:
+	BUG_ON(start >= end);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#925: FILE: mm/memory.c:1037:
+remap_pte_range(pmd_t * pmd, unsigned long start, unsigned long end,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#930: FILE: mm/memory.c:1041:
+	pte_t * pte;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#951: FILE: mm/memory.c:1052:
+remap_pmd_range(struct mm_struct *mm, pud_t * pud, unsigned long start,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#956: FILE: mm/memory.c:1056:
+	pmd_t * pmd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1003: FILE: mm/memory.c:1068:
+static inline int remap_pud_range(struct mm_struct *mm, pgd_t * pgd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1004: FILE: mm/memory.c:1069:
+static inline int remap_pud_range(struct mm_struct *mm, pgd_t * pgd,
+				unsigned long start, unsigned long end,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1008: FILE: mm/memory.c:1073:
+	pud_t * pud;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: mm/memory.c:1081:
+		error = remap_pmd_range(mm, pud, pud_start, pud_end,
+				(pud_start >> PAGE_SHIFT) + pfn, prot);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1047: FILE: mm/memory.c:1098:
+	BUG_ON(start >= end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: mm/msync.c:25:
+static void filemap_sync_pte(pte_t *ptep, struct vm_area_struct *vma,
 	unsigned long address, unsigned int flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1108: FILE: mm/msync.c:40:
+static void filemap_sync_pte_range(pmd_t * pmd,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1109: FILE: mm/msync.c:41:
+^Iunsigned long start, unsigned long end, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: mm/msync.c:41:
+static void filemap_sync_pte_range(pmd_t * pmd,
+	unsigned long start, unsigned long end, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1143: FILE: mm/msync.c:52:
+static void filemap_sync_pmd_range(pud_t * pud,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: mm/msync.c:53:
+^Iunsigned long start, unsigned long end, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: mm/msync.c:53:
+static void filemap_sync_pmd_range(pud_t * pud,
+	unsigned long start, unsigned long end, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: mm/msync.c:73:
+static void filemap_sync_pud_range(pgd_t *pgd,
+	unsigned long start, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: mm/msync.c:93:
+static void __filemap_sync(struct vm_area_struct *vma, unsigned long start,
+			unsigned long end, unsigned int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1231: FILE: mm/msync.c:98:
+	BUG_ON(start >= end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: mm/msync.c:136:
+static void filemap_sync(struct vm_area_struct *vma, unsigned long start,
+			unsigned long end, unsigned int flags)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1293: FILE: mm/msync.c:141:
+		size_t sz = min((size_t)(end-start), chunk);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1296: FILE: mm/msync.c:143:
+		__filemap_sync(vma, start, start+sz, flags);
 		                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1308: FILE: mm/msync.c:150:
+static void filemap_sync(struct vm_area_struct *vma, unsigned long start,
+			unsigned long end, unsigned int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1337: FILE: mm/mprotect.c:30:
+change_pte_range(pmd_t *pmd, unsigned long start,
+		unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1375: FILE: mm/mprotect.c:51:
+change_pmd_range(pud_t *pud, unsigned long start,
+		unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1415: FILE: mm/mprotect.c:71:
+change_pud_range(pgd_t *pgd, unsigned long start,
+		unsigned long end, pgprot_t newprot)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1532: FILE: mm/vmalloc.c:35:
+			printk(KERN_CRIT "ERROR: swapped out kernel page\n");

CHECK:SPACING: No space is necessary after a cast
#1606: FILE: mm/vmalloc.c:79:
+	unsigned long start = (unsigned long) area->addr;

CHECK:SPACING: No space is necessary after a cast
#1634: FILE: mm/vmalloc.c:96:
+	flush_tlb_kernel_range((unsigned long) area->addr, end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: mm/vmalloc.c:100:
+static int map_area_pte(pmd_t *pmd, unsigned long start,
+			       unsigned long end, pgprot_t prot,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1650: FILE: mm/vmalloc.c:104:
+	pte_t * pte;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1671: FILE: mm/vmalloc.c:119:
+static int map_area_pmd(pud_t *pud, unsigned long start,
+			       unsigned long end, pgprot_t prot,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1676: FILE: mm/vmalloc.c:123:
+	pmd_t * pmd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1687: FILE: mm/vmalloc.c:126:
+		pte_t * pte = pte_alloc_kernel(&init_mm, pmd, pmd_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1703: FILE: mm/vmalloc.c:137:
+static int map_area_pud(pgd_t *pgd, unsigned long start,
 			       unsigned long end, pgprot_t prot,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1709: FILE: mm/vmalloc.c:141:
+	pud_t * pud;

CHECK:SPACING: No space is necessary after a cast
#1752: FILE: mm/vmalloc.c:156:
+	unsigned long start = (unsigned long) area->addr;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1753: FILE: mm/vmalloc.c:157:
+	unsigned long end = start + (area->size-PAGE_SIZE);
 	                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1798: FILE: arch/i386/mm/ioremap.c:21:
+static inline void remap_area_pte(pmd_t *pmd, unsigned long start,
+		unsigned long end, unsigned long phys_addr, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1803: FILE: arch/i386/mm/ioremap.c:25:
+	pte_t * pte;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1829: FILE: arch/i386/mm/ioremap.c:39:
+static inline int remap_area_pmd(pud_t * pud, unsigned long start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1830: FILE: arch/i386/mm/ioremap.c:40:
+static inline int remap_area_pmd(pud_t * pud, unsigned long start,
+		unsigned long end, unsigned long phys_addr, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1834: FILE: arch/i386/mm/ioremap.c:43:
+	pmd_t * pmd;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1862: FILE: arch/i386/mm/ioremap.c:56:
+static int remap_area_pages(unsigned long start, unsigned long phys_addr,
 				 unsigned long size, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1869: FILE: arch/i386/mm/ioremap.c:60:
+	pgd_t * pgd;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1872: FILE: arch/i386/mm/ioremap.c:63:
+	BUG_ON(start >= end);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1887: FILE: arch/i386/mm/ioremap.c:73:
+		 * more than 3-level page tables */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1900: FILE: arch/i386/mm/ioremap.c:82:
+		if (remap_area_pmd(pud, pgd_start, pgd_end,
+					phys_addr + pgd_start, flags))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206403.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 19 warnings, 80 checks, 1778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206403.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
