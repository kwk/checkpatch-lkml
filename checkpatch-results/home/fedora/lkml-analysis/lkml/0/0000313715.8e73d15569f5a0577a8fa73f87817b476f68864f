WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#62: FILE: drivers/block/ll_rw_blk.c:267:
+EXPORT_SYMBOL(blk_queue_ordered);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#212: FILE: drivers/ide/ide-io.c:95:
+	if (!post) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#215: FILE: drivers/ide/ide-io.c:98:
+	} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#226: FILE: drivers/ide/ide-io.c:109:
+			     int uptodate, int nr_sectors)
 			         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: drivers/ide/ide-io.c:113:
+	BUG_ON(!(rq->flags & REQ_STARTED));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#259: FILE: drivers/ide/ide-io.c:150:
+ *	@uptodate: 
   	 ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: drivers/ide/ide-io.c:150:
+ *^I@uptodate: $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: drivers/ide/ide-io.c:157:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: drivers/ide/ide-io.c:157:
+ $

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#267: FILE: drivers/ide/ide-io.c:158:
+int ide_end_request (ide_drive_t *drive, int uptodate, int nr_sectors)
                                              ^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#267: FILE: drivers/ide/ide-io.c:158:
+int ide_end_request (ide_drive_t *drive, int uptodate, int nr_sectors)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#279: FILE: drivers/ide/ide-io.c:170:
+	if (!blk_barrier_rq(rq))
[...]
+	else {
[...]

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#280: FILE: drivers/ide/ide-io.c:171:
+		ret = __ide_end_request(drive, rq, uptodate, nr_sectors);
 		                                   ^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#281: FILE: drivers/ide/ide-io.c:172:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: drivers/ide/ide-io.c:230:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#314: FILE: drivers/ide/ide-io.c:233:
+		HWIF(drive)->OUTB(drive->ctl|0x80, IDE_CONTROL_REG);
 		                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: drivers/ide/ide-io.c:237:
+		u8 cur = HWIF(drive)->INB(IDE_SELECT_REG);
+		if (cur & 0x40)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#318: FILE: drivers/ide/ide-io.c:237:
+		if (cur & 0x40)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#320: FILE: drivers/ide/ide-io.c:239:
+		else {

CHECK:SPACING: No space is necessary after a cast
#327: FILE: drivers/ide/ide-io.c:246:
+	sector = ((sector_t) high << 24) | low;

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#355: FILE: drivers/ide/ide-io.c:274:
+		printk("%s: %sflush took %lu jiffies\n", drive->name, blk_barrier_postflush(rq) ? "post" : "pre", jiffies - rq->timeout);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#355: FILE: drivers/ide/ide-io.c:274:
+		printk("%s: %sflush took %lu jiffies\n", drive->name, blk_barrier_postflush(rq) ? "post" : "pre", jiffies - rq->timeout);

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#366: FILE: drivers/ide/ide-io.c:285:
+	 * if it was the post-flush, complete the succesful part of the request
 	                                          ^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#370: FILE: drivers/ide/ide-io.c:289:
+	if (blk_barrier_postflush(rq)) {
[...]
+	} else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sector >= real_rq->hard_sector'
#373: FILE: drivers/ide/ide-io.c:292:
+		if ((sector >= real_rq->hard_sector) &&
+		    (sector < real_rq->hard_sector + real_rq->hard_nr_sectors))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#376: FILE: drivers/ide/ide-io.c:295:
+	} else

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#385: FILE: drivers/ide/ide-io.c:304:
+	printk(KERN_ERR "%s: failed barrier write: sector=%Lx(good=%d/bad=%d)\n", drive->name, sector, good_sectors, bad_sectors);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#385: FILE: drivers/ide/ide-io.c:304:
+	printk(KERN_ERR "%s: failed barrier write: sector=%Lx(good=%d/bad=%d)\n", drive->name, sector, good_sectors, bad_sectors);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#385: FILE: drivers/ide/ide-io.c:304:
+	printk(KERN_ERR "%s: failed barrier write: sector=%Lx(good=%d/bad=%d)\n", drive->name, sector, good_sectors, bad_sectors);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rw == WRITE'
#482: FILE: fs/buffer.c:2668:
+	if (buffer_ordered(bh) && (rw == WRITE))

CHECK:BIT_MACRO: Prefer using the BIT macro
#504: FILE: include/linux/blkdev.h:225:
+#define REQ_BAR_PREFLUSH	(1 << __REQ_BAR_PREFLUSH)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#505: FILE: include/linux/blkdev.h:226:
+#define REQ_BAR_POSTFLUSH	(1 << __REQ_BAR_POSTFLUSH)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: include/linux/blkdev.h:575:
+extern void blk_queue_ordered(request_queue_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#532: FILE: include/linux/blkdev.h:575:
+extern void blk_queue_ordered(request_queue_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#532: FILE: include/linux/blkdev.h:575:
+extern void blk_queue_ordered(request_queue_t *, int);

CHECK:CAMELCASE: Avoid CamelCase: <Write_EIO>
#552: FILE: include/linux/buffer_head.h:121:
+BUFFER_FNS(Write_EIO, write_io_error)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Ordered>
#553: FILE: include/linux/buffer_head.h:122:
+BUFFER_FNS(Ordered, ordered)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000313715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 17 warnings, 17 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000313715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
