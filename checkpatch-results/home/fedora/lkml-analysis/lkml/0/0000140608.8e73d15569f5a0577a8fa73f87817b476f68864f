WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#159: FILE: mm/slab.c:399:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#159: FILE: mm/slab.c:399:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#159: FILE: mm/slab.c:399:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#163: FILE: mm/slab.c:402:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#163: FILE: mm/slab.c:402:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#163: FILE: mm/slab.c:402:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#239: FILE: mm/slab.c:643:
+static void free_block(struct kmem_cache* cachep, void** objpp, int len, int node);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#239: FILE: mm/slab.c:643:
+static void free_block(struct kmem_cache* cachep, void** objpp, int len, int node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#240: FILE: mm/slab.c:644:
+static void enable_cpucache (struct kmem_cache *cachep);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#297: FILE: mm/slab.c:837:
+	struct kmem_cache* cachep;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: mm/slab.c:974:
+static void init_list(struct kmem_cache *cachep, struct kmem_list3 *list,
 		int nodeid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: mm/slab.c:1249:
+static void store_stackinfo(struct kmem_cache *cachep, unsigned long *addr,
 				unsigned long caller)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#404: FILE: mm/slab.c:1397:
+static void slab_destroy (struct kmem_cache *cachep, struct slab *slabp)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#480: FILE: mm/slab.c:1877:
+static void drain_array_locked(struct kmem_cache* cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: mm/slab.c:1878:
+static void drain_array_locked(struct kmem_cache* cachep,
 				struct array_cache *ac, int force, int node);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#486: FILE: mm/slab.c:1882:
+	struct kmem_cache *cachep = (struct kmem_cache*)arg;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#540: FILE: mm/slab.c:1997:
+int kmem_cache_destroy(struct kmem_cache * cachep)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#549: FILE: mm/slab.c:2048:
+static struct slab* alloc_slabmgmt(struct kmem_cache *cachep, void *objp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: mm/slab.c:2049:
+static struct slab* alloc_slabmgmt(struct kmem_cache *cachep, void *objp,
 			int colour_off, gfp_t local_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: mm/slab.c:2075:
+static void cache_init_objs(struct kmem_cache *cachep,
 			struct slab *slabp, unsigned long ctor_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: mm/slab.c:2261:
+static void *cache_free_debugcheck(struct kmem_cache *cachep, void *objp,
 					void *caller)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: mm/slab.c:2468:
+cache_alloc_debugcheck_after(struct kmem_cache *cachep,
 			gfp_t flags, void *objp, void *caller)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: mm/slab.c:3144:
+static int do_tune_cpucache(struct kmem_cache *cachep, int limit, int batchcount,
 				int shared)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: mm/slab.c:3241:
+static void drain_array_locked(struct kmem_cache *cachep,
 				struct array_cache *ac, int force, int node)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140608.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 8 warnings, 9 checks, 730 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140608.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
