ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: Documentation/job.txt:8:
+job implementation.  Section 3 provides some information about using $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: Documentation/job.txt:100:
+about running jobs, creating jobs, detaching, etc.  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: include/linux/job.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#184: FILE: include/linux/job.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#185: FILE: include/linux/job.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: include/linux/job.h:20:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: include/linux/job.h:24:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: include/linux/job.h:25:
+ * http://www.sgi.com $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: include/linux/job.h:26:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: include/linux/job.h:27:
+ * For further information regarding this notice, see: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: include/linux/job.h:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: include/linux/job.h:33:
+ * Description:  This file, include/linux/job.h, contains the data $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#199: FILE: include/linux/job.h:33:
+ * Description:  This file, include/linux/job.h, contains the data 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: include/linux/job.h:34:
+ * ^I^I structure definitions and functions prototypes used$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: include/linux/job.h:35:
+ * ^I^I by other kernel bits that communicate with the job$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: include/linux/job.h:36:
+ * ^I^I module.  One such example is Comprehensive System $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: include/linux/job.h:36:
+ * ^I^I module.  One such example is Comprehensive System $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: include/linux/job.h:37:
+ * ^I^I Accounting  (CSA).$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: include/linux/job.h:43:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: include/linux/job.h:49:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: include/linux/job.h:50:
+ * The job start/stop events: These will identify the $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#217: FILE: include/linux/job.h:51:
+ * The job start/stop events: These will identify the 
+ * the reason the jobstart and jobend callbacks are being 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: include/linux/job.h:51:
+ * the reason the jobstart and jobend callbacks are being $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/linux/job.h:55:
+    JOB_EVENT_IGNORE =  0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: include/linux/job.h:56:
+    JOB_EVENT_START =   1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: include/linux/job.h:57:
+    JOB_EVENT_RESTART = 2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: include/linux/job.h:58:
+    JOB_EVENT_END =  3,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: include/linux/job.h:61:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: include/linux/job.h:62:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: include/linux/job.h:64:
+ * INTERFACE INFO FOR ACCOUNTING SUBSCRIBERS $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: include/linux/job.h:70:
+^Iint     ^Itype;   /* CSA or something else */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#237: FILE: include/linux/job.h:71:
+^Iint     ^I(*jobstart)(int event, void *data);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: include/linux/job.h:72:
+^Iint     ^I(*jobend)(int event, void *data);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#242: FILE: include/linux/job.h:76:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: include/linux/job.h:77:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: include/linux/job.h:79:
+ * "subscriber" has to have a type.  This type will identify the $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#246: FILE: include/linux/job.h:80:
+ * "subscriber" has to have a type.  This type will identify the 
+ * the appropriate structs and macros to use when exchanging data.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: include/linux/job.h:83:
+#define JOB_ACCT_COUNT^I1 /* Number of entries available */^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#251: FILE: include/linux/job.h:85:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: include/linux/job.h:88:
+ * CSA ACCOUNTING $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: include/linux/job.h:92:
+/* $

WARNING:TYPO_SPELLING: 'betwee' may be misspelled - perhaps 'between'?
#259: FILE: include/linux/job.h:93:
+ * For data exchange betwee job and csa.  The embedded defines
                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#277: FILE: include/linux/job.h:111:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: include/linux/job.h:112:
+/* $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct job_acctmod *' should also have an identifier name
#283: FILE: include/linux/job.h:117:
+int job_register_acct(struct job_acctmod *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct job_acctmod *' should also have an identifier name
#284: FILE: include/linux/job.h:118:
+int job_unregister_acct(struct job_acctmod *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#285: FILE: include/linux/job.h:119:
+u64 job_getjid(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#286: FILE: include/linux/job.h:120:
+int job_getacct(u64, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#286: FILE: include/linux/job.h:120:
+int job_getacct(u64, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#286: FILE: include/linux/job.h:120:
+int job_getacct(u64, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#287: FILE: include/linux/job.h:121:
+int job_setacct(u64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#287: FILE: include/linux/job.h:121:
+int job_setacct(u64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#287: FILE: include/linux/job.h:121:
+int job_setacct(u64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#287: FILE: include/linux/job.h:121:
+int job_setacct(u64, int, int, void *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: include/linux/paggctl.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#295: FILE: include/linux/paggctl.h:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: include/linux/paggctl.h:2:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#310: FILE: include/linux/paggctl.h:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#311: FILE: include/linux/paggctl.h:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: include/linux/paggctl.h:19:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: include/linux/paggctl.h:22:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: include/linux/paggctl.h:23:
+ * http://www.sgi.com $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: include/linux/paggctl.h:24:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: include/linux/paggctl.h:25:
+ * For further information regarding this notice, see: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: include/linux/paggctl.h:26:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: include/linux/paggctl.h:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: include/linux/paggctl.h:29:
+ * $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#324: FILE: include/linux/paggctl.h:30:
+ * Description:   This file, include/linux/paggctl.h, contains the data

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: include/linux/paggctl.h:33:
+ * $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#339: FILE: include/linux/paggctl.h:45:
+#define PAGG_NAMESTR PAGG_NAMELN+1  /* PAGG mod name string including
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#339: FILE: include/linux/paggctl.h:45:
+#define PAGG_NAMESTR PAGG_NAMELN+1  /* PAGG mod name string including

WARNING:LONG_LINE_COMMENT: line length of 131 exceeds 100 columns
#340: FILE: include/linux/paggctl.h:46:
+												 * room for end-of-string = '\0' */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#340: FILE: include/linux/paggctl.h:46:
+												 * room for end-of-string = '\0' */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#340: FILE: include/linux/paggctl.h:46:
+#define PAGG_NAMESTR PAGG_NAMELN+1  /* PAGG mod name string including
+												 * room for end-of-string = '\0' */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#347: FILE: include/linux/paggctl.h:53:
+#define PAGG_JOB ^I"job"^I/* PAGG module identifier string */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#349: FILE: include/linux/paggctl.h:55:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: include/linux/paggctl.h:57:
+/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#359: FILE: include/linux/paggctl.h:65:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: include/linux/paggctl.h:67:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: include/linux/paggctl.h:68:
+ * Define ioctl options available in the job module $

WARNING:TYPO_SPELLING: 'specificed' may be misspelled - perhaps 'specified'?
#371: FILE: include/linux/paggctl.h:77:
+#define JOB_GETJID	_IOWR(JOB_IOCTL_NUM, 4, void *)	/* Get Job ID for specificed pid */
                   	                               	                  ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: include/linux/paggctl.h:78:
+#define JOB_WAITJID^I_IOWR(JOB_IOCTL_NUM, 5, void *)^I/* Wait for job to complete */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: include/linux/paggctl.h:93:
+#define JOB_OPT_MAX^I_IOWR(JOB_IOCTL_NUM, 22 , void *)^I/* Should always be highest number */^I$

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#387: FILE: include/linux/paggctl.h:93:
+#define JOB_OPT_MAX	_IOWR(JOB_IOCTL_NUM, 22 , void *)	/* Should always be highest number */	

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#387: FILE: include/linux/paggctl.h:93:
+#define JOB_OPT_MAX	_IOWR(JOB_IOCTL_NUM, 22 , void *)	/* Should always be highest number */	
                    	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: include/linux/paggctl.h:95:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: include/linux/paggctl.h:97:
+ * Define ioctl request structures for job module $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#395: FILE: include/linux/paggctl.h:101:
+^Iu64 ^Ir_jid;^I/* Return value of JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#396: FILE: include/linux/paggctl.h:102:
+^Iu64 ^Ijid;^I/* Jid value requested */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: include/linux/paggctl.h:103:
+^Iint ^Iuser;^I/* UID of user associated with job */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#398: FILE: include/linux/paggctl.h:104:
+^Iint ^Ioptions;/* creation options - unused */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#401: FILE: include/linux/paggctl.h:107:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#403: FILE: include/linux/paggctl.h:109:
+^Iu64 ^Ir_jid;^I/* Returned value of JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#404: FILE: include/linux/paggctl.h:110:
+^Ipid_t ^Ipid;^I/* Info requested for PID */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#407: FILE: include/linux/paggctl.h:113:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: include/linux/paggctl.h:115:
+^Iu64 ^Ir_jid;^I/* Returned value of JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: include/linux/paggctl.h:116:
+^Iu64 ^Ijid;^I/* Waiting on specified JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#411: FILE: include/linux/paggctl.h:117:
+^Iint ^Istat;^I/* Status information on JID */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: include/linux/paggctl.h:118:
+^Iint ^Ioptions;/* Waiting options */ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: include/linux/paggctl.h:118:
+^Iint ^Ioptions;/* Waiting options */ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#415: FILE: include/linux/paggctl.h:121:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: include/linux/paggctl.h:128:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#427: FILE: include/linux/paggctl.h:133:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#433: FILE: include/linux/paggctl.h:139:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#439: FILE: include/linux/paggctl.h:145:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#446: FILE: include/linux/paggctl.h:152:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: include/linux/paggctl.h:168:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: init/Kconfig:148:
+^I$

WARNING:TYPO_SPELLING: 'contians' may be misspelled - perhaps 'contains'?
#497: FILE: init/Kconfig:151:
+	  and the processes it contians.  The jid can also be used to send
 	                       ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: init/Kconfig:155:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#515: FILE: kernel/job.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#532: FILE: kernel/job.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#533: FILE: kernel/job.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: kernel/job.c:20:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: kernel/job.c:24:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: kernel/job.c:25:
+ * http://www.sgi.com $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: kernel/job.c:26:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: kernel/job.c:27:
+ * For further information regarding this notice, see: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: kernel/job.c:28:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#548: FILE: kernel/job.c:34:
+ * ^I^IFor further information about jobs, consult the file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#549: FILE: kernel/job.c:35:
+ * ^I^IDocumentation/job.txt. Jobs are implemented as a type of PAGG$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#550: FILE: kernel/job.c:36:
+ * ^I^I(process aggregate).  For further information about PAGGs,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#551: FILE: kernel/job.c:37:
+ * ^I^Iconsult the file Documentation/pagg.txt.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: kernel/job.c:44:
+ * have two classes of locks: $

WARNING:TYPO_SPELLING: 'sempahores' may be misspelled - perhaps 'semaphores'?
#563: FILE: kernel/job.c:49:
+ * Most of the locking used is read/write sempahores.  In  rare cases, a
                                           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: kernel/job.c:91:
+ * before downing job->sem. $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#624: FILE: kernel/job.c:110:
+#include <asm/uaccess.h>	/* for get_user & put_user */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: kernel/job.c:132:
+/* The states for a job */ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#649: FILE: kernel/job.c:135:
+#define STOPPED 3  ^I/* Stopped job */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: kernel/job.c:138:
+/* Job creation tags for the job HID (host ID) */ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#656: FILE: kernel/job.c:142:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#657: FILE: kernel/job.c:143:
+#ifdef ^I__BIG_ENDIAN$

ERROR:SPACING: exactly one space required after that #ifdef
#657: FILE: kernel/job.c:143:
+#ifdef 	__BIG_ENDIAN

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#658: FILE: kernel/job.c:144:
+#define^I^Iiptr_hid(ll) ^I((u32 *)&(ll))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: kernel/job.c:145:
+#define^I^Iiptr_sid(ll) ^I(((u32 *)(&(ll) + 1)) - 1)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#661: FILE: kernel/job.c:147:
+#define^I^Iiptr_hid(ll) ^I(((u32 *)(&(ll) + 1)) - 1)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#662: FILE: kernel/job.c:148:
+#define^I^Iiptr_sid(ll) ^I((u32 *)&(ll))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#665: FILE: kernel/job.c:151:
+#define^I^Ijid_hash(ll) ^I(*(iptr_sid(ll)) % HASH_SIZE)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#667: FILE: kernel/job.c:153:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#673: FILE: kernel/job.c:159:
+^Istruct list_head^Ientry; ^I/* list stuff */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#684: FILE: kernel/job.c:170:
+}; $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#689: FILE: kernel/job.c:175:
+^Iint^I    ^I    refcnt;^I/* Number of tasks attached to job */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: kernel/job.c:184:
+^Istruct job_waitinfo waitinfo;^I/* Status info for waiting tasks */ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#703: FILE: kernel/job.c:189:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#706: FILE: kernel/job.c:192:
+static int^I    ^I job_table_refcnt = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#706: FILE: kernel/job.c:192:
+static int	    	 job_table_refcnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#707: FILE: kernel/job.c:193:
+static ^I^I^I DECLARE_RWSEM(job_table_sem);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: kernel/job.c:195:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#711: FILE: kernel/job.c:197:
+static struct job_acctmod ^I*acct_list[JOB_ACCT_COUNT];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#712: FILE: kernel/job.c:198:
+static ^I^I^I^IDECLARE_RWSEM(acct_list_sem);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#714: FILE: kernel/job.c:200:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: kernel/job.c:204:
+static char ^I   *hid = NULL;^I    $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#718: FILE: kernel/job.c:204:
+static char ^I   *hid = NULL;^I    $

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#718: FILE: kernel/job.c:204:
+static char 	   *hid = NULL;	    

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#740: FILE: kernel/job.c:226:
+u64 job_getjid(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#740: FILE: kernel/job.c:226:
+u64 job_getjid(struct task_struct *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#742: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#742: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#742: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#742: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#742: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#760: FILE: kernel/job.c:246:
+static struct file_operations job_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: kernel/job.c:254:
+^Ichar *dbg_fname = s^I^I$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#770: FILE: kernel/job.c:256:
+#define DBG_PRINTENTRY()					\
+do {								\
+	printk(KERN_DEBUG "job: %s: entry\n", dbg_fname);	\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#772: FILE: kernel/job.c:258:
+	printk(KERN_DEBUG "job: %s: entry\n", dbg_fname);	\

ERROR:SPACING: space required before the open parenthesis '('
#773: FILE: kernel/job.c:259:
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#775: FILE: kernel/job.c:261:
+#define DBG_PRINTEXIT(c)^I^I^I^I ^I^I\$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#775: FILE: kernel/job.c:261:
+#define DBG_PRINTEXIT(c)				 		\
+do {							 		\
+	printk(KERN_DEBUG "job: %s: exit, code = %d\n", dbg_fname, c);	\
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#776: FILE: kernel/job.c:262:
+do {^I^I^I^I^I^I^I ^I^I\$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#777: FILE: kernel/job.c:263:
+	printk(KERN_DEBUG "job: %s: exit, code = %d\n", dbg_fname, c);	\

ERROR:SPACING: space required before the open parenthesis '('
#778: FILE: kernel/job.c:264:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#781: FILE: kernel/job.c:267:
+#define JOB_WLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: wlock = %p\n", l);	\
+	down_write(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#781: FILE: kernel/job.c:267:
+#define JOB_WLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: wlock = %p\n", l);	\
+	down_write(l);					\
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#783: FILE: kernel/job.c:269:
+	printk(KERN_DEBUG "job: wlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#785: FILE: kernel/job.c:271:
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#788: FILE: kernel/job.c:274:
+#define JOB_WUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: wunlock = %p\n", l);	\
+	up_write(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#788: FILE: kernel/job.c:274:
+#define JOB_WUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: wunlock = %p\n", l);	\
+	up_write(l);					\
+} while(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#790: FILE: kernel/job.c:276:
+	printk(KERN_DEBUG "job: wunlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#792: FILE: kernel/job.c:278:
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#795: FILE: kernel/job.c:281:
+#define JOB_RLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: rlock = %p\n", l);	\
+	down_read(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#795: FILE: kernel/job.c:281:
+#define JOB_RLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: rlock = %p\n", l);	\
+	down_read(l);					\
+} while(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#797: FILE: kernel/job.c:283:
+	printk(KERN_DEBUG "job: rlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#799: FILE: kernel/job.c:285:
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#802: FILE: kernel/job.c:288:
+#define JOB_RUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: runlock = %p\n", l);	\
+	up_read(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#802: FILE: kernel/job.c:288:
+#define JOB_RUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG "job: runlock = %p\n", l);	\
+	up_read(l);					\
+} while(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#804: FILE: kernel/job.c:290:
+	printk(KERN_DEBUG "job: runlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#806: FILE: kernel/job.c:292:
+} while(0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#808: FILE: kernel/job.c:294:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: kernel/job.c:297:
+#define DBG_PRINTINIT(s)^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#813: FILE: kernel/job.c:299:
+#define DBG_PRINTENTRY() ^I\$

ERROR:SPACING: space required before the open parenthesis '('
#815: FILE: kernel/job.c:301:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#819: FILE: kernel/job.c:305:
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#822: FILE: kernel/job.c:308:
+#define JOB_WLOCK(l)	\
+do {			\
+	down_write(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#822: FILE: kernel/job.c:308:
+#define JOB_WLOCK(l)	\
+do {			\
+	down_write(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#825: FILE: kernel/job.c:311:
+} while(0);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#828: FILE: kernel/job.c:314:
+#define JOB_WUNLOCK(l)	\
+do {			\
+	up_write(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#828: FILE: kernel/job.c:314:
+#define JOB_WUNLOCK(l)	\
+do {			\
+	up_write(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#831: FILE: kernel/job.c:317:
+} while(0);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#834: FILE: kernel/job.c:320:
+#define JOB_RLOCK(l)	\
+do {			\
+	down_read(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#834: FILE: kernel/job.c:320:
+#define JOB_RLOCK(l)	\
+do {			\
+	down_read(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#837: FILE: kernel/job.c:323:
+} while(0);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#840: FILE: kernel/job.c:326:
+#define JOB_RUNLOCK(l)	\
+do {			\
+	up_read(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#840: FILE: kernel/job.c:326:
+#define JOB_RUNLOCK(l)	\
+do {			\
+	up_read(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#843: FILE: kernel/job.c:329:
+} while(0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#845: FILE: kernel/job.c:331:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#848: FILE: kernel/job.c:334:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: kernel/job.c:336:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#856: FILE: kernel/job.c:342:
+ * You should normally JOB_RLOCK the job_table_sem before calling this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: kernel/job.c:343:
+ * function. $

ERROR:SPACING: space prohibited after that open square bracket '['
#866: FILE: kernel/job.c:352:
+	list_for_each(entry,  &job_table[ jid_hash(jid) ]) {

ERROR:SPACING: space prohibited before that close square bracket ']'
#866: FILE: kernel/job.c:352:
+	list_for_each(entry,  &job_table[ jid_hash(jid) ]) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#876: FILE: kernel/job.c:362:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#876: FILE: kernel/job.c:362:
+
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: kernel/job.c:368:
+ * In addition, a link from the task to the job is created and added to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: kernel/job.c:369:
+ * task via the data pointer reference.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#887: FILE: kernel/job.c:373:
+ * that the job cannot be removed since at least one process will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#902: FILE: kernel/job.c:388:
+job_attach(struct task_struct *task, struct pagg *new_pagg, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: kernel/job.c:389:
+job_attach(struct task_struct *task, struct pagg *new_pagg, 
+		void  *old_data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#908: FILE: kernel/job.c:394:
+	int          errcode     = 0;
+	DBG_PRINTINIT("job_attach");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#912: FILE: kernel/job.c:398:
+^I/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#922: FILE: kernel/job.c:408:
+		printk(KERN_WARNING "Attach task(pid=%d) to job"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#923: FILE: kernel/job.c:409:
+^I^I^I^I" failed - job is ZOMBIE\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#923: FILE: kernel/job.c:409:
+		printk(KERN_WARNING "Attach task(pid=%d) to job"
+				" failed - job is ZOMBIE\n", 

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#930: FILE: kernel/job.c:416:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#933: FILE: kernel/job.c:419:
+^Iattached = (struct job_attach *)kmalloc(sizeof(struct job_attach), $

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#933: FILE: kernel/job.c:419:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), 

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attached)...) over kmalloc(sizeof(struct job_attach)...)
#933: FILE: kernel/job.c:419:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), 

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#937: FILE: kernel/job.c:423:
+		printk(KERN_ERR "Attach task(pid=%d) to job"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#938: FILE: kernel/job.c:424:
+^I^I^I^I" failed on memory error in kernel\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#938: FILE: kernel/job.c:424:
+		printk(KERN_ERR "Attach task(pid=%d) to job"
+				" failed on memory error in kernel\n", 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#944: FILE: kernel/job.c:430:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#950: FILE: kernel/job.c:436:
+^I++job->refcnt;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: kernel/job.c:438:
+^IJOB_WUNLOCK(&job->sem);  $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#959: FILE: kernel/job.c:445:
+	if (attached) kfree(attached);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#963: FILE: kernel/job.c:449:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: kernel/job.c:451:
+ * job_detach $

WARNING:LINE_SPACING: Missing a blank line after declarations
#982: FILE: kernel/job.c:468:
+	struct job_entry  *job        = attached->job;
+	DBG_PRINTINIT("job_detach");

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#987: FILE: kernel/job.c:473:
+	 * Obtain the lock on the the job_table_sem and the job->sem for 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: kernel/job.c:473:
+^I * Obtain the lock on the the job_table_sem and the job->sem for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#991: FILE: kernel/job.c:477:
+^IJOB_WLOCK(&job->sem);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1004: FILE: kernel/job.c:490:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1016: FILE: kernel/job.c:502:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1026: FILE: kernel/job.c:512:
+^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1028: FILE: kernel/job.c:514:
+^I^I/* $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1034: FILE: kernel/job.c:520:
+#if defined(CONFIG_CSA) || defined(CONFIG_CSA_MODULE)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1038: FILE: kernel/job.c:524:
+			struct job_acctmod *acct = acct_list[JOB_ACCT_CSA];
+			if (acct->module) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1040: FILE: kernel/job.c:526:
+					printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#1041: FILE: kernel/job.c:527:
+						"job_detach: Tried to get non-living acct module\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1058: FILE: kernel/job.c:544:
+					printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#1059: FILE: kernel/job.c:545:
+						"job_detach: CSA -"

WARNING:SPLIT_STRING: quoted string split across lines
#1060: FILE: kernel/job.c:546:
+						"job_detach: CSA -"
+						" jobend failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1063: FILE: kernel/job.c:549:
+^I^I^Iif (acct->module) $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1066: FILE: kernel/job.c:552:
+			printk(KERN_WARNING "job_detach: CSA - attempt"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#1066: FILE: kernel/job.c:552:
+			printk(KERN_WARNING "job_detach: CSA - attempt"

WARNING:SPLIT_STRING: quoted string split across lines
#1067: FILE: kernel/job.c:553:
+			printk(KERN_WARNING "job_detach: CSA - attempt"
+					" to lock CSA module failed.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1071: FILE: kernel/job.c:557:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1072: FILE: kernel/job.c:558:
+^I^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1074: FILE: kernel/job.c:560:
+^I         * detached and finished waiting, so now we can free the$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: kernel/job.c:568:
+^I^I * Therefore, only the job->sem is being held - the $

WARNING:RETURN_VOID: void function return statements are not generally useful
#1092: FILE: kernel/job.c:578:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1094: FILE: kernel/job.c:580:
+/* $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1106: FILE: kernel/job.c:592:
+^Istruct job_entry^I^I*job ^I      = NULL;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1111: FILE: kernel/job.c:597:
+	int			errcode       = 0;
+	DBG_PRINTINIT("job_sys_create");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: kernel/job.c:601:
+^I/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1125: FILE: kernel/job.c:611:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1126: FILE: kernel/job.c:612:
+#if 0	/* XXX - Use if capable is not present */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1129: FILE: kernel/job.c:615:
+#else^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: kernel/job.c:630:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1145: FILE: kernel/job.c:631:
+^I/* $

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1150: FILE: kernel/job.c:636:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attached)...) over kmalloc(sizeof(struct job_attach)...)
#1150: FILE: kernel/job.c:636:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1157: FILE: kernel/job.c:643:
+	job = (struct job_entry *)kmalloc(sizeof(struct job_entry), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*job)...) over kmalloc(sizeof(struct job_entry)...)
#1157: FILE: kernel/job.c:643:
+	job = (struct job_entry *)kmalloc(sizeof(struct job_entry), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1166: FILE: kernel/job.c:652:
+^I * already in use, we don't want to detach that job.  Having this ability $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1172: FILE: kernel/job.c:658:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: kernel/job.c:662:
+^IJOB_WLOCK(&job_table_sem);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: kernel/job.c:671:
+^I^Iif (job_getjob(create.jid)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: kernel/job.c:675:
+^I^I^I/* we haven't allocated a new pagg yet so error_return won't unlock $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1190: FILE: kernel/job.c:676:
+			 * this.  We'll unlock here */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1200: FILE: kernel/job.c:686:
+^I} else {^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1201: FILE: kernel/job.c:687:
+	} else {	
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open square bracket '['
#1238: FILE: kernel/job.c:724:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

ERROR:SPACING: space prohibited before that close square bracket ']'
#1238: FILE: kernel/job.c:724:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1238: FILE: kernel/job.c:724:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1241: FILE: kernel/job.c:727:
+^IJOB_WUNLOCK(&job_table_sem); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1247: FILE: kernel/job.c:733:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1253: FILE: kernel/job.c:739:
+^I} $

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1258: FILE: kernel/job.c:744:
+#if defined(CONFIG_CSA) || defined(CONFIG_CSA_MODULE)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1262: FILE: kernel/job.c:748:
+		struct job_acctmod *acct = acct_list[JOB_ACCT_CSA];
+		if (acct->module) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1264: FILE: kernel/job.c:750:
+				printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_sys_create', this function's name, in a string
#1265: FILE: kernel/job.c:751:
+					"job_sys_create: Tried to get non-living acct module\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1281: FILE: kernel/job.c:767:
+				printk(KERN_WARNING "job_sys_create: CSA -"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_sys_create', this function's name, in a string
#1281: FILE: kernel/job.c:767:
+				printk(KERN_WARNING "job_sys_create: CSA -"

WARNING:SPLIT_STRING: quoted string split across lines
#1282: FILE: kernel/job.c:768:
+				printk(KERN_WARNING "job_sys_create: CSA -"
+						" jobstart failed.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1285: FILE: kernel/job.c:771:
+^I^Iif (acct->module) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1290: FILE: kernel/job.c:776:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1302: FILE: kernel/job.c:788:
+	if (attached) kfree(attached);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1303: FILE: kernel/job.c:789:
+	if (job) kfree(job);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1319: FILE: kernel/job.c:805:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1328: FILE: kernel/job.c:814:
+job_sys_getjid(struct job_getjid *getjid_args) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1333: FILE: kernel/job.c:819:
+	struct task_struct *task;
+	DBG_PRINTINIT("job_sys_getjid");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1345: FILE: kernel/job.c:831:
+	if (getjid.pid == current->pid) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1355: FILE: kernel/job.c:841:
+		if (getjid.r_jid == 0) {
+			errcode = -ENODATA;
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1364: FILE: kernel/job.c:850:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1373: FILE: kernel/job.c:859:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1374: FILE: kernel/job.c:860:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1377: FILE: kernel/job.c:863:
+ * This job allows a process to wait until a job exits & it returns the $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1385: FILE: kernel/job.c:871:
+^Istruct job_waitjid ^Iwaitjid;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1388: FILE: kernel/job.c:874:
+	int		retcode = 0;
+	DBG_PRINTINIT("job_sys_waitjid");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1397: FILE: kernel/job.c:883:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1398: FILE: kernel/job.c:884:
+	waitjid.r_jid = waitjid.stat = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1408: FILE: kernel/job.c:894:
+
+

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1409: FILE: kernel/job.c:895:
+	if ((job = job_getjob(waitjid.jid)) == NULL ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1409: FILE: kernel/job.c:895:
+	if ((job = job_getjob(waitjid.jid)) == NULL ) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1413: FILE: kernel/job.c:899:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1415: FILE: kernel/job.c:901:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1421: FILE: kernel/job.c:907:
+^I++job->waitcnt; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1427: FILE: kernel/job.c:913:
+	 * first notifying this current task */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1428: FILE: kernel/job.c:914:
+^Iretcode = wait_event_interruptible(job->wait, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1429: FILE: kernel/job.c:915:
+	retcode = wait_event_interruptible(job->wait, 
+			job->refcnt == 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1432: FILE: kernel/job.c:918:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1433: FILE: kernel/job.c:919:
+^I^I * This data is static at this point, we will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1442: FILE: kernel/job.c:928:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1446: FILE: kernel/job.c:932:
+^I^I/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1471: FILE: kernel/job.c:957:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1487: FILE: kernel/job.c:973:
+	int retcode = 0;
+	DBG_PRINTINIT("job_sys_killjid");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1504: FILE: kernel/job.c:990:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1516: FILE: kernel/job.c:1002:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1517: FILE: kernel/job.c:1003:
+         * Check capability to signal job.  The signaling user must be$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1520: FILE: kernel/job.c:1006:
+#if 0		/* Use this if not capability is available */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1521: FILE: kernel/job.c:1007:
+^Iif (current->uid != 0) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1542: FILE: kernel/job.c:1028:
+^I^Ierr = send_sig_info(killjid.sig, &info, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1543: FILE: kernel/job.c:1029:
+		err = send_sig_info(killjid.sig, &info, 
+				attached->task);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1545: FILE: kernel/job.c:1031:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1550: FILE: kernel/job.c:1036:
+^I^I^I * should exit when all the child processes exit. It $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1554: FILE: kernel/job.c:1040:
+			if (attached->entry.prev != &job->attached) {
+				retcode = err;
+			}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1559: FILE: kernel/job.c:1045:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1567: FILE: kernel/job.c:1053:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1576: FILE: kernel/job.c:1062:
+
+

WARNING:TYPO_SPELLING: 'Retun' may be misspelled - perhaps 'Return'?
#1580: FILE: kernel/job.c:1066:
+ * Retun the number of jobs currently on the system.
    ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1583: FILE: kernel/job.c:1069:
+ */ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1587: FILE: kernel/job.c:1073:
+^Istruct job_jidcnt ^Ijidcnt;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1588: FILE: kernel/job.c:1074:
+	struct job_jidcnt 	jidcnt;
+	DBG_PRINTINIT("job_sys_getjidcnt");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1606: FILE: kernel/job.c:1092:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1607: FILE: kernel/job.c:1093:
+		
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1611: FILE: kernel/job.c:1097:
+ * Get the list of all jids currently on the system (limited by the number of $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1622: FILE: kernel/job.c:1108:
+^Iint ^I^I count;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1623: FILE: kernel/job.c:1109:
+	int 		 count;
+	DBG_PRINTINIT("job_sys_getjidlst");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1632: FILE: kernel/job.c:1118:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1638: FILE: kernel/job.c:1124:
+	jid = (u64 *)kmalloc(sizeof(u64)*jidlst.r_val, GFP_KERNEL);
 	                                ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1638: FILE: kernel/job.c:1124:
+	jid = (u64 *)kmalloc(sizeof(u64)*jidlst.r_val, GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1649: FILE: kernel/job.c:1135:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1656: FILE: kernel/job.c:1142:
+			if (count == jidlst.r_val) {
+				break;
+			}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1667: FILE: kernel/job.c:1153:
+		if (copy_to_user(jidlst.jid+i, &jid[i], sizeof(u64))) {
 		                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1682: FILE: kernel/job.c:1168:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1696: FILE: kernel/job.c:1182:
+	int	     retcode = 0;
+	DBG_PRINTINIT("job_sys_getpidcnt");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1748: FILE: kernel/job.c:1234:
+	int		 i;
+	DBG_PRINTINIT("job_sys_getpidlst");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1757: FILE: kernel/job.c:1243:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1765: FILE: kernel/job.c:1251:
+	pid = (pid_t *)kmalloc(sizeof(pid_t)*max, GFP_KERNEL);
 	                                    ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1765: FILE: kernel/job.c:1251:
+	pid = (pid_t *)kmalloc(sizeof(pid_t)*max, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1765: FILE: kernel/job.c:1251:
+	pid = (pid_t *)kmalloc(sizeof(pid_t)*max, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1779: FILE: kernel/job.c:1265:
+	if (!job) {
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1788: FILE: kernel/job.c:1274:
+		return -ENODATA;
+	} else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1789: FILE: kernel/job.c:1275:
+	} else {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1795: FILE: kernel/job.c:1281:
+			if (i == max) {
+				break;
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1798: FILE: kernel/job.c:1284:
+^I^I^Iattached = list_entry(attached_entry, struct job_attach, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1799: FILE: kernel/job.c:1285:
+			attached = list_entry(attached_entry, struct job_attach, 
+					entry);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1808: FILE: kernel/job.c:1294:
+		if (copy_to_user(pidlst.pid+i, &pid[i], sizeof(pid_t))) {
 		                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1820: FILE: kernel/job.c:1306:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1834: FILE: kernel/job.c:1320:
+	int        retcode = 0;
+	DBG_PRINTINIT("job_sys_getuser");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1866: FILE: kernel/job.c:1352:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1867: FILE: kernel/job.c:1353:
+/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1881: FILE: kernel/job.c:1367:
+	int              retcode = 0;
+	DBG_PRINTINIT("getprimepid");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1902: FILE: kernel/job.c:1388:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1903: FILE: kernel/job.c:1389:
+^I * Job found, now look at first pid entry in the $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1913: FILE: kernel/job.c:1399:
+		if (!attached->task) {
[...]
+		} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1929: FILE: kernel/job.c:1415:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1930: FILE: kernel/job.c:1416:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1934: FILE: kernel/job.c:1420:
+ * If this does not get set, then the jids upper 32 bits will be set to $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1944: FILE: kernel/job.c:1430:
+	int			errcode = 0;
+	DBG_PRINTINIT("job_sys_sethid");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1959: FILE: kernel/job.c:1445:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1963: FILE: kernel/job.c:1449:
+^IJOB_WLOCK(&job_table_sem); $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1965: FILE: kernel/job.c:1451:
+	sethid.r_hid = jid_hid = sethid.hid;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1978: FILE: kernel/job.c:1464:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1979: FILE: kernel/job.c:1465:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1982: FILE: kernel/job.c:1468:
+ * This function is detach all the processes from a job, but allows the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2016: FILE: kernel/job.c:1502:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2020: FILE: kernel/job.c:1506:
+^IJOB_WLOCK(&job_table_sem); $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2025: FILE: kernel/job.c:1511:
+	if (job) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2028: FILE: kernel/job.c:1514:
+^I^I/* Mark job as ZOMBIE so no new processes can attach to it */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2033: FILE: kernel/job.c:1519:
+^I^I/* Okay, no new processes can attach to the job.  We can $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2041: FILE: kernel/job.c:1527:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2042: FILE: kernel/job.c:1528:
+^I^I/* Walk through list of attached tasks and unset the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2043: FILE: kernel/job.c:1529:
+^I^I * pagg entries. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2044: FILE: kernel/job.c:1530:
+^I^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2047: FILE: kernel/job.c:1533:
+^I^I * we could reference memory freed by the pagg hook detach function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2049: FILE: kernel/job.c:1535:
+^I^I * $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2064: FILE: kernel/job.c:1550:
+
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2076: FILE: kernel/job.c:1562:
+^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2093: FILE: kernel/job.c:1579:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2094: FILE: kernel/job.c:1580:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2097: FILE: kernel/job.c:1583:
+ * This function is detach a process from the job it is attached too, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2098: FILE: kernel/job.c:1584:
+ * but allows the processes to continue running.  You need $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2099: FILE: kernel/job.c:1585:
+ * CAP_SYS_RESOURCE capability for this to succeed. $

WARNING:LINE_SPACING: Missing a blank line after declarations
#2110: FILE: kernel/job.c:1596:
+	int		   errcode = 0;
+	DBG_PRINTINIT("job_sys_detachpid");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2161: FILE: kernel/job.c:1647:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2165: FILE: kernel/job.c:1651:
+ * This function is used by modules that are registering to provide job $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2170: FILE: kernel/job.c:1656:
+int $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2181: FILE: kernel/job.c:1667:
+	if (am->type < 0 || am->type > (JOB_ACCT_COUNT-1)) {
 	                                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acct_list[am->type]"
#2187: FILE: kernel/job.c:1673:
+	if (acct_list[am->type] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2199: FILE: kernel/job.c:1685:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2208: FILE: kernel/job.c:1694:
+int $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2219: FILE: kernel/job.c:1705:
+	if (am->type < 0 || am->type > (JOB_ACCT_COUNT-1))  {
 	                                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2249: FILE: kernel/job.c:1735:
+	u64	   jid = 0;
+	DBG_PRINTINIT("job_getjid");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2267: FILE: kernel/job.c:1753:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2271: FILE: kernel/job.c:1757:
+ * This function is used by accounting subscribers to get accounting $

WARNING:LINE_SPACING: Missing a blank line after declarations
#2283: FILE: kernel/job.c:1769:
+	struct job_entry	*job;
+	DBG_PRINTINIT("job_getacct");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2308: FILE: kernel/job.c:1794:
+	switch (type) {
[...]
+		case JOB_ACCT_CSA: 
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2309: FILE: kernel/job.c:1795:
+#if defined(CONFIG_CSA) || defined(CONFIG_CSA_MODULE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2310: FILE: kernel/job.c:1796:
+^I^Icase JOB_ACCT_CSA: $

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#2327: FILE: kernel/job.c:1813:
+			return -EINVAL;
+			break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2351: FILE: kernel/job.c:1837:
+	struct job_entry	*job;
+	DBG_PRINTINIT("job_setacct");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2376: FILE: kernel/job.c:1862:
+	switch (type) {
[...]
+		case JOB_ACCT_CSA:
[...]
+		default:

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2377: FILE: kernel/job.c:1863:
+#if defined(CONFIG_CSA) || defined(CONFIG_CSA_MODULE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2381: FILE: kernel/job.c:1867:
+^I^I^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2382: FILE: kernel/job.c:1868:
+			if (subfield & JOB_CSA_ACCTFILE) {
+				job->csa.acctfile = csa->job_acctfile;
+			}

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#2392: FILE: kernel/job.c:1878:
+			return -EINVAL;
+			break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2399: FILE: kernel/job.c:1885:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2410: FILE: kernel/job.c:1896:
+{                 $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2411: FILE: kernel/job.c:1897:
+	int rc=0;
 	      ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2417: FILE: kernel/job.c:1903:
+	switch (request) {
+		case JOB_CREATE:
[...]
+		case JOB_ATTACH:
+		case JOB_DETACH:
[...]
+		case JOB_GETJID:
[...]
+		case JOB_WAITJID:
[...]
+		case JOB_KILLJID:
[...]
+		case JOB_GETJIDCNT:
[...]
+		case JOB_GETJIDLST:
[...]
+		case JOB_GETPIDCNT:
[...]
+		case JOB_GETPIDLST:
[...]
+		case JOB_GETUSER:
[...]
+		case JOB_GETPRIMEPID:
[...]
+		case JOB_SETHID:
[...]
+		case JOB_DETACHJID:
[...]
+		case JOB_DETACHPID:
[...]
+		case JOB_SETJLIMIT:
+		case JOB_GETJLIMIT:
+		case JOB_GETJUSAGE:
+		case JOB_FREE:
+		default:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2475: FILE: kernel/job.c:1961:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2485: FILE: kernel/job.c:1971:
+^I  unsigned long data)        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2486: FILE: kernel/job.c:1972:
+{                 $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2490: FILE: kernel/job.c:1976:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2491: FILE: kernel/job.c:1977:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2501: FILE: kernel/job.c:1987:
+init_job(void) $

CHECK:SPACING: No space is necessary after a cast
#2501: FILE: kernel/job.c:1987:
+init_job(void) 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2503: FILE: kernel/job.c:1989:
+	int i,rc;
 	     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2505: FILE: kernel/job.c:1991:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2507: FILE: kernel/job.c:1993:
+	for (i = 0; i < HASH_SIZE; i++) {
+		INIT_LIST_HEAD(&job_table[i]);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2512: FILE: kernel/job.c:1998:
+	for (i = 0; i < JOB_ACCT_COUNT; i++) {
+		acct_list[i] = NULL;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2517: FILE: kernel/job.c:2003:
+	if (hid) {
[...]
+	} else {
[...]

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2518: FILE: kernel/job.c:2004:
+		jid_hid = (int)simple_strtoul(hid, &hid, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2524: FILE: kernel/job.c:2010:
+	if (rc < 0) {
+		return -1;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2530: FILE: kernel/job.c:2016:
+	job_proc_entry = create_proc_entry(JOB_PROC_ENTRY,
+		S_IFREG | S_IRUGO, &proc_root);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2530: FILE: kernel/job.c:2016:
+		S_IFREG | S_IRUGO, &proc_root);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2540: FILE: kernel/job.c:2026:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#2559: FILE: kernel/job.c:2045:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2562: FILE: kernel/job.c:2048:
+EXPORT_SYMBOL(job_register_acct);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2563: FILE: kernel/job.c:2049:
+EXPORT_SYMBOL(job_unregister_acct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2564: FILE: kernel/job.c:2050:
+EXPORT_SYMBOL(job_getjid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2565: FILE: kernel/job.c:2051:
+EXPORT_SYMBOL(job_getacct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2566: FILE: kernel/job.c:2052:
+EXPORT_SYMBOL(job_setacct);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 191 errors, 177 warnings, 86 checks, 2496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
