WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: security/Kconfig:102:
+config SECURITY_MULTIADM
+    tristate "MultiAdmin secuirty module"
+    depends on SECURITY
+    ---help---
+        The MultiAdmin security kernel module provides means to have multiple
+        "root" users with unique UIDs. This fixes collation order problems
+        which for example appear with NSCD, allows to have files with
+        determinable owner and allows to track the quota usage for every
+        user, since they now have a unique uid.
+        
+        It also implements a "sub-admin", a partially restricted root user
+        (or enhanced normal user, depending on the way you see it), who has
+        full read-only access to most subsystems, and additional write rights
+        only to a limited subset, e.g. writing to files or killing processes
+        only of certain users.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: security/Kconfig:111:
+        $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#94: FILE: security/loadme:2:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: security/multiadm.c:1:
+/*=============================================================================

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#104: FILE: security/multiadm.c:2:
+/*=============================================================================
+| MultiAdmin Security Module                                                  |

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: security/multiadm.c:19:
+    Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#123: FILE: security/multiadm.c:21:
+=============================================================================*/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: security/multiadm.c:42:
+    !defined(CONFIG_SECURITY_CAPABILITIES_MODULE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: security/multiadm.c:44:
+               for MultiAdmin to compile successfully.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: security/multiadm.c:44:
+               for MultiAdmin to compile successfully.$

CHECK:CAMELCASE: Avoid CamelCase: <MultiAdmin>
#146: FILE: security/multiadm.c:44:
+               for MultiAdmin to compile successfully.

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#153: FILE: security/multiadm.c:51:
+/*
+This typedef is used to mark functions a littile without interfering

WARNING:NEW_TYPEDEFS: do not add new typedefs
#159: FILE: security/multiadm.c:57:
+typedef int bool;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: security/multiadm.c:93:
+    .bprm_apply_creds      = cap_bprm_apply_creds,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: security/multiadm.c:94:
+    .bprm_set_security     = mt_bprm_set_security,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: security/multiadm.c:95:
+    .cap_extra             = mt_cap_extra,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: security/multiadm.c:96:
+    .capable               = cap_capable,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: security/multiadm.c:97:
+    .capget                = cap_capget,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: security/multiadm.c:98:
+    .capset_check          = cap_capset_check,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: security/multiadm.c:99:
+    .capset_set            = cap_capset_set,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: security/multiadm.c:100:
+    .inode_permission      = mt_inode_permission,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: security/multiadm.c:101:
+    .inode_setattr         = mt_inode_setattr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: security/multiadm.c:102:
+    .ipc_permission        = mt_ipc_permission,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: security/multiadm.c:103:
+    .msg_queue_msgctl      = mt_msq_msgctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: security/multiadm.c:104:
+    .ptrace                = mt_ptrace,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: security/multiadm.c:105:
+    .quotactl              = mt_quotactl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: security/multiadm.c:106:
+    .sem_semctl            = mt_sem_semctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: security/multiadm.c:107:
+    .shm_shmctl            = mt_shm_shmctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: security/multiadm.c:108:
+    .task_kill             = mt_task_kill,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: security/multiadm.c:109:
+    .task_post_setuid      = mt_task_post_setuid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: security/multiadm.c:110:
+    .task_post_setgid      = mt_task_post_setgid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: security/multiadm.c:111:
+    .task_setnice          = mt_task_setnice,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: security/multiadm.c:112:
+    .task_setscheduler     = mt_task_setscheduler,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: security/multiadm.c:113:
+    .task_setuid           = mt_task_setuid,$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#217: FILE: security/multiadm.c:115:
+};
+static gid_t Supergid = -1, Subgid = -1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Supergid>
#217: FILE: security/multiadm.c:115:
+static gid_t Supergid = -1, Subgid = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Subgid>
#217: FILE: security/multiadm.c:115:
+static gid_t Supergid = -1, Subgid = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Superuid_start>
#218: FILE: security/multiadm.c:116:
+static uid_t Superuid_start = 0,  Superuid_end = 0,

CHECK:CAMELCASE: Avoid CamelCase: <Superuid_end>
#218: FILE: security/multiadm.c:116:
+static uid_t Superuid_start = 0,  Superuid_end = 0,

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: security/multiadm.c:117:
+             Subuid_start   = -1, Subuid_end   = -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: security/multiadm.c:117:
+             Subuid_start   = -1, Subuid_end   = -1,$

CHECK:CAMELCASE: Avoid CamelCase: <Subuid_start>
#219: FILE: security/multiadm.c:117:
+             Subuid_start   = -1, Subuid_end   = -1,

CHECK:CAMELCASE: Avoid CamelCase: <Subuid_end>
#219: FILE: security/multiadm.c:117:
+             Subuid_start   = -1, Subuid_end   = -1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: security/multiadm.c:118:
+             Netuid         = -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: security/multiadm.c:118:
+             Netuid         = -1,$

CHECK:CAMELCASE: Avoid CamelCase: <Netuid>
#220: FILE: security/multiadm.c:118:
+             Netuid         = -1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: security/multiadm.c:119:
+             Wrtuid_start   = -1, Wrtuid_end   = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: security/multiadm.c:119:
+             Wrtuid_start   = -1, Wrtuid_end   = -1;$

CHECK:CAMELCASE: Avoid CamelCase: <Wrtuid_start>
#221: FILE: security/multiadm.c:119:
+             Wrtuid_start   = -1, Wrtuid_end   = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Wrtuid_end>
#221: FILE: security/multiadm.c:119:
+             Wrtuid_start   = -1, Wrtuid_end   = -1;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#222: FILE: security/multiadm.c:120:
+static int Secondary = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:CAMELCASE: Avoid CamelCase: <Secondary>
#222: FILE: security/multiadm.c:120:
+static int Secondary = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#227: FILE: security/multiadm.c:125:
+module_param(Supergid,       int, S_IRUSR | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#228: FILE: security/multiadm.c:126:
+module_param(Superuid_start, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#229: FILE: security/multiadm.c:127:
+module_param(Superuid_end,   int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#230: FILE: security/multiadm.c:128:
+module_param(Subuid_start,   int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#231: FILE: security/multiadm.c:129:
+module_param(Subuid_end,     int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#232: FILE: security/multiadm.c:130:
+module_param(Subgid,         int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#233: FILE: security/multiadm.c:131:
+module_param(Netuid,         int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#234: FILE: security/multiadm.c:132:
+module_param(Wrtuid_start,   int, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#235: FILE: security/multiadm.c:133:
+module_param(Wrtuid_end,     int, S_IRUGO | S_IWUSR);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#247: FILE: security/multiadm.c:145:
+__init static int multiadm_init(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: security/multiadm.c:146:
+    int eax = 0, ebx = 0;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#249: FILE: security/multiadm.c:147:
+    int eax = 0, ebx = 0;
+    if((eax = register_security(&mt_secops)) != 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: security/multiadm.c:147:
+    if((eax = register_security(&mt_secops)) != 0) {$

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: security/multiadm.c:147:
+    if((eax = register_security(&mt_secops)) != 0) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#249: FILE: security/multiadm.c:147:
+    if((eax = register_security(&mt_secops)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: security/multiadm.c:148:
+        if((ebx = mod_reg_security(BASENAME, &mt_secops)) != 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: security/multiadm.c:148:
+        if((ebx = mod_reg_security(BASENAME, &mt_secops)) != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#250: FILE: security/multiadm.c:148:
+        if((ebx = mod_reg_security(BASENAME, &mt_secops)) != 0) {
+            printk(KERN_WARNING PREFIX

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: security/multiadm.c:148:
+        if((ebx = mod_reg_security(BASENAME, &mt_secops)) != 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#250: FILE: security/multiadm.c:148:
+        if((ebx = mod_reg_security(BASENAME, &mt_secops)) != 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: security/multiadm.c:149:
+            printk(KERN_WARNING PREFIX$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: security/multiadm.c:149:
+            printk(KERN_WARNING PREFIX$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#251: FILE: security/multiadm.c:149:
+            printk(KERN_WARNING PREFIX

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: security/multiadm.c:150:
+            "Could not register with kernel: %d, %d\n", eax, ebx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: security/multiadm.c:150:
+            "Could not register with kernel: %d, %d\n", eax, ebx);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: security/multiadm.c:151:
+            return ebx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: security/multiadm.c:151:
+            return ebx;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: security/multiadm.c:152:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: security/multiadm.c:152:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: security/multiadm.c:153:
+        Secondary = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: security/multiadm.c:153:
+        Secondary = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: security/multiadm.c:154:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: security/multiadm.c:156:
+    if(range_intersect(Superuid_start, Superuid_end, Subuid_start, Subuid_end))$

ERROR:SPACING: space required before the open parenthesis '('
#258: FILE: security/multiadm.c:156:
+    if(range_intersect(Superuid_start, Superuid_end, Subuid_start, Subuid_end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: security/multiadm.c:157:
+        printk(KERN_WARNING PREFIX$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: security/multiadm.c:157:
+        printk(KERN_WARNING PREFIX$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#259: FILE: security/multiadm.c:157:
+        printk(KERN_WARNING PREFIX

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: security/multiadm.c:158:
+          "Superadmin and Subadmin ranges intersect! Unpredictable behavior"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: security/multiadm.c:158:
+          "Superadmin and Subadmin ranges intersect! Unpredictable behavior"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: security/multiadm.c:159:
+          " may result: some operations may classify you as a superadmin,"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: security/multiadm.c:159:
+          " may result: some operations may classify you as a superadmin,"$

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: security/multiadm.c:159:
+          "Superadmin and Subadmin ranges intersect! Unpredictable behavior"
+          " may result: some operations may classify you as a superadmin,"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: security/multiadm.c:160:
+          " others as a subadmin. Security leak: subadmin could possibly"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: security/multiadm.c:160:
+          " others as a subadmin. Security leak: subadmin could possibly"$

WARNING:SPLIT_STRING: quoted string split across lines
#262: FILE: security/multiadm.c:160:
+          " may result: some operations may classify you as a superadmin,"
+          " others as a subadmin. Security leak: subadmin could possibly"

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: security/multiadm.c:161:
+          " change into superadmin!\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: security/multiadm.c:161:
+          " change into superadmin!\n"$

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: security/multiadm.c:161:
+          " others as a subadmin. Security leak: subadmin could possibly"
+          " change into superadmin!\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: security/multiadm.c:162:
+        );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: security/multiadm.c:162:
+        );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: security/multiadm.c:163:
+    if(range_intersect(Superuid_start, Superuid_end, Netuid, Netuid))$

ERROR:SPACING: space required before the open parenthesis '('
#265: FILE: security/multiadm.c:163:
+    if(range_intersect(Superuid_start, Superuid_end, Netuid, Netuid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: security/multiadm.c:164:
+        printk(KERN_WARNING PREFIX "Netuid within superadmin range! -Has more "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: security/multiadm.c:164:
+        printk(KERN_WARNING PREFIX "Netuid within superadmin range! -Has more "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#266: FILE: security/multiadm.c:164:
+        printk(KERN_WARNING PREFIX "Netuid within superadmin range! -Has more "

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: security/multiadm.c:165:
+               "powers than intended!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: security/multiadm.c:165:
+               "powers than intended!\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: security/multiadm.c:165:
+        printk(KERN_WARNING PREFIX "Netuid within superadmin range! -Has more "
+               "powers than intended!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: security/multiadm.c:166:
+    if(range_intersect(Superuid_start, Superuid_end, Wrtuid_start, Wrtuid_end))$

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: security/multiadm.c:166:
+    if(range_intersect(Superuid_start, Superuid_end, Wrtuid_start, Wrtuid_end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: security/multiadm.c:167:
+        printk(KERN_WARNING PREFIX "Superadmin and write-enabled user range "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: security/multiadm.c:167:
+        printk(KERN_WARNING PREFIX "Superadmin and write-enabled user range "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#269: FILE: security/multiadm.c:167:
+        printk(KERN_WARNING PREFIX "Superadmin and write-enabled user range "

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: security/multiadm.c:168:
+               "intersect! A subadmin could setuid() into a superadmin!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: security/multiadm.c:168:
+               "intersect! A subadmin could setuid() into a superadmin!\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#270: FILE: security/multiadm.c:168:
+        printk(KERN_WARNING PREFIX "Superadmin and write-enabled user range "
+               "intersect! A subadmin could setuid() into a superadmin!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: security/multiadm.c:169:
+    if(range_intersect(Subuid_start, Subuid_end, Netuid, Netuid))$

ERROR:SPACING: space required before the open parenthesis '('
#271: FILE: security/multiadm.c:169:
+    if(range_intersect(Subuid_start, Subuid_end, Netuid, Netuid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: security/multiadm.c:170:
+        printk(KERN_WARNING PREFIX "Netuid within subadmin range! -Has more "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: security/multiadm.c:170:
+        printk(KERN_WARNING PREFIX "Netuid within subadmin range! -Has more "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#272: FILE: security/multiadm.c:170:
+        printk(KERN_WARNING PREFIX "Netuid within subadmin range! -Has more "

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: security/multiadm.c:171:
+               "powers than intended!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: security/multiadm.c:171:
+               "powers than intended!\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#273: FILE: security/multiadm.c:171:
+        printk(KERN_WARNING PREFIX "Netuid within subadmin range! -Has more "
+               "powers than intended!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: security/multiadm.c:172:
+    if(range_intersect_wrt(Subuid_start, Subuid_end, Wrtuid_start, Wrtuid_end))$

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: security/multiadm.c:172:
+    if(range_intersect_wrt(Subuid_start, Subuid_end, Wrtuid_start, Wrtuid_end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: security/multiadm.c:173:
+        printk(KERN_WARNING PREFIX "Subadmin and write-enabled user range "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: security/multiadm.c:173:
+        printk(KERN_WARNING PREFIX "Subadmin and write-enabled user range "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#275: FILE: security/multiadm.c:173:
+        printk(KERN_WARNING PREFIX "Subadmin and write-enabled user range "

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: security/multiadm.c:174:
+               "intersect! Subadmins are able to poke on other subadmins!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: security/multiadm.c:174:
+               "intersect! Subadmins are able to poke on other subadmins!\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#276: FILE: security/multiadm.c:174:
+        printk(KERN_WARNING PREFIX "Subadmin and write-enabled user range "
+               "intersect! Subadmins are able to poke on other subadmins!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: security/multiadm.c:175:
+    if(range_intersect_wrt(Netuid, Netuid, Wrtuid_start, Wrtuid_end))$

ERROR:SPACING: space required before the open parenthesis '('
#277: FILE: security/multiadm.c:175:
+    if(range_intersect_wrt(Netuid, Netuid, Wrtuid_start, Wrtuid_end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: security/multiadm.c:176:
+        printk(KERN_WARNING PREFIX "Netuid within write-enabled user range! "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: security/multiadm.c:176:
+        printk(KERN_WARNING PREFIX "Netuid within write-enabled user range! "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#278: FILE: security/multiadm.c:176:
+        printk(KERN_WARNING PREFIX "Netuid within write-enabled user range! "

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: security/multiadm.c:177:
+               "Subadmin may gain CAP_NET_ADMIN!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: security/multiadm.c:177:
+               "Subadmin may gain CAP_NET_ADMIN!\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#279: FILE: security/multiadm.c:177:
+        printk(KERN_WARNING PREFIX "Netuid within write-enabled user range! "
+               "Subadmin may gain CAP_NET_ADMIN!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: security/multiadm.c:178:
+    printk(KERN_INFO "MultiAdmin loaded\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#280: FILE: security/multiadm.c:178:
+    printk(KERN_INFO "MultiAdmin loaded\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: security/multiadm.c:179:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#284: FILE: security/multiadm.c:182:
+__exit static void multiadm_exit(void) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: security/multiadm.c:183:
+    int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: security/multiadm.c:185:
+    if(Secondary)$

ERROR:SPACING: space required before the open parenthesis '('
#287: FILE: security/multiadm.c:185:
+    if(Secondary)

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: security/multiadm.c:186:
+        ret = mod_unreg_security(BASENAME, &mt_secops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: security/multiadm.c:186:
+        ret = mod_unreg_security(BASENAME, &mt_secops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: security/multiadm.c:187:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: security/multiadm.c:188:
+        ret = unregister_security(&mt_secops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: security/multiadm.c:188:
+        ret = unregister_security(&mt_secops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: security/multiadm.c:190:
+    if(ret != 0)$

ERROR:SPACING: space required before the open parenthesis '('
#292: FILE: security/multiadm.c:190:
+    if(ret != 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: security/multiadm.c:191:
+        printk(KERN_WARNING PREFIX$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: security/multiadm.c:191:
+        printk(KERN_WARNING PREFIX$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#293: FILE: security/multiadm.c:191:
+        printk(KERN_WARNING PREFIX

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: security/multiadm.c:192:
+               "Could not unregister with kernel: %d\n", ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: security/multiadm.c:192:
+               "Could not unregister with kernel: %d\n", ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: security/multiadm.c:194:
+    return;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#303: FILE: security/multiadm.c:201:
+static int mt_bprm_set_security(struct linux_binprm *bp) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#305: FILE: security/multiadm.c:203:
+    /* In the function chain of exec(), we eventually get here, which is the
+    place to set up new privileges. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#305: FILE: security/multiadm.c:203:
+    place to set up new privileges. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: security/multiadm.c:204:
+    cap_bprm_set_security(bp);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#309: FILE: security/multiadm.c:207:
+    /* All of the following is nicely inlined. The capability raising is
+    resolved to only one instruction for each set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#309: FILE: security/multiadm.c:207:
+    resolved to only one instruction for each set. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: security/multiadm.c:208:
+    if(is_any_superadm(bp->e_uid, bp->e_gid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: security/multiadm.c:208:
+    if(is_any_superadm(bp->e_uid, bp->e_gid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: security/multiadm.c:209:
+        chg2_superadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: security/multiadm.c:209:
+        chg2_superadm(&bp->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: security/multiadm.c:210:
+        chg2_superadm(&bp->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: security/multiadm.c:210:
+        chg2_superadm(&bp->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: security/multiadm.c:211:
+    } else if(is_any_superadm(current->uid, current->gid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: security/multiadm.c:211:
+    } else if(is_any_superadm(current->uid, current->gid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: security/multiadm.c:212:
+        chg2_superadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: security/multiadm.c:212:
+        chg2_superadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: security/multiadm.c:213:
+    } else if(is_any_subadm(bp->e_uid, bp->e_gid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: security/multiadm.c:213:
+    } else if(is_any_subadm(bp->e_uid, bp->e_gid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: security/multiadm.c:214:
+        chg2_subadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: security/multiadm.c:214:
+        chg2_subadm(&bp->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: security/multiadm.c:215:
+        chg2_subadm(&bp->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: security/multiadm.c:215:
+        chg2_subadm(&bp->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: security/multiadm.c:216:
+    } else if(is_any_subadm(current->uid, current->gid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#318: FILE: security/multiadm.c:216:
+    } else if(is_any_subadm(current->uid, current->gid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: security/multiadm.c:217:
+        chg2_subadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: security/multiadm.c:217:
+        chg2_subadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: security/multiadm.c:218:
+    } else if(is_uid_netadm(bp->e_uid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#320: FILE: security/multiadm.c:218:
+    } else if(is_uid_netadm(bp->e_uid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: security/multiadm.c:219:
+        chg2_netadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: security/multiadm.c:219:
+        chg2_netadm(&bp->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: security/multiadm.c:220:
+        chg2_netadm(&bp->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: security/multiadm.c:220:
+        chg2_netadm(&bp->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: security/multiadm.c:221:
+    } else if(is_uid_netadm(current->uid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: security/multiadm.c:221:
+    } else if(is_uid_netadm(current->uid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: security/multiadm.c:222:
+        chg2_netadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: security/multiadm.c:222:
+        chg2_netadm(&bp->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: security/multiadm.c:223:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: security/multiadm.c:224:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#329: FILE: security/multiadm.c:227:
+static int mt_cap_extra(int capability) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: security/multiadm.c:228:
+    if(capability == CAP_SYS_ADMIN)$

ERROR:SPACING: space required before the open parenthesis '('
#330: FILE: security/multiadm.c:228:
+    if(capability == CAP_SYS_ADMIN)

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: security/multiadm.c:229:
+        /* Subadmin also has CAP_SYS_ADMIN, but if we get here, we did so$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: security/multiadm.c:230:
+        by capable() -- not capable_light(). */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#332: FILE: security/multiadm.c:230:
+        /* Subadmin also has CAP_SYS_ADMIN, but if we get here, we did so
+        by capable() -- not capable_light(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#332: FILE: security/multiadm.c:230:
+        by capable() -- not capable_light(). */

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: security/multiadm.c:231:
+        return is_any_superadm(current->euid, current->egid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: security/multiadm.c:231:
+        return is_any_superadm(current->euid, current->egid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: security/multiadm.c:232:
+    else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: security/multiadm.c:233:
+        /* Subadmin/Netadmin also has other capabilities, but they$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: security/multiadm.c:234:
+        are -- I hope -- ok. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#336: FILE: security/multiadm.c:234:
+        /* Subadmin/Netadmin also has other capabilities, but they
+        are -- I hope -- ok. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#336: FILE: security/multiadm.c:234:
+        are -- I hope -- ok. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: security/multiadm.c:235:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: security/multiadm.c:235:
+        return 1;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#341: FILE: security/multiadm.c:239:
+ struct nameidata *nd)
                    ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: security/multiadm.c:239:
+static int mt_inode_permission(struct inode *inode, int mask,
+ struct nameidata *nd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: security/multiadm.c:239:
+ struct nameidata *nd)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#344: FILE: security/multiadm.c:242:
+    /* Check for superadmin is not done, since the only users that can get
+    here is either superadmin or subadmin. By omitting the check for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#346: FILE: security/multiadm.c:244:
+    This method is done almost throughout the entire module. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: security/multiadm.c:246:
+    if(is_any_subadm(current->euid, current->egid) && (mask & MAY_WRITE)) {$

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: security/multiadm.c:246:
+    if(is_any_subadm(current->euid, current->egid) && (mask & MAY_WRITE)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: security/multiadm.c:247:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: security/multiadm.c:247:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: security/multiadm.c:248:
+        if(inode->i_uid == current->fsuid || is_uid_user(inode->i_uid))$

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: security/multiadm.c:248:
+        int ret;
+        if(inode->i_uid == current->fsuid || is_uid_user(inode->i_uid))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: security/multiadm.c:248:
+        if(inode->i_uid == current->fsuid || is_uid_user(inode->i_uid))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#350: FILE: security/multiadm.c:248:
+        if(inode->i_uid == current->fsuid || is_uid_user(inode->i_uid))
+            return 0;

ERROR:SPACING: space required before the open parenthesis '('
#350: FILE: security/multiadm.c:248:
+        if(inode->i_uid == current->fsuid || is_uid_user(inode->i_uid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: security/multiadm.c:249:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: security/multiadm.c:249:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: security/multiadm.c:251:
+        /* Since we practically jumped over the checks to get here (because of$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: security/multiadm.c:252:
+        CAP_DAC_OVERRIDE), we need to do it again. Without CAP_DAC_OVERRIDE$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#354: FILE: security/multiadm.c:252:
+        /* Since we practically jumped over the checks to get here (because of
+        CAP_DAC_OVERRIDE), we need to do it again. Without CAP_DAC_OVERRIDE

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: security/multiadm.c:253:
+        this time. Temporarily drop it. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#355: FILE: security/multiadm.c:253:
+        this time. Temporarily drop it. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: security/multiadm.c:254:
+        cap_lower(current->cap_effective, CAP_DAC_OVERRIDE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: security/multiadm.c:254:
+        cap_lower(current->cap_effective, CAP_DAC_OVERRIDE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: security/multiadm.c:256:
+        // Copied from fs/namei.c$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: security/multiadm.c:257:
+        if(inode->i_op != NULL && inode->i_op->permission != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: security/multiadm.c:257:
+        if(inode->i_op != NULL && inode->i_op->permission != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#359: FILE: security/multiadm.c:257:
+        if(inode->i_op != NULL && inode->i_op->permission != NULL)
+            ret = inode->i_op->permission(inode, mask & ~MAY_APPEND, nd);

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: security/multiadm.c:257:
+        if(inode->i_op != NULL && inode->i_op->permission != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_op"
#359: FILE: security/multiadm.c:257:
+        if(inode->i_op != NULL && inode->i_op->permission != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_op->permission"
#359: FILE: security/multiadm.c:257:
+        if(inode->i_op != NULL && inode->i_op->permission != NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#360: FILE: security/multiadm.c:258:
+            ret = inode->i_op->permission(inode, mask & ~MAY_APPEND, nd);
                                                                      ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: security/multiadm.c:258:
+            ret = inode->i_op->permission(inode, mask & ~MAY_APPEND, nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: security/multiadm.c:258:
+            ret = inode->i_op->permission(inode, mask & ~MAY_APPEND, nd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: security/multiadm.c:259:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: security/multiadm.c:259:
+        else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#361: FILE: security/multiadm.c:259:
+        else
+            ret = generic_permission(inode, mask & ~MAY_APPEND, NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: security/multiadm.c:260:
+            ret = generic_permission(inode, mask & ~MAY_APPEND, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: security/multiadm.c:260:
+            ret = generic_permission(inode, mask & ~MAY_APPEND, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: security/multiadm.c:262:
+        cap_raise(current->cap_effective, CAP_DAC_OVERRIDE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: security/multiadm.c:262:
+        cap_raise(current->cap_effective, CAP_DAC_OVERRIDE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: security/multiadm.c:263:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: security/multiadm.c:263:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: security/multiadm.c:264:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: security/multiadm.c:265:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#370: FILE: security/multiadm.c:268:
+static int mt_inode_setattr(struct dentry *dentry, struct iattr *attr) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: security/multiadm.c:269:
+    if(is_any_subadm(current->euid, current->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#371: FILE: security/multiadm.c:269:
+    if(is_any_subadm(current->euid, current->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: security/multiadm.c:270:
+        /* Change is only allowed if either the inode belongs to us, or does$

WARNING:TYPO_SPELLING: 'belond' may be misspelled - perhaps 'belong'?
#373: FILE: security/multiadm.c:271:
+        belond, _and_ will belong in case of ATTR_UID, to a WRT user. */
         ^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: security/multiadm.c:271:
+        belond, _and_ will belong in case of ATTR_UID, to a WRT user. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#373: FILE: security/multiadm.c:271:
+        /* Change is only allowed if either the inode belongs to us, or does
+        belond, _and_ will belong in case of ATTR_UID, to a WRT user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#373: FILE: security/multiadm.c:271:
+        belond, _and_ will belong in case of ATTR_UID, to a WRT user. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: security/multiadm.c:272:
+        const struct inode *inode = dentry->d_inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: security/multiadm.c:272:
+        const struct inode *inode = dentry->d_inode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: security/multiadm.c:273:
+        if(inode->i_uid != current->fsuid && !is_uid_user(inode->i_uid))$

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: security/multiadm.c:273:
+        const struct inode *inode = dentry->d_inode;
+        if(inode->i_uid != current->fsuid && !is_uid_user(inode->i_uid))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: security/multiadm.c:273:
+        if(inode->i_uid != current->fsuid && !is_uid_user(inode->i_uid))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#375: FILE: security/multiadm.c:273:
+        if(inode->i_uid != current->fsuid && !is_uid_user(inode->i_uid))
+            return -EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: security/multiadm.c:273:
+        if(inode->i_uid != current->fsuid && !is_uid_user(inode->i_uid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: security/multiadm.c:274:
+            return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: security/multiadm.c:274:
+            return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: security/multiadm.c:276:
+        if((attr->ia_valid & ATTR_UID) && attr->ia_uid != current->fsuid &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: security/multiadm.c:276:
+        if((attr->ia_valid & ATTR_UID) && attr->ia_uid != current->fsuid &&$

ERROR:SPACING: space required before the open parenthesis '('
#378: FILE: security/multiadm.c:276:
+        if((attr->ia_valid & ATTR_UID) && attr->ia_uid != current->fsuid &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: security/multiadm.c:277:
+         !is_uid_user(attr->ia_uid))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: security/multiadm.c:277:
+        if((attr->ia_valid & ATTR_UID) && attr->ia_uid != current->fsuid &&
+         !is_uid_user(attr->ia_uid))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: security/multiadm.c:277:
+         !is_uid_user(attr->ia_uid))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: security/multiadm.c:278:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: security/multiadm.c:278:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: security/multiadm.c:279:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: security/multiadm.c:280:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#385: FILE: security/multiadm.c:283:
+static int mt_ipc_permission(struct kern_ipc_perm *perm, short flag) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: security/multiadm.c:284:
+    if(is_any_subadm(current->euid, current->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#386: FILE: security/multiadm.c:284:
+    if(is_any_subadm(current->euid, current->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: security/multiadm.c:285:
+        int req, grant;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: security/multiadm.c:285:
+        int req, grant;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: security/multiadm.c:287:
+        if(perm->uid == current->euid || perm->cuid == current->euid ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: security/multiadm.c:287:
+        if(perm->uid == current->euid || perm->cuid == current->euid ||$

ERROR:SPACING: space required before the open parenthesis '('
#389: FILE: security/multiadm.c:287:
+        if(perm->uid == current->euid || perm->cuid == current->euid ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: security/multiadm.c:288:
+         is_uid_user(perm->uid) || is_uid_user(perm->cuid))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: security/multiadm.c:288:
+        if(perm->uid == current->euid || perm->cuid == current->euid ||
+         is_uid_user(perm->uid) || is_uid_user(perm->cuid))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: security/multiadm.c:288:
+         is_uid_user(perm->uid) || is_uid_user(perm->cuid))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: security/multiadm.c:289:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: security/multiadm.c:289:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: security/multiadm.c:291:
+        /* Copied and modified from ipc/util.c. Subadmin always has read$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: security/multiadm.c:292:
+        permission so add S_IRUGO to granted. Checking the owner permission$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#394: FILE: security/multiadm.c:292:
+        /* Copied and modified from ipc/util.c. Subadmin always has read
+        permission so add S_IRUGO to granted. Checking the owner permission

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: security/multiadm.c:293:
+        part is not done anymore, because it is done above. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#395: FILE: security/multiadm.c:293:
+        part is not done anymore, because it is done above. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: security/multiadm.c:294:
+        req   = (flag >> 6) | (flag >> 3) | flag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: security/multiadm.c:294:
+        req   = (flag >> 6) | (flag >> 3) | flag;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: security/multiadm.c:295:
+        grant = (perm->mode | S_IRUGO) >> 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: security/multiadm.c:295:
+        grant = (perm->mode | S_IRUGO) >> 3;$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#397: FILE: security/multiadm.c:295:
+        grant = (perm->mode | S_IRUGO) >> 3;

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: security/multiadm.c:296:
+        if(in_group_p(perm->gid) || in_group_p(perm->cgid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: security/multiadm.c:296:
+        if(in_group_p(perm->gid) || in_group_p(perm->cgid))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#398: FILE: security/multiadm.c:296:
+        if(in_group_p(perm->gid) || in_group_p(perm->cgid))
+            grant >>= 3;

ERROR:SPACING: space required before the open parenthesis '('
#398: FILE: security/multiadm.c:296:
+        if(in_group_p(perm->gid) || in_group_p(perm->cgid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: security/multiadm.c:297:
+            grant >>= 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: security/multiadm.c:297:
+            grant >>= 3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: security/multiadm.c:298:
+        if(req & ~grant & 0007)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: security/multiadm.c:298:
+        if(req & ~grant & 0007)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#400: FILE: security/multiadm.c:298:
+        if(req & ~grant & 0007)
+            return -EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#400: FILE: security/multiadm.c:298:
+        if(req & ~grant & 0007)

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: security/multiadm.c:299:
+            return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: security/multiadm.c:299:
+            return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: security/multiadm.c:300:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: security/multiadm.c:301:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#406: FILE: security/multiadm.c:304:
+static int mt_msq_msgctl(struct msg_queue *msq, int cmd) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: security/multiadm.c:305:
+    if(is_any_subadm(current->euid, current->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: security/multiadm.c:305:
+    if(is_any_subadm(current->euid, current->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: security/multiadm.c:306:
+        if(cmd == MSG_INFO || cmd == MSG_STAT || cmd == IPC_INFO ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: security/multiadm.c:306:
+        if(cmd == MSG_INFO || cmd == MSG_STAT || cmd == IPC_INFO ||$

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: security/multiadm.c:306:
+        if(cmd == MSG_INFO || cmd == MSG_STAT || cmd == IPC_INFO ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: security/multiadm.c:307:
+         cmd == IPC_STAT)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: security/multiadm.c:307:
+        if(cmd == MSG_INFO || cmd == MSG_STAT || cmd == IPC_INFO ||
+         cmd == IPC_STAT)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: security/multiadm.c:307:
+         cmd == IPC_STAT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: security/multiadm.c:308:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: security/multiadm.c:308:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: security/multiadm.c:310:
+        // UID or CUID (creator UID) must fit$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: security/multiadm.c:311:
+        if(msq != NULL && msq->q_perm.uid != current->euid &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: security/multiadm.c:311:
+        if(msq != NULL && msq->q_perm.uid != current->euid &&$

ERROR:SPACING: space required before the open parenthesis '('
#413: FILE: security/multiadm.c:311:
+        if(msq != NULL && msq->q_perm.uid != current->euid &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msq"
#413: FILE: security/multiadm.c:311:
+        if(msq != NULL && msq->q_perm.uid != current->euid &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: security/multiadm.c:312:
+         msq->q_perm.cuid != current->euid && !is_uid_user(msq->q_perm.uid) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: security/multiadm.c:312:
+        if(msq != NULL && msq->q_perm.uid != current->euid &&
+         msq->q_perm.cuid != current->euid && !is_uid_user(msq->q_perm.uid) &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: security/multiadm.c:312:
+         msq->q_perm.cuid != current->euid && !is_uid_user(msq->q_perm.uid) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: security/multiadm.c:313:
+         !is_uid_user(msq->q_perm.cuid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: security/multiadm.c:313:
+         !is_uid_user(msq->q_perm.cuid))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: security/multiadm.c:314:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: security/multiadm.c:314:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: security/multiadm.c:315:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: security/multiadm.c:316:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#421: FILE: security/multiadm.c:319:
+static int mt_ptrace(task_t *tracer, task_t *task) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: security/multiadm.c:320:
+    if(is_any_subadm(tracer->euid, tracer->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#422: FILE: security/multiadm.c:320:
+    if(is_any_subadm(tracer->euid, tracer->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: security/multiadm.c:321:
+        /* Ownership check according to kernel/ptrace.c:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: security/multiadm.c:322:
+        all of [RES][UG]ID must match the tracer's R[UG]ID. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#424: FILE: security/multiadm.c:322:
+        /* Ownership check according to kernel/ptrace.c:
+        all of [RES][UG]ID must match the tracer's R[UG]ID. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#424: FILE: security/multiadm.c:322:
+        all of [RES][UG]ID must match the tracer's R[UG]ID. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: security/multiadm.c:323:
+        if(task->euid == tracer->uid && task->uid == tracer->uid &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: security/multiadm.c:323:
+        if(task->euid == tracer->uid && task->uid == tracer->uid &&$

ERROR:SPACING: space required before the open parenthesis '('
#425: FILE: security/multiadm.c:323:
+        if(task->euid == tracer->uid && task->uid == tracer->uid &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: security/multiadm.c:324:
+         task->suid == tracer->uid && task->egid == tracer->gid &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: security/multiadm.c:324:
+        if(task->euid == tracer->uid && task->uid == tracer->uid &&
+         task->suid == tracer->uid && task->egid == tracer->gid &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: security/multiadm.c:324:
+         task->suid == tracer->uid && task->egid == tracer->gid &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: security/multiadm.c:325:
+         task->gid == tracer->gid && task->sgid == tracer->gid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: security/multiadm.c:325:
+         task->gid == tracer->gid && task->sgid == tracer->gid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: security/multiadm.c:326:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: security/multiadm.c:326:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: security/multiadm.c:328:
+        // ...or all [RES]UIDs must match a WRT user$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: security/multiadm.c:329:
+        if(!is_task_user(task))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: security/multiadm.c:329:
+        if(!is_task_user(task))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#431: FILE: security/multiadm.c:329:
+        if(!is_task_user(task))
+            return -EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#431: FILE: security/multiadm.c:329:
+        if(!is_task_user(task))

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: security/multiadm.c:330:
+            return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: security/multiadm.c:330:
+            return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: security/multiadm.c:331:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: security/multiadm.c:332:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#437: FILE: security/multiadm.c:335:
+static int mt_quotactl(int cmd, int type, int id, struct super_block *sb) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: security/multiadm.c:336:
+    if(is_any_subadm(current->euid, current->egid))$

ERROR:SPACING: space required before the open parenthesis '('
#438: FILE: security/multiadm.c:336:
+    if(is_any_subadm(current->euid, current->egid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: security/multiadm.c:337:
+        switch(cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: security/multiadm.c:337:
+        switch(cmd) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#439: FILE: security/multiadm.c:337:
+        switch(cmd) {
+            case Q_SYNC:
+            case Q_GETFMT:
+            case Q_GETINFO:
+            case Q_GETQUOTA:
+            case Q_XGETQUOTA:
+            case Q_XGETQSTAT:
+            case Q_XQUOTASYNC:
[...]
+            default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#439: FILE: security/multiadm.c:337:
+        switch(cmd) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: security/multiadm.c:338:
+            case Q_SYNC:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: security/multiadm.c:338:
+            case Q_SYNC:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: security/multiadm.c:339:
+            case Q_GETFMT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: security/multiadm.c:339:
+            case Q_GETFMT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: security/multiadm.c:340:
+            case Q_GETINFO:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: security/multiadm.c:340:
+            case Q_GETINFO:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: security/multiadm.c:341:
+            case Q_GETQUOTA:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: security/multiadm.c:341:
+            case Q_GETQUOTA:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: security/multiadm.c:342:
+            case Q_XGETQUOTA:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: security/multiadm.c:342:
+            case Q_XGETQUOTA:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: security/multiadm.c:343:
+            case Q_XGETQSTAT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: security/multiadm.c:343:
+            case Q_XGETQSTAT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: security/multiadm.c:344:
+            case Q_XQUOTASYNC:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: security/multiadm.c:344:
+            case Q_XQUOTASYNC:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: security/multiadm.c:345:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: security/multiadm.c:345:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: security/multiadm.c:346:
+            default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: security/multiadm.c:347:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: security/multiadm.c:347:
+                return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: security/multiadm.c:348:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: security/multiadm.c:348:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: security/multiadm.c:349:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#454: FILE: security/multiadm.c:352:
+static int mt_sem_semctl(struct sem_array *sem, int cmd) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: security/multiadm.c:353:
+    if(is_any_subadm(current->euid, current->euid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#455: FILE: security/multiadm.c:353:
+    if(is_any_subadm(current->euid, current->euid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: security/multiadm.c:354:
+        if(cmd == SEM_INFO || cmd == IPC_INFO || cmd == SEM_STAT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: security/multiadm.c:354:
+        if(cmd == SEM_INFO || cmd == IPC_INFO || cmd == SEM_STAT)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#456: FILE: security/multiadm.c:354:
+        if(cmd == SEM_INFO || cmd == IPC_INFO || cmd == SEM_STAT)
+            return 0;

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: security/multiadm.c:354:
+        if(cmd == SEM_INFO || cmd == IPC_INFO || cmd == SEM_STAT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: security/multiadm.c:355:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: security/multiadm.c:355:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: security/multiadm.c:356:
+        if(sem != NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: security/multiadm.c:356:
+        if(sem != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#458: FILE: security/multiadm.c:356:
+        if(sem != NULL) {
+            const struct kern_ipc_perm *perm = &sem->sem_perm;

ERROR:SPACING: space required before the open parenthesis '('
#458: FILE: security/multiadm.c:356:
+        if(sem != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sem"
#458: FILE: security/multiadm.c:356:
+        if(sem != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: security/multiadm.c:357:
+            const struct kern_ipc_perm *perm = &sem->sem_perm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: security/multiadm.c:357:
+            const struct kern_ipc_perm *perm = &sem->sem_perm;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: security/multiadm.c:358:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&$

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: security/multiadm.c:358:
+            const struct kern_ipc_perm *perm = &sem->sem_perm;
+            if(perm->uid != current->euid && perm->cuid != current->euid &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: security/multiadm.c:358:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#460: FILE: security/multiadm.c:358:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&
[...]
+                    return -EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#460: FILE: security/multiadm.c:358:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: security/multiadm.c:359:
+             !is_uid_user(perm->uid) && !is_uid_user(perm->cuid))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: security/multiadm.c:359:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&
+             !is_uid_user(perm->uid) && !is_uid_user(perm->cuid))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: security/multiadm.c:359:
+             !is_uid_user(perm->uid) && !is_uid_user(perm->cuid))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: security/multiadm.c:360:
+                    return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: security/multiadm.c:360:
+                    return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: security/multiadm.c:361:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: security/multiadm.c:361:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: security/multiadm.c:362:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: security/multiadm.c:363:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#468: FILE: security/multiadm.c:366:
+static int mt_shm_shmctl(struct shmid_kernel *shp, int cmd) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: security/multiadm.c:367:
+    if(is_any_subadm(current->euid, current->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: security/multiadm.c:367:
+    if(is_any_subadm(current->euid, current->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: security/multiadm.c:368:
+        if(cmd == SHM_INFO || cmd == SHM_STAT ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: security/multiadm.c:368:
+        if(cmd == SHM_INFO || cmd == SHM_STAT ||$

ERROR:SPACING: space required before the open parenthesis '('
#470: FILE: security/multiadm.c:368:
+        if(cmd == SHM_INFO || cmd == SHM_STAT ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: security/multiadm.c:369:
+         cmd == IPC_INFO || cmd == IPC_STAT)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: security/multiadm.c:369:
+        if(cmd == SHM_INFO || cmd == SHM_STAT ||
+         cmd == IPC_INFO || cmd == IPC_STAT)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: security/multiadm.c:369:
+         cmd == IPC_INFO || cmd == IPC_STAT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: security/multiadm.c:370:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: security/multiadm.c:370:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: security/multiadm.c:371:
+        if(shp != NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: security/multiadm.c:371:
+        if(shp != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#473: FILE: security/multiadm.c:371:
+        if(shp != NULL) {
+            const struct kern_ipc_perm *perm = &shp->shm_perm;

ERROR:SPACING: space required before the open parenthesis '('
#473: FILE: security/multiadm.c:371:
+        if(shp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shp"
#473: FILE: security/multiadm.c:371:
+        if(shp != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: security/multiadm.c:372:
+            const struct kern_ipc_perm *perm = &shp->shm_perm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: security/multiadm.c:372:
+            const struct kern_ipc_perm *perm = &shp->shm_perm;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: security/multiadm.c:373:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&$

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: security/multiadm.c:373:
+            const struct kern_ipc_perm *perm = &shp->shm_perm;
+            if(perm->uid != current->euid && perm->cuid != current->euid &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: security/multiadm.c:373:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#475: FILE: security/multiadm.c:373:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&
[...]
+                    return -EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#475: FILE: security/multiadm.c:373:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: security/multiadm.c:374:
+             !is_uid_user(perm->uid) && !is_uid_user(perm->cuid))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: security/multiadm.c:374:
+            if(perm->uid != current->euid && perm->cuid != current->euid &&
+             !is_uid_user(perm->uid) && !is_uid_user(perm->cuid))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: security/multiadm.c:374:
+             !is_uid_user(perm->uid) && !is_uid_user(perm->cuid))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: security/multiadm.c:375:
+                    return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: security/multiadm.c:375:
+                    return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: security/multiadm.c:376:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: security/multiadm.c:376:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: security/multiadm.c:377:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: security/multiadm.c:378:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#483: FILE: security/multiadm.c:381:
+static int mt_task_kill(task_t *task, struct siginfo *si, int sig) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: security/multiadm.c:382:
+    if(is_any_subadm(current->euid, current->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#484: FILE: security/multiadm.c:382:
+    if(is_any_subadm(current->euid, current->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: security/multiadm.c:383:
+        // As tricky as the ptrace() permission net.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: security/multiadm.c:384:
+        if(is_uid_user(task->uid) || is_uid_user(task->suid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: security/multiadm.c:384:
+        if(is_uid_user(task->uid) || is_uid_user(task->suid))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#486: FILE: security/multiadm.c:384:
+        if(is_uid_user(task->uid) || is_uid_user(task->suid))
+            return 0;

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: security/multiadm.c:384:
+        if(is_uid_user(task->uid) || is_uid_user(task->suid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: security/multiadm.c:385:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: security/multiadm.c:385:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: security/multiadm.c:387:
+        // Subadmin's own process$

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: security/multiadm.c:388:
+        if(task->uid == current->euid || task->suid == current->euid ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: security/multiadm.c:388:
+        if(task->uid == current->euid || task->suid == current->euid ||$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#490: FILE: security/multiadm.c:388:
+        if(task->uid == current->euid || task->suid == current->euid ||
[...]
+            return 0;

ERROR:SPACING: space required before the open parenthesis '('
#490: FILE: security/multiadm.c:388:
+        if(task->uid == current->euid || task->suid == current->euid ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: security/multiadm.c:389:
+         task->uid == current->uid || task->suid == current->uid)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: security/multiadm.c:389:
+        if(task->uid == current->euid || task->suid == current->euid ||
+         task->uid == current->uid || task->suid == current->uid)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: security/multiadm.c:389:
+         task->uid == current->uid || task->suid == current->uid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: security/multiadm.c:390:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: security/multiadm.c:390:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: security/multiadm.c:392:
+        // SIG_IGN or a kernel-generated signal$

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: security/multiadm.c:393:
+        if(si != NULL && ((long)si == 1 || (long)si == 2 || !SI_FROMUSER(si)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: security/multiadm.c:393:
+        if(si != NULL && ((long)si == 1 || (long)si == 2 || !SI_FROMUSER(si)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#495: FILE: security/multiadm.c:393:
+        if(si != NULL && ((long)si == 1 || (long)si == 2 || !SI_FROMUSER(si)))
+            return 0;

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: security/multiadm.c:393:
+        if(si != NULL && ((long)si == 1 || (long)si == 2 || !SI_FROMUSER(si)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "si"
#495: FILE: security/multiadm.c:393:
+        if(si != NULL && ((long)si == 1 || (long)si == 2 || !SI_FROMUSER(si)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: security/multiadm.c:394:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: security/multiadm.c:394:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: security/multiadm.c:396:
+        // For the case of a privileged subshell, but with the same tty$

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: security/multiadm.c:397:
+        if(sig == SIGCONT && task->signal->session == current->signal->session)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: security/multiadm.c:397:
+        if(sig == SIGCONT && task->signal->session == current->signal->session)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#499: FILE: security/multiadm.c:397:
+        if(sig == SIGCONT && task->signal->session == current->signal->session)
+            return 0;

ERROR:SPACING: space required before the open parenthesis '('
#499: FILE: security/multiadm.c:397:
+        if(sig == SIGCONT && task->signal->session == current->signal->session)

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: security/multiadm.c:398:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: security/multiadm.c:398:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: security/multiadm.c:400:
+        return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: security/multiadm.c:400:
+        return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: security/multiadm.c:401:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: security/multiadm.c:402:
+    return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: security/multiadm.c:406:
+static int mt_task_post_setuid(uid_t old_ruid, uid_t old_euid,
+ uid_t old_suid, int flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: security/multiadm.c:406:
+ uid_t old_suid, int flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: security/multiadm.c:408:
+    int ret = cap_task_post_setuid(old_ruid, old_euid, old_suid, flags);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#511: FILE: security/multiadm.c:409:
+    int ret = cap_task_post_setuid(old_ruid, old_euid, old_suid, flags);
+    if(ret != 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: security/multiadm.c:409:
+    if(ret != 0)$

ERROR:SPACING: space required before the open parenthesis '('
#511: FILE: security/multiadm.c:409:
+    if(ret != 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: security/multiadm.c:410:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: security/multiadm.c:410:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: security/multiadm.c:412:
+    switch(flags) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#514: FILE: security/multiadm.c:412:
+    switch(flags) {
+        case LSM_SETID_ID:
+        case LSM_SETID_RE:
+        case LSM_SETID_RES:

ERROR:SPACING: space required before the open parenthesis '('
#514: FILE: security/multiadm.c:412:
+    switch(flags) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: security/multiadm.c:413:
+        case LSM_SETID_ID:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: security/multiadm.c:413:
+        case LSM_SETID_ID:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: security/multiadm.c:414:
+        case LSM_SETID_RE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: security/multiadm.c:414:
+        case LSM_SETID_RE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: security/multiadm.c:415:
+        case LSM_SETID_RES:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: security/multiadm.c:415:
+        case LSM_SETID_RES:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: security/multiadm.c:416:
+            // Unlike bprm_set_security(), effective must be set independently.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: security/multiadm.c:417:
+            if(is_uid_superadm(current->uid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: security/multiadm.c:417:
+            if(is_uid_superadm(current->uid))$

ERROR:SPACING: space required before the open parenthesis '('
#519: FILE: security/multiadm.c:417:
+            if(is_uid_superadm(current->uid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: security/multiadm.c:418:
+                chg2_superadm(&current->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: security/multiadm.c:418:
+                chg2_superadm(&current->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: security/multiadm.c:419:
+            else if(is_uid_subadm(current->uid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: security/multiadm.c:419:
+            else if(is_uid_subadm(current->uid))$

ERROR:SPACING: space required before the open parenthesis '('
#521: FILE: security/multiadm.c:419:
+            else if(is_uid_subadm(current->uid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: security/multiadm.c:420:
+                chg2_subadm(&current->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: security/multiadm.c:420:
+                chg2_subadm(&current->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: security/multiadm.c:421:
+            else if(is_uid_netadm(current->uid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: security/multiadm.c:421:
+            else if(is_uid_netadm(current->uid))$

ERROR:SPACING: space required before the open parenthesis '('
#523: FILE: security/multiadm.c:421:
+            else if(is_uid_netadm(current->uid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: security/multiadm.c:422:
+                chg2_netadm(&current->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: security/multiadm.c:422:
+                chg2_netadm(&current->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: security/multiadm.c:424:
+            if(is_uid_superadm(current->euid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: security/multiadm.c:424:
+            if(is_uid_superadm(current->euid))$

ERROR:SPACING: space required before the open parenthesis '('
#526: FILE: security/multiadm.c:424:
+            if(is_uid_superadm(current->euid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: security/multiadm.c:425:
+                chg2_superadm(&current->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: security/multiadm.c:425:
+                chg2_superadm(&current->cap_effective);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: security/multiadm.c:426:
+            else if(is_uid_subadm(current->euid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: security/multiadm.c:426:
+            else if(is_uid_subadm(current->euid))$

ERROR:SPACING: space required before the open parenthesis '('
#528: FILE: security/multiadm.c:426:
+            else if(is_uid_subadm(current->euid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: security/multiadm.c:427:
+                chg2_subadm(&current->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: security/multiadm.c:427:
+                chg2_subadm(&current->cap_effective);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: security/multiadm.c:428:
+            else if(is_uid_netadm(current->euid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: security/multiadm.c:428:
+            else if(is_uid_netadm(current->euid))$

ERROR:SPACING: space required before the open parenthesis '('
#530: FILE: security/multiadm.c:428:
+            else if(is_uid_netadm(current->euid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: security/multiadm.c:429:
+                chg2_netadm(&current->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: security/multiadm.c:429:
+                chg2_netadm(&current->cap_effective);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: security/multiadm.c:430:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: security/multiadm.c:430:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: security/multiadm.c:431:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: security/multiadm.c:432:
+    return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: security/multiadm.c:436:
+static int mt_task_post_setgid(gid_t old_rgid, gid_t old_egid,
+ gid_t old_sgid, int flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: security/multiadm.c:436:
+ gid_t old_sgid, int flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: security/multiadm.c:438:
+    switch(flags) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#540: FILE: security/multiadm.c:438:
+    switch(flags) {
+        case LSM_SETID_ID:
+        case LSM_SETID_RE:
+        case LSM_SETID_RES:

ERROR:SPACING: space required before the open parenthesis '('
#540: FILE: security/multiadm.c:438:
+    switch(flags) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: security/multiadm.c:439:
+        case LSM_SETID_ID:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: security/multiadm.c:439:
+        case LSM_SETID_ID:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: security/multiadm.c:440:
+        case LSM_SETID_RE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: security/multiadm.c:440:
+        case LSM_SETID_RE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: security/multiadm.c:441:
+        case LSM_SETID_RES:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: security/multiadm.c:441:
+        case LSM_SETID_RES:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: security/multiadm.c:442:
+            if(is_gid_superadm(current->gid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: security/multiadm.c:442:
+            if(is_gid_superadm(current->gid))$

ERROR:SPACING: space required before the open parenthesis '('
#544: FILE: security/multiadm.c:442:
+            if(is_gid_superadm(current->gid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: security/multiadm.c:443:
+                chg2_superadm(&current->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: security/multiadm.c:443:
+                chg2_superadm(&current->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: security/multiadm.c:444:
+            else if(is_gid_subadm(current->gid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: security/multiadm.c:444:
+            else if(is_gid_subadm(current->gid))$

ERROR:SPACING: space required before the open parenthesis '('
#546: FILE: security/multiadm.c:444:
+            else if(is_gid_subadm(current->gid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: security/multiadm.c:445:
+                chg2_subadm(&current->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: security/multiadm.c:445:
+                chg2_subadm(&current->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: security/multiadm.c:447:
+            if(is_gid_superadm(current->egid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: security/multiadm.c:447:
+            if(is_gid_superadm(current->egid))$

ERROR:SPACING: space required before the open parenthesis '('
#549: FILE: security/multiadm.c:447:
+            if(is_gid_superadm(current->egid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#550: FILE: security/multiadm.c:448:
+                chg2_superadm(&current->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: security/multiadm.c:448:
+                chg2_superadm(&current->cap_effective);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: security/multiadm.c:449:
+            else if(is_gid_subadm(current->egid))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: security/multiadm.c:449:
+            else if(is_gid_subadm(current->egid))$

ERROR:SPACING: space required before the open parenthesis '('
#551: FILE: security/multiadm.c:449:
+            else if(is_gid_subadm(current->egid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: security/multiadm.c:450:
+                chg2_subadm(&current->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: security/multiadm.c:450:
+                chg2_subadm(&current->cap_effective);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: security/multiadm.c:451:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: security/multiadm.c:451:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: security/multiadm.c:452:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: security/multiadm.c:453:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#558: FILE: security/multiadm.c:456:
+static int mt_task_setuid(uid_t ruid, uid_t euid, uid_t suid, int flags) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: security/multiadm.c:457:
+    if(is_any_superadm(current->euid, current->egid))$

ERROR:SPACING: space required before the open parenthesis '('
#559: FILE: security/multiadm.c:457:
+    if(is_any_superadm(current->euid, current->egid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: security/multiadm.c:458:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: security/multiadm.c:458:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: security/multiadm.c:460:
+    if(is_any_subadm(current->euid, current->egid))$

ERROR:SPACING: space required before the open parenthesis '('
#562: FILE: security/multiadm.c:460:
+    if(is_any_subadm(current->euid, current->egid))

ERROR:CODE_INDENT: code indent should use tabs where possible
#563: FILE: security/multiadm.c:461:
+        if((ruid == -1 || is_uid_user(ruid)) && (euid == -1 ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: security/multiadm.c:461:
+        if((ruid == -1 || is_uid_user(ruid)) && (euid == -1 ||$

ERROR:SPACING: space required before the open parenthesis '('
#563: FILE: security/multiadm.c:461:
+        if((ruid == -1 || is_uid_user(ruid)) && (euid == -1 ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: security/multiadm.c:462:
+         is_uid_user(euid)) && (suid == -1 || is_uid_user(suid)))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: security/multiadm.c:462:
+        if((ruid == -1 || is_uid_user(ruid)) && (euid == -1 ||
+         is_uid_user(euid)) && (suid == -1 || is_uid_user(suid)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: security/multiadm.c:462:
+         is_uid_user(euid)) && (suid == -1 || is_uid_user(suid)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: security/multiadm.c:463:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: security/multiadm.c:463:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: security/multiadm.c:465:
+    switch(flags) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#567: FILE: security/multiadm.c:465:
+    switch(flags) {
+        case LSM_SETID_ID:
[...]
+        case LSM_SETID_RE:
[...]
+        case LSM_SETID_RES:
[...]
+        case LSM_SETID_FS:
[...]
+        default:

ERROR:SPACING: space required before the open parenthesis '('
#567: FILE: security/multiadm.c:465:
+    switch(flags) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: security/multiadm.c:466:
+        case LSM_SETID_ID:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: security/multiadm.c:466:
+        case LSM_SETID_ID:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: security/multiadm.c:467:
+            if(current->uid == ruid || current->suid == ruid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: security/multiadm.c:467:
+            if(current->uid == ruid || current->suid == ruid)$

ERROR:SPACING: space required before the open parenthesis '('
#569: FILE: security/multiadm.c:467:
+            if(current->uid == ruid || current->suid == ruid)

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: security/multiadm.c:468:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: security/multiadm.c:468:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: security/multiadm.c:469:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: security/multiadm.c:469:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#572: FILE: security/multiadm.c:470:
+        case LSM_SETID_RE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: security/multiadm.c:470:
+        case LSM_SETID_RE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: security/multiadm.c:471:
+            if(current->euid == ruid || current->euid == euid ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: security/multiadm.c:471:
+            if(current->euid == ruid || current->euid == euid ||$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#573: FILE: security/multiadm.c:471:
+            if(current->euid == ruid || current->euid == euid ||
[...]
+                    return 0;

ERROR:SPACING: space required before the open parenthesis '('
#573: FILE: security/multiadm.c:471:
+            if(current->euid == ruid || current->euid == euid ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: security/multiadm.c:472:
+             current->uid == ruid || current->uid == euid ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: security/multiadm.c:472:
+            if(current->euid == ruid || current->euid == euid ||
+             current->uid == ruid || current->uid == euid ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: security/multiadm.c:472:
+             current->uid == ruid || current->uid == euid ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#575: FILE: security/multiadm.c:473:
+             current->suid == euid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: security/multiadm.c:473:
+             current->suid == euid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: security/multiadm.c:474:
+                    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: security/multiadm.c:474:
+                    return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: security/multiadm.c:475:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: security/multiadm.c:475:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: security/multiadm.c:476:
+        case LSM_SETID_RES:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: security/multiadm.c:476:
+        case LSM_SETID_RES:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: security/multiadm.c:477:
+            if(current->euid == ruid || current->euid == euid ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: security/multiadm.c:477:
+            if(current->euid == ruid || current->euid == euid ||$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#579: FILE: security/multiadm.c:477:
+            if(current->euid == ruid || current->euid == euid ||
[...]
+                    return 0;

ERROR:SPACING: space required before the open parenthesis '('
#579: FILE: security/multiadm.c:477:
+            if(current->euid == ruid || current->euid == euid ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: security/multiadm.c:478:
+             current->euid == suid || current->uid == ruid ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: security/multiadm.c:478:
+            if(current->euid == ruid || current->euid == euid ||
+             current->euid == suid || current->uid == ruid ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: security/multiadm.c:478:
+             current->euid == suid || current->uid == ruid ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: security/multiadm.c:479:
+             current->uid == euid || current->uid == suid ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: security/multiadm.c:479:
+             current->uid == euid || current->uid == suid ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#582: FILE: security/multiadm.c:480:
+             current->suid == ruid || current->suid == euid ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: security/multiadm.c:480:
+             current->suid == ruid || current->suid == euid ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: security/multiadm.c:481:
+             current->suid == suid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: security/multiadm.c:481:
+             current->suid == suid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: security/multiadm.c:482:
+                    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: security/multiadm.c:482:
+                    return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: security/multiadm.c:483:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: security/multiadm.c:483:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#586: FILE: security/multiadm.c:484:
+        case LSM_SETID_FS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#586: FILE: security/multiadm.c:484:
+        case LSM_SETID_FS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: security/multiadm.c:485:
+            if(current->euid == ruid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: security/multiadm.c:485:
+            if(current->euid == ruid)$

ERROR:SPACING: space required before the open parenthesis '('
#587: FILE: security/multiadm.c:485:
+            if(current->euid == ruid)

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: security/multiadm.c:486:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: security/multiadm.c:486:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: security/multiadm.c:487:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: security/multiadm.c:487:
+            break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: security/multiadm.c:488:
+        default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: security/multiadm.c:489:
+            printk(KERN_WARNING PREFIX "Unsupported case %d in %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: security/multiadm.c:489:
+            printk(KERN_WARNING PREFIX "Unsupported case %d in %s\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#591: FILE: security/multiadm.c:489:
+            printk(KERN_WARNING PREFIX "Unsupported case %d in %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#592: FILE: security/multiadm.c:490:
+                   flags, __FUNCTION__);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: security/multiadm.c:490:
+                   flags, __FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#592: FILE: security/multiadm.c:490:
+                   flags, __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: security/multiadm.c:491:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: security/multiadm.c:491:
+            break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: security/multiadm.c:492:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: security/multiadm.c:493:
+    return -EIO;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#598: FILE: security/multiadm.c:496:
+static int mt_task_setnice(task_t *task, int nice) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: security/multiadm.c:497:
+    if(is_any_subadm(current->euid, current->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#599: FILE: security/multiadm.c:497:
+    if(is_any_subadm(current->euid, current->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#600: FILE: security/multiadm.c:498:
+        if(task->euid != current->euid && task->uid != current->euid &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: security/multiadm.c:498:
+        if(task->euid != current->euid && task->uid != current->euid &&$

ERROR:SPACING: space required before the open parenthesis '('
#600: FILE: security/multiadm.c:498:
+        if(task->euid != current->euid && task->uid != current->euid &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: security/multiadm.c:499:
+         !is_task1_user(task))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: security/multiadm.c:499:
+        if(task->euid != current->euid && task->uid != current->euid &&
+         !is_task1_user(task))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: security/multiadm.c:499:
+         !is_task1_user(task))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: security/multiadm.c:500:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: security/multiadm.c:500:
+                return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: security/multiadm.c:501:
+        if(nice < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: security/multiadm.c:501:
+        if(nice < 0)$

ERROR:SPACING: space required before the open parenthesis '('
#603: FILE: security/multiadm.c:501:
+        if(nice < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: security/multiadm.c:502:
+                return -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: security/multiadm.c:502:
+                return -EACCES;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: security/multiadm.c:503:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: security/multiadm.c:504:
+    return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: security/multiadm.c:508:
+static int mt_task_setscheduler(task_t *task, int policy,
+ struct sched_param *param)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: security/multiadm.c:508:
+ struct sched_param *param)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#613: FILE: security/multiadm.c:511:
+    /* Return 0 for superuser and normal users. The latters' checks are
+    performed in sched.c. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#613: FILE: security/multiadm.c:511:
+    performed in sched.c. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: security/multiadm.c:512:
+    if(is_any_subadm(current->euid, current->egid)) {$

ERROR:SPACING: space required before the open parenthesis '('
#614: FILE: security/multiadm.c:512:
+    if(is_any_subadm(current->euid, current->egid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#615: FILE: security/multiadm.c:513:
+        // Copied from kernel/sched.c:sched_setscheduler()$

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: security/multiadm.c:514:
+        if(task->policy != policy)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: security/multiadm.c:514:
+        if(task->policy != policy)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#616: FILE: security/multiadm.c:514:
+        if(task->policy != policy)
+            return -EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#616: FILE: security/multiadm.c:514:
+        if(task->policy != policy)

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: security/multiadm.c:515:
+            return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: security/multiadm.c:515:
+            return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: security/multiadm.c:517:
+        if(policy != SCHED_NORMAL && param->sched_priority > task->rt_priority &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: security/multiadm.c:517:
+        if(policy != SCHED_NORMAL && param->sched_priority > task->rt_priority &&$

ERROR:SPACING: space required before the open parenthesis '('
#619: FILE: security/multiadm.c:517:
+        if(policy != SCHED_NORMAL && param->sched_priority > task->rt_priority &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: security/multiadm.c:518:
+         param->sched_priority > task->signal->rlim[RLIMIT_RTPRIO].rlim_cur)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: security/multiadm.c:518:
+        if(policy != SCHED_NORMAL && param->sched_priority > task->rt_priority &&
+         param->sched_priority > task->signal->rlim[RLIMIT_RTPRIO].rlim_cur)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: security/multiadm.c:518:
+         param->sched_priority > task->signal->rlim[RLIMIT_RTPRIO].rlim_cur)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: security/multiadm.c:519:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: security/multiadm.c:519:
+                return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: security/multiadm.c:521:
+        if(task->uid != current->euid && task->suid != current->euid &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: security/multiadm.c:521:
+        if(task->uid != current->euid && task->suid != current->euid &&$

ERROR:SPACING: space required before the open parenthesis '('
#623: FILE: security/multiadm.c:521:
+        if(task->uid != current->euid && task->suid != current->euid &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: security/multiadm.c:522:
+         !is_task1_user(task))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: security/multiadm.c:522:
+        if(task->uid != current->euid && task->suid != current->euid &&
+         !is_task1_user(task))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: security/multiadm.c:522:
+         !is_task1_user(task))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: security/multiadm.c:523:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: security/multiadm.c:523:
+                return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: security/multiadm.c:524:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: security/multiadm.c:525:
+    return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#631: FILE: security/multiadm.c:529:
+static inline void chg2_superadm(kernel_cap_t *c) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: security/multiadm.c:530:
+    cap_set_full(*c);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: security/multiadm.c:531:
+    cap_lower(*c, CAP_SETPCAP);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: security/multiadm.c:532:
+    cap_lower(*c, 31); // currently unused$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: security/multiadm.c:533:
+    return;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#638: FILE: security/multiadm.c:536:
+static inline void chg2_subadm(kernel_cap_t *c) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: security/multiadm.c:537:
+    cap_clear(*c);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: security/multiadm.c:538:
+    cap_raise(*c, CAP_CHOWN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: security/multiadm.c:539:
+    cap_raise(*c, CAP_DAC_OVERRIDE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: security/multiadm.c:540:
+    cap_raise(*c, CAP_DAC_READ_SEARCH);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: security/multiadm.c:541:
+    cap_raise(*c, CAP_FOWNER);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: security/multiadm.c:542:
+    cap_raise(*c, CAP_KILL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: security/multiadm.c:543:
+    cap_raise(*c, CAP_SETUID);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: security/multiadm.c:544:
+    cap_raise(*c, CAP_IPC_OWNER);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: security/multiadm.c:545:
+    cap_raise(*c, CAP_SYS_PTRACE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: security/multiadm.c:546:
+    cap_raise(*c, CAP_SYS_ADMIN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: security/multiadm.c:547:
+    cap_raise(*c, CAP_SYS_NICE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: security/multiadm.c:548:
+    return;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#653: FILE: security/multiadm.c:551:
+static inline void chg2_netadm(kernel_cap_t *c) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: security/multiadm.c:552:
+    cap_clear(*c);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: security/multiadm.c:553:
+    cap_raise(*c, CAP_NET_ADMIN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: security/multiadm.c:554:
+    return;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#659: FILE: security/multiadm.c:557:
+static inline bool is_any_superadm(uid_t u, gid_t g) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: security/multiadm.c:558:
+    return is_uid_superadm(u) || is_gid_superadm(g);$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#663: FILE: security/multiadm.c:561:
+static inline bool is_uid_superadm(uid_t u) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: security/multiadm.c:562:
+    return$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: security/multiadm.c:563:
+      (!issecure(SECURE_NOROOT) && u == 0) ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: security/multiadm.c:564:
+      (Superuid_start != -1 && Superuid_end != -1 &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: security/multiadm.c:565:
+      u >= Superuid_start && u <= Superuid_end);$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#670: FILE: security/multiadm.c:568:
+static inline bool is_gid_superadm(gid_t g) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: security/multiadm.c:569:
+    return Supergid != -1 && g == Supergid;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#674: FILE: security/multiadm.c:572:
+static inline bool is_any_subadm(uid_t u, gid_t g) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: security/multiadm.c:573:
+    return is_uid_subadm(u) || is_gid_subadm(g);$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#678: FILE: security/multiadm.c:576:
+static inline bool is_uid_subadm(uid_t u) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: security/multiadm.c:577:
+    return Subuid_start != -1 && Subuid_end != -1 &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: security/multiadm.c:578:
+           u >= Subuid_start && u <= Subuid_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: security/multiadm.c:578:
+           u >= Subuid_start && u <= Subuid_end;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#683: FILE: security/multiadm.c:581:
+static inline bool is_gid_subadm(gid_t g) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: security/multiadm.c:582:
+    return Subgid != -1 && g == Subgid;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#687: FILE: security/multiadm.c:585:
+static inline bool is_uid_netadm(uid_t u) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: security/multiadm.c:586:
+    return Netuid != -1 && u == Netuid;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#691: FILE: security/multiadm.c:589:
+static inline bool is_uid_user(uid_t u) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#693: FILE: security/multiadm.c:591:
+    /* Special case Wrtuid_end == (unsigned) -1 means what it means: everything
+    until the end. This is why there is no Wrtuid_end != -1 check. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#693: FILE: security/multiadm.c:591:
+    until the end. This is why there is no Wrtuid_end != -1 check. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: security/multiadm.c:592:
+    return Wrtuid_start != -1 && u >= Wrtuid_start && u <= Wrtuid_end;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#697: FILE: security/multiadm.c:595:
+static inline bool is_task1_user(const task_t *task) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: security/multiadm.c:596:
+    return is_uid_user(task->uid) || is_uid_user(task->suid);$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#701: FILE: security/multiadm.c:599:
+static inline bool is_task_user(const task_t *task) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: security/multiadm.c:600:
+    return is_uid_user(task->euid) && is_uid_user(task->uid) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#703: FILE: security/multiadm.c:601:
+           is_uid_user(task->suid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: security/multiadm.c:601:
+           is_uid_user(task->suid);$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#706: FILE: security/multiadm.c:604:
+static inline bool range_intersect(uid_t as, uid_t ae, uid_t bs, uid_t be) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: security/multiadm.c:605:
+    if(as == -1 || ae == -1 || bs == -1 || be == -1)$

ERROR:SPACING: space required before the open parenthesis '('
#707: FILE: security/multiadm.c:605:
+    if(as == -1 || ae == -1 || bs == -1 || be == -1)

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: security/multiadm.c:606:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: security/multiadm.c:606:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: security/multiadm.c:607:
+    return (long)ae >= (long)bs && (long)as <= (long)be;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: security/multiadm.c:611:
+static inline bool range_intersect_wrt(uid_t as, uid_t ae,
+ uid_t bs, uid_t be)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: security/multiadm.c:611:
+ uid_t bs, uid_t be)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: security/multiadm.c:613:
+    if(as == -1 || ae == -1 || bs == -1)$

ERROR:SPACING: space required before the open parenthesis '('
#715: FILE: security/multiadm.c:613:
+    if(as == -1 || ae == -1 || bs == -1)

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: security/multiadm.c:614:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: security/multiadm.c:614:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: security/multiadm.c:615:
+    return (long)ae >= (long)bs && (long)as <= (long)be;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081064.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 333 errors, 415 warnings, 38 checks, 650 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081064.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
