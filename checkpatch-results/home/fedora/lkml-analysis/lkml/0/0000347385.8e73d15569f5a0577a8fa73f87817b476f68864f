WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
several weeks ago. The patches below are based on kernel version 2.6.0-test2.

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#99: FILE: arch/i386/kernel/io_apic.c:80:
+int vector_irq[NR_IRQS] = { [0 ... NR_IRQS -1] = -1};
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: arch/i386/kernel/io_apic.c:81:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/i386/kernel/io_apic.c:81:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: arch/i386/kernel/io_apic.c:82:
+static int platform_irq(int irq) ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: arch/i386/kernel/io_apic.c:82:
+static int platform_irq(int irq) ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: arch/i386/kernel/io_apic.c:83:
+{ ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: arch/i386/kernel/io_apic.c:83:
+{ ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: arch/i386/kernel/io_apic.c:91:
+#endif $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#168: FILE: arch/i386/kernel/io_apic.c:1159:
+	if ((vector = IO_APIC_VECTOR(irq)) > 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: arch/i386/kernel/io_apic.c:1190:
+^I^I^I^Iif ((trigger == IOAPIC_AUTO && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: arch/i386/kernel/io_apic.c:1198:
+^I^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#204: FILE: arch/i386/kernel/io_apic.c:1198:
+			} else 

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: arch/i386/kernel/io_apic.c:1201:
+^I^I^I^Iif ((trigger == IOAPIC_AUTO && $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#242: FILE: arch/i386/kernel/io_apic.c:1897:
+	else
[...]
 	i = IO_APIC_VECTOR(irq);

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: arch/i386/kernel/io_apic.c:1986:
+		int tmp;
+		tmp = platform_irq(irq);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#286: FILE: arch/i386/kernel/mpparse.c:1130:
+			else
[...]
 			entry->irq = irq;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#298: FILE: arch/i386/kernel/mpparse.c:1142:
+			else
[...]
 			entry->irq = irq;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: arch/i386/Kconfig:1095:
+^I   This provides PCI MSI support. Enabling PCI MSI support requires $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: arch/i386/Kconfig:1099:
+^I   If you don't know what MSI is or enabling MSI does not serve you $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: arch/i386/Kconfig:1107:
+^I   This provides users with an option, which enables MSI on specific $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: arch/i386/Kconfig:1110:
+^I   enabling MSI on all MSI capable devices except ones listed in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: arch/i386/Kconfig:1114:
+^I   support is invoked in the kernel, this option serves to enable $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: arch/i386/Kconfig:1115:
+^I   specific MSI capable devices, which are fully validated with the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: arch/i386/Kconfig:1116:
+^I   corresponding software drivers.   $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#470: FILE: arch/i386/kernel/pci_msi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#471: FILE: arch/i386/kernel/pci_msi.c:2:
+ * linux/arch/i386/kernel/pci_msi.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: arch/i386/kernel/pci_msi.c:6:
+#include <linux/irq.h>^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: arch/i386/kernel/pci_msi.c:8:
+#include <linux/init.h>^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: arch/i386/kernel/pci_msi.c:9:
+#include <linux/config.h>      ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: arch/i386/kernel/pci_msi.c:9:
+#include <linux/config.h>      ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#479: FILE: arch/i386/kernel/pci_msi.c:10:
+#include <linux/ioport.h>       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: arch/i386/kernel/pci_msi.c:17:
+#include <asm/io.h>^I^I$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#486: FILE: arch/i386/kernel/pci_msi.c:17:
+#include <asm/io.h>		

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#487: FILE: arch/i386/kernel/pci_msi.c:18:
+#include <asm/smp.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: arch/i386/kernel/pci_msi.c:19:
+#include <asm/desc.h>^I^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#496: FILE: arch/i386/kernel/pci_msi.c:27:
+struct msi_desc* msi_desc[NR_IRQS] = { [0 ... NR_IRQS-1] = NULL };

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#496: FILE: arch/i386/kernel/pci_msi.c:27:
+struct msi_desc* msi_desc[NR_IRQS] = { [0 ... NR_IRQS-1] = NULL };
                                                      ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#499: FILE: arch/i386/kernel/pci_msi.c:30:
+static int nr_alloc_vectors = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#500: FILE: arch/i386/kernel/pci_msi.c:31:
+static int nr_released_vectors = 0;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#507: FILE: arch/i386/kernel/pci_msi.c:38:
+__setup("pci_nomsi", pci_msi_clear);

WARNING:TYPO_SPELLING: 'temperary' may be misspelled - perhaps 'temporary'?
#513: FILE: arch/i386/kernel/pci_msi.c:44:
+ * description: provide a temperary workaround for a PCI/PCI-X/PCI Express 
                           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: arch/i386/kernel/pci_msi.c:44:
+ * description: provide a temperary workaround for a PCI/PCI-X/PCI Express $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: arch/i386/kernel/pci_msi.c:45:
+ * hardware device, which may require IHV investigation if there is an issue. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: arch/i386/kernel/pci_msi.c:46:
+ * It would be a good idea not to force MSI at device level, unless $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: arch/i386/kernel/pci_msi.c:47:
+ * system-wide boot parameter CONFIG_PCI_MSI is disabled. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: arch/i386/kernel/pci_msi.c:56:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#527: FILE: arch/i386/kernel/pci_msi.c:58:
+		printk(KERN_INFO "WARNING: boot param device_nomsi= invalid. Ignore!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: arch/i386/kernel/pci_msi.c:61:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#531: FILE: arch/i386/kernel/pci_msi.c:62:
+	str = get_options(str,ARRAY_SIZE(device_nomsi_list), device_nomsi_list);
 	                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: arch/i386/kernel/pci_msi.c:66:
+^Ifor (i = 0;i < device_nomsi_list[0]; i++) $

ERROR:SPACING: space required after that ';' (ctx:VxV)
#535: FILE: arch/i386/kernel/pci_msi.c:66:
+	for (i = 0;i < device_nomsi_list[0]; i++) 
 	          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#536: FILE: arch/i386/kernel/pci_msi.c:67:
+		printk(KERN_INFO "User requests no MSI for dev (D%04x-V%04x)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: arch/i386/kernel/pci_msi.c:68:
+^I^I(device_nomsi_list[i + 1] >> 16), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: arch/i386/kernel/pci_msi.c:68:
+		printk(KERN_INFO "User requests no MSI for dev (D%04x-V%04x)\n",
+		(device_nomsi_list[i + 1] >> 16), 

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#542: FILE: arch/i386/kernel/pci_msi.c:73:
+__setup("device_nomsi=", create_device_nomsi_list);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: arch/i386/kernel/pci_msi.c:79:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#550: FILE: arch/i386/kernel/pci_msi.c:81:
+		printk(KERN_INFO "WARNING: boot param device_msi= invalid. Ignore!\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: arch/i386/kernel/pci_msi.c:85:
+	str = get_options(str,ARRAY_SIZE(device_msi_list), device_msi_list);
 	                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: arch/i386/kernel/pci_msi.c:89:
+^Ifor (i = 0;i < device_msi_list[0]; i++) $

ERROR:SPACING: space required after that ';' (ctx:VxV)
#558: FILE: arch/i386/kernel/pci_msi.c:89:
+	for (i = 0;i < device_msi_list[0]; i++) 
 	          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#559: FILE: arch/i386/kernel/pci_msi.c:90:
+		printk(KERN_INFO "User requests MSI for dev (D%04x-V%04x)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: arch/i386/kernel/pci_msi.c:91:
+^I^I(device_msi_list[i + 1] >> 16), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: arch/i386/kernel/pci_msi.c:91:
+		printk(KERN_INFO "User requests MSI for dev (D%04x-V%04x)\n",
+		(device_msi_list[i + 1] >> 16), 

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#565: FILE: arch/i386/kernel/pci_msi.c:96:
+__setup("device_msi=", create_device_msi_list);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: arch/i386/kernel/pci_msi.c:100:
+^Iint^I^Ii, enabling_msi = 1; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#569: FILE: arch/i386/kernel/pci_msi.c:100:
+^Iint^I^Ii, enabling_msi = 1; ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: arch/i386/kernel/pci_msi.c:105:
+^I^Iif (!device_msi_list[0]) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: arch/i386/kernel/pci_msi.c:109:
+^I^Iif (!device_nomsi_list[0]) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: arch/i386/kernel/pci_msi.c:112:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: arch/i386/kernel/pci_msi.c:116:
+^I^I^Ienabling_msi = !(enabling_msi);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#596: FILE: arch/i386/kernel/pci_msi.c:127:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#605: FILE: arch/i386/kernel/pci_msi.c:136:
+		unsigned int	mask_bits;
+		pos = *(int *)entry->mask_entry_addr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: arch/i386/kernel/pci_msi.c:137:
+^I        entry->dev->bus->ops->read(entry->dev->bus, entry->dev->devfn, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#606: FILE: arch/i386/kernel/pci_msi.c:137:
+^I        entry->dev->bus->ops->read(entry->dev->bus, entry->dev->devfn, $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#610: FILE: arch/i386/kernel/pci_msi.c:141:
+^I        entry->dev->bus->ops->write(entry->dev->bus, entry->dev->devfn, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: arch/i386/kernel/pci_msi.c:141:
+^I        entry->dev->bus->ops->write(entry->dev->bus, entry->dev->devfn, $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#616: FILE: arch/i386/kernel/pci_msi.c:147:
+		int dw_off = entry->msi_attrib.entry_nr*PCI_MSIX_ENTRY_SIZE - 1;
 		                                       ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#617: FILE: arch/i386/kernel/pci_msi.c:148:
+		*(u32*)(entry->mask_entry_addr + dw_off) = flag;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: arch/i386/kernel/pci_msi.c:153:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: arch/i386/kernel/pci_msi.c:166:
+static unsigned int startup_msi_irq_wo_maskbit(unsigned int irq) $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#639: FILE: arch/i386/kernel/pci_msi.c:170:
+}
+static void shutdown_msi_irq_wo_maskbit(unsigned int irq) {}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: arch/i386/kernel/pci_msi.c:174:
+static void end_msi_irq_wo_maskbit(unsigned int irq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: arch/i386/kernel/pci_msi.c:176:
+^Iack_APIC_irq();^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: arch/i386/kernel/pci_msi.c:180:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: arch/i386/kernel/pci_msi.c:189:
+static void end_msi_irq_w_maskbit(unsigned int irq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: arch/i386/kernel/pci_msi.c:191:
+^Iunmask_MSI_irq(irq);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: arch/i386/kernel/pci_msi.c:201:
+^Iact_msi_irq_w_maskbit,^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: arch/i386/kernel/pci_msi.c:202:
+^Iend_msi_irq_w_maskbit,^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: arch/i386/kernel/pci_msi.c:212:
+^Iact_msi_irq_wo_maskbit,^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: arch/i386/kernel/pci_msi.c:213:
+^Iend_msi_irq_wo_maskbit,^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#686: FILE: arch/i386/kernel/pci_msi.c:217:
+static void msi_data_init(struct msg_data *msi_data, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: arch/i386/kernel/pci_msi.c:224:
+^Imsi_data->trigger = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: arch/i386/kernel/pci_msi.c:225:
+^Imsi_data->delivery_status = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: arch/i386/kernel/pci_msi.c:234:
+^Imsi_address->lo_address.u.redirection_hint = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: arch/i386/kernel/pci_msi.c:239:
+static int pci_vector_resources(void) ^I^I^I^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#708: FILE: arch/i386/kernel/pci_msi.c:239:
+static int pci_vector_resources(void) ^I^I^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#708: FILE: arch/i386/kernel/pci_msi.c:239:
+static int pci_vector_resources(void) 					

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: arch/i386/kernel/pci_msi.c:240:
+{^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: arch/i386/kernel/pci_msi.c:241:
+^Istatic int res = -EINVAL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: arch/i386/kernel/pci_msi.c:242:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#714: FILE: arch/i386/kernel/pci_msi.c:245:
+^I^Ifor (i = NR_REPEATS; i > 0; i--) {^I^I^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#714: FILE: arch/i386/kernel/pci_msi.c:245:
+		int i, repeat;
+		for (i = NR_REPEATS; i > 0; i--) {				

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#715: FILE: arch/i386/kernel/pci_msi.c:246:
+			if ((FIRST_DEVICE_VECTOR + i*8) > FIRST_SYSTEM_VECTOR)
 			                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#716: FILE: arch/i386/kernel/pci_msi.c:247:
+^I^I^I^Icontinue; ^I^I^I^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: arch/i386/kernel/pci_msi.c:247:
+^I^I^I^Icontinue; ^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: arch/i386/kernel/pci_msi.c:248:
+^I^I^Ibreak; ^I^I^I^I^I^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#717: FILE: arch/i386/kernel/pci_msi.c:248:
+^I^I^Ibreak; ^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: arch/i386/kernel/pci_msi.c:249:
+^I^I} ^I^I^I^I^I^I^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#718: FILE: arch/i386/kernel/pci_msi.c:249:
+^I^I} ^I^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#719: FILE: arch/i386/kernel/pci_msi.c:250:
+^I^Ii++; ^I^I^I^I^I^I^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#719: FILE: arch/i386/kernel/pci_msi.c:250:
+^I^Ii++; ^I^I^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: arch/i386/kernel/pci_msi.c:251:
+^I^Irepeat = (FIRST_SYSTEM_VECTOR - FIRST_DEVICE_VECTOR)/i; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#720: FILE: arch/i386/kernel/pci_msi.c:251:
+^I^Irepeat = (FIRST_SYSTEM_VECTOR - FIRST_DEVICE_VECTOR)/i; ^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#720: FILE: arch/i386/kernel/pci_msi.c:251:
+		repeat = (FIRST_SYSTEM_VECTOR - FIRST_DEVICE_VECTOR)/i; 	
 		                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: arch/i386/kernel/pci_msi.c:252:
+^I^Ires = i*repeat - NR_RESERVED_VECTORS + 1; $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#721: FILE: arch/i386/kernel/pci_msi.c:252:
+		res = i*repeat - NR_RESERVED_VECTORS + 1; 
 		       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#724: FILE: arch/i386/kernel/pci_msi.c:255:
+^Ireturn (res + nr_released_vectors - nr_alloc_vectors);^I$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#729: FILE: arch/i386/kernel/pci_msi.c:260:
+	static int current_vector = FIRST_DEVICE_VECTOR, offset = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: arch/i386/kernel/pci_msi.c:261:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: arch/i386/kernel/pci_msi.c:274:
+^Iif (current_vector == FIRST_SYSTEM_VECTOR) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: arch/i386/kernel/pci_msi.c:276:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: arch/i386/kernel/pci_msi.c:278:
+^Iif (irq != MSI_AUTO)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: arch/i386/kernel/pci_msi.c:288:
+^Istatic int new_vector_avail = 1; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#757: FILE: arch/i386/kernel/pci_msi.c:288:
+^Istatic int new_vector_avail = 1; ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: arch/i386/kernel/pci_msi.c:291:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: arch/i386/kernel/pci_msi.c:292:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: arch/i386/kernel/pci_msi.c:304:
+^I ^I * vector_irq[] = -1 indicates that this specific vector is:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#773: FILE: arch/i386/kernel/pci_msi.c:304:
+^I ^I * vector_irq[] = -1 indicates that this specific vector is:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: arch/i386/kernel/pci_msi.c:305:
+^I ^I * - assigned for MSI (since MSI have no associated IRQ) or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#774: FILE: arch/i386/kernel/pci_msi.c:305:
+^I ^I * - assigned for MSI (since MSI have no associated IRQ) or$

ERROR:CODE_INDENT: code indent should use tabs where possible
#775: FILE: arch/i386/kernel/pci_msi.c:306:
+^I ^I * - assigned for legacy if less than 16, or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#775: FILE: arch/i386/kernel/pci_msi.c:306:
+^I ^I * - assigned for legacy if less than 16, or$

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: arch/i386/kernel/pci_msi.c:307:
+^I ^I * - having no corresponding 1:1 vector-to-IOxAPIC IRQ mapping$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#776: FILE: arch/i386/kernel/pci_msi.c:307:
+^I ^I * - having no corresponding 1:1 vector-to-IOxAPIC IRQ mapping$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: arch/i386/kernel/pci_msi.c:308:
+^I ^I * vector_irq[] = 0 indicates that this vector, previously $

ERROR:CODE_INDENT: code indent should use tabs where possible
#777: FILE: arch/i386/kernel/pci_msi.c:308:
+^I ^I * vector_irq[] = 0 indicates that this vector, previously $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#777: FILE: arch/i386/kernel/pci_msi.c:308:
+^I ^I * vector_irq[] = 0 indicates that this vector, previously $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#778: FILE: arch/i386/kernel/pci_msi.c:309:
+^I^I * assigned for MSI, is freed by hotplug removed operations. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#779: FILE: arch/i386/kernel/pci_msi.c:310:
+^I^I * This vector will be reused for any subsequent hotplug added $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#781: FILE: arch/i386/kernel/pci_msi.c:312:
+^I ^I * vector_irq[] > 0 indicates that this vector is assigned for $

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: arch/i386/kernel/pci_msi.c:312:
+^I ^I * vector_irq[] > 0 indicates that this vector is assigned for $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#781: FILE: arch/i386/kernel/pci_msi.c:312:
+^I ^I * vector_irq[] > 0 indicates that this vector is assigned for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#782: FILE: arch/i386/kernel/pci_msi.c:313:
+^I^I * IOxAPIC IRQs. This vector and its value provides a 1-to-1 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#784: FILE: arch/i386/kernel/pci_msi.c:315:
+^I ^I */   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: arch/i386/kernel/pci_msi.c:315:
+^I ^I */   $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#784: FILE: arch/i386/kernel/pci_msi.c:315:
+^I ^I */   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: arch/i386/kernel/pci_msi.c:316:
+^I^Ifor (vector = 0; vector < NR_IRQS; vector++) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: arch/i386/kernel/pci_msi.c:317:
+^I^I^Iif (vector_irq[vector] != 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: arch/i386/kernel/pci_msi.c:319:
+^I^I^Ivector_irq[vector] = -1;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: arch/i386/kernel/pci_msi.c:326:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: arch/i386/kernel/pci_msi.c:329:
+^Iif (vector  == (FIRST_SYSTEM_VECTOR - 8))  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#808: FILE: arch/i386/kernel/pci_msi.c:339:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#809: FILE: arch/i386/kernel/pci_msi.c:340:
+	if ((vector = assign_msi_vector()) > 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#822: FILE: arch/i386/kernel/pci_msi.c:353:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: arch/i386/kernel/pci_msi.c:364:
+^I^Iif (entry->id.segment == 0 && entry->irq == vector) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#836: FILE: arch/i386/kernel/pci_msi.c:367:
+^Iif (shares != 1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: arch/i386/kernel/pci_msi.c:369:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#839: FILE: arch/i386/kernel/pci_msi.c:370:
+^Ireturn vector; $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#841: FILE: arch/i386/kernel/pci_msi.c:372:
+}
+#define get_ioapic_vector	find_prt_ioapic_vector

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#845: FILE: arch/i386/kernel/pci_msi.c:376:
+^Iint ^I^Iirq = -1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: arch/i386/kernel/pci_msi.c:378:
+^Iif (io_apic_assign_pci_irqs && IO_APIC_DEFINED) $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#847: FILE: arch/i386/kernel/pci_msi.c:378:
+	if (io_apic_assign_pci_irqs && IO_APIC_DEFINED) 
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#849: FILE: arch/i386/kernel/pci_msi.c:380:
+^I^Iu32 ^I^Ipin = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#850: FILE: arch/i386/kernel/pci_msi.c:381:
+^I^Iunsigned int ^Iapic, intin;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#851: FILE: arch/i386/kernel/pci_msi.c:382:
+^I^Iint ^I^Ii = 0, shares = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#852: FILE: arch/i386/kernel/pci_msi.c:383:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#856: FILE: arch/i386/kernel/pci_msi.c:387:
+^I^I^Ipin--; ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#856: FILE: arch/i386/kernel/pci_msi.c:387:
+^I^I^Ipin--; ^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#857: FILE: arch/i386/kernel/pci_msi.c:388:
+			irq = IO_APIC_get_PCI_irq_vector(

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#861: FILE: arch/i386/kernel/pci_msi.c:392:
+				if (i > irq) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#863: FILE: arch/i386/kernel/pci_msi.c:394:
+^I^I^Iintin = irq - (i - nr_ioapic_registers[apic]);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#864: FILE: arch/i386/kernel/pci_msi.c:395:
+^I^I        for (i = 0; i < mp_irq_entries; i++) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#864: FILE: arch/i386/kernel/pci_msi.c:395:
+^I^I        for (i = 0; i < mp_irq_entries; i++) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#865: FILE: arch/i386/kernel/pci_msi.c:396:
+^I^I^I^Iif ((mp_ioapics[apic].mpc_apicid == $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mp_ioapics[apic].mpc_apicid == 
 				    mp_irqs[i].mpc_dstapic'
#865: FILE: arch/i386/kernel/pci_msi.c:396:
+				if ((mp_ioapics[apic].mpc_apicid == 
+				    mp_irqs[i].mpc_dstapic) && /*MATCH APIC & */
+				   (mp_irqs[i].mpc_dstirq == intin)) /* INTIN */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mp_irqs[i].mpc_dstirq == intin'
#865: FILE: arch/i386/kernel/pci_msi.c:396:
+				if ((mp_ioapics[apic].mpc_apicid == 
+				    mp_irqs[i].mpc_dstapic) && /*MATCH APIC & */
+				   (mp_irqs[i].mpc_dstirq == intin)) /* INTIN */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: arch/i386/kernel/pci_msi.c:399:
+^I^I^I^I^Ishares++; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: arch/i386/kernel/pci_msi.c:401:
+^I^Iif (shares != 1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: arch/i386/kernel/pci_msi.c:404:
+^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#876: FILE: arch/i386/kernel/pci_msi.c:407:
+}
+#define get_ioapic_vector	find_ioapic_vector

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: arch/i386/kernel/pci_msi.c:414:
+^Iif ((vector = get_ioapic_vector(dev)) < 0) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#883: FILE: arch/i386/kernel/pci_msi.c:414:
+	if ((vector = get_ioapic_vector(dev)) < 0) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: arch/i386/kernel/pci_msi.c:416:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#889: FILE: arch/i386/kernel/pci_msi.c:420:
+static struct msi_desc* alloc_msi_entry(void)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#893: FILE: arch/i386/kernel/pci_msi.c:424:
+	entry=(struct msi_desc*)kmalloc(sizeof(struct msi_desc),GFP_KERNEL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#893: FILE: arch/i386/kernel/pci_msi.c:424:
+	entry=(struct msi_desc*)kmalloc(sizeof(struct msi_desc),GFP_KERNEL);
 	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#893: FILE: arch/i386/kernel/pci_msi.c:424:
+	entry=(struct msi_desc*)kmalloc(sizeof(struct msi_desc),GFP_KERNEL);
 	                                                       ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#893: FILE: arch/i386/kernel/pci_msi.c:424:
+	entry=(struct msi_desc*)kmalloc(sizeof(struct msi_desc),GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct msi_desc)...)
#893: FILE: arch/i386/kernel/pci_msi.c:424:
+	entry=(struct msi_desc*)kmalloc(sizeof(struct msi_desc),GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: arch/i386/kernel/pci_msi.c:429:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: arch/i386/kernel/pci_msi.c:446:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: arch/i386/kernel/pci_msi.c:447:
+^Idev->bus->ops->read(dev->bus, dev->devfn, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#921: FILE: arch/i386/kernel/pci_msi.c:452:
+^I        dev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#921: FILE: arch/i386/kernel/pci_msi.c:452:
+^I        dev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: arch/i386/kernel/pci_msi.c:456:
+^I        dev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#925: FILE: arch/i386/kernel/pci_msi.c:456:
+^I        dev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#928: FILE: arch/i386/kernel/pci_msi.c:459:
+    ^Iif (pci_find_capability(dev, PCI_CAP_ID_PCI_EXPRESS)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#928: FILE: arch/i386/kernel/pci_msi.c:459:
+    ^Iif (pci_find_capability(dev, PCI_CAP_ID_PCI_EXPRESS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: arch/i386/kernel/pci_msi.c:459:
+    ^Iif (pci_find_capability(dev, PCI_CAP_ID_PCI_EXPRESS)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#931: FILE: arch/i386/kernel/pci_msi.c:462:
+^I        dev->bus->ops->read(dev->bus, dev->devfn, PCI_COMMAND, 2, &cmd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: arch/i386/kernel/pci_msi.c:464:
+^I        dev->bus->ops->write(dev->bus, dev->devfn, PCI_COMMAND, 2, cmd);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#940: FILE: arch/i386/kernel/pci_msi.c:471:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: arch/i386/kernel/pci_msi.c:472:
+ * description: called to configure the device's MSI capability structure with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: arch/i386/kernel/pci_msi.c:478:
+ * -EBUSY^I: No MSI resource $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#950: FILE: arch/i386/kernel/pci_msi.c:481:
+static int msi_capability_init(struct pci_dev *dev) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: arch/i386/kernel/pci_msi.c:484:
+^Istruct msg_address address; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: arch/i386/kernel/pci_msi.c:488:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: arch/i386/kernel/pci_msi.c:489:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#958: FILE: arch/i386/kernel/pci_msi.c:489:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: arch/i386/kernel/pci_msi.c:489:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: arch/i386/kernel/pci_msi.c:491:
+^I^Ireturn -EINVAL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#962: FILE: arch/i386/kernel/pci_msi.c:493:
+^Idev->bus->ops->read(dev->bus, dev->devfn, msi_control_reg(pos), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: arch/i386/kernel/pci_msi.c:497:
+^I$

CHECK:SPACING: No space is necessary after a cast
#968: FILE: arch/i386/kernel/pci_msi.c:499:
+		mask_reg = (int*) kmalloc(sizeof(int), GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#968: FILE: arch/i386/kernel/pci_msi.c:499:
+		mask_reg = (int*) kmalloc(sizeof(int), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#968: FILE: arch/i386/kernel/pci_msi.c:499:
+		mask_reg = (int*) kmalloc(sizeof(int), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#979: FILE: arch/i386/kernel/pci_msi.c:510:
+	if ((vector = get_msi_vector(dev)) < 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#988: FILE: arch/i386/kernel/pci_msi.c:519:
+^Ientry->mask_entry_addr = mask_reg; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#995: FILE: arch/i386/kernel/pci_msi.c:526:
+^Idev->bus->ops->write(dev->bus, dev->devfn, msi_lower_address_reg(pos), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: arch/i386/kernel/pci_msi.c:529:
+^I^Idev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: arch/i386/kernel/pci_msi.c:531:
+^I^Idev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1001: FILE: arch/i386/kernel/pci_msi.c:532:
+			msi_data_reg(pos, 1), 2, *((u32*)&data));

CHECK:BRACES: Unbalanced braces around else statement
#1002: FILE: arch/i386/kernel/pci_msi.c:533:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1003: FILE: arch/i386/kernel/pci_msi.c:534:
+^I^Idev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1004: FILE: arch/i386/kernel/pci_msi.c:535:
+			msi_data_reg(pos, 0), 2, *((u32*)&data));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1008: FILE: arch/i386/kernel/pci_msi.c:539:
+^I        dev->bus->ops->read(dev->bus, dev->devfn, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1008: FILE: arch/i386/kernel/pci_msi.c:539:
+^I        dev->bus->ops->read(dev->bus, dev->devfn, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1014: FILE: arch/i386/kernel/pci_msi.c:545:
+^I^Idev->bus->ops->write(dev->bus, dev->devfn, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1020: FILE: arch/i386/kernel/pci_msi.c:551:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1027: FILE: arch/i386/kernel/pci_msi.c:558:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1028: FILE: arch/i386/kernel/pci_msi.c:559:
+ * description: called to configure the device's MSI-X capability structure $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: arch/i386/kernel/pci_msi.c:568:
+ * -EBUSY^I: No MSI resource $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1040: FILE: arch/i386/kernel/pci_msi.c:571:
+static int msix_capability_init(struct pci_dev^I*dev) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1043: FILE: arch/i386/kernel/pci_msi.c:574:
+^Istruct msg_address address; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: arch/i386/kernel/pci_msi.c:580:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1050: FILE: arch/i386/kernel/pci_msi.c:581:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1050: FILE: arch/i386/kernel/pci_msi.c:581:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: arch/i386/kernel/pci_msi.c:581:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: arch/i386/kernel/pci_msi.c:583:
+^I^Ireturn -EINVAL;  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1055: FILE: arch/i386/kernel/pci_msi.c:586:
+^Idev->bus->ops->read(dev->bus, dev->devfn, msi_control_reg(pos), 2, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1061: FILE: arch/i386/kernel/pci_msi.c:592:
+^Idev->bus->ops->read(dev->bus, dev->devfn, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1064: FILE: arch/i386/kernel/pci_msi.c:595:
+	phys_addr = pci_resource_start (dev, bir);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1066: FILE: arch/i386/kernel/pci_msi.c:597:
+^Iif (!request_mem_region(phys_addr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1067: FILE: arch/i386/kernel/pci_msi.c:598:
+	if (!request_mem_region(phys_addr, 
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1067: FILE: arch/i386/kernel/pci_msi.c:598:
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32),
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1067: FILE: arch/i386/kernel/pci_msi.c:598:
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32),
 		                               ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1070: FILE: arch/i386/kernel/pci_msi.c:601:
+	base = (u32*)ioremap_nocache(phys_addr,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1071: FILE: arch/i386/kernel/pci_msi.c:602:
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1071: FILE: arch/i386/kernel/pci_msi.c:602:
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));
 		                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1072: FILE: arch/i386/kernel/pci_msi.c:603:
+^Iif (base == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base"
#1072: FILE: arch/i386/kernel/pci_msi.c:603:
+	if (base == NULL) 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: arch/i386/kernel/pci_msi.c:604:
+^I^Igoto free_region; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: arch/i386/kernel/pci_msi.c:607:
+^Iif (!entry) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1077: FILE: arch/i386/kernel/pci_msi.c:608:
+^I^Igoto free_iomap; $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1078: FILE: arch/i386/kernel/pci_msi.c:609:
+	if ((vector = get_msi_vector(dev)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1080: FILE: arch/i386/kernel/pci_msi.c:611:
+       ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1080: FILE: arch/i386/kernel/pci_msi.c:611:
+       ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: arch/i386/kernel/pci_msi.c:611:
+       ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1085: FILE: arch/i386/kernel/pci_msi.c:616:
+^Ientry->mask_entry_addr = base; $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1094: FILE: arch/i386/kernel/pci_msi.c:625:
+	*(base + 2) = *((u32*)&data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: arch/i386/kernel/pci_msi.c:634:
+free_region: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1104: FILE: arch/i386/kernel/pci_msi.c:635:
+^Irelease_mem_region(phys_addr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: arch/i386/kernel/pci_msi.c:636:
+	release_mem_region(phys_addr, 
+	dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1105: FILE: arch/i386/kernel/pci_msi.c:636:
+	dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1105: FILE: arch/i386/kernel/pci_msi.c:636:
+	dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));
 	                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1110: FILE: arch/i386/kernel/pci_msi.c:641:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1112: FILE: arch/i386/kernel/pci_msi.c:643:
+ * argument: unsigned int irq $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1113: FILE: arch/i386/kernel/pci_msi.c:644:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: arch/i386/kernel/pci_msi.c:645:
+ * description: called by PCI bus driver during PCI bus enumeration. The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: arch/i386/kernel/pci_msi.c:646:
+ * decision of enabling MSI vector(s) to the function requires that all of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: arch/i386/kernel/pci_msi.c:648:
+ * -^IThe system-wide-level boot parameter CONFIG_PCI_MSI is enabled $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1118: FILE: arch/i386/kernel/pci_msi.c:649:
+ *      This boot parameter enables MSI support to all MSI capable functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: arch/i386/kernel/pci_msi.c:653:
+ * -^IThe function is not listed in the boot parameter "device_nomsi=". PCI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1123: FILE: arch/i386/kernel/pci_msi.c:654:
+ *^Isubsystem uses this boot parameter to determine whether users want to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1124: FILE: arch/i386/kernel/pci_msi.c:655:
+ *^Ihave PCI subsystem forcing the function to override its default irq $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1131: FILE: arch/i386/kernel/pci_msi.c:662:
+ * -EBUSY^I: No MSI resource $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1134: FILE: arch/i386/kernel/pci_msi.c:665:
+int msi_get_pci_irq_vector(struct pci_dev* dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1139: FILE: arch/i386/kernel/pci_msi.c:670:
+ ^I^Ireturn vector;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1139: FILE: arch/i386/kernel/pci_msi.c:670:
+ ^I^Ireturn vector;^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1139: FILE: arch/i386/kernel/pci_msi.c:670:
+ ^I^Ireturn vector;^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: arch/i386/kernel/pci_msi.c:670:
+ ^I^Ireturn vector;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: arch/i386/kernel/pci_msi.c:672:
+ ^I^Ireturn vector;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1141: FILE: arch/i386/kernel/pci_msi.c:672:
+ ^I^Ireturn vector;^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1141: FILE: arch/i386/kernel/pci_msi.c:672:
+ ^I^Ireturn vector;^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: arch/i386/kernel/pci_msi.c:672:
+ ^I^Ireturn vector;^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1142: FILE: arch/i386/kernel/pci_msi.c:673:
+	if ((vector = msix_capability_init(dev)) == -EINVAL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: arch/i386/kernel/pci_msi.c:675:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1148: FILE: arch/i386/kernel/pci_msi.c:679:
+static int msix_alloc_vector(struct pci_dev* dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1151: FILE: arch/i386/kernel/pci_msi.c:682:
+^Istruct msg_address address; $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1163: FILE: arch/i386/kernel/pci_msi.c:694:
+	base = (u32*)entry->mask_entry_addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: arch/i386/kernel/pci_msi.c:695:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1164: FILE: arch/i386/kernel/pci_msi.c:695:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: arch/i386/kernel/pci_msi.c:695:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: arch/i386/kernel/pci_msi.c:696:
+^Idev->bus->ops->read(dev->bus, dev->devfn, msi_control_reg(pos),^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1169: FILE: arch/i386/kernel/pci_msi.c:700:
+		if (*(base + i*PCI_MSIX_ENTRY_SIZE) == 0)
+			 break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1169: FILE: arch/i386/kernel/pci_msi.c:700:
+		if (*(base + i*PCI_MSIX_ENTRY_SIZE) == 0)
 		              ^

WARNING:TABSTOP: Statements should start on a tabstop
#1170: FILE: arch/i386/kernel/pci_msi.c:701:
+			 break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: arch/i386/kernel/pci_msi.c:717:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1191: FILE: arch/i386/kernel/pci_msi.c:722:
+^Ientry->mask_entry_addr = base; $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1198: FILE: arch/i386/kernel/pci_msi.c:729:
+	base += i*PCI_MSIX_ENTRY_SIZE;
 	         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1201: FILE: arch/i386/kernel/pci_msi.c:732:
+	*(base + 2) = *((u32*)&data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1203: FILE: arch/i386/kernel/pci_msi.c:734:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1207: FILE: arch/i386/kernel/pci_msi.c:738:
+int msix_alloc_vectors(struct pci_dev* dev, int *vector, int nvec)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1215: FILE: arch/i386/kernel/pci_msi.c:746:
+ ^I^Ireturn -EINVAL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1215: FILE: arch/i386/kernel/pci_msi.c:746:
+ ^I^Ireturn -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1215: FILE: arch/i386/kernel/pci_msi.c:746:
+ ^I^Ireturn -EINVAL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1216: FILE: arch/i386/kernel/pci_msi.c:747:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: arch/i386/kernel/pci_msi.c:750:
+	if (!entry || entry->dev != dev ||
+	   entry->msi_attrib.type != PCI_CAP_ID_MSIX)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1222: FILE: arch/i386/kernel/pci_msi.c:753:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1222: FILE: arch/i386/kernel/pci_msi.c:753:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1222: FILE: arch/i386/kernel/pci_msi.c:753:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1223: FILE: arch/i386/kernel/pci_msi.c:754:
+	dev->bus->ops->read(dev->bus, dev->devfn, msi_control_reg(pos), 			2, &control);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1223: FILE: arch/i386/kernel/pci_msi.c:754:
+^Idev->bus->ops->read(dev->bus, dev->devfn, msi_control_reg(pos), ^I^I^I2, &control);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1229: FILE: arch/i386/kernel/pci_msi.c:760:
+^I */ $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1237: FILE: arch/i386/kernel/pci_msi.c:768:
+		if ((vec = msix_alloc_vector(dev)) < 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msi_desc[vec]"
#1249: FILE: arch/i386/kernel/pci_msi.c:780:
+			if (msi_desc[vec] != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1250: FILE: arch/i386/kernel/pci_msi.c:781:
+^I^I^I^Imsi_desc[vec]->dev = NULL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1251: FILE: arch/i386/kernel/pci_msi.c:782:
+^I^I^I^Imsi_desc[vec]->mask_entry_addr = NULL; $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1261: FILE: arch/i386/kernel/pci_msi.c:792:
+static int msi_free_vector(struct pci_dev* dev, int vector)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: arch/i386/kernel/pci_msi.c:800:
+^Iif (!entry || entry->dev != dev || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: arch/i386/kernel/pci_msi.c:801:
+	if (!entry || entry->dev != dev || 
+	   entry->msi_attrib.type != PCI_CAP_ID_MSIX)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1273: FILE: arch/i386/kernel/pci_msi.c:804:
+	tbl_addr = (u32*)entry->mask_entry_addr;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1274: FILE: arch/i386/kernel/pci_msi.c:805:
+	offset = entry->msi_attrib.entry_nr*PCI_MSIX_ENTRY_SIZE - 1;
 	                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1281: FILE: arch/i386/kernel/pci_msi.c:812:
+^Ivector_irq[vector] = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1284: FILE: arch/i386/kernel/pci_msi.c:815:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1288: FILE: arch/i386/kernel/pci_msi.c:819:
+int msix_free_vectors(struct pci_dev* dev, int *vector, int nvec)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1294: FILE: arch/i386/kernel/pci_msi.c:825:
+ ^I^Ireturn -EINVAL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1294: FILE: arch/i386/kernel/pci_msi.c:825:
+ ^I^Ireturn -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1294: FILE: arch/i386/kernel/pci_msi.c:825:
+ ^I^Ireturn -EINVAL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1295: FILE: arch/i386/kernel/pci_msi.c:826:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1297: FILE: arch/i386/kernel/pci_msi.c:828:
+^Iif (!entry || entry->dev != dev || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1298: FILE: arch/i386/kernel/pci_msi.c:829:
+	if (!entry || entry->dev != dev || 
+	   entry->msi_attrib.type != PCI_CAP_ID_MSIX)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1301: FILE: arch/i386/kernel/pci_msi.c:832:
+	for (i = 0; i < nvec; i++) {
+		msi_free_vector(dev, *(vector + i)); 
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1302: FILE: arch/i386/kernel/pci_msi.c:833:
+^I^Imsi_free_vector(dev, *(vector + i)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1310: FILE: arch/i386/kernel/pci_msi.c:841:
+ * argument: device pointer of type struct pci_dev $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1313: FILE: arch/i386/kernel/pci_msi.c:844:
+ * PCI subsystem reclaims associated MSI to unused state, which may be used $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1315: FILE: arch/i386/kernel/pci_msi.c:846:
+ **/ $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1316: FILE: arch/i386/kernel/pci_msi.c:847:
+void msi_remove_pci_irq_vectors(struct pci_dev* dev)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1324: FILE: arch/i386/kernel/pci_msi.c:855:
+ ^I^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1324: FILE: arch/i386/kernel/pci_msi.c:855:
+ ^I^Ireturn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1324: FILE: arch/i386/kernel/pci_msi.c:855:
+ ^I^Ireturn;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1325: FILE: arch/i386/kernel/pci_msi.c:856:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1329: FILE: arch/i386/kernel/pci_msi.c:860:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1339: FILE: arch/i386/kernel/pci_msi.c:870:
+^Ivector_irq[dev->irq] = 0;^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1342: FILE: arch/i386/kernel/pci_msi.c:873:
+	if (type == PCI_CAP_ID_MSIX) {
[...]
+	} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1348: FILE: arch/i386/kernel/pci_msi.c:879:
+   ^I^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1348: FILE: arch/i386/kernel/pci_msi.c:879:
+   ^I^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1348: FILE: arch/i386/kernel/pci_msi.c:879:
+   ^I^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSIX);$

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1349: FILE: arch/i386/kernel/pci_msi.c:880:
+		dev->bus->ops->read(dev->bus, dev->devfn, msi_control_reg(pos), 			2, &control);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1349: FILE: arch/i386/kernel/pci_msi.c:880:
+^I^Idev->bus->ops->read(dev->bus, dev->devfn, msi_control_reg(pos), ^I^I^I2, &control);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1351: FILE: arch/i386/kernel/pci_msi.c:882:
+^I^Idev->bus->ops->read(dev->bus, dev->devfn, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1354: FILE: arch/i386/kernel/pci_msi.c:885:
+		phys_addr = pci_resource_start (dev, bir);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1356: FILE: arch/i386/kernel/pci_msi.c:887:
+^I^Ifor (i = 0; i < NR_IRQS; i++) $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1359: FILE: arch/i386/kernel/pci_msi.c:890:
+		*(u32*)(mask_entry_addr + 3) = 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1361: FILE: arch/i386/kernel/pci_msi.c:892:
+^I^Irelease_mem_region(phys_addr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: arch/i386/kernel/pci_msi.c:893:
+		release_mem_region(phys_addr, 
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1362: FILE: arch/i386/kernel/pci_msi.c:893:
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1362: FILE: arch/i386/kernel/pci_msi.c:893:
+		dev_msi_cap*PCI_MSIX_ENTRY_SIZE*sizeof(u32));
 		                               ^

CHECK:BRACES: Unbalanced braces around else statement
#1363: FILE: arch/i386/kernel/pci_msi.c:894:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1376: FILE: arch/i386/pci/irq.c:720:
+  ^I^Iif ((irq = msi_get_pci_irq_vector(dev)) > 0) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1376: FILE: arch/i386/pci/irq.c:720:
+  ^I^Iif ((irq = msi_get_pci_irq_vector(dev)) > 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1376: FILE: arch/i386/pci/irq.c:720:
+  ^I^Iif ((irq = msi_get_pci_irq_vector(dev)) > 0) {$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1376: FILE: arch/i386/pci/irq.c:720:
+  		if ((irq = msi_get_pci_irq_vector(dev)) > 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1377: FILE: arch/i386/pci/irq.c:721:
+  ^I^I    ^Idev->irq = irq;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1377: FILE: arch/i386/pci/irq.c:721:
+  ^I^I    ^Idev->irq = irq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1377: FILE: arch/i386/pci/irq.c:721:
+  ^I^I    ^Idev->irq = irq;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1378: FILE: arch/i386/pci/irq.c:722:
+  ^I^I    ^Iprintk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1378: FILE: arch/i386/pci/irq.c:722:
+  ^I^I    ^Iprintk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1378: FILE: arch/i386/pci/irq.c:722:
+  ^I^I    ^Iprintk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1378: FILE: arch/i386/pci/irq.c:722:
+  ^I^I    ^Iprintk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1378: FILE: arch/i386/pci/irq.c:722:
+  		    	printk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1379: FILE: arch/i386/pci/irq.c:723:
+  ^I^I^I^Idev->bus->number, PCI_SLOT(dev->devfn), $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1379: FILE: arch/i386/pci/irq.c:723:
+  ^I^I^I^Idev->bus->number, PCI_SLOT(dev->devfn), $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1379: FILE: arch/i386/pci/irq.c:723:
+  ^I^I^I^Idev->bus->number, PCI_SLOT(dev->devfn), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1379: FILE: arch/i386/pci/irq.c:723:
+  		    	printk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", 
+  				dev->bus->number, PCI_SLOT(dev->devfn), 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: arch/i386/pci/irq.c:723:
+  ^I^I^I^Idev->bus->number, PCI_SLOT(dev->devfn), $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1380: FILE: arch/i386/pci/irq.c:724:
+  ^I^I^I^IPCI_FUNC(dev->devfn), irq);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1380: FILE: arch/i386/pci/irq.c:724:
+  ^I^I^I^IPCI_FUNC(dev->devfn), irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: arch/i386/pci/irq.c:724:
+  ^I^I^I^IPCI_FUNC(dev->devfn), irq);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1382: FILE: arch/i386/pci/irq.c:726:
+  ^I^I} $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: arch/i386/pci/irq.c:726:
+  ^I^I} $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1382: FILE: arch/i386/pci/irq.c:726:
+  ^I^I} $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: arch/i386/pci/irq.c:726:
+  ^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1383: FILE: arch/i386/pci/irq.c:727:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1401: FILE: arch/i386/pci/irq.c:825:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1404: FILE: arch/i386/pci/irq.c:828:
+	int irq;
+	if ((irq = msi_get_pci_irq_vector(dev)) > 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1404: FILE: arch/i386/pci/irq.c:828:
+	if ((irq = msi_get_pci_irq_vector(dev)) > 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1405: FILE: arch/i386/pci/irq.c:829:
+^I    ^Idev->irq = irq;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1405: FILE: arch/i386/pci/irq.c:829:
+^I    ^Idev->irq = irq;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1406: FILE: arch/i386/pci/irq.c:830:
+^I    ^Iprintk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1406: FILE: arch/i386/pci/irq.c:830:
+^I    ^Iprintk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1406: FILE: arch/i386/pci/irq.c:830:
+^I    ^Iprintk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1406: FILE: arch/i386/pci/irq.c:830:
+	    	printk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: arch/i386/pci/irq.c:831:
+^I^I^Idev->bus->number, PCI_SLOT(dev->devfn), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: arch/i386/pci/irq.c:831:
+	    	printk(KERN_INFO "PCI->MSI vector:(B%d,S%d,F%d)->%d\n", 
+			dev->bus->number, PCI_SLOT(dev->devfn), 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1410: FILE: arch/i386/pci/irq.c:834:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1412: FILE: arch/i386/pci/irq.c:836:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1428: FILE: Documentation/kernel-parameters.txt:269:
+^I^I^ICONFIG_PCI_MSI is set to 'N' or a configured parameter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1435: FILE: Documentation/kernel-parameters.txt:276:
+^I^I^Ioption is ignored if either a configured parameter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1447: FILE: Documentation/kernel-parameters.txt:714:
+^I^I^Iduring kernel built, then he/she can use this append $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1448: FILE: Documentation/kernel-parameters.txt:715:
+^I^I^Ioption to disable MSI system-wide support from PCI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: Documentation/MSI-HOWTO.txt:7:
+This guide describes the basics of Message Signaled Interrupts(MSI), the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1465: FILE: Documentation/MSI-HOWTO.txt:8:
+advantages of using MSI over traditional interrupt mechanisms, and how $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1466: FILE: Documentation/MSI-HOWTO.txt:9:
+to enable your driver to use MSI or MSI-X. Also included is a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1467: FILE: Documentation/MSI-HOWTO.txt:10:
+description of debugging features available and Frequently Asked $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1470: FILE: Documentation/MSI-HOWTO.txt:13:
+2. Copyright 2003 Intel Corporation $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1474: FILE: Documentation/MSI-HOWTO.txt:17:
+Message Signaled Interrupt (MSI), as described in the PCI Local Bus $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1475: FILE: Documentation/MSI-HOWTO.txt:18:
+Specification Revision 2.3 or latest, is an optional feature, and a required $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1476: FILE: Documentation/MSI-HOWTO.txt:19:
+feature for PCI Express devices. MSI enables a device function to request $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1477: FILE: Documentation/MSI-HOWTO.txt:20:
+service by sending an Inbound Memory Write on its PCI bus to the FSB as a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1479: FILE: Documentation/MSI-HOWTO.txt:22:
+form of a Memory Write, all transaction conditions, such as a Retry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1482: FILE: Documentation/MSI-HOWTO.txt:25:
+A PCI device that supports MSI must also support pin IRQ assertion interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1487: FILE: Documentation/MSI-HOWTO.txt:30:
+initial configuration. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1489: FILE: Documentation/MSI-HOWTO.txt:32:
+An MSI capable device function indicates MSI support by implementing $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1490: FILE: Documentation/MSI-HOWTO.txt:33:
+the MSI/MSI-X capability structure in its PCI capability list. The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1491: FILE: Documentation/MSI-HOWTO.txt:34:
+device function may implement both the MSI capability structure and the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1492: FILE: Documentation/MSI-HOWTO.txt:35:
+MSI-X capability structure; however, the bus driver should not enable $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1502: FILE: Documentation/MSI-HOWTO.txt:45:
+register to the target address. The device and its software driver $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1505: FILE: Documentation/MSI-HOWTO.txt:48:
+The MSI-X capability structure is an optional extension to MSI. It uses $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1506: FILE: Documentation/MSI-HOWTO.txt:49:
+an independent and separate capability structure. There are some key $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1507: FILE: Documentation/MSI-HOWTO.txt:50:
+advantages to implementing the MSI-X capability structure over the MSI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1514: FILE: Documentation/MSI-HOWTO.txt:57:
+^I  specified by a table that resides in Memory Space. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1521: FILE: Documentation/MSI-HOWTO.txt:64:
+^I  not supported, then the device driver should provide the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1523: FILE: Documentation/MSI-HOWTO.txt:66:
+^I  MSI when the driver wants it to do so. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1525: FILE: Documentation/MSI-HOWTO.txt:68:
+4. Why use MSI? $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1527: FILE: Documentation/MSI-HOWTO.txt:70:
+As a benefit the simplification of board design, MSI allows board designers to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1531: FILE: Documentation/MSI-HOWTO.txt:74:
+Due to increasing pressure on chipset and processor packages to reduce pin $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1532: FILE: Documentation/MSI-HOWTO.txt:75:
+count, the need for interrupt pins is expected to diminish over time. Devices, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1533: FILE: Documentation/MSI-HOWTO.txt:76:
+due to pin constraints, may implement messages to increase performance. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1536: FILE: Documentation/MSI-HOWTO.txt:79:
+assertion. Using INTx emulation requires interrupt sharing among devices $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1537: FILE: Documentation/MSI-HOWTO.txt:80:
+connected to the same node (PCI bridge) while MSI is unique (non-shared) and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1538: FILE: Documentation/MSI-HOWTO.txt:81:
+does not require BIOS configuration support. As a result, the PCI Express $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1540: FILE: Documentation/MSI-HOWTO.txt:83:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1542: FILE: Documentation/MSI-HOWTO.txt:85:
+which can be configure to target different CPU's to increase scalability. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1546: FILE: Documentation/MSI-HOWTO.txt:89:
+By default, the kernel will not enable MSI/MSI-X on all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1547: FILE: Documentation/MSI-HOWTO.txt:90:
+devices that support this capability because some devices. A kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1552: FILE: Documentation/MSI-HOWTO.txt:95:
+To include MSI support into the kernel requires users to rebuild $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1553: FILE: Documentation/MSI-HOWTO.txt:96:
+the kernel with both the configuration parameters CONFIG_PCI_USE_VECTOR and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1557: FILE: Documentation/MSI-HOWTO.txt:100:
+table. CONFIG_PCI_MSI enables MSI support in the kernel. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1561: FILE: Documentation/MSI-HOWTO.txt:104:
+the device function is capable of supporting multiple vectors. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1563: FILE: Documentation/MSI-HOWTO.txt:106:
+ONE vector is initially allocated to the device function and the vector is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1564: FILE: Documentation/MSI-HOWTO.txt:107:
+stored in the irq field of the device (pci_dev) structure. This default $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1565: FILE: Documentation/MSI-HOWTO.txt:108:
+initialization allows legacy drivers to work without specific modification to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1567: FILE: Documentation/MSI-HOWTO.txt:110:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1570: FILE: Documentation/MSI-HOWTO.txt:113:
+Due to the non-contiguous fashion in vector assignment of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1571: FILE: Documentation/MSI-HOWTO.txt:114:
+existing Linux kernel, this patch does not support multiple $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1572: FILE: Documentation/MSI-HOWTO.txt:115:
+messages regardless of the device function is capable of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1573: FILE: Documentation/MSI-HOWTO.txt:116:
+supporting more than one vector. The bus driver initializes only $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1574: FILE: Documentation/MSI-HOWTO.txt:117:
+entry 0 of this capability. Existing software drivers of this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1575: FILE: Documentation/MSI-HOWTO.txt:118:
+device function will work without changes if no $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1576: FILE: Documentation/MSI-HOWTO.txt:119:
+hardware/software synchronization is required. Otherwise, the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1577: FILE: Documentation/MSI-HOWTO.txt:120:
+device driver should be updated to provide the hardware/software $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1578: FILE: Documentation/MSI-HOWTO.txt:121:
+synchronization due to multiple messages generated from the same $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1579: FILE: Documentation/MSI-HOWTO.txt:122:
+vector might be lost. In other words, once the device function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1580: FILE: Documentation/MSI-HOWTO.txt:123:
+signals Vector A, it cannot signal Vector A again until it is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1581: FILE: Documentation/MSI-HOWTO.txt:124:
+explicitly enabled to do so by its device driver. It is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1582: FILE: Documentation/MSI-HOWTO.txt:125:
+recommended that IHVs should validate their hardware devices $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1583: FILE: Documentation/MSI-HOWTO.txt:126:
+against their existing device drivers once the patch is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1588: FILE: Documentation/MSI-HOWTO.txt:131:
+Both the MSI capability structure and the MSI-X capability $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1589: FILE: Documentation/MSI-HOWTO.txt:132:
+structure share the same above semantics; however, due to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1590: FILE: Documentation/MSI-HOWTO.txt:133:
+ability of the system software to configure each vector of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1591: FILE: Documentation/MSI-HOWTO.txt:134:
+MSI-X capability structure with an independent message address $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1592: FILE: Documentation/MSI-HOWTO.txt:135:
+and message data, the non-contiguous fashion in vector assignment $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1593: FILE: Documentation/MSI-HOWTO.txt:136:
+of the existing Linux kernel has no impact on supporting multiple $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1594: FILE: Documentation/MSI-HOWTO.txt:137:
+messages on an MSI-X capable device functions. By default, as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1595: FILE: Documentation/MSI-HOWTO.txt:138:
+mentioned above, ONE vector should be always allocated to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1596: FILE: Documentation/MSI-HOWTO.txt:139:
+MSI-X capability structure at entry 0. The bus driver does not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1597: FILE: Documentation/MSI-HOWTO.txt:140:
+initialize other entries of the table during device enumeration. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1598: FILE: Documentation/MSI-HOWTO.txt:141:
+Note that the PCI subsystem should have full control of a MSI-X table that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1599: FILE: Documentation/MSI-HOWTO.txt:142:
+resides in Memory Space. The software device driver should not access this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1600: FILE: Documentation/MSI-HOWTO.txt:143:
+table. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1602: FILE: Documentation/MSI-HOWTO.txt:145:
+To request for additional vectors, the device software driver $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1603: FILE: Documentation/MSI-HOWTO.txt:146:
+should call function msix_alloc_vectors(). It is recommended that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1604: FILE: Documentation/MSI-HOWTO.txt:147:
+the software driver should call this function once during the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1605: FILE: Documentation/MSI-HOWTO.txt:148:
+initialization phase of the device driver. With this semantics, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1606: FILE: Documentation/MSI-HOWTO.txt:149:
+the existing software device driver may work with one vector if $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1607: FILE: Documentation/MSI-HOWTO.txt:150:
+no hardware/software synchronization is required. It is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1608: FILE: Documentation/MSI-HOWTO.txt:151:
+recommended that IHVs should validate their hardware devices $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1609: FILE: Documentation/MSI-HOWTO.txt:152:
+against their existing device drivers once the patch is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1612: FILE: Documentation/MSI-HOWTO.txt:155:
+The function msix_alloc_vectors(), once invoked, enables either $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1613: FILE: Documentation/MSI-HOWTO.txt:156:
+all or nothing, depending on the current availability of vector $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1614: FILE: Documentation/MSI-HOWTO.txt:157:
+resources. If no vector resources are available, the device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1615: FILE: Documentation/MSI-HOWTO.txt:158:
+function still works with ONE vector. If the vector resources are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1616: FILE: Documentation/MSI-HOWTO.txt:159:
+available for the number of vectors requested by the driver, this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1617: FILE: Documentation/MSI-HOWTO.txt:160:
+function will reconfigure the MSI-X capability structure of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1618: FILE: Documentation/MSI-HOWTO.txt:161:
+device with additional messages, starting from entry 1. To $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1619: FILE: Documentation/MSI-HOWTO.txt:162:
+emphasize this reason, for example, the device may be capable for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1620: FILE: Documentation/MSI-HOWTO.txt:163:
+supporting the maximum of 32 vectors while its software driver $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1623: FILE: Documentation/MSI-HOWTO.txt:166:
+For each vector, after this successful call, the device driver is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1624: FILE: Documentation/MSI-HOWTO.txt:167:
+responsible to call other functions like request_irq(), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1625: FILE: Documentation/MSI-HOWTO.txt:168:
+enable_irq(), etc. to enable this vector with its corresponding $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1626: FILE: Documentation/MSI-HOWTO.txt:169:
+interrupt service handler. It is the device driver's choice to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1627: FILE: Documentation/MSI-HOWTO.txt:170:
+have all vectors shared the same interrupt service handler or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1628: FILE: Documentation/MSI-HOWTO.txt:171:
+each vector with a unique interrupt service handler. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1630: FILE: Documentation/MSI-HOWTO.txt:173:
+In addition to the function msix_alloc_vectors(), another $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1631: FILE: Documentation/MSI-HOWTO.txt:174:
+function msix_free_vectors() is provided to allow the software $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1632: FILE: Documentation/MSI-HOWTO.txt:175:
+driver to release a number of vectors back to the vector $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1633: FILE: Documentation/MSI-HOWTO.txt:176:
+resources. Once invoked, the PCI subsystem disables (masks) each $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1634: FILE: Documentation/MSI-HOWTO.txt:177:
+vector released. These vectors are no longer valid for the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: Documentation/MSI-HOWTO.txt:183:
+subsystem for additional messages. Depending on the number of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1641: FILE: Documentation/MSI-HOWTO.txt:184:
+vectors available, the PCI subsystem enables either all or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1642: FILE: Documentation/MSI-HOWTO.txt:185:
+nothing. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1645: FILE: Documentation/MSI-HOWTO.txt:188:
+Argument vector is a pointer of integer type. The number of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1647: FILE: Documentation/MSI-HOWTO.txt:190:
+Argument nvec is an integer indicating the number of messages $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1649: FILE: Documentation/MSI-HOWTO.txt:192:
+A return of zero indicates that the number of allocated vector is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1650: FILE: Documentation/MSI-HOWTO.txt:193:
+successfully allocated. Otherwise, indicate resources not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1655: FILE: Documentation/MSI-HOWTO.txt:198:
+This API enables the software driver to inform the PCI subsystem $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1656: FILE: Documentation/MSI-HOWTO.txt:199:
+that it is willing to release a number of vectors back to the MSI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1657: FILE: Documentation/MSI-HOWTO.txt:200:
+resource pool.  Once invoked, the PCI subsystem disables each $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1658: FILE: Documentation/MSI-HOWTO.txt:201:
+MSI-X entry associated with each vector stored in the argument 2. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1659: FILE: Documentation/MSI-HOWTO.txt:202:
+These vectors are no longer valid for the hardware device and its $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1663: FILE: Documentation/MSI-HOWTO.txt:206:
+Argument vector is a pointer of integer type. The number of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1665: FILE: Documentation/MSI-HOWTO.txt:208:
+Argument nvec is an integer indicating the number of messages $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1666: FILE: Documentation/MSI-HOWTO.txt:209:
+released. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1667: FILE: Documentation/MSI-HOWTO.txt:210:
+A return of zero indicates that the number of allocated vectors $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1672: FILE: Documentation/MSI-HOWTO.txt:215:
+There are some devices that may have some bugs in MSI. These devices may break $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1673: FILE: Documentation/MSI-HOWTO.txt:216:
+once MSI support is invoked in the kernel. To debug these devices, the patch $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1674: FILE: Documentation/MSI-HOWTO.txt:217:
+provides two configuration parameters, CONFIG_PCI_MSI and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1675: FILE: Documentation/MSI-HOWTO.txt:218:
+CONFIG_PCI_MSI_ON_SPECIFIC_DEVICES. Both of them are not set by default. When $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1676: FILE: Documentation/MSI-HOWTO.txt:219:
+users set CONFIG_PCI_MSI, CONFIG_PCI_MSI_ON_SPECIFIC_DEVICES is also set by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1678: FILE: Documentation/MSI-HOWTO.txt:221:
+kernel enables MSI on specific devices listed in the boot parameter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1683: FILE: Documentation/MSI-HOWTO.txt:226:
+validated since it may be difficult to debug all the same time. The format $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1684: FILE: Documentation/MSI-HOWTO.txt:227:
+of "device_msi=" is similar to the format of "device_nomsi=" and will be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1687: FILE: Documentation/MSI-HOWTO.txt:230:
+is set. Otherwise, it will be ignored.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1694: FILE: Documentation/MSI-HOWTO.txt:237:
+The patch also provides second debug option, which requires users set the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1695: FILE: Documentation/MSI-HOWTO.txt:238:
+configuration parameter CONFIG_PCI_MSI and clear configuration parameter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1696: FILE: Documentation/MSI-HOWTO.txt:239:
+CONFIG_PCI_MSI_ON_SPECIFIC_DEVICES. After users rebuild the kernel with this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1697: FILE: Documentation/MSI-HOWTO.txt:240:
+combination, the kernel enables MSI on all MSI capable devices by default. The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1700: FILE: Documentation/MSI-HOWTO.txt:243:
+unpredictable behaviors, users must explicitly use the boot parameter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1704: FILE: Documentation/MSI-HOWTO.txt:247:
+The format of this is "device_nomsi=DWORD1,DWORD2,...". Each $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1705: FILE: Documentation/MSI-HOWTO.txt:248:
+DWORD in a list specifies a device function in terms of device ID $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1706: FILE: Documentation/MSI-HOWTO.txt:249:
+(higher word) and vendor ID (lower word). DWORD should be in hex $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1709: FILE: Documentation/MSI-HOWTO.txt:252:
+For example, "device_nomsi=0x80119005,0x10108086" indicates that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1710: FILE: Documentation/MSI-HOWTO.txt:253:
+the bus driver should not enable MSI(X) on two device functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1711: FILE: Documentation/MSI-HOWTO.txt:254:
+(Device ID = 0x8011 & Vendor ID = 0x9005, and Device ID = 0x1010 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1712: FILE: Documentation/MSI-HOWTO.txt:255:
+and Vendor ID = 0x8086). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1713: FILE: Documentation/MSI-HOWTO.txt:256:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1714: FILE: Documentation/MSI-HOWTO.txt:257:
+In addition to the boot parameter "device_nomsi=", another boot $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1715: FILE: Documentation/MSI-HOWTO.txt:258:
+parameter "pci_nomsi" can be used to prohibit the bus driver from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1718: FILE: Documentation/MSI-HOWTO.txt:261:
+At the driver level, the software device driver can tell whether $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1719: FILE: Documentation/MSI-HOWTO.txt:262:
+MSI/MSI-X is enabled by reading the MSI enable bit of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1720: FILE: Documentation/MSI-HOWTO.txt:263:
+MSI/MSI-X capability structure's message control register. If $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1721: FILE: Documentation/MSI-HOWTO.txt:264:
+this bit is zero, the device function is default to IRQ pin $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1722: FILE: Documentation/MSI-HOWTO.txt:265:
+assertion. If this bit is set, the device function is using MSI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1725: FILE: Documentation/MSI-HOWTO.txt:268:
+At the user level, users can use command 'cat /proc/interrupts' $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1726: FILE: Documentation/MSI-HOWTO.txt:269:
+to display the vector allocated for the device and its interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1727: FILE: Documentation/MSI-HOWTO.txt:270:
+mode, as shown below. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1729: FILE: Documentation/MSI-HOWTO.txt:272:
+     CPU0     CPU1    CPU2    CPU3       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1744: FILE: Documentation/MSI-HOWTO.txt:287:
+NMI: 0        0       0       0 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1745: FILE: Documentation/MSI-HOWTO.txt:288:
+LOC: 31446    31448   31448   31448 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1773: FILE: Documentation/MSI-HOWTO.txt:316:
+target address set as 0xfeexxxxx, as conformed to PCI specification 2.3 or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1806: FILE: drivers/acpi/pci_irq.c:235:
+int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1814: FILE: drivers/acpi/pci_irq.c:332:
+#ifdef CONFIG_PCI_MSI^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1815: FILE: drivers/acpi/pci_irq.c:333:
+	if ((irq = msi_get_pci_irq_vector(dev)) > 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1816: FILE: drivers/acpi/pci_irq.c:334:
+^I    ^Idev->irq = irq;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1816: FILE: drivers/acpi/pci_irq.c:334:
+^I    ^Idev->irq = irq;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1817: FILE: drivers/acpi/pci_irq.c:335:
+^I    ^Iprintk(KERN_INFO "PCI->MSI VEC transform:(B%d,I%d,P%d)->%d\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1817: FILE: drivers/acpi/pci_irq.c:335:
+^I    ^Iprintk(KERN_INFO "PCI->MSI VEC transform:(B%d,I%d,P%d)->%d\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1817: FILE: drivers/acpi/pci_irq.c:335:
+^I    ^Iprintk(KERN_INFO "PCI->MSI VEC transform:(B%d,I%d,P%d)->%d\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1817: FILE: drivers/acpi/pci_irq.c:335:
+	    	printk(KERN_INFO "PCI->MSI VEC transform:(B%d,I%d,P%d)->%d\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1818: FILE: drivers/acpi/pci_irq.c:336:
+	    	printk(KERN_INFO "PCI->MSI VEC transform:(B%d,I%d,P%d)->%d\n", 
+			dev->bus->number, PCI_SLOT(dev->devfn), pin, irq);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1822: FILE: drivers/acpi/pci_irq.c:340:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1834: FILE: drivers/pci/remove.c:18:
+ ^Imsi_remove_pci_irq_vectors(dev);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1834: FILE: drivers/pci/remove.c:18:
+ ^Imsi_remove_pci_irq_vectors(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1834: FILE: drivers/pci/remove.c:18:
+ ^Imsi_remove_pci_irq_vectors(dev);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1836: FILE: drivers/pci/remove.c:20:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1836: FILE: drivers/pci/remove.c:20:
+ $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1849: FILE: include/asm-i386/hw_irq.h:65:
+extern struct msi_desc* msi_desc[NR_IRQS];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1850: FILE: include/asm-i386/hw_irq.h:66:
+extern int msi_get_pci_irq_vector(struct pci_dev *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1851: FILE: include/asm-i386/hw_irq.h:67:
+extern int msix_alloc_vectors(struct pci_dev *dev, int *vector, int nvec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1852: FILE: include/asm-i386/hw_irq.h:68:
+extern int msix_free_vectors(struct pci_dev *dev, int *vector, int nvec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1853: FILE: include/asm-i386/hw_irq.h:69:
+extern void msi_remove_pci_irq_vectors(struct pci_dev *dev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1897: FILE: include/linux/pci_msi.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1909: FILE: include/linux/pci_msi.h:13:
+#define NR_RESERVED_VECTORS 3 /*FIRST_DEVICE_VECTOR,FIRST_SYSTEM_VECTOR,0x80 */^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1912: FILE: include/linux/pci_msi.h:16:
+extern void restore_ioapic_irq_handler(int irq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1913: FILE: include/linux/pci_msi.h:17:
+extern int acpi_pci_irq_lookup (struct pci_bus *bus, int device, int pin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1913: FILE: include/linux/pci_msi.h:17:
+extern int acpi_pci_irq_lookup (struct pci_bus *bus, int device, int pin);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1932: FILE: include/linux/pci_msi.h:36:
+#define PCI_MSIX_FLAGS_ENABLE		(1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1934: FILE: include/linux/pci_msi.h:38:
+#define PCI_MSIX_FLAGS_BITMASK		(1 << 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#1938: FILE: include/linux/pci_msi.h:42:
+#define msi_control_reg(base)		(base + PCI_MSI_FLAGS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#1939: FILE: include/linux/pci_msi.h:43:
+#define msi_lower_address_reg(base)	(base + PCI_MSI_ADDRESS_LO)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#1940: FILE: include/linux/pci_msi.h:44:
+#define msi_upper_address_reg(base)	(base + PCI_MSI_ADDRESS_HI)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#1941: FILE: include/linux/pci_msi.h:45:
+#define msi_data_reg(base, is64bit)	\
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#1941: FILE: include/linux/pci_msi.h:45:
+#define msi_data_reg(base, is64bit)	\
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is64bit' may be better as '(is64bit)' to avoid precedence issues
#1941: FILE: include/linux/pci_msi.h:45:
+#define msi_data_reg(base, is64bit)	\
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1942: FILE: include/linux/pci_msi.h:46:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1942: FILE: include/linux/pci_msi.h:46:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )
 	                                              ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1942: FILE: include/linux/pci_msi.h:46:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1942: FILE: include/linux/pci_msi.h:46:
+	( (is64bit == 1) ? base+PCI_MSI_DATA_64 : base+PCI_MSI_DATA_32 )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#1943: FILE: include/linux/pci_msi.h:47:
+#define msi_mask_bits_reg(base, is64bit) \
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#1943: FILE: include/linux/pci_msi.h:47:
+#define msi_mask_bits_reg(base, is64bit) \
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'is64bit' may be better as '(is64bit)' to avoid precedence issues
#1943: FILE: include/linux/pci_msi.h:47:
+#define msi_mask_bits_reg(base, is64bit) \
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1944: FILE: include/linux/pci_msi.h:48:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1944: FILE: include/linux/pci_msi.h:48:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1944: FILE: include/linux/pci_msi.h:48:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)
 	                                                                ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1944: FILE: include/linux/pci_msi.h:48:
+	( (is64bit == 1) ? base+PCI_MSI_MASK_BIT : base+PCI_MSI_MASK_BIT-4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1945: FILE: include/linux/pci_msi.h:49:
+#define msi_disable(control)		(control & ~PCI_MSI_FLAGS_ENABLE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1946: FILE: include/linux/pci_msi.h:50:
+#define multi_msi_capable(control) \
+	(1 << ((control & PCI_MSI_FLAGS_QMASK) >> 1))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1948: FILE: include/linux/pci_msi.h:52:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1948: FILE: include/linux/pci_msi.h:52:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'num' may be better as '(num)' to avoid precedence issues
#1948: FILE: include/linux/pci_msi.h:52:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1948: FILE: include/linux/pci_msi.h:52:
+#define multi_msi_enable(control, num) \
+	control |= (((num >> 1) << 4) & PCI_MSI_FLAGS_QSIZE);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1950: FILE: include/linux/pci_msi.h:54:
+#define is_64bit_address(control)^I(control & PCI_MSI_FLAGS_64BIT)^I$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1950: FILE: include/linux/pci_msi.h:54:
+#define is_64bit_address(control)	(control & PCI_MSI_FLAGS_64BIT)	

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1951: FILE: include/linux/pci_msi.h:55:
+#define is_mask_bit_support(control)	(control & PCI_MSI_FLAGS_MASKBIT)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1952: FILE: include/linux/pci_msi.h:56:
+#define msi_enable(control, num) multi_msi_enable(control, num); \
+	control |= PCI_MSI_FLAGS_ENABLE

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'control' - possible side-effects?
#1952: FILE: include/linux/pci_msi.h:56:
+#define msi_enable(control, num) multi_msi_enable(control, num); \
+	control |= PCI_MSI_FLAGS_ENABLE

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1954: FILE: include/linux/pci_msi.h:58:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1954: FILE: include/linux/pci_msi.h:58:
+ $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#1956: FILE: include/linux/pci_msi.h:60:
+#define msix_table_offset_reg(base)	(base + 0x04)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#1957: FILE: include/linux/pci_msi.h:61:
+#define msix_pba_offset_reg(base)	(base + 0x08)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1958: FILE: include/linux/pci_msi.h:62:
+#define msix_enable(control)^I ^Icontrol |= PCI_MSIX_FLAGS_ENABLE$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1958: FILE: include/linux/pci_msi.h:62:
+#define msix_enable(control)	 	control |= PCI_MSIX_FLAGS_ENABLE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1958: FILE: include/linux/pci_msi.h:62:
+#define msix_enable(control)	 	control |= PCI_MSIX_FLAGS_ENABLE

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1959: FILE: include/linux/pci_msi.h:63:
+#define msix_disable(control)^I ^I(control & ~PCI_MSIX_FLAGS_ENABLE)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1959: FILE: include/linux/pci_msi.h:63:
+#define msix_disable(control)	 	(control & ~PCI_MSIX_FLAGS_ENABLE)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1960: FILE: include/linux/pci_msi.h:64:
+#define msix_table_size(control) ^I((control & PCI_MSIX_FLAGS_QSIZE)+1)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1960: FILE: include/linux/pci_msi.h:64:
+#define msix_table_size(control) 	((control & PCI_MSIX_FLAGS_QSIZE)+1)
                                  	                                 ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'control' may be better as '(control)' to avoid precedence issues
#1960: FILE: include/linux/pci_msi.h:64:
+#define msix_table_size(control) 	((control & PCI_MSIX_FLAGS_QSIZE)+1)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1962: FILE: include/linux/pci_msi.h:66:
+#define msix_unmask(address)^I ^I(address & ~PCI_MSIX_FLAGS_BITMASK)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#1962: FILE: include/linux/pci_msi.h:66:
+#define msix_unmask(address)	 	(address & ~PCI_MSIX_FLAGS_BITMASK)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1963: FILE: include/linux/pci_msi.h:67:
+#define msix_mask(address)^I^I(address | PCI_MSIX_FLAGS_BITMASK)  $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#1963: FILE: include/linux/pci_msi.h:67:
+#define msix_mask(address)		(address | PCI_MSIX_FLAGS_BITMASK)  

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1964: FILE: include/linux/pci_msi.h:68:
+#define msix_is_pending(address) ^I(address & PCI_MSIX_FLAGS_PENDMASK)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'address' may be better as '(address)' to avoid precedence issues
#1964: FILE: include/linux/pci_msi.h:68:
+#define msix_is_pending(address) 	(address & PCI_MSIX_FLAGS_PENDMASK)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1966: FILE: include/linux/pci_msi.h:70:
+#define _DEFINE_DBG_BUFFER	char __dbg_str_buf[256];

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000001' could be '0x00000001U'
#1967: FILE: include/linux/pci_msi.h:71:
+#define _DBG_K_TRACE_ENTRY	((unsigned int)0x00000001)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000002' could be '0x00000002U'
#1968: FILE: include/linux/pci_msi.h:72:
+#define _DBG_K_TRACE_EXIT	((unsigned int)0x00000002)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000004' could be '0x00000004U'
#1969: FILE: include/linux/pci_msi.h:73:
+#define _DBG_K_INFO		((unsigned int)0x00000004)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned int)0x00000008' could be '0x00000008U'
#1970: FILE: include/linux/pci_msi.h:74:
+#define _DBG_K_ERROR		((unsigned int)0x00000008)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1974: FILE: include/linux/pci_msi.h:78:
+#define _DBG_PRINT( dbg_flags, args... )		\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1974: FILE: include/linux/pci_msi.h:78:
+#define _DBG_PRINT( dbg_flags, args... )		\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1974: FILE: include/linux/pci_msi.h:78:
+#define _DBG_PRINT( dbg_flags, args... )		\
+if ( _DEBUG_LEVEL & (dbg_flags) )			\
+{							\
+	int len;					\
+	len = sprintf(__dbg_str_buf, "%s:%d: %s ", 	\
+		__FILE__, __LINE__, __FUNCTION__ ); 	\
+	sprintf(__dbg_str_buf + len, args);		\
+	printk(KERN_INFO "%s\n", __dbg_str_buf);	\
+}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1975: FILE: include/linux/pci_msi.h:79:
+if ( _DEBUG_LEVEL & (dbg_flags) )			\
+{							\

ERROR:SPACING: space prohibited after that open parenthesis '('
#1975: FILE: include/linux/pci_msi.h:79:
+if ( _DEBUG_LEVEL & (dbg_flags) )			\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1975: FILE: include/linux/pci_msi.h:79:
+if ( _DEBUG_LEVEL & (dbg_flags) )			\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1978: FILE: include/linux/pci_msi.h:82:
+^Ilen = sprintf(__dbg_str_buf, "%s:%d: %s ", ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1979: FILE: include/linux/pci_msi.h:83:
+^I^I__FILE__, __LINE__, __FUNCTION__ ); ^I\$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1979: FILE: include/linux/pci_msi.h:83:
+		__FILE__, __LINE__, __FUNCTION__ ); 	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1979: FILE: include/linux/pci_msi.h:83:
+		__FILE__, __LINE__, __FUNCTION__ ); 	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1981: FILE: include/linux/pci_msi.h:85:
+	printk(KERN_INFO "%s\n", __dbg_str_buf);	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1984: FILE: include/linux/pci_msi.h:88:
+#define MSI_FUNCTION_TRACE_ENTER	\
+	_DBG_PRINT (_DBG_K_TRACE_ENTRY, "%s", "[Entry]");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1984: FILE: include/linux/pci_msi.h:88:
+#define MSI_FUNCTION_TRACE_ENTER	\
+	_DBG_PRINT (_DBG_K_TRACE_ENTRY, "%s", "[Entry]");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1985: FILE: include/linux/pci_msi.h:89:
+	_DBG_PRINT (_DBG_K_TRACE_ENTRY, "%s", "[Entry]");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1986: FILE: include/linux/pci_msi.h:90:
+#define MSI_FUNCTION_TRACE_EXIT		\
+	_DBG_PRINT (_DBG_K_TRACE_EXIT, "%s", "[Entry]");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1986: FILE: include/linux/pci_msi.h:90:
+#define MSI_FUNCTION_TRACE_EXIT		\
+	_DBG_PRINT (_DBG_K_TRACE_EXIT, "%s", "[Entry]");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1987: FILE: include/linux/pci_msi.h:91:
+	_DBG_PRINT (_DBG_K_TRACE_EXIT, "%s", "[Entry]");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1988: FILE: include/linux/pci_msi.h:92:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1989: FILE: include/linux/pci_msi.h:93:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1997: FILE: include/linux/pci_msi.h:101:
+struct msg_data {^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1998: FILE: include/linux/pci_msi.h:102:
+^I__u32^Ivector^I:  8,^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2000: FILE: include/linux/pci_msi.h:104:
+^I^I^I ^I^I001b: lowest priority$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2000: FILE: include/linux/pci_msi.h:104:
+^I^I^I ^I^I001b: lowest priority$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2000: FILE: include/linux/pci_msi.h:104:
+	delivery_mode	:  3,	/*	000b: FIXED
+			 		001b: lowest priority

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'ExtINT' may be misspelled - perhaps 'Extinct'?
#2001: FILE: include/linux/pci_msi.h:105:
+			 	 	111b: ExtINT */	
 			 	 	      ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2001: FILE: include/linux/pci_msi.h:105:
+^I^I^I ^I ^I111b: ExtINT */^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2001: FILE: include/linux/pci_msi.h:105:
+^I^I^I ^I ^I111b: ExtINT */^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2001: FILE: include/linux/pci_msi.h:105:
+^I^I^I ^I ^I111b: ExtINT */^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2001: FILE: include/linux/pci_msi.h:105:
+			 	 	111b: ExtINT */	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2002: FILE: include/linux/pci_msi.h:106:
+^Idest_mode^I:  1,^I/* 0: physical, 1: logical */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2004: FILE: include/linux/pci_msi.h:108:
+^Itrigger^I^I:  1,^I/* 0: edge, 1: level */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2005: FILE: include/linux/pci_msi.h:109:
+^Idelivery_status^I:  1,^I/* 0: idle, 1: pending */^I$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2007: FILE: include/linux/pci_msi.h:111:
+} __attribute__ ((packed));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2012: FILE: include/linux/pci_msi.h:116:
+^I^I^Ireserved_1^I^I:  2,^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2013: FILE: include/linux/pci_msi.h:117:
+^I^I^Idest_mode^I^I:  1,^I/* 0: physical, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2014: FILE: include/linux/pci_msi.h:118:
+^I^I^I^I^I^I^I   1: logical */^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2014: FILE: include/linux/pci_msi.h:118:
+			dest_mode		:  1,	/* 0: physical, 
+							   1: logical */	

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2014: FILE: include/linux/pci_msi.h:118:
+							   1: logical */	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2015: FILE: include/linux/pci_msi.h:119:
+^I^I^Iredirection_hint        :  1,  ^I/* 0: to FSB, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2015: FILE: include/linux/pci_msi.h:119:
+^I^I^Iredirection_hint        :  1,  ^I/* 0: to FSB, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2016: FILE: include/linux/pci_msi.h:120:
+^I^I^I^I^I^I^I   1: redirection */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2016: FILE: include/linux/pci_msi.h:120:
+			redirection_hint        :  1,  	/* 0: to FSB, 
+							   1: redirection */ 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2016: FILE: include/linux/pci_msi.h:120:
+							   1: redirection */ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2017: FILE: include/linux/pci_msi.h:121:
+^I^I^Iext_dest_id^I^I:  8,   /* Extended Dest. ID */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2018: FILE: include/linux/pci_msi.h:122:
+ ^I^I^Idest_id^I^I^I:  8,^I/* Destination ID */^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2018: FILE: include/linux/pci_msi.h:122:
+ ^I^I^Idest_id^I^I^I:  8,^I/* Destination ID */^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2018: FILE: include/linux/pci_msi.h:122:
+ ^I^I^Idest_id^I^I^I:  8,^I/* Destination ID */^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2018: FILE: include/linux/pci_msi.h:122:
+ ^I^I^Idest_id^I^I^I:  8,^I/* Destination ID */^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2020: FILE: include/linux/pci_msi.h:124:
+      ^I}u;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2020: FILE: include/linux/pci_msi.h:124:
+      ^I}u;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2020: FILE: include/linux/pci_msi.h:124:
+      ^I}u;$

ERROR:SPACING: space required after that close brace '}'
#2020: FILE: include/linux/pci_msi.h:124:
+      	}u;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2021: FILE: include/linux/pci_msi.h:125:
+       ^I__u32  value;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2021: FILE: include/linux/pci_msi.h:125:
+       ^I__u32  value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2021: FILE: include/linux/pci_msi.h:125:
+       ^I__u32  value;$

ERROR:SPACING: space required after that close brace '}'
#2022: FILE: include/linux/pci_msi.h:126:
+	}lo_address;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2023: FILE: include/linux/pci_msi.h:127:
+^I__u32 ^Ihi_address;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2024: FILE: include/linux/pci_msi.h:128:
+} __attribute__ ((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2028: FILE: include/linux/pci_msi.h:132:
+^I^I__u32^Itype^I: 5, /* {0: unused, 5h:MSI, 11h:MSI-X} ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2031: FILE: include/linux/pci_msi.h:135:
+^I^I^Ientry_nr: 8, /* specific enabled entry ^I^I*/$

ERROR:SPACING: space required after that close brace '}'
#2033: FILE: include/linux/pci_msi.h:137:
+	}msi_attrib;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347385.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 466 errors, 139 warnings, 87 checks, 1881 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347385.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
