WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > > Why is 2.2.18 proc_fs.c different than both 2.2.17 and 2.4.0? Cox, would

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#91: FILE: include/linux/proc_fs.h:307:
**start,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#98: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#98: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#98: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: include/linux/proc_fs.h:436:
+extern struct proc_dir_entry *proc_symlink(const char *,
+		struct proc_dir_entry *, const char *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#100: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct
                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#100: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct
 roc_dir_entry *' should also have an identifier name
#100: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: include/linux/proc_fs.h:444:
+^Imode_t mode, struct proc_dir_entry *base, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: include/linux/proc_fs.h:445:
+	read_proc_t *read_proc, void * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#117: FILE: include/linux/proc_fs.h:447:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: include/linux/proc_fs.h:447:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: include/linux/proc_fs.h:447:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#118: FILE: include/linux/proc_fs.h:448:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
+	if (res) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#119: FILE: include/linux/proc_fs.h:449:
+		res->read_proc=read_proc;
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#120: FILE: include/linux/proc_fs.h:450:
+		res->data=data;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#129: FILE: include/linux/proc_fs.h:458:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: include/linux/proc_fs.h:458:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: include/linux/proc_fs.h:458:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: include/linux/proc_fs.h:459:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
+	if (res) res->get_info=get_info;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#130: FILE: include/linux/proc_fs.h:459:
+	if (res) res->get_info=get_info;
 	                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#130: FILE: include/linux/proc_fs.h:459:
+	if (res) res->get_info=get_info;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: include/linux/proc_fs.h:491:
+^Imode_t mode, struct proc_dir_entry *base, ^I^I^I^I^I^I^I^I^I^I^I^I^I$

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#148: FILE: include/linux/proc_fs.h:491:
+	mode_t mode, struct proc_dir_entry *base, 													

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: include/linux/proc_fs.h:491:
+^Imode_t mode, struct proc_dir_entry *base, ^I^I^I^I^I^I^I^I^I^I^I^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: include/linux/proc_fs.h:493:
+	void * data) { return NULL; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: include/linux/proc_fs.h:499:
+extern inline struct proc_dir_entry *proc_symlink(const char *name,
+		struct proc_dir_entry *parent,char *dest) {return NULL;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/linux/proc_fs.h:499:
+		struct proc_dir_entry *parent,char *dest) {return NULL;}
 		                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#157: FILE: include/linux/proc_fs.h:499:
+		struct proc_dir_entry *parent,char *dest) {return NULL;}
 		                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/linux/proc_fs.h:501:
+extern inline struct proc_dir_entry *proc_mkdir(const char *name,
+	struct proc_dir_entry *parent) {return NULL;}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#159: FILE: include/linux/proc_fs.h:501:
+	struct proc_dir_entry *parent) {return NULL;}
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: fs/proc/generic.c:250:
+struct proc_dir_entry *proc_symlink(const char *name,
+		struct proc_dir_entry *parent, const char *dest)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ent)...) over kmalloc(sizeof(struct proc_dir_entry)...)
#191: FILE: fs/proc/generic.c:260:
+	ent = kmalloc(sizeof(struct proc_dir_entry) + len + 1, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#195: FILE: fs/proc/generic.c:264:
+	memcpy(((char *) ent) + sizeof(*ent), fn, len + 1);

CHECK:SPACING: No space is necessary after a cast
#196: FILE: fs/proc/generic.c:265:
+	ent->name = ((char *) ent) + sizeof(*ent);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#199: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#199: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#199: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;
 	                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUGO|S_IXUGO' are not preferred. Consider using octal permissions '0777'.
#199: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#200: FILE: fs/proc/generic.c:269:
+	ent->data = kmalloc((ent->size=strlen(dest))+1, GFP_KERNEL);
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#200: FILE: fs/proc/generic.c:269:
+	ent->data = kmalloc((ent->size=strlen(dest))+1, GFP_KERNEL);
 	                                            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#205: FILE: fs/proc/generic.c:274:
+	strcpy((char*)ent->data,dest);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: fs/proc/generic.c:274:
+	strcpy((char*)ent->data,dest);
 	                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/proc/generic.c:277:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ent)...) over kmalloc(sizeof(struct proc_dir_entry)...)
#224: FILE: fs/proc/generic.c:292:
+	ent = kmalloc(sizeof(struct proc_dir_entry) + len + 1, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#228: FILE: fs/proc/generic.c:296:
+	memcpy(((char *) ent) + sizeof(*ent), fn, len + 1);

CHECK:SPACING: No space is necessary after a cast
#229: FILE: fs/proc/generic.c:297:
+	ent->name = ((char *) ent) + sizeof(*ent);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#232: FILE: fs/proc/generic.c:300:
+	ent->mode = S_IFDIR | S_IRUGO | S_IXUGO;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: fs/proc/generic.c:303:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#250: FILE: fs/proc/openpromfs.c:1:
+/* $Id: openpromfs.c,v 1.1.1.1 2000/12/08 20:08:59 zapman Exp $

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#250: FILE: fs/proc/openpromfs.c:1:
+/* $Id: openpromfs.c,v 1.1.1.1 2000/12/08 20:08:59 zapman Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#264: FILE: fs/proc/procfs_syms.c:23:
+EXPORT_SYMBOL(proc_symlink);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#322: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#322: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#322: FILE: include/linux/proc_fs.h:435:
+extern struct proc_dir_entry *proc_symlink(const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: include/linux/proc_fs.h:436:
+extern struct proc_dir_entry *proc_symlink(const char *,
+		struct proc_dir_entry *, const char *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#324: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);
                                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#324: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#324: FILE: include/linux/proc_fs.h:437:
+extern struct proc_dir_entry *proc_mkdir(const char *,struct proc_dir_entry *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: include/linux/proc_fs.h:444:
+^Imode_t mode, struct proc_dir_entry *base, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: include/linux/proc_fs.h:444:
+extern inline struct proc_dir_entry *create_proc_read_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#336: FILE: include/linux/proc_fs.h:445:
+	read_proc_t *read_proc, void * data)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#338: FILE: include/linux/proc_fs.h:447:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/linux/proc_fs.h:447:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/linux/proc_fs.h:447:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: include/linux/proc_fs.h:448:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
+	if (res) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#340: FILE: include/linux/proc_fs.h:449:
+		res->read_proc=read_proc;
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#341: FILE: include/linux/proc_fs.h:450:
+		res->data=data;
 		         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: include/linux/proc_fs.h:456:
+extern inline struct proc_dir_entry *create_proc_info_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, get_info_t *get_info)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#349: FILE: include/linux/proc_fs.h:458:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: include/linux/proc_fs.h:458:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: include/linux/proc_fs.h:458:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: include/linux/proc_fs.h:459:
+	struct proc_dir_entry *res=create_proc_entry(name,mode,base);
+	if (res) res->get_info=get_info;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#350: FILE: include/linux/proc_fs.h:459:
+	if (res) res->get_info=get_info;
 	                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#350: FILE: include/linux/proc_fs.h:459:
+	if (res) res->get_info=get_info;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: include/linux/proc_fs.h:491:
+^Imode_t mode, struct proc_dir_entry *base, ^I^I^I^I^I^I^I^I^I^I^I^I^I$

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#367: FILE: include/linux/proc_fs.h:491:
+	mode_t mode, struct proc_dir_entry *base, 													

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#367: FILE: include/linux/proc_fs.h:491:
+^Imode_t mode, struct proc_dir_entry *base, ^I^I^I^I^I^I^I^I^I^I^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: include/linux/proc_fs.h:491:
+extern inline struct proc_dir_entry *create_proc_read_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, 													

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#369: FILE: include/linux/proc_fs.h:493:
+	void * data) { return NULL; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: include/linux/proc_fs.h:495:
+extern inline struct proc_dir_entry *create_proc_info_entry(const char *name,
+	mode_t mode, struct proc_dir_entry *base, get_info_t *get_info)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: include/linux/proc_fs.h:499:
+extern inline struct proc_dir_entry *proc_symlink(const char *name,
+		struct proc_dir_entry *parent,char *dest) {return NULL;}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#375: FILE: include/linux/proc_fs.h:499:
+		struct proc_dir_entry *parent,char *dest) {return NULL;}
 		                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#375: FILE: include/linux/proc_fs.h:499:
+		struct proc_dir_entry *parent,char *dest) {return NULL;}
 		                                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: include/linux/proc_fs.h:501:
+extern inline struct proc_dir_entry *proc_mkdir(const char *name,
+	struct proc_dir_entry *parent) {return NULL;}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#377: FILE: include/linux/proc_fs.h:501:
+	struct proc_dir_entry *parent) {return NULL;}
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: fs/proc/generic.c:250:
+struct proc_dir_entry *proc_symlink(const char *name,
+		struct proc_dir_entry *parent, const char *dest)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ent)...) over kmalloc(sizeof(struct proc_dir_entry)...)
#407: FILE: fs/proc/generic.c:260:
+	ent = kmalloc(sizeof(struct proc_dir_entry) + len + 1, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#411: FILE: fs/proc/generic.c:264:
+	memcpy(((char *) ent) + sizeof(*ent), fn, len + 1);

CHECK:SPACING: No space is necessary after a cast
#412: FILE: fs/proc/generic.c:265:
+	ent->name = ((char *) ent) + sizeof(*ent);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#415: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#415: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#415: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;
 	                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUGO|S_IXUGO' are not preferred. Consider using octal permissions '0777'.
#415: FILE: fs/proc/generic.c:268:
+	ent->mode = S_IFLNK|S_IRUGO|S_IWUGO|S_IXUGO;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#416: FILE: fs/proc/generic.c:269:
+	ent->data = kmalloc((ent->size=strlen(dest))+1, GFP_KERNEL);
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#416: FILE: fs/proc/generic.c:269:
+	ent->data = kmalloc((ent->size=strlen(dest))+1, GFP_KERNEL);
 	                                            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#421: FILE: fs/proc/generic.c:274:
+	strcpy((char*)ent->data,dest);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: fs/proc/generic.c:274:
+	strcpy((char*)ent->data,dest);
 	                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: fs/proc/generic.c:277:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ent)...) over kmalloc(sizeof(struct proc_dir_entry)...)
#439: FILE: fs/proc/generic.c:292:
+	ent = kmalloc(sizeof(struct proc_dir_entry) + len + 1, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#443: FILE: fs/proc/generic.c:296:
+	memcpy(((char *) ent) + sizeof(*ent), fn, len + 1);

CHECK:SPACING: No space is necessary after a cast
#444: FILE: fs/proc/generic.c:297:
+	ent->name = ((char *) ent) + sizeof(*ent);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#447: FILE: fs/proc/generic.c:300:
+	ent->mode = S_IFDIR | S_IRUGO | S_IXUGO;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: fs/proc/generic.c:303:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#463: FILE: fs/proc/openpromfs.c:1:
+/* $Id: openpromfs.c,v 1.1.1.1 2000/12/08 20:08:59 zapman Exp $

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#463: FILE: fs/proc/openpromfs.c:1:
+/* $Id: openpromfs.c,v 1.1.1.1 2000/12/08 20:08:59 zapman Exp $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#475: FILE: fs/proc/procfs_syms.c:23:
+EXPORT_SYMBOL(proc_symlink);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000562402.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 29 warnings, 36 checks, 379 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000562402.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
