WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#111: FILE: fs/proc/generic.c:313:
+	while (PROC_BITS_PER_MAP == map->used && map->next) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: fs/proc/generic.c:319:
+	if (map_idx == PROC_MAX_BITMAPS-1 && map->used == PROC_BITS_PER_MAP) {
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#118: FILE: fs/proc/generic.c:320:
+		printk(KERN_WARNING "procfs ran out of inodes!\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#125: FILE: fs/proc/generic.c:325:
+	if (PROC_BITS_PER_MAP == map->used) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#125: FILE: fs/proc/generic.c:325:
+	if (PROC_BITS_PER_MAP == map->used) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#126: FILE: fs/proc/generic.c:326:
+		pr_debug("%s: extending inode map\n", __FUNCTION__);

CHECK:BRACES: Unbalanced braces around else statement
#134: FILE: fs/proc/generic.c:334:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#137: FILE: fs/proc/generic.c:337:
+	BUG_ON(bitno < 0 || bitno >= PROC_BITS_PER_MAP);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#145: FILE: fs/proc/generic.c:345:
+		 __FUNCTION__, bitno, map_idx, ino);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#147: FILE: fs/proc/generic.c:347:
+	if (PROC_BITS_PER_MAP == map->used) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#147: FILE: fs/proc/generic.c:347:
+	if (PROC_BITS_PER_MAP == map->used) {
+		pr_debug("%s: map #%d has filled\n", __FUNCTION__, map_idx);
+	}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#148: FILE: fs/proc/generic.c:348:
+		pr_debug("%s: map #%d has filled\n", __FUNCTION__, map_idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#164: FILE: fs/proc/generic.c:362:
+	BUG_ON(bitno < 0 || bitno >= PROC_BITS_PER_MAP);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#169: FILE: fs/proc/generic.c:367:
+		 __FUNCTION__, inode, bitno, map_idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: fs/proc/generic.c:375:
+	BUG_ON(map->used < 0 || map->used > PROC_BITS_PER_MAP);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/proc/inode.c:184:
+struct inode * proc_get_inode(struct super_block * sb, unsigned long ino,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/proc/inode.c:184:
+struct inode * proc_get_inode(struct super_block * sb, unsigned long ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: fs/proc/inode.c:185:
+struct inode * proc_get_inode(struct super_block * sb, unsigned long ino,
 				struct proc_dir_entry * de)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: include/linux/proc_fs.h:100:
+extern struct inode * proc_get_inode(struct super_block *, unsigned long, struct proc_dir_entry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/proc_fs.h:100:
+extern struct inode * proc_get_inode(struct super_block *, unsigned long, struct proc_dir_entry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#280: FILE: include/linux/proc_fs.h:100:
+extern struct inode * proc_get_inode(struct super_block *, unsigned long, struct proc_dir_entry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#280: FILE: include/linux/proc_fs.h:100:
+extern struct inode * proc_get_inode(struct super_block *, unsigned long, struct proc_dir_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#280: FILE: include/linux/proc_fs.h:100:
+extern struct inode * proc_get_inode(struct super_block *, unsigned long, struct proc_dir_entry *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 15 warnings, 5 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
