ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#79: 
--- a/fs/buffer.c	Tue Jul 31 14:43:40 2001

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: fs/buffer.c:101:
+int block_write_anon_page(struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#85: FILE: fs/buffer.c:101:
+int block_write_anon_page(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited before semicolon
#86: FILE: fs/buffer.c:102:
+static int dirty_list_writepage(struct page *page, struct buffer_head *bh) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#87: FILE: fs/buffer.c:103:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;
                                                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: fs/buffer.c:103:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#87: FILE: fs/buffer.c:103:
+static void end_buffer_io_async(struct buffer_head * bh, int uptodate) ;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#89: FILE: fs/buffer.c:105:
+static struct address_space_operations anon_space_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#90: FILE: fs/buffer.c:106:
+	writepage: block_write_anon_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#91: FILE: fs/buffer.c:107:
+	sync_page: block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#91: FILE: fs/buffer.c:107:
+	sync_page: block_sync_page,

WARNING:SPACING: space prohibited before semicolon
#92: FILE: fs/buffer.c:108:
+} ;

WARNING:SPACING: space prohibited before semicolon
#99: FILE: fs/buffer.c:115:
+} ;

WARNING:SPACING: space prohibited before semicolon
#134: FILE: fs/buffer.c:202:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#156: FILE: fs/buffer.c:215:
+		page = bh->b_page ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#162: FILE: fs/buffer.c:218:
+		/* if we wrote the buffer the last time through, it
+		** might not have been refiled yet.  Without this check,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited before semicolon
#167: FILE: fs/buffer.c:223:
+			__refile_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#168: FILE: fs/buffer.c:224:
+			continue ;

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#172: FILE: fs/buffer.c:226:
+		if (TryLockPage(page)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#172: FILE: fs/buffer.c:226:
+		if (TryLockPage(page)) {
+			continue ;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#173: FILE: fs/buffer.c:227:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#175: FILE: fs/buffer.c:229:
+		page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#176: FILE: fs/buffer.c:230:
+		get_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#178: FILE: fs/buffer.c:232:
+		dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#179: FILE: fs/buffer.c:233:
+		put_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#180: FILE: fs/buffer.c:234:
+		page_cache_release(page) ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#196: FILE: fs/buffer.c:273:
+/* just for use with anon pages, or pages that don't provide their own
+** writepage func.  We just want to write bh, not the whole page, so we

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#199: FILE: fs/buffer.c:276:
+static int __dirty_list_writepage(struct page *page, struct buffer_head *bh) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#200: FILE: fs/buffer.c:277:
+	int other_dirty = 0 ;

WARNING:SPACING: space prohibited before semicolon
#201: FILE: fs/buffer.c:278:
+	struct buffer_head *cur ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#204: FILE: fs/buffer.c:281:
+	/* check for other dirty buffers on this page.  If there are none,
+	** clear the page dirty bit

WARNING:SPACING: space prohibited before semicolon
#206: FILE: fs/buffer.c:283:
+	cur = bh->b_this_page ;

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: fs/buffer.c:284:
+	while(cur != bh) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/buffer.c:285:
+^I^Iother_dirty += buffer_dirty(cur) ;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#208: FILE: fs/buffer.c:285:
+		other_dirty += buffer_dirty(cur) ;	

WARNING:SPACING: space prohibited before semicolon
#209: FILE: fs/buffer.c:286:
+		cur = cur->b_this_page ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: fs/buffer.c:287:
+^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#211: FILE: fs/buffer.c:288:
+	if (other_dirty == 0) {
+		ClearPageDirty(page) ;
+	} 

WARNING:SPACING: space prohibited before semicolon
#212: FILE: fs/buffer.c:289:
+		ClearPageDirty(page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: fs/buffer.c:290:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: fs/buffer.c:292:
+^I/* we want the page available for locking again right away.  $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#216: FILE: fs/buffer.c:293:
+	/* we want the page available for locking again right away.  
+	** someone walking the dirty buffer list might find another

WARNING:SPACING: space prohibited before semicolon
#221: FILE: fs/buffer.c:298:
+	get_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#222: FILE: fs/buffer.c:299:
+	lock_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#223: FILE: fs/buffer.c:300:
+	clear_bit(BH_Dirty, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#224: FILE: fs/buffer.c:301:
+	bh->b_end_io = end_buffer_io_sync ;

WARNING:SPACING: space prohibited before semicolon
#225: FILE: fs/buffer.c:302:
+	UnlockPage(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#225: FILE: fs/buffer.c:302:
+	UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#226: FILE: fs/buffer.c:303:
+	submit_bh(WRITE, bh) ;

WARNING:SPACING: space prohibited before semicolon
#227: FILE: fs/buffer.c:304:
+	return 0 ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#231: FILE: fs/buffer.c:308:
+/*
+** util function for sync_buffers and flush_dirty_buffers

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#235: FILE: fs/buffer.c:312:
+static int dirty_list_writepage(struct page *page, struct buffer_head *bh) {

CHECK:SPACING: No space is necessary after a cast
#236: FILE: fs/buffer.c:313:
+	int (*writepage)(struct page *)  ;

WARNING:SPACING: space prohibited before semicolon
#236: FILE: fs/buffer.c:313:
+	int (*writepage)(struct page *)  ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#236: FILE: fs/buffer.c:313:
+	int (*writepage)(struct page *)  ;

WARNING:SPACING: space prohibited before semicolon
#240: FILE: fs/buffer.c:317:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#241: FILE: fs/buffer.c:318:
+		return 0 ;

WARNING:SPACING: space prohibited before semicolon
#243: FILE: fs/buffer.c:320:
+	writepage = page->mapping->a_ops->writepage ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#246: FILE: fs/buffer.c:323:
+	/* For anon pages, and pages that don't have a writepage
+	** func, just write this one dirty buffer.  __dirty_list_writepage

WARNING:BRACES: braces {} are not necessary for single statement blocks
#250: FILE: fs/buffer.c:327:
+	if (!writepage || page->mapping == &anon_space_mapping) {
+		return __dirty_list_writepage(page, bh) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#251: FILE: fs/buffer.c:328:
+		return __dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#254: FILE: fs/buffer.c:331:
+	ClearPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#255: FILE: fs/buffer.c:332:
+	return writepage(page) ;

WARNING:SPACING: space prohibited before semicolon
#266: FILE: fs/buffer.c:836:
+		wakeup_kswapd() ;

WARNING:SPACING: space prohibited before semicolon
#274: FILE: fs/buffer.c:856:
+	int partial = 0 ;

WARNING:SPACING: space prohibited before semicolon
#283: FILE: fs/buffer.c:883:
+			partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#302: FILE: fs/buffer.c:961:
+				lock_buffer(bh) ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#304: FILE: fs/buffer.c:963:
+				/* if we are the only buffer on this page,
+				** we know we have cleaned the page

WARNING:BRACES: braces {} are not necessary for single statement blocks
#306: FILE: fs/buffer.c:965:
+				if (bh->b_this_page == bh) {
+					ClearPageDirty(bh->b_page) ;    
+				}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: fs/buffer.c:966:
+^I^I^I^I^IClearPageDirty(bh->b_page) ;    $

WARNING:SPACING: space prohibited before semicolon
#307: FILE: fs/buffer.c:966:
+					ClearPageDirty(bh->b_page) ;    

WARNING:SPACING: space prohibited before semicolon
#309: FILE: fs/buffer.c:968:
+				clear_bit(BH_Dirty, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#310: FILE: fs/buffer.c:969:
+				bh->b_end_io = end_buffer_io_sync ;

WARNING:SPACING: space prohibited before semicolon
#311: FILE: fs/buffer.c:970:
+				submit_bh(WRITE, bh) ;

WARNING:SPACING: space prohibited before semicolon
#320: FILE: fs/buffer.c:1158:
+	wakeup_bdflush(state) ;

WARNING:SPACING: space prohibited before semicolon
#331: FILE: fs/buffer.c:1194:
+		SetPageDirty(bh->b_page) ;

WARNING:SPACING: space prohibited before semicolon
#340: FILE: fs/buffer.c:1234:
+	struct address_space *mapping ;

WARNING:SPACING: space prohibited before semicolon
#345: FILE: fs/buffer.c:1238:
+	mapping = buf->b_page->mapping ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: fs/buffer.c:1239:
+^Iif (mapping != &anon_space_mapping || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: fs/buffer.c:1240:
+^I    !atomic_dec_and_test(&buf->b_count) || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: fs/buffer.c:1575:
+int block_write_anon_page(struct page *page) $

WARNING:SPACING: space prohibited before semicolon
#359: FILE: fs/buffer.c:1578:
+	int i, nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#360: FILE: fs/buffer.c:1579:
+	int partial = 0 ;

WARNING:SPACING: space prohibited before semicolon
#361: FILE: fs/buffer.c:1580:
+	int ret = 0 ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#364: FILE: fs/buffer.c:1583:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: fs/buffer.c:1586:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#367: FILE: fs/buffer.c:1586:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#375: FILE: fs/buffer.c:1594:
+			get_bh(bh) ;

WARNING:SPACING: space prohibited before semicolon
#376: FILE: fs/buffer.c:1595:
+			lock_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#377: FILE: fs/buffer.c:1596:
+			set_bit(BH_Uptodate, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#379: FILE: fs/buffer.c:1598:
+			clear_bit(BH_Dirty, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#380: FILE: fs/buffer.c:1599:
+			arr[nr++] = bh ;

WARNING:SPACING: space prohibited before semicolon
#382: FILE: fs/buffer.c:1601:
+			partial = 1 ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#388: FILE: fs/buffer.c:1607:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#389: FILE: fs/buffer.c:1608:
+		submit_bh(WRITE, arr[i]) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#394: FILE: fs/buffer.c:1613:
+	if (nr == 0) {
+		UnlockPage(page) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#395: FILE: fs/buffer.c:1614:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#397: FILE: fs/buffer.c:1616:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#407: FILE: fs/buffer.c:1627:
+	unsigned long lblock ;

WARNING:SPACING: space prohibited before semicolon
#408: FILE: fs/buffer.c:1628:
+	unsigned long blocksize = inode->i_sb->s_blocksize ;

WARNING:SPACING: space prohibited before semicolon
#410: FILE: fs/buffer.c:1630:
+	int page_ok = Page_Uptodate(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#410: FILE: fs/buffer.c:1630:
+	int page_ok = Page_Uptodate(page) ;

WARNING:SPACING: space prohibited before semicolon
#411: FILE: fs/buffer.c:1631:
+	struct buffer_head *arr[MAX_BUF_PER_PAGE] ;

WARNING:SPACING: space prohibited before semicolon
#412: FILE: fs/buffer.c:1632:
+	int nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#413: FILE: fs/buffer.c:1633:
+	int partial = 0 ;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#424: FILE: fs/buffer.c:1643:
+	lblock = (inode->i_size+blocksize-1) >> inode->i_sb->s_blocksize_bits;
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#424: FILE: fs/buffer.c:1643:
+	lblock = (inode->i_size+blocksize-1) >> inode->i_sb->s_blocksize_bits;
 	                                 ^

WARNING:SPACING: space prohibited before semicolon
#446: FILE: fs/buffer.c:1666:
+			arr[nr++] = bh ;

WARNING:SPACING: space prohibited before semicolon
#448: FILE: fs/buffer.c:1668:
+			partial = 1 ;

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: fs/buffer.c:1675:
+	for(i = 0 ; i < nr ; i++) {

WARNING:SPACING: space prohibited before semicolon
#457: FILE: fs/buffer.c:1676:
+		bh = arr[i] ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: fs/buffer.c:1682:
+^I} $

ERROR:SPACING: space required before the open parenthesis '('
#473: FILE: fs/buffer.c:1685:
+	for(i = 0 ; i < nr ; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#473: FILE: fs/buffer.c:1685:
+	for(i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]);
+	}

WARNING:SPACING: space prohibited before semicolon
#477: FILE: fs/buffer.c:1689:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#508: FILE: fs/buffer.c:2100:
+	return __block_write_full_page(inode, page, get_block) ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#515: FILE: fs/buffer.c:2107:
+	unsigned offset;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#522: FILE: fs/buffer.c:2114:
+	offset = inode->i_size & (PAGE_CACHE_SIZE-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#524: FILE: fs/buffer.c:2116:
+	if (page->index >= end_index+1 || !offset) {
 	                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#533: FILE: fs/buffer.c:2122:
+	/* directories in the page cache don't need to have the buffers
+	** past the eof zerod out.  In fact, ext2 sets up fake entries

WARNING:SPACING: space prohibited before semicolon
#536: FILE: fs/buffer.c:2125:
+	return __block_write_full_page(inode, page, get_block) ;

WARNING:SPACING: space prohibited before semicolon
#545: FILE: fs/buffer.c:2401:
+	unsigned long index ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#554: FILE: fs/buffer.c:2418:
+	/* don't put this buffer head on the free list until the
+	** page is setup.  Is there a better index to use?  Would 0

WARNING:SPACING: space prohibited before semicolon
#558: FILE: fs/buffer.c:2422:
+	index = atomic_read(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#560: FILE: fs/buffer.c:2424:
+	add_to_page_cache_locked(page, &anon_space_mapping, index) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: fs/buffer.c:2483:
+^I^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#607: FILE: fs/buffer.c:2544:
+	if (page->mapping == &anon_space_mapping) {
+		atomic_dec(&buffermem_pages) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#608: FILE: fs/buffer.c:2545:
+		atomic_dec(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#635: FILE: fs/buffer.c:2697:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#644: FILE: fs/buffer.c:2715:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#652: FILE: fs/buffer.c:2729:
+		page = bh->b_page ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#653: FILE: fs/buffer.c:2730:
+		if (TryLockPage(page)) {
+		    flushed-- ;

WARNING:SPACING: space prohibited before semicolon
#654: FILE: fs/buffer.c:2731:
+		    flushed-- ;

WARNING:TABSTOP: Statements should start on a tabstop
#655: FILE: fs/buffer.c:2732:
+		    continue ;

WARNING:SPACING: space prohibited before semicolon
#655: FILE: fs/buffer.c:2732:
+		    continue ;

WARNING:SPACING: space prohibited before semicolon
#659: FILE: fs/buffer.c:2736:
+		page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#663: FILE: fs/buffer.c:2739:
+		dirty_list_writepage(page, bh) ;

WARNING:SPACING: space prohibited before semicolon
#665: FILE: fs/buffer.c:2741:
+		page_cache_release(page) ;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#676: FILE: fs/ext2/inode.c:577:
 }
+static int ext2_dir_writepage(struct page *page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#678: FILE: fs/ext2/inode.c:579:
+	return block_write_dir_page(page,ext2_get_block);
 	                                ^

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#687: FILE: fs/ext2/inode.c:602:
+struct address_space_operations ext2_dir_aops = {

WARNING:INDENTED_LABEL: labels should not be indented
#688: FILE: fs/ext2/inode.c:603:
+	readpage: ext2_readpage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#689: FILE: fs/ext2/inode.c:604:
+	writepage: ext2_dir_writepage,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#689: FILE: fs/ext2/inode.c:604:
+	writepage: ext2_dir_writepage,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#690: FILE: fs/ext2/inode.c:605:
+	sync_page: block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#690: FILE: fs/ext2/inode.c:605:
+	sync_page: block_sync_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#691: FILE: fs/ext2/inode.c:606:
+	prepare_write: ext2_prepare_write,
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#691: FILE: fs/ext2/inode.c:606:
+	prepare_write: ext2_prepare_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#692: FILE: fs/ext2/inode.c:607:
+	commit_write: generic_commit_write,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#692: FILE: fs/ext2/inode.c:607:
+	commit_write: generic_commit_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#693: FILE: fs/ext2/inode.c:608:
+	bmap: ext2_bmap
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#693: FILE: fs/ext2/inode.c:608:
+	bmap: ext2_bmap

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: fs/reiserfs/inode.c:1697:
+    int transaction_started = 0 ;$

WARNING:SPACING: space prohibited before semicolon
#727: FILE: fs/reiserfs/inode.c:1697:
+    int transaction_started = 0 ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: fs/reiserfs/inode.c:1705:
+    if (buffer_mapped(bh_result) && bh_result->b_blocknr == 0) {$

WARNING:SPACING: space prohibited before semicolon
#737: FILE: fs/reiserfs/inode.c:1706:
+	journal_begin(&th, inode->i_sb, jbegin_count) ;

WARNING:SPACING: space prohibited before semicolon
#738: FILE: fs/reiserfs/inode.c:1707:
+	transaction_started = 1 ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: fs/reiserfs/inode.c:1708:
+    }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#750: FILE: fs/reiserfs/inode.c:1738:
+	/* sigh, we can't start a transaction with a path held, so we
+	** have to drop the path, start the transaction, and start over

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#752: FILE: fs/reiserfs/inode.c:1740:
+	if (!transaction_started) {
+	    pathrelse(&path) ;

WARNING:SPACING: space prohibited before semicolon
#753: FILE: fs/reiserfs/inode.c:1741:
+	    pathrelse(&path) ;

WARNING:SPACING: space prohibited before semicolon
#754: FILE: fs/reiserfs/inode.c:1742:
+	    journal_begin(&th, inode->i_sb, jbegin_count) ;

WARNING:SPACING: space prohibited before semicolon
#755: FILE: fs/reiserfs/inode.c:1743:
+	    transaction_started = 1 ;

WARNING:TABSTOP: Statements should start on a tabstop
#756: FILE: fs/reiserfs/inode.c:1744:
+	    goto research ;

WARNING:SPACING: space prohibited before semicolon
#756: FILE: fs/reiserfs/inode.c:1744:
+	    goto research ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: fs/reiserfs/inode.c:1781:
+    if (transaction_started)$

WARNING:SPACING: space prohibited before semicolon
#768: FILE: fs/reiserfs/inode.c:1782:
+	journal_end(&th, inode->i_sb, jbegin_count) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: fs/reiserfs/inode.c:1834:
+    int page_ok = Page_Uptodate(page) ;$

WARNING:SPACING: space prohibited before semicolon
#776: FILE: fs/reiserfs/inode.c:1834:
+    int page_ok = Page_Uptodate(page) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#785: FILE: fs/reiserfs/inode.c:1859:
+	if (!(buffer_dirty(bh) || page_ok) || cur_offset >= last_offset) {
 	    if (!buffer_uptodate(bh))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: fs/reiserfs/journal.c:705:
+      } $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: fs/reiserfs/journal.c:705:
+      } $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: fs/reiserfs/journal.c:706:
+      get_bh(tbh) ; /* inc the count for the end_io handler */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: fs/reiserfs/journal.c:707:
+      lock_buffer(tbh) ;$

WARNING:SPACING: space prohibited before semicolon
#802: FILE: fs/reiserfs/journal.c:707:
+      lock_buffer(tbh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: fs/reiserfs/journal.c:708:
+      clear_bit(BH_Dirty, &tbh->b_state) ;$

WARNING:SPACING: space prohibited before semicolon
#803: FILE: fs/reiserfs/journal.c:708:
+      clear_bit(BH_Dirty, &tbh->b_state) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: fs/reiserfs/journal.c:709:
+      tbh->b_end_io = end_buffer_io_sync ;$

WARNING:SPACING: space prohibited before semicolon
#804: FILE: fs/reiserfs/journal.c:709:
+      tbh->b_end_io = end_buffer_io_sync ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: fs/reiserfs/journal.c:710:
+      submit_bh(WRITE, tbh) ;$

WARNING:SPACING: space prohibited before semicolon
#805: FILE: fs/reiserfs/journal.c:710:
+      submit_bh(WRITE, tbh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: fs/reiserfs/journal.c:743:
+  get_bh(jl->j_commit_bh) ;$

WARNING:SPACING: space prohibited before semicolon
#815: FILE: fs/reiserfs/journal.c:743:
+  get_bh(jl->j_commit_bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: fs/reiserfs/journal.c:744:
+  lock_buffer(jl->j_commit_bh) ;$

WARNING:SPACING: space prohibited before semicolon
#816: FILE: fs/reiserfs/journal.c:744:
+  lock_buffer(jl->j_commit_bh) ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: fs/reiserfs/journal.c:745:
+  clear_bit(BH_Dirty, &(jl->j_commit_bh->b_state)) ;$

WARNING:SPACING: space prohibited before semicolon
#817: FILE: fs/reiserfs/journal.c:745:
+  clear_bit(BH_Dirty, &(jl->j_commit_bh->b_state)) ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around jl->j_commit_bh->b_state
#817: FILE: fs/reiserfs/journal.c:745:
+  clear_bit(BH_Dirty, &(jl->j_commit_bh->b_state)) ;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: fs/reiserfs/journal.c:746:
+  jl->j_commit_bh->b_end_io = end_buffer_io_sync ;$

WARNING:SPACING: space prohibited before semicolon
#818: FILE: fs/reiserfs/journal.c:746:
+  jl->j_commit_bh->b_end_io = end_buffer_io_sync ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: fs/reiserfs/journal.c:747:
+  submit_bh(WRITE, jl->j_commit_bh) ;$

WARNING:SPACING: space prohibited before semicolon
#819: FILE: fs/reiserfs/journal.c:747:
+  submit_bh(WRITE, jl->j_commit_bh) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: fs/reiserfs/tail_conversion.c:188:
+^I  ** page is clean $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#831: FILE: fs/reiserfs/tail_conversion.c:188:
+	  /* if we are the first buffer on the page, we know the
+	  ** page is clean 

WARNING:TABSTOP: Statements should start on a tabstop
#833: FILE: fs/reiserfs/tail_conversion.c:190:
+	  if (bh == page->buffers) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#833: FILE: fs/reiserfs/tail_conversion.c:190:
+	  if (bh == page->buffers) {
+	    ClearPageDirty(page) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#833: FILE: fs/reiserfs/tail_conversion.c:190:
+	  if (bh == page->buffers) {
+	    ClearPageDirty(page) ;
+	  }

WARNING:SPACING: space prohibited before semicolon
#834: FILE: fs/reiserfs/tail_conversion.c:191:
+	    ClearPageDirty(page) ;

WARNING:TABSTOP: Statements should start on a tabstop
#835: FILE: fs/reiserfs/tail_conversion.c:192:
+	  }

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#846: FILE: include/linux/ext2_fs.h:643:
+extern struct address_space_operations ext2_dir_aops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#857: FILE: include/linux/fs.h:1329:
+extern int block_write_dir_page(struct page*, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#857: FILE: include/linux/fs.h:1329:
+extern int block_write_dir_page(struct page*, get_block_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t*' should also have an identifier name
#857: FILE: include/linux/fs.h:1329:
+extern int block_write_dir_page(struct page*, get_block_t*);

CHECK:SPACING: No space is necessary after a cast
#858: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#858: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

WARNING:SPACING: space prohibited before semicolon
#858: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#858: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#858: FILE: include/linux/fs.h:1330:
+extern int block_write_anon_page(struct page*) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000521856.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 168 warnings, 13 checks, 755 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000521856.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
