ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: drivers/char/tpm/tpm_atmel.c:166:
+^I^Iatmel_put_base_addr(chip->vendor);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#178: FILE: drivers/char/tpm/tpm_atmel.c:191:
+	tpm_atmel.have_region = (atmel_request_region( tpm_atmel.base, tpm_atmel.region_size, "tpm_atmel0") == NULL) ? 0 : 1;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#178: FILE: drivers/char/tpm/tpm_atmel.c:191:
+	tpm_atmel.have_region = (atmel_request_region( tpm_atmel.base, tpm_atmel.region_size, "tpm_atmel0") == NULL) ? 0 : 1;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!atmel_request_region"
#178: FILE: drivers/char/tpm/tpm_atmel.c:191:
+	tpm_atmel.have_region = (atmel_request_region( tpm_atmel.base, tpm_atmel.region_size, "tpm_atmel0") == NULL) ? 0 : 1;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited before that close parenthesis ')'
#184: FILE: drivers/char/tpm/tpm_atmel.c:193:
+	if (IS_ERR(pdev = platform_device_register_simple("tpm_atmel", -1, NULL, 0 ))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#184: FILE: drivers/char/tpm/tpm_atmel.c:193:
+	if (IS_ERR(pdev = platform_device_register_simple("tpm_atmel", -1, NULL, 0 ))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: drivers/char/tpm/tpm_atmel.c:198:
+^Iif ((rc = tpm_register_hardware(&pdev->dev, &tpm_atmel)) < 0) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#206: FILE: drivers/char/tpm/tpm_atmel.c:198:
+	if ((rc = tpm_register_hardware(&pdev->dev, &tpm_atmel)) < 0) 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#239: FILE: drivers/char/tpm/tpm_atmel.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: drivers/char/tpm/tpm_atmel.h:10:
+ * Specifications at www.trustedcomputinggroup.org^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: drivers/char/tpm/tpm_atmel.h:18:
+ * discovered through the device tree and iomap must be used to get $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: drivers/char/tpm/tpm_atmel.h:19:
+ * around the need for holes in the io_page_mask.  This does not happen $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: drivers/char/tpm/tpm_atmel.h:20:
+ * automatically because the tpm is not a normal pci device and lives $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chip' may be better as '(chip)' to avoid precedence issues
#264: FILE: drivers/char/tpm/tpm_atmel.h:26:
+#define atmel_getb(chip, offset) readb(chip->vendor->iobase + offset);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#264: FILE: drivers/char/tpm/tpm_atmel.h:26:
+#define atmel_getb(chip, offset) readb(chip->vendor->iobase + offset);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#264: FILE: drivers/char/tpm/tpm_atmel.h:26:
+#define atmel_getb(chip, offset) readb(chip->vendor->iobase + offset);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chip' may be better as '(chip)' to avoid precedence issues
#265: FILE: drivers/char/tpm/tpm_atmel.h:27:
+#define atmel_putb(val, chip, offset) writeb(val, chip->vendor->iobase + offset)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#265: FILE: drivers/char/tpm/tpm_atmel.h:27:
+#define atmel_putb(val, chip, offset) writeb(val, chip->vendor->iobase + offset)

CHECK:SPACING: No space is necessary after a cast
#292: FILE: drivers/char/tpm/tpm_atmel.h:54:
+	reg = (unsigned int *) get_property(dn, "reg", &reglen);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#298: FILE: drivers/char/tpm/tpm_atmel.h:60:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#300: FILE: drivers/char/tpm/tpm_atmel.h:62:
+		address = ((unsigned long) reg[0] << 32) | reg[1];

CHECK:SPACING: No space is necessary after a cast
#306: FILE: drivers/char/tpm/tpm_atmel.h:68:
+		    ((unsigned long) reg[naddrc] << 32) | reg[naddrc + 1];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chip' may be better as '(chip)' to avoid precedence issues
#316: FILE: drivers/char/tpm/tpm_atmel.h:78:
+#define atmel_getb(chip, offset) inb(chip->vendor->base + offset)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#316: FILE: drivers/char/tpm/tpm_atmel.h:78:
+#define atmel_getb(chip, offset) inb(chip->vendor->base + offset)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chip' may be better as '(chip)' to avoid precedence issues
#317: FILE: drivers/char/tpm/tpm_atmel.h:79:
+#define atmel_putb(val, chip, offset) outb(val, chip->vendor->base + offset)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#317: FILE: drivers/char/tpm/tpm_atmel.h:79:
+#define atmel_putb(val, chip, offset) outb(val, chip->vendor->base + offset)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#329: FILE: drivers/char/tpm/tpm_atmel.h:91:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135490.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 3 warnings, 14 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135490.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
