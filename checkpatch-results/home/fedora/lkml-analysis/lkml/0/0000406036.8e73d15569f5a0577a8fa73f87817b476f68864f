ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#33: 
--- a/arch/i386/kernel/profile.c	Wed Dec 18 09:36:46 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#80: FILE: include/linux/notifier.h:12:
*);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#85: FILE: include/linux/notifier.h:16:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#85: FILE: include/linux/notifier.h:16:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#85: FILE: include/linux/notifier.h:16:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/notifier.h:25:
+extern int notifier_chain_register(struct list_head *, struct

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#100: FILE: include/linux/notifier.h:25:
+extern int notifier_chain_register(struct list_head *, struct

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct
 otifier_block *' should also have an identifier name
#100: FILE: include/linux/notifier.h:25:
+extern int notifier_chain_register(struct list_head *, struct

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/notifier.h:26:
+extern int notifier_chain_unregister(struct list_head *, struct

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#102: FILE: include/linux/notifier.h:26:
+extern int notifier_chain_unregister(struct list_head *, struct

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct
 otifier_block *' should also have an identifier name
#102: FILE: include/linux/notifier.h:26:
+extern int notifier_chain_unregister(struct list_head *, struct

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/notifier.h:27:
+extern int notifier_call_chain(struct list_head *, unsigned long, void

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#104: FILE: include/linux/notifier.h:27:
+extern int notifier_call_chain(struct list_head *, unsigned long, void

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#104: FILE: include/linux/notifier.h:27:
+extern int notifier_call_chain(struct list_head *, unsigned long, void

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#104: FILE: include/linux/notifier.h:27:
+extern int notifier_call_chain(struct list_head *, unsigned long, void

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: kernel/sys.c:100:
+^I^Istruct notifier_block *e $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#203: FILE: kernel/sys.c:101:
+		struct notifier_block *e 
+			= list_entry(p, struct notifier_block, link);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: kernel/sys.c:102:
+^I^Iif (n->priority > e->priority) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: kernel/sys.c:162:
+		ret = nb->notifier_call(nb,val,v);
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: kernel/sys.c:162:
+		ret = nb->notifier_call(nb,val,v);
 		                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: kernel/sys.c:163:
+^I^Iif (ret & NOTIFY_STOP_MASK) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: kernel/sys.c:202:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000406036.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 10 warnings, 5 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000406036.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
