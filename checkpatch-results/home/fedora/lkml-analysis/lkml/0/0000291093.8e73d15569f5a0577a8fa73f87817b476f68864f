CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#42: 
Zoltán Menyhárt
    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: test/migstat.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#67: FILE: test/migstat.c:7:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#73: FILE: test/migstat.c:13:
+#define	CONV(x)		x, (x * mult + div / 2) / div, (x * mult + div / 2) / div / 1000

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#73: FILE: test/migstat.c:13:
+#define	CONV(x)		x, (x * mult + div / 2) / div, (x * mult + div / 2) / div / 1000

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#75: FILE: test/migstat.c:15:
+extern int		errno;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: braces {} should be used on all arms of this statement
#89: FILE: test/migstat.c:29:
+	if (argc == 2 && strcmp(argv[1], "-c") == 0)
[...]
+	else if (argc != 1){
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#91: FILE: test/migstat.c:31:
+	else if (argc != 1){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#95: FILE: test/migstat.c:35:
+	if (get_stat_sizes(&ss) < 0){

ERROR:SPACING: space required before the open brace '{'
#99: FILE: test/migstat.c:39:
+	if ((sp = malloc(ss.sizeof_statistics)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#99: FILE: test/migstat.c:39:
+	if ((sp = malloc(ss.sizeof_statistics)) == NULL){

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open brace '{'
#103: FILE: test/migstat.c:43:
+	if (get_staistics(sp, clear_flag) < 0){

ERROR:SPACING: space required before the open brace '{'
#131: FILE: test/migstat.c:71:
+	for (from = 0; from < ss.max_nodes; from++){

ERROR:SPACING: space required before the open brace '{'
#133: FILE: test/migstat.c:73:
+		for (to = 0; to < ss.max_nodes; p++, to++){

ERROR:SPACING: space required before the open brace '{'
#172: FILE: test/migstat.c:112:
+	if (sp->c.pgd_scan != 0){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: test/migstat.c:115:
+		printf("mm_hit:\t\t\t%11ld\nmiss:\t\t\t%11ld\n", sp->c.mm_hit,
+					sp->e.non_existent_addr + ok - sp->c.mm_hit);

ERROR:SPACING: space required before the open brace '{'
#178: FILE: test/migstat.c:118:
+	if (sp->c.perfbullctl != 0){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#193: FILE: test/ph.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#197: FILE: test/ph.c:5:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#211: FILE: test/ph.c:19:
+extern int			errno;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: test/ph.c:23:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#217: FILE: test/ph.c:25:
+fill(volatile void *p)

ERROR:SPACING: space required before the open brace '{'
#222: FILE: test/ph.c:30:
+	for (i = 0; i < count; i++, p += PAGE_SIZE){

CHECK:SPACING: No space is necessary after a cast
#223: FILE: test/ph.c:31:
+		* (unsigned long *) p = 0xdeadbeefL;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#223: FILE: test/ph.c:31:
+		* (unsigned long *) p = 0xdeadbeefL;
 		^

CHECK:SPACING: No space is necessary after a cast
#224: FILE: test/ph.c:32:
+		if ((address = gimme_a_ph_address((void *) p)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#224: FILE: test/ph.c:32:
+		if ((address = gimme_a_ph_address((void *) p)) < 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: test/ph.c:40:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#233: FILE: test/ph.c:41:
+mig(volatile void *p, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: test/ph.c:49:
+	printf("\nmig(..., %d): rc = %ld errno = %d *p: 0x%lx\n", node, rc, errno,
+								* (unsigned long *) p);

CHECK:SPACING: No space is necessary after a cast
#241: FILE: test/ph.c:49:
+								* (unsigned long *) p);

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#241: FILE: test/ph.c:49:
+								* (unsigned long *) p);
 								^

ERROR:SPACING: space required before the open brace '{'
#243: FILE: test/ph.c:51:
+	if (rc < 0){

CHECK:SPACING: No space is necessary after a cast
#247: FILE: test/ph.c:55:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#249: FILE: test/ph.c:57:
+	if (address < 0){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: test/ph.c:63:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#258: FILE: test/ph.c:66:
+	volatile void	*p;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: test/ph.c:69:
+	p = mmap(NULL, MMAPSIZE, PROT_READ | PROT_WRITE,
+					MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

ERROR:SPACING: space required before the open brace '{'
#262: FILE: test/ph.c:70:
+	if (p == MAP_FAILED){

CHECK:SPACING: No space is necessary after a cast
#270: FILE: test/ph.c:78:
+	* (unsigned long *) p = 0xdeadbeef03L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#270: FILE: test/ph.c:78:
+	* (unsigned long *) p = 0xdeadbeef03L;
 	^

CHECK:SPACING: No space is necessary after a cast
#274: FILE: test/ph.c:82:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#276: FILE: test/ph.c:84:
+	if (address < 0){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: test/v.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: test/v.c:5:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#305: FILE: test/v.c:15:
+extern int	errno;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#309: FILE: test/v.c:19:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#310: FILE: test/v.c:20:
+mig(volatile void *p, int node)

CHECK:SPACING: No space is necessary after a cast
#314: FILE: test/v.c:24:
+	rc = migrate_virt_addr_range((caddr_t) p, MMAPSIZE, node, &u_s, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: test/v.c:26:
+	printf("\nmig(..., %d): rc = %ld errno = %d *p: 0x%lx\n", node, rc, errno,
+								* (unsigned long *) p);

CHECK:SPACING: No space is necessary after a cast
#316: FILE: test/v.c:26:
+								* (unsigned long *) p);

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#316: FILE: test/v.c:26:
+								* (unsigned long *) p);
 								^

ERROR:SPACING: space required before the open brace '{'
#318: FILE: test/v.c:28:
+	if (rc < 0){

CHECK:SPACING: No space is necessary after a cast
#322: FILE: test/v.c:32:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#324: FILE: test/v.c:34:
+	if (address < 0){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: test/v.c:40:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#333: FILE: test/v.c:43:
+	volatile void	*p0, *p;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#335: FILE: test/v.c:45:
+	p0 = p = mmap(NULL, MMAPSIZE, PROT_READ | PROT_WRITE,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open brace '{'
#337: FILE: test/v.c:47:
+	if (p == MAP_FAILED){

CHECK:SPACING: No space is necessary after a cast
#344: FILE: test/v.c:54:
+	* (unsigned long *) p = 0xdeadbeef01L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#344: FILE: test/v.c:54:
+	* (unsigned long *) p = 0xdeadbeef01L;
 	^

CHECK:SPACING: No space is necessary after a cast
#346: FILE: test/v.c:56:
+	* (unsigned long *) p = 0xdeadbeef02L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#346: FILE: test/v.c:56:
+	* (unsigned long *) p = 0xdeadbeef02L;
 	^

CHECK:SPACING: No space is necessary after a cast
#347: FILE: test/v.c:57:
+	address = gimme_a_ph_address((void *) p);

CHECK:SPACING: No space is necessary after a cast
#353: FILE: test/v.c:63:
+	* (unsigned long *) p = 0xdeadbeef03L;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#353: FILE: test/v.c:63:
+	* (unsigned long *) p = 0xdeadbeef03L;
 	^

CHECK:SPACING: No space is necessary after a cast
#357: FILE: test/v.c:67:
+	address = gimme_a_ph_address((void *) p);

ERROR:SPACING: space required before the open brace '{'
#359: FILE: test/v.c:69:
+	if (address < 0){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#373: FILE: test/victim.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#377: FILE: test/victim.c:5:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#384: FILE: test/victim.c:12:
+#define	N		MMAPSIZE / sizeof(long)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#386: FILE: test/victim.c:14:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#390: FILE: test/victim.c:18:
+	volatile long	*p0, *p;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#394: FILE: test/victim.c:22:
+	p0 = p = mmap(NULL, MMAPSIZE, PROT_READ | PROT_WRITE,

ERROR:SPACING: space required before the open brace '{'
#396: FILE: test/victim.c:24:
+	if (p == MAP_FAILED){

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#413: FILE: test/vmig.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#417: FILE: test/vmig.c:5:
+
+

ERROR:SPACING: space required before the open brace '{'
#436: FILE: test/vmig.c:24:
+	if (argc != 3){

CHECK:SPACING: No space is necessary after a cast
#442: FILE: test/vmig.c:30:
+	rc = migrate_virt_addr_range((caddr_t) SH_ADDRESS, SH_SIZE, node, &u_s, pid);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000291093.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 14 warnings, 35 checks, 375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000291093.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
