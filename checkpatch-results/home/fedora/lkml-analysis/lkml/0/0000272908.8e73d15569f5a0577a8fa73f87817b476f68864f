WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#44: FILE: fs/ext2/symlink.c:27:
+	nd_set_link(nd, (char *)ei->i_data);
 	            ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#75: FILE: fs/namei.c:2194:
+ * have ->follow_link() touching nd only in nd_set_link().  Using (or not
                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#80: FILE: fs/namei.c:2199:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#81: FILE: fs/namei.c:2200:
+	int res = dentry->d_inode->i_op->follow_link(dentry, &nd);
 	                                                      ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#82: FILE: fs/namei.c:2201:
+	int res = dentry->d_inode->i_op->follow_link(dentry, &nd);
+	if (!res) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#83: FILE: fs/namei.c:2202:
+		res = vfs_readlink(dentry, buffer, buflen, nd_get_link(&nd));
 		                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#85: FILE: fs/namei.c:2204:
+			dentry->d_inode->i_op->put_link(dentry, &nd);
 			                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#97: FILE: fs/namei.c:2285:
+int page_follow_link_light(struct dentry *dentry, struct nameidata *nd)
                                                                     ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#101: FILE: fs/namei.c:2289:
+	char *s = page_getlink(dentry, &page);
+	if (!IS_ERR(s)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#102: FILE: fs/namei.c:2290:
+		nd_set_link(nd, s);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#108: FILE: fs/namei.c:2296:
+void page_put_link(struct dentry *dentry, struct nameidata *nd)
                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#110: FILE: fs/namei.c:2298:
+	if (!IS_ERR(nd_get_link(nd))) {
 	                        ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: fs/namei.c:2300:
+		struct page *page;
+		page = find_get_page(dentry->d_inode->i_mapping, 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: fs/namei.c:2302:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#141: FILE: fs/namei.c:2379:
+EXPORT_SYMBOL(page_put_link);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/fs.h:1471:
+extern int page_follow_link_light(struct dentry *, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#157: FILE: include/linux/fs.h:1471:
+extern int page_follow_link_light(struct dentry *, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#157: FILE: include/linux/fs.h:1471:
+extern int page_follow_link_light(struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/fs.h:1472:
+extern void page_put_link(struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#158: FILE: include/linux/fs.h:1472:
+extern void page_put_link(struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#158: FILE: include/linux/fs.h:1472:
+extern void page_put_link(struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/fs.h:1475:
+extern int generic_readlink(struct dentry *, char __user *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#161: FILE: include/linux/fs.h:1475:
+extern int generic_readlink(struct dentry *, char __user *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#161: FILE: include/linux/fs.h:1475:
+extern int generic_readlink(struct dentry *, char __user *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#161: FILE: include/linux/fs.h:1475:
+extern int generic_readlink(struct dentry *, char __user *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 22 warnings, 3 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
