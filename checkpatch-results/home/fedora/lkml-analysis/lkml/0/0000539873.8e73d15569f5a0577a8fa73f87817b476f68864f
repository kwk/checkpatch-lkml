WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: linux/swap.h:69:
+	struct swap_map_struct * swap_maps;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#82: FILE: linux/swap.h:72:
+	struct swap_cluster_struct * swap_clusters;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: linux/swap.h:75:
+	struct swap_cluster_struct * curr_cluster;

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "si->curr_cluster"
#145: FILE: swapfile.c:39:
+	if (si->curr_cluster != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: swapfile.c:146:
+	struct swap_map_struct * map;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#236: FILE: swapfile.c:172:
+		if (!(map->count -= count)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: swapfile.c:185:
+					BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#255: FILE: swapfile.c:191:
+				BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#264: FILE: swapfile.c:214:
+	printk(KERN_ERR "VM: Bad count %hd current count %hd\n", count,

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hd' is unnecessary
#264: FILE: swapfile.c:214:
+	printk(KERN_ERR "VM: Bad count %hd current count %hd\n", count,
+	       p->swap_maps[offset].count);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hd' is unnecessary
#264: FILE: swapfile.c:214:
+	printk(KERN_ERR "VM: Bad count %hd current count %hd\n", count,
+	       p->swap_maps[offset].count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: swapfile.c:427:
+					BUG();

CHECK:SPACING: No space is necessary after a cast
#393: FILE: swapfile.c:723:
+			if (test_bit(i,(char *) swap_header)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: swapfile.c:723:
+			if (test_bit(i,(char *) swap_header)) {
 			              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#417: FILE: swapfile.c:755:
+		if (!(p->swap_maps = vmalloc (p->max * sizeof(struct swap_map_struct)))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#417: FILE: swapfile.c:755:
+		if (!(p->swap_maps = vmalloc (p->max * sizeof(struct swap_map_struct)))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: swapfile.c:808:
+				BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#547: FILE: swapfile.c:935:
+	if (p->swap_maps[offset].count < SWAP_MAP_MAX)
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000539873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 10 warnings, 3 checks, 524 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000539873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
