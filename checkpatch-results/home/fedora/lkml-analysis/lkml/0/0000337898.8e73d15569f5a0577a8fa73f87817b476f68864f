WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
changes in 2.6.0-test4 caused your patch to no longer build.  Here is a patch

WARNING:TYPO_SPELLING: 'refering' may be misspelled - perhaps 'referring'?
#37: 
    the didn't really do anything.  I'm refering to the original ==>
                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#	           ChangeSet	1.1276  -> 1.1277 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#	        ipc/Makefile	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#	Documentation/filesystems/proc.txt	1.16    -> 1.17   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#	          fs/Kconfig	1.29    -> 1.30   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#	             CREDITS	1.97    -> 1.98   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#	Documentation/ioctl-number.txt	1.10    -> 1.11   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#	               (new)	        -> 1.1     include/linux/mqueue.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#	               (new)	        -> 1.1     ipc/mqueue.c   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# 03/09/10	rusty@penguin.co.intel.com	1.1217.8.1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# Adding the POSIX Message Queue Filesystem implemented by Krzysztof Benedyczak

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# and Michal Wronski, along with proc support for a couple of tunables.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# 03/09/10	rusty@penguin.co.intel.com	1.1277

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# Merge http://linux.bkbits.net:8080/linux-2.5

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
# into penguin.co.intel.com:/src/linux/linus

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#78: 
--- a/CREDITS	Wed Sep 10 12:54:48 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: Documentation/filesystems/proc.txt:1822:
+/proc/fs/mqueue/max_sys_size is a read/write file for setting/getting the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: Documentation/filesystems/proc.txt:1825:
+/proc/fs/mqueue/msgs_size is a read-only file for getting the total amount $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#165: FILE: fs/Kconfig:885:
+config POSIX_MQUEUE_FS
+	tristate "POSIX Message Queues"
+	---help---
+	  POSIX variant of message queues is a part of IPC. In POSIX message
+	  queues every message has a priority which decides about succession
+	  of receiving it by a process. If you want to compile and run 
+	  programs written e.g. for Solaris with use of its POSIX message
+	  queues (functions mq_*) say Y here. To use this feature you will
+	  also need mqueue library, available from
+	  <http://www.mat.uni.torun.pl/~wrona/posix_ipc/>
+	  
+	  POSIX message queues are visible as a filesystem called 'mqueue' 
+	  and should be mounted in /dev/mqueue in order to work with standard 
+	  library.
+	  
+	  If you want to compile this as a module ( = code which can be
+	  inserted in and removed from the running kernel whenever you want),
+	  say M here and read <file:Documentation/modules.txt>.  The module
+	  will be called mqueue.o.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: fs/Kconfig:890:
+^I  of receiving it by a process. If you want to compile and run $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: fs/Kconfig:895:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: fs/Kconfig:896:
+^I  POSIX message queues are visible as a filesystem called 'mqueue' $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: fs/Kconfig:897:
+^I  and should be mounted in /dev/mqueue in order to work with standard $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: fs/Kconfig:899:
+^I  $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#187: FILE: fs/Kconfig:907:
+config POSIX_MQUEUE_FS_PROC
+	bool "/proc/fs/mqueue support"
+	depends on POSIX_MQUEUE_FS
+	---help---
+	 Enabling this opion will add various files to the /proc/fs/mqueue
+         directory providing the ability to tune the mqueue filesystem, and 
+         also query resource usage.
+
+         For more information on the specific tunables, see 
+         Documentation/filesystems/proc.txt.
+
+         There is a small amount of overhead to be paid for adding proc 
+         support, but other then that it should be safe to enable this option.
+

WARNING:TYPO_SPELLING: 'opion' may be misspelled - perhaps 'option'?
#191: FILE: fs/Kconfig:911:
+	 Enabling this opion will add various files to the /proc/fs/mqueue
 	               ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: fs/Kconfig:912:
+         directory providing the ability to tune the mqueue filesystem, and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: fs/Kconfig:915:
+         For more information on the specific tunables, see $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/Kconfig:918:
+         There is a small amount of overhead to be paid for adding proc $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#208: FILE: include/linux/mqueue.h:1:
+#ifndef _LINUX_MQUEUE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: include/linux/mqueue.h:7:
+#define MQ_MAXMSG ^I40^I/* max number of messages in each queue */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: include/linux/mqueue.h:8:
+#define MQ_MSGSIZE ^I16384^I/* max message size */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: include/linux/mqueue.h:10:
+#define MQ_PRIO_MAX ^I32768^I/* max priority */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#219: FILE: include/linux/mqueue.h:12:
+typedef int mqd_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: include/linux/mqueue.h:13:
+^I^I^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: ipc/mqueue.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: ipc/mqueue.c:4:
+ * Copyright (C) 2003 ^IKrzysztof Benedyczak ^I(golbi@mat.uni.torun.pl)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: ipc/mqueue.c:7:
+ * Spinlocks:^I^IMohamed Abbas ^I^I(abbas.mohamed@intel.com)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: ipc/mqueue.c:9:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#271: FILE: ipc/mqueue.c:13:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#283: FILE: ipc/mqueue.c:25:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#285: FILE: ipc/mqueue.c:27:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: ipc/mqueue.c:29:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: ipc/mqueue.c:49:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#309: FILE: ipc/mqueue.c:51:
+	struct msg *messages[MQ_MAXMSG+1]; /* +1 for first entry - sentinel */
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: ipc/mqueue.c:55:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: ipc/mqueue.c:62:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: ipc/mqueue.c:63:
+^I__u32 qsize; /* size of queue in memory (msgs & struct) */^I$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#326: FILE: ipc/mqueue.c:68:
+static struct inode_operations mqueue_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#327: FILE: ipc/mqueue.c:69:
+static struct file_operations mqueue_file_operations;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: ipc/mqueue.c:72:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: ipc/mqueue.c:87:
+^I^I^I^Ioff_t off, int count, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: ipc/mqueue.c:90:
+^Ireturn snprintf(page, count, "%i\n", max_queues); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: ipc/mqueue.c:95:
+^I^I^I^I unsigned long count, $

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#359: FILE: ipc/mqueue.c:101:
+	if (count>16)
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: ipc/mqueue.c:105:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#364: FILE: ipc/mqueue.c:106:
+	if(copy_from_user(tmp, buffer, len))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#368: FILE: ipc/mqueue.c:110:
+	if (sscanf(tmp,"%d",&max_queues) <= 0)
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#368: FILE: ipc/mqueue.c:110:
+	if (sscanf(tmp,"%d",&max_queues) <= 0)
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#368: FILE: ipc/mqueue.c:110:
+	if (sscanf(tmp,"%d",&max_queues) <= 0)
 	                    ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#368: FILE: ipc/mqueue.c:110:
+	if (sscanf(tmp,"%d",&max_queues) <= 0)
+		return -EFAULT;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: ipc/mqueue.c:117:
+^I^I^I^Ioff_t off, int count, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: ipc/mqueue.c:117:
+static int proc_read_max_sys_size(char *page, char **start,
+				off_t off, int count, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: ipc/mqueue.c:120:
+^Ireturn snprintf(page, count, "%ld\n", max_sys_size); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: ipc/mqueue.c:124:
+static int proc_write_max_sys_size(struct file *file,
+				 const char *buffer,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: ipc/mqueue.c:125:
+^I^I^I^I unsigned long count, $

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#389: FILE: ipc/mqueue.c:131:
+	if (count>16)
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: ipc/mqueue.c:135:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: ipc/mqueue.c:136:
+	if(copy_from_user(tmp, buffer, len))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#398: FILE: ipc/mqueue.c:140:
+	if (sscanf(tmp,"%ld",&max_sys_size) <= 0)
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#398: FILE: ipc/mqueue.c:140:
+	if (sscanf(tmp,"%ld",&max_sys_size) <= 0)
 	                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#398: FILE: ipc/mqueue.c:140:
+	if (sscanf(tmp,"%ld",&max_sys_size) <= 0)
 	                     ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#398: FILE: ipc/mqueue.c:140:
+	if (sscanf(tmp,"%ld",&max_sys_size) <= 0)
+		return -EFAULT;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: ipc/mqueue.c:147:
+^I^I^I       off_t off, int count, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: ipc/mqueue.c:150:
+^Ireturn snprintf(page, count, "%ld\n", msgs_size); $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m)...) over kmalloc(sizeof(struct msg)...)
#424: FILE: ipc/mqueue.c:166:
+	m = kmalloc(sizeof(struct msg), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#425: FILE: ipc/mqueue.c:167:
+	if (!m) return NULL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#428: FILE: ipc/mqueue.c:170:
+	if (inode) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#434: FILE: ipc/mqueue.c:176:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->lock
#440: FILE: ipc/mqueue.c:182:
+			spin_lock_init(&(ino_extra->lock));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[0]
#441: FILE: ipc/mqueue.c:183:
+			init_waitqueue_head((&(ino_extra->wait_q[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[1]
#442: FILE: ipc/mqueue.c:184:
+			init_waitqueue_head((&(ino_extra->wait_q[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[0]
#443: FILE: ipc/mqueue.c:185:
+			init_waitqueue_head((&(ino_extra->wait_q2[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[1]
#444: FILE: ipc/mqueue.c:186:
+			init_waitqueue_head((&(ino_extra->wait_q2[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[0].list
#445: FILE: ipc/mqueue.c:187:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[0].list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[1].list
#446: FILE: ipc/mqueue.c:188:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[1].list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: ipc/mqueue.c:196:
+^I^I^I/* fill up with defaults $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#455: FILE: ipc/mqueue.c:197:
+			 * (mq_open will set it up via next ioctl call) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Unbalanced braces around else statement
#465: FILE: ipc/mqueue.c:207:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: ipc/mqueue.c:209:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#471: FILE: ipc/mqueue.c:213:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: ipc/mqueue.c:214:
+static int mqueue_parse_options(char *options, int *mode, uid_t * uid,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#473: FILE: ipc/mqueue.c:215:
+				gid_t * gid, int silent)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#480: FILE: ipc/mqueue.c:222:
+		if ((value = strchr(this_char, '=')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#484: FILE: ipc/mqueue.c:226:
+				printk(KERN_ERR

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#493: FILE: ipc/mqueue.c:235:
+			*mode = simple_strtoul(value, &rest, 8);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#499: FILE: ipc/mqueue.c:241:
+			*uid = simple_strtoul(value, &rest, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#505: FILE: ipc/mqueue.c:247:
+			*gid = simple_strtoul(value, &rest, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#510: FILE: ipc/mqueue.c:252:
+				printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#520: FILE: ipc/mqueue.c:262:
+		printk(KERN_ERR

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#525: FILE: ipc/mqueue.c:267:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#527: FILE: ipc/mqueue.c:269:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#535: FILE: ipc/mqueue.c:277:
+	int mode = S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#554: FILE: ipc/mqueue.c:296:
+		iput(inode);
 		^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#566: FILE: ipc/mqueue.c:308:
+static void init_once(void *foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:SPACING: No space is necessary after a cast
#568: FILE: ipc/mqueue.c:310:
+	struct mqueue_inode_info *p = (struct mqueue_inode_info *) foo;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: ipc/mqueue.c:335:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: ipc/mqueue.c:343:
+         $

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: ipc/mqueue.c:343:
+         $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: ipc/mqueue.c:343:
+         $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#607: FILE: ipc/mqueue.c:349:
+^I}; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: ipc/mqueue.c:351:
+^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#628: FILE: ipc/mqueue.c:370:
+static struct dentry *mqueue_lookup(struct inode * dir, struct dentry *dentry, struct nameidata *nd)
                                                                                                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#628: FILE: ipc/mqueue.c:370:
+static struct dentry *mqueue_lookup(struct inode * dir, struct dentry *dentry, struct nameidata *nd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: ipc/mqueue.c:371:
+{^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#637: FILE: ipc/mqueue.c:379:
+static int mqueue_create(struct inode *dir, struct dentry *dent, int mode, struct nameidata *nd)
                                                                                              ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#659: FILE: ipc/mqueue.c:401:
+	dir->i_ctime = dir->i_mtime = CURRENT_TIME;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: ipc/mqueue.c:412:
+*^IThis is routine for system read from queue file. $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#670: FILE: ipc/mqueue.c:412:
+/*
+*	This is routine for system read from queue file. 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: ipc/mqueue.c:413:
+*^ITo avoid mess with doing some $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#672: FILE: ipc/mqueue.c:414:
+*^Isort of mq_receive here we allow to read only queue size & $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: ipc/mqueue.c:415:
+* ^Inotification info (the only values that are interesting from user $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#673: FILE: ipc/mqueue.c:415:
+* ^Inotification info (the only values that are interesting from user $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#677: FILE: ipc/mqueue.c:419:
+				loff_t * off)

CHECK:SPACING: No space is necessary after a cast
#693: FILE: ipc/mqueue.c:435:
+		retval = (ssize_t) - EFAULT;

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#693: FILE: ipc/mqueue.c:435:
+		retval = (ssize_t) - EFAULT;
 		                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#701: FILE: ipc/mqueue.c:443:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#716: FILE: ipc/mqueue.c:458:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#736: FILE: ipc/mqueue.c:478:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#737: FILE: ipc/mqueue.c:479:
+*  This cut&paste version of wait_event() without event checking & with $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#737: FILE: ipc/mqueue.c:479:
+/* 
+*  This cut&paste version of wait_event() without event checking & with 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: ipc/mqueue.c:482:
+void inline wait_exclusive(wait_queue_head_t * wq,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#740: FILE: ipc/mqueue.c:482:
+void inline wait_exclusive(wait_queue_head_t * wq,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINE_SPACING: Missing a blank line after declarations
#744: FILE: ipc/mqueue.c:486:
+	wait_queue_t wait;
+	init_waitqueue_entry(&wait, current);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#762: FILE: ipc/mqueue.c:504:
+	if (!list_empty(&(info->e_wait_q[sr].list)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#763: FILE: ipc/mqueue.c:505:
+		list_for_each_entry(ptr, &(info->e_wait_q[sr].list), list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ptr->list
#765: FILE: ipc/mqueue.c:507:
+				list_del(&(ptr->list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: ipc/mqueue.c:516:
+static inline void wq_add(struct mqueue_inode_info *info, int sr,
+			struct ext_wait_queue *tmp)

CHECK:BRACES: braces {} should be used on all arms of this statement
#780: FILE: ipc/mqueue.c:522:
+	if (list_empty(&info->e_wait_q[sr].list))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#782: FILE: ipc/mqueue.c:524:
+	else {

WARNING:RETURN_VOID: void function return statements are not generally useful
#793: FILE: ipc/mqueue.c:535:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: ipc/mqueue.c:537:
+/* removes from info->e_wait_q[sr] current process. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: ipc/mqueue.c:538:
+ * Only for wq_sleep(): as we are here current must be one $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#797: FILE: ipc/mqueue.c:539:
+ * before-first (last) (meaning first in order as our 'queue' is inversed) */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tmp->list
#802: FILE: ipc/mqueue.c:544:
+	list_del(&(tmp->list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#806: FILE: ipc/mqueue.c:548:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: ipc/mqueue.c:549:
+ * adds current process $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#808: FILE: ipc/mqueue.c:550:
+ * sr: SEND or RECV $

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#822: FILE: ipc/mqueue.c:564:
+		if ((current->pid == (list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list))->task->pid)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#823: FILE: ipc/mqueue.c:565:
+		if ((current->pid == (list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list))->task->pid)
+			&& ((info->attr.mq_curmsgs > 0 && sr == RECV)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#824: FILE: ipc/mqueue.c:566:
+			&& ((info->attr.mq_curmsgs > 0 && sr == RECV)
+			|| (info->attr.mq_curmsgs < info->attr.mq_maxmsg && sr == SEND)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: ipc/mqueue.c:572:
+^I^I^Ireturn -EINTR;^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!error'
#837: FILE: ipc/mqueue.c:579:
+		if ((!error) && (!signal_pending(current))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: ipc/mqueue.c:595:
+^I^I * if there is less then MAXMSG-1 messages - then wake_up was $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#855: FILE: ipc/mqueue.c:597:
+^I^I * (only one) process didn't start to continue running yet, $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#859: FILE: ipc/mqueue.c:601:
+		if ((info->attr.mq_curmsgs < info->attr.mq_maxmsg - 1)
+		    && (!list_empty(&info->e_wait_q[sr].list)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#860: FILE: ipc/mqueue.c:602:
+			wait_exclusive(&(info->wait_q2[sr]), info);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->attr.mq_curmsgs > 1'
#863: FILE: ipc/mqueue.c:605:
+		if ((info->attr.mq_curmsgs > 1) && (!list_empty(&info->e_wait_q[sr].list)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#864: FILE: ipc/mqueue.c:606:
+			wait_exclusive(&(info->wait_q2[sr]), info);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#866: FILE: ipc/mqueue.c:608:
+^I/* We can wake up now - either all are sleeping or $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#867: FILE: ipc/mqueue.c:609:
+	 * queue is empty. */

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#869: FILE: ipc/mqueue.c:611:
+		wake_up_process((list_entry(info->e_wait_q[sr].list.prev, struct ext_wait_queue, list))->task);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#871: FILE: ipc/mqueue.c:613:
+	wake_up_interruptible(&(info->wait_q[sr]));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: ipc/mqueue.c:616:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#876: FILE: ipc/mqueue.c:618:
+ * set limits $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#884: FILE: ipc/mqueue.c:626:
+	if (u_attr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#890: FILE: ipc/mqueue.c:632:
+		if (attr.mq_maxmsg == 0 || attr.mq_msgsize == 0
+		    || attr.mq_maxmsg > MQ_MAXMSG || attr.mq_msgsize > MQ_MSGSIZE) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: ipc/mqueue.c:636:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: ipc/mqueue.c:636:
+        }$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#901: FILE: ipc/mqueue.c:643:
+	if (u_attr != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#918: FILE: ipc/mqueue.c:660:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#933: FILE: ipc/mqueue.c:675:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#941: FILE: ipc/mqueue.c:683:
+		if (child+1 <= info->attr.mq_curmsgs &&
 		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#942: FILE: ipc/mqueue.c:684:
+^I^I    info->messages[child]->msg_prio < $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#943: FILE: ipc/mqueue.c:685:
+		    info->messages[child+1]->msg_prio)
 		                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#945: FILE: ipc/mqueue.c:687:
+^I^I    ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#945: FILE: ipc/mqueue.c:687:
+^I^I    ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#954: FILE: ipc/mqueue.c:696:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: ipc/mqueue.c:702:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#961: FILE: ipc/mqueue.c:703:
+ * The next function is only to split too long mq_send_ioctl $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: ipc/mqueue.c:709:
+^I/* notification $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: ipc/mqueue.c:710:
+^I * invoked when there is registered process and there isn't process $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#970: FILE: ipc/mqueue.c:712:
+	 * empty to not empty*/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#972: FILE: ipc/mqueue.c:714:
+	if (info->notify_task && list_empty(&info->e_wait_q[RECV].list)
+	    && info->attr.mq_curmsgs == 1) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#979: FILE: ipc/mqueue.c:721:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#984: FILE: ipc/mqueue.c:726:
+^I^I} else  if (info->notify.sigev_notify == SIGEV_THREAD || $

CHECK:BRACES: braces {} should be used on all arms of this statement
#999: FILE: ipc/mqueue.c:741:
+	if (arg.timeout) {
[...]
+	} else
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: ipc/mqueue.c:742:
+^I^Iif (copy_from_user(&ts, (struct timespec *) (long) arg.timeout, $

CHECK:SPACING: No space is necessary after a cast
#1000: FILE: ipc/mqueue.c:742:
+		if (copy_from_user(&ts, (struct timespec *) (long) arg.timeout, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1001: FILE: ipc/mqueue.c:743:
+		if (copy_from_user(&ts, (struct timespec *) (long) arg.timeout, 
+			sizeof(struct timespec)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1003: FILE: ipc/mqueue.c:745:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1004: FILE: ipc/mqueue.c:746:
+^I^Iif (ts.tv_nsec < 0 || ts.tv_sec < 0 $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1005: FILE: ipc/mqueue.c:747:
+		if (ts.tv_nsec < 0 || ts.tv_sec < 0 
+			|| ts.tv_nsec >= NSEC_PER_SEC)

CHECK:BRACES: Unbalanced braces around else statement
#1019: FILE: ipc/mqueue.c:761:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1025: FILE: ipc/mqueue.c:767:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: ipc/mqueue.c:772:
+^Istruct ioctl_mq_sndrcv arg;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1033: FILE: ipc/mqueue.c:775:
+^Ichar *msg_text_ptr;^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1037: FILE: ipc/mqueue.c:779:
+	i = error = 0;

CHECK:SPACING: No space is necessary after a cast
#1042: FILE: ipc/mqueue.c:784:
+	if (copy_from_user(&arg, (void *) u_arg, sizeof(arg)))

CHECK:SPACING: No space is necessary after a cast
#1045: FILE: ipc/mqueue.c:787:
+	if (arg.msg_prio >= (unsigned long) MQ_PRIO_MAX)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: ipc/mqueue.c:794:
+^I/* first try to allocate memory, before doing anything with $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1053: FILE: ipc/mqueue.c:795:
+	 * existing queues */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*msg_ptr)...) over kmalloc(sizeof(struct msg)...)
#1054: FILE: ipc/mqueue.c:796:
+	msg_ptr = kmalloc(sizeof(struct msg), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1057: FILE: ipc/mqueue.c:799:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#1064: FILE: ipc/mqueue.c:806:
+	if (copy_from_user(msg_text_ptr, (char *) (long) arg.msg_ptr, arg.msg_len)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: ipc/mqueue.c:809:
+^I}       $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1070: FILE: ipc/mqueue.c:812:
+	 * because of spinlock. kfree is called in wq_remove(_last) */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wq_ptr)...) over kmalloc(sizeof(struct ext_wait_queue)...)
#1071: FILE: ipc/mqueue.c:813:
+	wq_ptr = kmalloc(sizeof(struct ext_wait_queue), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wq_ptr"
#1072: FILE: ipc/mqueue.c:814:
+	if (wq_ptr == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1084: FILE: ipc/mqueue.c:826:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: ipc/mqueue.c:831:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: ipc/mqueue.c:831:
+       $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1091: FILE: ipc/mqueue.c:833:
+	 * set then. mq_receive wakes up only 1 process */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1092: FILE: ipc/mqueue.c:834:
+	if (info->attr.mq_curmsgs == info->attr.mq_maxmsg) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1096: FILE: ipc/mqueue.c:838:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1098: FILE: ipc/mqueue.c:840:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1112: FILE: ipc/mqueue.c:854:
+	msg_ptr->msg_prio = (unsigned int) arg.msg_prio;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1113: FILE: ipc/mqueue.c:855:
+^Imsg_ptr->mtext = msg_text_ptr;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: ipc/mqueue.c:856:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[0]
#1122: FILE: ipc/mqueue.c:864:
+	wake_up(&(info->wait_q2[0]));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1126: FILE: ipc/mqueue.c:868:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1129: FILE: ipc/mqueue.c:871:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1132: FILE: ipc/mqueue.c:874:
+^Ispin_unlock(&mq_lock);^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1145: FILE: ipc/mqueue.c:887:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1146: FILE: ipc/mqueue.c:888:
+ssize_t mq_receive_ioctl(struct inode * ino, long oflag,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1147: FILE: ipc/mqueue.c:889:
+			 struct ioctl_mq_sndrcv * u_arg)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1166: FILE: ipc/mqueue.c:908:
+        /* The same as in mq_send_ioctl */$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wq_ptr)...) over kmalloc(sizeof(struct ext_wait_queue)...)
#1167: FILE: ipc/mqueue.c:909:
+	wq_ptr = kmalloc(sizeof(struct ext_wait_queue), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wq_ptr"
#1168: FILE: ipc/mqueue.c:910:
+	if (wq_ptr == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: ipc/mqueue.c:927:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: ipc/mqueue.c:928:
+^I/* checks if queue is empty -> as O_NONBLOCK isn't set then $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1187: FILE: ipc/mqueue.c:929:
+	 * we must wait */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1188: FILE: ipc/mqueue.c:930:
+	if (info->attr.mq_curmsgs == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1192: FILE: ipc/mqueue.c:934:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[1]
#1205: FILE: ipc/mqueue.c:947:
+	wake_up(&(info->wait_q2[1]));

CHECK:SPACING: No space is necessary after a cast
#1212: FILE: ipc/mqueue.c:954:
+		if (put_user(msg_ptr->msg_prio, (long *) (long) arg.msg_prio)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1216: FILE: ipc/mqueue.c:958:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1216: FILE: ipc/mqueue.c:958:
+        }$

CHECK:SPACING: No space is necessary after a cast
#1217: FILE: ipc/mqueue.c:959:
+	if (copy_to_user((char *) (long) arg.msg_ptr, msg_ptr->mtext, msg_ptr->msg_len))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1231: FILE: ipc/mqueue.c:973:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#1239: FILE: ipc/mqueue.c:981:
+	if (u_notification != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->notify_task == current'
#1245: FILE: ipc/mqueue.c:987:
+	if ((info->notify_task == current) && (u_notification == NULL ||
+		notification.sigev_notify == SIGEV_NONE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_notification"
#1245: FILE: ipc/mqueue.c:987:
+	if ((info->notify_task == current) && (u_notification == NULL ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1246: FILE: ipc/mqueue.c:988:
+	if ((info->notify_task == current) && (u_notification == NULL ||
+		notification.sigev_notify == SIGEV_NONE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#1253: FILE: ipc/mqueue.c:995:
+	} else if (u_notification != NULL && notification.sigev_notify != SIGEV_NONE) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_mqstat"
#1270: FILE: ipc/mqueue.c:1012:
+	if (u_mqstat == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1286: FILE: ipc/mqueue.c:1028:
+/*
+*	IOCTL FUNCTION - demultiplexer for various mqueues operations

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1289: FILE: ipc/mqueue.c:1031:
+static int mqueue_ioctl_file(struct inode *inode, struct file *filp,
                                                                ^^^^

CHECK:SPACING: No space is necessary after a cast
#1298: FILE: ipc/mqueue.c:1040:
+		ret = mq_create_ioctl(inode, (struct kern_mq_attr *) arg);

CHECK:SPACING: No space is necessary after a cast
#1301: FILE: ipc/mqueue.c:1043:
+		ret = mq_send_ioctl(inode, filp->f_flags, (struct ioctl_mq_sndrcv *) arg);

CHECK:SPACING: No space is necessary after a cast
#1304: FILE: ipc/mqueue.c:1046:
+		ret = mq_receive_ioctl(inode, filp->f_flags, (struct ioctl_mq_sndrcv *) arg);

CHECK:SPACING: No space is necessary after a cast
#1307: FILE: ipc/mqueue.c:1049:
+		ret = mq_notify_ioctl(inode, (struct sigevent *) arg);

CHECK:SPACING: No space is necessary after a cast
#1310: FILE: ipc/mqueue.c:1052:
+		ret = mq_getattr_ioctl(inode, filp->f_flags, (struct kern_mq_attr *) arg);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1318: FILE: ipc/mqueue.c:1060:
+static struct inode_operations mqueue_dir_inode_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1324: FILE: ipc/mqueue.c:1066:
+static struct file_operations mqueue_file_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1346: FILE: ipc/mqueue.c:1088:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1350: FILE: ipc/mqueue.c:1092:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1352: FILE: ipc/mqueue.c:1094:
+	mqueue_inode_cachep = kmem_cache_create("mqueue_inode_cache",
+		sizeof(struct mqueue_inode_info), 0, SLAB_HWCACHE_ALIGN, init_once, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mqueue_inode_cachep"
#1354: FILE: ipc/mqueue.c:1096:
+	if (mqueue_inode_cachep == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1371: FILE: ipc/mqueue.c:1113:
+^I}^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1374: FILE: ipc/mqueue.c:1116:
+	max_queues_file = create_proc_entry("max_queues",0644,proc_fs_mqueue);
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1374: FILE: ipc/mqueue.c:1116:
+	max_queues_file = create_proc_entry("max_queues",0644,proc_fs_mqueue);
 	                                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#1375: FILE: ipc/mqueue.c:1117:
+	if(max_queues_file == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!max_queues_file"
#1375: FILE: ipc/mqueue.c:1117:
+	if(max_queues_file == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1381: FILE: ipc/mqueue.c:1123:
+^Imax_queues_file->owner = THIS_MODULE;^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1383: FILE: ipc/mqueue.c:1125:
+	max_sys_size_file = create_proc_entry("max_sys_size",0644,proc_fs_mqueue);
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1383: FILE: ipc/mqueue.c:1125:
+	max_sys_size_file = create_proc_entry("max_sys_size",0644,proc_fs_mqueue);
 	                                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1384: FILE: ipc/mqueue.c:1126:
+	if(max_sys_size_file == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!max_sys_size_file"
#1384: FILE: ipc/mqueue.c:1126:
+	if(max_sys_size_file == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1390: FILE: ipc/mqueue.c:1132:
+^Imax_sys_size_file->owner = THIS_MODULE;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1392: FILE: ipc/mqueue.c:1134:
+^Imsgs_size_file = create_proc_read_entry("msgs_size", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1393: FILE: ipc/mqueue.c:1135:
+^I^I^I^I^I^I0444, proc_fs_mqueue, $

ERROR:SPACING: space required before the open parenthesis '('
#1396: FILE: ipc/mqueue.c:1138:
+	if(msgs_size_file == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msgs_size_file"
#1396: FILE: ipc/mqueue.c:1138:
+	if(msgs_size_file == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1418: FILE: ipc/mqueue.c:1160:
+		printk(KERN_INFO "mqueue_inode_cache: not all structures were freed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1426: FILE: ipc/mqueue.c:1168:
+		printk(KERN_INFO "mqueue_inode_cache: not all structures were freed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1437: FILE: ipc/mqueue.c:1179:
+module_exit(exit_mqueue_fs) $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 120 errors, 79 warnings, 89 checks, 1333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000337898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
