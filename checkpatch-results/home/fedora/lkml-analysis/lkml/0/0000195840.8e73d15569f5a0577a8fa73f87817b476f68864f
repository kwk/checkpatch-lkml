CHECK:CAMELCASE: Avoid CamelCase: <oplockThread>
#48: FILE: fs/cifs/cifsfs.c:60:
+extern struct task_struct *oplockThread; /* remove sparse warning */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#48: FILE: fs/cifs/cifsfs.c:60:
+extern struct task_struct *oplockThread; /* remove sparse warning */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#49: FILE: fs/cifs/cifsfs.c:61:
+struct task_struct *oplockThread = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:CAMELCASE: Avoid CamelCase: <CIFSMaxBufSize>
#53: FILE: fs/cifs/cifsfs.c:64:
+MODULE_PARM_DESC(CIFSMaxBufSize, "Network buffer size (not including header). "

WARNING:SPLIT_STRING: quoted string split across lines
#54: FILE: fs/cifs/cifsfs.c:65:
+MODULE_PARM_DESC(CIFSMaxBufSize, "Network buffer size (not including header). "
+		 "Default: 16384 Range: 8192 to 130048");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#59: FILE: fs/cifs/cifsfs.c:69:
+MODULE_PARM_DESC(cifs_min_rcv, "Network buffers in pool. "
+		 "Default: 4 Range: 1 to 64");

WARNING:SPLIT_STRING: quoted string split across lines
#64: FILE: fs/cifs/cifsfs.c:73:
+MODULE_PARM_DESC(cifs_min_small, "Small network buffers in pool. "
+		 "Default: 30 Range: 2 to 256");

WARNING:SPLIT_STRING: quoted string split across lines
#69: FILE: fs/cifs/cifsfs.c:77:
+MODULE_PARM_DESC(cifs_max_pending, "Simultaneous requests to server. "
+		 "Default: 50 Range: 2 to 256");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sb->s_fs_info)...) over kmalloc(sizeof(struct cifs_sb_info)...)
#78: FILE: fs/cifs/cifsfs.c:95:
+	sb->s_fs_info = kmalloc(sizeof(struct cifs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#81: FILE: fs/cifs/cifsfs.c:97:
+	if (cifs_sb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#93: FILE: fs/cifs/cifsfs.c:105:
+			cERROR(1, ("cifs_mount failed w/return code = %d",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: fs/cifs/cifsfs.c:113:
+	/* if (cifs_sb->tcon->ses->server->maxBuf > MAX_CIFS_HDR_SIZE + 512)
+	    sb->s_blocksize = cifs_sb->tcon->ses->server->maxBuf -

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#104: FILE: fs/cifs/cifsfs.c:114:
+			      MAX_CIFS_HDR_SIZE; */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sb"
#148: FILE: fs/cifs/cifsfs.c:153:
+	if (cifs_sb == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#149: FILE: fs/cifs/cifsfs.c:154:
+		cFYI(1, ("Empty cifs superblock info passed to unmount"));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/cifs/cifsfs.c:193:
+    if (rc)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#206: FILE: fs/cifs/cifsfs.c:214:
+		/* file mode might have been restricted at mount time
+		on the client (above and beyond ACL on servers) for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#209: FILE: fs/cifs/cifsfs.c:216:
+		so allowing client to check permissions is useful */

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#221: FILE: fs/cifs/cifsfs.c:234:
+	    (struct cifsInodeInfo *)kmem_cache_alloc(cifs_inode_cachep,

CHECK:CAMELCASE: Avoid CamelCase: <cifsAttrs>
#226: FILE: fs/cifs/cifsfs.c:238:
+	cifs_inode->cifsAttrs = 0x20; /* default */

CHECK:CAMELCASE: Avoid CamelCase: <domainName>
#252: FILE: fs/cifs/cifsfs.c:275:
+				if (cifs_sb->tcon->ses->domainName)

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#279: FILE: fs/cifs/cifsfs.c:301:
+	if (pTcon)

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: fs/cifs/cifsfs.c:325:
+                cFYI(1, ("set type: 0x%x id: %d", quota_type, qid));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: fs/cifs/cifsfs.c:325:
+                cFYI(1, ("set type: 0x%x id: %d", quota_type, qid));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: fs/cifs/cifsfs.c:347:
+                cFYI(1, ("flags: 0x%x operation: 0x%x", flags, operation));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: fs/cifs/cifsfs.c:347:
+                cFYI(1, ("flags: 0x%x operation: 0x%x", flags, operation));$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#378: FILE: fs/cifs/cifsfs.c:398:
+/*	.drop_inode	= generic_delete_inode,
+	.delete_inode	= cifs_delete_inode, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#378: FILE: fs/cifs/cifsfs.c:398:
+	.delete_inode	= cifs_delete_inode, */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#396: FILE: fs/cifs/cifsfs.c:433:
+	if (file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#399: FILE: fs/cifs/cifsfs.c:435:
+	else if (file->f_dentry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#402: FILE: fs/cifs/cifsfs.c:437:
+	else if (file->f_dentry->d_inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cifs_sb"
#416: FILE: fs/cifs/cifsfs.c:447:
+		if (cifs_sb != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#427: FILE: fs/cifs/cifsfs.c:455:
+	if (CIFS_I(file->f_dentry->d_inode)->clientCanCacheRead) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#437: FILE: fs/cifs/cifsfs.c:462:
+		} */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#457: FILE: fs/cifs/cifsfs.c:477:
+	if (file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry"
#460: FILE: fs/cifs/cifsfs.c:479:
+	else if (file->f_dentry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->f_dentry->d_inode"
#463: FILE: fs/cifs/cifsfs.c:481:
+	else if (file->f_dentry->d_inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cifs_sb"
#479: FILE: fs/cifs/cifsfs.c:491:
+		if (cifs_sb != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#491: FILE: fs/cifs/cifsfs.c:500:
+	if (!CIFS_I(file->f_dentry->d_inode)->clientCanCacheAll)  {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#492: FILE: fs/cifs/cifsfs.c:501:
+		if (file->f_dentry->d_inode->i_mapping) {
 			filemap_fdatawrite(file->f_dentry->d_inode->i_mapping);
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: fs/cifs/cifsfs.c:553:
+^I.readlink^I= generic_readlink, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#672: FILE: fs/cifs/cifsfs.c:641:
+	if (cifs_min_rcv < 1)
[...]
 	else if (cifs_min_rcv > 64) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_req_poolp"
#688: FILE: fs/cifs/cifsfs.c:651:
+	if (cifs_req_poolp == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#714: FILE: fs/cifs/cifsfs.c:672:
+	if (cifs_min_small < 2)
[...]
 	else if (cifs_min_small > 256) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_sm_req_poolp"
#731: FILE: fs/cifs/cifsfs.c:683:
+	if (cifs_sm_req_poolp == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#741: FILE: fs/cifs/cifsfs.c:697:
+		printk(KERN_WARNING "cifs_destroy_request_cache: "

WARNING:SPLIT_STRING: quoted string split across lines
#742: FILE: fs/cifs/cifsfs.c:698:
+		printk(KERN_WARNING "cifs_destroy_request_cache: "
+		       "error not all structures were freed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#747: FILE: fs/cifs/cifsfs.c:701:
+		printk(KERN_WARNING "cifs_destroy_request_cache: "

WARNING:SPLIT_STRING: quoted string split across lines
#748: FILE: fs/cifs/cifsfs.c:702:
+		printk(KERN_WARNING "cifs_destroy_request_cache: "
+		       "cifs_small_rq free error\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#756: FILE: fs/cifs/cifsfs.c:708:
+					    sizeof (struct mid_q_entry), 0,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifs_mid_poolp"
#768: FILE: fs/cifs/cifsfs.c:716:
+	if (cifs_mid_poolp == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#776: FILE: fs/cifs/cifsfs.c:722:
+					       sizeof (struct oplock_q_entry),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#788: FILE: fs/cifs/cifsfs.c:738:
+		printk(KERN_WARNING "cifs_destroy_mids: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_destroy_mids', this function's name, in a string
#788: FILE: fs/cifs/cifsfs.c:738:
+		printk(KERN_WARNING "cifs_destroy_mids: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#789: FILE: fs/cifs/cifsfs.c:739:
+		printk(KERN_WARNING "cifs_destroy_mids: "
+		       "error not all structures were freed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#794: FILE: fs/cifs/cifsfs.c:742:
+		printk(KERN_WARNING "error not all oplock structures were "

WARNING:SPLIT_STRING: quoted string split across lines
#795: FILE: fs/cifs/cifsfs.c:743:
+		printk(KERN_WARNING "error not all oplock structures were "
+		       "freed\n");

CHECK:CAMELCASE: Avoid CamelCase: <GlobalOplock_Q>
#819: FILE: fs/cifs/cifsfs.c:762:
+		if (list_empty(&GlobalOplock_Q)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#831: FILE: fs/cifs/cifsfs.c:769:
+			if (oplock_item) {
[...]
+				not bother sending an oplock release if session
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#867: FILE: fs/cifs/cifsfs.c:795:
+				/* releasing a stale oplock after recent reconnection
+				of smb session using a now incorrect file

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 36)
#873: FILE: fs/cifs/cifsfs.c:800:
+				if (pTcon->tidStatus != CifsNeedReconnect) {
 				    rc = CIFSSMBLock(0, pTcon, netfid,

CHECK:CAMELCASE: Avoid CamelCase: <tidStatus>
#873: FILE: fs/cifs/cifsfs.c:800:
+				if (pTcon->tidStatus != CifsNeedReconnect) {

CHECK:CAMELCASE: Avoid CamelCase: <CifsNeedReconnect>
#873: FILE: fs/cifs/cifsfs.c:800:
+				if (pTcon->tidStatus != CifsNeedReconnect) {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#876: FILE: fs/cifs/cifsfs.c:802:
+					    0 /* len */ , 0 /* offset */, 0,
 					                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#880: FILE: fs/cifs/cifsfs.c:804:
+					    0 /* wait flag */ );

CHECK:CAMELCASE: Avoid CamelCase: <tcpSesAllocCount>
#896: FILE: fs/cifs/cifsfs.c:829:
+	atomic_set(&tcpSesAllocCount, 0);

WARNING:SPLIT_STRING: quoted string split across lines
#953: FILE: fs/cifs/cifsfs.c:895:
+MODULE_DESCRIPTION("VFS to access servers complying with the "
+		   "SNIA CIFS Specification e.g. Samba and Windows");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 30 warnings, 31 checks, 897 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
