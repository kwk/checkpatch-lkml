WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> > number to use as an index into the quotas file).  But only the top-level 

WARNING:TABSTOP: Statements should start on a tabstop
#196: FILE: quota.c:97:
+		  case 'Y':

WARNING:TABSTOP: Statements should start on a tabstop
#197: FILE: quota.c:98:
+		  case 't':

WARNING:TABSTOP: Statements should start on a tabstop
#199: FILE: quota.c:100:
+			  break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: quota.c:133:
+^Iif (!(flags & FL_USER) && !(flags & FL_GROUP) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#209: FILE: quota.c:134:
+	if (!(flags & FL_USER) && !(flags & FL_GROUP) 
+	    && !(flags & FL_TREE))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#223: FILE: quota.c:154:
+	if ((flags & (FL_USER|FL_TREE)) && (flags & FL_GROUP))
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 133 exceeds 100 columns
#298: FILE: quotacheck.c:66:
+int uwant, gwant, twant, ucheck, gcheck, tcheck;	/* Does user want to check user/group quota; Do we check user/group quota? */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#307: FILE: quotacheck.c:184:
+static void add_to_quota(int type, ino_t i_num, uid_t i_uid, gid_t i_gid, uid_t i_tid, mode_t i_mode,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#325: FILE: quotacheck.c:286:
+	printf(_("Utility for checking and repairing quota files.\n%s [-gucfinvdmtYMR] [-F <quota-format>] filesystem|-a\n"), progname);

WARNING:TABSTOP: Statements should start on a tabstop
#342: FILE: quotacheck.c:306:
+		  case 't':

WARNING:TABSTOP: Statements should start on a tabstop
#343: FILE: quotacheck.c:307:
+		  case 'Y':

WARNING:TABSTOP: Statements should start on a tabstop
#345: FILE: quotacheck.c:309:
+			  break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#441: FILE: quotacheck.c:859:
 	}
+	else if (type == TREEQUOTA) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#442: FILE: quotacheck.c:860:
+		if ((option = hasmntopt(mnt, MNTOPT_TREEQUOTA)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#461: FILE: quotacheck.c:917:
+			if ((cfmt = detect_filename_format(mnt, ucheck ? USRQUOTA : tcheck ? TREEQUOTA : GRPQUOTA)) == -1) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#461: FILE: quotacheck.c:917:
+			if ((cfmt = detect_filename_format(mnt, ucheck ? USRQUOTA : tcheck ? TREEQUOTA : GRPQUOTA)) == -1) {

WARNING:TABSTOP: Statements should start on a tabstop
#489: FILE: quotaon.c:90:
+		  case 't':

WARNING:TABSTOP: Statements should start on a tabstop
#490: FILE: quotaon.c:91:
+		  case 'Y':

WARNING:TABSTOP: Statements should start on a tabstop
#492: FILE: quotaon.c:93:
+			  break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#529: FILE: quotaops.c:105:
 		switch (handles[i]->qh_type) {
[...]
+			case TREEQUOTA:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == TREEQUOTA'
#560: FILE: quotasys.c:396:
+	if ((type == TREEQUOTA) && hasmntopt(mnt, MNTOPT_TREEQUOTA))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#569: FILE: quotasys.c:451:
+	else if (type == TREEQUOTA && (option = hasmntopt(mnt, MNTOPT_TREEQUOTA))) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#569: FILE: quotasys.c:451:
 	}
+	else if (type == TREEQUOTA && (option = hasmntopt(mnt, MNTOPT_TREEQUOTA))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#570: FILE: quotasys.c:452:
+		if (*(pathname = option + strlen(MNTOPT_TREEQUOTA)) == '=')

ERROR:SPACING: space prohibited before that close parenthesis ')'
#638: FILE: repquota.c:180:
+	if (type == USRQUOTA || type == TREEQUOTA ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#647: FILE: repquota.c:185:
+^I^I^Iif (pwent && !(dquot_cache[i].dq_flags & DQ_PRINTED)) {^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#659: FILE: repquota.c:195:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#671: FILE: repquota.c:249:
+	printf(_("%-9s       used    soft    hard  grace    used  soft  hard  grace\n"), (type == USRQUOTA)?_("User"):(type == GRPQUOTA)?_("Group"):_("Tree"));

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#671: FILE: repquota.c:249:
+	printf(_("%-9s       used    soft    hard  grace    used  soft  hard  grace\n"), (type == USRQUOTA)?_("User"):(type == GRPQUOTA)?_("Group"):_("Tree"));
 	                                                                                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#671: FILE: repquota.c:249:
+	printf(_("%-9s       used    soft    hard  grace    used  soft  hard  grace\n"), (type == USRQUOTA)?_("User"):(type == GRPQUOTA)?_("Group"):_("Tree"));
 	                                                                                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#671: FILE: repquota.c:249:
+	printf(_("%-9s       used    soft    hard  grace    used  soft  hard  grace\n"), (type == USRQUOTA)?_("User"):(type == GRPQUOTA)?_("Group"):_("Tree"));
 	                                                                                                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#671: FILE: repquota.c:249:
+	printf(_("%-9s       used    soft    hard  grace    used  soft  hard  grace\n"), (type == USRQUOTA)?_("User"):(type == GRPQUOTA)?_("Group"):_("Tree"));
 	                                                                                                                                           ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#693: FILE: rquota_server.c:228:
+			return (&result);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#710: FILE: set_limits_example.c:35:
+	if (quotactl(QCMD(Q_GETQUOTA, TREEQUOTA), block_device, from, (caddr_t) & dq) == 0) {

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#710: FILE: set_limits_example.c:35:
+	if (quotactl(QCMD(Q_GETQUOTA, TREEQUOTA), block_device, from, (caddr_t) & dq) == 0) {
 	                                                                        ^

CHECK:SPACING: No space is necessary after a cast
#711: FILE: set_limits_example.c:36:
+		if (quotactl(QCMD(Q_SETQLIM, TREEQUOTA), block_device, to, (caddr_t) & dq) == 0) {

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#711: FILE: set_limits_example.c:36:
+		if (quotactl(QCMD(Q_SETQLIM, TREEQUOTA), block_device, to, (caddr_t) & dq) == 0) {
 		                                                                     ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#712: FILE: set_limits_example.c:37:
+			return (0);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#714: FILE: set_limits_example.c:39:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#714: FILE: set_limits_example.c:39:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#715: FILE: set_limits_example.c:40:
+			errstr(

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#716: FILE: set_limits_example.c:41:
+				_("copy_tree_quota_limits: Failed to set treequota for uid %ld : %s\n"),

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_tree_quota_limits', this function's name, in a string
#716: FILE: set_limits_example.c:41:
+				_("copy_tree_quota_limits: Failed to set treequota for uid %ld : %s\n"),

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#718: FILE: set_limits_example.c:43:
+			return (1);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#721: FILE: set_limits_example.c:46:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#721: FILE: set_limits_example.c:46:
+	else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#722: FILE: set_limits_example.c:47:
+		errstr(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_tree_quota_limits', this function's name, in a string
#723: FILE: set_limits_example.c:48:
+			_("copy_tree_quota_limits: Failed to get treequota for uid %ld : %s\n"),

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#725: FILE: set_limits_example.c:50:
+		return (1);

WARNING:TABSTOP: Statements should start on a tabstop
#768: FILE: setquota.c:110:
+		  case 'Y':

WARNING:TABSTOP: Statements should start on a tabstop
#770: FILE: setquota.c:112:
+			  break;

WARNING:LONG_LINE: line length of 183 exceeds 100 columns
#788: FILE: setquota.c:256:
+		errstr(_("Can't write times for %s. Maybe kernel doesn't support such operation?\n"), type2name(flags & FL_USER ? USRQUOTA : flags & FL_GROUP ? GRPQUOTA : TREEQUOTA));

WARNING:LONG_LINE: line length of 267 exceeds 100 columns
#800: FILE: quotasys.c:778:
+		if (!CORRECT_FSTYPE(mnt->mnt_type) || hasmntopt(mnt, MNTOPT_NOQUOTA) || !(hasmntopt(mnt, MNTOPT_USRQUOTA) || hasmntopt(mnt, MNTOPT_GRPQUOTA) || hasmntopt(mnt, MNTOPT_TREEQUOTA) || hasmntopt(mnt, MNTOPT_QUOTA) || !strcmp(mnt->mnt_type, MNTTYPE_NFS))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 22 warnings, 14 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000104762.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
