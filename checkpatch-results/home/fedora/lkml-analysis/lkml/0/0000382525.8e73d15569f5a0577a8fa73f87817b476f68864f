ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#30: 
--- a/Documentation/Configure.help	Wed Mar 26 11:14:07 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/crc32.h:10:
+extern u32  crc32_le(u32 crc, unsigned char const *p, size_t len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/crc32.h:11:
+extern u32  crc32_be(u32 crc, unsigned char const *p, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/crc32.h:12:
+extern u32  bitreverse(u32 in);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: lib/crc32.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#187: FILE: lib/crc32.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: lib/crc32.c:15:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#210: FILE: lib/crc32.c:24:
+#include <asm/atomic.h>

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#213: FILE: lib/crc32.c:27:
+#define tole(x) __constant_cpu_to_le32(x)

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#214: FILE: lib/crc32.c:28:
+#define tobe(x) __constant_cpu_to_be32(x)

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#231: FILE: lib/crc32.c:45:
+ * be very very small.  If it breaks, you get to keep both pieces.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: lib/crc32.c:64:
+ * $

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: lib/crc32.c:69:
+	int i;
+	while (len--) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: lib/crc32.c:84:
+ * $

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#275: FILE: lib/crc32.c:89:
+	const u32      *b =(u32 *)p;
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#279: FILE: lib/crc32.c:93:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)
                                                          ^

ERROR:SPACING: space prohibited after that open square bracket '['
#279: FILE: lib/crc32.c:93:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)

ERROR:SPACING: space prohibited before that close square bracket ']'
#279: FILE: lib/crc32.c:93:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#279: FILE: lib/crc32.c:93:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#281: FILE: lib/crc32.c:95:
+#  define DO_CRC(x) crc = tab[ ((crc >> 24) ^ (x)) & 255] ^ (crc<<8)
                                                                 ^

ERROR:SPACING: space prohibited after that open square bracket '['
#281: FILE: lib/crc32.c:95:
+#  define DO_CRC(x) crc = tab[ ((crc >> 24) ^ (x)) & 255] ^ (crc<<8)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#281: FILE: lib/crc32.c:95:
+#  define DO_CRC(x) crc = tab[ ((crc >> 24) ^ (x)) & 255] ^ (crc<<8)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#286: FILE: lib/crc32.c:100:
+	if(unlikely(((long)b)&3 && len)){
 	                     ^

ERROR:SPACING: space required before the open brace '{'
#286: FILE: lib/crc32.c:100:
+	if(unlikely(((long)b)&3 && len)){

ERROR:SPACING: space required before the open parenthesis '('
#286: FILE: lib/crc32.c:100:
+	if(unlikely(((long)b)&3 && len)){

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#289: FILE: lib/crc32.c:103:
+		} while ((--len) && ((long)b)&3 );
 		                             ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#289: FILE: lib/crc32.c:103:
+		} while ((--len) && ((long)b)&3 );

ERROR:SPACING: space required before the open brace '{'
#291: FILE: lib/crc32.c:105:
+	if(likely(len >= 4)){

ERROR:SPACING: space required before the open parenthesis '('
#291: FILE: lib/crc32.c:105:
+	if(likely(len >= 4)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: lib/crc32.c:108:
+^I        len = len >> 2;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open brace '{'
#307: FILE: lib/crc32.c:121:
+	if(len){

ERROR:SPACING: space required before the open parenthesis '('
#307: FILE: lib/crc32.c:121:
+	if(len){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: lib/crc32.c:163:
+ * $

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: lib/crc32.c:168:
+	int i;
+	while (len--) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: lib/crc32.c:185:
+ * $

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#376: FILE: lib/crc32.c:190:
+	const u32      *b =(u32 *)p;
 	                  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#380: FILE: lib/crc32.c:194:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)
                                                          ^

ERROR:SPACING: space prohibited after that open square bracket '['
#380: FILE: lib/crc32.c:194:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)

ERROR:SPACING: space prohibited before that close square bracket ']'
#380: FILE: lib/crc32.c:194:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#380: FILE: lib/crc32.c:194:
+#  define DO_CRC(x) crc = tab[ (crc ^ (x)) & 255 ] ^ (crc>>8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#382: FILE: lib/crc32.c:196:
+#  define DO_CRC(x) crc = tab[ ((crc >> 24) ^ (x)) & 255] ^ (crc<<8)
                                                                 ^

ERROR:SPACING: space prohibited after that open square bracket '['
#382: FILE: lib/crc32.c:196:
+#  define DO_CRC(x) crc = tab[ ((crc >> 24) ^ (x)) & 255] ^ (crc<<8)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#382: FILE: lib/crc32.c:196:
+#  define DO_CRC(x) crc = tab[ ((crc >> 24) ^ (x)) & 255] ^ (crc<<8)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#387: FILE: lib/crc32.c:201:
+	if(unlikely(((long)b)&3 && len)){
 	                     ^

ERROR:SPACING: space required before the open brace '{'
#387: FILE: lib/crc32.c:201:
+	if(unlikely(((long)b)&3 && len)){

ERROR:SPACING: space required before the open parenthesis '('
#387: FILE: lib/crc32.c:201:
+	if(unlikely(((long)b)&3 && len)){

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#390: FILE: lib/crc32.c:204:
+		} while ((--len) && ((long)b)&3 );
 		                             ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#390: FILE: lib/crc32.c:204:
+		} while ((--len) && ((long)b)&3 );

ERROR:SPACING: space required before the open brace '{'
#392: FILE: lib/crc32.c:206:
+	if(likely(len >= 4)){

ERROR:SPACING: space required before the open parenthesis '('
#392: FILE: lib/crc32.c:206:
+	if(likely(len >= 4)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: lib/crc32.c:209:
+^I        len = len >> 2;$

ERROR:SPACING: space required before the open brace '{'
#408: FILE: lib/crc32.c:222:
+	if(len){

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: lib/crc32.c:222:
+	if(len){

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#447: FILE: lib/crc32.c:261:
+EXPORT_SYMBOL(crc32_le);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#448: FILE: lib/crc32.c:262:
+EXPORT_SYMBOL(crc32_be);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#449: FILE: lib/crc32.c:263:
+EXPORT_SYMBOL(bitreverse);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#496: FILE: lib/crc32.c:310:
+ * ^Imultiple = remainder & 0x80000000 ? CRCPOLY : 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#497: FILE: lib/crc32.c:311:
+ * ^Iremainder = (remainder << 1 | next_input_bit()) ^ multiple;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#516: FILE: lib/crc32.c:330:
+ * ^Imultiple = (remainder & 0x80000000) ? CRCPOLY : 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: lib/crc32.c:331:
+ * ^Iremainder = (remainder << 1) ^ multiple;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: lib/crc32.c:336:
+ * ^Imultiple = (remainder & 1) ? CRCPOLY : 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#523: FILE: lib/crc32.c:337:
+ * ^Iremainder = (remainder >> 1) ^ multiple;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#533: FILE: lib/crc32.c:347:
+ * ^Iremainder ^= next_input_byte() << 24;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#534: FILE: lib/crc32.c:348:
+ * ^Ifor (j = 0; j < 8; j++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#535: FILE: lib/crc32.c:349:
+ * ^I^Imultiple = (remainder & 0x80000000) ? CRCPOLY : 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#536: FILE: lib/crc32.c:350:
+ * ^I^Iremainder = (remainder << 1) ^ multiple;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#537: FILE: lib/crc32.c:351:
+ * ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#541: FILE: lib/crc32.c:355:
+ * ^Iremainder ^= next_input_byte();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#542: FILE: lib/crc32.c:356:
+ * ^Ifor (j = 0; j < 8; j++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#543: FILE: lib/crc32.c:357:
+ * ^I^Imultiple = (remainder & 1) ? CRCPOLY : 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: lib/crc32.c:358:
+ * ^I^Iremainder = (remainder << 1) ^ multiple;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#545: FILE: lib/crc32.c:359:
+ * ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: lib/crc32.c:373:
+ * the high bits, the high 8 bits in this case.  $

WARNING:TYPO_SPELLING: 'multile' may be misspelled - perhaps 'multiple'?
#561: FILE: lib/crc32.c:375:
+ * The multile we need in that case is the low 32 bits of a 40-bit
        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#583: FILE: lib/crc32.c:397:
+#if 0				/*Not used at present */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#592: FILE: lib/crc32.c:406:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#599: FILE: lib/crc32.c:413:
+		unsigned char x = *buf;
+		x = (x >> 4) | (x << 4);

CHECK:SPACING: No space is necessary after a cast
#609: FILE: lib/crc32.c:423:
+		*buf++ = (unsigned char) random();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#612: FILE: lib/crc32.c:426:
+#if 0				/* Not used at present */

CHECK:SPACING: No space is necessary after a cast
#615: FILE: lib/crc32.c:429:
+	buf[0] = (unsigned char) x;

CHECK:SPACING: No space is necessary after a cast
#616: FILE: lib/crc32.c:430:
+	buf[1] = (unsigned char) (x >> 8);

CHECK:SPACING: No space is necessary after a cast
#617: FILE: lib/crc32.c:431:
+	buf[2] = (unsigned char) (x >> 16);

CHECK:SPACING: No space is necessary after a cast
#618: FILE: lib/crc32.c:432:
+	buf[3] = (unsigned char) (x >> 24);

CHECK:SPACING: No space is necessary after a cast
#624: FILE: lib/crc32.c:438:
+	buf[0] = (unsigned char) (x >> 24);

CHECK:SPACING: No space is necessary after a cast
#625: FILE: lib/crc32.c:439:
+	buf[1] = (unsigned char) (x >> 16);

CHECK:SPACING: No space is necessary after a cast
#626: FILE: lib/crc32.c:440:
+	buf[2] = (unsigned char) (x >> 8);

CHECK:SPACING: No space is necessary after a cast
#627: FILE: lib/crc32.c:441:
+	buf[3] = (unsigned char) x;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#719: FILE: lib/crc32defs.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: lib/crc32defs.h:11:
+#ifndef CRC_LE_BITS $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#740: FILE: lib/crc32defs.h:22:
+#if CRC_LE_BITS > 8 || CRC_LE_BITS < 1 || CRC_LE_BITS & CRC_LE_BITS-1
                                                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#748: FILE: lib/crc32defs.h:30:
+#if CRC_BE_BITS > 8 || CRC_BE_BITS < 1 || CRC_BE_BITS & CRC_BE_BITS-1
                                                                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#755: FILE: lib/gen_crc32table.c:1:
+#include <stdio.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#761: FILE: lib/gen_crc32table.c:7:
+#define LE_TABLE_SIZE (1 << CRC_LE_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#762: FILE: lib/gen_crc32table.c:8:
+#define BE_TABLE_SIZE (1 << CRC_BE_BITS)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#764: FILE: lib/gen_crc32table.c:10:
+static u_int32_t crc32table_le[LE_TABLE_SIZE];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#765: FILE: lib/gen_crc32table.c:11:
+static u_int32_t crc32table_be[BE_TABLE_SIZE];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#776: FILE: lib/gen_crc32table.c:22:
+	unsigned i, j;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#777: FILE: lib/gen_crc32table.c:23:
+	u_int32_t crc = 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#793: FILE: lib/gen_crc32table.c:39:
+	unsigned i, j;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#794: FILE: lib/gen_crc32table.c:40:
+	u_int32_t crc = 0x80000000;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#805: FILE: lib/gen_crc32table.c:51:
+static void output_table(u_int32_t table[], int len, char *trans)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#817: FILE: lib/gen_crc32table.c:63:
+int main(int argc, char** argv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 34 warnings, 30 checks, 773 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382525.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
