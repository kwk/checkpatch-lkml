WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#23: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#24: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#	           ChangeSet	1.611   -> 1.612  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
#	 include/linux/ipc.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#	           ipc/msg.c	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#	include/linux/security.h	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	    security/dummy.c	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	security/capability.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#	           ipc/sem.c	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#	          ipc/util.c	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#	           ipc/shm.c	1.17    -> 1.18   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	 include/linux/msg.h	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# 02/09/26	sds@tislabs.com	1.612

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# [PATCH] LSM: SysV IPC hooks addition

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# The patch below adds the LSM hooks for System V IPC to the 2.5.38 kernel.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#47: 
--- a/include/linux/ipc.h	Thu Sep 26 13:23:57 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: include/linux/security.h:630:
+ *^IReturn 0 if permission is granted.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: include/linux/security.h:942:
+	int (*ipc_permission) (struct kern_ipc_perm * ipcp, short flag);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#236: FILE: include/linux/security.h:942:
+	int (*ipc_permission) (struct kern_ipc_perm * ipcp, short flag);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#237: FILE: include/linux/security.h:943:
+	int (*ipc_getinfo) (int id, int cmd);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: include/linux/security.h:945:
+	int (*msg_msg_alloc_security) (struct msg_msg * msg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#239: FILE: include/linux/security.h:945:
+	int (*msg_msg_alloc_security) (struct msg_msg * msg);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#240: FILE: include/linux/security.h:946:
+	void (*msg_msg_free_security) (struct msg_msg * msg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#240: FILE: include/linux/security.h:946:
+	void (*msg_msg_free_security) (struct msg_msg * msg);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: include/linux/security.h:948:
+	int (*msg_queue_alloc_security) (struct msg_queue * msq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#242: FILE: include/linux/security.h:948:
+	int (*msg_queue_alloc_security) (struct msg_queue * msq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: include/linux/security.h:949:
+	void (*msg_queue_free_security) (struct msg_queue * msq);

WARNING:SPACING: Unnecessary space before function pointer arguments
#243: FILE: include/linux/security.h:949:
+	void (*msg_queue_free_security) (struct msg_queue * msq);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: include/linux/security.h:950:
+	int (*msg_queue_associate) (struct msg_queue * msq, int msqid,

WARNING:SPACING: Unnecessary space before function pointer arguments
#244: FILE: include/linux/security.h:950:
+	int (*msg_queue_associate) (struct msg_queue * msq, int msqid,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: include/linux/security.h:952:
+	int (*msg_queue_msgctl) (struct msg_queue * msq, int msqid, int cmd);

WARNING:SPACING: Unnecessary space before function pointer arguments
#246: FILE: include/linux/security.h:952:
+	int (*msg_queue_msgctl) (struct msg_queue * msq, int msqid, int cmd);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: include/linux/security.h:953:
+	int (*msg_queue_msgsnd) (struct msg_queue * msq,

WARNING:SPACING: Unnecessary space before function pointer arguments
#247: FILE: include/linux/security.h:953:
+	int (*msg_queue_msgsnd) (struct msg_queue * msq,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: include/linux/security.h:954:
+				 struct msg_msg * msg, int msqid, int msqflg);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#249: FILE: include/linux/security.h:955:
+	int (*msg_queue_msgrcv) (struct msg_queue * msq,

WARNING:SPACING: Unnecessary space before function pointer arguments
#249: FILE: include/linux/security.h:955:
+	int (*msg_queue_msgrcv) (struct msg_queue * msq,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: include/linux/security.h:956:
+				 struct msg_msg * msg,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: include/linux/security.h:957:
+				 struct task_struct * target,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#254: FILE: include/linux/security.h:960:
+	int (*shm_alloc_security) (struct shmid_kernel * shp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#254: FILE: include/linux/security.h:960:
+	int (*shm_alloc_security) (struct shmid_kernel * shp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: include/linux/security.h:961:
+	void (*shm_free_security) (struct shmid_kernel * shp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#255: FILE: include/linux/security.h:961:
+	void (*shm_free_security) (struct shmid_kernel * shp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: include/linux/security.h:962:
+	int (*shm_associate) (struct shmid_kernel * shp, int shmid, int shmflg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#256: FILE: include/linux/security.h:962:
+	int (*shm_associate) (struct shmid_kernel * shp, int shmid, int shmflg);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: include/linux/security.h:963:
+	int (*shm_shmctl) (struct shmid_kernel * shp, int shmid, int cmd);

WARNING:SPACING: Unnecessary space before function pointer arguments
#257: FILE: include/linux/security.h:963:
+	int (*shm_shmctl) (struct shmid_kernel * shp, int shmid, int cmd);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#258: FILE: include/linux/security.h:964:
+	int (*shm_shmat) (struct shmid_kernel * shp, int shmid,

WARNING:SPACING: Unnecessary space before function pointer arguments
#258: FILE: include/linux/security.h:964:
+	int (*shm_shmat) (struct shmid_kernel * shp, int shmid,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: include/linux/security.h:967:
+	int (*sem_alloc_security) (struct sem_array * sma);

WARNING:SPACING: Unnecessary space before function pointer arguments
#261: FILE: include/linux/security.h:967:
+	int (*sem_alloc_security) (struct sem_array * sma);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: include/linux/security.h:968:
+	void (*sem_free_security) (struct sem_array * sma);

WARNING:SPACING: Unnecessary space before function pointer arguments
#262: FILE: include/linux/security.h:968:
+	void (*sem_free_security) (struct sem_array * sma);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: include/linux/security.h:969:
+	int (*sem_associate) (struct sem_array * sma, int semid, int semflg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#263: FILE: include/linux/security.h:969:
+	int (*sem_associate) (struct sem_array * sma, int semid, int semflg);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: include/linux/security.h:970:
+	int (*sem_semctl) (struct sem_array * sma, int semid, int cmd);

WARNING:SPACING: Unnecessary space before function pointer arguments
#264: FILE: include/linux/security.h:970:
+	int (*sem_semctl) (struct sem_array * sma, int semid, int cmd);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: include/linux/security.h:971:
+	int (*sem_semop) (struct sem_array * sma, int semid,

WARNING:SPACING: Unnecessary space before function pointer arguments
#265: FILE: include/linux/security.h:971:
+	int (*sem_semop) (struct sem_array * sma, int semid,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#266: FILE: include/linux/security.h:972:
+			  struct sembuf * sops, unsigned nsops, int alter);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: include/linux/security.h:972:
+			  struct sembuf * sops, unsigned nsops, int alter);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: ipc/msg.c:190:
+^I$

CHECK:BRACES: Unbalanced braces around else statement
#343: FILE: ipc/msg.c:318:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: ipc/msg.c:320:
+^I^I    ^Iret = security_ops->msg_queue_associate(msq, qid, msgflg);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: ipc/msg.c:320:
+^I^I    ^Iret = security_ops->msg_queue_associate(msq, qid, msgflg);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: ipc/msg.c:555:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: ipc/msg.c:625:
+		if(testmsg(msg,msr->r_msgtype,msr->r_mode) &&
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: ipc/msg.c:625:
+		if(testmsg(msg,msr->r_msgtype,msr->r_mode) &&
 		                             ^

ERROR:SPACING: space required before the open parenthesis '('
#403: FILE: ipc/msg.c:625:
+		if(testmsg(msg,msr->r_msgtype,msr->r_mode) &&

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#404: FILE: ipc/msg.c:626:
+		   !security_ops->msg_queue_msgrcv(msq, msg, msr->r_tsk, msr->r_msgtype, msr->r_mode)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#424: FILE: ipc/msg.c:779:
+		if(testmsg(msg,msgtyp,mode) &&
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#424: FILE: ipc/msg.c:779:
+		if(testmsg(msg,msgtyp,mode) &&
 		                     ^

ERROR:SPACING: space required before the open parenthesis '('
#424: FILE: ipc/msg.c:779:
+		if(testmsg(msg,msgtyp,mode) &&

CHECK:BRACES: Unbalanced braces around else statement
#479: FILE: ipc/sem.c:190:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: ipc/sem.c:192:
+			int semid = sem_buildid(id, sma->sem_perm.seq);
+			err = security_ops->sem_associate(sma, semid, semflg);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: ipc/sem.c:474:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: ipc/sem.c:1044:
+^Ierror = -EACCES;^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#604: FILE: ipc/shm.c:255:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: ipc/shm.c:257:
+			int shmid = shm_buildid(id, shp->shm_perm.seq);
+			err = security_ops->shm_associate(shp, shmid, shmflg);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: ipc/shm.c:453:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: ipc/shm.c:500:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: ipc/shm.c:569:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: ipc/shm.c:666:
+^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#724: FILE: security/capability.c:682:
+static int cap_ipc_permission (struct kern_ipc_perm *ipcp, short flag)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#729: FILE: security/capability.c:687:
+static int cap_ipc_getinfo (int id, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#734: FILE: security/capability.c:692:
+static int cap_msg_msg_alloc_security (struct msg_msg *msg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#739: FILE: security/capability.c:697:
+static void cap_msg_msg_free_security (struct msg_msg *msg)

WARNING:RETURN_VOID: void function return statements are not generally useful
#742: FILE: security/capability.c:700:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#744: FILE: security/capability.c:702:
+static int cap_msg_queue_alloc_security (struct msg_queue *msq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#749: FILE: security/capability.c:707:
+static void cap_msg_queue_free_security (struct msg_queue *msq)

WARNING:RETURN_VOID: void function return statements are not generally useful
#752: FILE: security/capability.c:710:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#754: FILE: security/capability.c:712:
+static int cap_msg_queue_associate (struct msg_queue *msq, int msgid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#760: FILE: security/capability.c:718:
+static int cap_msg_queue_msgctl (struct msg_queue *msq, int msgid, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#765: FILE: security/capability.c:723:
+static int cap_msg_queue_msgsnd (struct msg_queue *msq, struct msg_msg *msg,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#771: FILE: security/capability.c:729:
+static int cap_msg_queue_msgrcv (struct msg_queue *msq, struct msg_msg *msg,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#778: FILE: security/capability.c:736:
+static int cap_shm_alloc_security (struct shmid_kernel *shp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#783: FILE: security/capability.c:741:
+static void cap_shm_free_security (struct shmid_kernel *shp)

WARNING:RETURN_VOID: void function return statements are not generally useful
#786: FILE: security/capability.c:744:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#788: FILE: security/capability.c:746:
+static int cap_shm_associate (struct shmid_kernel *shp, int shmid, int shmflg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#793: FILE: security/capability.c:751:
+static int cap_shm_shmctl (struct shmid_kernel *shp, int shmid, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#798: FILE: security/capability.c:756:
+static int cap_shm_shmat (struct shmid_kernel *shp, int shmid, char *shmaddr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#804: FILE: security/capability.c:762:
+static int cap_sem_alloc_security (struct sem_array *sma)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#809: FILE: security/capability.c:767:
+static void cap_sem_free_security (struct sem_array *sma)

WARNING:RETURN_VOID: void function return statements are not generally useful
#812: FILE: security/capability.c:770:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#814: FILE: security/capability.c:772:
+static int cap_sem_associate (struct sem_array *sma, int semid, int semflg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#819: FILE: security/capability.c:777:
+static int cap_sem_semctl (struct sem_array *sma, int semid, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#824: FILE: security/capability.c:782:
+static int cap_sem_semop (struct sem_array *sma, int semid, struct sembuf *sops,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#825: FILE: security/capability.c:783:
+			  unsigned nsops, int alter)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#840: FILE: security/capability.c:893:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: security/capability.c:903:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#856: FILE: security/capability.c:909:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#872: FILE: security/dummy.c:496:
+static int dummy_ipc_permission (struct kern_ipc_perm *ipcp, short flag)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#877: FILE: security/dummy.c:501:
+static int dummy_ipc_getinfo (int id, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#882: FILE: security/dummy.c:506:
+static int dummy_msg_msg_alloc_security (struct msg_msg *msg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#887: FILE: security/dummy.c:511:
+static void dummy_msg_msg_free_security (struct msg_msg *msg)

WARNING:RETURN_VOID: void function return statements are not generally useful
#890: FILE: security/dummy.c:514:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#892: FILE: security/dummy.c:516:
+static int dummy_msg_queue_alloc_security (struct msg_queue *msq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#897: FILE: security/dummy.c:521:
+static void dummy_msg_queue_free_security (struct msg_queue *msq)

WARNING:RETURN_VOID: void function return statements are not generally useful
#900: FILE: security/dummy.c:524:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#902: FILE: security/dummy.c:526:
+static int dummy_msg_queue_associate (struct msg_queue *msq, int msqid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#908: FILE: security/dummy.c:532:
+static int dummy_msg_queue_msgctl (struct msg_queue *msq, int msqid, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#913: FILE: security/dummy.c:537:
+static int dummy_msg_queue_msgsnd (struct msg_queue *msq, struct msg_msg *msg,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#919: FILE: security/dummy.c:543:
+static int dummy_msg_queue_msgrcv (struct msg_queue *msq, struct msg_msg *msg,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#926: FILE: security/dummy.c:550:
+static int dummy_shm_alloc_security (struct shmid_kernel *shp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#931: FILE: security/dummy.c:555:
+static void dummy_shm_free_security (struct shmid_kernel *shp)

WARNING:RETURN_VOID: void function return statements are not generally useful
#934: FILE: security/dummy.c:558:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#936: FILE: security/dummy.c:560:
+static int dummy_shm_associate (struct shmid_kernel *shp, int shmid, int shmflg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#941: FILE: security/dummy.c:565:
+static int dummy_shm_shmctl (struct shmid_kernel *shp, int shmid, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#946: FILE: security/dummy.c:570:
+static int dummy_shm_shmat (struct shmid_kernel *shp, int shmid, char *shmaddr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#952: FILE: security/dummy.c:576:
+static int dummy_sem_alloc_security (struct sem_array *sma)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#957: FILE: security/dummy.c:581:
+static void dummy_sem_free_security (struct sem_array *sma)

WARNING:RETURN_VOID: void function return statements are not generally useful
#960: FILE: security/dummy.c:584:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#962: FILE: security/dummy.c:586:
+static int dummy_sem_associate (struct sem_array *sma, int semid, int semflg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#967: FILE: security/dummy.c:591:
+static int dummy_sem_semctl (struct sem_array *sma, int semid, int cmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#972: FILE: security/dummy.c:596:
+static int dummy_sem_semop (struct sem_array *sma, int semid,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#973: FILE: security/dummy.c:597:
+			    struct sembuf *sops, unsigned nsops, int alter)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#991: FILE: security/dummy.c:710:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: security/dummy.c:717:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1004: FILE: security/dummy.c:723:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429504.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 99 warnings, 3 checks, 893 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429504.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
