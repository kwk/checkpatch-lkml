WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: include/asm-generic/unwind.h:1:
+#ifndef _ASM_GENERIC_UNWIND_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/asm-generic/unwind.h:23:
+extern void unwind_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#59: FILE: include/asm-generic/unwind.h:25:
+extern void *

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: include/asm-generic/unwind.h:27:
+                 const void *table_start,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: include/asm-generic/unwind.h:27:
+                 const void *table_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: include/asm-generic/unwind.h:28:
+                 unsigned long table_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: include/asm-generic/unwind.h:28:
+                 unsigned long table_size);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#67: FILE: include/asm-generic/unwind.h:33:
+extern int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#67: FILE: include/asm-generic/unwind.h:33:
+extern int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#67: FILE: include/asm-generic/unwind.h:33:
+extern int

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: include/asm-generic/unwind.h:35:
+                       struct task_struct *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: include/asm-generic/unwind.h:35:
+                       struct task_struct *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: include/asm-generic/unwind.h:36:
+                       /*const*/ struct pt_regs *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#75: FILE: include/asm-generic/unwind.h:41:
+extern int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#75: FILE: include/asm-generic/unwind.h:41:
+extern int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#81: FILE: include/asm-generic/unwind.h:47:
+extern int

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: include/asm-generic/unwind.h:49:
+                    asmlinkage void (*callback)(struct unwind_frame_info *, void *arg),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: include/asm-generic/unwind.h:49:
+                    asmlinkage void (*callback)(struct unwind_frame_info *, void *arg),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: include/asm-generic/unwind.h:50:
+                    void *arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: include/asm-generic/unwind.h:50:
+                    void *arg);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#90: FILE: include/asm-generic/unwind.h:56:
+extern int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#98: FILE: include/asm-generic/unwind.h:64:
+extern int

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: include/asm-generic/unwind.h:75:
+                 const void *table_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: include/asm-generic/unwind.h:75:
+                 const void *table_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: include/asm-generic/unwind.h:76:
+                 unsigned long table_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: include/asm-generic/unwind.h:76:
+                 unsigned long table_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: include/asm-generic/unwind.h:87:
+                       struct task_struct *tsk,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: include/asm-generic/unwind.h:87:
+                       struct task_struct *tsk,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: include/asm-generic/unwind.h:88:
+                       const struct pt_regs *regs)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: include/asm-generic/unwind.h:88:
+                       const struct pt_regs *regs)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#124: FILE: include/asm-generic/unwind.h:90:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#130: FILE: include/asm-generic/unwind.h:96:
+	return -ENOSYS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: include/asm-generic/unwind.h:101:
+                    asmlinkage void (*callback)(struct unwind_frame_info *, void *arg),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: include/asm-generic/unwind.h:101:
+                    asmlinkage void (*callback)(struct unwind_frame_info *, void *arg),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: include/asm-generic/unwind.h:102:
+                    void *arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: include/asm-generic/unwind.h:102:
+                    void *arg)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#138: FILE: include/asm-generic/unwind.h:104:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#143: FILE: include/asm-generic/unwind.h:109:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#148: FILE: include/asm-generic/unwind.h:114:
+	return -ENOSYS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: kernel/module.c:1756:
+^I                                    (void *)sechdrs[unwindex].sh_addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: kernel/module.c:1757:
+^I                                    sechdrs[unwindex].sh_size);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#280: FILE: kernel/unwind.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#294: FILE: kernel/unwind.c:15:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#302: FILE: kernel/unwind.c:23:
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#302: FILE: kernel/unwind.c:23:
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#305: FILE: kernel/unwind.c:26:
+#define EXTRA_INFO(f) { \
+		VALUE_BUILD_BUG_ON(offsetof(struct unwind_frame_info, f) \
+		                   % FIELD_SIZEOF(struct unwind_frame_info, f)) \
+		* offsetof(struct unwind_frame_info, f) / FIELD_SIZEOF(struct unwind_frame_info, f), \
+		FIELD_SIZEOF(struct unwind_frame_info, f) \
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: kernel/unwind.c:28:
+^I^I                   % FIELD_SIZEOF(struct unwind_frame_info, f)) \$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#308: FILE: kernel/unwind.c:29:
+		* offsetof(struct unwind_frame_info, f) / FIELD_SIZEOF(struct unwind_frame_info, f), \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:NEW_TYPEDEFS: do not add new typedefs
#373: FILE: kernel/unwind.c:94:
+typedef unsigned long uleb128_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#374: FILE: kernel/unwind.c:95:
+typedef   signed long sleb128_t;

CHECK:CAMELCASE: Avoid CamelCase: <Nowhere>
#393: FILE: kernel/unwind.c:114:
+		Nowhere,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Memory>
#394: FILE: kernel/unwind.c:115:
+		Memory,

CHECK:CAMELCASE: Avoid CamelCase: <Register>
#395: FILE: kernel/unwind.c:116:
+		Register,

CHECK:CAMELCASE: Avoid CamelCase: <Value>
#396: FILE: kernel/unwind.c:117:
+		Value

CHECK:CAMELCASE: Avoid CamelCase: <cieStart>
#403: FILE: kernel/unwind.c:124:
+	const uint8_t *cieStart, *cieEnd;

CHECK:CAMELCASE: Avoid CamelCase: <cieEnd>
#403: FILE: kernel/unwind.c:124:
+	const uint8_t *cieStart, *cieEnd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#403: FILE: kernel/unwind.c:124:
+	const uint8_t *cieStart, *cieEnd;

CHECK:CAMELCASE: Avoid CamelCase: <codeAlign>
#404: FILE: kernel/unwind.c:125:
+	uleb128_t codeAlign;

CHECK:CAMELCASE: Avoid CamelCase: <dataAlign>
#405: FILE: kernel/unwind.c:126:
+	sleb128_t dataAlign;

CHECK:CAMELCASE: Avoid CamelCase: <stackDepth>
#410: FILE: kernel/unwind.c:131:
+	unsigned stackDepth:8;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#412: FILE: kernel/unwind.c:133:
+	const uint8_t *label;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#413: FILE: kernel/unwind.c:134:
+	const uint8_t *stack[MAX_STACK_DEPTH];

CHECK:CAMELCASE: Avoid CamelCase: <badCFA>
#416: FILE: kernel/unwind.c:137:
+static const struct cfa badCFA = {ARRAY_SIZE(reg_info), 1};

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#425: FILE: kernel/unwind.c:146:
+		if (table)
+				atomic_dec(&table->users);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#431: FILE: kernel/unwind.c:152:
+			if ((pc >= table->core.pc && pc < table->core.pc + table->core.range)
+			    || (pc >= table->init.pc && pc < table->init.pc + table->init.range)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#448: FILE: kernel/unwind.c:169:
+init_unwind_table (struct unwind_table *table, const char *name,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: kernel/unwind.c:170:
+                   const void *core_start, unsigned long core_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: kernel/unwind.c:170:
+                   const void *core_start, unsigned long core_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: kernel/unwind.c:171:
+                   const void *init_start, unsigned long init_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: kernel/unwind.c:171:
+                   const void *init_start, unsigned long init_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: kernel/unwind.c:172:
+                   const void *table_start, unsigned long table_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: kernel/unwind.c:172:
+                   const void *table_start, unsigned long table_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: kernel/unwind.c:192:
+^I                  _text, _end - _text,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: kernel/unwind.c:193:
+^I                  NULL, 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: kernel/unwind.c:194:
+^I                  __start_unwind, __end_unwind - __start_unwind);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: kernel/unwind.c:199:
+              const void *table_start,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: kernel/unwind.c:199:
+unwind_add_table(struct module *module,
+              const void *table_start,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: kernel/unwind.c:199:
+              const void *table_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: kernel/unwind.c:200:
+              unsigned long table_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: kernel/unwind.c:200:
+              unsigned long table_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: kernel/unwind.c:212:
+^I                  module->module_core, module->core_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: kernel/unwind.c:213:
+^I                  module->module_init, module->init_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: kernel/unwind.c:214:
+^I                  table_start, table_size);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#523: FILE: kernel/unwind.c:244:
+	if (prev->link) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#534: FILE: kernel/unwind.c:255:
+	} else

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#540: FILE: kernel/unwind.c:261:
+			msleep(1);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#546: FILE: kernel/unwind.c:267:
+get_uleb128(const uint8_t **pcur, const uint8_t *end)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#548: FILE: kernel/unwind.c:269:
+	const uint8_t *cur = *pcur;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#550: FILE: kernel/unwind.c:271:
+	unsigned shift;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#553: FILE: kernel/unwind.c:274:
+		if (shift + 7 > 8 * sizeof(value) && (*cur & 0x7fU) >= (1U << (8 * sizeof(value) - shift))) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#566: FILE: kernel/unwind.c:287:
+get_sleb128(const uint8_t **pcur, const uint8_t *end)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#568: FILE: kernel/unwind.c:289:
+	const uint8_t *cur = *pcur;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#570: FILE: kernel/unwind.c:291:
+	unsigned shift;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#573: FILE: kernel/unwind.c:294:
+		if (shift + 7 > 8 * sizeof(value) && (*cur & 0x7fU) >= (1U << (8 * sizeof(value) - shift))) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#588: FILE: kernel/unwind.c:309:
+read_pointer(const uint8_t **pLoc, const void *end, signed ptrType)

CHECK:CAMELCASE: Avoid CamelCase: <pLoc>
#588: FILE: kernel/unwind.c:309:
+read_pointer(const uint8_t **pLoc, const void *end, signed ptrType)

CHECK:CAMELCASE: Avoid CamelCase: <ptrType>
#588: FILE: kernel/unwind.c:309:
+read_pointer(const uint8_t **pLoc, const void *end, signed ptrType)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#588: FILE: kernel/unwind.c:309:
+read_pointer(const uint8_t **pLoc, const void *end, signed ptrType)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#592: FILE: kernel/unwind.c:313:
+		const uint8_t *p8;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#593: FILE: kernel/unwind.c:314:
+		const uint16_t *p16;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#594: FILE: kernel/unwind.c:315:
+		const uint32_t *p32;

ERROR:SPACING: space required before the open parenthesis '('
#601: FILE: kernel/unwind.c:322:
+	switch(ptrType & DW_EH_PE_FORM) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#627: FILE: kernel/unwind.c:348:
+		value = ptrType & DW_EH_PE_signed ? get_sleb128(&ptr.p8, end) : get_uleb128(&ptr.p8, end);

ERROR:SPACING: space required before the open parenthesis '('
#634: FILE: kernel/unwind.c:355:
+	switch(ptrType & DW_EH_PE_ADJUST) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#652: FILE: kernel/unwind.c:373:
+	const uint8_t *ptr = (const uint8_t *)(cie + 2);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#653: FILE: kernel/unwind.c:374:
+	unsigned version = *ptr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#659: FILE: kernel/unwind.c:380:
+		const uint8_t *end = (const uint8_t *)(cie + 1) + *cie;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#666: FILE: kernel/unwind.c:387:
+		if ((ptr = memchr(aug = (const void *)ptr, 0, end - ptr)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#671: FILE: kernel/unwind.c:392:
+		version <= 1 ? (void)++ptr : (void)get_uleb128(&ptr, end); // skip return address column

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required one side of that '++' (ctx:VxV)
#671: FILE: kernel/unwind.c:392:
+		version <= 1 ? (void)++ptr : (void)get_uleb128(&ptr, end); // skip return address column
 		                     ^

ERROR:SPACING: space required before the open parenthesis '('
#679: FILE: kernel/unwind.c:400:
+			switch(*aug) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#684: FILE: kernel/unwind.c:405:
+					signed ptrType = *ptr++;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#697: FILE: kernel/unwind.c:418:
+	return DW_EH_PE_native|DW_EH_PE_abs;
 	                      ^

CHECK:CAMELCASE: Avoid CamelCase: <processCFI>
#717: FILE: kernel/unwind.c:438:
+processCFI(const uint8_t *start,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#717: FILE: kernel/unwind.c:438:
+processCFI(const uint8_t *start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#718: FILE: kernel/unwind.c:439:
+           const uint8_t *end,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: kernel/unwind.c:439:
+           const uint8_t *end,$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#718: FILE: kernel/unwind.c:439:
+           const uint8_t *end,

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: kernel/unwind.c:440:
+           unsigned long targetLoc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: kernel/unwind.c:440:
+           unsigned long targetLoc,$

CHECK:CAMELCASE: Avoid CamelCase: <targetLoc>
#719: FILE: kernel/unwind.c:440:
+           unsigned long targetLoc,

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: kernel/unwind.c:441:
+           signed ptrType,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: kernel/unwind.c:441:
+           signed ptrType,$

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#720: FILE: kernel/unwind.c:441:
+           signed ptrType,

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: kernel/unwind.c:442:
+           struct unwind_state *state)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: kernel/unwind.c:442:
+           struct unwind_state *state)$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#724: FILE: kernel/unwind.c:445:
+		const uint8_t *p8;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#725: FILE: kernel/unwind.c:446:
+		const uint16_t *p16;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#726: FILE: kernel/unwind.c:447:
+		const uint32_t *p32;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state->label"
#733: FILE: kernel/unwind.c:454:
+		if (targetLoc == 0 && state->label == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#737: FILE: kernel/unwind.c:458:
+		switch(*ptr.p8 >> 6) {

ERROR:SPACING: space required before the open parenthesis '('
#741: FILE: kernel/unwind.c:462:
+			switch(*ptr.p8++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#745: FILE: kernel/unwind.c:466:
+				if ((state->loc = read_pointer(&ptr.p8, end, ptrType)) == 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#792: FILE: kernel/unwind.c:513:
+				if (state->stackDepth) {
[...]
+				} else
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#794: FILE: kernel/unwind.c:515:
+					const uint8_t *label = state->label;

CHECK:BRACES: Unbalanced braces around else statement
#803: FILE: kernel/unwind.c:524:
+				} else

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#829: FILE: kernel/unwind.c:550:
+				set_rule(value, Memory, (uleb128_t)0 - get_uleb128(&ptr.p8, end), state);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#854: FILE: kernel/unwind.c:575:
+	return result
+	   && ptr.p8 == end

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#855: FILE: kernel/unwind.c:576:
+	   && ptr.p8 == end
+	   && (targetLoc == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#856: FILE: kernel/unwind.c:577:
+	   && (targetLoc == 0
+	    || (/*todo While in theory this should apply, gcc in practice omits everything

ERROR:CODE_INDENT: code indent should use tabs where possible
#857: FILE: kernel/unwind.c:578:
+^I          past the function prolog, and hence the location never reaches the$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#857: FILE: kernel/unwind.c:578:
+	    || (/*todo While in theory this should apply, gcc in practice omits everything
+	          past the function prolog, and hence the location never reaches the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#858: FILE: kernel/unwind.c:579:
+^I          end of the function.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#859: FILE: kernel/unwind.c:580:
+^I        targetLoc < state->loc &&*/ state->label == NULL));$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state->label"
#859: FILE: kernel/unwind.c:580:
+	        targetLoc < state->loc &&*/ state->label == NULL));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#869: FILE: kernel/unwind.c:590:
+#define FRAME_REG(r, t) (((t *)frame)[reg_info[r].offs])

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#870: FILE: kernel/unwind.c:591:
+	const uint32_t *fde = NULL, *cie = NULL;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#871: FILE: kernel/unwind.c:592:
+	const uint8_t *ptr = NULL, *end = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <startLoc>
#872: FILE: kernel/unwind.c:593:
+	unsigned long startLoc = 0, endLoc = 0, cfa;

CHECK:CAMELCASE: Avoid CamelCase: <endLoc>
#872: FILE: kernel/unwind.c:593:
+	unsigned long startLoc = 0, endLoc = 0, cfa;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#873: FILE: kernel/unwind.c:594:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#874: FILE: kernel/unwind.c:595:
+	signed ptrType = -1;

CHECK:CAMELCASE: Avoid CamelCase: <retAddrReg>
#875: FILE: kernel/unwind.c:596:
+	uleb128_t retAddrReg = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#881: FILE: kernel/unwind.c:602:
+	if ((table = find_table(UNW_PC(frame))) != NULL && !(table->size & (sizeof(*fde) - 1))) {

CHECK:CAMELCASE: Avoid CamelCase: <tableSize>
#882: FILE: kernel/unwind.c:603:
+		unsigned long tableSize = table->size;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#892: FILE: kernel/unwind.c:613:
+			if ((fde[1] & (sizeof(*fde) - 1))
+			    || fde[1] > (unsigned long)(fde + 1) - (unsigned long)table->address)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#895: FILE: kernel/unwind.c:616:
+			if (*cie <= sizeof(*cie) + 4

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#896: FILE: kernel/unwind.c:617:
+			if (*cie <= sizeof(*cie) + 4
+			    || *cie >= fde[1] - sizeof(*fde)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#897: FILE: kernel/unwind.c:618:
+			    || *cie >= fde[1] - sizeof(*fde)
+			    || (*cie & (sizeof(*cie) - 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#898: FILE: kernel/unwind.c:619:
+			    || (*cie & (sizeof(*cie) - 1))
+			    || cie[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#899: FILE: kernel/unwind.c:620:
+			    || cie[1]
+			    || (ptrType = fde_pointer_type(cie)) < 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: kernel/unwind.c:627:
+^I^I^I                                 (const uint8_t *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: kernel/unwind.c:628:
+^I^I^I                                 ptrType & DW_EH_PE_indirect$

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: kernel/unwind.c:629:
+^I^I^I                                 ? ptrType$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#909: FILE: kernel/unwind.c:630:
+			                                 : ptrType & (DW_EH_PE_FORM|DW_EH_PE_signed));

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: kernel/unwind.c:630:
+^I^I^I                                 : ptrType & (DW_EH_PE_FORM|DW_EH_PE_signed));$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#909: FILE: kernel/unwind.c:630:
+			                                 : ptrType & (DW_EH_PE_FORM|DW_EH_PE_signed));
 			                                                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cie"
#915: FILE: kernel/unwind.c:636:
+	if (cie != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#920: FILE: kernel/unwind.c:641:
+		if ((state.version = *ptr) != 1)

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#925: FILE: kernel/unwind.c:646:
+				// check for ignorable (or already handled) nul-terminated augmentation string

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strchr"
#927: FILE: kernel/unwind.c:648:
+					if (strchr("LPR", *ptr) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cie"
#935: FILE: kernel/unwind.c:656:
+	if (cie != NULL) {

WARNING:TYPO_SPELLING: 'aligment' may be misspelled - perhaps 'alignment'?
#936: FILE: kernel/unwind.c:657:
+		// get code aligment factor
 		            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'aligment' may be misspelled - perhaps 'alignment'?
#938: FILE: kernel/unwind.c:659:
+		// get data aligment factor
 		            ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#940: FILE: kernel/unwind.c:661:
+		if (state.codeAlign == 0 || state.dataAlign == 0 || ptr >= end)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#942: FILE: kernel/unwind.c:663:
+		else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#948: FILE: kernel/unwind.c:669:
+			if (ptr > end
+			   || retAddrReg >= ARRAY_SIZE(reg_info)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#949: FILE: kernel/unwind.c:670:
+			   || retAddrReg >= ARRAY_SIZE(reg_info)
+			   || REG_INVALID(retAddrReg)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#950: FILE: kernel/unwind.c:671:
+			   || REG_INVALID(retAddrReg)
+			   || reg_info[retAddrReg].width != sizeof(unsigned long))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cie"
#954: FILE: kernel/unwind.c:675:
+	if (cie != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <augSize>
#961: FILE: kernel/unwind.c:682:
+			uleb128_t augSize = get_uleb128(&ptr, end);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#963: FILE: kernel/unwind.c:684:
+			if ((ptr += augSize) > end)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cie"
#967: FILE: kernel/unwind.c:688:
+	if (cie == NULL || fde == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fde"
#967: FILE: kernel/unwind.c:688:
+	if (cie == NULL || fde == NULL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#977: FILE: kernel/unwind.c:698:
+		if (UNW_SP(frame) < top && UNW_FP(frame) <= UNW_SP(frame) && bottom < UNW_FP(frame)
[...]
+		if (UNW_SP(frame) > top && UNW_FP(frame) >= UNW_SP(frame) && bottom > UNW_FP(frame)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#979: FILE: kernel/unwind.c:700:
+		if (UNW_SP(frame) > top && UNW_FP(frame) >= UNW_SP(frame) && bottom > UNW_FP(frame)
[...]
+		   && !((UNW_SP(frame) | UNW_FP(frame)) & (sizeof(unsigned long) - 1))) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#981: FILE: kernel/unwind.c:702:
+# endif
+		   && !((UNW_SP(frame) | UNW_FP(frame)) & (sizeof(unsigned long) - 1))) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 27)
#984: FILE: kernel/unwind.c:705:
+			if (!__get_user(link, (unsigned long *)(UNW_FP(frame) + FRAME_LINK_OFFSET))
[...]
+			   && link > UNW_FP(frame) && link < bottom

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#986: FILE: kernel/unwind.c:707:
+# if FRAME_RETADDR_OFFSET < 0
+			   && link > bottom && link < UNW_FP(frame)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#988: FILE: kernel/unwind.c:709:
+# else
+			   && link > UNW_FP(frame) && link < bottom

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#990: FILE: kernel/unwind.c:711:
+# endif
+			   && !(link & (sizeof(link) - 1))

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#991: FILE: kernel/unwind.c:712:
+			   && !__get_user(UNW_PC(frame), (unsigned long *)(UNW_FP(frame) + FRAME_RETADDR_OFFSET))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#991: FILE: kernel/unwind.c:712:
+			   && !(link & (sizeof(link) - 1))
+			   && !__get_user(UNW_PC(frame), (unsigned long *)(UNW_FP(frame) + FRAME_RETADDR_OFFSET))) {

CHECK:SPACING: space preferred before that '-' (ctx:ExE)
#994: FILE: kernel/unwind.c:715:
+					-
 					^

CHECK:SPACING: space preferred before that '+' (ctx:ExE)
#996: FILE: kernel/unwind.c:717:
+					+
 					^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1010: FILE: kernel/unwind.c:731:
+	if (!processCFI(ptr, end, UNW_PC(frame), ptrType, &state)
+	   || state.loc > endLoc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1011: FILE: kernel/unwind.c:732:
+	   || state.loc > endLoc
+	   || state.regs[retAddrReg].where == Nowhere

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1012: FILE: kernel/unwind.c:733:
+	   || state.regs[retAddrReg].where == Nowhere
+	   || state.cfa.reg >= ARRAY_SIZE(reg_info)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1013: FILE: kernel/unwind.c:734:
+	   || state.cfa.reg >= ARRAY_SIZE(reg_info)
+	   || reg_info[state.cfa.reg].width != sizeof(unsigned long)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1014: FILE: kernel/unwind.c:735:
+	   || reg_info[state.cfa.reg].width != sizeof(unsigned long)
+	   || state.cfa.offs % sizeof(unsigned long)) {

WARNING:MINMAX: min() should probably be min_t(unsigned long, UNW_SP(frame), cfa)
#1021: FILE: kernel/unwind.c:742:
+	startLoc = min((unsigned long)UNW_SP(frame), cfa);

WARNING:MINMAX: max() should probably be max_t(unsigned long, UNW_SP(frame), cfa)
#1022: FILE: kernel/unwind.c:743:
+	endLoc = max((unsigned long)UNW_SP(frame), cfa);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1024: FILE: kernel/unwind.c:745:
+# define CASES CASE(8); CASE(16); CASE(32)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1026: FILE: kernel/unwind.c:747:
+# define CASES CASE(8); CASE(16); CASE(32); CASE(64)

ERROR:SPACING: space required before the open parenthesis '('
#1034: FILE: kernel/unwind.c:755:
+		switch(state.regs[i].where) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1039: FILE: kernel/unwind.c:760:
+			if (state.regs[i].value >= ARRAY_SIZE(reg_info)
+			   || REG_INVALID(state.regs[i].value)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1040: FILE: kernel/unwind.c:761:
+			   || REG_INVALID(state.regs[i].value)
+			   || reg_info[i].width > reg_info[state.regs[i].value].width)

ERROR:SPACING: space required before the open parenthesis '('
#1042: FILE: kernel/unwind.c:763:
+			switch(reg_info[state.regs[i].value].width) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1045: FILE: kernel/unwind.c:766:
+				state.regs[i].value = FRAME_REG(state.regs[i].value, const uint##n##_t); \

ERROR:SPACING: space required before the open parenthesis '('
#1058: FILE: kernel/unwind.c:779:
+		switch(state.regs[i].where) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1061: FILE: kernel/unwind.c:782:
+			if (reg_info[i].width != sizeof(UNW_SP(frame))
+			   || &FRAME_REG(i, __typeof__(UNW_SP(frame))) != &UNW_SP(frame))

ERROR:SPACING: space required before the open parenthesis '('
#1066: FILE: kernel/unwind.c:787:
+			switch(reg_info[i].width) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1085: FILE: kernel/unwind.c:806:
+				if ((state.regs[i].value * state.dataAlign) % sizeof(unsigned long)
+				   || addr < startLoc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1086: FILE: kernel/unwind.c:807:
+				   || addr < startLoc
+				   || addr + sizeof(unsigned long) < addr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1087: FILE: kernel/unwind.c:808:
+				   || addr + sizeof(unsigned long) < addr
+				   || addr + sizeof(unsigned long) > endLoc)

ERROR:SPACING: space required before the open parenthesis '('
#1089: FILE: kernel/unwind.c:810:
+				switch(reg_info[i].width) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1091: FILE: kernel/unwind.c:812:
+					__get_user(FRAME_REG(i, uint##n##_t), (uint##n##_t *)addr); \

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1108: FILE: kernel/unwind.c:829:
+int unwind_init_frame_info(struct unwind_frame_info *info, struct task_struct *tsk, /*const*/ struct pt_regs *regs)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1131: FILE: kernel/unwind.c:852:
+                        asmlinkage void (*callback)(struct unwind_frame_info *, void *arg),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: kernel/unwind.c:852:
+                        asmlinkage void (*callback)(struct unwind_frame_info *, void *arg),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1132: FILE: kernel/unwind.c:853:
+                        void *arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: kernel/unwind.c:853:
+                        void *arg)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077063.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 71 warnings, 91 checks, 1121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077063.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
