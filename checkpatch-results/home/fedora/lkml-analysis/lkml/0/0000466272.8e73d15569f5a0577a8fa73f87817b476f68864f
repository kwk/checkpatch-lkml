WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#27: 
Please apply or atleast let me know if it should go to the dj tree first.
                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#96: 
diff -urN linux-2.5.7-base/Documentation/DocBook/kernel-api.tmpl linux-2.5.7-barriers/Documentation/DocBook/kernel-api.tmpl

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#107: FILE: Documentation/DocBook/kernel-api.tmpl:47:
+!Iinclude/asm-i386/system.h
  ^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#119: FILE: include/asm-alpha/system.h:143:
+#define memory_barrier() \
 __asm__ __volatile__("mb": : :"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#123: FILE: include/asm-alpha/system.h:146:
+#define read_barrier() \
 __asm__ __volatile__("mb": : :"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#127: FILE: include/asm-alpha/system.h:149:
+#define read_barrier_depends() \
+__asm__ __volatile__("mb": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#128: FILE: include/asm-alpha/system.h:150:
+__asm__ __volatile__("mb": : :"memory")
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#128: FILE: include/asm-alpha/system.h:150:
+__asm__ __volatile__("mb": : :"memory")
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#130: FILE: include/asm-alpha/system.h:152:
+#define write_barrier() \
 __asm__ __volatile__("wmb": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#133: FILE: include/asm-alpha/system.h:155:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#134: FILE: include/asm-alpha/system.h:156:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#135: FILE: include/asm-alpha/system.h:157:
+#define wmb()	write_barrier()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#159: FILE: include/asm-arm/system.h:41:
+#define memory_barrier() __asm__ __volatile__ ("" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: include/asm-arm/system.h:43:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#165: FILE: include/asm-arm/system.h:47:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#166: FILE: include/asm-arm/system.h:48:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#167: FILE: include/asm-arm/system.h:49:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#183: FILE: include/asm-arm/system.h:85:
+#define smp_read_barrier_depends()		do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#197: FILE: include/asm-cris/system.h:150:
+#define memory_barrier() __asm__ __volatile__ ("" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: include/asm-cris/system.h:152:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#202: FILE: include/asm-cris/system.h:155:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#203: FILE: include/asm-cris/system.h:156:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#204: FILE: include/asm-cris/system.h:157:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#214: FILE: include/asm-cris/system.h:167:
+#define smp_read_barrier_depends()     do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#282: FILE: include/asm-i386/system.h:342:
+#define memory_barrier() \
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#283: FILE: include/asm-i386/system.h:343:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#283: FILE: include/asm-i386/system.h:343:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#362: FILE: include/asm-i386/system.h:422:
+#define read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#385: FILE: include/asm-i386/system.h:444:
+#define write_barrier() \
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#386: FILE: include/asm-i386/system.h:445:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#386: FILE: include/asm-i386/system.h:445:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#389: FILE: include/asm-i386/system.h:447:
+#define write_barrier() \
+		__asm__ __volatile__ ("": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#390: FILE: include/asm-i386/system.h:448:
+		__asm__ __volatile__ ("": : :"memory")
 		                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#390: FILE: include/asm-i386/system.h:448:
+		__asm__ __volatile__ ("": : :"memory")
 		                            ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#393: FILE: include/asm-i386/system.h:451:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#394: FILE: include/asm-i386/system.h:452:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#395: FILE: include/asm-i386/system.h:453:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: include/asm-i386/system.h:463:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#443: FILE: include/asm-ia64/system.h:93:
+#define memory_barrier()	__asm__ __volatile__ ("mf" ::: "memory")

ERROR:SPACING: space required before the open parenthesis '('
#445: FILE: include/asm-ia64/system.h:95:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#448: FILE: include/asm-ia64/system.h:98:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#449: FILE: include/asm-ia64/system.h:99:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#450: FILE: include/asm-ia64/system.h:100:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#460: FILE: include/asm-ia64/system.h:110:
+# define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: include/asm-m68k/system.h:83:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#481: FILE: include/asm-m68k/system.h:88:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#482: FILE: include/asm-m68k/system.h:89:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#483: FILE: include/asm-m68k/system.h:90:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#487: FILE: include/asm-m68k/system.h:94:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#501: FILE: include/asm-mips/system.h:152:
+#define read_barrier()		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#502: FILE: include/asm-mips/system.h:153:
+#define read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#509: FILE: include/asm-mips/system.h:159:
+#define memory_barrier()				\
 __asm__ __volatile__(					\
 	"# prevent instructions being moved around\n\t"	\
 	".set\tnoreorder\n\t"				\

ERROR:SPACING: space required before the open parenthesis '('
#520: FILE: include/asm-mips/system.h:170:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#525: FILE: include/asm-mips/system.h:175:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#526: FILE: include/asm-mips/system.h:176:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#527: FILE: include/asm-mips/system.h:177:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#537: FILE: include/asm-mips/system.h:187:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#549: FILE: include/asm-mips64/system.h:140:
+#define memory_barrier()				\
 __asm__ __volatile__(					\
 	"# prevent instructions being moved around\n\t"	\
 	".set\tnoreorder\n\t"				\

ERROR:SPACING: space required before the open parenthesis '('
#560: FILE: include/asm-mips64/system.h:150:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#563: FILE: include/asm-mips64/system.h:153:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#564: FILE: include/asm-mips64/system.h:154:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#565: FILE: include/asm-mips64/system.h:155:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#575: FILE: include/asm-mips64/system.h:165:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#586: FILE: include/asm-parisc/system.h:53:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#594: FILE: include/asm-parisc/system.h:62:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#604: FILE: include/asm-parisc/system.h:125:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : :"memory")
                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#604: FILE: include/asm-parisc/system.h:125:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : :"memory")

ERROR:SPACING: space required before the open parenthesis '('
#607: FILE: include/asm-parisc/system.h:128:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#609: FILE: include/asm-parisc/system.h:130:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#610: FILE: include/asm-parisc/system.h:131:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#611: FILE: include/asm-parisc/system.h:132:
+#define wmb()	write_barrier()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#638: FILE: include/asm-ppc/system.h:35:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#639: FILE: include/asm-ppc/system.h:36:
+#define read_barrier()  __asm__ __volatile__ ("sync" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#640: FILE: include/asm-ppc/system.h:37:
+#define read_barrier_depends()  do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#641: FILE: include/asm-ppc/system.h:38:
+#define write_barrier()  __asm__ __volatile__ ("eieio" : : : "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#643: FILE: include/asm-ppc/system.h:40:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#644: FILE: include/asm-ppc/system.h:41:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#645: FILE: include/asm-ppc/system.h:42:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#658: FILE: include/asm-ppc/system.h:55:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#674: FILE: include/asm-s390/system.h:120:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#683: FILE: include/asm-s390/system.h:129:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#684: FILE: include/asm-s390/system.h:130:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#685: FILE: include/asm-s390/system.h:131:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#702: FILE: include/asm-s390x/system.h:133:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#714: FILE: include/asm-s390x/system.h:145:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#715: FILE: include/asm-s390x/system.h:146:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#716: FILE: include/asm-s390x/system.h:147:
+#define wmb()	write_barrier()

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#731: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")
                         	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#731: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")
                         	                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#731: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")

ERROR:SPACING: space required before the open parenthesis '('
#733: FILE: include/asm-sh/system.h:91:
+#define read_barrier_depends()	do { } while(0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#734: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")
                        		                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#734: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")
                        		                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#734: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#736: FILE: include/asm-sh/system.h:94:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#737: FILE: include/asm-sh/system.h:95:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#738: FILE: include/asm-sh/system.h:96:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#748: FILE: include/asm-sh/system.h:106:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#762: FILE: include/asm-sparc/system.h:278:
+#define memory_barrier()	__asm__ __volatile__ ("" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#764: FILE: include/asm-sparc/system.h:280:
+#define read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#770: FILE: include/asm-sparc/system.h:286:
+#define smp_read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#773: FILE: include/asm-sparc/system.h:289:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#774: FILE: include/asm-sparc/system.h:290:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#775: FILE: include/asm-sparc/system.h:291:
+#define wmb()	write_barrier()

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#788: FILE: include/asm-sparc64/system.h:99:
+#define memory_barrier()		\
 	membar("#LoadLoad | #LoadStore | #StoreStore | #StoreLoad");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#793: FILE: include/asm-sparc64/system.h:102:
+#define read_barrier_depends()		do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#800: FILE: include/asm-sparc64/system.h:109:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#801: FILE: include/asm-sparc64/system.h:110:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#802: FILE: include/asm-sparc64/system.h:111:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#812: FILE: include/asm-sparc64/system.h:121:
+#define smp_read_barrier_depends()	do { } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000466272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 61 errors, 49 warnings, 0 checks, 649 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000466272.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
