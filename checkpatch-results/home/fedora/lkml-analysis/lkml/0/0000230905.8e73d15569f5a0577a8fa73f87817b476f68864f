WARNING:TYPO_SPELLING: 'foward' may be misspelled - perhaps 'forward'?
#24: 
I've pulled the bigphysarea patch[1] foward to 2.6.9.  Maybe someone
                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -urN linux-2.6.9.orig/Documentation/bigphysarea.txt linux-2.6.9.bigphys/Documentation/bigphysarea.txt

WARNING:TYPO_SPELLING: 'garantee' may be misspelled - perhaps 'guarantee'?
#48: FILE: Documentation/bigphysarea.txt:8:
+is unable to garantee allocs of this order during a prolonged
              ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: Documentation/bigphysarea.txt:49:
+with 'base' set to the value returned by 'bigphysarea_alloc_pages'. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'continous' may be misspelled - perhaps 'continuous'?
#98: FILE: Documentation/bigphysarea.txt:58:
+The first function allocates 'size' bytes physically continous
                                                      ^^^^^^^^^

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#113: FILE: Makefile:4:
+EXTRAVERSION = -bigphys
 ^^^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#124: FILE: arch/i386/Kconfig:819:
+config BIGPHYS_AREA
+	bool "Big Physical Area"
+        ---help---
+          Enables kernel support for reserving large areas of physical
+          memory at boot-time for use by certain device drivers (such as
+          video framegrabbers, etc.) which require it. To use this
+          feature, boot the kernel with the boot-time option
+          'bigphysarea=nnn' where 'nnn' is the number of pages (a page
+          is usually 4K) to reserve.
+
+          See <file:Documentation/bigphysarea.txt> for more information.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#155: FILE: include/linux/bigphysarea.h:1:
+/* linux/mm/bigphysarea.h, M. Welsh (mdw@cs.cornell.edu)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/bigphysarea.h:24:
+extern caddr_t	bigphysarea_alloc(int size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/bigphysarea.h:25:
+extern void	bigphysarea_free(caddr_t addr, int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/bigphysarea.h:28:
+extern caddr_t	bigphysarea_alloc_pages(int count, int align, int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/bigphysarea.h:29:
+extern void	bigphysarea_free_pages(caddr_t base);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#199: FILE: mm/bigphysarea.c:1:
+/* linux/mm/bigphysarea.c, M. Welsh (mdw@cs.cornell.edu)

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#199: FILE: mm/bigphysarea.c:1:
+/* linux/mm/bigphysarea.c, M. Welsh (mdw@cs.cornell.edu)

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: mm/bigphysarea.c:9:
+ * This is a set of routines which allow you to reserve a large (?) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: mm/bigphysarea.c:11:
+ * by drivers. This memory is intended to be used for devices such as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: mm/bigphysarea.c:20:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#225: FILE: mm/bigphysarea.c:27:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#226: FILE: mm/bigphysarea.c:28:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#243: FILE: mm/bigphysarea.c:45:
+static int get_info(char* buf, char**, off_t, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#245: FILE: mm/bigphysarea.c:47:
+typedef struct range_struct {

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#256: FILE: mm/bigphysarea.c:58:
+static int	init_level = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#257: FILE: mm/bigphysarea.c:59:
+static int	bigphysarea_pages = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#258: FILE: mm/bigphysarea.c:60:
+static caddr_t	bigphysarea = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#259: FILE: mm/bigphysarea.c:61:
+static range_t	*free_list = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#260: FILE: mm/bigphysarea.c:62:
+static range_t	*used_list = NULL;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#261: FILE: mm/bigphysarea.c:63:
+static struct resource mem_resource = { "Bigphysarea", 0, 0, IORESOURCE_MEM|IORESOURCE_BUSY };
                                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#270: FILE: mm/bigphysarea.c:72:
+	if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#270: FILE: mm/bigphysarea.c:72:
+	if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#270: FILE: mm/bigphysarea.c:72:
+	if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {
 	                                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#280: FILE: mm/bigphysarea.c:82:
+	printk(KERN_INFO "bigphysarea: Allocated %d pages at 0x%p.\n",

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#286: FILE: mm/bigphysarea.c:88:
+__initcall(bigphysarea_init);

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: mm/bigphysarea.c:101:
+	int par;
+	if (get_option(&str,&par)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#299: FILE: mm/bigphysarea.c:101:
+	if (get_option(&str,&par)) {
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#299: FILE: mm/bigphysarea.c:101:
+	if (get_option(&str,&par)) {
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#302: FILE: mm/bigphysarea.c:104:
+		bigphysarea = alloc_bootmem_low_pages(bigphysarea_pages<<PAGE_SHIFT);
 		                                                       ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#304: FILE: mm/bigphysarea.c:106:
+			printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#304: FILE: mm/bigphysarea.c:106:
+			printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: mm/bigphysarea.c:106:
+			printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);
 			                                                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#310: FILE: mm/bigphysarea.c:112:
+		mem_resource.end = mem_resource.start + (bigphysarea_pages<<PAGE_SHIFT);
 		                                                          ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#316: FILE: mm/bigphysarea.c:118:
+__setup("bigphysarea=", bigphysarea_setup);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "free_list"
#327: FILE: mm/bigphysarea.c:129:
+		if (free_list != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#338: FILE: mm/bigphysarea.c:140:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#364: FILE: mm/bigphysarea.c:166:
+	while (*range_ptr != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: mm/bigphysarea.c:170:
+^I^Iif (aligned_base + count * PAGE_SIZE <= $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!range_ptr"
#373: FILE: mm/bigphysarea.c:175:
+	if (*range_ptr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_range"
#385: FILE: mm/bigphysarea.c:187:
+		if (new_range == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!align_range"
#390: FILE: mm/bigphysarea.c:192:
+		if (align_range == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_range"
#391: FILE: mm/bigphysarea.c:193:
+			if (new_range != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_range"
#403: FILE: mm/bigphysarea.c:205:
+	if (new_range != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: mm/bigphysarea.c:239:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: mm/bigphysarea.c:239:
+  $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#442: FILE: mm/bigphysarea.c:244:
+	     *range_ptr != NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!range_ptr"
#446: FILE: mm/bigphysarea.c:248:
+	if (*range_ptr == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: mm/bigphysarea.c:249:
+		printk("bigphysarea_free_pages(0x%08x), not allocated!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bigphysarea_free_pages', this function's name, in a string
#447: FILE: mm/bigphysarea.c:249:
+		printk("bigphysarea_free_pages(0x%08x), not allocated!\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#448: FILE: mm/bigphysarea.c:250:
+		       (unsigned)base);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#461: FILE: mm/bigphysarea.c:263:
+	     *range_ptr != NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range->next"
#472: FILE: mm/bigphysarea.c:274:
+	if (range->next != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#479: FILE: mm/bigphysarea.c:281:
+	if (prev != NULL &&

CHECK:LINE_SPACING: Please don't use multiple blank lines
#496: FILE: mm/bigphysarea.c:298:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#512: FILE: mm/bigphysarea.c:314:
+	if (init_level == 1)
+	  init2(GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#518: FILE: mm/bigphysarea.c:320:
+	for (ptr = free_list; ptr != NULL; ptr = ptr->next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#528: FILE: mm/bigphysarea.c:330:
+	for (ptr = used_list; ptr != NULL; ptr = ptr->next) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: mm/bigphysarea.c:341:
+^I  $

CHECK:SPACING: spaces preferred around that '/' (ctx:WxV)
#548: FILE: mm/bigphysarea.c:350:
+		     free_total / 1024, used_total /1024);
 		                                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000230905.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 20 warnings, 25 checks, 487 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000230905.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
