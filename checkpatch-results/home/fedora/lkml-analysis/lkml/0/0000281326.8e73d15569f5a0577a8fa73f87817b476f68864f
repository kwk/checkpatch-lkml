WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
o This patch has the changes required for attribute groups and misc. routines.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: fs/sysfs/group.c:75:
+			remove_files(dir,grp);
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: fs/sysfs/sysfs.h:4:
+extern struct super_block * sysfs_sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#115: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#115: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#115: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_dir_open(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: fs/sysfs/sysfs.h:17:
+extern int sysfs_dir_close(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: fs/sysfs/sysfs.h:18:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#124: FILE: fs/sysfs/sysfs.h:18:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#124: FILE: fs/sysfs/sysfs.h:18:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#124: FILE: fs/sysfs/sysfs.h:18:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#125: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#125: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'filldir_t' should also have an identifier name
#125: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: fs/sysfs/sysfs.h:20:
+extern void sysfs_umount_begin(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#126: FILE: fs/sysfs/sysfs.h:20:
+extern void sysfs_umount_begin(struct super_block *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/sysfs/sysfs.h:21:
+extern const unsigned char * sysfs_get_name(struct sysfs_dirent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: fs/sysfs/sysfs.h:21:
+extern const unsigned char * sysfs_get_name(struct sysfs_dirent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#127: FILE: fs/sysfs/sysfs.h:21:
+extern const unsigned char * sysfs_get_name(struct sysfs_dirent *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#128: FILE: fs/sysfs/sysfs.h:22:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: fs/sysfs/sysfs.h:22:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#128: FILE: fs/sysfs/sysfs.h:22:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#128: FILE: fs/sysfs/sysfs.h:22:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#128: FILE: fs/sysfs/sysfs.h:22:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: fs/sysfs/sysfs.h:23:
+extern void sysfs_drop_dentry(struct sysfs_dirent *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#129: FILE: fs/sysfs/sysfs.h:23:
+extern void sysfs_drop_dentry(struct sysfs_dirent *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#129: FILE: fs/sysfs/sysfs.h:23:
+extern void sysfs_drop_dentry(struct sysfs_dirent *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: fs/sysfs/sysfs.h:24:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#130: FILE: fs/sysfs/sysfs.h:24:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#130: FILE: fs/sysfs/sysfs.h:24:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#130: FILE: fs/sysfs/sysfs.h:24:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: fs/sysfs/sysfs.h:25:
+extern int init_symlink(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#131: FILE: fs/sysfs/sysfs.h:25:
+extern int init_symlink(struct inode *);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#136: FILE: fs/sysfs/sysfs.h:30:
+extern struct file_operations sysfs_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#137: FILE: fs/sysfs/sysfs.h:31:
+extern struct file_operations bin_fops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#138: FILE: fs/sysfs/sysfs.h:32:
+extern struct inode_operations sysfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#139: FILE: fs/sysfs/sysfs.h:33:
+extern struct file_operations sysfs_dir_operations;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: fs/sysfs/sysfs.h:36:
+	char * link_name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: fs/sysfs/sysfs.h:37:
+	struct kobject * target_kobj;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: fs/sysfs/sysfs.h:40:
+static inline $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: fs/sysfs/sysfs.h:41:
+struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * p, void * e, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: fs/sysfs/sysfs.h:41:
+struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * p, void * e, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: fs/sysfs/sysfs.h:41:
+struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * p, void * e, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#149: FILE: fs/sysfs/sysfs.h:43:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: fs/sysfs/sysfs.h:59:
+static inline struct sysfs_dirent * sysfs_get(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#165: FILE: fs/sysfs/sysfs.h:59:
+static inline struct sysfs_dirent * sysfs_get(struct sysfs_dirent * sd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: fs/sysfs/sysfs.h:62:
+^I^IWARN_ON(!atomic_read(&sd->s_count)); $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: fs/sysfs/sysfs.h:68:
+static inline void sysfs_put(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: fs/sysfs/sysfs.h:72:
+			struct sysfs_symlink * sl = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#179: FILE: fs/sysfs/sysfs.h:73:
+			struct sysfs_symlink * sl = sd->s_element;
+			kfree(sl->link_name);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: fs/sysfs/sysfs.h:87:
+		struct sysfs_dirent * sd = dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: fs/sysfs/sysfs.h:88:
+		struct sysfs_dirent * sd = dentry->d_fsdata;
+		if (sd->s_type & SYSFS_KOBJ_LINK) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#196: FILE: fs/sysfs/sysfs.h:88:
+		if (sd->s_type & SYSFS_KOBJ_LINK) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: fs/sysfs/sysfs.h:89:
+			struct sysfs_symlink * sl = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: fs/sysfs/sysfs.h:90:
+			struct sysfs_symlink * sl = sd->s_element;
+			kobj = kobject_get(sl->target_kobj);

CHECK:BRACES: Unbalanced braces around else statement
#199: FILE: fs/sysfs/sysfs.h:91:
+		} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 28 warnings, 13 checks, 135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281326.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
