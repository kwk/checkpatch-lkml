CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/fs.h:1357:
+extern void stackdev_init(struct kobject *, struct kobject *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#71: FILE: include/linux/fs.h:1357:
+extern void stackdev_init(struct kobject *, struct kobject *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#71: FILE: include/linux/fs.h:1357:
+extern void stackdev_init(struct kobject *, struct kobject *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/fs.h:1358:
+extern void stackdev_clear(struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#72: FILE: include/linux/fs.h:1358:
+extern void stackdev_clear(struct kobject *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/fs.h:1359:
+extern void stackdev_link(struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#73: FILE: include/linux/fs.h:1359:
+extern void stackdev_link(struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#73: FILE: include/linux/fs.h:1359:
+extern void stackdev_link(struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#73: FILE: include/linux/fs.h:1359:
+extern void stackdev_link(struct block_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: include/linux/fs.h:1360:
+extern void stackdev_link(struct block_device *,
+				struct kobject *, struct kobject *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/fs.h:1361:
+extern void stackdev_unlink(struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#75: FILE: include/linux/fs.h:1361:
+extern void stackdev_unlink(struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#75: FILE: include/linux/fs.h:1361:
+extern void stackdev_unlink(struct block_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#75: FILE: include/linux/fs.h:1361:
+extern void stackdev_unlink(struct block_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: include/linux/fs.h:1362:
+extern void stackdev_unlink(struct block_device *,
+				struct kobject *, struct kobject *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: fs/block_dev.c:450:
+static inline struct kobject * bdev_get_kobj(struct block_device *bdev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: fs/block_dev.c:535:
+void stackdev_link(struct block_device *slave,
+			struct kobject *slave_dir, struct kobject *holder_dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: fs/block_dev.c:553:
+void stackdev_unlink(struct block_device *slave,
+			struct kobject *slave_dir, struct kobject *holder_dev)

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#229: FILE: fs/block_dev.c:597:
+		bdev->bd_contains->bd_holders ++;
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103324.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 9 warnings, 8 checks, 181 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103324.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
