WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#69: 
diff -uNr linux-2.4.30.orig/include/linux/idr.h linux-2.4.30/include/linux/idr.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/idr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#74: FILE: include/linux/idr.h:2:
+ * include/linux/idr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: include/linux/idr.h:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#90: FILE: include/linux/idr.h:18:
+/* We can only use two of the bits in the top level because there is
+   only one possible bit in the top level (5 bits * 7 levels = 35

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#91: FILE: include/linux/idr.h:19:
+   bits, but you only use 31 bits in the id). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#97: FILE: include/linux/idr.h:25:
+/* We can only use two of the bits in the top level because there is
+   only one possible bit in the top level (6 bits * 6 levels = 36

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#98: FILE: include/linux/idr.h:26:
+   bits, but you only use 31 bits in the id). */

CHECK:BIT_MACRO: Prefer using the BIT macro
#104: FILE: include/linux/idr.h:32:
+#define IDR_SIZE (1 << IDR_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#105: FILE: include/linux/idr.h:33:
+#define IDR_MASK ((1 << IDR_BITS)-1)
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#107: FILE: include/linux/idr.h:35:
+#define MAX_ID_SHIFT (sizeof(int)*8 - 1)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#108: FILE: include/linux/idr.h:36:
+#define MAX_ID_BIT (1U << MAX_ID_SHIFT)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#112: FILE: include/linux/idr.h:40:
+#define MAX_LEVEL (MAX_ID_SHIFT + IDR_BITS - 1) / IDR_BITS

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#115: FILE: include/linux/idr.h:43:
+#define IDR_FREE_MAX MAX_LEVEL + MAX_LEVEL

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#119: FILE: include/linux/idr.h:47:
+	struct idr_layer	*ary[1<<IDR_BITS];
 	                	      ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#128: FILE: include/linux/idr.h:56:
+	spinlock_t	  lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: include/linux/idr.h:63:
+^I.layers ^I= 0,^I^I^I^I^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#139: FILE: include/linux/idr.h:67:
+}
+#define DEFINE_IDR(name)	struct idr name = IDR_INIT(name)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#139: FILE: include/linux/idr.h:67:
+#define DEFINE_IDR(name)	struct idr name = IDR_INIT(name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#146: FILE: include/linux/idr.h:74:
+int idr_pre_get(struct idr *idp, unsigned gfp_mask);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: lib/idr.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: lib/idr.c:9:
+ * Small id to pointer translation service.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: lib/idr.c:11:
+ * It uses a radix tree like structure as a sparse array indexed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: lib/idr.c:13:
+ * a new id quick.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: lib/idr.c:20:
+ * You can release ids at any time. When all ids are released, most of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: lib/idr.c:22:
+ * don't need to go to the memory "store" during an id allocate, just $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#213: FILE: lib/idr.c:43:
+	if ((p = idp->id_free)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#219: FILE: lib/idr.c:49:
+	return(p);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#246: FILE: lib/idr.c:76:
+int idr_pre_get(struct idr *idp, unsigned gfp_mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: lib/idr.c:80:
+		struct idr_layer *new;
+		new = kmem_cache_alloc(idr_layer_cache, gfp_mask);

ERROR:SPACING: space required before the open parenthesis '('
#251: FILE: lib/idr.c:81:
+		if(new == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#251: FILE: lib/idr.c:81:
+		if(new == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#275: FILE: lib/idr.c:105:
+		n = (id >> (IDR_BITS*l)) & IDR_MASK;
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#281: FILE: lib/idr.c:111:
+			id = (id | ((1 << (IDR_BITS*l))-1)) + 1;
 			                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#281: FILE: lib/idr.c:111:
+			id = (id | ((1 << (IDR_BITS*l))-1)) + 1;
 			                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#282: FILE: lib/idr.c:112:
+			if (!(p = pa[l])) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#289: FILE: lib/idr.c:119:
+			sh = IDR_BITS*l;
 			             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= MAX_ID_BIT'
#292: FILE: lib/idr.c:122:
+		if ((id >= MAX_ID_BIT) || (id < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < 0'
#292: FILE: lib/idr.c:122:
+		if ((id >= MAX_ID_BIT) || (id < 0))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#300: FILE: lib/idr.c:130:
+			if (!(new = alloc_layer(idp)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#323: FILE: lib/idr.c:153:
+		if (!(p = pa[++l]))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: lib/idr.c:165:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#341: FILE: lib/idr.c:171:
+		if (!(p = alloc_layer(idp)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#349: FILE: lib/idr.c:179:
+	while ((layers < MAX_LEVEL) && (id >= (1 << (layers*IDR_BITS)))) {
 	                                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#353: FILE: lib/idr.c:183:
+		if (!(new = alloc_layer(idp))) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#361: FILE: lib/idr.c:191:
+				new->bitmap = new->count = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#377: FILE: lib/idr.c:207:
+	return(v);

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: lib/idr.c:229:
+	int rv;
+	rv = idr_get_new_above_int(idp, ptr, starting_id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: lib/idr.c:263:
+	int rv;
+	rv = idr_get_new_above_int(idp, ptr, 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#451: FILE: lib/idr.c:281:
+	printk("idr_remove called for id=%d which is not allocated.\n", id);

ERROR:SPACING: space required before the open brace '{'
#473: FILE: lib/idr.c:303:
+	if (likely(p != NULL && test_bit(n, &p->bitmap))){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#473: FILE: lib/idr.c:303:
+	if (likely(p != NULL && test_bit(n, &p->bitmap))){

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#476: FILE: lib/idr.c:306:
+		while(*paa && ! --((**paa)->count)){
 		              ^

ERROR:SPACING: space required before the open brace '{'
#476: FILE: lib/idr.c:306:
+		while(*paa && ! --((**paa)->count)){

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: lib/idr.c:306:
+		while(*paa && ! --((**paa)->count)){

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#480: FILE: lib/idr.c:310:
+		if ( ! *paa )
 		     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#480: FILE: lib/idr.c:310:
+		if ( ! *paa )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#480: FILE: lib/idr.c:310:
+		if ( ! *paa )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: lib/idr.c:330:
+^Iif ( idp->top && idp->top->count == 1 && $

ERROR:SPACING: space prohibited after that open parenthesis '('
#500: FILE: lib/idr.c:330:
+	if ( idp->top && idp->top->count == 1 && 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idp->layers > 1'
#500: FILE: lib/idr.c:330:
+	if ( idp->top && idp->top->count == 1 && 
+	     (idp->layers > 1) &&
+	     idp->top->ary[0]){  // We can drop a layer

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: lib/idr.c:331:
+	if ( idp->top && idp->top->count == 1 && 
+	     (idp->layers > 1) &&

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#505: FILE: lib/idr.c:335:
+		idp->top->bitmap = idp->top->count = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: lib/idr.c:341:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#511: FILE: lib/idr.c:341:
+	while (idp->id_free_cnt >= IDR_FREE_MAX) {
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: lib/idr.c:382:
+static void idr_cache_ctor(void * idr_layer, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#552: FILE: lib/idr.c:382:
+static void idr_cache_ctor(void * idr_layer, 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: lib/idr.c:391:
+^I^Iidr_layer_cache = kmem_cache_create("idr_layer_cache", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: lib/idr.c:392:
+		idr_layer_cache = kmem_cache_create("idr_layer_cache", 
+			sizeof(struct idr_layer), 0, 0, idr_cache_ctor, NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184669.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 15 warnings, 23 checks, 499 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184669.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
