WARNING:TYPO_SPELLING: 'enviroment' may be misspelled - perhaps 'environment'?
#29: 
use variables from the enviroment (yuck!).
                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -uNr -Xdontdiff ../master/linux-2.4.14-pre3/fs/ufs/balloc.c linux/fs/ufs/balloc.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: fs/ufs/balloc.c:88:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#72: FILE: fs/ufs/balloc.c:88:
+
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/ufs/balloc.c:341:
+^I^Iif (uspi->s_minfree < 5 || fs32_to_cpu(sb, usb1->fs_cstotal.cs_nffree) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: fs/ufs/balloc.c:531:
+^Iif (!ufs_cg_chkmagic(sb, ucg)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: fs/ufs/balloc.c:573:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#417: FILE: fs/ufs/balloc.c:771:
+	fs32_add(sb, (u32*)ubh_get_addr(UCPI_UBH, ucpi->c_clustersumoff + (i << 2)), cnt);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#420: FILE: fs/ufs/balloc.c:773:
+		fs32_sub(sb, (u32*)ubh_get_addr(UCPI_UBH, ucpi->c_clustersumoff + (back << 2)), cnt);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#420: FILE: fs/ufs/balloc.c:773:
+		fs32_sub(sb, (u32*)ubh_get_addr(UCPI_UBH, ucpi->c_clustersumoff + (back << 2)), cnt);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#423: FILE: fs/ufs/balloc.c:775:
+		fs32_sub(sb, (u32*)ubh_get_addr(UCPI_UBH, ucpi->c_clustersumoff + (forw << 2)), cnt);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#423: FILE: fs/ufs/balloc.c:775:
+		fs32_sub(sb, (u32*)ubh_get_addr(UCPI_UBH, ucpi->c_clustersumoff + (forw << 2)), cnt);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: fs/ufs/dir.c:32:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/ufs/dir.c:40:
+static inline int ufs_match(struct super_block *sb, int len,
+		const char * const name, struct ufs_dir_entry * de)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: fs/ufs/dir.c:40:
+		const char * const name, struct ufs_dir_entry * de)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#532: FILE: fs/ufs/dir.c:63:
+	unsigned flags;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->d_reclen == 0'
#554: FILE: fs/ufs/dir.c:115:
+			if ((de->d_reclen == 0) || (ufs_get_de_namlen(sb, de) == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: fs/ufs/dir.c:144:
+				UFSD(("filldir(%s,%u)\n", de->d_name,
+							fs32_to_cpu(sb, de->d_ino)))

CHECK:SPACING: No space is necessary after a cast
#655: FILE: fs/ufs/dir.c:306:
+	else if (dir && ((char *) de - bh->b_data) + rlen >

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#763: FILE: fs/ufs/dir.c:439:
+		de = (struct ufs_dir_entry *) ((char *) de + fs16_to_cpu(sb, de->d_reclen));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#811: FILE: fs/ufs/dir.c:491:
+	UFSD(("ino %u, reclen %u, namlen %u, name %s\n",
+		fs32_to_cpu(sb, de->d_ino),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: fs/ufs/dir.c:503:
+				fs16_add(sb, &pde->d_reclen,
+					fs16_to_cpu(sb, dir->d_reclen));

CHECK:SPACING: No space is necessary after a cast
#842: FILE: fs/ufs/dir.c:521:
+		    ((char *) de + fs16_to_cpu(sb, de->d_reclen));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: fs/ufs/dir.c:585:
+	if (fs32_to_cpu(sb, de->d_ino) != inode->i_ino || de1->d_ino == 0 ||
+	     strcmp (".", de->d_name) || strcmp ("..", de1->d_name)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#904: FILE: fs/ufs/dir.c:585:
+	     strcmp (".", de->d_name) || strcmp ("..", de1->d_name)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#904: FILE: fs/ufs/dir.c:585:
+	     strcmp (".", de->d_name) || strcmp ("..", de1->d_name)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1036: FILE: fs/ufs/ialloc.c:212:
+^Iif (!ufs_cg_chkmagic(sb, ucg)) $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1095: FILE: fs/ufs/inode.c:109:
+		bh = bread(sb->s_dev, uspi->s_sbbase + fs32_to_cpu(sb, block)+(n>>shift),
 		                                                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1095: FILE: fs/ufs/inode.c:109:
+		bh = bread(sb->s_dev, uspi->s_sbbase + fs32_to_cpu(sb, block)+(n>>shift),
 		                                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: fs/ufs/inode.c:110:
+		bh = bread(sb->s_dev, uspi->s_sbbase + fs32_to_cpu(sb, block)+(n>>shift),
 				sb->s_blocksize);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1168: FILE: fs/ufs/inode.c:201:
+		if (lastblock && (tmp = fs32_to_cpu(sb, inode->u.ufs_i.i_u1.i_data[lastblock-1])))
 		                                                                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1168: FILE: fs/ufs/inode.c:201:
+		if (lastblock && (tmp = fs32_to_cpu(sb, inode->u.ufs_i.i_u1.i_data[lastblock-1])))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1175: FILE: fs/ufs/inode.c:207:
+^I^Iif ((!blockoff && *p) || $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1210: FILE: fs/ufs/inode.c:279:
+	if (block && (tmp = fs32_to_cpu(sb, ((u32*)bh->b_data)[block-1]) + uspi->s_fpb))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1210: FILE: fs/ufs/inode.c:279:
+	if (block && (tmp = fs32_to_cpu(sb, ((u32*)bh->b_data)[block-1]) + uspi->s_fpb))
 	                                                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1210: FILE: fs/ufs/inode.c:279:
+	if (block && (tmp = fs32_to_cpu(sb, ((u32*)bh->b_data)[block-1]) + uspi->s_fpb))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1240: FILE: fs/ufs/inode.c:489:
+	unsigned flags;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1317: FILE: fs/ufs/inode.c:580:
+	unsigned flags;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1385: FILE: fs/ufs/super.c:101:
+void ufs_print_super_stuff(struct super_block *sb,
+	struct ufs_super_block_first * usb1,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1385: FILE: fs/ufs/super.c:101:
+	struct ufs_super_block_first * usb1,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1388: FILE: fs/ufs/super.c:103:
+	struct ufs_super_block_third * usb3)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1424: FILE: fs/ufs/super.c:107:
+	printk("  magic:         0x%x\n", fs32_to_cpu(sb, usb3->fs_magic));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1425: FILE: fs/ufs/super.c:108:
+	printk("  sblkno:        %u\n", fs32_to_cpu(sb, usb1->fs_sblkno));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1426: FILE: fs/ufs/super.c:109:
+	printk("  cblkno:        %u\n", fs32_to_cpu(sb, usb1->fs_cblkno));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1427: FILE: fs/ufs/super.c:110:
+	printk("  iblkno:        %u\n", fs32_to_cpu(sb, usb1->fs_iblkno));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1428: FILE: fs/ufs/super.c:111:
+	printk("  dblkno:        %u\n", fs32_to_cpu(sb, usb1->fs_dblkno));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1429: FILE: fs/ufs/super.c:112:
+	printk("  cgoffset:      %u\n", fs32_to_cpu(sb, usb1->fs_cgoffset));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1430: FILE: fs/ufs/super.c:113:
+	printk("  ~cgmask:       0x%x\n", ~fs32_to_cpu(sb, usb1->fs_cgmask));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1431: FILE: fs/ufs/super.c:114:
+	printk("  size:          %u\n", fs32_to_cpu(sb, usb1->fs_size));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1432: FILE: fs/ufs/super.c:115:
+	printk("  dsize:         %u\n", fs32_to_cpu(sb, usb1->fs_dsize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1433: FILE: fs/ufs/super.c:116:
+	printk("  ncg:           %u\n", fs32_to_cpu(sb, usb1->fs_ncg));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1434: FILE: fs/ufs/super.c:117:
+	printk("  bsize:         %u\n", fs32_to_cpu(sb, usb1->fs_bsize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1435: FILE: fs/ufs/super.c:118:
+	printk("  fsize:         %u\n", fs32_to_cpu(sb, usb1->fs_fsize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1436: FILE: fs/ufs/super.c:119:
+	printk("  frag:          %u\n", fs32_to_cpu(sb, usb1->fs_frag));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1437: FILE: fs/ufs/super.c:120:
+	printk("  fragshift:     %u\n", fs32_to_cpu(sb, usb1->fs_fragshift));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1438: FILE: fs/ufs/super.c:121:
+	printk("  ~fmask:        %u\n", ~fs32_to_cpu(sb, usb1->fs_fmask));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1439: FILE: fs/ufs/super.c:122:
+	printk("  fshift:        %u\n", fs32_to_cpu(sb, usb1->fs_fshift));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1440: FILE: fs/ufs/super.c:123:
+	printk("  sbsize:        %u\n", fs32_to_cpu(sb, usb1->fs_sbsize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1441: FILE: fs/ufs/super.c:124:
+	printk("  spc:           %u\n", fs32_to_cpu(sb, usb1->fs_spc));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1442: FILE: fs/ufs/super.c:125:
+	printk("  cpg:           %u\n", fs32_to_cpu(sb, usb1->fs_cpg));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1443: FILE: fs/ufs/super.c:126:
+	printk("  ipg:           %u\n", fs32_to_cpu(sb, usb1->fs_ipg));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1444: FILE: fs/ufs/super.c:127:
+	printk("  fpg:           %u\n", fs32_to_cpu(sb, usb1->fs_fpg));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1445: FILE: fs/ufs/super.c:128:
+	printk("  csaddr:        %u\n", fs32_to_cpu(sb, usb1->fs_csaddr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1446: FILE: fs/ufs/super.c:129:
+	printk("  cssize:        %u\n", fs32_to_cpu(sb, usb1->fs_cssize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1447: FILE: fs/ufs/super.c:130:
+	printk("  cgsize:        %u\n", fs32_to_cpu(sb, usb1->fs_cgsize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1448: FILE: fs/ufs/super.c:131:
+	printk("  fstodb:        %u\n", fs32_to_cpu(sb, usb1->fs_fsbtodb));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1449: FILE: fs/ufs/super.c:132:
+	printk("  contigsumsize: %d\n", fs32_to_cpu(sb, usb3->fs_u2.fs_44.fs_contigsumsize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1450: FILE: fs/ufs/super.c:133:
+	printk("  postblformat:  %u\n", fs32_to_cpu(sb, usb3->fs_postblformat));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1451: FILE: fs/ufs/super.c:134:
+	printk("  nrpos:         %u\n", fs32_to_cpu(sb, usb3->fs_nrpos));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1452: FILE: fs/ufs/super.c:135:
+	printk("  ndir           %u\n", fs32_to_cpu(sb, usb1->fs_cstotal.cs_ndir));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1453: FILE: fs/ufs/super.c:136:
+	printk("  nifree         %u\n", fs32_to_cpu(sb, usb1->fs_cstotal.cs_nifree));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1454: FILE: fs/ufs/super.c:137:
+	printk("  nbfree         %u\n", fs32_to_cpu(sb, usb1->fs_cstotal.cs_nbfree));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1455: FILE: fs/ufs/super.c:138:
+	printk("  nffree         %u\n", fs32_to_cpu(sb, usb1->fs_cstotal.cs_nffree));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1481: FILE: fs/ufs/super.c:150:
+	printk("  magic:        %x\n", fs32_to_cpu(sb, cg->cg_magic));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1482: FILE: fs/ufs/super.c:151:
+	printk("  time:         %u\n", fs32_to_cpu(sb, cg->cg_time));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1483: FILE: fs/ufs/super.c:152:
+	printk("  cgx:          %u\n", fs32_to_cpu(sb, cg->cg_cgx));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1484: FILE: fs/ufs/super.c:153:
+	printk("  ncyl:         %u\n", fs16_to_cpu(sb, cg->cg_ncyl));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1485: FILE: fs/ufs/super.c:154:
+	printk("  niblk:        %u\n", fs16_to_cpu(sb, cg->cg_niblk));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1486: FILE: fs/ufs/super.c:155:
+	printk("  ndblk:        %u\n", fs32_to_cpu(sb, cg->cg_ndblk));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1487: FILE: fs/ufs/super.c:156:
+	printk("  cs_ndir:      %u\n", fs32_to_cpu(sb, cg->cg_cs.cs_ndir));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1488: FILE: fs/ufs/super.c:157:
+	printk("  cs_nbfree:    %u\n", fs32_to_cpu(sb, cg->cg_cs.cs_nbfree));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1489: FILE: fs/ufs/super.c:158:
+	printk("  cs_nifree:    %u\n", fs32_to_cpu(sb, cg->cg_cs.cs_nifree));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1490: FILE: fs/ufs/super.c:159:
+	printk("  cs_nffree:    %u\n", fs32_to_cpu(sb, cg->cg_cs.cs_nffree));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1491: FILE: fs/ufs/super.c:160:
+	printk("  rotor:        %u\n", fs32_to_cpu(sb, cg->cg_rotor));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1492: FILE: fs/ufs/super.c:161:
+	printk("  frotor:       %u\n", fs32_to_cpu(sb, cg->cg_frotor));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1493: FILE: fs/ufs/super.c:162:
+	printk("  irotor:       %u\n", fs32_to_cpu(sb, cg->cg_irotor));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1511: FILE: fs/ufs/super.c:168:
+	printk("  btotoff:      %u\n", fs32_to_cpu(sb, cg->cg_btotoff));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1512: FILE: fs/ufs/super.c:169:
+	printk("  boff:         %u\n", fs32_to_cpu(sb, cg->cg_boff));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1513: FILE: fs/ufs/super.c:170:
+	printk("  iuseoff:      %u\n", fs32_to_cpu(sb, cg->cg_iusedoff));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1514: FILE: fs/ufs/super.c:171:
+	printk("  freeoff:      %u\n", fs32_to_cpu(sb, cg->cg_freeoff));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1515: FILE: fs/ufs/super.c:172:
+	printk("  nextfreeoff:  %u\n", fs32_to_cpu(sb, cg->cg_nextfreeoff));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1516: FILE: fs/ufs/super.c:173:
+	printk("  clustersumoff %u\n", fs32_to_cpu(sb, cg->cg_u.cg_44.cg_clustersumoff));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1517: FILE: fs/ufs/super.c:174:
+	printk("  clusteroff    %u\n", fs32_to_cpu(sb, cg->cg_u.cg_44.cg_clusteroff));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1518: FILE: fs/ufs/super.c:175:
+	printk("  nclusterblks  %u\n", fs32_to_cpu(sb, cg->cg_u.cg_44.cg_nclusterblks));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1540: FILE: fs/ufs/super.c:368:
+		if (!ufs_cg_chkmagic (sb, (struct ufs_cylinder_group *) sb->u.ufs_sb.s_ucg[i]->b_data))

CHECK:SPACING: No space is necessary after a cast
#1540: FILE: fs/ufs/super.c:368:
+		if (!ufs_cg_chkmagic (sb, (struct ufs_cylinder_group *) sb->u.ufs_sb.s_ucg[i]->b_data))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1540: FILE: fs/ufs/super.c:368:
+		if (!ufs_cg_chkmagic (sb, (struct ufs_cylinder_group *) sb->u.ufs_sb.s_ucg[i]->b_data))

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1544: FILE: fs/ufs/super.c:371:
+		ufs_print_cylinder_stuff(sb, (struct ufs_cylinder_group *) sb->u.ufs_sb.s_ucg[i]->b_data);

CHECK:SPACING: No space is necessary after a cast
#1544: FILE: fs/ufs/super.c:371:
+		ufs_print_cylinder_stuff(sb, (struct ufs_cylinder_group *) sb->u.ufs_sb.s_ucg[i]->b_data);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1553: FILE: fs/ufs/super.c:446:
+	unsigned flags;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1568: FILE: fs/ufs/super.c:615:
+	switch (__constant_le32_to_cpu(usb3->fs_magic)) {
[...]
+		case UFS_MAGIC_LFN:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:CONSTANT_CONVERSION: __constant_le32_to_cpu should be le32_to_cpu
#1568: FILE: fs/ufs/super.c:615:
+	switch (__constant_le32_to_cpu(usb3->fs_magic)) {

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_be32_to_cpu should be be32_to_cpu
#1586: FILE: fs/ufs/super.c:623:
+	switch (__constant_be32_to_cpu(usb3->fs_magic)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1759: FILE: fs/ufs/super.c:816:
+	unsigned flags;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1775: FILE: fs/ufs/super.c:829:
+			ufs_set_fs_state(sb, usb1, usb3,
+					UFS_FSOK - fs32_to_cpu(sb, usb1->fs_time));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1797: FILE: fs/ufs/super.c:859:
+	unsigned flags;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1815: FILE: fs/ufs/super.c:897:
+			ufs_set_fs_state(sb, usb1, usb3,
+				UFS_FSOK - fs32_to_cpu(sb, usb1->fs_time));

WARNING:INLINE: plain inline is preferred over __inline
#1920: FILE: fs/ufs/swab.h:25:
+static __inline u64

WARNING:INLINE: plain inline is preferred over __inline
#1933: FILE: fs/ufs/swab.h:34:
+static __inline u64

WARNING:INLINE: plain inline is preferred over __inline
#1946: FILE: fs/ufs/swab.h:43:
+static __inline u32

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1950: FILE: fs/ufs/swab.h:47:
+		return *n = cpu_to_le64(le64_to_cpu(*n)+d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1953: FILE: fs/ufs/swab.h:49:
+		return *n = cpu_to_be64(be64_to_cpu(*n)+d);
 		                                       ^

WARNING:INLINE: plain inline is preferred over __inline
#1959: FILE: fs/ufs/swab.h:52:
+static __inline u32

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1963: FILE: fs/ufs/swab.h:56:
+		return *n = cpu_to_le64(le64_to_cpu(*n)-d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1966: FILE: fs/ufs/swab.h:58:
+		return *n = cpu_to_be64(be64_to_cpu(*n)-d);
 		                                       ^

WARNING:INLINE: plain inline is preferred over __inline
#1972: FILE: fs/ufs/swab.h:61:
+static __inline u32

WARNING:INLINE: plain inline is preferred over __inline
#1985: FILE: fs/ufs/swab.h:70:
+static __inline u32

WARNING:INLINE: plain inline is preferred over __inline
#1999: FILE: fs/ufs/swab.h:79:
+static __inline u32

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2003: FILE: fs/ufs/swab.h:83:
+		return *n = cpu_to_le32(le32_to_cpu(*n)+d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2006: FILE: fs/ufs/swab.h:85:
+		return *n = cpu_to_be32(be32_to_cpu(*n)+d);
 		                                       ^

WARNING:INLINE: plain inline is preferred over __inline
#2012: FILE: fs/ufs/swab.h:88:
+static __inline u32

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2016: FILE: fs/ufs/swab.h:92:
+		return *n = cpu_to_le32(le32_to_cpu(*n)-d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2019: FILE: fs/ufs/swab.h:94:
+		return *n = cpu_to_be32(be32_to_cpu(*n)-d);
 		                                       ^

WARNING:INLINE: plain inline is preferred over __inline
#2025: FILE: fs/ufs/swab.h:97:
+static __inline u16

WARNING:INLINE: plain inline is preferred over __inline
#2037: FILE: fs/ufs/swab.h:106:
+static __inline u16

WARNING:INLINE: plain inline is preferred over __inline
#2048: FILE: fs/ufs/swab.h:115:
+static __inline u16

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2052: FILE: fs/ufs/swab.h:119:
+		return *n = cpu_to_le16(le16_to_cpu(*n)+d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2054: FILE: fs/ufs/swab.h:121:
+		return *n = cpu_to_be16(be16_to_cpu(*n)+d);
 		                                       ^

WARNING:INLINE: plain inline is preferred over __inline
#2059: FILE: fs/ufs/swab.h:124:
+static __inline u16

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2063: FILE: fs/ufs/swab.h:128:
+		return *n = cpu_to_le16(le16_to_cpu(*n)-d);
 		                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2065: FILE: fs/ufs/swab.h:130:
+		return *n = cpu_to_be16(be16_to_cpu(*n)-d);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2209: FILE: fs/ufs/truncate.c:267:
+		if (*ubh_get_addr32(ind_ubh,i))
 		                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2267: FILE: fs/ufs/truncate.c:335:
+		if (*ubh_get_addr32 (dind_bh, i))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2297: FILE: fs/ufs/truncate.c:379:
+	if (!(tmp = fs32_to_cpu(sb, *p)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2316: FILE: fs/ufs/truncate.c:398:
+		if (*ubh_get_addr32 (tind_bh, i))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2649: FILE: fs/ufs/util.h:195:
+^Iinode->ui_u1.oldids.ui_suid = cpu_to_fs16(sb, value); $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2770: FILE: include/linux/ufs_fs_sb.h:121:
+	unsigned s_bytesex;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000503904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 85 warnings, 33 checks, 2580 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000503904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
