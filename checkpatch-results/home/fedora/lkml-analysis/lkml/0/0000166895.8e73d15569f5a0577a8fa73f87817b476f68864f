WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -ruNp 625-crypto-api-work.patch-old/crypto/Kconfig 625-crypto-api-work.patch-new/crypto/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: crypto/Kconfig:265:
+config CRYPTO_LZF
+	tristate "LZF compression algorithm"
+	depends on CRYPTO
+	help
+	  This is the LZF algorithm. It is especially useful for Suspend2,
+	  because it achieves good compression quickly.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: crypto/lzf.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: crypto/lzf.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: crypto/lzf.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: crypto/lzf.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: crypto/lzf.c:15:
+ * Software Foundation; either version 2 of the License, or (at your option) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: crypto/lzf.c:18:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: crypto/lzf.c:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: crypto/lzf.c:24:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: crypto/lzf.c:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: crypto/lzf.c:31:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#125: FILE: crypto/lzf.c:61:
+#include <asm/string.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#165: FILE: crypto/lzf.c:101:
+#define FRST(p) (((p[0]) << 8) + p[1])

ERROR:SPACING: space required after that ',' (ctx:VxV)
#166: FILE: crypto/lzf.c:102:
+#define NEXT(v,p) (((v) << 8) + p[2])
               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#166: FILE: crypto/lzf.c:102:
+#define NEXT(v,p) (((v) << 8) + p[2])

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#167: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#167: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#167: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#167: FILE: crypto/lzf.c:103:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#175: FILE: crypto/lzf.c:111:
+#if 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#177: FILE: crypto/lzf.c:113:
+# define FRST(p) (p[0] << 5) ^ p[1]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#177: FILE: crypto/lzf.c:113:
+# define FRST(p) (p[0] << 5) ^ p[1]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#178: FILE: crypto/lzf.c:114:
+# define NEXT(v,p) ((v) << 5) ^ p[2]
                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#178: FILE: crypto/lzf.c:114:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#178: FILE: crypto/lzf.c:114:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:BIT_MACRO: Prefer using the BIT macro
#182: FILE: crypto/lzf.c:118:
+#define MAX_LIT (1 <<  5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#183: FILE: crypto/lzf.c:119:
+#define MAX_OFF (1 << 13)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#224: FILE: crypto/lzf.c:160:
+		printk(KERN_WARNING

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: crypto/lzf.c:188:
+static int lzf_compress(void *context, const u8 * in_data, unsigned int in_len,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#253: FILE: crypto/lzf.c:189:
+			u8 * out_data, unsigned int *out_len)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#268: FILE: crypto/lzf.c:204:
+	if (ctx->first_call) {
+		ctx->first_call = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#287: FILE: crypto/lzf.c:223:
+			if (1

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#287: FILE: crypto/lzf.c:223:
+			if (1
[...]
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#289: FILE: crypto/lzf.c:225:
+			    && ref < ip	/* the next test will actually take care of this, but this is faster */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#289: FILE: crypto/lzf.c:225:
+#if INIT_HTAB && !USE_MEMCPY
+			    && ref < ip	/* the next test will actually take care of this, but this is faster */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#291: FILE: crypto/lzf.c:227:
+#endif
+			    && (off = ip - ref - 1) < MAX_OFF

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#292: FILE: crypto/lzf.c:228:
+			    && (off = ip - ref - 1) < MAX_OFF
+			    && ip + 4 < in_end && ref > in_data

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#294: FILE: crypto/lzf.c:230:
+#if STRICT_ALIGN
+			    && ref[0] == ip[0]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#295: FILE: crypto/lzf.c:231:
+			    && ref[0] == ip[0]
+			    && ref[1] == ip[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#296: FILE: crypto/lzf.c:232:
+			    && ref[1] == ip[1]
+			    && ref[2] == ip[2]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#298: FILE: crypto/lzf.c:234:
+#else
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

CHECK:SPACING: No space is necessary after a cast
#298: FILE: crypto/lzf.c:234:
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

WARNING:LINE_SPACING: Missing a blank line after declarations
#304: FILE: crypto/lzf.c:240:
+				unsigned int maxlen = in_end - ip - len;
+				maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#319: FILE: crypto/lzf.c:255:
+						*op++ = ip[lit];
 						^

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#347: FILE: crypto/lzf.c:283:
+				}
+				while (len--);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#372: FILE: crypto/lzf.c:308:
+				*op++ = ip[lit];
 				^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#387: FILE: crypto/lzf.c:323:
+			*op++ = ip[lit];
 			^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: crypto/lzf.c:331:
+static int lzf_decompress(void *context, const u8 * src, unsigned int slen,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#396: FILE: crypto/lzf.c:332:
+			  u8 * dst, unsigned int *dlen)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#404: FILE: crypto/lzf.c:340:
+	if (ctx->first_call) {
+		ctx->first_call = 0;
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#423: FILE: crypto/lzf.c:359:
+				*op++ = *ip++;
 				^

CHECK:SPACING: No space is necessary after a cast
#442: FILE: crypto/lzf.c:378:
+			if (ref < (u8 *) dst) {

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#451: FILE: crypto/lzf.c:387:
+				*op++ = *ref++;
 				^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#455: FILE: crypto/lzf.c:391:
+	while (op < out_end && ip < in_end);

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#455: FILE: crypto/lzf.c:391:
+	}
+	while (op < out_end && ip < in_end);

CHECK:SPACING: No space is necessary after a cast
#457: FILE: crypto/lzf.c:393:
+	*dlen = op - (u8 *) dst;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 10 warnings, 25 checks, 444 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
