WARNING:TYPO_SPELLING: 'useing' may be misspelled - perhaps 'using'?
#30: 
    - output message of useing nls instead of specified nls.
                        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -urN linux-2.5.2-pre11/fs/fat/dir.c fat_read-super-cleanup/fs/fat/dir.c

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#80: FILE: fs/fat/inode.c:308:
+			printk("FAT: fat option is obsolete, "

WARNING:SPLIT_STRING: quoted string split across lines
#81: FILE: fs/fat/inode.c:309:
+			printk("FAT: fat option is obsolete, "
+			       "not supported now\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#168: FILE: fs/fat/inode.c:580:
+			printk("FAT: bogus sectors-per-track value\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#174: FILE: fs/fat/inode.c:586:
+			printk("FAT: bogus number-of-heads value\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#184: FILE: fs/fat/inode.c:593:
 	if (!logical_sector_size
+	    || (logical_sector_size & (logical_sector_size - 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#185: FILE: fs/fat/inode.c:594:
+	    || (logical_sector_size & (logical_sector_size - 1))
+	    || (logical_sector_size < 512)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#186: FILE: fs/fat/inode.c:595:
+	    || (logical_sector_size < 512)
+	    || (PAGE_CACHE_SIZE < logical_sector_size)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#186: FILE: fs/fat/inode.c:595:
+	    || (PAGE_CACHE_SIZE < logical_sector_size)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: fs/fat/inode.c:597:
+			printk("FAT: bogus logical sector size %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#199: FILE: fs/fat/inode.c:606:
+			printk("FAT: bogus cluster size %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#216: FILE: fs/fat/inode.c:622:
+			printk("FAT: unable to set blocksize %d\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#221: FILE: fs/fat/inode.c:627:
+		if (bh == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#222: FILE: fs/fat/inode.c:628:
+			printk("FAT: unable to read boot sector"

WARNING:SPLIT_STRING: quoted string split across lines
#223: FILE: fs/fat/inode.c:629:
+			printk("FAT: unable to read boot sector"
+			       " (logical sector size = %lu)\n",

CHECK:SPACING: No space is necessary after a cast
#227: FILE: fs/fat/inode.c:633:
+		b = (struct fat_boot_sector *) bh->b_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fsinfo_bh"
#272: FILE: fs/fat/inode.c:660:
+		if (fsinfo_bh == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: fs/fat/inode.c:661:
+			printk("FAT: bread failed, FSINFO block"

WARNING:SPLIT_STRING: quoted string split across lines
#274: FILE: fs/fat/inode.c:662:
+			printk("FAT: bread failed, FSINFO block"
+			       " (sector = %lu)\n", sbi->fsinfo_sector);

WARNING:SPLIT_STRING: quoted string split across lines
#285: FILE: fs/fat/inode.c:671:
+			       "     Found signature1 0x%08x signature2 0x%08x"
+			       " (sector = %lu)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#311: FILE: fs/fat/inode.c:689:
+		printk("FAT: bogus directroy-entries per block\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#400: FILE: fs/fat/inode.c:727:
+			printk("FAT: codepage %s not found\n", buf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#407: FILE: fs/fat/inode.c:734:
+		printk("FAT: Using codepage %s\n", sbi->nls_disk->charset);

CHECK:BRACES: braces {} should be used on all arms of this statement
#418: FILE: fs/fat/inode.c:737:
+		if (sbi->options.iocharset != NULL) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sbi->options.iocharset"
#418: FILE: fs/fat/inode.c:737:
+		if (sbi->options.iocharset != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#421: FILE: fs/fat/inode.c:740:
+				printk("FAT: IO charset %s not found\n",

CHECK:BRACES: Unbalanced braces around else statement
#425: FILE: fs/fat/inode.c:744:
+		} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: fs/fat/inode.c:747:
+			printk("FAT: Using IO charset %s\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: fs/fat/inode.c:761:
+		printk("FAT: get root inode failed\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#448: FILE: fs/fat/inode.c:762:
+		iput(root_inode);
 		^^^^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#481: FILE: fs/fat/inode.c:781:
+	if (sbi->options.iocharset)
+		kfree(sbi->options.iocharset);

WARNING:SPLIT_STRING: quoted string split across lines
#495: FILE: fs/fat/misc.c:106:
+		       "     Found signature1 0x%08x signature2 0x%08x"
+		       " (sector = %lu)\n",

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#551: FILE: include/linux/msdos_fs.h:73:
+#define IS_FSINFO(x)	(CF_LE_L((x)->signature1) == FAT_FSINFO_SIG1	\
+			 && CF_LE_L((x)->signature2) == FAT_FSINFO_SIG2)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#552: FILE: include/linux/msdos_fs.h:74:
+#define IS_FSINFO(x)	(CF_LE_L((x)->signature1) == FAT_FSINFO_SIG1	\
+			 && CF_LE_L((x)->signature2) == FAT_FSINFO_SIG2)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485308.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 24 warnings, 11 checks, 498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485308.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
