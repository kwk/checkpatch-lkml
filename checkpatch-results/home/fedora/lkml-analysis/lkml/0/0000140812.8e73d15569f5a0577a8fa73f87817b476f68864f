WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#75: FILE: drivers/base/class.c:508:
+	class_dev->uevent_attr.attr.mode = S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#128: FILE: drivers/base/core.c:271:
+	dev->uevent_attr.attr.mode = S_IWUSR;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: drivers/block/genhd.c:340:
+static ssize_t disk_attr_store(struct kobject * kobj, struct attribute * attr,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: drivers/block/genhd.c:340:
+static ssize_t disk_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#158: FILE: drivers/block/genhd.c:345:
+		container_of(attr,struct disk_attribute,attr);
 		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#158: FILE: drivers/block/genhd.c:345:
+		container_of(attr,struct disk_attribute,attr);
 		                                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: drivers/block/genhd.c:358:
+static ssize_t disk_uevent_store(struct gendisk * disk,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#184: FILE: drivers/block/genhd.c:405:
 }
+static struct disk_attribute disk_attr_uevent = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#185: FILE: drivers/block/genhd.c:406:
+	.attr = {.name = "uevent", .mode = S_IWUSR },

ERROR:SPACING: space required after that ',' (ctx:OxV)
#207: FILE: fs/partitions/check.c:195:
+	ssize_t (*store)(struct hd_struct *,const char *, size_t);
 	                                   ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hd_struct *' should also have an identifier name
#207: FILE: fs/partitions/check.c:195:
+	ssize_t (*store)(struct hd_struct *,const char *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#207: FILE: fs/partitions/check.c:195:
+	ssize_t (*store)(struct hd_struct *,const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#207: FILE: fs/partitions/check.c:195:
+	ssize_t (*store)(struct hd_struct *,const char *, size_t);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#219: FILE: fs/partitions/check.c:208:
+}
+static ssize_t

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: fs/partitions/check.c:209:
+part_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: fs/partitions/check.c:209:
+part_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: fs/partitions/check.c:212:
+	struct hd_struct * p = container_of(kobj,struct hd_struct,kobj);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: fs/partitions/check.c:212:
+	struct hd_struct * p = container_of(kobj,struct hd_struct,kobj);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: fs/partitions/check.c:212:
+	struct hd_struct * p = container_of(kobj,struct hd_struct,kobj);
 	                                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#224: FILE: fs/partitions/check.c:213:
+	struct part_attribute * part_attr = container_of(attr,struct part_attribute,attr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: fs/partitions/check.c:213:
+	struct part_attribute * part_attr = container_of(attr,struct part_attribute,attr);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: fs/partitions/check.c:213:
+	struct part_attribute * part_attr = container_of(attr,struct part_attribute,attr);
 	                                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: fs/partitions/check.c:226:
+static ssize_t part_uevent_store(struct hd_struct * p,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#250: FILE: fs/partitions/check.c:252:
 }
+static struct part_attribute part_attr_uevent = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#251: FILE: fs/partitions/check.c:253:
+	.attr = {.name = "uevent", .mode = S_IWUSR },

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: include/linux/device.h:195:
+	ssize_t (*show)(struct class_device *, char * buf);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#275: FILE: include/linux/device.h:195:
+	ssize_t (*show)(struct class_device *, char * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: include/linux/device.h:196:
+	ssize_t (*store)(struct class_device *, const char * buf, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#276: FILE: include/linux/device.h:196:
+	ssize_t (*store)(struct class_device *, const char * buf, size_t count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: include/linux/device.h:199:
+#define CLASS_DEVICE_ATTR(_name,_mode,_show,_store)		\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: include/linux/device.h:199:
+#define CLASS_DEVICE_ATTR(_name,_mode,_show,_store)		\
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: include/linux/device.h:199:
+#define CLASS_DEVICE_ATTR(_name,_mode,_show,_store)		\
                                            ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: include/linux/device.h:200:
+struct class_device_attribute class_device_attr_##_name = ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: include/linux/device.h:201:
+	__ATTR(_name,_mode,_show,_store)
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: include/linux/device.h:201:
+	__ATTR(_name,_mode,_show,_store)
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: include/linux/device.h:201:
+	__ATTR(_name,_mode,_show,_store)
 	                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/device.h:203:
+extern int class_device_create_file(struct class_device *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#283: FILE: include/linux/device.h:203:
+extern int class_device_create_file(struct class_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct class_device_attribute *' should also have an identifier name
#283: FILE: include/linux/device.h:203:
+extern int class_device_create_file(struct class_device *,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: include/linux/device.h:279:
+#define DEVICE_ATTR(_name,_mode,_show,_store) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: include/linux/device.h:279:
+#define DEVICE_ATTR(_name,_mode,_show,_store) \
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: include/linux/device.h:279:
+#define DEVICE_ATTR(_name,_mode,_show,_store) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#329: FILE: include/linux/device.h:280:
+struct device_attribute dev_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#329: FILE: include/linux/device.h:280:
+struct device_attribute dev_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#329: FILE: include/linux/device.h:280:
+struct device_attribute dev_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: include/linux/device.h:282:
+extern int device_create_file(struct device *device, struct device_attribute * entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/linux/device.h:282:
+extern int device_create_file(struct device *device, struct device_attribute * entry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: include/linux/device.h:283:
+extern void device_remove_file(struct device * dev, struct device_attribute * attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: include/linux/device.h:283:
+extern void device_remove_file(struct device * dev, struct device_attribute * attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/device.h:283:
+extern void device_remove_file(struct device * dev, struct device_attribute * attr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#376: FILE: include/linux/genhd.h:135:
+	ssize_t (*store)(struct gendisk *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#376: FILE: include/linux/genhd.h:135:
+	ssize_t (*store)(struct gendisk *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#376: FILE: include/linux/genhd.h:135:
+	ssize_t (*store)(struct gendisk *, const char *, size_t);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140812.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 15 warnings, 6 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140812.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
