WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#46: 
                      struct file *filp);
                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
  http://client.linux-nfs.org/Linux-2.6.x/2.6.12/linux-2.6.12-63-open_file_intents.dif

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#81: FILE: fs/namei.c:1399:
+			   int mode, struct nameidata *nd, struct file *f)
 			                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#85: FILE: fs/namei.c:1403:
+	int error = may_create(dir, dentry, nd);
 	                                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: fs/namei.c:1404:
+	int error = may_create(dir, dentry, nd);
+	if (error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#95: FILE: fs/namei.c:1413:
+	f->f_mode = ((f->f_flags+1) & O_ACCMODE) | FMODE_LSEEK |
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#118: FILE: fs/namei.c:1436:
+	tmpnd = *nd;
 	         ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->direct_IO'
#139: FILE: fs/namei.c:1457:
+		if (!f->f_mapping->a_ops ||
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->get_xip_page'
#139: FILE: fs/namei.c:1457:
+		if (!f->f_mapping->a_ops ||
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: fs/namei.c:1497:
+static int open_namei(const char * pathname, int flag, int mode,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#174: FILE: fs/namei.c:1498:
+		      struct nameidata *nd, struct file *f)
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#185: FILE: fs/namei.c:1562:
+						flag, mode, nd, f);
 						            ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: fs/namei.c:1675:
+struct file *filp_open(const char * filename, int flags, int mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#225: FILE: fs/namei.c:1678:
+	struct nameidata nd;
 	                 ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#236: FILE: fs/namei.c:1689:
+		printk(KERN_WARNING "Warning: '%s' (pid=%i) uses deprecated "

WARNING:SPLIT_STRING: quoted string split across lines
#237: FILE: fs/namei.c:1690:
+		printk(KERN_WARNING "Warning: '%s' (pid=%i) uses deprecated "
+				"open flags, please report!\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#241: FILE: fs/namei.c:1694:
+	if ((namei_flags+1) & O_ACCMODE)
 	                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#248: FILE: fs/namei.c:1701:
+	if (f == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#252: FILE: fs/namei.c:1705:
+	error = open_namei(filename, namei_flags, mode, &nd, f);
 	                                                 ^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#272: FILE: include/linux/fs.h:1005:
+	int (*create_open) (struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#272: FILE: include/linux/fs.h:1005:
+	int (*create_open) (struct inode *, struct dentry *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#272: FILE: include/linux/fs.h:1005:
+	int (*create_open) (struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#272: FILE: include/linux/fs.h:1005:
+	int (*create_open) (struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#272: FILE: include/linux/fs.h:1005:
+	int (*create_open) (struct inode *, struct dentry *, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/fs.h:1437:
+extern int __dentry_open(struct dentry *dentry, struct vfsmount *mnt,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#304: FILE: fs/open.c:746:
+	f->f_mode = ((f->f_flags+1) & O_ACCMODE) | FMODE_LSEEK |
 	                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145232.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 17 warnings, 7 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145232.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
