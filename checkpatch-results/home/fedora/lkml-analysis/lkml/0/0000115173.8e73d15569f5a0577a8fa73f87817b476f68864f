CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: arch/um/include/os.h:250:
+extern void switch_timers(int to_real);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: arch/um/include/os.h:251:
+extern void idle_sleep(int secs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: arch/um/include/os.h:252:
+extern void enable_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: arch/um/include/os.h:253:
+extern void disable_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: arch/um/include/os.h:254:
+extern void user_time_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: arch/um/include/os.h:255:
+extern void uml_idle_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: arch/um/include/os.h:256:
+extern unsigned long long os_nsecs(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: arch/um/kernel/time_kern.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#252: FILE: arch/um/kernel/time_kern.c:99:
+static unsigned long long local_offset = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tloc != NULL'
#295: FILE: arch/um/kernel/time_kern.c:134:
+	if((tloc != NULL) && put_user(ret, tloc))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#295: FILE: arch/um/kernel/time_kern.c:134:
+	if((tloc != NULL) && put_user(ret, tloc))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tloc"
#295: FILE: arch/um/kernel/time_kern.c:134:
+	if((tloc != NULL) && put_user(ret, tloc))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#313: FILE: arch/um/kernel/time_kern.c:152:
+	tv->tv_usec = (unsigned long) nsecs / NSEC_PER_USEC;

CHECK:SPACING: No space is necessary after a cast
#340: FILE: arch/um/kernel/time_kern.c:175:
+	set_time((unsigned long long) value * NSEC_PER_SEC);

CHECK:SPACING: No space is necessary after a cast
#347: FILE: arch/um/kernel/time_kern.c:182:
+	set_time((unsigned long long) tv->tv_sec * NSEC_PER_SEC + tv->tv_nsec);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#456: FILE: arch/um/os-Linux/time.c:1:
+/*

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#482: FILE: arch/um/os-Linux/time.c:27:
+	int usec = 1000000/hz();
 	                  ^

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: arch/um/os-Linux/time.c:31:
+	if(setitimer(timer_type, &interval, NULL) == -1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#498: FILE: arch/um/os-Linux/time.c:43:
+	struct itimerval disable = ((struct itimerval) { { 0, 0 }, { 0, 0 }});
+	if((setitimer(ITIMER_VIRTUAL, &disable, NULL) < 0) ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: arch/um/os-Linux/time.c:43:
+	if((setitimer(ITIMER_VIRTUAL, &disable, NULL) < 0) ||

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#500: FILE: arch/um/os-Linux/time.c:45:
+		printk("disnable_timer - setitimer failed, errno = %d\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#510: FILE: arch/um/os-Linux/time.c:55:
+	struct itimerval enable = ((struct itimerval) { { 0, 1000000/hz() },
 	                                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#511: FILE: arch/um/os-Linux/time.c:56:
+							{ 0, 1000000/hz() }});
 							            ^

ERROR:SPACING: space required before the open brace '{'
#514: FILE: arch/um/os-Linux/time.c:59:
+	if(to_real){

ERROR:SPACING: space required before the open parenthesis '('
#514: FILE: arch/um/os-Linux/time.c:59:
+	if(to_real){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#518: FILE: arch/um/os-Linux/time.c:63:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#518: FILE: arch/um/os-Linux/time.c:63:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#523: FILE: arch/um/os-Linux/time.c:68:
+	if((setitimer(old, &disable, NULL) < 0) ||

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#525: FILE: arch/um/os-Linux/time.c:70:
+		printk("switch_timers - setitimer failed, errno = %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'switch_timers', this function's name, in a string
#525: FILE: arch/um/os-Linux/time.c:70:
+		printk("switch_timers - setitimer failed, errno = %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#532: FILE: arch/um/os-Linux/time.c:76:
+	if(signal(SIGVTALRM, SIG_IGN) == SIG_ERR)

CHECK:SPACING: No space is necessary after a cast
#535: FILE: arch/um/os-Linux/time.c:79:
+	set_handler(SIGALRM, (__sighandler_t) alarm_handler,

ERROR:SPACING: space required before the open parenthesis '('
#547: FILE: arch/um/os-Linux/time.c:91:
+	if(signal(SIGVTALRM, boot_timer_handler) == SIG_ERR)

CHECK:SPACING: No space is necessary after a cast
#562: FILE: arch/um/os-Linux/time.c:105:
+	return((unsigned long long) tv.tv_sec * BILLION + tv.tv_usec * 1000);

CHECK:SPACING: No space is necessary after a cast
#588: FILE: arch/um/os-Linux/time.c:121:
+	set_handler(SIGVTALRM, (__sighandler_t) alarm_handler,

CHECK:SPACING: No space is necessary after a cast
#591: FILE: arch/um/os-Linux/time.c:124:
+	set_handler(SIGALRM, (__sighandler_t) alarm_handler,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 6 warnings, 20 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
