WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#104: 
the whole PID space is used up. BK-curr's get_pid() still didnt do this
                                                          ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'arg == 1'
#266: FILE: drivers/char/tty_io.c:1605:
+	if ((arg == 1) && capable(CAP_SYS_ADMIN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#266: FILE: drivers/char/tty_io.c:1605:
+	if ((arg == 1) && capable(CAP_SYS_ADMIN)) {
[...]
-		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: drivers/char/tty_io.c:1622:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#308: FILE: include/linux/idtag.h:1:
+#ifndef _LINUX_IDTAG_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#316: FILE: include/linux/idtag.h:9:
+enum idtag_type
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#325: FILE: include/linux/idtag.h:18:
+struct idtag
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#334: FILE: include/linux/idtag.h:27:
+struct idtag_link
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: include/linux/idtag.h:39:
+extern int attach_tag(struct task_struct *, enum idtag_type, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#346: FILE: include/linux/idtag.h:39:
+extern int attach_tag(struct task_struct *, enum idtag_type, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#346: FILE: include/linux/idtag.h:39:
+extern int attach_tag(struct task_struct *, enum idtag_type, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: include/linux/idtag.h:44:
+extern int detach_tag(struct task_struct *task, enum idtag_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#356: FILE: include/linux/idtag.h:49:
+extern struct idtag *FASTCALL(get_tag(enum idtag_type, unsigned long));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#356: FILE: include/linux/idtag.h:49:
+extern struct idtag *FASTCALL(get_tag(enum idtag_type, unsigned long));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#357: FILE: include/linux/idtag.h:50:
+extern struct idtag *FASTCALL(find_get_tag(enum idtag_type, unsigned long));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#357: FILE: include/linux/idtag.h:50:
+extern struct idtag *FASTCALL(find_get_tag(enum idtag_type, unsigned long));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#358: FILE: include/linux/idtag.h:51:
+extern void put_tag(struct idtag *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct idtag *' should also have an identifier name
#358: FILE: include/linux/idtag.h:51:
+extern void put_tag(struct idtag *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#359: FILE: include/linux/idtag.h:52:
+extern int idtag_unused(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#359: FILE: include/linux/idtag.h:52:
+extern int idtag_unused(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: include/linux/idtag.h:54:
+extern int alloc_pid(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: include/linux/idtag.h:55:
+extern void free_pid(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#362: FILE: include/linux/idtag.h:55:
+extern void free_pid(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#399: FILE: include/linux/sched.h:273:
+extern struct user_struct *find_user(uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#399: FILE: include/linux/sched.h:273:
+extern struct user_struct *find_user(uid_t);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#430: FILE: include/linux/threads.h:27:
+#define PID_MAX_LIMIT (4*1024*1024)
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#430: FILE: include/linux/threads.h:27:
+#define PID_MAX_LIMIT (4*1024*1024)
                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: include/asm-i386/bitops.h:411:
+        asm("bsrl %1,%0"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: include/asm-i386/bitops.h:411:
+        asm("bsrl %1,%0"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: include/asm-i386/bitops.h:412:
+                :"=r" (n)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: include/asm-i386/bitops.h:412:
+                :"=r" (n)$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#447: FILE: include/asm-i386/bitops.h:412:
+                :"=r" (n)
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: include/asm-i386/bitops.h:413:
+                :"r" (n));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: include/asm-i386/bitops.h:413:
+                :"r" (n));$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#448: FILE: include/asm-i386/bitops.h:413:
+                :"r" (n));
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: include/asm-i386/bitops.h:414:
+        return n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: include/asm-i386/bitops.h:414:
+        return n;$

CHECK:BIT_MACRO: Prefer using the BIT macro
#464: FILE: include/asm-i386/types.h:45:
+#define BITS_PER_LONG		(1 << BITS_PER_LONG_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: fs/fcntl.c:500:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: fs/fcntl.c:500:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#504: FILE: fs/fcntl.c:504:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: fs/fcntl.c:504:
+ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: kernel/exit.c:70:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: kernel/exit.c:168:
+^I^I^I^I|| task->state == TASK_ZOMBIE $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#620: FILE: kernel/exit.c:168:
+		if (task == ignored_task
+				|| task->state == TASK_ZOMBIE 

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#621: FILE: kernel/exit.c:169:
+				|| task->state == TASK_ZOMBIE 
+				|| task->parent->pid == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#627: FILE: kernel/exit.c:172:
+		if (task->parent->pgrp != pgrp
+				&& task->parent->session == task->session) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#689: FILE: kernel/idtag.c:1:
+#include <linux/sched.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#713: FILE: kernel/idtag.c:25:
+static inline unsigned idtag_hashfn(unsigned long tag)

ERROR:SPACING: space prohibited after that open parenthesis '('
#728: FILE: kernel/idtag.c:40:
+static inline void init_idtag(	struct idtag *idtag,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: kernel/idtag.c:41:
+static inline void init_idtag(	struct idtag *idtag,
+				enum idtag_type type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: kernel/idtag.c:49:
+	list_add(&idtag->idtag_hash_chain,
+			&idtag_hash[type][idtag_hashfn(tag)]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: kernel/idtag.c:100:
+	struct idtag *idtag;
+	spin_lock(&idtag_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#805: FILE: kernel/idtag.c:117:
+		struct idtag *raced_tag;
+		spin_unlock(&idtag_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#829: FILE: kernel/idtag.c:141:
+	unsigned long tag;
+	if (!atomic_dec_and_lock(&idtag->count, &idtag_lock))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#893: FILE: kernel/pid.c:1:
+/*

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#913: FILE: kernel/pid.c:21:
+#define PIDMAP_ENTRIES		(PID_MAX_LIMIT/PAGE_SIZE/8)
                       		              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#913: FILE: kernel/pid.c:21:
+#define PIDMAP_ENTRIES		(PID_MAX_LIMIT/PAGE_SIZE/8)
                       		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#914: FILE: kernel/pid.c:22:
+#define BITS_PER_PAGE		(PAGE_SIZE*8)
                      		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#915: FILE: kernel/pid.c:23:
+#define BITS_PER_PAGE_MASK	(BITS_PER_PAGE-1)
                           	              ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#923: FILE: kernel/pid.c:31:
+typedef struct pidmap {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#929: FILE: kernel/pid.c:37:
+static pidmap_t pidmap_array[PIDMAP_ENTRIES] =
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#929: FILE: kernel/pid.c:37:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };
 	                         ^

ERROR:SPACING: space prohibited after that open square bracket '['
#929: FILE: kernel/pid.c:37:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };

ERROR:SPACING: space prohibited before that close square bracket ']'
#929: FILE: kernel/pid.c:37:
+	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#939: FILE: kernel/pid.c:47:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: kernel/pid.c:100:
+^I$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1036: FILE: kernel/sched.c:2102:
+	extern void idtag_hash_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1037: FILE: kernel/sched.c:2103:
+	extern void pid_init(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1100: FILE: kernel/signal.c:992:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1209: FILE: kernel/sys.c:209:
+	if (task->uid != current->euid &&
+		task->uid != current->uid && !capable(CAP_SYS_NICE)) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1268: FILE: kernel/sys.c:243:
+	switch (which) {
+		case PRIO_PROCESS:
[...]
+		case PRIO_PGRP:
[...]
+		case PRIO_USER:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1343: FILE: kernel/sys.c:311:
+	switch (which) {
+		case PRIO_PROCESS:
[...]
+		case PRIO_PGRP:
[...]
+		case PRIO_USER:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1451: FILE: kernel/sys.c:963:
+		task_t * task;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1610: FILE: kernel/fork.c:674:
+	if (clone_flags & CLONE_IDLETASK)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1612: FILE: kernel/fork.c:676:
+	else {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1684: FILE: init/main.c:69:
+extern void idtag_init(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 28 warnings, 29 checks, 1494 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
