WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#93: FILE: fs/seq_file.c:299:
+EXPORT_SYMBOL(seq_release);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#94: FILE: fs/seq_file.c:300:
+EXPORT_SYMBOL(seq_lseek);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#95: FILE: fs/seq_file.c:301:
+EXPORT_SYMBOL(seq_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#96: FILE: fs/seq_file.c:302:
+EXPORT_SYMBOL(seq_read);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/seq_file.h:29:
+extern int seq_open(struct file *, struct seq_operations *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#109: FILE: include/linux/seq_file.h:29:
+extern int seq_open(struct file *, struct seq_operations *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_operations *' should also have an identifier name
#109: FILE: include/linux/seq_file.h:29:
+extern int seq_open(struct file *, struct seq_operations *);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#109: FILE: include/linux/seq_file.h:29:
+extern int seq_open(struct file *, struct seq_operations *);

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/seq_file.h:30:
+extern ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#110: FILE: include/linux/seq_file.h:30:
+extern ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#110: FILE: include/linux/seq_file.h:30:
+extern ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#110: FILE: include/linux/seq_file.h:30:
+extern ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#110: FILE: include/linux/seq_file.h:30:
+extern ssize_t seq_read(struct file *, char *, size_t, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/seq_file.h:31:
+extern loff_t seq_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#111: FILE: include/linux/seq_file.h:31:
+extern loff_t seq_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#111: FILE: include/linux/seq_file.h:31:
+extern loff_t seq_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#111: FILE: include/linux/seq_file.h:31:
+extern loff_t seq_lseek(struct file *, loff_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/seq_file.h:32:
+extern int seq_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#112: FILE: include/linux/seq_file.h:32:
+extern int seq_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#112: FILE: include/linux/seq_file.h:32:
+extern int seq_release(struct inode *, struct file *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/seq_file.h:33:
+extern int seq_escape(struct seq_file *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#113: FILE: include/linux/seq_file.h:33:
+extern int seq_escape(struct seq_file *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#113: FILE: include/linux/seq_file.h:33:
+extern int seq_escape(struct seq_file *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#113: FILE: include/linux/seq_file.h:33:
+extern int seq_escape(struct seq_file *, const char *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/seq_file.h:56:
+extern int seq_printf(struct seq_file *, const char *, ...)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000489160.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 19 warnings, 6 checks, 63 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000489160.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
