WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
The GFS2 dentry interface, NFS operations, superblock operations, VM operaions,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: fs/gfs2/ops_dentry.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#84: FILE: fs/gfs2/ops_dentry.c:26:
+ * @nd:
     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#92: FILE: fs/gfs2/ops_dentry.c:34:
+static int gfs2_drevalidate(struct dentry *dentry, struct nameidata *nd)
                                                                      ^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#169: FILE: fs/gfs2/ops_dentry.c:111:
+struct dentry_operations gfs2_dops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#176: FILE: fs/gfs2/ops_dentry.h:1:
+/*

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#188: FILE: fs/gfs2/ops_dentry.h:13:
+extern struct dentry_operations gfs2_dops;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#194: FILE: fs/gfs2/ops_export.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#303: FILE: fs/gfs2/ops_export.c:110:
+			    uint64_t offset, struct gfs2_inum *inum,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#325: FILE: fs/gfs2/ops_export.c:132:
+	uint64_t offset = 0;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#368: FILE: fs/gfs2/ops_export.c:175:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#392: FILE: fs/gfs2/ops_export.c:199:
+			iput(inode);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#459: FILE: fs/gfs2/ops_export.c:266:
+		iput(inode);
 		^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#487: FILE: fs/gfs2/ops_export.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#505: FILE: fs/gfs2/ops_super.c:1:
+/*

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#600: FILE: fs/gfs2/ops_super.c:96:
+	iput(sdp->sd_master_dir);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#601: FILE: fs/gfs2/ops_super.c:97:
+	iput(sdp->sd_jindex);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#602: FILE: fs/gfs2/ops_super.c:98:
+	iput(sdp->sd_inum_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#603: FILE: fs/gfs2/ops_super.c:99:
+	iput(sdp->sd_statfs_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#604: FILE: fs/gfs2/ops_super.c:100:
+	iput(sdp->sd_rindex);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#605: FILE: fs/gfs2/ops_super.c:101:
+	iput(sdp->sd_quota_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#606: FILE: fs/gfs2/ops_super.c:102:
+	iput(sdp->sd_root_dir);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#618: FILE: fs/gfs2/ops_super.c:114:
+		iput(sdp->sd_ir_inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#619: FILE: fs/gfs2/ops_super.c:115:
+		iput(sdp->sd_sc_inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#620: FILE: fs/gfs2/ops_super.c:116:
+		iput(sdp->sd_ut_inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#621: FILE: fs/gfs2/ops_super.c:117:
+		iput(sdp->sd_qc_inode);
 		^^^^

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#641: FILE: fs/gfs2/ops_super.c:137:
+		yield();

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: fs/gfs2/ops_super.c:155:
+	struct gfs2_sbd *sdp = get_v2sdp(sb);
+	gfs2_log_flush(sdp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#702: FILE: fs/gfs2/ops_super.c:198:
+	struct gfs2_sbd *sdp = get_v2sdp(sb);
+	gfs2_unfreeze_fs(sdp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#759: FILE: fs/gfs2/ops_super.c:255:
+	if (sdp->sd_args.ar_spectator)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#761: FILE: fs/gfs2/ops_super.c:257:
+	else {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#823: FILE: fs/gfs2/ops_super.c:319:
+		seq_printf(s, ",spectator");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#825: FILE: fs/gfs2/ops_super.c:321:
+		seq_printf(s, ",ignore_local_fs");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#827: FILE: fs/gfs2/ops_super.c:323:
+		seq_printf(s, ",localflocks");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#829: FILE: fs/gfs2/ops_super.c:325:
+		seq_printf(s, ",localcaching");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#831: FILE: fs/gfs2/ops_super.c:327:
+		seq_printf(s, ",debug");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#833: FILE: fs/gfs2/ops_super.c:329:
+		seq_printf(s, ",upgrade");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#837: FILE: fs/gfs2/ops_super.c:333:
+		seq_printf(s, ",acl");

WARNING:LINE_SPACING: Missing a blank line after declarations
#840: FILE: fs/gfs2/ops_super.c:336:
+		char *state;
+		switch (args->ar_quota) {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#857: FILE: fs/gfs2/ops_super.c:353:
+		seq_printf(s, ",suiddir");

WARNING:LINE_SPACING: Missing a blank line after declarations
#860: FILE: fs/gfs2/ops_super.c:356:
+		char *state;
+		switch (args->ar_data) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#892: FILE: fs/gfs2/ops_super.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#910: FILE: fs/gfs2/ops_vm.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#980: FILE: fs/gfs2/ops_vm.c:71:
+	uint64_t lblock = index << (PAGE_CACHE_SHIFT - sdp->sd_sb.sb_bsize_shift);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: fs/gfs2/ops_vm.c:89:
+	gfs2_write_calc_reserv(ip, PAGE_CACHE_SIZE,
+			      &data_blocks, &ind_blocks);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1020: FILE: fs/gfs2/ops_vm.c:111:
+		uint64_t dblock;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1094: FILE: fs/gfs2/ops_vm.c:185:
+struct vm_operations_struct gfs2_vm_ops_private = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1098: FILE: fs/gfs2/ops_vm.c:189:
+struct vm_operations_struct gfs2_vm_ops_sharewrite = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1105: FILE: fs/gfs2/ops_vm.h:1:
+/*

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1117: FILE: fs/gfs2/ops_vm.h:13:
+extern struct vm_operations_struct gfs2_vm_ops_private;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1118: FILE: fs/gfs2/ops_vm.h:14:
+extern struct vm_operations_struct gfs2_vm_ops_sharewrite;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1124: FILE: fs/gfs2/page.c:1:
+/*

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1170: FILE: fs/gfs2/page.c:47:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1201: FILE: fs/gfs2/page.c:78:
+		iput(inode);
 		^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1236: FILE: fs/gfs2/page.c:113:
+		/* Put back any errors cleared by filemap_fdatawait()
+		   so they can be caught by someone who can pass them

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1237: FILE: fs/gfs2/page.c:114:
+		   up to user space. */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1244: FILE: fs/gfs2/page.c:121:
+		iput(inode);
 		^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1259: FILE: fs/gfs2/page.c:136:
+			uint64_t block, void *private)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sdp->sd_args.ar_data == GFS2_DATA_ORDERED'
#1298: FILE: fs/gfs2/page.c:175:
+	if ((sdp->sd_args.ar_data == GFS2_DATA_ORDERED) || gfs2_is_jdata(ip))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1322: FILE: fs/gfs2/page.c:199:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1322: FILE: fs/gfs2/page.c:199:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1323: FILE: fs/gfs2/page.c:200:
+	unsigned blocksize, iblock, length, pos;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1406: FILE: fs/gfs2/page.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1423: FILE: fs/gfs2/page.h:18:
+			uint64_t block, void *private);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1432: FILE: fs/gfs2/super.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1528: FILE: fs/gfs2/super.c:97:
+			printk("GFS2: not a GFS2 filesystem\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1544: FILE: fs/gfs2/super.c:113:
+			printk("GFS2: code version (%u, %u) is incompatible "

WARNING:SPLIT_STRING: quoted string split across lines
#1545: FILE: fs/gfs2/super.c:114:
+			printk("GFS2: code version (%u, %u) is incompatible "
+			       "with ondisk format (%u, %u)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1548: FILE: fs/gfs2/super.c:117:
+			printk("GFS2: I don't know how to upgrade this FS\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1559: FILE: fs/gfs2/super.c:128:
+			printk("GFS2: code version (%u, %u) is incompatible "

WARNING:SPLIT_STRING: quoted string split across lines
#1560: FILE: fs/gfs2/super.c:129:
+			printk("GFS2: code version (%u, %u) is incompatible "
+			       "with ondisk format (%u, %u)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1563: FILE: fs/gfs2/super.c:132:
+			printk("GFS2: I don't know how to upgrade this FS\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1569: FILE: fs/gfs2/super.c:138:
+		printk("GFS2: code version (%u, %u) is incompatible "

WARNING:SPLIT_STRING: quoted string split across lines
#1570: FILE: fs/gfs2/super.c:139:
+		printk("GFS2: code version (%u, %u) is incompatible "
+		       "with ondisk format (%u, %u)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1573: FILE: fs/gfs2/super.c:142:
+		printk("GFS2: Use the \"upgrade\" mount option to upgrade "

WARNING:SPLIT_STRING: quoted string split across lines
#1574: FILE: fs/gfs2/super.c:143:
+		printk("GFS2: Use the \"upgrade\" mount option to upgrade "
+		       "the FS\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1575: FILE: fs/gfs2/super.c:144:
+		printk("GFS2: See the manual for more details\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1593: FILE: fs/gfs2/super.c:162:
+	uint32_t hash_blocks, ind_blocks, leaf_blocks;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1594: FILE: fs/gfs2/super.c:163:
+	uint32_t tmp_blocks;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1651: FILE: fs/gfs2/super.c:220:
+		uint64_t space, d;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1652: FILE: fs/gfs2/super.c:221:
+		uint32_t m;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1669: FILE: fs/gfs2/super.c:238:
+		uint64_t space, d;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1670: FILE: fs/gfs2/super.c:239:
+		uint32_t m;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*jd)...) over kzalloc(sizeof(struct gfs2_jdesc)...)
#1735: FILE: fs/gfs2/super.c:304:
+		jd = kzalloc(sizeof(struct gfs2_jdesc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1776: FILE: fs/gfs2/super.c:345:
+		iput(jd->jd_inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1963: FILE: fs/gfs2/super.c:532:
+	error = gfs2_glock_nq_init(sdp->sd_trans_gl, LM_ST_SHARED,
+				GL_LOCAL_EXCL | GL_NEVER_RECURSE | GL_NOCACHE,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2051: FILE: fs/gfs2/super.c:620:
+^I^I^I       sizeof(struct gfs2_dinode));^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2078: FILE: fs/gfs2/super.c:647:
+^I^I^I      sizeof(struct gfs2_dinode));^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2225: FILE: fs/gfs2/super.c:794:
+			if (gh->gh_gl)
[...]
+			else if (rgd_next && !error) {
[...]

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2243: FILE: fs/gfs2/super.c:812:
+		yield();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*lfcc)...) over kmalloc(sizeof(struct lfcc)...)
#2283: FILE: fs/gfs2/super.c:852:
+		lfcc = kmalloc(sizeof(struct lfcc), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2298: FILE: fs/gfs2/super.c:867:
+	error = gfs2_glock_nq_init(sdp->sd_trans_gl, LM_ST_DEFERRED,
+			       LM_FLAG_PRIORITY | GL_NEVER_RECURSE | GL_NOCACHE,

WARNING:TYPO_SPELLING: 'aquiring' may be misspelled - perhaps 'acquiring'?
#2334: FILE: fs/gfs2/super.c:903:
+ * aquiring the transaction log exclusively.  All journals are
    ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2380: FILE: fs/gfs2/super.h:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#2401: FILE: fs/gfs2/super.h:22:
+	unsigned int x;
+	spin_lock(&sdp->sd_jindex_spin);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#2424: FILE: fs/gfs2/super.h:45:
+			int64_t total, int64_t free, int64_t dinodes);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2438: FILE: fs/gfs2/trans.c:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tr)...) over kzalloc(sizeof(struct gfs2_trans)...)
#2473: FILE: fs/gfs2/trans.c:36:
+	tr = kzalloc(sizeof(struct gfs2_trans), GFP_NOFS);

WARNING:SPLIT_STRING: quoted string split across lines
#2551: FILE: fs/gfs2/trans.c:114:
+		fs_err(sdp, "tr_num_buf = %u, tr_blocks = %u "
+		       "tr_file = %s, tr_line = %u\n",

WARNING:SPLIT_STRING: quoted string split across lines
#2556: FILE: fs/gfs2/trans.c:119:
+		fs_err(sdp, "tr_num_revoke = %u, tr_revokes = %u "
+		       "tr_file = %s, tr_line = %u\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#2588: FILE: fs/gfs2/trans.c:151:
+	if (bd)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2590: FILE: fs/gfs2/trans.c:153:
+	else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rv)...) over kmalloc(sizeof(struct gfs2_revoke)...)
#2599: FILE: fs/gfs2/trans.c:162:
+	struct gfs2_revoke *rv = kmalloc(sizeof(struct gfs2_revoke),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2639: FILE: fs/gfs2/trans.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2666: FILE: fs/gfs2/trans.h:28:
+int gfs2_trans_begin_i(struct gfs2_sbd *sdp,
+		      unsigned int blocks, unsigned int revokes,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2681: FILE: fs/gfs2/unlinked.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2710: FILE: fs/gfs2/unlinked.c:30:
+	uint64_t dblock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2816: FILE: fs/gfs2/unlinked.c:136:
+		struct gfs2_unlinked *ul = ul_fish(sdp);
+		if (!ul)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2821: FILE: fs/gfs2/unlinked.c:141:
+		if (!error) {
[...]
+		} else if (error != 1)
[...]

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ul)...) over kzalloc(sizeof(struct gfs2_unlinked)...)
#2833: FILE: fs/gfs2/unlinked.c:153:
+	ul = kzalloc(sizeof(struct gfs2_unlinked), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2893: FILE: fs/gfs2/unlinked.c:213:
+	if (!ul->ul_count) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2897: FILE: fs/gfs2/unlinked.c:217:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#2964: FILE: fs/gfs2/unlinked.c:284:
+			struct gfs2_unlinked *ul = ul_fish(sdp);
+			if (!ul)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2969: FILE: fs/gfs2/unlinked.c:289:
+			if (!error) {
[...]
+			} else if (error == 1) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2980: FILE: fs/gfs2/unlinked.c:300:
+			} else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2999: FILE: fs/gfs2/unlinked.c:319:
+	uint64_t dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3000: FILE: fs/gfs2/unlinked.c:320:
+	uint32_t extlen = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3007: FILE: fs/gfs2/unlinked.c:327:
+^I^Ireturn -EIO;^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#3032: FILE: fs/gfs2/unlinked.c:352:
+			int new = 0;
+			error = gfs2_block_map(ip, x, &new, &dblock, &extlen);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3137: FILE: fs/gfs2/unlinked.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3165: FILE: fs/gfs2/util.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#3181: FILE: fs/gfs2/util.c:17:
+#include <asm/uaccess.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#3198: FILE: fs/gfs2/util.c:34:
+	printk(KERN_EMERG "GFS2: fsid=%s: fatal assertion failed\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#3212: FILE: fs/gfs2/util.c:48:
+	int me;
+	me = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3213: FILE: fs/gfs2/util.c:49:
+	me = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: assertion \"%s\" failed\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3235: FILE: fs/gfs2/util.c:71:
+	printk(KERN_WARNING

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3242: FILE: fs/gfs2/util.c:78:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#3261: FILE: fs/gfs2/util.c:97:
+	int rv;
+	rv = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3262: FILE: fs/gfs2/util.c:98:
+	rv = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: filesystem consistency error\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#3280: FILE: fs/gfs2/util.c:116:
+	int rv;
+	rv = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3281: FILE: fs/gfs2/util.c:117:
+	rv = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: filesystem consistency error\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#3301: FILE: fs/gfs2/util.c:137:
+	int rv;
+	rv = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3302: FILE: fs/gfs2/util.c:138:
+	rv = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: filesystem consistency error\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#3322: FILE: fs/gfs2/util.c:158:
+	int me;
+	me = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3323: FILE: fs/gfs2/util.c:159:
+	me = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: invalid metadata block\n"

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#3339: FILE: fs/gfs2/util.c:175:
+			   uint16_t type, uint16_t t, const char *function,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3343: FILE: fs/gfs2/util.c:179:
+	int me;
+	me = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3344: FILE: fs/gfs2/util.c:180:
+	me = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: invalid metadata block\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#3363: FILE: fs/gfs2/util.c:199:
+	int rv;
+	rv = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3364: FILE: fs/gfs2/util.c:200:
+	rv = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: I/O error\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#3381: FILE: fs/gfs2/util.c:217:
+	int rv;
+	rv = gfs2_lm_withdraw(sdp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3382: FILE: fs/gfs2/util.c:218:
+	rv = gfs2_lm_withdraw(sdp,
+		"GFS2: fsid=%s: fatal: I/O error\n"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3414: FILE: fs/gfs2/util.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3428: FILE: fs/gfs2/util.h:15:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3430: FILE: fs/gfs2/util.h:17:
+	printk(level "GFS2: fsid=%s: " fmt , (fs)->sd_fsname , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3430: FILE: fs/gfs2/util.h:17:
+	printk(level "GFS2: fsid=%s: " fmt , (fs)->sd_fsname , ## arg)
 	                                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3430: FILE: fs/gfs2/util.h:17:
+	printk(level "GFS2: fsid=%s: " fmt , (fs)->sd_fsname , ## arg)
 	                                                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3433: FILE: fs/gfs2/util.h:20:
+	fs_printk(KERN_INFO , fs , fmt , ## arg)
 	                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3433: FILE: fs/gfs2/util.h:20:
+	fs_printk(KERN_INFO , fs , fmt , ## arg)
 	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3433: FILE: fs/gfs2/util.h:20:
+	fs_printk(KERN_INFO , fs , fmt , ## arg)
 	                               ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3436: FILE: fs/gfs2/util.h:23:
+	fs_printk(KERN_WARNING , fs , fmt , ## arg)
 	                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3436: FILE: fs/gfs2/util.h:23:
+	fs_printk(KERN_WARNING , fs , fmt , ## arg)
 	                            ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3436: FILE: fs/gfs2/util.h:23:
+	fs_printk(KERN_WARNING , fs , fmt , ## arg)
 	                                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3439: FILE: fs/gfs2/util.h:26:
+	fs_printk(KERN_ERR, fs , fmt , ## arg)
 	                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3439: FILE: fs/gfs2/util.h:26:
+	fs_printk(KERN_ERR, fs , fmt , ## arg)
 	                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3441: FILE: fs/gfs2/util.h:28:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3448: FILE: fs/gfs2/util.h:35:
+		BUG(); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#3449: FILE: fs/gfs2/util.h:36:
+        } \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3449: FILE: fs/gfs2/util.h:36:
+        } \$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3452: FILE: fs/gfs2/util.h:39:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3458: FILE: fs/gfs2/util.h:45:
+					__FUNCTION__, __FILE__, __LINE__))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3460: FILE: fs/gfs2/util.h:47:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3466: FILE: fs/gfs2/util.h:53:
+					__FUNCTION__, __FILE__, __LINE__))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3468: FILE: fs/gfs2/util.h:55:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3473: FILE: fs/gfs2/util.h:60:
+gfs2_consist_i((sdp), 0, __FUNCTION__, __FILE__, __LINE__)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3475: FILE: fs/gfs2/util.h:62:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3480: FILE: fs/gfs2/util.h:67:
+gfs2_consist_inode_i((ip), 0, __FUNCTION__, __FILE__, __LINE__)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3482: FILE: fs/gfs2/util.h:69:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3487: FILE: fs/gfs2/util.h:74:
+gfs2_consist_rgrpd_i((rgd), 0, __FUNCTION__, __FILE__, __LINE__)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3489: FILE: fs/gfs2/util.h:76:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3500: FILE: fs/gfs2/util.h:87:
+	uint32_t magic = mh->mh_magic;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3501: FILE: fs/gfs2/util.h:88:
+	uint32_t magic = mh->mh_magic;
+	magic = be32_to_cpu(magic);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3509: FILE: fs/gfs2/util.h:96:
+gfs2_meta_check_i((sdp), (bh), __FUNCTION__, __FILE__, __LINE__)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3511: FILE: fs/gfs2/util.h:98:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#3513: FILE: fs/gfs2/util.h:100:
+			   uint16_t type, uint16_t t,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#3519: FILE: fs/gfs2/util.h:106:
+					uint16_t type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3524: FILE: fs/gfs2/util.h:111:
+	uint32_t magic = mh->mh_magic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#3525: FILE: fs/gfs2/util.h:112:
+	uint16_t t = mh->mh_type;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3526: FILE: fs/gfs2/util.h:113:
+	uint16_t t = mh->mh_type;
+	magic = be32_to_cpu(magic);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3531: FILE: fs/gfs2/util.h:118:
+        if (unlikely(t != type))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3531: FILE: fs/gfs2/util.h:118:
+        if (unlikely(t != type))$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3538: FILE: fs/gfs2/util.h:125:
+gfs2_metatype_check_i((sdp), (bh), (type), __FUNCTION__, __FILE__, __LINE__)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3544: FILE: fs/gfs2/util.h:131:
+	struct gfs2_meta_header *mh;
+	mh = (struct gfs2_meta_header *)bh->b_data;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3549: FILE: fs/gfs2/util.h:136:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3553: FILE: fs/gfs2/util.h:140:
+#define gfs2_io_error(sdp) \
+gfs2_io_error_i((sdp), __FUNCTION__, __FILE__, __LINE__);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3554: FILE: fs/gfs2/util.h:141:
+gfs2_io_error_i((sdp), __FUNCTION__, __FILE__, __LINE__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3556: FILE: fs/gfs2/util.h:143:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3560: FILE: fs/gfs2/util.h:147:
+#define gfs2_io_error_bh(sdp, bh) \
+gfs2_io_error_bh_i((sdp), (bh), __FUNCTION__, __FILE__, __LINE__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3561: FILE: fs/gfs2/util.h:148:
+gfs2_io_error_bh_i((sdp), (bh), __FUNCTION__, __FILE__, __LINE__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3563: FILE: fs/gfs2/util.h:150:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#3572: FILE: fs/gfs2/util.h:159:
+	unsigned int x;
+	spin_lock(&gt->gt_spin);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sdp' - possible side-effects?
#3578: FILE: fs/gfs2/util.h:165:
+#define gfs2_tune_get(sdp, field) \
+gfs2_tune_get_i(&(sdp)->sd_tune, &(sdp)->sd_tune.field)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 113 warnings, 64 checks, 3476 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
