CHECK:SPACING: No space is necessary after a cast
#104: FILE: mm/slab.c:524:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#104: FILE: mm/slab.c:524:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#104: FILE: mm/slab.c:524:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#104: FILE: mm/slab.c:524:
+	return (unsigned long*) (objp+obj_offset(cachep)-BYTES_PER_WORD);
 	                                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#130: FILE: mm/slab.c:545:
+#define obj_size(cachep)		(cachep->buffer_size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: mm/slab.c:1313:
+	int size = obj_size(cachep);
+	addr = &((char *)addr)[obj_offset(cachep)];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#252: FILE: mm/slab.c:1458:
+			(cachep->dtor) (objp + obj_offset(cachep), cachep, 0);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#304: FILE: mm/slab.c:1728:
 	if (size >= malloc_sizes[INDEX_L3 + 1].cs_size
+	    && cachep->obj_size > cache_line_size() && size < PAGE_SIZE) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#367: FILE: mm/slab.c:2350:
+	BUG_ON(objp != slabp->s_mem + objnr * cachep->buffer_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 2 warnings, 6 checks, 438 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
