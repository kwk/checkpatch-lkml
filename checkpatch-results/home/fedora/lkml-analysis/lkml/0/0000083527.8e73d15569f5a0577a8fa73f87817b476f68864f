WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Maybe something like this might be a useful debug option to detect unwise likely()/unlikely() usage?

WARNING:TYPO_SPELLING: 'debugg' may be misspelled - perhaps 'debug'?
#35: 
It increases kernel size by about 10%, but hey, it's a debugg option. :-)
                                                       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/compiler.h:63:
+extern int printk_debug_likely(const char *fmt, ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#81: FILE: include/linux/compiler.h:66:
+#define __check_likely(x, v, uv)                                \
+  ({ static int _ckl_print_nr = 0;                              \
+     static unsigned int _ckl_s[2];                             \
+     int _ckl_r = !!(x);                                        \
+     _ckl_s[_ckl_r]++;                                          \
+     if ((_ckl_s[v] == _ckl_s[uv]) && (_ckl_s[v] > debug_likely_count_min_thresh) \
+          && (_ckl_print_nr < debug_likely_print_max_thresh)) { \
+         _ckl_print_nr++;                                       \
+         printk_debug_likely("possible (un)likely misuse at %s:%d/%s()\n",        \
+                             __FILE__, __LINE__, __FUNCTION__); \
+     }                                                          \
+     _ckl_r; })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/linux/compiler.h:67:
+  ({ static int _ckl_print_nr = 0;                              \$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#82: FILE: include/linux/compiler.h:67:
+  ({ static int _ckl_print_nr = 0;                              \

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: include/linux/compiler.h:68:
+     static unsigned int _ckl_s[2];                             \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: include/linux/compiler.h:69:
+     int _ckl_r = !!(x);                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: include/linux/compiler.h:70:
+     _ckl_s[_ckl_r]++;                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: include/linux/compiler.h:71:
+     if ((_ckl_s[v] == _ckl_s[uv]) && (_ckl_s[v] > debug_likely_count_min_thresh) \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 9)
#86: FILE: include/linux/compiler.h:71:
+     if ((_ckl_s[v] == _ckl_s[uv]) && (_ckl_s[v] > debug_likely_count_min_thresh) \
[...]
+         _ckl_print_nr++;                                       \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '_ckl_s[v] == _ckl_s[uv]'
#86: FILE: include/linux/compiler.h:71:
+     if ((_ckl_s[v] == _ckl_s[uv]) && (_ckl_s[v] > debug_likely_count_min_thresh) \
+          && (_ckl_print_nr < debug_likely_print_max_thresh)) { \

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '_ckl_s[v] > debug_likely_count_min_thresh'
#86: FILE: include/linux/compiler.h:71:
+     if ((_ckl_s[v] == _ckl_s[uv]) && (_ckl_s[v] > debug_likely_count_min_thresh) \
+          && (_ckl_print_nr < debug_likely_print_max_thresh)) { \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '_ckl_print_nr < debug_likely_print_max_thresh'
#86: FILE: include/linux/compiler.h:71:
+     if ((_ckl_s[v] == _ckl_s[uv]) && (_ckl_s[v] > debug_likely_count_min_thresh) \
+          && (_ckl_print_nr < debug_likely_print_max_thresh)) { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: include/linux/compiler.h:72:
+          && (_ckl_print_nr < debug_likely_print_max_thresh)) { \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#87: FILE: include/linux/compiler.h:72:
+     if ((_ckl_s[v] == _ckl_s[uv]) && (_ckl_s[v] > debug_likely_count_min_thresh) \
+          && (_ckl_print_nr < debug_likely_print_max_thresh)) { \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/linux/compiler.h:72:
+          && (_ckl_print_nr < debug_likely_print_max_thresh)) { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: include/linux/compiler.h:73:
+         _ckl_print_nr++;                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/linux/compiler.h:73:
+         _ckl_print_nr++;                                       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: include/linux/compiler.h:74:
+         printk_debug_likely("possible (un)likely misuse at %s:%d/%s()\n",        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/linux/compiler.h:74:
+         printk_debug_likely("possible (un)likely misuse at %s:%d/%s()\n",        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: include/linux/compiler.h:75:
+                             __FILE__, __LINE__, __FUNCTION__); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/linux/compiler.h:75:
+                             __FILE__, __LINE__, __FUNCTION__); \$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#90: FILE: include/linux/compiler.h:75:
+                             __FILE__, __LINE__, __FUNCTION__); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: include/linux/compiler.h:76:
+     }                                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/linux/compiler.h:77:
+     _ckl_r; })$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: kernel/printk.c:610:
+       int r = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: kernel/printk.c:611:
+       static atomic_t recurse = ATOMIC_INIT(1); /* as a mutex */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#122: FILE: kernel/printk.c:612:
+       static atomic_t recurse = ATOMIC_INIT(1); /* as a mutex */
+       if (atomic_dec_and_test(&recurse)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: kernel/printk.c:612:
+       if (atomic_dec_and_test(&recurse)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#122: FILE: kernel/printk.c:612:
+       if (atomic_dec_and_test(&recurse)) {
+               va_list args;

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: kernel/printk.c:613:
+               va_list args;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: kernel/printk.c:613:
+               va_list args;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: kernel/printk.c:615:
+               va_start(args, fmt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: kernel/printk.c:615:
+               va_start(args, fmt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: kernel/printk.c:616:
+               r = vprintk(fmt, args);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: kernel/printk.c:616:
+               r = vprintk(fmt, args);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: kernel/printk.c:617:
+               va_end(args);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: kernel/printk.c:617:
+               va_end(args);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: kernel/printk.c:618:
+               dump_stack();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: kernel/printk.c:618:
+               dump_stack();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: kernel/printk.c:619:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: kernel/printk.c:620:
+       atomic_inc(&recurse);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: kernel/printk.c:622:
+       return r;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#135: FILE: kernel/printk.c:625:
+EXPORT_SYMBOL(debug_likely_print_max_thresh);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#136: FILE: kernel/printk.c:626:
+EXPORT_SYMBOL(printk_debug_likely);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083527.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 30 warnings, 6 checks, 64 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083527.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
