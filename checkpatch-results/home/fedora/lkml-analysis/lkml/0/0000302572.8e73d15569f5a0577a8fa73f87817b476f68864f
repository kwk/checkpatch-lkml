WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#87: 
--- mmlinux-2.6/kernel/fork.c~mremap_race	2004-02-19 00:39:36.000000000 -0500

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/mm.h:533:
+extern void add_vma_to_process(struct mm_struct *, struct vm_area_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#113: FILE: include/linux/mm.h:533:
+extern void add_vma_to_process(struct mm_struct *, struct vm_area_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#113: FILE: include/linux/mm.h:533:
+extern void add_vma_to_process(struct mm_struct *, struct vm_area_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/mm.h:534:
+extern void unmap_vma(struct mm_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#114: FILE: include/linux/mm.h:534:
+extern void unmap_vma(struct mm_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#114: FILE: include/linux/mm.h:534:
+extern void unmap_vma(struct mm_struct *, struct vm_area_struct *);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: mm/mremap.c:251:
+		new_vma->vm_end = new_addr+new_len;
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#140: FILE: mm/mremap.c:252:
+		new_vma->vm_pgoff += (addr-vma->vm_start) >> PAGE_SHIFT;
 		                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: mm/mremap.c:256:
+			struct inode *inode;
+			get_file(new_vma->vm_file);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: mm/mremap.c:319:
+	if (mapping && !(vma->vm_flags & VM_NONLINEAR) &&
+		(unlikely(sequence != atomic_read(&mapping->truncate_count)))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: mm/mmap.c:1112:
+		size_t len = mpnt->vm_end - mpnt->vm_start;
+		mpnt->vm_mm->total_vm -= len >> PAGE_SHIFT;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: mm/mmap.c:1490:
+void add_vma_to_process(struct mm_struct * mm, struct vm_area_struct * vma)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: mm/mmap.c:1490:
+void add_vma_to_process(struct mm_struct * mm, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: mm/mmap.c:1492:
+	struct vm_area_struct * __vma, * prev;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#246: FILE: mm/mmap.c:1492:
+	struct vm_area_struct * __vma, * prev;
 	                               ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#247: FILE: mm/mmap.c:1493:
+	struct rb_node ** rb_link, * rb_parent;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#247: FILE: mm/mmap.c:1493:
+	struct rb_node ** rb_link, * rb_parent;
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#249: FILE: mm/mmap.c:1495:
+	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#249: FILE: mm/mmap.c:1495:
+	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#249: FILE: mm/mmap.c:1495:
+	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#249: FILE: mm/mmap.c:1495:
+	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	                                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#249: FILE: mm/mmap.c:1495:
+	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#249: FILE: mm/mmap.c:1495:
+	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	                                                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#249: FILE: mm/mmap.c:1495:
+	__vma = find_vma_prepare(mm,vma->vm_start,&prev,&rb_link,&rb_parent);
 	                                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: mm/mmap.c:1497:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000302572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 8 warnings, 5 checks, 154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000302572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
