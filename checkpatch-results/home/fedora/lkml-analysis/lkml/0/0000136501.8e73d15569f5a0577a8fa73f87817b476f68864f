WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff -urN linux-2.6.14-orig/Documentation/badram.txt linux-2.6.14/Documentation/badram.txt

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: arch/i386/mm/init.c:273:
+void __init one_highpage_init(struct page *page, int pfn, int bad_ppro,
+		int *bad)

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: arch/i386/mm/init.c:297:
+	int bad;
+	for (pfn = highstart_pfn; pfn < highend_pfn; pfn++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#445: FILE: arch/i386/mm/init.c:299:
+		if (bad) *pbad++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#497: FILE: arch/i386/mm/init.c:610:
+	printk(KERN_INFO "Memory: %luk/%luk available (%dk kernel code, %dk reserved, %dk data, %dk init, %ldk highmem, %dk BadRAM)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: arch/i386/mm/init.c:611:
+	printk(KERN_INFO "Memory: %luk/%luk available (%dk kernel code, %dk reserved, %dk data, %dk init, %ldk highmem, %dk BadRAM)\n",
+		(unsigned long) nr_free_pages() << (PAGE_SHIFT-10),

CHECK:SPACING: No space is necessary after a cast
#498: FILE: arch/i386/mm/init.c:611:
+		(unsigned long) nr_free_pages() << (PAGE_SHIFT-10),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#498: FILE: arch/i386/mm/init.c:611:
+		(unsigned long) nr_free_pages() << (PAGE_SHIFT-10),
 		                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#499: FILE: arch/i386/mm/init.c:612:
+		num_physpages << (PAGE_SHIFT-10),
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#501: FILE: arch/i386/mm/init.c:614:
+		reservedpages << (PAGE_SHIFT-10),
 		                            ^

CHECK:SPACING: No space is necessary after a cast
#504: FILE: arch/i386/mm/init.c:617:
+		(unsigned long) (totalhigh_pages << (PAGE_SHIFT-10)),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#504: FILE: arch/i386/mm/init.c:617:
+		(unsigned long) (totalhigh_pages << (PAGE_SHIFT-10)),
 		                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#505: FILE: arch/i386/mm/init.c:618:
+		badpages << (PAGE_SHIFT-10)
 		                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#547: FILE: arch/i386/mm/pgtable.c:60:
+	printk(KERN_INFO "%d pages of BadRAM\n",badram);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#547: FILE: arch/i386/mm/pgtable.c:60:
+	printk(KERN_INFO "%d pages of BadRAM\n",badram);
 	                                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#654: FILE: mm/page_alloc.c:2579:
+static int __init next_masked_address (unsigned long *addrp, unsigned long mask)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#656: FILE: mm/page_alloc.c:2581:
+	unsigned long inc=1;
 	                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#658: FILE: mm/page_alloc.c:2583:
+	unsigned long newval = *addrp;
+	while (inc & mask)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#677: FILE: mm/page_alloc.c:2602:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#678: FILE: mm/page_alloc.c:2603:
+void __init badram_markpages (int argc, unsigned long *argv) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#678: FILE: mm/page_alloc.c:2603:
+void __init badram_markpages (int argc, unsigned long *argv) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: mm/page_alloc.c:2605:
+	unsigned long addr, mask;
+	while (argc-- > 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#687: FILE: mm/page_alloc.c:2612:
+			struct page *pg = phys_to_page(addr);
+			printk ("%05lx ", __pa(__va(addr)) >> PAGE_SHIFT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#687: FILE: mm/page_alloc.c:2612:
+			printk ("%05lx ", __pa(__va(addr)) >> PAGE_SHIFT);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#687: FILE: mm/page_alloc.c:2612:
+			printk ("%05lx ", __pa(__va(addr)) >> PAGE_SHIFT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#688: FILE: mm/page_alloc.c:2613:
+			printk ("=%05lx/%05lx ", (unsigned long)(pg-mem_map),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#688: FILE: mm/page_alloc.c:2613:
+			printk ("=%05lx/%05lx ", (unsigned long)(pg-mem_map),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#688: FILE: mm/page_alloc.c:2613:
+			printk ("=%05lx/%05lx ", (unsigned long)(pg-mem_map),
 			                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: mm/page_alloc.c:2614:
+			printk ("=%05lx/%05lx ", (unsigned long)(pg-mem_map),
+					max_mapnr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#691: FILE: mm/page_alloc.c:2616:
+				if (PageTestandSetBad (pg)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#691: FILE: mm/page_alloc.c:2616:
+				if (PageTestandSetBad (pg)) {
[...]
+				else printk ("BFR ");
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#692: FILE: mm/page_alloc.c:2617:
+					reserve_bootmem (addr, PAGE_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#693: FILE: mm/page_alloc.c:2618:
+					printk ("BAD ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#693: FILE: mm/page_alloc.c:2618:
+					printk ("BAD ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#695: FILE: mm/page_alloc.c:2620:
+				else printk ("BFR ");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#695: FILE: mm/page_alloc.c:2620:
+				else printk ("BFR ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#695: FILE: mm/page_alloc.c:2620:
+				else printk ("BFR ");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#695: FILE: mm/page_alloc.c:2620:
+				}
+				else printk ("BFR ");

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#698: FILE: mm/page_alloc.c:2623:
+		} while (next_masked_address (&addr,mask));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#698: FILE: mm/page_alloc.c:2623:
+		} while (next_masked_address (&addr,mask));
 		                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#702: FILE: mm/page_alloc.c:2627:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#705: FILE: mm/page_alloc.c:2630:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: mm/page_alloc.c:2634:
+
+

WARNING:MISPLACED_INIT: __initdata should be placed after badram_custom[]
#710: FILE: mm/page_alloc.c:2635:
+static unsigned long __initdata badram_custom[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: mm/page_alloc.c:2636:
+       0,      /* Number of longwords that follow, as F/M pairs */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#714: FILE: mm/page_alloc.c:2639:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#717: FILE: mm/page_alloc.c:2642:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#718: FILE: mm/page_alloc.c:2643:
+static int __init badram_setup (char *str)

WARNING:LINE_SPACING: Missing a blank line after declarations
#721: FILE: mm/page_alloc.c:2646:
+	unsigned long opts[3];
+	if (!mem_map) BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#721: FILE: mm/page_alloc.c:2646:
+	if (!mem_map) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#721: FILE: mm/page_alloc.c:2646:
+	if (!mem_map) BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#722: FILE: mm/page_alloc.c:2647:
+	printk ("PAGE_OFFSET=0x%08lx\n", PAGE_OFFSET);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#722: FILE: mm/page_alloc.c:2647:
+	printk ("PAGE_OFFSET=0x%08lx\n", PAGE_OFFSET);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#723: FILE: mm/page_alloc.c:2648:
+	printk ("BadRAM option is %s\n", str);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#723: FILE: mm/page_alloc.c:2648:
+	printk ("BadRAM option is %s\n", str);

CHECK:SPACING: No space is necessary after a cast
#725: FILE: mm/page_alloc.c:2650:
+		while ((str = get_options (str, 3, (int *) opts), *opts)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#725: FILE: mm/page_alloc.c:2650:
+		while ((str = get_options (str, 3, (int *) opts), *opts)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#726: FILE: mm/page_alloc.c:2651:
+			printk ("   --> marking 0x%08lx, 0x%08lx  [%ld]\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#726: FILE: mm/page_alloc.c:2651:
+			printk ("   --> marking 0x%08lx, 0x%08lx  [%ld]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: mm/page_alloc.c:2652:
+			printk ("   --> marking 0x%08lx, 0x%08lx  [%ld]\n",
+					opts[1], opts[2], opts[0]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#728: FILE: mm/page_alloc.c:2653:
+			badram_markpages (*opts, opts+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#728: FILE: mm/page_alloc.c:2653:
+			badram_markpages (*opts, opts+1);
 			                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#732: FILE: mm/page_alloc.c:2657:
+	badram_markpages (*badram_custom, badram_custom+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#732: FILE: mm/page_alloc.c:2657:
+	badram_markpages (*badram_custom, badram_custom+1);
 	                                               ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#736: FILE: mm/page_alloc.c:2661:
+__setup("badram", badram_setup);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136501.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 34 warnings, 23 checks, 635 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136501.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
