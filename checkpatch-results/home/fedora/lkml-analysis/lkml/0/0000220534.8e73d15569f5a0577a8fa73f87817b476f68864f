WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: drivers/infiniband/core/user_mad.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#93: FILE: drivers/infiniband/core/user_mad.c:32:
+ * $Id: user_mad.c 1389 2004-12-27 22:56:47Z roland $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#109: FILE: drivers/infiniband/core/user_mad.c:48:
+#include <asm/uaccess.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#140: FILE: drivers/infiniband/core/user_mad.c:79:
+	spinlock_t           recv_lock;

CHECK:SPACING: No space is necessary after a cast
#191: FILE: drivers/infiniband/core/user_mad.c:130:
+		(void *) (unsigned long) send_wc->wr_id;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad.data should be sizeof(packet->mad.data)
#195: FILE: drivers/infiniband/core/user_mad.c:134:
+			 sizeof packet->mad.data,

WARNING:SIZEOF_PARENTHESIS: sizeof *packet should be sizeof(*packet)
#218: FILE: drivers/infiniband/core/user_mad.c:157:
+	packet = kmalloc(sizeof *packet, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *packet should be sizeof(*packet)
#222: FILE: drivers/infiniband/core/user_mad.c:161:
+	memset(packet, 0, sizeof *packet);

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad.data should be sizeof(packet->mad.data)
#224: FILE: drivers/infiniband/core/user_mad.c:163:
+	memcpy(packet->mad.data, mad_recv_wc->recv_buf.mad, sizeof packet->mad.data);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: drivers/infiniband/core/user_mad.c:165:
+^Ipacket->mad.qpn ^I  = cpu_to_be32(mad_recv_wc->wc->src_qp);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: drivers/infiniband/core/user_mad.c:166:
+^Ipacket->mad.lid ^I  = cpu_to_be16(mad_recv_wc->wc->slid);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: drivers/infiniband/core/user_mad.c:167:
+^Ipacket->mad.sl  ^I  = mad_recv_wc->wc->sl;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: drivers/infiniband/core/user_mad.c:168:
+^Ipacket->mad.path_bits ^I  = mad_recv_wc->wc->dlid_path_bits;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: drivers/infiniband/core/user_mad.c:172:
+^I^Ipacket->mad.gid_index ^I  = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: drivers/infiniband/core/user_mad.c:173:
+^I^Ipacket->mad.hop_limit ^I  = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#237: FILE: drivers/infiniband/core/user_mad.c:176:
+^I^Ipacket->mad.flow_label ^I  = 0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#247: FILE: drivers/infiniband/core/user_mad.c:186:
+static ssize_t ib_umad_read(struct file *filp, char __user *buf,
                                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: drivers/infiniband/core/user_mad.c:193:
+	if (count < sizeof (struct ib_user_mad))

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad should be sizeof(packet->mad)
#277: FILE: drivers/infiniband/core/user_mad.c:216:
+	if (copy_to_user(buf, &packet->mad, sizeof packet->mad))

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad should be sizeof(packet->mad)
#280: FILE: drivers/infiniband/core/user_mad.c:219:
+		ret = sizeof packet->mad;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#286: FILE: drivers/infiniband/core/user_mad.c:225:
+static ssize_t ib_umad_write(struct file *filp, const char __user *buf,
                                           ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#304: FILE: drivers/infiniband/core/user_mad.c:243:
+	if (count < sizeof (struct ib_user_mad))

WARNING:SIZEOF_PARENTHESIS: sizeof *packet should be sizeof(*packet)
#307: FILE: drivers/infiniband/core/user_mad.c:246:
+	packet = kmalloc(sizeof *packet, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad should be sizeof(packet->mad)
#311: FILE: drivers/infiniband/core/user_mad.c:250:
+	if (copy_from_user(&packet->mad, buf, sizeof packet->mad)) {

CHECK:SPACING: No space is necessary after a cast
#335: FILE: drivers/infiniband/core/user_mad.c:274:
+	method = ((struct ib_mad_hdr *) packet->mad.data)->method;

CHECK:SPACING: No space is necessary after a cast
#340: FILE: drivers/infiniband/core/user_mad.c:279:
+		tid = &((struct ib_mad_hdr *) packet->mad.data)->tid;

CHECK:SPACING: No space is necessary after a cast
#341: FILE: drivers/infiniband/core/user_mad.c:280:
+		*tid = cpu_to_be64(((u64) agent->hi_tid) << 32 |

WARNING:SIZEOF_PARENTHESIS: sizeof ah_attr should be sizeof(ah_attr)
#345: FILE: drivers/infiniband/core/user_mad.c:284:
+	memset(&ah_attr, 0, sizeof ah_attr);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#353: FILE: drivers/infiniband/core/user_mad.c:292:
+^I^Iah_attr.grh.flow_label ^I   = packet->mad.flow_label;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: drivers/infiniband/core/user_mad.c:293:
+^I^Iah_attr.grh.hop_limit  ^I   = packet->mad.hop_limit;$

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad.data should be sizeof(packet->mad.data)
#366: FILE: drivers/infiniband/core/user_mad.c:305:
+					  sizeof packet->mad.data,

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad.data should be sizeof(packet->mad.data)
#368: FILE: drivers/infiniband/core/user_mad.c:307:
+	gather_list.length = sizeof packet->mad.data;

CHECK:SPACING: No space is necessary after a cast
#372: FILE: drivers/infiniband/core/user_mad.c:311:
+	wr.wr.ud.mad_hdr     = (struct ib_mad_hdr *) packet->mad.data;

CHECK:SPACING: No space is necessary after a cast
#378: FILE: drivers/infiniband/core/user_mad.c:317:
+	wr.wr_id            = (unsigned long) packet;

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad.data should be sizeof(packet->mad.data)
#384: FILE: drivers/infiniband/core/user_mad.c:323:
+				 sizeof packet->mad.data,

WARNING:SIZEOF_PARENTHESIS: sizeof packet->mad should be sizeof(packet->mad)
#391: FILE: drivers/infiniband/core/user_mad.c:330:
+	return sizeof packet->mad;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#401: FILE: drivers/infiniband/core/user_mad.c:340:
+static unsigned int ib_umad_poll(struct file *filp, struct poll_table_struct *wait)
                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#408: FILE: drivers/infiniband/core/user_mad.c:347:
+	poll_wait(filp, &file->recv_wait, wait);
 	          ^^^^

CHECK:SPACING: No space is necessary after a cast
#426: FILE: drivers/infiniband/core/user_mad.c:365:
+	if (copy_from_user(&ureq, (void __user *) arg, sizeof ureq)) {

WARNING:SIZEOF_PARENTHESIS: sizeof ureq should be sizeof(ureq)
#426: FILE: drivers/infiniband/core/user_mad.c:365:
+	if (copy_from_user(&ureq, (void __user *) arg, sizeof ureq)) {

WARNING:SIZEOF_PARENTHESIS: sizeof req.method_mask should be sizeof(req.method_mask)
#446: FILE: drivers/infiniband/core/user_mad.c:385:
+	memcpy(req.method_mask, ureq.method_mask, sizeof req.method_mask);

WARNING:SIZEOF_PARENTHESIS: sizeof req.oui should be sizeof(req.oui)
#447: FILE: drivers/infiniband/core/user_mad.c:386:
+	memcpy(req.oui,         ureq.oui,         sizeof req.oui);

CHECK:SPACING: No space is necessary after a cast
#467: FILE: drivers/infiniband/core/user_mad.c:406:
+		     (u32 __user *) (arg + offsetof(struct ib_user_mad_reg_req, id)))) {

CHECK:SPACING: No space is necessary after a cast
#494: FILE: drivers/infiniband/core/user_mad.c:433:
+	if (get_user(id, (u32 __user *) arg)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#513: FILE: drivers/infiniband/core/user_mad.c:452:
+static int ib_umad_ioctl(struct inode *inode, struct file *filp,
                                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#526: FILE: drivers/infiniband/core/user_mad.c:465:
+static int ib_umad_open(struct inode *inode, struct file *filp)
                                                           ^^^^

WARNING:SIZEOF_PARENTHESIS: sizeof *file should be sizeof(*file)
#532: FILE: drivers/infiniband/core/user_mad.c:471:
+	file = kmalloc(sizeof *file, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *file should be sizeof(*file)
#536: FILE: drivers/infiniband/core/user_mad.c:475:
+	memset(file, 0, sizeof *file);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#549: FILE: drivers/infiniband/core/user_mad.c:488:
+static int ib_umad_close(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#565: FILE: drivers/infiniband/core/user_mad.c:504:
+static struct file_operations umad_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#566: FILE: drivers/infiniband/core/user_mad.c:505:
+^I.owner ^I = THIS_MODULE,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#567: FILE: drivers/infiniband/core/user_mad.c:506:
+^I.read ^I = ib_umad_read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#568: FILE: drivers/infiniband/core/user_mad.c:507:
+^I.write ^I = ib_umad_write,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#569: FILE: drivers/infiniband/core/user_mad.c:508:
+^I.poll ^I = ib_umad_poll,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#570: FILE: drivers/infiniband/core/user_mad.c:509:
+^I.ioctl ^I = ib_umad_ioctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#571: FILE: drivers/infiniband/core/user_mad.c:510:
+^I.open ^I = ib_umad_open,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#588: FILE: drivers/infiniband/core/user_mad.c:527:
+static CLASS_DEVICE_ATTR(dev, S_IRUGO, show_dev, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#597: FILE: drivers/infiniband/core/user_mad.c:536:
+static CLASS_DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#606: FILE: drivers/infiniband/core/user_mad.c:545:
+static CLASS_DEVICE_ATTR(port, S_IRUGO, show_port, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#635: FILE: drivers/infiniband/core/user_mad.c:574:
+static CLASS_ATTR(abi_version, S_IRUGO, show_abi_version, NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#642: FILE: drivers/infiniband/core/user_mad.c:581:
+	if (device->node_type == IB_NODE_SWITCH)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#643: FILE: drivers/infiniband/core/user_mad.c:582:
+		s = e = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#644: FILE: drivers/infiniband/core/user_mad.c:583:
+	else {

WARNING:SIZEOF_PARENTHESIS: sizeof *umad_dev should be sizeof(*umad_dev)
#649: FILE: drivers/infiniband/core/user_mad.c:588:
+	umad_dev = kmalloc(sizeof *umad_dev +

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#650: FILE: drivers/infiniband/core/user_mad.c:589:
+			   (e - s + 1) * sizeof (struct ib_umad_port),

WARNING:SIZEOF_PARENTHESIS: sizeof *umad_dev should be sizeof(*umad_dev)
#655: FILE: drivers/infiniband/core/user_mad.c:594:
+	memset(umad_dev, 0, sizeof *umad_dev +

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#656: FILE: drivers/infiniband/core/user_mad.c:595:
+	       (e - s + 1) * sizeof (struct ib_umad_port));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#744: FILE: drivers/infiniband/core/user_mad.c:683:
+		printk(KERN_ERR "user_mad: couldn't get device number\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#750: FILE: drivers/infiniband/core/user_mad.c:689:
+		printk(KERN_ERR "user_mad: couldn't create class infiniband_mad\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#756: FILE: drivers/infiniband/core/user_mad.c:695:
+		printk(KERN_ERR "user_mad: couldn't create abi_version attribute\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#762: FILE: drivers/infiniband/core/user_mad.c:701:
+		printk(KERN_ERR "user_mad: couldn't register ib_umad client\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#770: FILE: drivers/infiniband/core/user_mad.c:709:
+		printk(KERN_ERR "user_mad: couldn't register ioctl32 conversions\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#803: FILE: drivers/infiniband/include/ib_user_mad.h:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#834: FILE: drivers/infiniband/include/ib_user_mad.h:32:
+ * $Id: ib_user_mad.h 1389 2004-12-27 22:56:47Z roland $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000220534.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 61 warnings, 13 checks, 873 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000220534.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
