WARNING:TYPO_SPELLING: 'releative' may be misspelled - perhaps 'relative'?
#36: 
Changes releative to v1:
        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'existance' may be misspelled - perhaps 'existence'?
#41: 
	existance but as soon as two versions exist, checking consistency
	^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
- A check has been added to verify that p_filesz is not larger than p_memsz.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#109: FILE: fs/binfmt_elf.c:492:
+	    /* first check things most likely to fail;
+	       magic number, type and architecture, so we bail out

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ident[EI_CLASS] != ELF_CLASS'
#119: FILE: fs/binfmt_elf.c:501:
+	if ((elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT)) /* see comment for e_version */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ident[EI_DATA] != ELF_DATA'
#119: FILE: fs/binfmt_elf.c:501:
+	if ((elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT)) /* see comment for e_version */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ident[EI_VERSION] != EV_CURRENT'
#119: FILE: fs/binfmt_elf.c:501:
+	if ((elf_ex.e_ident[EI_CLASS] != ELF_CLASS) ||
+	    (elf_ex.e_ident[EI_DATA] != ELF_DATA) ||
+	    (elf_ex.e_ident[EI_VERSION] != EV_CURRENT)) /* see comment for e_version */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#123: FILE: fs/binfmt_elf.c:505:
+	    /* we don't check anything in e_ident[EI_PAD]
+	       the ELF spec states that when reading object files, these

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#131: FILE: fs/binfmt_elf.c:512:
+	    /*
+	      The value 1 for e_version signifies the original file format;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_version != EV_CURRENT'
#138: FILE: fs/binfmt_elf.c:519:
+	if ((elf_ex.e_version != EV_CURRENT) ||
+	    (elf_ex.e_version != elf_ex.e_ident[EI_VERSION]) ||
+	    /* how can we check e_entry? any guarenteed invalid entry points? */
+	    /* need to come up with valid checks for e_phoff & e_shoff */
+	    /* e_flags is checked by elf_check_arch */
+	    (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	    /* e_phentsize checked below */
+	    /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	    /* check for e_shstrndx needs to improve */
+	    ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_version != elf_ex.e_ident[EI_VERSION]'
#138: FILE: fs/binfmt_elf.c:519:
+	if ((elf_ex.e_version != EV_CURRENT) ||
+	    (elf_ex.e_version != elf_ex.e_ident[EI_VERSION]) ||
+	    /* how can we check e_entry? any guarenteed invalid entry points? */
+	    /* need to come up with valid checks for e_phoff & e_shoff */
+	    /* e_flags is checked by elf_check_arch */
+	    (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	    /* e_phentsize checked below */
+	    /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	    /* check for e_shstrndx needs to improve */
+	    ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_ehsize != sizeof(Elf_Ehdr)'
#138: FILE: fs/binfmt_elf.c:519:
+	if ((elf_ex.e_version != EV_CURRENT) ||
+	    (elf_ex.e_version != elf_ex.e_ident[EI_VERSION]) ||
+	    /* how can we check e_entry? any guarenteed invalid entry points? */
+	    /* need to come up with valid checks for e_phoff & e_shoff */
+	    /* e_flags is checked by elf_check_arch */
+	    (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	    /* e_phentsize checked below */
+	    /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	    /* check for e_shstrndx needs to improve */
+	    ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_shstrndx == SHN_UNDEF'
#138: FILE: fs/binfmt_elf.c:519:
+	if ((elf_ex.e_version != EV_CURRENT) ||
+	    (elf_ex.e_version != elf_ex.e_ident[EI_VERSION]) ||
+	    /* how can we check e_entry? any guarenteed invalid entry points? */
+	    /* need to come up with valid checks for e_phoff & e_shoff */
+	    /* e_flags is checked by elf_check_arch */
+	    (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	    /* e_phentsize checked below */
+	    /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	    /* check for e_shstrndx needs to improve */
+	    ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elf_ex.e_shnum != 0'
#138: FILE: fs/binfmt_elf.c:519:
+	if ((elf_ex.e_version != EV_CURRENT) ||
+	    (elf_ex.e_version != elf_ex.e_ident[EI_VERSION]) ||
+	    /* how can we check e_entry? any guarenteed invalid entry points? */
+	    /* need to come up with valid checks for e_phoff & e_shoff */
+	    /* e_flags is checked by elf_check_arch */
+	    (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||
+	    /* e_phentsize checked below */
+	    /* how can we check e_phnum, e_shentsize & e_shnum ? */
+	    /* check for e_shstrndx needs to improve */
+	    ((elf_ex.e_shstrndx == SHN_UNDEF) && (elf_ex.e_shnum != 0)))

WARNING:TYPO_SPELLING: 'guarenteed' may be misspelled - perhaps 'guaranteed'?
#140: FILE: fs/binfmt_elf.c:521:
+	    /* how can we check e_entry? any guarenteed invalid entry points? */
 	                                     ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#143: FILE: fs/binfmt_elf.c:524:
+	    (elf_ex.e_ehsize != sizeof(Elf_Ehdr)) ||

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#160: FILE: fs/binfmt_elf.c:551:
+	/* p_filesz must not exceed p_memsz.
+	   if it does then the binary is corrupt, hence -ENOEXEC

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 8 warnings, 9 checks, 121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
