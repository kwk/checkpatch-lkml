WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
> ... but risk breaking other stuff. Unless you can get the ARM and/or IA64 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: arch/arm/mm/init.c:101:
+#define for_each_nodebank(iter,mi,no)			\
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: arch/arm/mm/init.c:101:
+#define for_each_nodebank(iter,mi,no)			\
                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#77: FILE: arch/arm/mm/init.c:101:
+#define for_each_nodebank(iter,mi,no)			\
+	for (iter = 0; iter < mi->nr_banks; iter++)	\
+		if (mi->bank[iter].node == no)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iter' - possible side-effects?
#77: FILE: arch/arm/mm/init.c:101:
+#define for_each_nodebank(iter,mi,no)			\
+	for (iter = 0; iter < mi->nr_banks; iter++)	\
+		if (mi->bank[iter].node == no)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mi' - possible side-effects?
#77: FILE: arch/arm/mm/init.c:101:
+#define for_each_nodebank(iter,mi,no)			\
+	for (iter = 0; iter < mi->nr_banks; iter++)	\
+		if (mi->bank[iter].node == no)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mi' may be better as '(mi)' to avoid precedence issues
#77: FILE: arch/arm/mm/init.c:101:
+#define for_each_nodebank(iter,mi,no)			\
+	for (iter = 0; iter < mi->nr_banks; iter++)	\
+		if (mi->bank[iter].node == no)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'no' may be better as '(no)' to avoid precedence issues
#77: FILE: arch/arm/mm/init.c:101:
+#define for_each_nodebank(iter,mi,no)			\
+	for (iter = 0; iter < mi->nr_banks; iter++)	\
+		if (mi->bank[iter].node == no)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#225: FILE: arch/arm/mm/init.c:238:
+void __init create_mapping(struct map_desc *md);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#433: FILE: arch/arm/mm/init.c:374:
+	p ++;
 	  ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#523: FILE: arch/arm/mm/init.c:422:
+	max_pfn = max_low_pfn = memend_pfn - PHYS_PFN_OFFSET;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONST_STRUCT: struct machine_desc should normally be const
#534: FILE: arch/arm/mm/init.c:431:
+static void __init devicemaps_init(struct machine_desc *mdesc)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: arch/arm/mm/init.c:462:
+	BUG_ON(!vectors);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONST_STRUCT: struct machine_desc should normally be const
#605: FILE: arch/arm/mm/init.c:493:
+void __init paging_init(struct meminfo *mi, struct machine_desc *mdesc)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 5 checks, 704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143047.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
