WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# Patch managed by http://www.holgerschurig.de/patcher.html

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#58: FILE: include/linux/device.h:150:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo*	bar" should be "foo *bar"
#75: FILE: include/linux/device.h:246:
+	struct class*	class1;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo*	bar" should be "foo *bar"
#76: FILE: include/linux/device.h:247:
+	struct class*	class2;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/device.h:252:
+extern int class_match_register(struct class_match *match);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/device.h:253:
+extern void class_match_unregister(struct class_match *match);

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#93: FILE: include/linux/device.h:264:
+extern void class_simple_set_match(struct class_simple *cs, struct class_m=
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: include/linux/device.h:264:
+extern void class_simple_set_match(struct class_simple *cs, struct class_m=

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_m' should also have an identifier name
#93: FILE: include/linux/device.h:264:
+extern void class_simple_set_match(struct class_simple *cs, struct class_m=

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#105: FILE: drivers/base/class_simple.c:218:
+extern void class_simple_set_match(struct class_simple *cs, struct class_m=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#107: FILE: drivers/base/class_simple.c:219:
+extern void class_simple_set_match(struct class_simple *cs, struct class_m=
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#108: FILE: drivers/base/class_simple.c:220:
+	if (location =3D=3D 1) {
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#108: FILE: drivers/base/class_simple.c:220:
+	if (location =3D=3D 1) {
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#108: FILE: drivers/base/class_simple.c:220:
+	if (location =3D=3D 1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#108: FILE: drivers/base/class_simple.c:220:
+	if (location =3D=3D 1) {
[...]
+	} else if (location =3D=3D 2) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#109: FILE: drivers/base/class_simple.c:221:
+		match->class1 =3D &cs->class;
 		              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#109: FILE: drivers/base/class_simple.c:221:
+		match->class1 =3D &cs->class;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#110: FILE: drivers/base/class_simple.c:222:
+	} else if (location =3D=3D 2) {
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#110: FILE: drivers/base/class_simple.c:222:
+	} else if (location =3D=3D 2) {
 	                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#110: FILE: drivers/base/class_simple.c:222:
+	} else if (location =3D=3D 2) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#111: FILE: drivers/base/class_simple.c:223:
+		match->class2 =3D &cs->class;
 		              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#111: FILE: drivers/base/class_simple.c:223:
+		match->class2 =3D &cs->class;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#129: FILE: drivers/base/class.c:308:
+static spinlock_t class_match_lock =3D SPIN_LOCK_UNLOCKED;
                                    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#136: FILE: drivers/base/class.c:315:
+};
+/* Makes the calls to class_match->match functions and connects devices to=

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#138: FILE: drivers/base/class.c:316:
+/* Makes the calls to class_match->match functions and connects devices to=
+static void class_match_check(struct class_device *dev)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#153: FILE: drivers/base/class.c:331:
+		if (parent =3D=3D match_node->match->class1) {
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#153: FILE: drivers/base/class.c:331:
+		if (parent =3D=3D match_node->match->class1) {
 		              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#153: FILE: drivers/base/class.c:331:
+		if (parent =3D=3D match_node->match->class1) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#153: FILE: drivers/base/class.c:331:
+		if (parent =3D=3D match_node->match->class1) {
[...]
+		} else if (parent =3D=3D match_node->match->class2) {
[...]
+		} else {
[...]

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#154: FILE: drivers/base/class.c:332:
+			other_class =3D match_node->match->class2;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#155: FILE: drivers/base/class.c:333:
+		} else if (parent =3D=3D match_node->match->class2) {
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#155: FILE: drivers/base/class.c:333:
+		} else if (parent =3D=3D match_node->match->class2) {
 		                     ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#155: FILE: drivers/base/class.c:333:
+		} else if (parent =3D=3D match_node->match->class2) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#156: FILE: drivers/base/class.c:334:
+			other_class =3D match_node->match->class1;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#158: FILE: drivers/base/class.c:336:
+			other_class =3D NULL;
 			            ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#166: FILE: drivers/base/class.c:344:
+				list_for_each_entry(other_match_node, &other_device->matched_classes, =

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#168: FILE: drivers/base/class.c:345:
+					if (other_match_node->match =3D=3D match_node->match) {
 					                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#168: FILE: drivers/base/class.c:345:
+					if (other_match_node->match =3D=3D match_node->match) {
 					                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#168: FILE: drivers/base/class.c:345:
+					if (other_match_node->match =3D=3D match_node->match) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#168: FILE: drivers/base/class.c:345:
+					if (other_match_node->match =3D=3D match_node->match) {
+						goto already_matched;
+					}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#174: FILE: drivers/base/class.c:351:
+				if (parent =3D=3D match_node->match->class1) {
 				           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#174: FILE: drivers/base/class.c:351:
+				if (parent =3D=3D match_node->match->class1) {
 				              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#174: FILE: drivers/base/class.c:351:
+				if (parent =3D=3D match_node->match->class1) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#174: FILE: drivers/base/class.c:351:
+				if (parent =3D=3D match_node->match->class1) {
[...]
+				} else {
[...]

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#175: FILE: drivers/base/class.c:352:
+					ret =3D match_node->match->match(dev, other_device);
 					    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#177: FILE: drivers/base/class.c:354:
+					ret =3D match_node->match->match(other_device, dev);
 					    ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#180: FILE: drivers/base/class.c:357:
+				if (ret) {
+

WARNING:TYPO_SPELLING: 'struc' may be misspelled - perhaps 'struct'?
#182: FILE: drivers/base/class.c:359:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=
 					                                                                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#182: FILE: drivers/base/class.c:359:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

CHECK:SPACING: No space is necessary after a cast
#182: FILE: drivers/base/class.c:359:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#182: FILE: drivers/base/class.c:359:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#182: FILE: drivers/base/class.c:359:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=
 					                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#182: FILE: drivers/base/class.c:359:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=
 					                                                                     ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#182: FILE: drivers/base/class.c:359:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#185: FILE: drivers/base/class.c:361:
+						other_match_node->dev =3D other_device;
 						                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#186: FILE: drivers/base/class.c:362:
+						other_match_node->match =3D match_node->match;
 						                        ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#188: FILE: drivers/base/class.c:364:
+						list_add_tail(&other_match_node->node, &dev->matched_classes);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#189: FILE: drivers/base/class.c:365:
+						sysfs_create_link(&dev->kobj, &other_device->kobj, other_class->name=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#189: FILE: drivers/base/class.c:365:
+						sysfs_create_link(&dev->kobj, &other_device->kobj, other_class->name=
 						                                                                    ^

WARNING:TYPO_SPELLING: 'struc' may be misspelled - perhaps 'struct'?
#193: FILE: drivers/base/class.c:368:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=
 					                                                                ^^^^^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#193: FILE: drivers/base/class.c:368:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

CHECK:SPACING: No space is necessary after a cast
#193: FILE: drivers/base/class.c:368:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#193: FILE: drivers/base/class.c:368:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#193: FILE: drivers/base/class.c:368:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=
 					                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#193: FILE: drivers/base/class.c:368:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=
 					                                                                     ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#193: FILE: drivers/base/class.c:368:
+					other_match_node =3D (struct class_match_node *) kmalloc(sizeof(struc=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#196: FILE: drivers/base/class.c:370:
+						other_match_node->dev =3D dev;
 						                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#197: FILE: drivers/base/class.c:371:
+						other_match_node->match =3D match_node->match;
 						                        ^

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#199: FILE: drivers/base/class.c:373:
+						list_add_tail(&other_match_node->node, &other_device->matched_classe=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#199: FILE: drivers/base/class.c:373:
+						list_add_tail(&other_match_node->node, &other_device->matched_classe=
 						                                                                    ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#201: FILE: drivers/base/class.c:374:
+						sysfs_create_link(&other_device->kobj, &dev->kobj, parent->name);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#203: FILE: drivers/base/class.c:376:
+					}
+				=09

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#203: FILE: drivers/base/class.c:376:
+				=09
 				^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#218: FILE: drivers/base/class.c:391:
+	struct class * parent =3D class_dev->class;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#218: FILE: drivers/base/class.c:391:
+	struct class * parent =3D class_dev->class;
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#228: FILE: drivers/base/class.c:401:
+		if (parent =3D=3D match_node->match->class1) {
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#228: FILE: drivers/base/class.c:401:
+		if (parent =3D=3D match_node->match->class1) {
 		              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#228: FILE: drivers/base/class.c:401:
+		if (parent =3D=3D match_node->match->class1) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#229: FILE: drivers/base/class.c:402:
+			other_class =3D match_node->match->class2;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#230: FILE: drivers/base/class.c:403:
+		} else if (parent =3D=3D match_node->match->class2) {
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#230: FILE: drivers/base/class.c:403:
+		} else if (parent =3D=3D match_node->match->class2) {
 		                     ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#230: FILE: drivers/base/class.c:403:
+		} else if (parent =3D=3D match_node->match->class2) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#231: FILE: drivers/base/class.c:404:
+			other_class =3D match_node->match->class1;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#234: FILE: drivers/base/class.c:407:
+			other_class =3D NULL;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#237: FILE: drivers/base/class.c:410:
+			list_for_each_entry_safe(other_match_node, temp_match_node, &match_node=
 			                                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#239: FILE: drivers/base/class.c:411:
+				if (match_node->match =3D=3D other_match_node->match) {
 				                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#239: FILE: drivers/base/class.c:411:
+				if (match_node->match =3D=3D other_match_node->match) {
 				                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#239: FILE: drivers/base/class.c:411:
+				if (match_node->match =3D=3D other_match_node->match) {

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#250: FILE: drivers/base/class.c:422:
+	list_for_each_entry_safe(match_node, temp_match_node, &class_dev->matched=
 	                                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#253: FILE: drivers/base/class.c:424:
+		if (parent =3D=3D match_node->match->class1) {
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#253: FILE: drivers/base/class.c:424:
+		if (parent =3D=3D match_node->match->class1) {
 		              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#253: FILE: drivers/base/class.c:424:
+		if (parent =3D=3D match_node->match->class1) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#253: FILE: drivers/base/class.c:424:
+		if (parent =3D=3D match_node->match->class1) {
[...]
+		} else {
[...]

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#296: FILE: drivers/base/class.c:639:
 }
+int class_match_register(struct class_match *match)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#299: FILE: drivers/base/class.c:642:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#304: FILE: drivers/base/class.c:647:
+	if (!match->match || match->class1 =3D=3D match->class2)
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#304: FILE: drivers/base/class.c:647:
+	if (!match->match || match->class1 =3D=3D match->class2)
 	                                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#304: FILE: drivers/base/class.c:647:
+	if (!match->match || match->class1 =3D=3D match->class2)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#308: FILE: drivers/base/class.c:650:
+=09
 ^

CHECK:SPACING: No space is necessary after a cast
#309: FILE: drivers/base/class.c:651:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#309: FILE: drivers/base/class.c:651:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#309: FILE: drivers/base/class.c:651:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#309: FILE: drivers/base/class.c:651:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=
 	                                                                         ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#309: FILE: drivers/base/class.c:651:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#312: FILE: drivers/base/class.c:653:
+		match_node->match =3D match;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#313: FILE: drivers/base/class.c:654:
+		match_node->dev =3D NULL;
 		                ^

CHECK:SPACING: No space is necessary after a cast
#321: FILE: drivers/base/class.c:662:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#321: FILE: drivers/base/class.c:662:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#321: FILE: drivers/base/class.c:662:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#321: FILE: drivers/base/class.c:662:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=
 	                                                                         ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#321: FILE: drivers/base/class.c:662:
+	match_node =3D (struct class_match_node *) kmalloc(sizeof(struct class_ma=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#324: FILE: drivers/base/class.c:664:
+		match_node->match =3D match;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#325: FILE: drivers/base/class.c:665:
+		match_node->dev =3D NULL;
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#334: FILE: drivers/base/class.c:674:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#346: FILE: drivers/base/class.c:686:
+	if (!match->match || match->class1 =3D=3D match->class2)
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#346: FILE: drivers/base/class.c:686:
+	if (!match->match || match->class1 =3D=3D match->class2)
 	                                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#346: FILE: drivers/base/class.c:686:
+	if (!match->match || match->class1 =3D=3D match->class2)

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#348: FILE: drivers/base/class.c:688:
+=09
 ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#364: FILE: drivers/base/class.c:734:
+EXPORT_SYMBOL(class_match_unregister);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257877.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 80 errors, 28 warnings, 13 checks, 298 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257877.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
