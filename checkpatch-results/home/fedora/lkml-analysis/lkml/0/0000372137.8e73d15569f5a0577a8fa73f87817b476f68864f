WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
#	           ChangeSet	1.1072  -> 1.1073 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#	include/linux/netfilter_ipv4/ip_nat_core.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#	net/ipv4/netfilter/ip_nat_proto_tcp.c	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#	net/ipv4/netfilter/ip_nat_core.c	1.22    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#	net/ipv4/netfilter/ip_nat_helper.c	1.12    -> 1.13   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	net/ipv4/netfilter/ip_nat_proto_udp.c	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	include/linux/netfilter_ipv4/ip_nat_helper.h	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	net/ipv4/netfilter/ip_nat_tftp.c	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	net/ipv4/netfilter/ip_nat_proto_icmp.c	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#	net/ipv4/netfilter/ip_nat_proto_unknown.c	1.2     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#	include/linux/netfilter_ipv4/ip_nat_protocol.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#	net/ipv4/netfilter/ip_nat_standalone.c	1.22    -> 1.23   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# 03/05/06	rusty@rustcorp.com.au	1.1073

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# [NETFILTER]: Make NAT code handle non-linear skbs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# Makes the NAT code and all NAT helpers handle non-linear skbs.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# Main trick is to introduce skb_ip_make_writable which handles all

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# the decloning, linearizing, etc.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#89: 
--- a/include/linux/netfilter_ipv4/ip_nat_core.h	Tue May  6 09:30:02 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/netfilter_ipv4/ip_nat_core.h:19:
+extern int icmp_reply_translation(struct sk_buff **pskb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#112: FILE: include/linux/netfilter_ipv4/ip_nat_core.h:35:
+/* Call this before modifying an existing IP packet: ensures it is
+   modifiable and linear to the point you care about (writable_len).

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#113: FILE: include/linux/netfilter_ipv4/ip_nat_core.h:36:
+   Returns true or false. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/netfilter_ipv4/ip_nat_core.h:37:
+extern int skb_ip_make_writable(struct sk_buff **pskb,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: include/linux/netfilter_ipv4/ip_nat_helper.h:62:
+extern int ip_nat_seq_adjust(struct sk_buff **pskb, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/netfilter_ipv4/ip_nat_helper.h:62:
+extern int ip_nat_seq_adjust(struct sk_buff **pskb, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: include/linux/netfilter_ipv4/ip_nat_helper.h:63:
+^I^I^I     struct ip_conntrack *ct, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#161: FILE: include/linux/netfilter_ipv4/ip_nat_protocol.h:21:
+	 * and manip type.  Return true if succeeded. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#189: FILE: net/ipv4/netfilter/ip_nat_core.c:705:
+manip_pkt(u_int16_t proto,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: net/ipv4/netfilter/ip_nat_core.c:714:
+	if (!skb_ip_make_writable(pskb, iphdroff+sizeof(iph)))
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'protcol' may be misspelled - perhaps 'protocol'?
#207: FILE: net/ipv4/netfilter/ip_nat_core.c:719:
+	/* Manipulate protcol part. */
 	              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#208: FILE: net/ipv4/netfilter/ip_nat_core.c:720:
+	if (!find_nat_proto(proto)->manip_pkt(pskb, iphdroff + iph->ihl*4,
 	                                                               ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#286: FILE: net/ipv4/netfilter/ip_nat_core.c:835:
+		if (proto == IPPROTO_TCP
+		    && (hooknum == NF_IP_POST_ROUTING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#287: FILE: net/ipv4/netfilter/ip_nat_core.c:836:
+		    && (hooknum == NF_IP_POST_ROUTING
+			|| hooknum == NF_IP_LOCAL_IN)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: net/ipv4/netfilter/ip_nat_core.c:865:
+	if (!skb_ip_make_writable(pskb,(*pskb)->nh.iph->ihl*4+sizeof(*inside)))
 	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#321: FILE: net/ipv4/netfilter/ip_nat_core.c:865:
+	if (!skb_ip_make_writable(pskb,(*pskb)->nh.iph->ihl*4+sizeof(*inside)))
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#321: FILE: net/ipv4/netfilter/ip_nat_core.c:865:
+	if (!skb_ip_make_writable(pskb,(*pskb)->nh.iph->ihl*4+sizeof(*inside)))
 	                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#323: FILE: net/ipv4/netfilter/ip_nat_core.c:867:
+	inside = (void *)(*pskb)->data + (*pskb)->nh.iph->ihl*4;
 	                                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#326: FILE: net/ipv4/netfilter/ip_nat_core.c:870:
+	/* We're actually going to mangle it beyond trivial checksum
+	   adjustment, so make sure the current checksum is correct. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#326: FILE: net/ipv4/netfilter/ip_nat_core.c:870:
+	   adjustment, so make sure the current checksum is correct. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#328: FILE: net/ipv4/netfilter/ip_nat_core.c:872:
+	if ((*pskb)->ip_summed != CHECKSUM_UNNECESSARY
+	    && (u16)csum_fold(skb_checksum(*pskb, (*pskb)->nh.iph->ihl*4,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#328: FILE: net/ipv4/netfilter/ip_nat_core.c:872:
+	    && (u16)csum_fold(skb_checksum(*pskb, (*pskb)->nh.iph->ihl*4,
 	                                                              ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#338: FILE: net/ipv4/netfilter/ip_nat_core.c:880:
 		     == IP_CT_RELATED
+		     || (*pskb)->nfct

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#371: FILE: net/ipv4/netfilter/ip_nat_core.c:928:
+				      (*pskb)->nh.iph->ihl*4
 				                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#404: FILE: net/ipv4/netfilter/ip_nat_core.c:953:
+						       (*pskb)->nh.iph->ihl*4,
 						                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#427: FILE: net/ipv4/netfilter/ip_nat_core.c:975:
+	if (writable_len <= (*pskb)->nh.iph->ihl*4)
 	                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#430: FILE: net/ipv4/netfilter/ip_nat_core.c:978:
+	iplen = writable_len - (*pskb)->nh.iph->ihl*4;
 	                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#436: FILE: net/ipv4/netfilter/ip_nat_core.c:984:
+		struct tcphdr hdr;
+		if (skb_copy_bits(*pskb, (*pskb)->nh.iph->ihl*4,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#436: FILE: net/ipv4/netfilter/ip_nat_core.c:984:
+		if (skb_copy_bits(*pskb, (*pskb)->nh.iph->ihl*4,
 		                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#439: FILE: net/ipv4/netfilter/ip_nat_core.c:987:
+		if (writable_len <= (*pskb)->nh.iph->ihl*4 + hdr.doff*4)
 		                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#439: FILE: net/ipv4/netfilter/ip_nat_core.c:987:
+		if (writable_len <= (*pskb)->nh.iph->ihl*4 + hdr.doff*4)
 		                                                     ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#444: FILE: net/ipv4/netfilter/ip_nat_core.c:992:
+		if (writable_len<=(*pskb)->nh.iph->ihl*4+sizeof(struct udphdr))
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#444: FILE: net/ipv4/netfilter/ip_nat_core.c:992:
+		if (writable_len<=(*pskb)->nh.iph->ihl*4+sizeof(struct udphdr))
 		                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#444: FILE: net/ipv4/netfilter/ip_nat_core.c:992:
+		if (writable_len<=(*pskb)->nh.iph->ihl*4+sizeof(struct udphdr))
 		                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#449: FILE: net/ipv4/netfilter/ip_nat_core.c:997:
+		    <= (*pskb)->nh.iph->ihl*4 + sizeof(struct icmphdr))
 		                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: net/ipv4/netfilter/ip_nat_core.c:1007:
+	BUG_ON(skb_is_nonlinear(nskb));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#462: FILE: net/ipv4/netfilter/ip_nat_core.c:1010:
+	/* Rest of kernel will get very unhappy if we pass it a
+	   suddenly-orphaned skbuff */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#462: FILE: net/ipv4/netfilter/ip_nat_core.c:1010:
+	   suddenly-orphaned skbuff */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: net/ipv4/netfilter/ip_nat_helper.c:51:
+static inline void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: net/ipv4/netfilter/ip_nat_helper.c:54:
+^I^I    struct ip_conntrack *ct, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#524: FILE: net/ipv4/netfilter/ip_nat_helper.c:76:
+	 * retransmit */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 20)
#525: FILE: net/ipv4/netfilter/ip_nat_helper.c:77:
+	if (this_way->offset_before == this_way->offset_after
[...]
+		    this_way->correction_pos = seq;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#526: FILE: net/ipv4/netfilter/ip_nat_helper.c:78:
+	if (this_way->offset_before == this_way->offset_after
+	    || before(this_way->correction_pos, seq)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#568: FILE: net/ipv4/netfilter/ip_nat_helper.c:99:
+	BUG_ON(skb_is_nonlinear(skb));

WARNING:SPLIT_STRING: quoted string split across lines
#585: FILE: net/ipv4/netfilter/ip_nat_helper.c:113:
+		DEBUGP("ip_nat_mangle_packet: Extending packet by "
+			"%u from %u bytes\n", rep_len - match_len,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#590: FILE: net/ipv4/netfilter/ip_nat_helper.c:118:
+		DEBUGP("ip_nat_mangle_packet: Shrinking packet from "
+			"%u from %u bytes\n", match_len - rep_len,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#667: FILE: net/ipv4/netfilter/ip_nat_helper.c:176:
+	if (rep_len > match_len
+	    && rep_len - match_len > skb_tailroom(*pskb)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#668: FILE: net/ipv4/netfilter/ip_nat_helper.c:177:
+	    && rep_len - match_len > skb_tailroom(*pskb)
+	    && !enlarge_skb(pskb, rep_len - match_len))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#720: FILE: net/ipv4/netfilter/ip_nat_helper.c:185:
+	mangle_contents(*pskb, iph->ihl*4 + tcph->doff*4,
 	                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#720: FILE: net/ipv4/netfilter/ip_nat_helper.c:185:
+	mangle_contents(*pskb, iph->ihl*4 + tcph->doff*4,
 	                                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#725: FILE: net/ipv4/netfilter/ip_nat_helper.c:189:
+	tcph->check = tcp_v4_check(tcph, (*pskb)->len - iph->ihl*4,
 	                                                        ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#796: FILE: net/ipv4/netfilter/ip_nat_helper.c:226:
+	if (rep_len > match_len
+	    && rep_len - match_len > skb_tailroom(*pskb)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#797: FILE: net/ipv4/netfilter/ip_nat_helper.c:227:
+	    && rep_len - match_len > skb_tailroom(*pskb)
+	    && !enlarge_skb(pskb, rep_len - match_len))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#814: FILE: net/ipv4/netfilter/ip_nat_helper.c:232:
+	mangle_contents(*pskb, iph->ihl*4 + sizeof(*udph),
 	                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#832: FILE: net/ipv4/netfilter/ip_nat_helper.c:236:
+	udph->len = htons((*pskb)->len - iph->ihl*4);
 	                                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#841: FILE: net/ipv4/netfilter/ip_nat_helper.c:239:
+	if (need_csum) {
[...]
+					    csum_partial((char *)udph,
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#847: FILE: net/ipv4/netfilter/ip_nat_helper.c:242:
+		udph->check
+			= csum_tcpudp_magic(iph->saddr, iph->daddr,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#848: FILE: net/ipv4/netfilter/ip_nat_helper.c:243:
+					    (*pskb)->len - iph->ihl*4,
 					                           ^

CHECK:BRACES: Unbalanced braces around else statement
#858: FILE: net/ipv4/netfilter/ip_nat_helper.c:248:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: net/ipv4/netfilter/ip_nat_helper.c:256:
+^I    struct tcphdr *tcph, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#887: FILE: net/ipv4/netfilter/ip_nat_helper.c:268:
+^I^I^Inew_start_seq = ntohl(sack->start_seq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#891: FILE: net/ipv4/netfilter/ip_nat_helper.c:271:
+^I^I^Inew_start_seq = ntohl(sack->start_seq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#917: FILE: net/ipv4/netfilter/ip_nat_helper.c:290:
+^I^I^I^I^I   ip_nat_cheat_check(~sack->end_seq, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: net/ipv4/netfilter/ip_nat_helper.c:291:
+					   ip_nat_cheat_check(~sack->end_seq, 
 						   	      new_end_seq,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#952: FILE: net/ipv4/netfilter/ip_nat_helper.c:308:
+	optoff = (*pskb)->nh.iph->ihl*4 + sizeof(struct tcphdr);
 	                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#953: FILE: net/ipv4/netfilter/ip_nat_helper.c:309:
+	optend = (*pskb)->nh.iph->ihl*4 + tcph->doff*4;
 	                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#953: FILE: net/ipv4/netfilter/ip_nat_helper.c:309:
+	optend = (*pskb)->nh.iph->ihl*4 + tcph->doff*4;
 	                                            ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#995: FILE: net/ipv4/netfilter/ip_nat_helper.c:329:
+			if (optoff + 1 == optend
+			    || optoff + op[1] > optend

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#996: FILE: net/ipv4/netfilter/ip_nat_helper.c:330:
+			    || optoff + op[1] > optend
+			    || op[1] < 2)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#999: FILE: net/ipv4/netfilter/ip_nat_helper.c:333:
+			if (op[0] == TCPOPT_SACK
+			    && op[1] >= 2+TCPOLEN_SACK_PERBLOCK

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#999: FILE: net/ipv4/netfilter/ip_nat_helper.c:333:
+			    && op[1] >= 2+TCPOLEN_SACK_PERBLOCK
 			                 ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1000: FILE: net/ipv4/netfilter/ip_nat_helper.c:334:
+			    && op[1] >= 2+TCPOLEN_SACK_PERBLOCK
+			    && ((op[1] - 2) % TCPOLEN_SACK_PERBLOCK) == 0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1001: FILE: net/ipv4/netfilter/ip_nat_helper.c:335:
+				sack_adjust(*pskb, tcph, optoff+2,
 				                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1002: FILE: net/ipv4/netfilter/ip_nat_helper.c:336:
+					    optoff+op[1],
 					          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1016: FILE: net/ipv4/netfilter/ip_nat_helper.c:346:
+ip_nat_seq_adjust(struct sk_buff **pskb, $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1036: FILE: net/ipv4/netfilter/ip_nat_helper.c:361:
+	if (!this_way->offset_before && !this_way->offset_after
+	    && !other_way->offset_before && !other_way->offset_after)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1039: FILE: net/ipv4/netfilter/ip_nat_helper.c:364:
+	if (!skb_ip_make_writable(pskb, (*pskb)->nh.iph->ihl*4+sizeof(*tcph)))
 	                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1039: FILE: net/ipv4/netfilter/ip_nat_helper.c:364:
+	if (!skb_ip_make_writable(pskb, (*pskb)->nh.iph->ihl*4+sizeof(*tcph)))
 	                                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1042: FILE: net/ipv4/netfilter/ip_nat_helper.c:367:
+	tcph = (void *)(*pskb)->data + (*pskb)->nh.iph->ihl*4;
 	                                                   ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#1117: FILE: net/ipv4/netfilter/ip_nat_proto_tcp.c:85:
+	u_int16_t *portptr, oldport;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1121: FILE: net/ipv4/netfilter/ip_nat_proto_tcp.c:89:
+	/* this could be a inner header returned in icmp packet; in such
+	   cases we cannot update the checksum field since it is outside of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1122: FILE: net/ipv4/netfilter/ip_nat_proto_tcp.c:90:
+	   the 8 bytes of transport layer headers we are guaranteed */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1257: FILE: net/ipv4/netfilter/ip_nat_standalone.c:97:
+			if (skb_copy_bits(*pskb, (*pskb)->nh.iph->ihl*4,
 			                                             ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1259: FILE: net/ipv4/netfilter/ip_nat_standalone.c:99:
+					  &hdr, sizeof(hdr)) == 0
+			    && hdr.type == ICMP_REDIRECT)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1326: FILE: net/ipv4/netfilter/ip_nat_tftp.c:72:
+	if (skb_copy_bits(*pskb, (*pskb)->nh.iph->ihl*4+sizeof(struct udphdr),
 	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1326: FILE: net/ipv4/netfilter/ip_nat_tftp.c:72:
+	if (skb_copy_bits(*pskb, (*pskb)->nh.iph->ihl*4+sizeof(struct udphdr),
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1342: FILE: net/ipv4/netfilter/ip_nat_tftp.c:111:
+	if (skb_copy_bits(*pskb,(*pskb)->nh.iph->ihl*4,&udph,sizeof(udph))!=0)
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1342: FILE: net/ipv4/netfilter/ip_nat_tftp.c:111:
+	if (skb_copy_bits(*pskb,(*pskb)->nh.iph->ihl*4,&udph,sizeof(udph))!=0)
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1342: FILE: net/ipv4/netfilter/ip_nat_tftp.c:111:
+	if (skb_copy_bits(*pskb,(*pskb)->nh.iph->ihl*4,&udph,sizeof(udph))!=0)
 	                                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1342: FILE: net/ipv4/netfilter/ip_nat_tftp.c:111:
+	if (skb_copy_bits(*pskb,(*pskb)->nh.iph->ihl*4,&udph,sizeof(udph))!=0)
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1342: FILE: net/ipv4/netfilter/ip_nat_tftp.c:111:
+	if (skb_copy_bits(*pskb,(*pskb)->nh.iph->ihl*4,&udph,sizeof(udph))!=0)
 	                                                    ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1342: FILE: net/ipv4/netfilter/ip_nat_tftp.c:111:
+	if (skb_copy_bits(*pskb,(*pskb)->nh.iph->ihl*4,&udph,sizeof(udph))!=0)
 	                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1353: FILE: net/ipv4/netfilter/ip_nat_tftp.c:126:
+                        NIPQUAD((*pskb)->nh.iph->saddr), ntohs(udph.source),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: net/ipv4/netfilter/ip_nat_tftp.c:126:
+                        NIPQUAD((*pskb)->nh.iph->saddr), ntohs(udph.source),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1354: FILE: net/ipv4/netfilter/ip_nat_tftp.c:127:
+ ^I^I^INIPQUAD((*pskb)->nh.iph->daddr), ntohs(udph.dest),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1354: FILE: net/ipv4/netfilter/ip_nat_tftp.c:127:
+ ^I^I^INIPQUAD((*pskb)->nh.iph->daddr), ntohs(udph.dest),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: net/ipv4/netfilter/ip_nat_tftp.c:127:
+ ^I^I^INIPQUAD((*pskb)->nh.iph->daddr), ntohs(udph.dest),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1364: FILE: net/ipv4/netfilter/ip_nat_tftp.c:137:
+                        NIPQUAD((*pskb)->nh.iph->saddr), ntohs(udph.source),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: net/ipv4/netfilter/ip_nat_tftp.c:137:
+                        NIPQUAD((*pskb)->nh.iph->saddr), ntohs(udph.source),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1365: FILE: net/ipv4/netfilter/ip_nat_tftp.c:138:
+                        NIPQUAD((*pskb)->nh.iph->daddr), ntohs(udph.dest),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: net/ipv4/netfilter/ip_nat_tftp.c:138:
+                        NIPQUAD((*pskb)->nh.iph->daddr), ntohs(udph.dest),$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000372137.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 49 warnings, 59 checks, 1213 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000372137.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
