WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: include/asm-s390/futex.h:1:
+#ifndef _ASM_S390_FUTEX_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#51: FILE: include/asm-s390/futex.h:8:
+#include <asm/uaccess.h>

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#67: FILE: include/asm-s390/futex.h:24:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile("   l   %1,0(%6)\n"				\
+		     "0: " insn						\
+		     "   cs  %1,%2,0(%6)\n"				\
+		     "1: jl  0b\n"					\
+		     "   lhi %0,0\n"					\
+		     "2:\n"						\
+		     __futex_atomic_fixup				\
+		     : "=d" (ret), "=&d" (oldval), "=&d" (newval),	\
+		       "=m" (*(unsigned long __user *) uaddr)		\
+		     : "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		       "m" (*(unsigned long __user *) uaddr) : "cc" );

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'uaddr' - possible side-effects?
#67: FILE: include/asm-s390/futex.h:24:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile("   l   %1,0(%6)\n"				\
+		     "0: " insn						\
+		     "   cs  %1,%2,0(%6)\n"				\
+		     "1: jl  0b\n"					\
+		     "   lhi %0,0\n"					\
+		     "2:\n"						\
+		     __futex_atomic_fixup				\
+		     : "=d" (ret), "=&d" (oldval), "=&d" (newval),	\
+		       "=m" (*(unsigned long __user *) uaddr)		\
+		     : "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		       "m" (*(unsigned long __user *) uaddr) : "cc" );

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#67: FILE: include/asm-s390/futex.h:24:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile("   l   %1,0(%6)\n"				\
+		     "0: " insn						\
+		     "   cs  %1,%2,0(%6)\n"				\
+		     "1: jl  0b\n"					\
+		     "   lhi %0,0\n"					\
+		     "2:\n"						\
+		     __futex_atomic_fixup				\
+		     : "=d" (ret), "=&d" (oldval), "=&d" (newval),	\
+		       "=m" (*(unsigned long __user *) uaddr)		\
+		     : "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		       "m" (*(unsigned long __user *) uaddr) : "cc" );

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#76: FILE: include/asm-s390/futex.h:33:
+		       "=m" (*(unsigned long __user *) uaddr)		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#78: FILE: include/asm-s390/futex.h:35:
+		       "m" (*(unsigned long __user *) uaddr) : "cc" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#78: FILE: include/asm-s390/futex.h:35:
+		       "m" (*(unsigned long __user *) uaddr) : "cc" );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#80: FILE: include/asm-s390/futex.h:37:
+static inline int futex_atomic_op_inuser (int encoded_op, int __user *uaddr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: include/asm-s390/futex.h:44:
+	int oldval = 0, newval, ret;
+	if (encoded_op & (FUTEX_OP_OPARG_SHIFT << 28))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#90: FILE: include/asm-s390/futex.h:47:
+	if (! access_ok (VERIFY_WRITE, uaddr, sizeof(int)))

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#90: FILE: include/asm-s390/futex.h:47:
+	if (! access_ok (VERIFY_WRITE, uaddr, sizeof(int)))
 	    ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#117: FILE: include/asm-s390/futex.h:74:
+		ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#124: FILE: include/asm-s390/futex.h:81:
+		case FUTEX_OP_CMP_EQ: ret = (oldval == cmparg); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#125: FILE: include/asm-s390/futex.h:82:
+		case FUTEX_OP_CMP_NE: ret = (oldval != cmparg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#126: FILE: include/asm-s390/futex.h:83:
+		case FUTEX_OP_CMP_LT: ret = (oldval < cmparg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#127: FILE: include/asm-s390/futex.h:84:
+		case FUTEX_OP_CMP_GE: ret = (oldval >= cmparg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#128: FILE: include/asm-s390/futex.h:85:
+		case FUTEX_OP_CMP_LE: ret = (oldval <= cmparg); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#129: FILE: include/asm-s390/futex.h:86:
+		case FUTEX_OP_CMP_GT: ret = (oldval > cmparg); break;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#130: FILE: include/asm-s390/futex.h:87:
+		default: ret = -ENOSYS;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#130: FILE: include/asm-s390/futex.h:87:
+		default: ret = -ENOSYS;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083054.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 8 warnings, 3 checks, 98 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083054.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
