WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
diff -ur -X /home/roman/nodiff linux-2.5.59.org/Makefile linux-2.5.59/Makefile

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#80: FILE: arch/um/kernel/sys_call_table.c:130:
+extern syscall_handler_t sys_create_module;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#88: FILE: arch/um/kernel/sys_call_table.c:166:
+extern syscall_handler_t sys_query_module;

ERROR:SPACING: space prohibited after that open square bracket '['
#97: FILE: arch/um/kernel/sys_call_table.c:389:
+	[ __NR_create_module ] = sys_create_module,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close square bracket ']'
#97: FILE: arch/um/kernel/sys_call_table.c:389:
+	[ __NR_create_module ] = sys_create_module,

ERROR:SPACING: space prohibited after that open square bracket '['
#106: FILE: arch/um/kernel/sys_call_table.c:429:
+	[ __NR_query_module ] = sys_query_module,

ERROR:SPACING: space prohibited before that close square bracket ']'
#106: FILE: arch/um/kernel/sys_call_table.c:429:
+	[ __NR_query_module ] = sys_query_module,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#118: FILE: fs/proc/proc_misc.c:300:
+extern struct seq_operations ksyms_op;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#118: FILE: fs/proc/proc_misc.c:300:
+extern struct seq_operations ksyms_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#123: FILE: fs/proc/proc_misc.c:305:
+}
+static struct file_operations proc_ksyms_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#123: FILE: fs/proc/proc_misc.c:305:
+static struct file_operations proc_ksyms_operations = {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/module.h:43:
+extern int __init_module(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#224: FILE: include/linux/module.h:95:
+		__attribute__((section(".modinfo")))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#225: FILE: include/linux/module.h:96:
+		__attribute__((section(".modinfo")))		\
+		= "license=" license;				\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#262: FILE: include/linux/module.h:144:
+#define __EXPORT_SYMBOL(sym, str)			\
+	static const char __kstrtab_##sym[]		\
+	__attribute__((section(".kstrtab"))) = str;	\
+	const struct kernel_symbol __ksymtab_##sym	\
+	__attribute__((section("__ksymtab"))) =		\
+	{ (unsigned long)&sym, __kstrtab_##sym }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".kstrtab") over __attribute__((section(".kstrtab")))
#264: FILE: include/linux/module.h:146:
+	__attribute__((section(".kstrtab"))) = str;	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab") over __attribute__((section("__ksymtab")))
#266: FILE: include/linux/module.h:148:
+	__attribute__((section("__ksymtab"))) =		\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#268: FILE: include/linux/module.h:150:
+#define EXPORT_SYMBOL(var) __EXPORT_SYMBOL(var, __stringify(var))

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#272: FILE: include/linux/module.h:153:
+#define __EXPORT_SYMBOL_GPL(sym, str)				\
 	static const char __kstrtab_##sym[]			\
+	__attribute__((section(".kstrtab"))) = "GPLONLY_" str;	\
+	const struct kernel_symbol __ksymtab_##sym		\
+	__attribute__((section("__gpl_ksymtab"))) =		\
+	{ (unsigned long)&sym, __kstrtab_##sym }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".kstrtab") over __attribute__((section(".kstrtab")))
#279: FILE: include/linux/module.h:155:
+	__attribute__((section(".kstrtab"))) = "GPLONLY_" str;	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__gpl_ksymtab") over __attribute__((section("__gpl_ksymtab")))
#281: FILE: include/linux/module.h:157:
+	__attribute__((section("__gpl_ksymtab"))) =		\

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#327: FILE: include/linux/module.h:392:
+	.gpl_symbols = { .owner = &__this_module, .gplonly = 1, .sym = __gpl_syms_start, .end_sym = __syms_end },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#363: FILE: include/linux/module.h:458:
+static const char __module_kernel_version[] __attribute__((section(".modinfo"))) =

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#443: FILE: include/linux/moduleparam.h:14:
+#define MODULE_PARM(var, type)				\
+	const char __module_info_##var[]		\
+	__attribute__((section(".modinfo"))) =		\
+	"parm_" __MODULE_STRING(var) "=" type;		\
+	const struct kernel_param __module_param_##var	\
+	__attribute__((section(".modparm"))) =		\
+	{ __MODULE_STRING(var), type, &var }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#445: FILE: include/linux/moduleparam.h:16:
+	__attribute__((section(".modinfo"))) =		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modparm") over __attribute__((section(".modparm")))
#448: FILE: include/linux/moduleparam.h:19:
+	__attribute__((section(".modparm"))) =		\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#451: FILE: include/linux/moduleparam.h:22:
+#define MODULE_PARM(var, type)				\
+	const struct kernel_param __module_param_##var	\
+	__attribute__((section("__param"))) =		\
+	{ __stringify(KBUILD_MODNAME) "." __stringify(var), type, &var }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__param") over __attribute__((section("__param")))
#453: FILE: include/linux/moduleparam.h:24:
+	__attribute__((section("__param"))) =		\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#527: FILE: include/linux/moduleparam.h:50:
+#define module_param(name, type)		\
+	param_check_##type(name, &name);	\
+	MODULE_PARM(name,__module_const_##type)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#527: FILE: include/linux/moduleparam.h:50:
+#define module_param(name, type)		\
+	param_check_##type(name, &name);	\
+	MODULE_PARM(name,__module_const_##type)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#529: FILE: include/linux/moduleparam.h:52:
+	MODULE_PARM(name,__module_const_##type)
 	                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: include/linux/moduleparam.h:54:
+extern int parse_args(const char *name, char *args,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#532: FILE: include/linux/moduleparam.h:55:
+		      const struct kernel_param *params, unsigned num,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#857: FILE: kernel/module.c:846:
+	symindex = strindex = modindex = vmagindex = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1061: FILE: kernel/module.c:1323:
+struct module_ref_old
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1068: FILE: kernel/module.c:1330:
+struct module_old
+{

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#1075: FILE: kernel/module.c:1337:
+	union
+	{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1082: FILE: kernel/module.c:1344:
+	unsigned nsyms;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1083: FILE: kernel/module.c:1345:
+	unsigned ndeps;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1096: FILE: kernel/module.c:1358:
+	/* Members past this point are extensions to the basic
+	   module support and are optional.  Use mod_member_present()

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1097: FILE: kernel/module.c:1359:
+	   to examine them.  */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1110: FILE: kernel/module.c:1372:
+struct module_info
+{

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1123: FILE: kernel/module.c:1385:
+	nmod = space = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1147: FILE: kernel/module.c:1409:
+	ndeps = space = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1176: FILE: kernel/module.c:1438:
+	nrefs = space = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1214: FILE: kernel/module.c:1476:
+	if (space > bufsize) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1217: FILE: kernel/module.c:1479:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1229: FILE: kernel/module.c:1491:
+		if (copy_to_user(strings, sym->name, len)
+		    || put_user(sym->value, vals)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1230: FILE: kernel/module.c:1492:
+		    || put_user(sym->value, vals)
+		    || put_user(space, vals + 1))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1247: FILE: kernel/module.c:1509:
+	if (sizeof(struct module_info) <= bufsize) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1249: FILE: kernel/module.c:1511:
+		struct module_info info;
+		info.addr = (unsigned long)mod;

CHECK:BRACES: Unbalanced braces around else statement
#1265: FILE: kernel/module.c:1527:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1395: FILE: kernel/module.c:1657:
+		if (mod->symbols.sym == oldmod->syms) {
[...]
+		} else if (mod->symbols.sym == mod->gpl_symbols.end_sym) {
[...]
+		} else
[...]

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1398: FILE: kernel/module.c:1660:
+			mod->symbols.sym = mod->symbols.end_sym = mod->gpl_symbols.sym = oldmod->syms;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1398: FILE: kernel/module.c:1660:
+			mod->symbols.sym = mod->symbols.end_sym = mod->gpl_symbols.sym = oldmod->syms;

CHECK:BRACES: Unbalanced braces around else statement
#1400: FILE: kernel/module.c:1662:
+		} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1401: FILE: kernel/module.c:1663:
+			printk("warning unable to join symbols\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1408: FILE: kernel/module.c:1670:
+		printk("truncate init: %p -> %p (%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1409: FILE: kernel/module.c:1671:
+		printk("truncate init: %p -> %p (%ld)\n",
+			mod->init_end, mod->init_start,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1460: FILE: kernel/module.c:1722:
+			seq_printf(m, "%0*lx %s\t[%s]\n", (int)(2*sizeof(void*)),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1460: FILE: kernel/module.c:1722:
+			seq_printf(m, "%0*lx %s\t[%s]\n", (int)(2*sizeof(void*)),
 			                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1461: FILE: kernel/module.c:1723:
+			seq_printf(m, "%0*lx %s\t[%s]\n", (int)(2*sizeof(void*)),
+				sym->value, sym->name, sg->owner->name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1463: FILE: kernel/module.c:1725:
+			seq_printf(m, "%0*lx %s\n", (int)(2*sizeof(void*)),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1463: FILE: kernel/module.c:1725:
+			seq_printf(m, "%0*lx %s\n", (int)(2*sizeof(void*)),
 			                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1464: FILE: kernel/module.c:1726:
+			seq_printf(m, "%0*lx %s\n", (int)(2*sizeof(void*)),
+				sym->value, sym->name);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1469: FILE: kernel/module.c:1731:
+struct seq_operations ksyms_op = {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1497: FILE: kernel/params.c:38:
+	min = max = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1499: FILE: kernel/params.c:40:
+		min = max = simple_strtol(p, &p, 10);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1499: FILE: kernel/params.c:40:
+		min = max = simple_strtol(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1501: FILE: kernel/params.c:42:
+			max = simple_strtol(p + 1, &p, 10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1509: FILE: kernel/params.c:50:
+			printk(KERN_ERR "%s: can only take %i arguments\n", kp->name, max);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1518: FILE: kernel/params.c:59:
+			*loc++ = simple_strtol(val, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1521: FILE: kernel/params.c:62:
+			*((short *)loc)++ = simple_strtol(val, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1524: FILE: kernel/params.c:65:
+			*((int *)loc)++ = simple_strtol(val, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1527: FILE: kernel/params.c:68:
+			*((long *)loc)++ = simple_strtol(val, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1533: FILE: kernel/params.c:74:
+			len = simple_strtol(p, NULL, 10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1539: FILE: kernel/params.c:80:
+			printk(KERN_ERR "Unknown parameter type %c\n", type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1545: FILE: kernel/params.c:86:
+		printk(KERN_ERR "%s: needs at least %i arguments\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000398231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 37 warnings, 29 checks, 1522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000398231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
