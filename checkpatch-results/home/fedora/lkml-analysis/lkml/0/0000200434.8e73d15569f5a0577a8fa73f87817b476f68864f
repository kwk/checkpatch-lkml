WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
includes consecutive munmaps, mprotects with the same permissions, and mmaps

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: arch/um/include/tlb.h:40:
+extern int add_mmap(unsigned long virt, unsigned long phys, unsigned long len,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: arch/um/include/tlb.h:41:
+^I^I    int r, int w, int x, struct host_vm_op *ops, int index, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: arch/um/include/tlb.h:42:
+^I^I    int last_filled, int data, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#79: FILE: arch/um/include/tlb.h:43:
+		    void (*do_ops)(int, struct host_vm_op *, int));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct host_vm_op *' should also have an identifier name
#79: FILE: arch/um/include/tlb.h:43:
+		    void (*do_ops)(int, struct host_vm_op *, int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#79: FILE: arch/um/include/tlb.h:43:
+		    void (*do_ops)(int, struct host_vm_op *, int));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: arch/um/include/tlb.h:44:
+extern int add_munmap(unsigned long addr, unsigned long len, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: arch/um/include/tlb.h:44:
+extern int add_munmap(unsigned long addr, unsigned long len, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: arch/um/include/tlb.h:45:
+^I^I      struct host_vm_op *ops, int index, int last_filled, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: arch/um/include/tlb.h:47:
+extern int add_mprotect(unsigned long addr, unsigned long len, int r, int w, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: arch/um/include/tlb.h:47:
+extern int add_mprotect(unsigned long addr, unsigned long len, int r, int w, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: arch/um/include/tlb.h:48:
+^I^I^Iint x, struct host_vm_op *ops, int index, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#86: FILE: arch/um/include/tlb.h:50:
+			void (*do_ops)(int, struct host_vm_op *, int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct host_vm_op *' should also have an identifier name
#86: FILE: arch/um/include/tlb.h:50:
+			void (*do_ops)(int, struct host_vm_op *, int));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#86: FILE: arch/um/include/tlb.h:50:
+			void (*do_ops)(int, struct host_vm_op *, int));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: arch/um/kernel/skas/include/skas.h:25:
+extern void map(int fd, unsigned long virt, unsigned long len, int r, int w, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: arch/um/kernel/skas/include/skas.h:25:
+extern void map(int fd, unsigned long virt, unsigned long len, int r, int w, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: arch/um/kernel/skas/include/skas.h:27:
+extern int unmap(int fd, void *addr, unsigned long len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: arch/um/kernel/skas/mem_user.c:14:
+void map(int fd, unsigned long virt, unsigned long len, int r, int w, $

ERROR:SPACING: space required before the open brace '{'
#161: FILE: arch/um/kernel/skas/tlb.c:25:
+	for(i = 0; i <= last; i++){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: arch/um/kernel/skas/tlb.c:25:
+	for(i = 0; i <= last; i++){

ERROR:SPACING: space required before the open brace '{'
#163: FILE: arch/um/kernel/skas/tlb.c:27:
+		switch(op->type){

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: arch/um/kernel/skas/tlb.c:27:
+		switch(op->type){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: arch/um/kernel/skas/tlb.c:29:
+^I^I^Imap(fd, op->u.mmap.addr, op->u.mmap.len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: arch/um/kernel/skas/tlb.c:34:
+^I^I^Iunmap(fd, (void *) op->u.munmap.addr, $

CHECK:SPACING: No space is necessary after a cast
#170: FILE: arch/um/kernel/skas/tlb.c:34:
+			unmap(fd, (void *) op->u.munmap.addr, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/um/kernel/skas/tlb.c:38:
+^I^I^Iprotect(fd, op->u.mprotect.addr, op->u.mprotect.len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: arch/um/kernel/skas/tlb.c:39:
+^I^I^I^Iop->u.mprotect.r, op->u.mprotect.w, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/um/kernel/skas/tlb.c:43:
+			printk("Unknown op type %d in do_ops\n", op->type);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ops', this function's name, in a string
#179: FILE: arch/um/kernel/skas/tlb.c:43:
+			printk("Unknown op type %d in do_ops\n", op->type);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(ops)
#194: FILE: arch/um/kernel/skas/tlb.c:59:
+	int op_index = -1, last_op = sizeof(ops) / sizeof(ops[0]) - 1;

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: arch/um/kernel/skas/tlb.c:70:
+^I^I^I^Iop_index = add_munmap(addr, end - addr, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: arch/um/kernel/skas/tlb.c:85:
+^I^I^I^Iop_index = add_munmap(addr, end - addr, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: arch/um/kernel/skas/tlb.c:100:
+^I^I^I^Iop_index = add_munmap(addr, end - addr, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: arch/um/kernel/skas/tlb.c:121:
+^I^I^I^Iop_index = add_mmap(addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: arch/um/kernel/skas/tlb.c:123:
+^I^I^I^I^I^I    PAGE_SIZE, r, w, x, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: arch/um/kernel/skas/tlb.c:126:
+^I^I^Ielse op_index = add_munmap(addr, PAGE_SIZE, ops, $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#255: FILE: arch/um/kernel/skas/tlb.c:126:
+			else op_index = add_munmap(addr, PAGE_SIZE, ops, 

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: arch/um/kernel/skas/tlb.c:127:
+^I^I^I^I^I^I   op_index, last_op, fd, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: arch/um/kernel/skas/tlb.c:131:
+^I^I^Iop_index = add_mprotect(addr, PAGE_SIZE, r, w, x, ops, $

ERROR:SPACING: space required before the open parenthesis '('
#279: FILE: arch/um/kernel/skas/tlb.c:247:
+	if(atomic_read(&mm->mm_users) == 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: arch/um/kernel/tlb.c:88:
+int add_mmap(unsigned long virt, unsigned long phys, unsigned long len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: arch/um/kernel/tlb.c:89:
+^I     int r, int w, int x, struct host_vm_op *ops, int index, $

ERROR:SPACING: space required before the open brace '{'
#312: FILE: arch/um/kernel/tlb.c:98:
+	if(index != -1){

ERROR:SPACING: space required before the open parenthesis '('
#312: FILE: arch/um/kernel/tlb.c:98:
+	if(index != -1){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: arch/um/kernel/tlb.c:100:
+^I^Iif((last->type == MMAP) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MMAP'
#314: FILE: arch/um/kernel/tlb.c:100:
+		if((last->type == MMAP) && 
+		   (last->u.mmap.addr + last->u.mmap.len == virt) && 
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) && 
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.r == r'
#314: FILE: arch/um/kernel/tlb.c:100:
+		if((last->type == MMAP) && 
+		   (last->u.mmap.addr + last->u.mmap.len == virt) && 
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) && 
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.w == w'
#314: FILE: arch/um/kernel/tlb.c:100:
+		if((last->type == MMAP) && 
+		   (last->u.mmap.addr + last->u.mmap.len == virt) && 
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) && 
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.x == x'
#314: FILE: arch/um/kernel/tlb.c:100:
+		if((last->type == MMAP) && 
+		   (last->u.mmap.addr + last->u.mmap.len == virt) && 
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) && 
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mmap.fd == fd'
#314: FILE: arch/um/kernel/tlb.c:100:
+		if((last->type == MMAP) && 
+		   (last->u.mmap.addr + last->u.mmap.len == virt) && 
+		   (last->u.mmap.r == r) && (last->u.mmap.w == w) &&
+		   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) && 
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: arch/um/kernel/tlb.c:100:
+		if((last->type == MMAP) && 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: arch/um/kernel/tlb.c:101:
+^I^I   (last->u.mmap.addr + last->u.mmap.len == virt) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: arch/um/kernel/tlb.c:103:
+^I^I   (last->u.mmap.x == x) && (last->u.mmap.fd == fd) && $

ERROR:SPACING: space required before the open brace '{'
#318: FILE: arch/um/kernel/tlb.c:104:
+		   (last->u.mmap.offset + last->u.mmap.len == offset)){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#320: FILE: arch/um/kernel/tlb.c:106:
+			return(index);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open brace '{'
#324: FILE: arch/um/kernel/tlb.c:110:
+	if(index == last_filled){

ERROR:SPACING: space required before the open parenthesis '('
#324: FILE: arch/um/kernel/tlb.c:110:
+	if(index == last_filled){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#339: FILE: arch/um/kernel/tlb.c:125:
+	return(index);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: arch/um/kernel/tlb.c:128:
+int add_munmap(unsigned long addr, unsigned long len, struct host_vm_op *ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: arch/um/kernel/tlb.c:129:
+^I       int index, int last_filled, int data, $

ERROR:SPACING: space required before the open brace '{'
#348: FILE: arch/um/kernel/tlb.c:134:
+	if(index != -1){

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: arch/um/kernel/tlb.c:134:
+	if(index != -1){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: arch/um/kernel/tlb.c:136:
+^I^Iif((last->type == MUNMAP) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MUNMAP'
#350: FILE: arch/um/kernel/tlb.c:136:
+		if((last->type == MUNMAP) && 
+		   (last->u.munmap.addr + last->u.mmap.len == addr)){

ERROR:SPACING: space required before the open parenthesis '('
#350: FILE: arch/um/kernel/tlb.c:136:
+		if((last->type == MUNMAP) && 

ERROR:SPACING: space required before the open brace '{'
#351: FILE: arch/um/kernel/tlb.c:137:
+		   (last->u.munmap.addr + last->u.mmap.len == addr)){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#353: FILE: arch/um/kernel/tlb.c:139:
+			return(index);

ERROR:SPACING: space required before the open brace '{'
#357: FILE: arch/um/kernel/tlb.c:143:
+	if(index == last_filled){

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: arch/um/kernel/tlb.c:143:
+	if(index == last_filled){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#366: FILE: arch/um/kernel/tlb.c:152:
+	return(index);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: arch/um/kernel/tlb.c:155:
+int add_mprotect(unsigned long addr, unsigned long len, int r, int w, int x, $

ERROR:SPACING: space required before the open brace '{'
#375: FILE: arch/um/kernel/tlb.c:161:
+	if(index != -1){

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: arch/um/kernel/tlb.c:161:
+	if(index != -1){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->type == MPROTECT'
#377: FILE: arch/um/kernel/tlb.c:163:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) && 
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mprotect.r == r'
#377: FILE: arch/um/kernel/tlb.c:163:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) && 
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mprotect.w == w'
#377: FILE: arch/um/kernel/tlb.c:163:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) && 
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->u.mprotect.x == x'
#377: FILE: arch/um/kernel/tlb.c:163:
+		if((last->type == MPROTECT) &&
+		   (last->u.mprotect.addr + last->u.mprotect.len == addr) && 
+		   (last->u.mprotect.r == r) && (last->u.mprotect.w == w) &&
+		   (last->u.mprotect.x == x)){

ERROR:SPACING: space required before the open parenthesis '('
#377: FILE: arch/um/kernel/tlb.c:163:
+		if((last->type == MPROTECT) &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: arch/um/kernel/tlb.c:164:
+^I^I   (last->u.mprotect.addr + last->u.mprotect.len == addr) && $

ERROR:SPACING: space required before the open brace '{'
#380: FILE: arch/um/kernel/tlb.c:166:
+		   (last->u.mprotect.x == x)){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#382: FILE: arch/um/kernel/tlb.c:168:
+			return(index);

ERROR:SPACING: space required before the open brace '{'
#386: FILE: arch/um/kernel/tlb.c:172:
+	if(index == last_filled){

ERROR:SPACING: space required before the open parenthesis '('
#386: FILE: arch/um/kernel/tlb.c:172:
+	if(index == last_filled){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#398: FILE: arch/um/kernel/tlb.c:184:
+	return(index);

ERROR:SPACING: space required before the open brace '{'
#419: FILE: arch/um/kernel/tt/tlb.c:25:
+	for(i = 0; i <= last; i++){

ERROR:SPACING: space required before the open parenthesis '('
#419: FILE: arch/um/kernel/tt/tlb.c:25:
+	for(i = 0; i <= last; i++){

ERROR:SPACING: space required before the open brace '{'
#421: FILE: arch/um/kernel/tt/tlb.c:27:
+		switch(op->type){

ERROR:SPACING: space required before the open parenthesis '('
#421: FILE: arch/um/kernel/tt/tlb.c:27:
+		switch(op->type){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: arch/um/kernel/tt/tlb.c:29:
+                        os_map_memory((void *) op->u.mmap.addr, op->u.mmap.fd, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: arch/um/kernel/tt/tlb.c:29:
+                        os_map_memory((void *) op->u.mmap.addr, op->u.mmap.fd, $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#423: FILE: arch/um/kernel/tt/tlb.c:29:
+                        os_map_memory((void *) op->u.mmap.addr, op->u.mmap.fd, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: arch/um/kernel/tt/tlb.c:29:
+                        os_map_memory((void *) op->u.mmap.addr, op->u.mmap.fd, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: arch/um/kernel/tt/tlb.c:30:
+^I^I^I^I      op->u.mmap.offset, op->u.mmap.len, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: arch/um/kernel/tt/tlb.c:31:
+^I^I^I^I      op->u.mmap.r, op->u.mmap.w, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: arch/um/kernel/tt/tlb.c:35:
+^I^I^Ios_unmap_memory((void *) op->u.munmap.addr, $

CHECK:SPACING: No space is necessary after a cast
#429: FILE: arch/um/kernel/tt/tlb.c:35:
+			os_unmap_memory((void *) op->u.munmap.addr, 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#438: FILE: arch/um/kernel/tt/tlb.c:44:
+			printk("Unknown op type %d in do_ops\n", op->type);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ops', this function's name, in a string
#438: FILE: arch/um/kernel/tt/tlb.c:44:
+			printk("Unknown op type %d in do_ops\n", op->type);

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(ops)
#453: FILE: arch/um/kernel/tt/tlb.c:60:
+	int op_index = -1, last_op = sizeof(ops) / sizeof(ops[0]) - 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: arch/um/kernel/tt/tlb.c:86:
+^I^I^I^Iop_index = add_munmap(addr, end - addr, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: arch/um/kernel/tt/tlb.c:101:
+^I^I^I^Iop_index = add_munmap(addr, end - addr, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: arch/um/kernel/tt/tlb.c:116:
+^I^I^I^Iop_index = add_munmap(addr, end - addr, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: arch/um/kernel/tt/tlb.c:137:
+^I^I^I^Iop_index = add_mmap(addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: arch/um/kernel/tt/tlb.c:139:
+^I^I^I^I^I^I    PAGE_SIZE, r, w, x, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: arch/um/kernel/tt/tlb.c:142:
+^I^I^Ielse op_index = add_munmap(addr, PAGE_SIZE, ops, $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#517: FILE: arch/um/kernel/tt/tlb.c:142:
+			else op_index = add_munmap(addr, PAGE_SIZE, ops, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: arch/um/kernel/tt/tlb.c:143:
+^I^I^I^I^I^I   op_index, last_op, 0, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: arch/um/kernel/tt/tlb.c:147:
+^I^I^Iop_index = add_mprotect(addr, PAGE_SIZE, r, w, x, ops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: arch/um/kernel/tt/tlb.c:148:
+^I^I^I^I^I^Iop_index, last_op, 0, $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 79 errors, 14 warnings, 18 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200434.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
