WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
which will allow the generation of core dumps for SUID processes.  (Defaults

WARNING:TYPO_SPELLING: 'posible' may be misspelled - perhaps 'possible'?
#37: 
a posible DOS.
  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#47: 
file perhaps- the the kernel source seems to indicate this would be a bad 

WARNING:TYPO_SPELLING: 'prefered' may be misspelled - perhaps 'preferred'?
#58: 
(PS: is an attachment prefered or simply put the patch in the message?)
                      ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: Documentation/sysctl/kernel.txt:45:
+- coredump_file_name          $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: Documentation/sysctl/kernel.txt:239:
+coredumps.  This mimics the previous behavior.  Coredumps $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/exec.c:24:
+ * Configurable coredump_file_name, coredump_log and coredump_enabled $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#197: FILE: fs/exec.c:58:
+int coredump_log = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#198: FILE: fs/exec.c:59:
+int coredump_suid_enabled = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#208: FILE: fs/exec.c:937:
+	char corename[256]="";
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#209: FILE: fs/exec.c:938:
+	char tmpbuf[256]="\n";
 	                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: fs/exec.c:941:
+        int i,j,k;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: fs/exec.c:941:
+        int i,j,k;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: fs/exec.c:941:
+        int i,j,k;
              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: fs/exec.c:941:
+        int i,j,k;
                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: fs/exec.c:944:
+^I   coredump_file_name. 22 comes from the max number of digits $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#215: FILE: fs/exec.c:944:
+	/* Calculate the min buffer free to handle an expanded token from
+	   coredump_file_name. 22 comes from the max number of digits 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#218: FILE: fs/exec.c:947:
+	k=sizeof(current->comm);
 	 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: fs/exec.c:948:
+^Iif (k<22) $

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#219: FILE: fs/exec.c:948:
+	if (k<22) 
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#220: FILE: fs/exec.c:949:
+		k=22;
 		 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#221: FILE: fs/exec.c:950:
+	k=sizeof(corename) - k;
 	 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: fs/exec.c:955:
+		current->comm,current->pid,current->uid,current->gid);
 		             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: fs/exec.c:955:
+		current->comm,current->pid,current->uid,current->gid);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: fs/exec.c:955:
+		current->comm,current->pid,current->uid,current->gid);
 		                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: fs/exec.c:956:
+^Iif ( (current->uid != current->euid) || $

ERROR:SPACING: space prohibited after that open parenthesis '('
#227: FILE: fs/exec.c:956:
+	if ( (current->uid != current->euid) || 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != current->euid'
#227: FILE: fs/exec.c:956:
+	if ( (current->uid != current->euid) || 
+		(current->gid != current->egid) ) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->gid != current->egid'
#227: FILE: fs/exec.c:956:
+	if ( (current->uid != current->euid) || 
+		(current->gid != current->egid) ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: fs/exec.c:957:
+	if ( (current->uid != current->euid) || 
+		(current->gid != current->egid) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#228: FILE: fs/exec.c:957:
+		(current->gid != current->egid) ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: fs/exec.c:959:
+			current->euid,current->egid);
 			             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: fs/exec.c:968:
+             || atomic_read(&current->mm->mm_users) != 1)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#240: FILE: fs/exec.c:968:
+	if ((!current->dumpable && !coredump_suid_enabled)
+             || atomic_read(&current->mm->mm_users) != 1)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: fs/exec.c:968:
+             || atomic_read(&current->mm->mm_users) != 1)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#252: FILE: fs/exec.c:974:
+	j=0;
 	 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: fs/exec.c:975:
+^Ifor (i=0; (coredump_file_name[i] != '\0') && $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#253: FILE: fs/exec.c:975:
+	for (i=0; (coredump_file_name[i] != '\0') && 
 	      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: fs/exec.c:976:
+	for (i=0; (coredump_file_name[i] != '\0') && 
+			(j<k); i++) {

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#254: FILE: fs/exec.c:976:
+			(j<k); i++) {
 			  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: fs/exec.c:977:
+        ^Iif ( coredump_file_name[i] != '%' ) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: fs/exec.c:977:
+        ^Iif ( coredump_file_name[i] != '%' ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: fs/exec.c:977:
+        ^Iif ( coredump_file_name[i] != '%' ) {$

ERROR:SPACING: space prohibited after that open parenthesis '('
#255: FILE: fs/exec.c:977:
+        	if ( coredump_file_name[i] != '%' ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#255: FILE: fs/exec.c:977:
+        	if ( coredump_file_name[i] != '%' ) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#256: FILE: fs/exec.c:978:
+			corename[j]=coredump_file_name[i];
 			           ^

ERROR:SPACING: space required before the open parenthesis '('
#259: FILE: fs/exec.c:981:
+			switch(coredump_file_name[++i]) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#261: FILE: fs/exec.c:983:
+				j += sprintf(&corename[j],"%s", current->comm);
 				                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#264: FILE: fs/exec.c:986:
+				j += sprintf(&corename[j],"%u", current->gid);
 				                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: fs/exec.c:988:
+^I^I^Icase 'G': $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: fs/exec.c:989:
+				j += sprintf(&corename[j],"%u", current->egid);
 				                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#270: FILE: fs/exec.c:992:
+				j += sprintf(&corename[j],"%u", current->pid);
 				                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: fs/exec.c:995:
+				j += sprintf(&corename[j],"%u", current->uid);
 				                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: fs/exec.c:997:
+^I^I^Icase 'U': $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: fs/exec.c:998:
+				j += sprintf(&corename[j],"%u", current->euid);
 				                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: fs/exec.c:1000:
+^I^I^Icase '%': $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#279: FILE: fs/exec.c:1001:
+				corename[j++]=coredump_file_name[i];;
 				             ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#279: FILE: fs/exec.c:1001:
+				corename[j++]=coredump_file_name[i];;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: fs/exec.c:1003:
+^I^I^Idefault: $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#282: FILE: fs/exec.c:1004:
+				corename[j++]=coredump_file_name[--i];
 				             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: fs/exec.c:1007:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: fs/exec.c:1008:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: fs/exec.c:1008:
+        }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#286: FILE: fs/exec.c:1008:
+	
+        }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: fs/exec.c:1010:
+^Iif (j==0) { $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#288: FILE: fs/exec.c:1010:
+	if (j==0) { 
 	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: fs/exec.c:1011:
+		memcpy(corename,"core",4);
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: fs/exec.c:1011:
+		memcpy(corename,"core",4);
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#290: FILE: fs/exec.c:1012:
+		j=4;
 		 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: fs/exec.c:1035:
+^Iif (coredump_log) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: fs/exec.c:1036:
+		printk("Coredump to file %s for %s", corename, tmpbuf);

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#309: FILE: fs/exec.c:1043:
+	if (coredump_log && (corename[0]!='\0'))
 	                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: fs/exec.c:1044:
+^I^Iprintk("Coredump failed to dump to file %s\n",corename); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: fs/exec.c:1044:
+		printk("Coredump failed to dump to file %s\n",corename); 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#310: FILE: fs/exec.c:1044:
+		printk("Coredump failed to dump to file %s\n",corename); 
 		                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: fs/exec.c:1045:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: fs/exec.c:1047:
+^Iif (coredump_log) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: fs/exec.c:1048:
+		printk("Coredump not dumped for %s\n", tmpbuf);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#326: FILE: include/linux/sysctl.h:121:
+	KERN_S390_USER_DEBUG_LOGGING=51,  /* int: dumps of user faults */
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#327: FILE: include/linux/sysctl.h:122:
+	KERN_COREDUMP_ENABLED=52, /* are coredumps enabled on this system */
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#328: FILE: include/linux/sysctl.h:123:
+	KERN_COREDUMP_FILE_NAME=53, /*file name format of coredump files */
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#329: FILE: include/linux/sysctl.h:124:
+	KERN_COREDUMP_LOG=54,    /*should coredumps get logged */
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#330: FILE: include/linux/sysctl.h:125:
+	KERN_COREDUMP_SUID_ENABLED=55 /* are suid coredumps enabled */
 	                          ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#350: FILE: kernel/sysctl.c:52:
+extern int coredump_enabled;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#351: FILE: kernel/sysctl.c:53:
+extern int coredump_log;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#352: FILE: kernel/sysctl.c:54:
+extern char coredump_file_name[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#353: FILE: kernel/sysctl.c:55:
+extern int coredump_suid_enabled;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: kernel/sysctl.c:258:
+	{KERN_COREDUMP_ENABLED,"coredump_enabled",&coredump_enabled,
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#361: FILE: kernel/sysctl.c:258:
+	{KERN_COREDUMP_ENABLED,"coredump_enabled",&coredump_enabled,
 	                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#361: FILE: kernel/sysctl.c:258:
+	{KERN_COREDUMP_ENABLED,"coredump_enabled",&coredump_enabled,
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: kernel/sysctl.c:260:
+	{KERN_COREDUMP_FILE_NAME,"coredump_file_name",&coredump_file_name,256,
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#363: FILE: kernel/sysctl.c:260:
+	{KERN_COREDUMP_FILE_NAME,"coredump_file_name",&coredump_file_name,256,
 	                                             ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#363: FILE: kernel/sysctl.c:260:
+	{KERN_COREDUMP_FILE_NAME,"coredump_file_name",&coredump_file_name,256,
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: kernel/sysctl.c:260:
+	{KERN_COREDUMP_FILE_NAME,"coredump_file_name",&coredump_file_name,256,
 	                                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#364: FILE: kernel/sysctl.c:261:
+	0644,NULL,&proc_dostring, &sysctl_string},
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#364: FILE: kernel/sysctl.c:261:
+	0644,NULL,&proc_dostring, &sysctl_string},
 	         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#364: FILE: kernel/sysctl.c:261:
+	0644,NULL,&proc_dostring, &sysctl_string},
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#365: FILE: kernel/sysctl.c:262:
+	{KERN_COREDUMP_LOG,"coredump_log",&coredump_log,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#365: FILE: kernel/sysctl.c:262:
+	{KERN_COREDUMP_LOG,"coredump_log",&coredump_log,
 	                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#365: FILE: kernel/sysctl.c:262:
+	{KERN_COREDUMP_LOG,"coredump_log",&coredump_log,
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#367: FILE: kernel/sysctl.c:264:
+	{KERN_COREDUMP_SUID_ENABLED,"coredump_suid_enabled",
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#368: FILE: kernel/sysctl.c:265:
+	&coredump_suid_enabled,sizeof(int), 0644, NULL, &proc_dointvec},
 	                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 78 errors, 18 warnings, 6 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
