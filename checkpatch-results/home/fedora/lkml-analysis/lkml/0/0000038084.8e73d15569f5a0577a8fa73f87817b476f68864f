WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: kernel/container_configfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#68: FILE: kernel/container_configfs.c:23:
+#define DEFAULT_PAGE_LIMIT ((900*1024*1024) >> PAGE_SHIFT)
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#68: FILE: kernel/container_configfs.c:23:
+#define DEFAULT_PAGE_LIMIT ((900*1024*1024) >> PAGE_SHIFT)
                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: kernel/container_configfs.c:33:
+ * and containers.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#85: FILE: kernel/container_configfs.c:40:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "id", .ca_mode = S_IRUGO },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#90: FILE: kernel/container_configfs.c:45:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "num_tasks", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#95: FILE: kernel/container_configfs.c:50:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "num_files", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#100: FILE: kernel/container_configfs.c:55:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "num_anon_pages", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#105: FILE: kernel/container_configfs.c:60:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "num_mapped_pages", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#110: FILE: kernel/container_configfs.c:65:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "num_file_pages", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#115: FILE: kernel/container_configfs.c:70:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "num_active_pages", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#120: FILE: kernel/container_configfs.c:75:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "page_limit", .ca_mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#125: FILE: kernel/container_configfs.c:80:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "task_limit", .ca_mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#130: FILE: kernel/container_configfs.c:85:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "page_limit_hits", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#135: FILE: kernel/container_configfs.c:90:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "task_limit_hits", .ca_mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#140: FILE: kernel/container_configfs.c:95:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "freeing", .ca_mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#145: FILE: kernel/container_configfs.c:100:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "addtask", .ca_mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#150: FILE: kernel/container_configfs.c:105:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "rmtask", .ca_mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#155: FILE: kernel/container_configfs.c:110:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "addfile", .ca_mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#160: FILE: kernel/container_configfs.c:115:
+	.attr = { .ca_owner = THIS_MODULE, .ca_name = "rmfile", .ca_mode = S_IRUGO | S_IWUSR },

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: kernel/container_configfs.c:149:
+ * simple_containerfs_attr_show operation is executed when ever there is a $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: kernel/container_configfs.c:153:
+static ssize_t simple_containerfs_attr_show(struct config_item *item,
+		struct configfs_attribute *attr,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: kernel/container_configfs.c:199:
+^Idefault: $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#250: FILE: kernel/container_configfs.c:205:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: kernel/container_configfs.c:208:
+static ssize_t simple_containerfs_attr_store(struct config_item *item,
+				       struct configfs_attribute *attr,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: kernel/container_configfs.c:219:
+^I * integer for the attributes that are less than or equal to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: kernel/container_configfs.c:220:
+^I * CONFIGFS_CTN_ATTR_RM_TASK defined in include/linux/container.h $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#269: FILE: kernel/container_configfs.c:224:
+		tmp = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#293: FILE: kernel/container_configfs.c:248:
+			if (t) {
[...]
+			else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: kernel/container_configfs.c:257:
+^I^I^Ielse $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#302: FILE: kernel/container_configfs.c:257:
+			}
+			else 

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: kernel/container_configfs.c:261:
+^Idefault: $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#307: FILE: kernel/container_configfs.c:262:
+		printk("Invalid set attr option %d\n", ctfs_attr->idx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: kernel/container_configfs.c:269:
+ * This is where the release operation of container will come when a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: kernel/container_configfs.c:270:
+ * container is getting removed from container directory.  We will just release $

WARNING:MEMORY_BARRIER: memory barrier without comment
#323: FILE: kernel/container_configfs.c:278:
+	smp_mb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: kernel/container_configfs.c:306:
+ * will get here. name is the pointer to the container name (given as part of $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sc)...) over kzalloc(sizeof(struct simple_containerfs)...)
#359: FILE: kernel/container_configfs.c:314:
+	sc = kzalloc(sizeof(struct simple_containerfs) + strlen(name) + 1,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: kernel/container_configfs.c:315:
+	sc = kzalloc(sizeof(struct simple_containerfs) + strlen(name) + 1,
+			GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#365: FILE: kernel/container_configfs.c:320:
+	sc->ctn.name = (char *) sc + sizeof(struct simple_containerfs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: kernel/container_configfs.c:341:
+^I.ca_owner = THIS_MODULE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: kernel/container_configfs.c:342:
+^I.ca_name = "description", $

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#388: FILE: kernel/container_configfs.c:343:
+	.ca_mode = S_IRUGO ,
 	                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#388: FILE: kernel/container_configfs.c:343:
+	.ca_mode = S_IRUGO ,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: kernel/container_configfs.c:351:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: kernel/container_configfs.c:357:
+static ssize_t containerfs_attr_show(struct config_item *item,
+		struct configfs_attribute *attr,

WARNING:SPLIT_STRING: quoted string split across lines
#406: FILE: kernel/container_configfs.c:361:
+	return sprintf(page, "Containers provide grouping of resources in a "
+			"platform.  It also provides limits and accounting of"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#407: FILE: kernel/container_configfs.c:362:
+			"platform.  It also provides limits and accounting of"
+			"resources\nas they are used by processes belonging to"

WARNING:MISSING_SPACE: break quoted strings at a space character
#407: FILE: kernel/container_configfs.c:362:
+			"platform.  It also provides limits and accounting of"
+			"resources\nas they are used by processes belonging to"

WARNING:SPLIT_STRING: quoted string split across lines
#408: FILE: kernel/container_configfs.c:363:
+			"resources\nas they are used by processes belonging to"
+			"those containers\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#408: FILE: kernel/container_configfs.c:363:
+			"resources\nas they are used by processes belonging to"
+			"those containers\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: kernel/container_configfs.c:376:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: kernel/container_configfs.c:411:
+^Iif (ret) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: kernel/container_configfs.c:411:
+	if (ret) 
[...]
+	else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#457: FILE: kernel/container_configfs.c:412:
+		printk(KERN_ERR "Error %d while registering container subsystem\n", ret);

CHECK:BRACES: Unbalanced braces around else statement
#458: FILE: kernel/container_configfs.c:413:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!container_wq"
#460: FILE: kernel/container_configfs.c:415:
+		if (container_wq == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#462: FILE: kernel/container_configfs.c:417:
+			printk(KERN_ERR "Unable to create Container controllers");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000038084.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 28 warnings, 15 checks, 426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000038084.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
