WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
Thanks a lot to Andries! The patch looks much more elegant now than before. And

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#65: FILE: fs/minix/bitmap.c:29:
+		for (j=0; j<bh->b_size; j++)
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#65: FILE: fs/minix/bitmap.c:29:
+		for (j=0; j<bh->b_size; j++)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#73: FILE: fs/minix/bitmap.c:36:
+	i = ((numbits - (numblocks-1) * bh->b_size * 8) / 16) * 2;
 	                          ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#82: FILE: fs/minix/bitmap.c:51:
+void minix_free_block(struct inode *inode, unsigned long block)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#101: FILE: fs/minix/bitmap.c:64:
+	bit = zone & ((1<<k) - 1);
 	                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#112: FILE: fs/minix/bitmap.c:73:
+		printk("minix_free_block (%s:%lu): bit already cleared\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'minix_free_block', this function's name, in a string
#112: FILE: fs/minix/bitmap.c:73:
+		printk("minix_free_block (%s:%lu): bit already cleared\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: fs/minix/bitmap.c:74:
+		printk("minix_free_block (%s:%lu): bit already cleared\n",
  		       sb->s_id, block);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#136: FILE: fs/minix/bitmap.c:96:
+			j += i * bits_per_zone + sbi->s_firstdatazone-1;
 			                                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#183: FILE: fs/minix/bitmap.c:203:
+	bit = ino & ((1<<k) - 1);
 	               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#198: FILE: fs/minix/bitmap.c:215:
+		printk("minix_free_inode: bit %lu already cleared\n", bit);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#237: FILE: fs/minix/bitmap.c:253:
+		printk("minix_new_inode: bit already set\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'minix_new_inode', this function's name, in a string
#237: FILE: fs/minix/bitmap.c:253:
+		printk("minix_new_inode: bit already set\n");

WARNING:NEW_TYPEDEFS: do not add new typedefs
#264: FILE: fs/minix/dir.c:16:
+typedef struct minix3_dir_entry minix3_dirent;

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: fs/minix/dir.c:116:
+				minix3_dirent *de3 = (minix3_dirent *)p;
+				name = de3->name;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: fs/minix/dir.c:118:
+^I ^I^I} else {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: fs/minix/dir.c:118:
+^I ^I^I} else {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: fs/minix/dir.c:120:
+				minix_dirent *de = (minix_dirent *)p;
+				name = de->name;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#298: FILE: fs/minix/dir.c:126:
+				unsigned l = strnlen(name, sbi->s_namelen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: fs/minix/dir.c:129:
+				over = filldir(dirent, name, l,
+					(n << PAGE_CACHE_SHIFT) | offset,

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: fs/minix/dir.c:190:
+				minix3_dirent *de3 = (minix3_dirent *)p;
+				namx = de3->name;

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: fs/minix/dir.c:192:
+ ^I^I^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: fs/minix/dir.c:192:
+ ^I^I^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: fs/minix/dir.c:192:
+ ^I^I^I} else {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: fs/minix/dir.c:194:
+				minix_dirent *de = (minix_dirent *)p;
+				namx = de->name;

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: fs/minix/dir.c:251:
+^I^I ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#402: FILE: fs/minix/dir.c:251:
+^I^I ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: fs/minix/dir.c:252:
+  ^I^I^I^Inamx = de->name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#403: FILE: fs/minix/dir.c:252:
+  ^I^I^I^Inamx = de->name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: fs/minix/dir.c:252:
+  ^I^I^I^Inamx = de->name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: fs/minix/dir.c:259:
+^I^I ^I^Ielse$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#411: FILE: fs/minix/dir.c:259:
+^I^I ^I^Ielse$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#431: FILE: fs/minix/dir.c:276:
+	from = p - (char*)page_address(page);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#439: FILE: fs/minix/dir.c:281:
+	memcpy (namx, name, namelen);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#441: FILE: fs/minix/dir.c:283:
+		memset (namx + namelen, 0, sbi->s_dirsize - namelen - 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: fs/minix/dir.c:286:
+		memset (namx + namelen, 0, sbi->s_dirsize - namelen - 2);

WARNING:LINE_SPACING: Missing a blank line after declarations
#514: FILE: fs/minix/dir.c:391:
+				minix3_dirent *de3 = (minix3_dirent *)p;
+				name = de3->name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#518: FILE: fs/minix/dir.c:395:
+				minix_dirent *de = (minix_dirent *)p;
+				name = de->name;

CHECK:BRACES: braces {} should be used on all arms of this statement
#531: FILE: fs/minix/dir.c:403:
+				if (!name[1]) {
[...]
-				} else if (de->name[1] != '.')
[...]
  					goto not_empty;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#601: FILE: fs/minix/inode.c:203:
+	} else if ( *(__u16 *)(bh->b_data + 24) == MINIX3_SUPER_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#602: FILE: fs/minix/inode.c:204:
+		m3s = (struct minix3_super_block *) bh->b_data;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#636: FILE: fs/minix/inode.c:306:
+		printk("VFS: Can't find a Minix filesystem V1 | V2 | V3 "

WARNING:SPLIT_STRING: quoted string split across lines
#637: FILE: fs/minix/inode.c:307:
+		printk("VFS: Can't find a Minix filesystem V1 | V2 | V3 "
+		       "on device %s.\n", s->s_id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#667: FILE: fs/minix/itree_common.c:26:
+	return (block_t *)((char*)bh->b_data + bh->b_size);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#693: FILE: fs/minix/itree_common.c:305:
+	iblock = (inode->i_size + sb->s_blocksize -1) >> sb->s_blocksize_bits;
 	                                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#702: FILE: fs/minix/itree_common.c:350:
+static inline unsigned nblocks(loff_t size, struct super_block *sb)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#713: FILE: fs/minix/itree_common.c:358:
+		blocks += sb->s_blocksize/sizeof(block_t) - 1;
 		                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#714: FILE: fs/minix/itree_common.c:359:
+		blocks /= sb->s_blocksize/sizeof(block_t);
 		                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#726: FILE: fs/minix/itree_v1.c:58:
+unsigned V1_minix_blocks(loff_t size, struct super_block *sb)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#726: FILE: fs/minix/itree_v1.c:58:
+unsigned V1_minix_blocks(loff_t size, struct super_block *sb)
  {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#743: FILE: fs/minix/itree_v2.c:30:
+	} else if (block >= (minix_sb(inode->i_sb)->s_max_size/sb->s_blocksize)) {
 	                                                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#752: FILE: fs/minix/itree_v2.c:64:
+unsigned V2_minix_blocks(loff_t size, struct super_block *sb)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#752: FILE: fs/minix/itree_v2.c:64:
+unsigned V2_minix_blocks(loff_t size, struct super_block *sb)
  {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#778: FILE: fs/minix/minix.h:54:
+extern void minix_free_block(struct inode *inode, unsigned long block);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#793: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#793: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#793: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct super_block *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#793: FILE: fs/minix/minix.h:65:
+extern unsigned V1_minix_blocks(loff_t, struct super_block *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#794: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#794: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#794: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#794: FILE: fs/minix/minix.h:66:
+extern unsigned V2_minix_blocks(loff_t, struct super_block *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000002977.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 35 warnings, 15 checks, 734 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000002977.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
