CHECK:LINE_SPACING: Please don't use multiple blank lines
#73: FILE: drivers/s390/scsi/zfcp_aux.c:344:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: drivers/s390/scsi/zfcp_aux.c:1977:
 
+

WARNING:TYPO_SPELLING: 'adpater' may be misspelled - perhaps 'adapter'?
#179: FILE: drivers/s390/scsi/zfcp_aux.c:2022:
+ * @adpater: adapter where ELS was received
     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: drivers/s390/scsi/zfcp_aux.c:2046:
+	zfcp_cb_link_down_t cb;
+	atomic_inc(&zfcp_callbacks.refcount);

WARNING:LINE_SPACING: Missing a blank line after declarations
#219: FILE: drivers/s390/scsi/zfcp_aux.c:2062:
+	zfcp_cb_link_up_t cb;
+	atomic_inc(&zfcp_callbacks.refcount);

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: drivers/s390/scsi/zfcp_aux.c:2078:
+	zfcp_cb_adapter_add_t cb;
+	atomic_inc(&zfcp_callbacks.refcount);

WARNING:LINE_SPACING: Missing a blank line after declarations
#251: FILE: drivers/s390/scsi/zfcp_aux.c:2094:
+	zfcp_cb_port_add_t cb;
+	atomic_inc(&zfcp_callbacks.refcount);

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: drivers/s390/scsi/zfcp_aux.c:2110:
+	zfcp_cb_unit_add_t cb;
+	atomic_inc(&zfcp_callbacks.refcount);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#277: FILE: drivers/s390/scsi/zfcp_aux.c:2120:
+EXPORT_SYMBOL(zfcp_sg_list_alloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#278: FILE: drivers/s390/scsi/zfcp_aux.c:2121:
+EXPORT_SYMBOL(zfcp_sg_list_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#279: FILE: drivers/s390/scsi/zfcp_aux.c:2122:
+EXPORT_SYMBOL(zfcp_sg_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#280: FILE: drivers/s390/scsi/zfcp_aux.c:2123:
+EXPORT_SYMBOL(zfcp_sg_list_copy_from_user);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#281: FILE: drivers/s390/scsi/zfcp_aux.c:2124:
+EXPORT_SYMBOL(zfcp_sg_list_copy_to_user);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#282: FILE: drivers/s390/scsi/zfcp_aux.c:2125:
+EXPORT_SYMBOL(zfcp_get_unit_by_lun);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#283: FILE: drivers/s390/scsi/zfcp_aux.c:2126:
+EXPORT_SYMBOL(zfcp_get_port_by_wwpn);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#284: FILE: drivers/s390/scsi/zfcp_aux.c:2127:
+EXPORT_SYMBOL(zfcp_get_port_by_did);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#285: FILE: drivers/s390/scsi/zfcp_aux.c:2128:
+EXPORT_SYMBOL(zfcp_get_adapter_by_busid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#286: FILE: drivers/s390/scsi/zfcp_aux.c:2129:
+EXPORT_SYMBOL(zfcp_register_callbacks);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#287: FILE: drivers/s390/scsi/zfcp_aux.c:2130:
+EXPORT_SYMBOL(zfcp_unregister_callbacks);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#288: FILE: drivers/s390/scsi/zfcp_aux.c:2131:
+EXPORT_SYMBOL(zfcp_port_enqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#289: FILE: drivers/s390/scsi/zfcp_aux.c:2132:
+EXPORT_SYMBOL(zfcp_unit_enqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#290: FILE: drivers/s390/scsi/zfcp_aux.c:2133:
+EXPORT_SYMBOL(zfcp_unit_dequeue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#291: FILE: drivers/s390/scsi/zfcp_aux.c:2134:
+EXPORT_SYMBOL(zfcp_check_ct_response);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#335: FILE: drivers/s390/scsi/zfcp_def.h:1121:
 
+

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#369: FILE: drivers/s390/scsi/zfcp_erp.c:35:
+#define ZFCP_ERP_REVISION "$Revision: 1.79 $"

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#442: FILE: drivers/s390/scsi/zfcp_erp.c:3350:
 					  &unit->status))
+		    && (!unit->device)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: drivers/s390/scsi/zfcp_erp.c:3488:
+	zfcp_erp_modify_port_status(port,
+		ZFCP_STATUS_COMMON_ERP_FAILED | ZFCP_STATUS_COMMON_ACCESS_DENIED,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: drivers/s390/scsi/zfcp_erp.c:3506:
+	zfcp_erp_modify_unit_status(unit,
+		ZFCP_STATUS_COMMON_ERP_FAILED | ZFCP_STATUS_COMMON_ACCESS_DENIED,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#534: FILE: drivers/s390/scsi/zfcp_erp.c:3553:
+	ZFCP_LOG_NORMAL("Trying to reopen port 0x%016Lx on adapter %s "

WARNING:SPLIT_STRING: quoted string split across lines
#535: FILE: drivers/s390/scsi/zfcp_erp.c:3554:
+	ZFCP_LOG_NORMAL("Trying to reopen port 0x%016Lx on adapter %s "
+			"due to update to access control table\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#538: FILE: drivers/s390/scsi/zfcp_erp.c:3557:
+		ZFCP_LOG_NORMAL("Reopen of port 0x%016Lx on adapter %s failed\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#558: FILE: drivers/s390/scsi/zfcp_erp.c:3577:
+	ZFCP_LOG_NORMAL("Trying to reopen unit 0x%016Lx "

WARNING:SPLIT_STRING: quoted string split across lines
#559: FILE: drivers/s390/scsi/zfcp_erp.c:3578:
+	ZFCP_LOG_NORMAL("Trying to reopen unit 0x%016Lx "
+			"on port 0x%016Lx on adapter %s "

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#559: FILE: drivers/s390/scsi/zfcp_erp.c:3578:
+			"on port 0x%016Lx on adapter %s "

WARNING:SPLIT_STRING: quoted string split across lines
#560: FILE: drivers/s390/scsi/zfcp_erp.c:3579:
+			"on port 0x%016Lx on adapter %s "
+			"due to update to access control table\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#564: FILE: drivers/s390/scsi/zfcp_erp.c:3583:
+		ZFCP_LOG_NORMAL("Reopen of unit 0x%016Lx "

WARNING:SPLIT_STRING: quoted string split across lines
#565: FILE: drivers/s390/scsi/zfcp_erp.c:3584:
+		ZFCP_LOG_NORMAL("Reopen of unit 0x%016Lx "
+				"on port 0x%016Lx on adapter %s failed\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#565: FILE: drivers/s390/scsi/zfcp_erp.c:3584:
+				"on port 0x%016Lx on adapter %s failed\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#572: FILE: drivers/s390/scsi/zfcp_erp.c:3591:
+EXPORT_SYMBOL(zfcp_erp_wait);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#573: FILE: drivers/s390/scsi/zfcp_erp.c:3592:
+EXPORT_SYMBOL(zfcp_erp_port_reopen);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#574: FILE: drivers/s390/scsi/zfcp_erp.c:3593:
+EXPORT_SYMBOL(zfcp_erp_unit_reopen);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#575: FILE: drivers/s390/scsi/zfcp_erp.c:3594:
+EXPORT_SYMBOL(zfcp_erp_unit_shutdown);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#576: FILE: drivers/s390/scsi/zfcp_erp.c:3595:
+EXPORT_SYMBOL(zfcp_fsf_request_timeout_handler);

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#585: FILE: drivers/s390/scsi/zfcp_ext.h:35:
+#define ZFCP_EXT_REVISION "$Revision: 1.60 $"

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#593: FILE: drivers/s390/scsi/zfcp_ext.h:174:
+extern void zfcp_erp_port_access_denied(struct zfcp_port *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_port *' should also have an identifier name
#593: FILE: drivers/s390/scsi/zfcp_ext.h:174:
+extern void zfcp_erp_port_access_denied(struct zfcp_port *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#594: FILE: drivers/s390/scsi/zfcp_ext.h:175:
+extern void zfcp_erp_unit_access_denied(struct zfcp_unit *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_unit *' should also have an identifier name
#594: FILE: drivers/s390/scsi/zfcp_ext.h:175:
+extern void zfcp_erp_unit_access_denied(struct zfcp_unit *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#595: FILE: drivers/s390/scsi/zfcp_ext.h:176:
+extern void zfcp_erp_adapter_access_changed(struct zfcp_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_adapter *' should also have an identifier name
#595: FILE: drivers/s390/scsi/zfcp_ext.h:176:
+extern void zfcp_erp_adapter_access_changed(struct zfcp_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#596: FILE: drivers/s390/scsi/zfcp_ext.h:177:
+extern void zfcp_erp_port_access_changed(struct zfcp_port *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_port *' should also have an identifier name
#596: FILE: drivers/s390/scsi/zfcp_ext.h:177:
+extern void zfcp_erp_port_access_changed(struct zfcp_port *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#597: FILE: drivers/s390/scsi/zfcp_ext.h:178:
+extern void zfcp_erp_unit_access_changed(struct zfcp_unit *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_unit *' should also have an identifier name
#597: FILE: drivers/s390/scsi/zfcp_ext.h:178:
+extern void zfcp_erp_unit_access_changed(struct zfcp_unit *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: drivers/s390/scsi/zfcp_ext.h:186:
+extern int zfcp_sg_list_alloc(struct zfcp_sg_list *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_sg_list *' should also have an identifier name
#605: FILE: drivers/s390/scsi/zfcp_ext.h:186:
+extern int zfcp_sg_list_alloc(struct zfcp_sg_list *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#605: FILE: drivers/s390/scsi/zfcp_ext.h:186:
+extern int zfcp_sg_list_alloc(struct zfcp_sg_list *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#606: FILE: drivers/s390/scsi/zfcp_ext.h:187:
+extern void zfcp_sg_list_free(struct zfcp_sg_list *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_sg_list *' should also have an identifier name
#606: FILE: drivers/s390/scsi/zfcp_ext.h:187:
+extern void zfcp_sg_list_free(struct zfcp_sg_list *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#607: FILE: drivers/s390/scsi/zfcp_ext.h:188:
+extern int zfcp_sg_list_copy_from_user(struct zfcp_sg_list *, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_sg_list *' should also have an identifier name
#607: FILE: drivers/s390/scsi/zfcp_ext.h:188:
+extern int zfcp_sg_list_copy_from_user(struct zfcp_sg_list *, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#607: FILE: drivers/s390/scsi/zfcp_ext.h:188:
+extern int zfcp_sg_list_copy_from_user(struct zfcp_sg_list *, void __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#607: FILE: drivers/s390/scsi/zfcp_ext.h:188:
+extern int zfcp_sg_list_copy_from_user(struct zfcp_sg_list *, void __user *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#609: FILE: drivers/s390/scsi/zfcp_ext.h:190:
+extern int zfcp_sg_list_copy_to_user(void __user *, struct zfcp_sg_list *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#609: FILE: drivers/s390/scsi/zfcp_ext.h:190:
+extern int zfcp_sg_list_copy_to_user(void __user *, struct zfcp_sg_list *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_sg_list *' should also have an identifier name
#609: FILE: drivers/s390/scsi/zfcp_ext.h:190:
+extern int zfcp_sg_list_copy_to_user(void __user *, struct zfcp_sg_list *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#609: FILE: drivers/s390/scsi/zfcp_ext.h:190:
+extern int zfcp_sg_list_copy_to_user(void __user *, struct zfcp_sg_list *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: drivers/s390/scsi/zfcp_ext.h:192:
+extern size_t zfcp_sg_size(struct scatterlist *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#611: FILE: drivers/s390/scsi/zfcp_ext.h:192:
+extern size_t zfcp_sg_size(struct scatterlist *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#611: FILE: drivers/s390/scsi/zfcp_ext.h:192:
+extern size_t zfcp_sg_size(struct scatterlist *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_callbacks *' should also have an identifier name
#613: FILE: drivers/s390/scsi/zfcp_ext.h:194:
+void zfcp_register_callbacks(struct zfcp_callbacks *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: drivers/s390/scsi/zfcp_ext.h:197:
+extern void zfcp_cb_incoming_els(struct zfcp_adapter *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_adapter *' should also have an identifier name
#616: FILE: drivers/s390/scsi/zfcp_ext.h:197:
+extern void zfcp_cb_incoming_els(struct zfcp_adapter *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#616: FILE: drivers/s390/scsi/zfcp_ext.h:197:
+extern void zfcp_cb_incoming_els(struct zfcp_adapter *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#617: FILE: drivers/s390/scsi/zfcp_ext.h:198:
+extern void zfcp_cb_link_down(struct zfcp_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_adapter *' should also have an identifier name
#617: FILE: drivers/s390/scsi/zfcp_ext.h:198:
+extern void zfcp_cb_link_down(struct zfcp_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#618: FILE: drivers/s390/scsi/zfcp_ext.h:199:
+extern void zfcp_cb_link_up(struct zfcp_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_adapter *' should also have an identifier name
#618: FILE: drivers/s390/scsi/zfcp_ext.h:199:
+extern void zfcp_cb_link_up(struct zfcp_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#619: FILE: drivers/s390/scsi/zfcp_ext.h:200:
+extern void zfcp_cb_adapter_add(struct zfcp_adapter *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_adapter *' should also have an identifier name
#619: FILE: drivers/s390/scsi/zfcp_ext.h:200:
+extern void zfcp_cb_adapter_add(struct zfcp_adapter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#620: FILE: drivers/s390/scsi/zfcp_ext.h:201:
+extern void zfcp_cb_port_add(struct zfcp_port *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_port *' should also have an identifier name
#620: FILE: drivers/s390/scsi/zfcp_ext.h:201:
+extern void zfcp_cb_port_add(struct zfcp_port *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#621: FILE: drivers/s390/scsi/zfcp_ext.h:202:
+extern void zfcp_cb_unit_add(struct zfcp_unit *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zfcp_unit *' should also have an identifier name
#621: FILE: drivers/s390/scsi/zfcp_ext.h:202:
+extern void zfcp_cb_unit_add(struct zfcp_unit *);

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#632: FILE: drivers/s390/scsi/zfcp_fsf.c:34:
+#define ZFCP_FSF_C_REVISION "$Revision: 1.83 $"

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "port"
#678: FILE: drivers/s390/scsi/zfcp_fsf.c:2011:
+		if (port != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#719: FILE: drivers/s390/scsi/zfcp_fsf.c:2901:
 		ZFCP_LOG_NORMAL("Access denied, cannot close "
+				"physical port 0x%016Lx on adapter %s\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#719: FILE: drivers/s390/scsi/zfcp_fsf.c:2901:
+				"physical port 0x%016Lx on adapter %s\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#773: FILE: drivers/s390/scsi/zfcp_fsf.c:3123:
+		ZFCP_LOG_NORMAL("Unit 0x%016Lx on port 0x%016Lx on adapter %s "

WARNING:SPLIT_STRING: quoted string split across lines
#774: FILE: drivers/s390/scsi/zfcp_fsf.c:3124:
+		ZFCP_LOG_NORMAL("Unit 0x%016Lx on port 0x%016Lx on adapter %s "
+				"accessed read-only\n", unit->fcp_lun,

WARNING:SPLIT_STRING: quoted string split across lines
#780: FILE: drivers/s390/scsi/zfcp_fsf.c:3130:
+		ZFCP_LOG_NORMAL("Exclusive access of read-only unit not "
+				"supported\n");

WARNING:SPLIT_STRING: quoted string split across lines
#787: FILE: drivers/s390/scsi/zfcp_fsf.c:3137:
+		ZFCP_LOG_NORMAL("Shared access of read-write unit is not "
+				"supported\n");

WARNING:SPLIT_STRING: quoted string split across lines
#798: FILE: drivers/s390/scsi/zfcp_fsf.c:3148:
+		ZFCP_LOG_NORMAL("LUN sharing without access control is not "
+				"supported.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#804: FILE: drivers/s390/scsi/zfcp_fsf.c:3154:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#827: FILE: drivers/s390/scsi/zfcp_fsf.c:3335:
+^I^I                atomic_set_mask(ZFCP_STATUS_UNIT_SHARED,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#834: FILE: drivers/s390/scsi/zfcp_fsf.c:3339:
+                ^I^Iatomic_set_mask(ZFCP_STATUS_UNIT_READONLY,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#834: FILE: drivers/s390/scsi/zfcp_fsf.c:3339:
+                ^I^Iatomic_set_mask(ZFCP_STATUS_UNIT_READONLY,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: drivers/s390/scsi/zfcp_fsf.c:3339:
+                ^I^Iatomic_set_mask(ZFCP_STATUS_UNIT_READONLY,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#871: FILE: drivers/s390/scsi/zfcp_fsf.c:5142:
+EXPORT_SYMBOL(zfcp_fsf_exchange_port_data);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#873: FILE: drivers/s390/scsi/zfcp_fsf.c:5144:
+EXPORT_SYMBOL(zfcp_fsf_send_els);

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#898: FILE: drivers/s390/scsi/zfcp_scsi.c:35:
+#define ZFCP_SCSI_REVISION "$Revision: 1.72 $"

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#907: FILE: drivers/s390/scsi/zfcp_scsi.c:952:
+EXPORT_SYMBOL(zfcp_data);

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#913: FILE: drivers/s390/scsi/zfcp_sysfs_port.c:28:
  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#917: FILE: drivers/s390/scsi/zfcp_sysfs_port.c:31:
+#define ZFCP_SYSFS_PORT_C_REVISION "$Revision: 1.47 $"

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#934: FILE: drivers/s390/scsi/zfcp_sysfs_unit.c:28:
  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#938: FILE: drivers/s390/scsi/zfcp_sysfs_unit.c:31:
+#define ZFCP_SYSFS_UNIT_C_REVISION "$Revision: 1.30 $"

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 78 warnings, 24 checks, 836 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
