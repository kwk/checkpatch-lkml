ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#145: FILE: arch/alpha/kernel/check_asm.c:6:
+#define OUT(x) \
+  asm ("\nxyzzy " x)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: arch/alpha/kernel/check_asm.c:7:
+  asm ("\nxyzzy " x)$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#147: FILE: arch/alpha/kernel/check_asm.c:8:
+#define DEF(name, val) \
+  asm volatile ("\nxyzzy #define " name " %0" : : "i"(val))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: arch/alpha/kernel/check_asm.c:9:
+  asm volatile ("\nxyzzy #define " name " %0" : : "i"(val))$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#396: FILE: arch/alpha/kernel/process.c:82:
+		while (! need_resched())
 		       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#444: FILE: arch/alpha/kernel/ptrace.c:403:
+	if ((current->ptrace & (PT_PTRACED|PT_SYSCALLTRACE))
 	                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#445: FILE: arch/alpha/kernel/ptrace.c:404:
+	    != (PT_PTRACED|PT_SYSCALLTRACE))
 	                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: arch/alpha/kernel/setup.c:440:
+        return mk_kdev(TTY_MAJOR, 64 + c->index);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: arch/alpha/kernel/setup.c:440:
+        return mk_kdev(TTY_MAJOR, 64 + c->index);$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#497: FILE: arch/alpha/kernel/smp.c:73:
+static int smp_secondary_alive __initdata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#541: FILE: arch/alpha/kernel/smp.c:177:
+	/* Wait boot CPU to stop with irq enabled before running
+	   calibrate_delay.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#541: FILE: arch/alpha/kernel/smp.c:177:
+	   calibrate_delay.  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#607: FILE: arch/alpha/kernel/smp.c:243:
+        printk("per-CPU timeslice cutoff: %ld.%02ld usecs.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/alpha/kernel/smp.c:243:
+        printk("per-CPU timeslice cutoff: %ld.%02ld usecs.\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#607: FILE: arch/alpha/kernel/smp.c:243:
+        printk("per-CPU timeslice cutoff: %ld.%02ld usecs.\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#608: FILE: arch/alpha/kernel/smp.c:244:
+	       cacheflush_time/(freq/1000000),
 	                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#608: FILE: arch/alpha/kernel/smp.c:244:
+	       cacheflush_time/(freq/1000000),
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#609: FILE: arch/alpha/kernel/smp.c:245:
+	       (cacheflush_time*100/(freq/1000000)) % 100);
 	                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#609: FILE: arch/alpha/kernel/smp.c:245:
+	       (cacheflush_time*100/(freq/1000000)) % 100);
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#609: FILE: arch/alpha/kernel/smp.c:245:
+	       (cacheflush_time*100/(freq/1000000)) % 100);
 	                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: arch/alpha/kernel/smp.c:246:
+        printk("task migration cache decay timeout: %ld msecs.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: arch/alpha/kernel/smp.c:246:
+        printk("task migration cache decay timeout: %ld msecs.\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#610: FILE: arch/alpha/kernel/smp.c:246:
+        printk("task migration cache decay timeout: %ld msecs.\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#619: FILE: arch/alpha/kernel/smp.c:252:
+wait_for_txrdy (unsigned long cpumask)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#626: FILE: arch/alpha/kernel/smp.c:259:
+	timeout = jiffies + 10*HZ;
 	                      ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#630: FILE: arch/alpha/kernel/smp.c:263:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#711: FILE: arch/alpha/kernel/smp.c:417:
+	timeout = jiffies + 10*HZ;
 	                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#730: FILE: arch/alpha/kernel/smp.c:437:
+	/* Don't care about the regs settings since we'll never
+	   reschedule the forked task.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#730: FILE: arch/alpha/kernel/smp.c:437:
+	   reschedule the forked task.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#744: FILE: arch/alpha/kernel/smp.c:454:
+	   use kernel_thread since we must avoid rescheduling the child.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#787: FILE: arch/alpha/kernel/smp.c:483:
+	/* We've been acked by the console; wait one second for
+	   the task to start up for real.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#787: FILE: arch/alpha/kernel/smp.c:483:
+	   the task to start up for real.  */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#788: FILE: arch/alpha/kernel/smp.c:484:
+	timeout = jiffies + 1*HZ;
 	                     ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#861: FILE: arch/alpha/kernel/smp.c:672:
+		mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#863: FILE: arch/alpha/kernel/smp.c:674:
+		mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#866: FILE: arch/alpha/kernel/smp.c:677:
+		mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#876: FILE: arch/alpha/kernel/smp.c:684:
+		mb();

WARNING:TABSTOP: Statements should start on a tabstop
#908: FILE: arch/alpha/kernel/smp.c:770:
+		    {

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: arch/alpha/kernel/smp.c:772:
+			task_t *t = migration_task;
+			mb();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#910: FILE: arch/alpha/kernel/smp.c:772:
+			mb();

WARNING:TABSTOP: Statements should start on a tabstop
#914: FILE: arch/alpha/kernel/smp.c:776:
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#916: FILE: arch/alpha/kernel/smp.c:778:
+		    {

WARNING:TABSTOP: Statements should start on a tabstop
#927: FILE: arch/alpha/kernel/smp.c:802:
+		    }

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#952: FILE: arch/alpha/kernel/smp.c:839:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smp_migrate_task', this function's name, in a string
#953: FILE: arch/alpha/kernel/smp.c:840:
+		       "smp_migrate_task: Sending IPI to self.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#971: FILE: arch/alpha/mm/fault.c:199:
+		yield();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1034: FILE: drivers/block/ll_rw_blk.c:191:
+		/* Note that some systems have an ISA bridge that frobs
+		   addresses, so there may be no 16MB limit.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1034: FILE: drivers/block/ll_rw_blk.c:191:
+		   addresses, so there may be no 16MB limit.  */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1035: FILE: drivers/block/ll_rw_blk.c:192:
+		BUG_ON(dma_addr < BLK_BOUNCE_ISA && BLK_BOUNCE_ISA < ~0UL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1064: FILE: include/asm-alpha/bitops.h:77:
+__clear_bit(unsigned long nr, volatile void * addr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1064: FILE: include/asm-alpha/bitops.h:77:
+__clear_bit(unsigned long nr, volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#1080: FILE: include/asm-alpha/bitops.h:105:
+static __inline__ void

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1081: FILE: include/asm-alpha/bitops.h:106:
+__change_bit(unsigned long nr, volatile void * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1081: FILE: include/asm-alpha/bitops.h:106:
+__change_bit(unsigned long nr, volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#1083: FILE: include/asm-alpha/bitops.h:108:
+	int *m = ((int *) addr) + (nr >> 5);

WARNING:INLINE: plain inline is preferred over __inline__
#1119: FILE: include/asm-alpha/bitops.h:223:
+static __inline__ int

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1120: FILE: include/asm-alpha/bitops.h:224:
+__test_and_change_bit(unsigned long nr, volatile void * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1120: FILE: include/asm-alpha/bitops.h:224:
+__test_and_change_bit(unsigned long nr, volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#1123: FILE: include/asm-alpha/bitops.h:227:
+	int *m = ((int *) addr) + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1145: FILE: include/asm-alpha/bitops.h:286:
+	unsigned long result;
+	__asm__("cttz %1,%0" : "=r"(result) : "r"(word));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1155: FILE: include/asm-alpha/bitops.h:296:
+	return qofs*8 + bofs;
 	           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1183: FILE: include/asm-alpha/bitops.h:404:
+find_next_bit(void * addr, unsigned long size, unsigned long offset)

CHECK:SPACING: No space is necessary after a cast
#1185: FILE: include/asm-alpha/bitops.h:406:
+	unsigned long * p = ((unsigned long *) addr) + (offset >> 6);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1185: FILE: include/asm-alpha/bitops.h:406:
+	unsigned long * p = ((unsigned long *) addr) + (offset >> 6);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1204: FILE: include/asm-alpha/bitops.h:425:
+		if ((tmp = *(p++)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1237: FILE: include/asm-alpha/io.h:21:
+#include <asm/pgtable.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1285: FILE: include/asm-alpha/mmu_context.h:49:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1309: FILE: include/asm-alpha/unistd.h:579:
+extern asmlinkage long sys_wait4(pid_t pid,unsigned int * stat_addr,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1309: FILE: include/asm-alpha/unistd.h:579:
+extern asmlinkage long sys_wait4(pid_t pid,unsigned int * stat_addr,
                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1310: FILE: include/asm-alpha/unistd.h:580:
+				 int options, struct rusage * ru);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478354.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 38 warnings, 16 checks, 1122 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478354.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
