WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: drivers/serial/jsm/jsm_sysfs.c:1:
+/************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: drivers/serial/jsm/jsm_sysfs.c:10:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: drivers/serial/jsm/jsm_sysfs.c:12:
+ * but WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED; without even the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: drivers/serial/jsm/jsm_sysfs.c:13:
+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: drivers/serial/jsm/jsm_sysfs.c:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: drivers/serial/jsm/jsm_sysfs.c:16:
+ * You should have received a copy of the GNU General Public License $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: drivers/serial/jsm/jsm_sysfs.c:17:
+ * along with this program; if not, write to the Free Software $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#92: FILE: drivers/serial/jsm/jsm_sysfs.c:17:
+ * along with this program; if not, write to the Free Software $

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: drivers/serial/jsm/jsm_sysfs.c:33:
+        struct list_head *tmp;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: drivers/serial/jsm/jsm_sysfs.c:33:
+        struct list_head *tmp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: drivers/serial/jsm/jsm_sysfs.c:34:
+        struct jsm_board *cur_board_entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: drivers/serial/jsm/jsm_sysfs.c:34:
+        struct jsm_board *cur_board_entry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: drivers/serial/jsm/jsm_sysfs.c:35:
+        int adapter_count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: drivers/serial/jsm/jsm_sysfs.c:35:
+        int adapter_count = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: drivers/serial/jsm/jsm_sysfs.c:36:
+        u64 lock_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: drivers/serial/jsm/jsm_sysfs.c:36:
+        u64 lock_flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: drivers/serial/jsm/jsm_sysfs.c:38:
+        spin_lock_irqsave(&jsm_board_head_lock, lock_flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: drivers/serial/jsm/jsm_sysfs.c:38:
+        spin_lock_irqsave(&jsm_board_head_lock, lock_flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: drivers/serial/jsm/jsm_sysfs.c:39:
+        list_for_each(tmp, &jsm_board_head) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: drivers/serial/jsm/jsm_sysfs.c:39:
+        list_for_each(tmp, &jsm_board_head) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: drivers/serial/jsm/jsm_sysfs.c:40:
+        cur_board_entry =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: drivers/serial/jsm/jsm_sysfs.c:40:
+        cur_board_entry =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: drivers/serial/jsm/jsm_sysfs.c:41:
+                list_entry(tmp, struct jsm_board,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: drivers/serial/jsm/jsm_sysfs.c:41:
+                list_entry(tmp, struct jsm_board,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: drivers/serial/jsm/jsm_sysfs.c:42:
+                        jsm_board_entry);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: drivers/serial/jsm/jsm_sysfs.c:42:
+                list_entry(tmp, struct jsm_board,
+                        jsm_board_entry);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: drivers/serial/jsm/jsm_sysfs.c:42:
+                        jsm_board_entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: drivers/serial/jsm/jsm_sysfs.c:43:
+                adapter_count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: drivers/serial/jsm/jsm_sysfs.c:43:
+                adapter_count++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: drivers/serial/jsm/jsm_sysfs.c:44:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: drivers/serial/jsm/jsm_sysfs.c:44:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: drivers/serial/jsm/jsm_sysfs.c:45:
+        spin_unlock_irqrestore(&jsm_board_head_lock, lock_flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: drivers/serial/jsm/jsm_sysfs.c:45:
+        spin_unlock_irqrestore(&jsm_board_head_lock, lock_flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: drivers/serial/jsm/jsm_sysfs.c:47:
+        return adapter_count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: drivers/serial/jsm/jsm_sysfs.c:47:
+        return adapter_count;$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#129: FILE: drivers/serial/jsm/jsm_sysfs.c:54:
+static DRIVER_ATTR(version, S_IRUSR, jsm_driver_version_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: drivers/serial/jsm/jsm_sysfs.c:59:
+	int adapter_count = 0;
+	adapter_count = get_jsm_board_number();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#137: FILE: drivers/serial/jsm/jsm_sysfs.c:62:
+static DRIVER_ATTR(boards, S_IRUSR, jsm_driver_boards_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#143: FILE: drivers/serial/jsm/jsm_sysfs.c:68:
+static DRIVER_ATTR(state, S_IRUSR, jsm_driver_state_show, NULL);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#152: FILE: drivers/serial/jsm/jsm_sysfs.c:77:
+	sscanf(buf, "0x%x\n", &debug);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#155: FILE: drivers/serial/jsm/jsm_sysfs.c:80:
+static DRIVER_ATTR(debug, (S_IRUSR | S_IWUSR), jsm_driver_debug_show, jsm_driver_debug_store);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: drivers/serial/jsm/jsm_sysfs.c:82:
+
+

WARNING:NAKED_SSCANF: unchecked sscanf return value
#165: FILE: drivers/serial/jsm/jsm_sysfs.c:90:
+	sscanf(buf, "0x%x\n", &rawreadok);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#168: FILE: drivers/serial/jsm/jsm_sysfs.c:93:
+static DRIVER_ATTR(rawreadok, (S_IRUSR | S_IWUSR), jsm_driver_rawreadok_show, jsm_driver_rawreadok_store);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#168: FILE: drivers/serial/jsm/jsm_sysfs.c:93:
+static DRIVER_ATTR(rawreadok, (S_IRUSR | S_IWUSR), jsm_driver_rawreadok_show, jsm_driver_rawreadok_store);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: drivers/serial/jsm/jsm_sysfs.c:100:
+^Idriver_create_file(driverfs, &driver_attr_rawreadok); $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#188: FILE: drivers/serial/jsm/jsm_sysfs.c:113:
+#define JSM_VERIFY_BOARD(p, bd)				\
+	if (!p)						\
+		return 0;				\
+	bd = (struct jsm_board *)dev_get_drvdata(p);	\
+	if (!bd)					\
+		return 0;				\
+	if (bd->state != BOARD_READY)			\
+		return 0;				\
+

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#188: FILE: drivers/serial/jsm/jsm_sysfs.c:113:
+#define JSM_VERIFY_BOARD(p, bd)				\
+	if (!p)						\
+		return 0;				\
+	bd = (struct jsm_board *)dev_get_drvdata(p);	\
+	if (!bd)					\
+		return 0;				\
+	if (bd->state != BOARD_READY)			\
+		return 0;				\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#188: FILE: drivers/serial/jsm/jsm_sysfs.c:113:
+#define JSM_VERIFY_BOARD(p, bd)				\
+	if (!p)						\
+		return 0;				\
+	bd = (struct jsm_board *)dev_get_drvdata(p);	\
+	if (!bd)					\
+		return 0;				\
+	if (bd->state != BOARD_READY)			\
+		return 0;				\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bd' - possible side-effects?
#188: FILE: drivers/serial/jsm/jsm_sysfs.c:113:
+#define JSM_VERIFY_BOARD(p, bd)				\
+	if (!p)						\
+		return 0;				\
+	bd = (struct jsm_board *)dev_get_drvdata(p);	\
+	if (!bd)					\
+		return 0;				\
+	if (bd->state != BOARD_READY)			\
+		return 0;				\
+

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#188: FILE: drivers/serial/jsm/jsm_sysfs.c:113:
+#define JSM_VERIFY_BOARD(p, bd)				\
+	if (!p)						\
+		return 0;				\
+	bd = (struct jsm_board *)dev_get_drvdata(p);	\
+	if (!bd)					\
+		return 0;				\
+	if (bd->state != BOARD_READY)			\
+		return 0;				\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#188: FILE: drivers/serial/jsm/jsm_sysfs.c:113:
+#define JSM_VERIFY_BOARD(p, bd)				\
+	if (!p)						\
+		return 0;				\
+	bd = (struct jsm_board *)dev_get_drvdata(p);	\
+	if (!bd)					\
+		return 0;				\
+	if (bd->state != BOARD_READY)			\
+		return 0;				\
+

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#211: FILE: drivers/serial/jsm/jsm_sysfs.c:136:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#212: FILE: drivers/serial/jsm/jsm_sysfs.c:137:
+static DEVICE_ATTR(ports_state, S_IRUSR, jsm_ports_state_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#227: FILE: drivers/serial/jsm/jsm_sysfs.c:152:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#228: FILE: drivers/serial/jsm/jsm_sysfs.c:153:
+static DEVICE_ATTR(ports_baud, S_IRUSR, jsm_ports_baud_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#254: FILE: drivers/serial/jsm/jsm_sysfs.c:179:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#255: FILE: drivers/serial/jsm/jsm_sysfs.c:180:
+static DEVICE_ATTR(ports_msignals, S_IRUSR, jsm_ports_msignals_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#270: FILE: drivers/serial/jsm/jsm_sysfs.c:195:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#271: FILE: drivers/serial/jsm/jsm_sysfs.c:196:
+static DEVICE_ATTR(ports_iflag, S_IRUSR, jsm_ports_iflag_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#286: FILE: drivers/serial/jsm/jsm_sysfs.c:211:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#287: FILE: drivers/serial/jsm/jsm_sysfs.c:212:
+static DEVICE_ATTR(ports_cflag, S_IRUSR, jsm_ports_cflag_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#302: FILE: drivers/serial/jsm/jsm_sysfs.c:227:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#303: FILE: drivers/serial/jsm/jsm_sysfs.c:228:
+static DEVICE_ATTR(ports_oflag, S_IRUSR, jsm_ports_oflag_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#318: FILE: drivers/serial/jsm/jsm_sysfs.c:243:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#319: FILE: drivers/serial/jsm/jsm_sysfs.c:244:
+static DEVICE_ATTR(ports_lflag, S_IRUSR, jsm_ports_lflag_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#334: FILE: drivers/serial/jsm/jsm_sysfs.c:259:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#335: FILE: drivers/serial/jsm/jsm_sysfs.c:260:
+static DEVICE_ATTR(ports_rxcount, S_IRUSR, jsm_ports_rxcount_show, NULL);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR' used
#350: FILE: drivers/serial/jsm/jsm_sysfs.c:275:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#351: FILE: drivers/serial/jsm/jsm_sysfs.c:276:
+static DEVICE_ATTR(ports_txcount, S_IRUSR, jsm_ports_txcount_show, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#384: FILE: drivers/serial/jsm/jsm_sysfs.c:309:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#403: FILE: drivers/serial/jsm/jsm_sysfs.c:328:
+#define JSM_VERIFY_CHANNEL(p, ch)			\
+	if (!p)						\
+		return 0;				\
+	ch = (struct jsm_channel *)class_get_devdata(p);\
+	if (!ch)					\
+		return 0;				\
+	if (ch->ch_bd->state != BOARD_READY)		\
+		return 0;				\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#403: FILE: drivers/serial/jsm/jsm_sysfs.c:328:
+#define JSM_VERIFY_CHANNEL(p, ch)			\
+	if (!p)						\
+		return 0;				\
+	ch = (struct jsm_channel *)class_get_devdata(p);\
+	if (!ch)					\
+		return 0;				\
+	if (ch->ch_bd->state != BOARD_READY)		\
+		return 0;				\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#403: FILE: drivers/serial/jsm/jsm_sysfs.c:328:
+#define JSM_VERIFY_CHANNEL(p, ch)			\
+	if (!p)						\
+		return 0;				\
+	ch = (struct jsm_channel *)class_get_devdata(p);\
+	if (!ch)					\
+		return 0;				\
+	if (ch->ch_bd->state != BOARD_READY)		\
+		return 0;				\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ch' - possible side-effects?
#403: FILE: drivers/serial/jsm/jsm_sysfs.c:328:
+#define JSM_VERIFY_CHANNEL(p, ch)			\
+	if (!p)						\
+		return 0;				\
+	ch = (struct jsm_channel *)class_get_devdata(p);\
+	if (!ch)					\
+		return 0;				\
+	if (ch->ch_bd->state != BOARD_READY)		\
+		return 0;				\
+

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#403: FILE: drivers/serial/jsm/jsm_sysfs.c:328:
+#define JSM_VERIFY_CHANNEL(p, ch)			\
+	if (!p)						\
+		return 0;				\
+	ch = (struct jsm_channel *)class_get_devdata(p);\
+	if (!ch)					\
+		return 0;				\
+	if (ch->ch_bd->state != BOARD_READY)		\
+		return 0;				\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#403: FILE: drivers/serial/jsm/jsm_sysfs.c:328:
+#define JSM_VERIFY_CHANNEL(p, ch)			\
+	if (!p)						\
+		return 0;				\
+	ch = (struct jsm_channel *)class_get_devdata(p);\
+	if (!ch)					\
+		return 0;				\
+	if (ch->ch_bd->state != BOARD_READY)		\
+		return 0;				\
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#419: FILE: drivers/serial/jsm/jsm_sysfs.c:344:
+static CLASS_DEVICE_ATTR(state, S_IRUGO, jsm_tty_state_show, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: drivers/serial/jsm/jsm_sysfs.c:346:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#429: FILE: drivers/serial/jsm/jsm_sysfs.c:354:
+static CLASS_DEVICE_ATTR(baud, S_IRUGO, jsm_tty_baud_show, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#431: FILE: drivers/serial/jsm/jsm_sysfs.c:356:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#448: FILE: drivers/serial/jsm/jsm_sysfs.c:373:
+static CLASS_DEVICE_ATTR(msignals, S_IRUGO, jsm_tty_msignals_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#457: FILE: drivers/serial/jsm/jsm_sysfs.c:382:
+static CLASS_DEVICE_ATTR(iflag, S_IRUGO, jsm_tty_iflag_show, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#459: FILE: drivers/serial/jsm/jsm_sysfs.c:384:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#467: FILE: drivers/serial/jsm/jsm_sysfs.c:392:
+static CLASS_DEVICE_ATTR(cflag, S_IRUGO, jsm_tty_cflag_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#476: FILE: drivers/serial/jsm/jsm_sysfs.c:401:
+static CLASS_DEVICE_ATTR(oflag, S_IRUGO, jsm_tty_oflag_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#485: FILE: drivers/serial/jsm/jsm_sysfs.c:410:
+static CLASS_DEVICE_ATTR(lflag, S_IRUGO, jsm_tty_lflag_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#494: FILE: drivers/serial/jsm/jsm_sysfs.c:419:
+static CLASS_DEVICE_ATTR(rxcount, S_IRUGO, jsm_tty_rxcount_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#503: FILE: drivers/serial/jsm/jsm_sysfs.c:428:
+static CLASS_DEVICE_ATTR(txcount, S_IRUGO, jsm_tty_txcount_show, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: drivers/serial/jsm/jsm_sysfs.c:436:
+	dev = MKDEV(ch->ch_bd->jsm_serial_major,
+			ch->ch_portnum + ch->ch_bd->boardnum * 2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/serial/jsm/jsm_sysfs.c:439:
+	jsm_class_member = class_simple_device_add(jsm_tty_class, dev, device,
+			"ttyn%d", ch->ch_portnum + ch->ch_bd->boardnum*2);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#514: FILE: drivers/serial/jsm/jsm_sysfs.c:439:
+			"ttyn%d", ch->ch_portnum + ch->ch_bd->boardnum*2);
 			                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#533: FILE: drivers/serial/jsm/jsm_sysfs.c:458:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: drivers/serial/jsm/jsm_sysfs.c:459:
+^Iclass_simple_device_remove(MKDEV(ch->ch_bd->jsm_serial_major, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: drivers/serial/jsm/jsm_sysfs.c:460:
+	class_simple_device_remove(MKDEV(ch->ch_bd->jsm_serial_major, 
+					ch->ch_portnum + ch->ch_bd->boardnum * 2));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202262.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 54 warnings, 17 checks, 464 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202262.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
