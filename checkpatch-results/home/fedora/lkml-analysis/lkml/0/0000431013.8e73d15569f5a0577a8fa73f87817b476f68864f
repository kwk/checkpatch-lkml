ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#78: 
--- a/arch/i386/config.in	Fri Sep 20 17:20:22 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#95: FILE: arch/i386/kernel/smpboot.c:768:
+static int __initdata nr_lnodes = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:MISPLACED_INIT: __initdata should be placed after nr_lnodes
#95: FILE: arch/i386/kernel/smpboot.c:768:
+static int __initdata nr_lnodes = 0;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#112: FILE: arch/i386/kernel/smpboot.c:785:
+	if (pnode_to_lnode[cell] < 0) {
+		pnode_to_lnode[cell] = nr_lnodes++;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#125: FILE: arch/i386/kernel/smpboot.c:1009:
+	printk("boot_cpu_apicid = %d, nr_lnodes = %d, lnode = %d\n", boot_cpu_apicid, nr_lnodes, pnode_to_lnode[0]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#125: FILE: arch/i386/kernel/smpboot.c:1009:
+	printk("boot_cpu_apicid = %d, nr_lnodes = %d, lnode = %d\n", boot_cpu_apicid, nr_lnodes, pnode_to_lnode[0]);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#175: FILE: arch/ia64/kernel/smpboot.c:369:
+static int __initdata nr_lnodes=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#175: FILE: arch/ia64/kernel/smpboot.c:369:
+static int __initdata nr_lnodes=0;
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __initdata should be placed after nr_lnodes
#175: FILE: arch/ia64/kernel/smpboot.c:369:
+static int __initdata nr_lnodes=0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#187: FILE: arch/ia64/kernel/smpboot.c:380:
+	if (pnode_to_lnode[cell] < 0) {
+		pnode_to_lnode[cell] = nr_lnodes++;
+	}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#224: FILE: arch/ia64/kernel/smpboot.c:531:
 int __devinit

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#238: FILE: include/asm-i386/atomic.h:120:
+static inline int atomic_inc_return(atomic_t *v){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#238: FILE: include/asm-i386/atomic.h:120:
+static inline int atomic_inc_return(atomic_t *v){

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hwid' may be better as '(hwid)' to avoid precedence issues
#257: FILE: include/asm-i386/smp.h:130:
+#define SAPICID_TO_PNODE(hwid)  (hwid >> 4)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: include/asm-ia64/smp.h:138:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: include/asm-ia64/smp.h:139:
+ * This is the node ID on the NEC AzusA, $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hwid' may be better as '(hwid)' to avoid precedence issues
#285: FILE: include/asm-ia64/smp.h:142:
+#define SAPICID_TO_PNODE(hwid) ((hwid >> 12) & 0xff)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/sched.h:162:
+extern void sched_migrate_task(task_t *p, int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: include/linux/sched.h:461:
+#define POOL_DELAY(this_node,node)      \
                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this_node' may be better as '(this_node)' to avoid precedence issues
#330: FILE: include/linux/sched.h:461:
+#define POOL_DELAY(this_node,node)      \
+                (_pool_delay[this_node * numpools + node])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#330: FILE: include/linux/sched.h:461:
+#define POOL_DELAY(this_node,node)      \
+                (_pool_delay[this_node * numpools + node])

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: include/linux/sched.h:462:
+                (_pool_delay[this_node * numpools + node])$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: include/linux/sched.h:462:
+                (_pool_delay[this_node * numpools + node])$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: include/linux/sched.h:463:
+#define POOL_WEIGHT(this_node,node)     \
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this_node' may be better as '(this_node)' to avoid precedence issues
#332: FILE: include/linux/sched.h:463:
+#define POOL_WEIGHT(this_node,node)     \
+                (_pool_weight[this_node * numpools + node])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#332: FILE: include/linux/sched.h:463:
+#define POOL_WEIGHT(this_node,node)     \
+                (_pool_weight[this_node * numpools + node])

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: include/linux/sched.h:464:
+                (_pool_weight[this_node * numpools + node])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: include/linux/sched.h:464:
+                (_pool_weight[this_node * numpools + node])$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#344: FILE: include/linux/sched.h:475:
+extern int pool_ptr[NR_NODES+1];
                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: include/linux/sched.h:485:
+extern void pooldata_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: include/linux/sched.h:486:
+extern void pooldata_unlock(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/sched.h:488:
+# define POOL_DELAY(x,y)  (0)
                      ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#375: FILE: kernel/ksyms.c:613:
+EXPORT_SYMBOL(numpools);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#376: FILE: kernel/ksyms.c:614:
+EXPORT_SYMBOL(pool_ptr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#377: FILE: kernel/ksyms.c:615:
+EXPORT_SYMBOL(pool_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#378: FILE: kernel/ksyms.c:616:
+EXPORT_SYMBOL(pool_nr_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#379: FILE: kernel/ksyms.c:617:
+EXPORT_SYMBOL(pool_mask);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#380: FILE: kernel/ksyms.c:618:
+EXPORT_SYMBOL(sched_migrate_task);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#424: FILE: kernel/sched.c:201:
+int pool_ptr[NR_NODES+1] = { 0, NR_CPUS, };
                      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#424: FILE: kernel/sched.c:201:
+int pool_ptr[NR_NODES+1] = { 0, NR_CPUS, };

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#426: FILE: kernel/sched.c:203:
+int pool_nr_cpus[NR_NODES] = { NR_CPUS, };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#428: FILE: kernel/sched.c:205:
+int pnode_to_lnode[NR_NODES] = { [0 ... NR_NODES-1] = -1 };
                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#431: FILE: kernel/sched.c:208:
+static int _pool_delay[NR_NODES*NR_NODES] __cacheline_aligned;
                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#432: FILE: kernel/sched.c:209:
+static int _pool_weight[NR_NODES*NR_NODES] __cacheline_aligned;
                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#519: FILE: kernel/sched.c:686:
+	int i, ii, idx=-1, refload, load;
 	              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#519: FILE: kernel/sched.c:686:
+	int i, ii, idx=-1, refload, load;
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#529: FILE: kernel/sched.c:691:
+	for (ii = pool_ptr[pool]; ii < pool_ptr[pool+1]; ii++) {
 	                                            ^

WARNING:TYPO_SPELLING: 'easilly' may be misspelled - perhaps 'easily'?
#568: FILE: kernel/sched.c:725:
+ * This concept can be extended easilly to more than two levels (multi-level
                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#578: FILE: kernel/sched.c:735:
+	int avg_load=-1, this_pool = CPU_TO_NODE(this_cpu);
 	            ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#578: FILE: kernel/sched.c:735:
+	int avg_load=-1, this_pool = CPU_TO_NODE(this_cpu);
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#582: FILE: kernel/sched.c:738:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#582: FILE: kernel/sched.c:738:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#582: FILE: kernel/sched.c:738:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#582: FILE: kernel/sched.c:738:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#582: FILE: kernel/sched.c:738:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#582: FILE: kernel/sched.c:738:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->nr_running > this_rq->prev_nr_running[this_cpu]'
#584: FILE: kernel/sched.c:740:
+	if (idle || (this_rq->nr_running > this_rq->prev_nr_running[this_cpu]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#604: FILE: kernel/sched.c:757:
+		avg_load += this_rq->load[1][pool]*pool_nr_cpus[pool];
 		                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu < 0'
#612: FILE: kernel/sched.c:765:
+	if ((best_cpu < 0) ||
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#613: FILE: kernel/sched.c:766:
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#619: FILE: kernel/sched.c:772:
+	if (BALANCED(avg_load,this_rq->load[1][this_pool]))
 	                     ^

CHECK:BRACES: Unbalanced braces around else statement
#638: FILE: kernel/sched.c:781:
+	} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#640: FILE: kernel/sched.c:783:
+		    (POOL_DELAY(this_pool,this_rq->wait_node) >> del_shift))
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#644: FILE: kernel/sched.c:787:
+	if (!BALANCED(this_rq->load[0][best_cpu],*nr_running)) {
 	                                        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#644: FILE: kernel/sched.c:787:
+	if (!BALANCED(this_rq->load[0][best_cpu],*nr_running)) {
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: kernel/sched.c:799:
+ * while calling this routine. $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#693: FILE: kernel/sched.c:807:
+	int this_pool=CPU_TO_NODE(this_cpu), weight, maxweight=0;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#693: FILE: kernel/sched.c:807:
+	int this_pool=CPU_TO_NODE(this_cpu), weight, maxweight=0;
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: kernel/sched.c:815:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: kernel/sched.c:815:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#704: FILE: kernel/sched.c:815:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#704: FILE: kernel/sched.c:815:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#707: FILE: kernel/sched.c:818:
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))
 		                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#725: FILE: kernel/sched.c:853:
+		weight = (jiffies - tmp->sleep_timestamp)/cache_decay_ticks;
 		                                         ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#745: FILE: kernel/sched.c:873:
+static inline void pull_task(runqueue_t *src_rq, prio_array_t *src_array, task_t *p, runqueue_t *this_rq, int this_cpu)

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#786: FILE: kernel/sched.c:890:
+ * inbalance (current runqueue is too short) then pull from
    ^^^^^^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#799: FILE: kernel/sched.c:903:
+	if (atomic_read(&pool_lock)) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#826: FILE: kernel/sched.c:933:
+#define BUSY_REBALANCE_TICK (HZ/5 ?: 1)
                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#839: FILE: kernel/sched.c:1980:
+	printk("CPU pools : %d\n",numpools);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#839: FILE: kernel/sched.c:1980:
+	printk("CPU pools : %d\n",numpools);
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#840: FILE: kernel/sched.c:1981:
+	for (i=0;i<numpools;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#840: FILE: kernel/sched.c:1981:
+	for (i=0;i<numpools;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#840: FILE: kernel/sched.c:1981:
+	for (i=0;i<numpools;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#840: FILE: kernel/sched.c:1981:
+	for (i=0;i<numpools;i++) {
 	                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#841: FILE: kernel/sched.c:1982:
+		printk("pool %d :",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#841: FILE: kernel/sched.c:1982:
+		printk("pool %d :",i);
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#842: FILE: kernel/sched.c:1983:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#842: FILE: kernel/sched.c:1983:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                  ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#842: FILE: kernel/sched.c:1983:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#842: FILE: kernel/sched.c:1983:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#842: FILE: kernel/sched.c:1983:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#843: FILE: kernel/sched.c:1984:
+			printk("%d ",pool_cpus[j]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#843: FILE: kernel/sched.c:1984:
+			printk("%d ",pool_cpus[j]);
 			            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#844: FILE: kernel/sched.c:1985:
+		printk("\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#852: FILE: kernel/sched.c:1993:
+	while (atomic_read(&pool_lock));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: kernel/sched.c:1998:
+^I/* $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#862: FILE: kernel/sched.c:2003:
+	for (i=0; i<100; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#862: FILE: kernel/sched.c:2003:
+	for (i=0; i<100; i++)
 	           ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#863: FILE: kernel/sched.c:2004:
+		udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: space prohibited after that open square bracket '['
#880: FILE: kernel/sched.c:2021:
+int __node_distance[ 8 * 8]    = { 10, 15, 15, 15, 20, 20, 20, 20,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#888: FILE: kernel/sched.c:2029:
+#define node_distance(i,j)  __node_distance[i*8+j]
                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#888: FILE: kernel/sched.c:2029:
+#define node_distance(i,j)  __node_distance[i*8+j]
                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#888: FILE: kernel/sched.c:2029:
+#define node_distance(i,j)  __node_distance[i*8+j]
                                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#888: FILE: kernel/sched.c:2029:
+#define node_distance(i,j)  __node_distance[i*8+j]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'j' may be better as '(j)' to avoid precedence issues
#888: FILE: kernel/sched.c:2029:
+#define node_distance(i,j)  __node_distance[i*8+j]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#904: FILE: kernel/sched.c:2045:
+		for (i=1; i<numpools; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#904: FILE: kernel/sched.c:2045:
+		for (i=1; i<numpools; i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#906: FILE: kernel/sched.c:2047:
+			if (lev > node_levels[nr_node_levels-1] &&
 			                                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#908: FILE: kernel/sched.c:2049:
+				if (tgtlev < 100000) nlarger++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#911: FILE: kernel/sched.c:2052:
+			if (lev > tgtlev) nlarger++;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#917: FILE: kernel/sched.c:2058:
+	for (i=0; i<nr_node_levels; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#917: FILE: kernel/sched.c:2058:
+	for (i=0; i<nr_node_levels; i++)
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#918: FILE: kernel/sched.c:2059:
+		printk("node level %d : %d\n",i,node_levels[i]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#918: FILE: kernel/sched.c:2059:
+		printk("node level %d : %d\n",i,node_levels[i]);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#918: FILE: kernel/sched.c:2059:
+		printk("node level %d : %d\n",i,node_levels[i]);
 		                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#929: FILE: kernel/sched.c:2070:
+	for (i=0; i<numpools; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#929: FILE: kernel/sched.c:2070:
+	for (i=0; i<numpools; i++)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#930: FILE: kernel/sched.c:2071:
+		for (j=0; j<numpools; j++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#930: FILE: kernel/sched.c:2071:
+		for (j=0; j<numpools; j++)
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#931: FILE: kernel/sched.c:2072:
+			for (lev=0; lev<nr_node_levels; lev++)
 			        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#931: FILE: kernel/sched.c:2072:
+			for (lev=0; lev<nr_node_levels; lev++)
 			               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#932: FILE: kernel/sched.c:2073:
+				if (node_distance(i,j) == node_levels[lev]) {
 				                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#933: FILE: kernel/sched.c:2074:
+					_pool_weight[i*numpools+j] =
 					              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#933: FILE: kernel/sched.c:2074:
+					_pool_weight[i*numpools+j] =
 					                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#934: FILE: kernel/sched.c:2075:
+						(2*(nr_node_levels-lev)-1)
 						  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#934: FILE: kernel/sched.c:2075:
+						(2*(nr_node_levels-lev)-1)
 						                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#934: FILE: kernel/sched.c:2075:
+						(2*(nr_node_levels-lev)-1)
 						                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#935: FILE: kernel/sched.c:2076:
+						*MAX_CACHE_WEIGHT;
 						^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#948: FILE: kernel/sched.c:2089:
+	for(i=0; i<numpools; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#948: FILE: kernel/sched.c:2089:
+	for(i=0; i<numpools; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#948: FILE: kernel/sched.c:2089:
+	for(i=0; i<numpools; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#949: FILE: kernel/sched.c:2090:
+		for(j=0; j<numpools; j++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#949: FILE: kernel/sched.c:2090:
+		for(j=0; j<numpools; j++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#949: FILE: kernel/sched.c:2090:
+		for(j=0; j<numpools; j++)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#950: FILE: kernel/sched.c:2091:
+			_pool_delay[i * numpools + j] = HZ * \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#951: FILE: kernel/sched.c:2092:
+				node_distance(i,j) / 77;
 				               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#953: FILE: kernel/sched.c:2094:
+	printk("pool_delay matrix:\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#954: FILE: kernel/sched.c:2095:
+	for(i=0; i<numpools; i++){
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#954: FILE: kernel/sched.c:2095:
+	for(i=0; i<numpools; i++){
 	          ^

ERROR:SPACING: space required before the open brace '{'
#954: FILE: kernel/sched.c:2095:
+	for(i=0; i<numpools; i++){

ERROR:SPACING: space required before the open parenthesis '('
#954: FILE: kernel/sched.c:2095:
+	for(i=0; i<numpools; i++){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#955: FILE: kernel/sched.c:2096:
+		for(j=0; j<numpools; j++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#955: FILE: kernel/sched.c:2096:
+		for(j=0; j<numpools; j++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#955: FILE: kernel/sched.c:2096:
+		for(j=0; j<numpools; j++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#956: FILE: kernel/sched.c:2097:
+			printk("%4d ",_pool_delay[i*numpools+j]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#956: FILE: kernel/sched.c:2097:
+			printk("%4d ",_pool_delay[i*numpools+j]);
 			             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#956: FILE: kernel/sched.c:2097:
+			printk("%4d ",_pool_delay[i*numpools+j]);
 			                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#956: FILE: kernel/sched.c:2097:
+			printk("%4d ",_pool_delay[i*numpools+j]);
 			                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#957: FILE: kernel/sched.c:2098:
+		printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#968: FILE: kernel/sched.c:2109:
+	int flag[NR_CPUS] = { [ 0 ... NR_CPUS-1] = 0 };
 	                                     ^

ERROR:SPACING: space prohibited after that open square bracket '['
#968: FILE: kernel/sched.c:2109:
+	int flag[NR_CPUS] = { [ 0 ... NR_CPUS-1] = 0 };

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#972: FILE: kernel/sched.c:2113:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#978: FILE: kernel/sched.c:2119:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#979: FILE: kernel/sched.c:2120:
+		if (!cpu_online(i)) continue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#981: FILE: kernel/sched.c:2122:
+			pool_ptr[numpools]=ptr;
 			                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#983: FILE: kernel/sched.c:2124:
+			for (j = 0; j < NR_CPUS; j++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#984: FILE: kernel/sched.c:2125:
+				if (!cpu_online(j)) continue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#986: FILE: kernel/sched.c:2127:
+					pool_cpus[ptr++]=j;
 					                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#987: FILE: kernel/sched.c:2128:
+					flag[j]=1;
 					       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#988: FILE: kernel/sched.c:2129:
+					mask |= (1UL<<j);
 					            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#996: FILE: kernel/sched.c:2137:
+	pool_ptr[numpools]=ptr;
 	                  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1060: FILE: kernel/sched.c:2313:
+		if (sync)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1062: FILE: kernel/sched.c:2315:
+		else {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1087: FILE: kernel/sched.c:2426:
+	pool_ptr[1] = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1091: FILE: kernel/sched.c:2430:
+	pool_nr_cpus[0] = NR_CPUS;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431013.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 83 errors, 34 warnings, 48 checks, 954 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431013.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
