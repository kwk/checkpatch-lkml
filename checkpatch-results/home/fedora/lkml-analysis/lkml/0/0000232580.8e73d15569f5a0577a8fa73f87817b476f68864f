CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: arch/ppc64/kernel/mf.c:1085:
+static int proc_mf_dump_cmdline(char *page, char **start, off_t off,
+		int count, int *eof, void *data)

CHECK:CAMELCASE: Avoid CamelCase: <mf_getCmdLine>
#81: FILE: arch/ppc64/kernel/mf.c:1095:
+	len = mf_getCmdLine(page, &len, (u64)data);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: arch/ppc64/kernel/mf.c:1096:
+   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: arch/ppc64/kernel/mf.c:1096:
+   $

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#97: FILE: arch/ppc64/kernel/mf.c:1111:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: arch/ppc64/kernel/mf.c:1113:
+static int proc_mf_dump_vmlinux(char *page, char **start, off_t off,
+		int count, int *eof, void *data)

CHECK:CAMELCASE: Avoid CamelCase: <sizeToGet>
#101: FILE: arch/ppc64/kernel/mf.c:1115:
+	int sizeToGet = count;

CHECK:CAMELCASE: Avoid CamelCase: <mf_getVmlinuxChunk>
#106: FILE: arch/ppc64/kernel/mf.c:1120:
+	if (mf_getVmlinuxChunk(page, &sizeToGet, off, (u64)data) == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: arch/ppc64/kernel/mf.c:1134:
+static int proc_mf_dump_side(char *page, char **start, off_t off,
+		int count, int *eof, void *data)

CHECK:CAMELCASE: Avoid CamelCase: <mf_getSide>
#123: FILE: arch/ppc64/kernel/mf.c:1137:
+	char mf_current_side = mf_getSide();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/ppc64/kernel/mf.c:1149:
+^Ireturn len;^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: arch/ppc64/kernel/mf.c:1153:
+static int proc_mf_change_side(struct file *file, const char __user *buffer,
+		unsigned long count, void *data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#153: FILE: arch/ppc64/kernel/mf.c:1167:
+		printk(KERN_ERR "mf_proc.c: proc_mf_change_side: invalid side\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_mf_change_side', this function's name, in a string
#153: FILE: arch/ppc64/kernel/mf.c:1167:
+		printk(KERN_ERR "mf_proc.c: proc_mf_change_side: invalid side\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <mf_setSide>
#157: FILE: arch/ppc64/kernel/mf.c:1171:
+	mf_setSide(*stkbuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: arch/ppc64/kernel/mf.c:1177:
+static int proc_mf_dump_src(char *page, char **start, off_t off,
+		int count, int *eof, void *data)

CHECK:CAMELCASE: Avoid CamelCase: <mf_getSrcHistory>
#167: FILE: arch/ppc64/kernel/mf.c:1181:
+	mf_getSrcHistory(page, count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: arch/ppc64/kernel/mf.c:1183:
+^Ilen -= off;^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: arch/ppc64/kernel/mf.c:1184:
+^Iif (len < count) {^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#170: FILE: arch/ppc64/kernel/mf.c:1184:
+	if (len < count) {		
[...]
+	} else				
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: arch/ppc64/kernel/mf.c:1185:
+^I^I*eof = 1;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: arch/ppc64/kernel/mf.c:1186:
+^I^Iif (len <= 0)^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: arch/ppc64/kernel/mf.c:1187:
+^I^I^Ireturn 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/ppc64/kernel/mf.c:1188:
+^I} else^I^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#174: FILE: arch/ppc64/kernel/mf.c:1188:
+	} else				

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: arch/ppc64/kernel/mf.c:1189:
+^I^Ilen = count;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: arch/ppc64/kernel/mf.c:1190:
+^I*start = page + off;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: arch/ppc64/kernel/mf.c:1191:
+^Ireturn len;^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: arch/ppc64/kernel/mf.c:1195:
+static int proc_mf_change_src(struct file *file, const char __user *buffer,
+		unsigned long count, void *data)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count < 4'
#188: FILE: arch/ppc64/kernel/mf.c:1202:
+	if ((count < 4) && (count != 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count != 1'
#188: FILE: arch/ppc64/kernel/mf.c:1202:
+	if ((count < 4) && (count != 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#189: FILE: arch/ppc64/kernel/mf.c:1203:
+		printk(KERN_ERR "mf_proc: invalid src\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == 1'
#198: FILE: arch/ppc64/kernel/mf.c:1212:
+	if ((count == 1) && (*stkbuf == '\0'))

CHECK:CAMELCASE: Avoid CamelCase: <mf_clearSrc>
#199: FILE: arch/ppc64/kernel/mf.c:1213:
+		mf_clearSrc();

CHECK:CAMELCASE: Avoid CamelCase: <mf_displaySrc>
#201: FILE: arch/ppc64/kernel/mf.c:1215:
+		mf_displaySrc(*(u32 *)stkbuf);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: arch/ppc64/kernel/mf.c:1217:
+^Ireturn count;^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: arch/ppc64/kernel/mf.c:1221:
+static int proc_mf_change_cmdline(struct file *file, const char *buffer,
+		unsigned long count, void *data)

CHECK:CAMELCASE: Avoid CamelCase: <mf_setCmdLine>
#212: FILE: arch/ppc64/kernel/mf.c:1226:
+	mf_setCmdLine(buffer, count, (u64)data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: arch/ppc64/kernel/mf.c:1228:
+^Ireturn count;^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: arch/ppc64/kernel/mf.c:1231:
+static ssize_t proc_mf_change_vmlinux(struct file *file, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: arch/ppc64/kernel/mf.c:1235:
+	struct inode * inode = file->f_dentry->d_inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: arch/ppc64/kernel/mf.c:1236:
+	struct proc_dir_entry * dp = PDE(inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: arch/ppc64/kernel/mf.c:1238:
+	int rc;
+	if (!capable(CAP_SYS_ADMIN))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <mf_setVmlinuxChunk>
#227: FILE: arch/ppc64/kernel/mf.c:1241:
+	rc = mf_setVmlinuxChunk(buf, count, *ppos, (u64)dp->data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: arch/ppc64/kernel/mf.c:1247:
+^Ireturn count;^I^I^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#236: FILE: arch/ppc64/kernel/mf.c:1250:
+static struct file_operations proc_vmlinux_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#259: FILE: arch/ppc64/kernel/mf.c:1273:
+		ent = create_proc_entry("cmdline", S_IFREG|S_IRUSR|S_IWUSR, mf);
 		                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#259: FILE: arch/ppc64/kernel/mf.c:1273:
+		ent = create_proc_entry("cmdline", S_IFREG|S_IRUSR|S_IWUSR, mf);
 		                                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#259: FILE: arch/ppc64/kernel/mf.c:1273:
+		ent = create_proc_entry("cmdline", S_IFREG|S_IRUSR|S_IWUSR, mf);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#270: FILE: arch/ppc64/kernel/mf.c:1284:
+		ent = create_proc_entry("vmlinux", S_IFREG|S_IWUSR, mf);
 		                                          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#270: FILE: arch/ppc64/kernel/mf.c:1284:
+		ent = create_proc_entry("vmlinux", S_IFREG|S_IWUSR, mf);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#278: FILE: arch/ppc64/kernel/mf.c:1292:
+	ent = create_proc_entry("side", S_IFREG|S_IRUSR|S_IWUSR, mf_proc_root);
 	                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#278: FILE: arch/ppc64/kernel/mf.c:1292:
+	ent = create_proc_entry("side", S_IFREG|S_IRUSR|S_IWUSR, mf_proc_root);
 	                                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#278: FILE: arch/ppc64/kernel/mf.c:1292:
+	ent = create_proc_entry("side", S_IFREG|S_IRUSR|S_IWUSR, mf_proc_root);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#286: FILE: arch/ppc64/kernel/mf.c:1300:
+	ent = create_proc_entry("src", S_IFREG|S_IRUSR|S_IWUSR, mf_proc_root);
 	                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#286: FILE: arch/ppc64/kernel/mf.c:1300:
+	ent = create_proc_entry("src", S_IFREG|S_IRUSR|S_IWUSR, mf_proc_root);
 	                                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#286: FILE: arch/ppc64/kernel/mf.c:1300:
+	ent = create_proc_entry("src", S_IFREG|S_IRUSR|S_IWUSR, mf_proc_root);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#297: FILE: arch/ppc64/kernel/mf.c:1311:
+__initcall(mf_proc_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232580.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 12 warnings, 29 checks, 247 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232580.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
