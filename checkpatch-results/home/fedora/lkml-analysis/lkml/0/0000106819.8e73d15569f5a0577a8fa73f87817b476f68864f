WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
Ok here is a rewrite incorporating many of the suggested changes by Andrew =

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#108: FILE: Documentation/sysctl/vm.txt:32:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/swap.h:218:
+extern void prepare_swap_prefetch(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/swap.h:219:
+extern void add_to_swapped_list(unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/swap.h:220:
+extern void remove_from_swapped_list(unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/swap.h:221:
+extern void delay_swap_prefetch(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/swap.h:266:
+extern int add_to_swap_cache(struct page *page, swp_entry_t entry);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#208: FILE: init/Kconfig:105:
+config SWAP_PREFETCH
+	bool "Support for prefetching swapped memory"
+	depends on SWAP
+	default y
+	---help---
+	  This option will allow the kernel to prefetch swapped memory pages
+	  when idle. The pages will be kept on both swap and in swap_cache
+	  thus avoiding the need for further I/O if either ram or swap space
+	  is required.
+
+	  What this will do on workstations is slowly bring back applications
+	  that have swapped out after memory intensive workloads back into
+	  physical ram if you have free ram at a later stage and the machine
+	  is relatively idle. This means that when you come back to your
+	  computer after leaving it idle for a while, applications will come
+	  to life faster. Note that your swap usage will appear to increase
+	  but these are cached pages, can be dropped freely by the vm, and it
+	  should stabilise around 50% swap usage maximum.
+
+	  Workstations and multiuser workstation servers will most likely want
+	  to say Y.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#246: FILE: kernel/sysctl.c:896:
+		.ctl_name	=3D VM_SWAP_PREFETCH,
 		         	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#247: FILE: kernel/sysctl.c:897:
+		.procname	=3D "swap_prefetch",
 		         	^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#248: FILE: kernel/sysctl.c:898:
+		.data		=3D &swap_prefetch,
 		     		^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#248: FILE: kernel/sysctl.c:898:
+		.data		=3D &swap_prefetch,
 		     		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#249: FILE: kernel/sysctl.c:899:
+		.maxlen		=3D sizeof(swap_prefetch),
 		       		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#250: FILE: kernel/sysctl.c:900:
+		.mode		=3D 0644,
 		     		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#251: FILE: kernel/sysctl.c:901:
+		.proc_handler	=3D &proc_dointvec,
 		             	^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#251: FILE: kernel/sysctl.c:901:
+		.proc_handler	=3D &proc_dointvec,
 		             	    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#326: FILE: mm/swap_prefetch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#327: FILE: mm/swap_prefetch.c:2:
+ * linux/mm/swap_prefetch.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#350: FILE: mm/swap_prefetch.c:25:
+int swap_prefetch __read_mostly =3D 1;
                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#367: FILE: mm/swap_prefetch.c:42:
+static struct swapped_root swapped =3D {
                                    ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#368: FILE: mm/swap_prefetch.c:43:
+^I.busy ^I^I=3D 0,^I^I^I/* Any vm activity */$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#368: FILE: mm/swap_prefetch.c:43:
+	.busy 		=3D 0,			/* Any vm activity */
 	      		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#369: FILE: mm/swap_prefetch.c:44:
+	.lock		=3D SPIN_LOCK_UNLOCKED,
 	     		^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: mm/swap_prefetch.c:45:
+^I.list  ^I^I=3D LIST_HEAD_INIT(swapped.list),$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#370: FILE: mm/swap_prefetch.c:45:
+	.list  		=3D LIST_HEAD_INIT(swapped.list),
 	       		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#371: FILE: mm/swap_prefetch.c:46:
+	.swap_tree	=3D RADIX_TREE_INIT(GFP_ATOMIC),
 	          	^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: mm/swap_prefetch.c:47:
+^I.count ^I^I=3D 0,^I^I^I/* Number of swapped entries */$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#372: FILE: mm/swap_prefetch.c:47:
+	.count 		=3D 0,			/* Number of swapped entries */
 	       		^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#385: FILE: mm/swap_prefetch.c:60:
+	long mem =3D nr_free_pagecache_pages();
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#387: FILE: mm/swap_prefetch.c:62:
+	swapped.cache =3D kmem_cache_create("swapped_entry",
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#391: FILE: mm/swap_prefetch.c:66:
+	swapped.maxcount =3D mem;
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#393: FILE: mm/swap_prefetch.c:68:
+	mapped_limit =3D mem / 3 * 2;
 	             ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#414: FILE: mm/swap_prefetch.c:89:
+	if (swapped.count >=3D swapped.maxcount) {
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#420: FILE: mm/swap_prefetch.c:95:
+		entry =3D list_entry(swapped.list.next,
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#426: FILE: mm/swap_prefetch.c:101:
+		entry =3D kmem_cache_alloc(swapped.cache, GFP_ATOMIC);
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#432: FILE: mm/swap_prefetch.c:107:
+	entry->swp_entry.val =3D index;
 	                     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#448: FILE: mm/swap_prefetch.c:123:
+	return;
+}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#461: FILE: mm/swap_prefetch.c:136:
+	entry =3D radix_tree_delete(&swapped.swap_tree, index);
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#482: FILE: mm/swap_prefetch.c:157:
+	enum trickle_return ret =3D TRICKLE_FAILED;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#484: FILE: mm/swap_prefetch.c:159:
+	struct page *page =3D NULL;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#488: FILE: mm/swap_prefetch.c:163:
+	page =3D radix_tree_lookup(&swapper_space.page_tree, entry.val);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#500: FILE: mm/swap_prefetch.c:175:
+	zonelist =3D NODE_DATA(numa_node_id())->node_zonelists +
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#507: FILE: mm/swap_prefetch.c:182:
+	page =3D __alloc_pages(GFP_HIGHUSER & ~__GFP_WAIT, 0, zonelist);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#509: FILE: mm/swap_prefetch.c:184:
+		ret =3D TRICKLE_DELAY;
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#519: FILE: mm/swap_prefetch.c:194:
+		ret =3D TRICKLE_DELAY;
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#523: FILE: mm/swap_prefetch.c:198:
+	ret =3D TRICKLE_SUCCESS;
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#546: FILE: mm/swap_prefetch.c:220:
+	int ret =3D 0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#552: FILE: mm/swap_prefetch.c:226:
+	current_free =3D 0;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#562: FILE: mm/swap_prefetch.c:236:
+		free =3D z->free_pages;
 		     ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#565: FILE: mm/swap_prefetch.c:239:
+		current_free +=3D free;
 		             ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#573: FILE: mm/swap_prefetch.c:247:
+	if (last_prefetch_free) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#575: FILE: mm/swap_prefetch.c:249:
+			last_prefetch_free =3D current_free;
 			                   ^

CHECK:BRACES: Unbalanced braces around else statement
#578: FILE: mm/swap_prefetch.c:252:
+	} else

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#579: FILE: mm/swap_prefetch.c:253:
+		last_prefetch_free =3D current_free;
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#598: FILE: mm/swap_prefetch.c:272:
+	limit =3D ps.nr_mapped + ps.nr_slab + ps.nr_dirty + ps.nr_unstable +
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#605: FILE: mm/swap_prefetch.c:279:
+	ret =3D 1;
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#620: FILE: mm/swap_prefetch.c:293:
+	enum trickle_return ret =3D TRICKLE_DELAY;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#631: FILE: mm/swap_prefetch.c:304:
+			ret =3D TRICKLE_FAILED;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#634: FILE: mm/swap_prefetch.c:307:
+		entry =3D list_entry(swapped.list.next,
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#638: FILE: mm/swap_prefetch.c:311:
+		got_page =3D trickle_swap_cache_async(entry->swp_entry);
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#654: FILE: mm/swap_prefetch.c:327:
+		prefetched_pages =3D 0;
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#674: FILE: mm/swap_prefetch.c:347:
+		prefetched =3D trickle_swap();
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#678: FILE: mm/swap_prefetch.c:351:
+			last_prefetch_free =3D 0;
 			                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#682: FILE: mm/swap_prefetch.c:355:
+			last_prefetch_free =3D 0;
 			                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#694: FILE: mm/swap_prefetch.c:367:
+	kprefetchd_task =3D kthread_run(kprefetchd, NULL, "kprefetchd");
 	                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#726: FILE: mm/swap_state.c:97:
 }
+int add_to_swap_cache(struct page *page, swp_entry_t entry)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000106819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 8 warnings, 10 checks, 639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000106819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
