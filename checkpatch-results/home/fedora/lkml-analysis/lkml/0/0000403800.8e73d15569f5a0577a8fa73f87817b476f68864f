WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
--- linux-2.5.53/include/linux/devfs_fs_kernel.h	2002-12-23 21:21:01.000000000 -0800

WARNING:NEW_TYPEDEFS: do not add new typedefs
#62: FILE: include/linux/devfs_fs_kernel.h:28:
+typedef struct dentry * devfs_handle_t;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: include/linux/devfs_fs_kernel.h:28:
+typedef struct dentry * devfs_handle_t;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#74: FILE: include/linux/devfs_fs_kernel.h:61:
+extern int devfs_generate_path (devfs_handle_t de, char *path, int buflen);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/devfs_fs_kernel.h:61:
+extern int devfs_generate_path (devfs_handle_t de, char *path, int buflen);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#75: FILE: include/linux/devfs_fs_kernel.h:62:
+extern int devfs_only (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/devfs_fs_kernel.h:62:
+extern int devfs_only (void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#78: FILE: include/linux/devfs_fs_kernel.h:65:
+extern int devfs_alloc_major (umode_t mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/devfs_fs_kernel.h:65:
+extern int devfs_alloc_major (umode_t mode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#79: FILE: include/linux/devfs_fs_kernel.h:66:
+extern void devfs_dealloc_major (umode_t mode, int major);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/devfs_fs_kernel.h:66:
+extern void devfs_dealloc_major (umode_t mode, int major);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#80: FILE: include/linux/devfs_fs_kernel.h:67:
+extern dev_t devfs_alloc_devnum (umode_t mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/devfs_fs_kernel.h:67:
+extern dev_t devfs_alloc_devnum (umode_t mode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: include/linux/devfs_fs_kernel.h:68:
+extern void devfs_dealloc_devnum (umode_t mode, dev_t devnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/devfs_fs_kernel.h:68:
+extern void devfs_dealloc_devnum (umode_t mode, dev_t devnum);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#117: FILE: fs/namei.c:1380:
+struct dentry *lookup_create(struct nameidata *nd, int is_dir)
                                                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#127: FILE: fs/Kconfig:850:
+config DEVFS_SMALL
+	bool "Smaller /dev file system (EXPERIMENTAL)"
+	depends on EXPERIMENTAL && DEVFS_FS
+	---help---
+	  New smaller devfs without automatic partition rereading
+	  (which impeded user level partition handling) and currently
+	  without some features used by arch/ia64/sn.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#159: FILE: fs/mini-devfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#185: FILE: fs/mini-devfs/inode.c:27:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#186: FILE: fs/mini-devfs/inode.c:28:
+#include <asm/string.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#189: FILE: fs/mini-devfs/inode.c:31:
+/* For now, must be the same as devfs magic to appease glibc.  See
+   __posix_openpt in glibc-2.3/sysdeps/unix/sysv/linux/getpt.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#190: FILE: fs/mini-devfs/inode.c:32:
+   TODO(?): Adopt a new magic number and adjust glibc? */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: fs/mini-devfs/inode.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#195: FILE: fs/mini-devfs/inode.c:37:
+/* TODO: Move this to some .h file or, more likely, use a slightly
+   different interface from lookup_create. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#195: FILE: fs/mini-devfs/inode.c:37:
+   different interface from lookup_create. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#196: FILE: fs/mini-devfs/inode.c:38:
+extern struct dentry *lookup_create(struct nameidata *nd, int is_dir);
                                                       ^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#196: FILE: fs/mini-devfs/inode.c:38:
+extern struct dentry *lookup_create(struct nameidata *nd, int is_dir);

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#199: FILE: fs/mini-devfs/inode.c:41:
+static struct address_space_operations devfs2_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#200: FILE: fs/mini-devfs/inode.c:42:
+static struct file_operations devfs2_file_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#201: FILE: fs/mini-devfs/inode.c:43:
+static struct inode_operations devfs2_dir_inode_operations;

CHECK:BRACES: braces {} should be used on all arms of this statement
#216: FILE: fs/mini-devfs/inode.c:58:
+	if (devfs_generate_path(dentry, path, sizeof(path)) == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#217: FILE: fs/mini-devfs/inode.c:59:
+		const char *argv[] = { devfs_helper, event, path, NULL };

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#218: FILE: fs/mini-devfs/inode.c:60:
+		static char *envp[] = {"PATH=/bin:/sbin:/usr/bin:/usr/sbin",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#222: FILE: fs/mini-devfs/inode.c:64:
+		/* FIXME: Change the call_usermodehelper prototype so
+		   that argv and envp are type const so we won't have

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#223: FILE: fs/mini-devfs/inode.c:65:
+		   to cast the type of argv. */

CHECK:SPACING: No space is necessary after a cast
#224: FILE: fs/mini-devfs/inode.c:66:
+		call_usermodehelper(devfs_helper, (char**) argv, envp);

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#224: FILE: fs/mini-devfs/inode.c:66:
+		call_usermodehelper(devfs_helper, (char**) argv, envp);

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: fs/mini-devfs/inode.c:67:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: fs/mini-devfs/inode.c:68:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#231: FILE: fs/mini-devfs/inode.c:73:
+	struct inode * inode = new_inode(sb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#244: FILE: fs/mini-devfs/inode.c:86:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: fs/mini-devfs/inode.c:87:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#268: FILE: fs/mini-devfs/inode.c:110:
+static struct dentry * devfs2_lookup(struct inode *inode, struct dentry *dentry)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#274: FILE: fs/mini-devfs/inode.c:116:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: fs/mini-devfs/inode.c:124:
+	struct inode * inode = devfs2_get_inode(dir->i_sb, mode, dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: fs/mini-devfs/inode.c:137:
+static int devfs2_mkdir(struct inode * dir, struct dentry * dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: fs/mini-devfs/inode.c:137:
+static int devfs2_mkdir(struct inode * dir, struct dentry * dentry, int mode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: fs/mini-devfs/inode.c:140:
+	int retval = devfs2_mknod(dir, dentry, mode | S_IFDIR, 0);
+	if (!retval)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: fs/mini-devfs/inode.c:150:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: fs/mini-devfs/inode.c:151:
+static int devfs2_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: fs/mini-devfs/inode.c:151:
+static int devfs2_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#314: FILE: fs/mini-devfs/inode.c:156:
+	inode = devfs2_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#314: FILE: fs/mini-devfs/inode.c:156:
+	inode = devfs2_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#316: FILE: fs/mini-devfs/inode.c:158:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: fs/mini-devfs/inode.c:159:
+		int l = strlen(symname)+1;
+		error = page_symlink(inode, symname, l);

CHECK:BRACES: braces {} should be used on all arms of this statement
#318: FILE: fs/mini-devfs/inode.c:160:
+		if (!error) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#321: FILE: fs/mini-devfs/inode.c:163:
+		} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#322: FILE: fs/mini-devfs/inode.c:164:
+			iput(inode);
 			^^^^

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#327: FILE: fs/mini-devfs/inode.c:169:
+static struct address_space_operations devfs2_aops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#333: FILE: fs/mini-devfs/inode.c:175:
+static struct file_operations devfs2_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#341: FILE: fs/mini-devfs/inode.c:183:
+static struct inode_operations devfs2_dir_inode_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: fs/mini-devfs/inode.c:200:
+static int devfs2_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: fs/mini-devfs/inode.c:200:
+static int devfs2_fill_super(struct super_block * sb, void * data, int silent)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#373: FILE: fs/mini-devfs/inode.c:215:
+		iput(inode);
 		^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "devfs2_vfsmount"
#396: FILE: fs/mini-devfs/inode.c:238:
+	if (devfs2_vfsmount != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#405: FILE: fs/mini-devfs/inode.c:247:
+	if (IS_ERR(devfs2_vfsmount)) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#409: FILE: fs/mini-devfs/inode.c:251:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#424: FILE: fs/mini-devfs/inode.c:266:
+static int walk_parents_mkdir(const char **path, struct nameidata *nd,
                                                                    ^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#428: FILE: fs/mini-devfs/inode.c:270:
+	char buf[strlen(*path)+1];
 	                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: fs/mini-devfs/inode.c:275:
+		int len = slash - *path;
+		memcpy(buf, *path, len);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#437: FILE: fs/mini-devfs/inode.c:279:
+		err = link_path_walk(buf, nd); /* releases dcache_lock */
 		                          ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: fs/mini-devfs/inode.c:281:
+		BUG_ON(err);	/* AJR */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#443: FILE: fs/mini-devfs/inode.c:285:
+		nd->dentry = lookup_create(nd, is_dir);
 		                           ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: fs/mini-devfs/inode.c:288:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: fs/mini-devfs/inode.c:295:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#457: FILE: fs/mini-devfs/inode.c:299:
+			BUG_ON(err); /* AJR */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#471: FILE: fs/mini-devfs/inode.c:313:
+	struct nameidata nd;
 	                 ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#474: FILE: fs/mini-devfs/inode.c:316:
+	if (dir == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devfs2_vfsmount"
#475: FILE: fs/mini-devfs/inode.c:317:
+		if (devfs2_vfsmount == NULL && init_devfs2_fs() != 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#476: FILE: fs/mini-devfs/inode.c:318:
+			BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#481: FILE: fs/mini-devfs/inode.c:323:
+	memset(&nd, 0, sizeof(nd));
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#481: FILE: fs/mini-devfs/inode.c:323:
+	memset(&nd, 0, sizeof(nd));
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#482: FILE: fs/mini-devfs/inode.c:324:
+	nd.flags = LOOKUP_PARENT;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#483: FILE: fs/mini-devfs/inode.c:325:
+	/* nd.mnt = current->fs->rootmnt; FIXME? */
 	   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#484: FILE: fs/mini-devfs/inode.c:326:
+	nd.mnt = devfs2_vfsmount;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#485: FILE: fs/mini-devfs/inode.c:327:
+	nd.dentry = dir;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#487: FILE: fs/mini-devfs/inode.c:329:
+	err = walk_parents_mkdir(&name, &nd, is_dir);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#492: FILE: fs/mini-devfs/inode.c:334:
+	err = link_path_walk(name, &nd);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#494: FILE: fs/mini-devfs/inode.c:336:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);
 		                                                    ^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#494: FILE: fs/mini-devfs/inode.c:336:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#494: FILE: fs/mini-devfs/inode.c:336:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#494: FILE: fs/mini-devfs/inode.c:336:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'devfs_decode', this function's name, in a string
#494: FILE: fs/mini-devfs/inode.c:336:
+		printk ("AJR devfs_decode: link_path_walk(name %s, &nd) got error %d.\n", name, err);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#495: FILE: fs/mini-devfs/inode.c:337:
+		BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#499: FILE: fs/mini-devfs/inode.c:341:
+	*dentry = lookup_create(&nd, is_dir);
 	                         ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: fs/mini-devfs/inode.c:343:
+	BUG_ON(IS_ERR(*dentry)); /* AJR */

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: fs/mini-devfs/inode.c:344:
+	if (IS_ERR(*dentry))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#504: FILE: fs/mini-devfs/inode.c:346:
+		return PTR_ERR(*dentry);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#504: FILE: fs/mini-devfs/inode.c:346:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: fs/mini-devfs/inode.c:352:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#511: FILE: fs/mini-devfs/inode.c:353:
+devfs_handle_t devfs_register (devfs_handle_t dir,

CHECK:BRACES: braces {} should be used on all arms of this statement
#524: FILE: fs/mini-devfs/inode.c:366:
+	if (flags & DEVFS_FL_AUTO_DEVNUM) {
[...]
+	} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#525: FILE: fs/mini-devfs/inode.c:367:
+		BUG_ON(!S_ISCHR(mode) && !S_ISBLK(mode));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#528: FILE: fs/mini-devfs/inode.c:370:
+			printk ("(%s): exhausted %s device numbers\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: fs/mini-devfs/inode.c:370:
+			printk ("(%s): exhausted %s device numbers\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#529: FILE: fs/mini-devfs/inode.c:371:
+				name, S_ISCHR (mode) ? "char" : "block");

CHECK:BRACES: Unbalanced braces around else statement
#532: FILE: fs/mini-devfs/inode.c:374:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#543: FILE: fs/mini-devfs/inode.c:385:
+		/* FIXME? Is DEVFS_FL_CURRENT_OWNER useful?  Don't we
+		   already set uid and gid to current->fs{uid,gid}?  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#543: FILE: fs/mini-devfs/inode.c:385:
+		   already set uid and gid to current->fs{uid,gid}?  */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#551: FILE: fs/mini-devfs/inode.c:393:
+	BUG_ON(err != -EEXIST);	/* AJR */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: fs/mini-devfs/inode.c:400:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: fs/mini-devfs/inode.c:400:
+ $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#561: FILE: fs/mini-devfs/inode.c:403:
+
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: fs/mini-devfs/inode.c:406:
+void devfs_unregister (devfs_handle_t de)

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: fs/mini-devfs/inode.c:409:
+	mode_t mode = de->d_inode->i_mode;
+	if (S_ISDIR(mode))

CHECK:BRACES: braces {} should be used on all arms of this statement
#567: FILE: fs/mini-devfs/inode.c:409:
+	if (S_ISDIR(mode))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#569: FILE: fs/mini-devfs/inode.c:411:
+	else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#578: FILE: fs/mini-devfs/inode.c:420:
+void devfs_put (devfs_handle_t de)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#584: FILE: fs/mini-devfs/inode.c:426:
+int devfs_mk_symlink (devfs_handle_t dir, const char *name,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#602: FILE: fs/mini-devfs/inode.c:444:
+devfs_handle_t devfs_mk_dir (devfs_handle_t dir, const char *name, void *info)

CHECK:BRACES: braces {} should be used on all arms of this statement
#608: FILE: fs/mini-devfs/inode.c:450:
+	if (!err) {
[...]
+	else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#612: FILE: fs/mini-devfs/inode.c:454:
+			BUG_ON (err != -EEXIST); /* AJR */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#612: FILE: fs/mini-devfs/inode.c:454:
+			BUG_ON (err != -EEXIST); /* AJR */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#616: FILE: fs/mini-devfs/inode.c:458:
+	}
+	else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#617: FILE: fs/mini-devfs/inode.c:459:
+		BUG();	/* AJR */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#628: FILE: fs/mini-devfs/inode.c:470:
+	struct nameidata nd;
 	                 ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#634: FILE: fs/mini-devfs/inode.c:476:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#638: FILE: fs/mini-devfs/inode.c:480:
+	buf[sizeof(buf)-1] = '\0';
 	               ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#640: FILE: fs/mini-devfs/inode.c:482:
+	memset(&nd, 0, sizeof(nd));
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#640: FILE: fs/mini-devfs/inode.c:482:
+	memset(&nd, 0, sizeof(nd));
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#641: FILE: fs/mini-devfs/inode.c:483:
+	nd.mnt = devfs2_vfsmount;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#642: FILE: fs/mini-devfs/inode.c:484:
+	nd.dentry = devfs2_vfsmount->mnt_sb->s_root;
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#645: FILE: fs/mini-devfs/inode.c:487:
+	err = link_path_walk(buf, &nd);
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#647: FILE: fs/mini-devfs/inode.c:489:
+		devfs_unregister(nd.dentry);
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#648: FILE: fs/mini-devfs/inode.c:490:
+		devfs_put(nd.dentry);
 		          ^^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#650: FILE: fs/mini-devfs/inode.c:492:
+	}
+	else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#651: FILE: fs/mini-devfs/inode.c:493:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#651: FILE: fs/mini-devfs/inode.c:493:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'devfs_remove', this function's name, in a string
#651: FILE: fs/mini-devfs/inode.c:493:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "

WARNING:SPLIT_STRING: quoted string split across lines
#652: FILE: fs/mini-devfs/inode.c:494:
+		printk ("AJR devfs_remove: link_path_walk(buf %s, len %d) "
+			"returned err %d.\n", buf, len, err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#655: FILE: fs/mini-devfs/inode.c:497:
+EXPORT_SYMBOL(devfs_remove);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#662: FILE: fs/mini-devfs/inode.c:504:
+void __init mount_devfs_fs (void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: fs/mini-devfs/inode.c:507:
+    int err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: fs/mini-devfs/inode.c:509:
+    err = do_mount ("none", "/dev", "devfs", 0, "");$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#667: FILE: fs/mini-devfs/inode.c:509:
+    err = do_mount ("none", "/dev", "devfs", 0, "");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: fs/mini-devfs/inode.c:510:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#668: FILE: fs/mini-devfs/inode.c:510:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#668: FILE: fs/mini-devfs/inode.c:510:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#668: FILE: fs/mini-devfs/inode.c:510:
+    if (err == 0) printk (KERN_INFO "Mounted devfs on /dev\n");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: fs/mini-devfs/inode.c:511:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#669: FILE: fs/mini-devfs/inode.c:511:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#669: FILE: fs/mini-devfs/inode.c:511:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#669: FILE: fs/mini-devfs/inode.c:511:
+    else printk ("(): unable to mount devfs2, err: %d\n", err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#673: FILE: fs/mini-devfs/inode.c:515:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#674: FILE: fs/mini-devfs/inode.c:516:
+static int path_len (struct dentry *de, struct dentry *root)

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: fs/mini-devfs/inode.c:519:
+	int len = 0;
+	while (de != root) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#682: FILE: fs/mini-devfs/inode.c:524:
+	return len;		/* -1 because we omit the leading '/',
+				   +1 because we include trailing '\0' */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#682: FILE: fs/mini-devfs/inode.c:524:
+				   +1 because we include trailing '\0' */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#685: FILE: fs/mini-devfs/inode.c:527:
+int devfs_generate_path (devfs_handle_t de, char *path, int buflen)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#691: FILE: fs/mini-devfs/inode.c:533:
+	if (de == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#692: FILE: fs/mini-devfs/inode.c:534:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#699: FILE: fs/mini-devfs/inode.c:541:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#707: FILE: fs/mini-devfs/inode.c:549:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: fs/mini-devfs/inode.c:564:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#725: FILE: fs/mini-devfs/inode.c:567:
+	BUG_ON(path != path_orig);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#730: FILE: fs/mini-devfs/inode.c:572:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#731: FILE: fs/mini-devfs/inode.c:573:
+int devfs_set_file_size (devfs_handle_t de, unsigned long size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "de"
#734: FILE: fs/mini-devfs/inode.c:576:
+	if (de != NULL && de->d_inode != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "de->d_inode"
#734: FILE: fs/mini-devfs/inode.c:576:
+	if (de != NULL && de->d_inode != NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#742: FILE: fs/mini-devfs/util.c:1:
+/*  devfs (Device FileSystem) utilities.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#743: FILE: fs/mini-devfs/util.c:2:
+/*  devfs (Device FileSystem) utilities.
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#757: FILE: fs/mini-devfs/util.c:16:
+    License along with this library; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#758: FILE: fs/mini-devfs/util.c:17:
+    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#767: FILE: fs/mini-devfs/util.c:26:
+               Created.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: fs/mini-devfs/util.c:28:
+               Created <_devfs_convert_name> and supported SCSI and IDE CD-ROMs$

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: fs/mini-devfs/util.c:30:
+               Changed operations pointer type to void *.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: fs/mini-devfs/util.c:32:
+               Changed interface to <devfs_register_series>.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#775: FILE: fs/mini-devfs/util.c:34:
+               Took account of interface change to <devfs_mk_symlink>.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: fs/mini-devfs/util.c:35:
+               Took account of interface change to <devfs_mk_dir>.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: fs/mini-devfs/util.c:37:
+               Documentation cleanup.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#780: FILE: fs/mini-devfs/util.c:39:
+               Created <devfs_*alloc_major> and <devfs_*alloc_devnum>.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: fs/mini-devfs/util.c:41:
+               Created <devfs_*alloc_unique_number>.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: fs/mini-devfs/util.c:43:
+               Documentation typo fix.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#786: FILE: fs/mini-devfs/util.c:45:
+               Made <block_semaphore> and <char_semaphore> private.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: fs/mini-devfs/util.c:47:
+               Fixed bug in <devfs_alloc_unique_number>: limited to 128 numbers$

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: fs/mini-devfs/util.c:49:
+               Updated major masks up to Linus' "no new majors" proclamation.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: fs/mini-devfs/util.c:52:
+               Fixed bug in <devfs_alloc_unique_number>: was clearing beyond$

ERROR:CODE_INDENT: code indent should use tabs where possible
#796: FILE: fs/mini-devfs/util.c:55:
+               Fixed bitfield data type for <devfs_*alloc_devnum>.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#797: FILE: fs/mini-devfs/util.c:56:
+               Made major bitfield type and initialiser 64 bit safe.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: fs/mini-devfs/util.c:58:
+               Fixed shift warning on 64 bit machines.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: fs/mini-devfs/util.c:60:
+               Copied and used macro for error messages from fs/devfs/base.c $

ERROR:CODE_INDENT: code indent should use tabs where possible
#801: FILE: fs/mini-devfs/util.c:60:
+               Copied and used macro for error messages from fs/devfs/base.c $

ERROR:CODE_INDENT: code indent should use tabs where possible
#803: FILE: fs/mini-devfs/util.c:62:
+               Documentation fix.$

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#811: FILE: fs/mini-devfs/util.c:70:
+#include <asm/bitops.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: fs/mini-devfs/util.c:73:
+   {printk (KERN_ERR "%s" format, __FUNCTION__ , ## args);}$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#814: FILE: fs/mini-devfs/util.c:73:
+   {printk (KERN_ERR "%s" format, __FUNCTION__ , ## args);}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#814: FILE: fs/mini-devfs/util.c:73:
+   {printk (KERN_ERR "%s" format, __FUNCTION__ , ## args);}

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#814: FILE: fs/mini-devfs/util.c:73:
+   {printk (KERN_ERR "%s" format, __FUNCTION__ , ## args);}
                                                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#814: FILE: fs/mini-devfs/util.c:73:
+   {printk (KERN_ERR "%s" format, __FUNCTION__ , ## args);}
                                                          ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#814: FILE: fs/mini-devfs/util.c:73:
+   {printk (KERN_ERR "%s" format, __FUNCTION__ , ## args);}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#816: FILE: fs/mini-devfs/util.c:75:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#824: FILE: fs/mini-devfs/util.c:83:
+int devfs_register_tape (devfs_handle_t de)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: fs/mini-devfs/util.c:85:
+    int pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#827: FILE: fs/mini-devfs/util.c:86:
+    devfs_handle_t slave;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: fs/mini-devfs/util.c:87:
+    char name[32], dest[64];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: fs/mini-devfs/util.c:88:
+    static unsigned int tape_counter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: fs/mini-devfs/util.c:89:
+    int n = tape_counter++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: fs/mini-devfs/util.c:91:
+    pos = devfs_generate_path (de, dest + 3, sizeof dest - 3);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#832: FILE: fs/mini-devfs/util.c:91:
+    pos = devfs_generate_path (de, dest + 3, sizeof dest - 3);

WARNING:SIZEOF_PARENTHESIS: sizeof dest should be sizeof(dest)
#832: FILE: fs/mini-devfs/util.c:91:
+    pos = devfs_generate_path (de, dest + 3, sizeof dest - 3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: fs/mini-devfs/util.c:92:
+    if (pos < 0) return -1;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#833: FILE: fs/mini-devfs/util.c:92:
+    if (pos < 0) return -1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: fs/mini-devfs/util.c:93:
+    strncpy (dest + pos, "../", 3);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#834: FILE: fs/mini-devfs/util.c:93:
+    strncpy (dest + pos, "../", 3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: fs/mini-devfs/util.c:94:
+    sprintf (name, "tapes/tape%u", n);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#835: FILE: fs/mini-devfs/util.c:94:
+    sprintf (name, "tapes/tape%u", n);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: fs/mini-devfs/util.c:95:
+    devfs_mk_symlink (NULL, name, DEVFS_FL_DEFAULT, dest + pos, &slave, NULL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#836: FILE: fs/mini-devfs/util.c:95:
+    devfs_mk_symlink (NULL, name, DEVFS_FL_DEFAULT, dest + pos, &slave, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: fs/mini-devfs/util.c:96:
+    return n;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#847: FILE: fs/mini-devfs/util.c:106:
+EXPORT_SYMBOL(devfs_unregister_tape);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#850: FILE: fs/mini-devfs/util.c:109:
+struct major_list
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: fs/mini-devfs/util.c:110:
+    spinlock_t lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#851: FILE: fs/mini-devfs/util.c:110:
+    spinlock_t lock;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: fs/mini-devfs/util.c:111:
+    unsigned long bits[256 / BITS_PER_LONG];$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#854: FILE: fs/mini-devfs/util.c:113:
+};
+#if BITS_PER_LONG == 32

ERROR:SPACING: space required after that ',' (ctx:VxV)
#855: FILE: fs/mini-devfs/util.c:114:
+#  define INITIALISER64(low,high) (low), (high)
                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#855: FILE: fs/mini-devfs/util.c:114:
+#  define INITIALISER64(low,high) (low), (high)

CHECK:SPACING: No space is necessary after a cast
#857: FILE: fs/mini-devfs/util.c:116:
+#  define INITIALISER64(low,high) ( (unsigned long) (high) << 32 | (low) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#857: FILE: fs/mini-devfs/util.c:116:
+#  define INITIALISER64(low,high) ( (unsigned long) (high) << 32 | (low) )
                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#857: FILE: fs/mini-devfs/util.c:116:
+#  define INITIALISER64(low,high) ( (unsigned long) (high) << 32 | (low) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#857: FILE: fs/mini-devfs/util.c:116:
+#  define INITIALISER64(low,high) ( (unsigned long) (high) << 32 | (low) )

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#861: FILE: fs/mini-devfs/util.c:120:
+/*  Block majors already assigned:
+    0-3, 7-9, 11-63, 65-99, 101-113, 120-127, 199, 201, 240-255

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#865: FILE: fs/mini-devfs/util.c:124:
+static struct major_list block_major_list =
+{SPIN_LOCK_UNLOCKED,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: fs/mini-devfs/util.c:125:
+    {INITIALISER64 (0xfffffb8f, 0xffffffff),  /*  Majors 0-31,    32-63    */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#866: FILE: fs/mini-devfs/util.c:125:
+    {INITIALISER64 (0xfffffb8f, 0xffffffff),  /*  Majors 0-31,    32-63    */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: fs/mini-devfs/util.c:126:
+     INITIALISER64 (0xfffffffe, 0xff03ffef),  /*  Majors 64-95,   96-127   */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#867: FILE: fs/mini-devfs/util.c:126:
+     INITIALISER64 (0xfffffffe, 0xff03ffef),  /*  Majors 64-95,   96-127   */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: fs/mini-devfs/util.c:127:
+     INITIALISER64 (0x00000000, 0x00000000),  /*  Majors 128-159, 160-191  */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#868: FILE: fs/mini-devfs/util.c:127:
+     INITIALISER64 (0x00000000, 0x00000000),  /*  Majors 128-159, 160-191  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: fs/mini-devfs/util.c:128:
+     INITIALISER64 (0x00000280, 0xffff0000),  /*  Majors 192-223, 224-255  */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#869: FILE: fs/mini-devfs/util.c:128:
+     INITIALISER64 (0x00000280, 0xffff0000),  /*  Majors 192-223, 224-255  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: fs/mini-devfs/util.c:129:
+    }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#874: FILE: fs/mini-devfs/util.c:133:
+/*  Char majors already assigned:
+    0-7, 9-151, 154-158, 160-211, 216-221, 224-230, 240-255

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#878: FILE: fs/mini-devfs/util.c:137:
+static struct major_list char_major_list =
+{SPIN_LOCK_UNLOCKED,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: fs/mini-devfs/util.c:138:
+    {INITIALISER64 (0xfffffeff, 0xffffffff),  /*  Majors 0-31,    32-63    */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#879: FILE: fs/mini-devfs/util.c:138:
+    {INITIALISER64 (0xfffffeff, 0xffffffff),  /*  Majors 0-31,    32-63    */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: fs/mini-devfs/util.c:139:
+     INITIALISER64 (0xffffffff, 0xffffffff),  /*  Majors 64-95,   96-127   */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#880: FILE: fs/mini-devfs/util.c:139:
+     INITIALISER64 (0xffffffff, 0xffffffff),  /*  Majors 64-95,   96-127   */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: fs/mini-devfs/util.c:140:
+     INITIALISER64 (0x7cffffff, 0xffffffff),  /*  Majors 128-159, 160-191  */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#881: FILE: fs/mini-devfs/util.c:140:
+     INITIALISER64 (0x7cffffff, 0xffffffff),  /*  Majors 128-159, 160-191  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: fs/mini-devfs/util.c:141:
+     INITIALISER64 (0x3f0fffff, 0xffff007f),  /*  Majors 192-223, 224-255  */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#882: FILE: fs/mini-devfs/util.c:141:
+     INITIALISER64 (0x3f0fffff, 0xffff007f),  /*  Majors 192-223, 224-255  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: fs/mini-devfs/util.c:142:
+    }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#886: FILE: fs/mini-devfs/util.c:145:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#894: FILE: fs/mini-devfs/util.c:153:
+int devfs_alloc_major (umode_t mode)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: fs/mini-devfs/util.c:155:
+    int major;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: fs/mini-devfs/util.c:156:
+    struct major_list *list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: fs/mini-devfs/util.c:158:
+    list = S_ISCHR(mode) ? &char_major_list : &block_major_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: fs/mini-devfs/util.c:159:
+    spin_lock (&list->lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#900: FILE: fs/mini-devfs/util.c:159:
+    spin_lock (&list->lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: fs/mini-devfs/util.c:160:
+    major = find_first_zero_bit (list->bits, 256);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#901: FILE: fs/mini-devfs/util.c:160:
+    major = find_first_zero_bit (list->bits, 256);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: fs/mini-devfs/util.c:161:
+    if (major < 256) __set_bit (major, list->bits);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#902: FILE: fs/mini-devfs/util.c:161:
+    if (major < 256) __set_bit (major, list->bits);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#902: FILE: fs/mini-devfs/util.c:161:
+    if (major < 256) __set_bit (major, list->bits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: fs/mini-devfs/util.c:162:
+    else major = -1;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#903: FILE: fs/mini-devfs/util.c:162:
+    else major = -1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: fs/mini-devfs/util.c:163:
+    spin_unlock (&list->lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#904: FILE: fs/mini-devfs/util.c:163:
+    spin_unlock (&list->lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: fs/mini-devfs/util.c:164:
+    return major;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#909: FILE: fs/mini-devfs/util.c:168:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#917: FILE: fs/mini-devfs/util.c:176:
+void devfs_dealloc_major (umode_t mode, int major)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: fs/mini-devfs/util.c:178:
+    int was_set;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: fs/mini-devfs/util.c:179:
+    struct major_list *list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: fs/mini-devfs/util.c:181:
+    if (major < 0) return;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#922: FILE: fs/mini-devfs/util.c:181:
+    if (major < 0) return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: fs/mini-devfs/util.c:182:
+    list = S_ISCHR(mode) ? &char_major_list : &block_major_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: fs/mini-devfs/util.c:183:
+    spin_lock (&list->lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#924: FILE: fs/mini-devfs/util.c:183:
+    spin_lock (&list->lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: fs/mini-devfs/util.c:184:
+    was_set = __test_and_clear_bit (major, list->bits);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#925: FILE: fs/mini-devfs/util.c:184:
+    was_set = __test_and_clear_bit (major, list->bits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: fs/mini-devfs/util.c:185:
+    spin_unlock (&list->lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#926: FILE: fs/mini-devfs/util.c:185:
+    spin_unlock (&list->lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#927: FILE: fs/mini-devfs/util.c:186:
+    if (!was_set) PRINTK ("(): major %d was already free\n", major);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#927: FILE: fs/mini-devfs/util.c:186:
+    if (!was_set) PRINTK ("(): major %d was already free\n", major);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#927: FILE: fs/mini-devfs/util.c:186:
+    if (!was_set) PRINTK ("(): major %d was already free\n", major);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#931: FILE: fs/mini-devfs/util.c:190:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#933: FILE: fs/mini-devfs/util.c:192:
+struct minor_list
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: fs/mini-devfs/util.c:193:
+    int major;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#935: FILE: fs/mini-devfs/util.c:194:
+    unsigned long bits[256 / BITS_PER_LONG];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: fs/mini-devfs/util.c:195:
+    struct minor_list *next;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#940: FILE: fs/mini-devfs/util.c:199:
+struct device_list
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: fs/mini-devfs/util.c:200:
+    struct minor_list *first, *last;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: fs/mini-devfs/util.c:201:
+    int none_free;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#945: FILE: fs/mini-devfs/util.c:204:
+static DECLARE_MUTEX (block_semaphore);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#948: FILE: fs/mini-devfs/util.c:207:
+static DECLARE_MUTEX (char_semaphore);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#951: FILE: fs/mini-devfs/util.c:210:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#960: FILE: fs/mini-devfs/util.c:219:
+dev_t devfs_alloc_devnum (umode_t mode)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: fs/mini-devfs/util.c:221:
+    int minor;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: fs/mini-devfs/util.c:222:
+    struct semaphore *semaphore;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: fs/mini-devfs/util.c:223:
+    struct device_list *list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: fs/mini-devfs/util.c:224:
+    struct minor_list *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: fs/mini-devfs/util.c:226:
+    if (S_ISCHR(mode))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#967: FILE: fs/mini-devfs/util.c:226:
+    if (S_ISCHR(mode))
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: fs/mini-devfs/util.c:227:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: fs/mini-devfs/util.c:230:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: fs/mini-devfs/util.c:231:
+    else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#972: FILE: fs/mini-devfs/util.c:231:
+    else
+    {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#972: FILE: fs/mini-devfs/util.c:231:
+    }
+    else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: fs/mini-devfs/util.c:232:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#976: FILE: fs/mini-devfs/util.c:235:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#977: FILE: fs/mini-devfs/util.c:236:
+    if (list->none_free) return 0;  /*  Fast test  */$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#977: FILE: fs/mini-devfs/util.c:236:
+    if (list->none_free) return 0;  /*  Fast test  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#978: FILE: fs/mini-devfs/util.c:237:
+    down (semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#978: FILE: fs/mini-devfs/util.c:237:
+    down (semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: fs/mini-devfs/util.c:238:
+    if (list->none_free)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#979: FILE: fs/mini-devfs/util.c:238:
+    if (list->none_free)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: fs/mini-devfs/util.c:239:
+    {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#981: FILE: fs/mini-devfs/util.c:240:
+	up (semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: fs/mini-devfs/util.c:242:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: fs/mini-devfs/util.c:243:
+    for (entry = list->first; entry != NULL; entry = entry->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#984: FILE: fs/mini-devfs/util.c:243:
+    for (entry = list->first; entry != NULL; entry = entry->next)
+    {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#984: FILE: fs/mini-devfs/util.c:243:
+    for (entry = list->first; entry != NULL; entry = entry->next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: fs/mini-devfs/util.c:244:
+    {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#986: FILE: fs/mini-devfs/util.c:245:
+	minor = find_first_zero_bit (entry->bits, 256);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#987: FILE: fs/mini-devfs/util.c:246:
+	if (minor >= 256) continue;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#988: FILE: fs/mini-devfs/util.c:247:
+	__set_bit (minor, entry->bits);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#989: FILE: fs/mini-devfs/util.c:248:
+	up (semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: fs/mini-devfs/util.c:250:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: fs/mini-devfs/util.c:252:
+    if ( ( entry = kmalloc (sizeof *entry, GFP_KERNEL) ) == NULL )$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#993: FILE: fs/mini-devfs/util.c:252:
+    if ( ( entry = kmalloc (sizeof *entry, GFP_KERNEL) ) == NULL )
+    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#993: FILE: fs/mini-devfs/util.c:252:
+    if ( ( entry = kmalloc (sizeof *entry, GFP_KERNEL) ) == NULL )

ERROR:SPACING: space prohibited after that open parenthesis '('
#993: FILE: fs/mini-devfs/util.c:252:
+    if ( ( entry = kmalloc (sizeof *entry, GFP_KERNEL) ) == NULL )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#993: FILE: fs/mini-devfs/util.c:252:
+    if ( ( entry = kmalloc (sizeof *entry, GFP_KERNEL) ) == NULL )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#993: FILE: fs/mini-devfs/util.c:252:
+    if ( ( entry = kmalloc (sizeof *entry, GFP_KERNEL) ) == NULL )

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SIZEOF_PARENTHESIS: sizeof *entry should be sizeof(*entry)
#993: FILE: fs/mini-devfs/util.c:252:
+    if ( ( entry = kmalloc (sizeof *entry, GFP_KERNEL) ) == NULL )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: fs/mini-devfs/util.c:253:
+    {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#996: FILE: fs/mini-devfs/util.c:255:
+	up (semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: fs/mini-devfs/util.c:257:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: fs/mini-devfs/util.c:258:
+    memset (entry, 0, sizeof *entry);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#999: FILE: fs/mini-devfs/util.c:258:
+    memset (entry, 0, sizeof *entry);

WARNING:SIZEOF_PARENTHESIS: sizeof *entry should be sizeof(*entry)
#999: FILE: fs/mini-devfs/util.c:258:
+    memset (entry, 0, sizeof *entry);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: fs/mini-devfs/util.c:259:
+    if ( ( entry->major = devfs_alloc_major (mode) ) < 0 )$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1000: FILE: fs/mini-devfs/util.c:259:
+    if ( ( entry->major = devfs_alloc_major (mode) ) < 0 )
+    {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1000: FILE: fs/mini-devfs/util.c:259:
+    if ( ( entry->major = devfs_alloc_major (mode) ) < 0 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1000: FILE: fs/mini-devfs/util.c:259:
+    if ( ( entry->major = devfs_alloc_major (mode) ) < 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1000: FILE: fs/mini-devfs/util.c:259:
+    if ( ( entry->major = devfs_alloc_major (mode) ) < 0 )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1000: FILE: fs/mini-devfs/util.c:259:
+    if ( ( entry->major = devfs_alloc_major (mode) ) < 0 )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: fs/mini-devfs/util.c:260:
+    {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1003: FILE: fs/mini-devfs/util.c:262:
+	up (semaphore);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1004: FILE: fs/mini-devfs/util.c:263:
+	kfree (entry);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: fs/mini-devfs/util.c:265:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: fs/mini-devfs/util.c:266:
+    __set_bit (0, entry->bits);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1007: FILE: fs/mini-devfs/util.c:266:
+    __set_bit (0, entry->bits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: fs/mini-devfs/util.c:267:
+    if (list->first == NULL) list->first = entry;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1008: FILE: fs/mini-devfs/util.c:267:
+    if (list->first == NULL) list->first = entry;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list->first"
#1008: FILE: fs/mini-devfs/util.c:267:
+    if (list->first == NULL) list->first = entry;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: fs/mini-devfs/util.c:268:
+    else list->last->next = entry;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1009: FILE: fs/mini-devfs/util.c:268:
+    else list->last->next = entry;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: fs/mini-devfs/util.c:269:
+    list->last = entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: fs/mini-devfs/util.c:270:
+    up (semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1011: FILE: fs/mini-devfs/util.c:270:
+    up (semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: fs/mini-devfs/util.c:271:
+    return MKDEV(entry->major, 0);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1016: FILE: fs/mini-devfs/util.c:275:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1025: FILE: fs/mini-devfs/util.c:284:
+void devfs_dealloc_devnum (umode_t mode, dev_t devnum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: fs/mini-devfs/util.c:286:
+    int major, minor;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: fs/mini-devfs/util.c:287:
+    struct semaphore *semaphore;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: fs/mini-devfs/util.c:288:
+    struct device_list *list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: fs/mini-devfs/util.c:289:
+    struct minor_list *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1032: FILE: fs/mini-devfs/util.c:291:
+    if (!devnum) return;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1032: FILE: fs/mini-devfs/util.c:291:
+    if (!devnum) return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: fs/mini-devfs/util.c:292:
+    if (S_ISCHR(mode))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1033: FILE: fs/mini-devfs/util.c:292:
+    if (S_ISCHR(mode))
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: fs/mini-devfs/util.c:293:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: fs/mini-devfs/util.c:296:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: fs/mini-devfs/util.c:297:
+    else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1038: FILE: fs/mini-devfs/util.c:297:
+    else
+    {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1038: FILE: fs/mini-devfs/util.c:297:
+    }
+    else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: fs/mini-devfs/util.c:298:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: fs/mini-devfs/util.c:301:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: fs/mini-devfs/util.c:302:
+    major = MAJOR (devnum);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1043: FILE: fs/mini-devfs/util.c:302:
+    major = MAJOR (devnum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: fs/mini-devfs/util.c:303:
+    minor = MINOR (devnum);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1044: FILE: fs/mini-devfs/util.c:303:
+    minor = MINOR (devnum);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: fs/mini-devfs/util.c:304:
+    down (semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1045: FILE: fs/mini-devfs/util.c:304:
+    down (semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: fs/mini-devfs/util.c:305:
+    for (entry = list->first; entry != NULL; entry = entry->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1046: FILE: fs/mini-devfs/util.c:305:
+    for (entry = list->first; entry != NULL; entry = entry->next)
+    {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#1046: FILE: fs/mini-devfs/util.c:305:
+    for (entry = list->first; entry != NULL; entry = entry->next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: fs/mini-devfs/util.c:306:
+    {$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1050: FILE: fs/mini-devfs/util.c:309:
+	if (entry->major != major) continue;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1051: FILE: fs/mini-devfs/util.c:310:
+	was_set = __test_and_clear_bit (minor, entry->bits);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1052: FILE: fs/mini-devfs/util.c:311:
+	if (was_set) list->none_free = 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1053: FILE: fs/mini-devfs/util.c:312:
+	up (semaphore);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1054: FILE: fs/mini-devfs/util.c:313:
+	if (!was_set)
+	    PRINTK ( "(): device %s was already free\n", kdevname (to_kdev_t(devnum)) );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1055: FILE: fs/mini-devfs/util.c:314:
+	    PRINTK ( "(): device %s was already free\n", kdevname (to_kdev_t(devnum)) );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1055: FILE: fs/mini-devfs/util.c:314:
+	    PRINTK ( "(): device %s was already free\n", kdevname (to_kdev_t(devnum)) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#1055: FILE: fs/mini-devfs/util.c:314:
+	    PRINTK ( "(): device %s was already free\n", kdevname (to_kdev_t(devnum)) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1055: FILE: fs/mini-devfs/util.c:314:
+	    PRINTK ( "(): device %s was already free\n", kdevname (to_kdev_t(devnum)) );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1057: FILE: fs/mini-devfs/util.c:316:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: fs/mini-devfs/util.c:317:
+    up (semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1058: FILE: fs/mini-devfs/util.c:317:
+    up (semaphore);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1060: FILE: fs/mini-devfs/util.c:319:
+    /* We get here when a major number was not previously allocated, which
+       can happen, because devfs_uregister calls devfs_dealloc_devnum

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1061: FILE: fs/mini-devfs/util.c:320:
+       regardless of whether devfs_alloc_devnum allocated it. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1065: FILE: fs/mini-devfs/util.c:324:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1074: FILE: fs/mini-devfs/util.c:333:
+int devfs_alloc_unique_number (struct unique_numspace *space)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: fs/mini-devfs/util.c:335:
+    int number;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: fs/mini-devfs/util.c:336:
+    unsigned int length;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: fs/mini-devfs/util.c:339:
+    spin_lock (&space->init_lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1080: FILE: fs/mini-devfs/util.c:339:
+    spin_lock (&space->init_lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: fs/mini-devfs/util.c:340:
+    if (!space->sem_initialised)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1081: FILE: fs/mini-devfs/util.c:340:
+    if (!space->sem_initialised)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: fs/mini-devfs/util.c:341:
+    {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1083: FILE: fs/mini-devfs/util.c:342:
+	sema_init (&space->semaphore, 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1085: FILE: fs/mini-devfs/util.c:344:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: fs/mini-devfs/util.c:345:
+    spin_unlock (&space->init_lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1086: FILE: fs/mini-devfs/util.c:345:
+    spin_unlock (&space->init_lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: fs/mini-devfs/util.c:346:
+    down (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1087: FILE: fs/mini-devfs/util.c:346:
+    down (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1088: FILE: fs/mini-devfs/util.c:347:
+    if (space->num_free < 1)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1088: FILE: fs/mini-devfs/util.c:347:
+    if (space->num_free < 1)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: fs/mini-devfs/util.c:348:
+    {$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1092: FILE: fs/mini-devfs/util.c:351:
+	if (space->length < 16) length = 16;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1093: FILE: fs/mini-devfs/util.c:352:
+	else length = space->length << 1;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1094: FILE: fs/mini-devfs/util.c:353:
+	if ( ( bits = vmalloc (length) ) == NULL )
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1094: FILE: fs/mini-devfs/util.c:353:
+	if ( ( bits = vmalloc (length) ) == NULL )
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1094: FILE: fs/mini-devfs/util.c:353:
+	if ( ( bits = vmalloc (length) ) == NULL )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1094: FILE: fs/mini-devfs/util.c:353:
+	if ( ( bits = vmalloc (length) ) == NULL )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1094: FILE: fs/mini-devfs/util.c:353:
+	if ( ( bits = vmalloc (length) ) == NULL )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1094: FILE: fs/mini-devfs/util.c:353:
+	if ( ( bits = vmalloc (length) ) == NULL )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1096: FILE: fs/mini-devfs/util.c:355:
+	    up (&space->semaphore);

WARNING:TABSTOP: Statements should start on a tabstop
#1097: FILE: fs/mini-devfs/util.c:356:
+	    return -ENOMEM;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1099: FILE: fs/mini-devfs/util.c:358:
+	if (space->bits != NULL)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1099: FILE: fs/mini-devfs/util.c:358:
+	if (space->bits != NULL)
+	{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "space->bits"
#1099: FILE: fs/mini-devfs/util.c:358:
+	if (space->bits != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1101: FILE: fs/mini-devfs/util.c:360:
+	    memcpy (bits, space->bits, space->length);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1102: FILE: fs/mini-devfs/util.c:361:
+	    vfree (space->bits);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1106: FILE: fs/mini-devfs/util.c:365:
+	memset (bits + space->length, 0, length - space->length);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1108: FILE: fs/mini-devfs/util.c:367:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1109: FILE: fs/mini-devfs/util.c:368:
+    number = find_first_zero_bit (space->bits, space->length << 3);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1109: FILE: fs/mini-devfs/util.c:368:
+    number = find_first_zero_bit (space->bits, space->length << 3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: fs/mini-devfs/util.c:369:
+    --space->num_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: fs/mini-devfs/util.c:370:
+    __set_bit (number, space->bits);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1111: FILE: fs/mini-devfs/util.c:370:
+    __set_bit (number, space->bits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: fs/mini-devfs/util.c:371:
+    up (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1112: FILE: fs/mini-devfs/util.c:371:
+    up (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1113: FILE: fs/mini-devfs/util.c:372:
+    return number;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1117: FILE: fs/mini-devfs/util.c:376:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1126: FILE: fs/mini-devfs/util.c:385:
+void devfs_dealloc_unique_number (struct unique_numspace *space, int number)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: fs/mini-devfs/util.c:387:
+    int was_set;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1130: FILE: fs/mini-devfs/util.c:389:
+    if (number < 0) return;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1130: FILE: fs/mini-devfs/util.c:389:
+    if (number < 0) return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: fs/mini-devfs/util.c:390:
+    down (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1131: FILE: fs/mini-devfs/util.c:390:
+    down (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: fs/mini-devfs/util.c:391:
+    was_set = __test_and_clear_bit (number, space->bits);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1132: FILE: fs/mini-devfs/util.c:391:
+    was_set = __test_and_clear_bit (number, space->bits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: fs/mini-devfs/util.c:392:
+    if (was_set) ++space->num_free;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1133: FILE: fs/mini-devfs/util.c:392:
+    if (was_set) ++space->num_free;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: fs/mini-devfs/util.c:393:
+    up (&space->semaphore);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1134: FILE: fs/mini-devfs/util.c:393:
+    up (&space->semaphore);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: fs/mini-devfs/util.c:394:
+    if (!was_set) PRINTK ("(): number %d was already free\n", number);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1135: FILE: fs/mini-devfs/util.c:394:
+    if (!was_set) PRINTK ("(): number %d was already free\n", number);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1135: FILE: fs/mini-devfs/util.c:394:
+    if (!was_set) PRINTK ("(): number %d was already free\n", number);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000403800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 97 errors, 314 warnings, 52 checks, 1065 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000403800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
