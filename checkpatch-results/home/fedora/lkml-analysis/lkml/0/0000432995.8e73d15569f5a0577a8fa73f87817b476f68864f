WARNING:TYPO_SPELLING: 'routin' may be misspelled - perhaps 'routine'?
#29: 
Patch that allows IBM x440 boxes to on-line all CPUs and interrupt routin=
                                                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#116: FILE: arch/i386/kernel/apic.c:282:
+			SET_APIC_LOGICAL_ID(xapic_physical_to_logical_apicid(hard_smp_processor_id())));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#133: FILE: arch/i386/kernel/apic.c:320:
+		 * For NUMA-Q, the firmware does this for us.  Otherwise, put the APIC into clustered or flat

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#263: FILE: arch/i386/kernel/io_apic.c:627:
+	static unsigned	next_cpu = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#263: FILE: arch/i386/kernel/io_apic.c:627:
+	static unsigned	next_cpu = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#265: FILE: arch/i386/kernel/io_apic.c:629:
+	if (next_cpu >= NR_CPUS || cpu_2_logical_apicid[next_cpu] == BAD_APICID)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#269: FILE: arch/i386/kernel/io_apic.c:633:
+	return (val);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#414: FILE: arch/i386/kernel/mpparse.c:75:
+u8 clustered_apic_mode = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#415: FILE: arch/i386/kernel/mpparse.c:76:
+u8 esr_disable = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#416: FILE: arch/i386/kernel/mpparse.c:77:
+u8 raw_phys_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#417: FILE: arch/i386/kernel/mpparse.c:78:
+static u8 clustered_hint = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#441: FILE: arch/i386/kernel/mpparse.c:197:
+	logical_cpu_present_map |= 1 << (num_processors-1);
 	                                               ^

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#511: FILE: arch/i386/kernel/mpparse.c:385:
+	static const char *mode_names[] = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#526: FILE: arch/i386/kernel/mpparse.c:400:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: arch/i386/kernel/mpparse.c:401:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",
+		mode_names[clustered_apic_mode], nr_ioapics);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#557: FILE: arch/i386/kernel/mpparse.c:440:
+	printk("OEM ID: %s ", oem);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#558: FILE: arch/i386/kernel/mpparse.c:441:
+	printk("Product ID: %s ",prod);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#558: FILE: arch/i386/kernel/mpparse.c:441:
+	printk("Product ID: %s ",prod);
 	                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: arch/i386/kernel/process.c:201:
+ ^I^I^I^Ihave set up boot_cpu_physical_apicid or smp_num_cpu */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#658: FILE: arch/i386/kernel/process.c:201:
+ ^I^I^I^Ihave set up boot_cpu_physical_apicid or smp_num_cpu */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#658: FILE: arch/i386/kernel/process.c:201:
+ 				have set up boot_cpu_physical_apicid or smp_num_cpu */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#673: FILE: arch/i386/kernel/smpboot.c:502:
+volatile u8 cpu_2_physical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                                              ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#673: FILE: arch/i386/kernel/smpboot.c:502:
+volatile u8 cpu_2_physical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#679: FILE: arch/i386/kernel/smpboot.c:505:
+volatile u8 cpu_2_logical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                                             ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#679: FILE: arch/i386/kernel/smpboot.c:505:
+volatile u8 cpu_2_logical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#765: FILE: arch/i386/kernel/smpboot.c:768:
+	printk("Booting processor %d/0x%02X/0x%02X eip 0x%lX\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: arch/i386/kernel/smpboot.c:769:
+	printk("Booting processor %d/0x%02X/0x%02X eip 0x%lX\n",
+		cpu, phys_apicid, log_apicid, start_eip);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: arch/i386/kernel/smpboot.c:937:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: arch/i386/kernel/smpboot.c:937:
+  $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#865: FILE: arch/i386/kernel/smpboot.c:962:
+		boot_cpu_logical_apicid = xapic_physical_to_logical_apicid(boot_cpu_physical_apicid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#871: FILE: arch/i386/kernel/smpboot.c:968:
+	printk("Boot CPU #0/0x%02X/0x%02X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: arch/i386/kernel/smpboot.c:969:
+	printk("Boot CPU #0/0x%02X/0x%02X\n",
+		boot_cpu_physical_apicid, boot_cpu_logical_apicid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: arch/i386/kernel/smpboot.c:1037:
+        if (clustered_apic_numaq && (numnodes > 1)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: arch/i386/kernel/smpboot.c:1037:
+        if (clustered_apic_numaq && (numnodes > 1)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'numnodes > 1'
#881: FILE: arch/i386/kernel/smpboot.c:1037:
+        if (clustered_apic_numaq && (numnodes > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#899: FILE: arch/i386/kernel/smpboot.c:1057:
+	for (cpu = 1, bit = 0; bit < NR_CPUS; bit++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_cpus >= 0'
#902: FILE: arch/i386/kernel/smpboot.c:1060:
+		if ((max_cpus >= 0) && (max_cpus <= cpucount + 1))

CHECK:BRACES: braces {} should be used on all arms of this statement
#917: FILE: arch/i386/kernel/smpboot.c:1070:
+		if (clustered_apic_xapic)
[...]
+		else if (clustered_apic_numaq)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#921: FILE: arch/i386/kernel/smpboot.c:1074:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#924: FILE: arch/i386/kernel/smpboot.c:1077:
+			 * For more than 8 CPUs, must use clustered mode. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#927: FILE: arch/i386/kernel/smpboot.c:1080:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_2_physical_apicid[cpu] == BAD_APICID'
#940: FILE: arch/i386/kernel/smpboot.c:1088:
+		if ((cpu_2_physical_apicid[cpu] == BAD_APICID) &&
+				(logical_cpu_present_map & (1ul << bit))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#940: FILE: arch/i386/kernel/smpboot.c:1088:
+		if ((cpu_2_physical_apicid[cpu] == BAD_APICID) &&
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: arch/i386/kernel/smpboot.c:1089:
+		if ((cpu_2_physical_apicid[cpu] == BAD_APICID) &&
+				(logical_cpu_present_map & (1ul << bit))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#942: FILE: arch/i386/kernel/smpboot.c:1090:
+			printk("CPU #%d/0x%02X/0x%02X not responding - cannot use it.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: arch/i386/kernel/smpboot.c:1091:
+			printk("CPU #%d/0x%02X/0x%02X not responding - cannot use it.\n",
+					bit, phys_apicid, log_apicid);

CHECK:BRACES: Unbalanced braces around else statement
#945: FILE: arch/i386/kernel/smpboot.c:1093:
+		} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#971: FILE: include/asm-i386/acpi.h:142:
+extern void acpi_madt_oem_check(char *oem_id, char *oem_table_id);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1027: FILE: include/asm-i386/apicdef.h:14:
+#define			APIC_ID_MASK		(0xFF<<24)
        			            		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1028: FILE: include/asm-i386/apicdef.h:15:
+#define			GET_APIC_ID(x)		(((x)>>24)&0xFF)
        			              		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1028: FILE: include/asm-i386/apicdef.h:15:
+#define			GET_APIC_ID(x)		(((x)>>24)&0xFF)
        			              		          ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1130: FILE: include/asm-i386/smp.h:37:
+extern volatile u8 cpu_2_physical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1131: FILE: include/asm-i386/smp.h:38:
+extern volatile u8 physical_apicid_2_cpu[MAX_APICID];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1132: FILE: include/asm-i386/smp.h:39:
+extern volatile u8 cpu_2_logical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1133: FILE: include/asm-i386/smp.h:40:
+extern volatile u8 logical_apicid_2_cpu[MAX_APICID];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1198: FILE: include/asm-i386/smp.h:91:
+extern void smp_cluster_apic_check(void);	/* cluster mode test */

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1245: FILE: include/asm-i386/smpboot.h:8:
+#define TRAMPOLINE_LOW phys_to_virt(clustered_apic_numaq?0x8:0x467)
                                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1245: FILE: include/asm-i386/smpboot.h:8:
+#define TRAMPOLINE_LOW phys_to_virt(clustered_apic_numaq?0x8:0x467)
                                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1246: FILE: include/asm-i386/smpboot.h:9:
+#define TRAMPOLINE_HIGH phys_to_virt(clustered_apic_numaq?0xa:0x469)
                                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1246: FILE: include/asm-i386/smpboot.h:9:
+#define TRAMPOLINE_HIGH phys_to_virt(clustered_apic_numaq?0xa:0x469)
                                                              ^

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#1258: FILE: include/asm-i386/smpboot.h:21:
+#define xapic_physical_to_logical_apicid(phys_apic) ((1ul << ((phys_apic) & 0x3)) | ((phys_apic) & APIC_DEST_CLUSTER_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'phys_apic' - possible side-effects?
#1258: FILE: include/asm-i386/smpboot.h:21:
+#define xapic_physical_to_logical_apicid(phys_apic) ((1ul << ((phys_apic) & 0x3)) | ((phys_apic) & APIC_DEST_CLUSTER_MASK))

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#1273: FILE: include/asm-i386/smpboot.h:30:
+#define apicid_to_phys_cpu_present(apicid)	(clustered_apic_mode ? (1ul << ((((apicid) >> 4) << 2) | ((apicid) & 0x3))) : (1ul << (apicid)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'apicid' - possible side-effects?
#1273: FILE: include/asm-i386/smpboot.h:30:
+#define apicid_to_phys_cpu_present(apicid)	(clustered_apic_mode ? (1ul << ((((apicid) >> 4) << 2) | ((apicid) & 0x3))) : (1ul << (apicid)))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1300: FILE: include/asm-i386/smpboot.h:35:
+extern volatile u8 cpu_2_logical_apicid[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1301: FILE: include/asm-i386/smpboot.h:36:
+extern volatile u8 cpu_2_physical_apicid[];

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1303: FILE: include/asm-i386/smpboot.h:38:
+#define cpu_to_logical_apicid(cpu)	(int)cpu_2_logical_apicid[cpu]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1304: FILE: include/asm-i386/smpboot.h:39:
+#define cpu_to_physical_apicid(cpu)	(int)cpu_2_physical_apicid[cpu]

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000432995.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 30 warnings, 27 checks, 1152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000432995.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
