WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#69: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#	           ChangeSet	1.342   -> 1.343

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#	include/linux/pagemap.h	1.15    -> 1.16

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#	include/linux/mmzone.h	1.6     -> 1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	include/asm-sparc/pgtable.h	1.5.1.1 -> 1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#	include/asm-cris/pgtable.h	1.6.1.1 -> 1.8

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#	include/asm-sparc64/pgtable.h	1.15.1.1 -> 1.17

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#	         fs/buffer.c	1.61    -> 1.62

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#	  include/linux/mm.h	1.33    -> 1.34

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#	        mm/highmem.c	1.24    -> 1.25

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#	     mm/page_alloc.c	1.41    -> 1.42

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#	         mm/vmscan.c	1.55    -> 1.56

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#	drivers/char/agp/agpgart_be.c	1.21    -> 1.22

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#	include/asm-ppc/pgtable.h	1.9     -> 1.10

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#	include/asm-s390/pgtable.h	1.5.1.1 -> 1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
#	include/asm-arm/pgtable.h	1.7     -> 1.8

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#	include/asm-mips/pgtable.h	1.4.1.1 -> 1.6

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#	include/asm-alpha/pgtable.h	1.8     -> 1.9

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
#	include/asm-ia64/pgtable.h	1.6     -> 1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#	include/asm-parisc/pgtable.h	1.3     -> 1.4

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
#	        mm/filemap.c	1.56    -> 1.57

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
#	drivers/char/drm/i810_dma.c	1.6     -> 1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
#	include/asm-s390x/pgtable.h	1.5.1.1 -> 1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
#	include/asm-mips64/pgtable.h	1.4.1.1 -> 1.6

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
#	include/asm-sh/pgtable.h	1.8.1.1 -> 1.10

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
#	         mm/Makefile	1.5     -> 1.6

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#	include/asm-i386/pgtable.h	1.5.1.1 -> 1.7

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
# 02/02/16	riel@imladris.surriel.com	1.343

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
# Merge

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#105: 
--- a/drivers/char/agp/agpgart_be.c	Sat Feb 16 11:49:00 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LINE_SPACING: Missing a blank line after declarations
#142: FILE: drivers/char/drm/i810_dma.c:299:
+		struct page *p = virt_to_page(page);
+		atomic_dec(p);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#159: FILE: fs/buffer.c:2015:
+ * asynchronously: you need to check page->locked and page->uptodate.
                                                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#170: FILE: fs/buffer.c:2073:
+ * and page->uptodate.
              ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageReserved>
#415: FILE: include/linux/mm.h:316:
+#define __SetPageReserved(page)	__set_bit(PG_reserved, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required before the open parenthesis '('
#423: FILE: include/linux/mm.h:324:
+#define set_page_zone(page, zone_num) do { (page)->zone = (zone_num); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#423: FILE: include/linux/mm.h:324:
+#define set_page_zone(page, zone_num) do { (page)->zone = (zone_num); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#433: FILE: include/linux/mm.h:334:
+#define set_page_address(page, address)			\
+	do {						\
+		(page)->virtual = (address);		\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#436: FILE: include/linux/mm.h:337:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#439: FILE: include/linux/mm.h:340:
+#define set_page_address(page, address)  do { } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#452: FILE: include/linux/mm.h:353:
+#define page_address(page)						\
+	__va( (((page) - page_zone(page)->zone_mem_map) << PAGE_SHIFT)	\
+			+ page_zone(page)->zone_start_paddr)

ERROR:SPACING: space prohibited after that open parenthesis '('
#453: FILE: include/linux/mm.h:354:
+	__va( (((page) - page_zone(page)->zone_mem_map) << PAGE_SHIFT)	\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#504: FILE: include/linux/mmzone.h:41:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#515: FILE: include/linux/mmzone.h:75:
+^I * ^I^I^I^I== BITS_PER_LONG (1 << wait_table_bits)$

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#536: FILE: include/linux/mmzone.h:96:
+	wait_queue_head_t	* wait_table;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: include/linux/pagemap.h:100:
+extern void wake_up_page(struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#651: FILE: mm/filemap.c:826:
+	if (waitqueue_active(waitqueue))

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#695: FILE: mm/highmem.c:381:
+		if ((page - page_zone(page)->zone_mem_map) + (page_zone(page)->zone_start_paddr >> PAGE_SHIFT) < pfn)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#725: FILE: mm/page_alloc.c:34:
+zone_t *zone_table[MAX_NR_ZONES*MAX_NR_NODES];
                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#736: FILE: mm/page_alloc.c:65:
+#define BAD_RANGE(zone, page)						\
+(									\
+	(((page) - mem_map) >= ((zone)->zone_start_mapnr+(zone)->size))	\
+	|| (((page) - mem_map) < (zone)->zone_start_mapnr)		\
+	|| ((zone) != page_zone(page))					\
+)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#736: FILE: mm/page_alloc.c:65:
+#define BAD_RANGE(zone, page)						\
+(									\
+	(((page) - mem_map) >= ((zone)->zone_start_mapnr+(zone)->size))	\
+	|| (((page) - mem_map) < (zone)->zone_start_mapnr)		\
+	|| ((zone) != page_zone(page))					\
+)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#738: FILE: mm/page_alloc.c:67:
+	(((page) - mem_map) >= ((zone)->zone_start_mapnr+(zone)->size))	\
 	                                                ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#739: FILE: mm/page_alloc.c:68:
+	(((page) - mem_map) >= ((zone)->zone_start_mapnr+(zone)->size))	\
+	|| (((page) - mem_map) < (zone)->zone_start_mapnr)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#740: FILE: mm/page_alloc.c:69:
+	|| (((page) - mem_map) < (zone)->zone_start_mapnr)		\
+	|| ((zone) != page_zone(page))					\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#780: FILE: mm/page_alloc.c:148:
+^I^I * ^I-mask = 1+~mask$

ERROR:SPACING: space required before the open parenthesis '('
#816: FILE: mm/page_alloc.c:676:
+	while(size < pages)

ERROR:SPACING: space required before the open parenthesis '('
#884: FILE: mm/page_alloc.c:778:
+		for(i = 0; i < zone->wait_table_size; ++i)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000475862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 47 warnings, 10 checks, 704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000475862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
