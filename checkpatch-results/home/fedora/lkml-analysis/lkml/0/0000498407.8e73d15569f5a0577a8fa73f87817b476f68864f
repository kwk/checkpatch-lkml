WARNING:TYPO_SPELLING: 'Isnt' may be misspelled - perhaps 'Isn't'?
#24: 
search in the cache_sizes array. Isnt it better to speed that up by doing a
                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: slab.c:1537:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: slab.c:1539:
+^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#74: FILE: slab.c:1612:
+#define CACHE_ENTRY(p, f) (f & GFP_DMA ? cache_sizes[p].cs_dmacachep : cache_sizes[p].cs_cachep)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#74: FILE: slab.c:1612:
+#define CACHE_ENTRY(p, f) (f & GFP_DMA ? cache_sizes[p].cs_dmacachep : cache_sizes[p].cs_cachep)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#76: FILE: slab.c:1614:
+#define CACHE_ENTRY(p, f) (f & ? cache_sizes[p-1]. : cache_sizes[p-1].)
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#76: FILE: slab.c:1614:
+#define CACHE_ENTRY(p, f) (f & ? cache_sizes[p-1]. : cache_sizes[p-1].)
                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#76: FILE: slab.c:1614:
+#define CACHE_ENTRY(p, f) (f & ? cache_sizes[p-1]. : cache_sizes[p-1].)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#76: FILE: slab.c:1614:
+#define CACHE_ENTRY(p, f) (f & ? cache_sizes[p-1]. : cache_sizes[p-1].)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#76: FILE: slab.c:1614:
+#define CACHE_ENTRY(p, f) (f & ? cache_sizes[p-1]. : cache_sizes[p-1].)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: slab.c:1617:
+kmem_cache_t * kmem_find_general_cachep (size_t size, int gfpflag)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#87: FILE: slab.c:1617:
+kmem_cache_t * kmem_find_general_cachep (size_t size, int gfpflag)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#89: FILE: slab.c:1619:
+	if (size <= 512) {
+	  if (size <= 128) {

WARNING:TABSTOP: Statements should start on a tabstop
#90: FILE: slab.c:1620:
+	  if (size <= 128) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#90: FILE: slab.c:1620:
+	  if (size <= 128) {
[...]
+	    if (size <= 64) {

WARNING:TABSTOP: Statements should start on a tabstop
#93: FILE: slab.c:1623:
+	    if (size <= 64) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#93: FILE: slab.c:1623:
+	    if (size <= 64) {
[...]
+	      if (size <= 32) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#93: FILE: slab.c:1623:
+	    if (size <= 64) {
[...]
+	    } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#95: FILE: slab.c:1625:
+	      if (size <= 32) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 17)
#95: FILE: slab.c:1625:
+	      if (size <= 32) {
+	         return CACHE_ENTRY(0, gfpflag); // 32

WARNING:BRACES: braces {} are not necessary for single statement blocks
#95: FILE: slab.c:1625:
+	      if (size <= 32) {
+	         return CACHE_ENTRY(0, gfpflag); // 32
+	      }

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: slab.c:1626:
+^I         return CACHE_ENTRY(0, gfpflag); // 32$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#96: FILE: slab.c:1626:
+	         return CACHE_ENTRY(0, gfpflag); // 32

WARNING:TABSTOP: Statements should start on a tabstop
#97: FILE: slab.c:1627:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#99: FILE: slab.c:1629:
+	      return CACHE_ENTRY(1, gfpflag); // 64

WARNING:TABSTOP: Statements should start on a tabstop
#100: FILE: slab.c:1630:
+	    } else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#100: FILE: slab.c:1630:
+	    } else
+	      return CACHE_ENTRY(2, gfpflag); // 128

CHECK:BRACES: Unbalanced braces around else statement
#100: FILE: slab.c:1630:
+	    } else

WARNING:TABSTOP: Statements should start on a tabstop
#101: FILE: slab.c:1631:
+	      return CACHE_ENTRY(2, gfpflag); // 128

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: slab.c:1632:
+^I  } else { $

WARNING:TABSTOP: Statements should start on a tabstop
#102: FILE: slab.c:1632:
+	  } else { 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#102: FILE: slab.c:1632:
+	  } else { 
+	    if (size <= 256)

WARNING:TABSTOP: Statements should start on a tabstop
#103: FILE: slab.c:1633:
+	    if (size <= 256)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#103: FILE: slab.c:1633:
+	    if (size <= 256)
+	      return CACHE_ENTRY(3, gfpflag); // 256

WARNING:TABSTOP: Statements should start on a tabstop
#104: FILE: slab.c:1634:
+	      return CACHE_ENTRY(3, gfpflag); // 256

WARNING:TABSTOP: Statements should start on a tabstop
#105: FILE: slab.c:1635:
+	    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#105: FILE: slab.c:1635:
+	    else
+	      return CACHE_ENTRY(4, gfpflag); // 512

WARNING:TABSTOP: Statements should start on a tabstop
#106: FILE: slab.c:1636:
+	      return CACHE_ENTRY(4, gfpflag); // 512

WARNING:TABSTOP: Statements should start on a tabstop
#107: FILE: slab.c:1637:
+	  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#110: FILE: slab.c:1639:
+	if (size <= 8192) {
+	  if (size <= 2048) {

WARNING:TABSTOP: Statements should start on a tabstop
#111: FILE: slab.c:1640:
+	  if (size <= 2048) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#111: FILE: slab.c:1640:
+	  if (size <= 2048) {
+	    if (size <= 1024)

WARNING:TABSTOP: Statements should start on a tabstop
#112: FILE: slab.c:1641:
+	    if (size <= 1024)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#112: FILE: slab.c:1641:
+	    if (size <= 1024)
+	      return CACHE_ENTRY(5, gfpflag); // 1024

WARNING:TABSTOP: Statements should start on a tabstop
#113: FILE: slab.c:1642:
+	      return CACHE_ENTRY(5, gfpflag); // 1024

WARNING:TABSTOP: Statements should start on a tabstop
#114: FILE: slab.c:1643:
+	    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#114: FILE: slab.c:1643:
+	    else
+	      return CACHE_ENTRY(6, gfpflag); // 2048

WARNING:TABSTOP: Statements should start on a tabstop
#115: FILE: slab.c:1644:
+	      return CACHE_ENTRY(6, gfpflag); // 2048

WARNING:TABSTOP: Statements should start on a tabstop
#116: FILE: slab.c:1645:
+	  } else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#116: FILE: slab.c:1645:
+	  } else {
+	    if (size <= 4096)

WARNING:TABSTOP: Statements should start on a tabstop
#117: FILE: slab.c:1646:
+	    if (size <= 4096)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#117: FILE: slab.c:1646:
+	    if (size <= 4096)
+	      return CACHE_ENTRY(7, gfpflag); // 4096

WARNING:TABSTOP: Statements should start on a tabstop
#118: FILE: slab.c:1647:
+	      return CACHE_ENTRY(7, gfpflag); // 4096

WARNING:TABSTOP: Statements should start on a tabstop
#119: FILE: slab.c:1648:
+	    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#119: FILE: slab.c:1648:
+	    else
+	      return CACHE_ENTRY(8, gfpflag); // 8192

WARNING:TABSTOP: Statements should start on a tabstop
#120: FILE: slab.c:1649:
+	      return CACHE_ENTRY(8, gfpflag); // 8192

WARNING:TABSTOP: Statements should start on a tabstop
#121: FILE: slab.c:1650:
+	  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#123: FILE: slab.c:1652:
+	if (size <= 131072) {
+	  if (size <= 32768) {

WARNING:TABSTOP: Statements should start on a tabstop
#124: FILE: slab.c:1653:
+	  if (size <= 32768) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#124: FILE: slab.c:1653:
+	  if (size <= 32768) {
+	    if (size <= 16384)

WARNING:TABSTOP: Statements should start on a tabstop
#125: FILE: slab.c:1654:
+	    if (size <= 16384)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#125: FILE: slab.c:1654:
+	    if (size <= 16384)
+	      return CACHE_ENTRY(9, gfpflag); // 16384

WARNING:TABSTOP: Statements should start on a tabstop
#126: FILE: slab.c:1655:
+	      return CACHE_ENTRY(9, gfpflag); // 16384

WARNING:TABSTOP: Statements should start on a tabstop
#127: FILE: slab.c:1656:
+	    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#127: FILE: slab.c:1656:
+	    else
+	      return CACHE_ENTRY(10, gfpflag); // 32768

WARNING:TABSTOP: Statements should start on a tabstop
#128: FILE: slab.c:1657:
+	      return CACHE_ENTRY(10, gfpflag); // 32768

WARNING:TABSTOP: Statements should start on a tabstop
#129: FILE: slab.c:1658:
+	  } else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#129: FILE: slab.c:1658:
+	  } else {
+	    if (size <= 65536)

WARNING:TABSTOP: Statements should start on a tabstop
#130: FILE: slab.c:1659:
+	    if (size <= 65536)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#130: FILE: slab.c:1659:
+	    if (size <= 65536)
+	      return CACHE_ENTRY(11, gfpflag); // 65536

WARNING:TABSTOP: Statements should start on a tabstop
#131: FILE: slab.c:1660:
+	      return CACHE_ENTRY(11, gfpflag); // 65536

WARNING:TABSTOP: Statements should start on a tabstop
#132: FILE: slab.c:1661:
+	    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#132: FILE: slab.c:1661:
+	    else
+	      return CACHE_ENTRY(12, gfpflag); // 131072

WARNING:TABSTOP: Statements should start on a tabstop
#133: FILE: slab.c:1662:
+	      return CACHE_ENTRY(12, gfpflag); // 131072

WARNING:TABSTOP: Statements should start on a tabstop
#134: FILE: slab.c:1663:
+	  }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: slab.c:1665:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: slab.c:1665:
+  $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000498407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 63 warnings, 9 checks, 99 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000498407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
