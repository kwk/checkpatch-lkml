WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
UML has a need to free dirty pages in the middle of a file (which is described

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: drivers/char/mem.c:667:
+extern struct file_operations anon_file_operations;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#96: FILE: drivers/char/mem.c:667:
+extern struct file_operations anon_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: drivers/char/mem.c:699:
+^I^I        filp->f_op = &anon_file_operations;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#116: FILE: drivers/char/mem.c:727:
+	{9, "urandom", S_IRUGO | S_IWUSR,           &urandom_fops},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#117: FILE: drivers/char/mem.c:728:
+	{10, "anon", S_IRUGO | S_IWUSR,             &anon_file_operations},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: include/linux/fs.h:867:
+^Ivoid (*munmap) (struct file *, struct vm_area_struct *, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#128: FILE: include/linux/fs.h:867:
+	void (*munmap) (struct file *, struct vm_area_struct *, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#128: FILE: include/linux/fs.h:867:
+	void (*munmap) (struct file *, struct vm_area_struct *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#128: FILE: include/linux/fs.h:867:
+	void (*munmap) (struct file *, struct vm_area_struct *, 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#141: FILE: include/linux/shmem_fs.h:26:
+^Ivoid ^I^I      **map_indirect;$

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#153: FILE: Makefile:4:
+EXTRAVERSION = -devanon
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpnt->vm_file != NULL'
#164: FILE: mm/mmap.c:998:
+		if((mpnt->vm_file != NULL) && (mpnt->vm_file->f_op != NULL) &&
+		   (mpnt->vm_file->f_op->munmap != NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpnt->vm_file->f_op != NULL'
#164: FILE: mm/mmap.c:998:
+		if((mpnt->vm_file != NULL) && (mpnt->vm_file->f_op != NULL) &&
+		   (mpnt->vm_file->f_op->munmap != NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpnt->vm_file->f_op->munmap != NULL'
#164: FILE: mm/mmap.c:998:
+		if((mpnt->vm_file != NULL) && (mpnt->vm_file->f_op != NULL) &&
+		   (mpnt->vm_file->f_op->munmap != NULL))

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: mm/mmap.c:998:
+		if((mpnt->vm_file != NULL) && (mpnt->vm_file->f_op != NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mpnt->vm_file"
#164: FILE: mm/mmap.c:998:
+		if((mpnt->vm_file != NULL) && (mpnt->vm_file->f_op != NULL) &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mpnt->vm_file->f_op"
#164: FILE: mm/mmap.c:998:
+		if((mpnt->vm_file != NULL) && (mpnt->vm_file->f_op != NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mpnt->vm_file->f_op->munmap"
#165: FILE: mm/mmap.c:999:
+		   (mpnt->vm_file->f_op->munmap != NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: mm/mmap.c:1000:
+^I^I        mpnt->vm_file->f_op->munmap(mpnt->vm_file, mpnt, st, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: mm/mmap.c:1000:
+^I^I        mpnt->vm_file->f_op->munmap(mpnt->vm_file, mpnt, st, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: mm/shmem.c:138:
+		return direct+index;
 		             ^

CHECK:SPACING: No space is necessary after a cast
#193: FILE: mm/shmem.c:141:
+			*indirect = (void **) *page;

CHECK:SPACING: No space is necessary after a cast
#211: FILE: mm/shmem.c:173:
+	return (unsigned long **) *dir + offset;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#214: FILE: mm/shmem.c:176:
+static swp_entry_t *shmem_swp_entry(struct shmem_inode_info *info, unsigned long index, unsigned long *page)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: mm/shmem.c:178:
+^Ireturn((swp_entry_t *) shmem_block(index, page, $

CHECK:SPACING: No space is necessary after a cast
#216: FILE: mm/shmem.c:178:
+	return((swp_entry_t *) shmem_block(index, page, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: mm/shmem.c:179:
+^I^I^I^I^I   (unsigned long *) info->i_direct, $

CHECK:SPACING: No space is necessary after a cast
#217: FILE: mm/shmem.c:179:
+					   (unsigned long *) info->i_direct, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: mm/shmem.c:183:
+static unsigned long *shmem_map_count(struct shmem_inode_info *info, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: mm/shmem.c:186:
+^Ireturn((unsigned long *) shmem_block(index, page, info->map_direct, $

CHECK:SPACING: No space is necessary after a cast
#224: FILE: mm/shmem.c:186:
+	return((unsigned long *) shmem_block(index, page, info->map_direct, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: mm/shmem.c:1742:
+static int adjust_map_counts(struct shmem_inode_info *info, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: mm/shmem.c:1743:
+^I^I^I     unsigned long offset, unsigned long len, $

ERROR:SPACING: space required before the open brace '{'
#249: FILE: mm/shmem.c:1750:
+	for(i = 0; i < len; i++){

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: mm/shmem.c:1750:
+	for(i = 0; i < len; i++){

ERROR:SPACING: space required before the open brace '{'
#252: FILE: mm/shmem.c:1753:
+		while((count = shmem_map_count(info, idx, &page)) == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#252: FILE: mm/shmem.c:1753:
+		while((count = shmem_map_count(info, idx, &page)) == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: mm/shmem.c:1756:
+			if(page == 0)

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: mm/shmem.c:1761:
+		if(page != 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#266: FILE: mm/shmem.c:1767:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#271: FILE: mm/shmem.c:1772:
+struct file_operations anon_file_operations;

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: mm/shmem.c:1776:
+        struct file *new;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: mm/shmem.c:1776:
+        struct file *new;$

ERROR:SPACING: space required before the open brace '{'
#280: FILE: mm/shmem.c:1781:
+	if(file->private_data == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#280: FILE: mm/shmem.c:1781:
+	if(file->private_data == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#280: FILE: mm/shmem.c:1781:
+	if(file->private_data == NULL){

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: mm/shmem.c:1782:
+^I        new = shmem_file_setup("dev/anon", size);$

ERROR:SPACING: space required before the open parenthesis '('
#282: FILE: mm/shmem.c:1783:
+		if(IS_ERR(new))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: mm/shmem.c:1789:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#296: FILE: mm/shmem.c:1797:
+	if(err)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: mm/shmem.c:1804:
+static void anon_munmap(struct file *file, struct vm_area_struct *vma, $

ERROR:SPACING: space required before the open brace '{'
#315: FILE: mm/shmem.c:1816:
+	for(addr = start; addr < start + len; addr += PAGE_SIZE){

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: mm/shmem.c:1816:
+	for(addr = start; addr < start + len; addr += PAGE_SIZE){

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: mm/shmem.c:1817:
+^I        idx = ((addr - vma->vm_start) >> PAGE_SHIFT) + vma->vm_pgoff;$

ERROR:SPACING: space required before the open parenthesis '('
#319: FILE: mm/shmem.c:1820:
+		if(count == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!count"
#319: FILE: mm/shmem.c:1820:
+		if(count == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: mm/shmem.c:1824:
+		if(*count > 0)

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: mm/shmem.c:1828:
+		if(pgd_none(*pgd))

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: mm/shmem.c:1832:
+		if(pmd_none(*pmd))

ERROR:SPACING: space required before the open parenthesis '('
#335: FILE: mm/shmem.c:1836:
+		if(!pte_present(*pte))

CHECK:CAMELCASE: Avoid CamelCase: <LockPage>
#342: FILE: mm/shmem.c:1843:
+		LockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#347: FILE: mm/shmem.c:1848:
+		UnlockPage(page);

ERROR:SPACING: space required before the open parenthesis '('
#350: FILE: mm/shmem.c:1851:
+		if(entry != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#350: FILE: mm/shmem.c:1851:
+		if(entry != NULL)

ERROR:SPACING: space required before the open parenthesis '('
#359: FILE: mm/shmem.c:1860:
+	if(file->private_data != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#359: FILE: mm/shmem.c:1860:
+	if(file->private_data != NULL)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#361: FILE: mm/shmem.c:1862:
+	return(0);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#364: FILE: mm/shmem.c:1865:
+struct file_operations anon_file_operations = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#366: FILE: mm/shmem.c:1867:
+^I.munmap ^I= anon_munmap,$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311941.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 15 warnings, 18 checks, 250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311941.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
