WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> tested in user space and kernel space.  Manfred seems to like the fact that

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: mm/percpu.c:1:
+/* Routines to do per-cpu allocation.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#183: FILE: mm/percpu.c:2:
+/* Routines to do per-cpu allocation.
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: mm/percpu.c:67:
+ * continuous allocation. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#253: FILE: mm/percpu.c:72:
+	ret = kmalloc(size * NR_CPUS, GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#255: FILE: mm/percpu.c:74:
+		ret = vmalloc(size * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#261: FILE: mm/percpu.c:80:
+	return alloc_bootmem(*size * NR_CPUS);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#275: FILE: mm/percpu.c:94:
+	b->size = kmalloc(sizeof(b->size[0]) * b->num_allocated, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: mm/percpu.c:111:
+	reserved_size = ALIGN(__per_cpu_end - __per_cpu_start,SMP_CACHE_BYTES);
 	                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#298: FILE: mm/percpu.c:117:
+	 * (eg. large pages). */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#300: FILE: mm/percpu.c:119:
+	percpu_core.start = ptr = arch_alloc_percpu_bootmem(&percpu_size);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: mm/percpu.c:120:
+	BUG_ON(percpu_size < reserved_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#302: FILE: mm/percpu.c:121:
+	for (i = 0; i < NR_CPUS; i++, ptr += percpu_size) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#312: FILE: mm/percpu.c:131:
+	percpu_core.size = kmalloc(sizeof(percpu_core.size[0])
+				   * percpu_core.num_allocated,
+				   GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#346: FILE: mm/percpu.c:165:
+		int *new = kmalloc(sizeof(new[0]) * pb->num_allocated*2,
 		                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#351: FILE: mm/percpu.c:170:
+		memcpy(new, pb->size, sizeof(new[0])*pb->num_allocated);
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#358: FILE: mm/percpu.c:177:
+	memmove(&pb->size[i+1], &pb->size[i],
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#362: FILE: mm/percpu.c:181:
+	pb->size[i+1] -= size;
 	          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#381: FILE: mm/percpu.c:200:
+	BUG_ON(align > SMP_CACHE_BYTES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#387: FILE: mm/percpu.c:206:
+		BUG_ON(i == 0 && extra != 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#393: FILE: mm/percpu.c:212:
+		if (pb->size[i-1] < 0)
 		              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#394: FILE: mm/percpu.c:213:
+			pb->size[i-1] -= extra;
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#396: FILE: mm/percpu.c:215:
+			pb->size[i-1] += extra;
 			          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: mm/percpu.c:237:
+		BUG_ON(i == pb->num_used);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#422: FILE: mm/percpu.c:241:
+	if (i > 0 && pb->size[i-1] >= 0) {
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#423: FILE: mm/percpu.c:242:
+		pb->size[i-1] += pb->size[i];
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#425: FILE: mm/percpu.c:244:
+		memmove(&pb->size[i], &pb->size[i+1],
 		                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#430: FILE: mm/percpu.c:249:
+	if (i+1 < pb->num_used && pb->size[i+1] >= 0) {
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#430: FILE: mm/percpu.c:249:
+	if (i+1 < pb->num_used && pb->size[i+1] >= 0) {
 	                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: mm/percpu.c:250:
+		pb->size[i] += pb->size[i+1];
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#433: FILE: mm/percpu.c:252:
+		memmove(&pb->size[i+1], &pb->size[i+2],
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#433: FILE: mm/percpu.c:252:
+		memmove(&pb->size[i+1], &pb->size[i+2],
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#434: FILE: mm/percpu.c:253:
+			(pb->num_used - (i+1)) * sizeof(pb->size[0]));
 			                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#445: FILE: mm/percpu.c:264:
+	printk(KERN_WARNING "Could not allocate %lu bytes percpu data\n",size);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#445: FILE: mm/percpu.c:264:
+	printk(KERN_WARNING "Could not allocate %lu bytes percpu data\n",size);
 	                                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: mm/percpu.c:287:
+^I^Iif (ret) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: mm/percpu.c:304:
+	BUG_ON(!ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: mm/percpu.c:330:
+	BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: include/linux/percpu.h:26:
+ * to use get_cpu_ptr... $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#750: FILE: include/linux/percpu.h:28:
+#define per_cpu_ptr(ptr, cpu)						\
+        ((__typeof__(ptr))((void *)ptr + __per_cpu_offset[(cpu)]))

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: include/linux/percpu.h:29:
+        ((__typeof__(ptr))((void *)ptr + __per_cpu_offset[(cpu)]))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#751: FILE: include/linux/percpu.h:29:
+        ((__typeof__(ptr))((void *)ptr + __per_cpu_offset[(cpu)]))$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: include/linux/percpu.h:31:
+extern void *__alloc_percpu(unsigned long size, unsigned long align);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#756: FILE: include/linux/percpu.h:33:
+extern void *percpu_modalloc(unsigned long size, unsigned long align);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#757: FILE: include/linux/percpu.h:34:
+extern void percpu_modfree(void *freeme);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: include/linux/percpu.h:56:
+^I$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#882: FILE: include/asm-generic/percpu.h:13:
+#define __get_cpu_ptr(ptr) \
+	((__typeof__(ptr))((void *)ptr + __per_cpu_offset[smp_processor_id()]))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 19 warnings, 22 checks, 746 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
