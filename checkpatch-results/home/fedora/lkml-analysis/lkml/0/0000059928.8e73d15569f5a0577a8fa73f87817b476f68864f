WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: arch/frv/kernel/asm-offsets.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#65: FILE: arch/frv/kernel/asm-offsets.c:12:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/thread_info.h> instead of <asm/thread_info.h>
#66: FILE: arch/frv/kernel/asm-offsets.c:13:
+#include <asm/thread_info.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#69: FILE: arch/frv/kernel/asm-offsets.c:16:
+#define DEFINE(sym, val) \
+        asm volatile("\n->" #sym " %0 " #val : : "i" (val))

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/frv/kernel/asm-offsets.c:17:
+        asm volatile("\n->" #sym " %0 " #val : : "i" (val))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/frv/kernel/asm-offsets.c:17:
+        asm volatile("\n->" #sym " %0 " #val : : "i" (val))$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#72: FILE: arch/frv/kernel/asm-offsets.c:19:
+#define DEF_PTREG(sym, reg) \
+        asm volatile("\n->" #sym " %0 offsetof(struct pt_regs, " #reg ")" \
+		     : : "i" (offsetof(struct pt_regs, reg)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: arch/frv/kernel/asm-offsets.c:20:
+        asm volatile("\n->" #sym " %0 offsetof(struct pt_regs, " #reg ")" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/frv/kernel/asm-offsets.c:20:
+        asm volatile("\n->" #sym " %0 offsetof(struct pt_regs, " #reg ")" \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#76: FILE: arch/frv/kernel/asm-offsets.c:23:
+#define DEF_IREG(sym, reg) \
+        asm volatile("\n->" #sym " %0 offsetof(struct user_context, " #reg ")" \
+		     : : "i" (offsetof(struct user_context, reg)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: arch/frv/kernel/asm-offsets.c:24:
+        asm volatile("\n->" #sym " %0 offsetof(struct user_context, " #reg ")" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: arch/frv/kernel/asm-offsets.c:24:
+        asm volatile("\n->" #sym " %0 offsetof(struct user_context, " #reg ")" \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#80: FILE: arch/frv/kernel/asm-offsets.c:27:
+#define DEF_FREG(sym, reg) \
+        asm volatile("\n->" #sym " %0 offsetof(struct user_context, " #reg ")" \
+		     : : "i" (offsetof(struct user_context, reg)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: arch/frv/kernel/asm-offsets.c:28:
+        asm volatile("\n->" #sym " %0 offsetof(struct user_context, " #reg ")" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: arch/frv/kernel/asm-offsets.c:28:
+        asm volatile("\n->" #sym " %0 offsetof(struct user_context, " #reg ")" \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#84: FILE: arch/frv/kernel/asm-offsets.c:31:
+#define DEF_0REG(sym, reg) \
+        asm volatile("\n->" #sym " %0 offsetof(struct frv_frame0, " #reg ")" \
+		     : : "i" (offsetof(struct frv_frame0, reg)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: arch/frv/kernel/asm-offsets.c:32:
+        asm volatile("\n->" #sym " %0 offsetof(struct frv_frame0, " #reg ")" \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: arch/frv/kernel/asm-offsets.c:32:
+        asm volatile("\n->" #sym " %0 offsetof(struct frv_frame0, " #reg ")" \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#88: FILE: arch/frv/kernel/asm-offsets.c:35:
+#define BLANK() asm volatile("\n->" : : )

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#90: FILE: arch/frv/kernel/asm-offsets.c:37:
+#define OFFSET(sym, str, mem) \
+	DEFINE(sym, offsetof(struct str, mem));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#468: FILE: arch/frv/kernel/gdb-stub.c:1209:
+	reg = (unsigned long *) __debug_frame;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#470: FILE: arch/frv/kernel/gdb-stub.c:1211:
+		printk("%s %08lx", regnames[loop + 0], reg[loop + 0]);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#590: FILE: arch/frv/kernel/gdb-stub.c:1625:
+			ptr = mem2hex(&__debug_status.brr ,   ptr, 4, 0);
 			                                  ^

CHECK:SPACING: No space is necessary after a cast
#726: FILE: arch/frv/kernel/gdb-stub.c:1826:
+				*(uint32_t *) &__debug_user_context->f.accg[0] = temp;

CHECK:SPACING: No space is necessary after a cast
#730: FILE: arch/frv/kernel/gdb-stub.c:1829:
+				*(uint32_t *) &__debug_user_context->f.accg[4] = temp;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#849: FILE: arch/frv/kernel/traps.c:288:
+	printk("Frame: @%08lx [%s]\n",

CHECK:SPACING: No space is necessary after a cast
#850: FILE: arch/frv/kernel/traps.c:289:
+	       (unsigned long) regs,

CHECK:SPACING: No space is necessary after a cast
#856: FILE: arch/frv/kernel/traps.c:292:
+	reg = (unsigned long *) regs;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#858: FILE: arch/frv/kernel/traps.c:294:
+		printk("%s %08lx", regnames[loop + 0], reg[loop + 0]);

CHECK:SPACING: No space is necessary after a cast
#881: FILE: arch/frv/kernel/traps.c:340:
+	reg = (unsigned long *) frame;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#883: FILE: arch/frv/kernel/traps.c:342:
+		printk("%s %08lx", regnames[loop + 0], reg[loop + 0]);

CHECK:SPACING: No space is necessary after a cast
#916: FILE: include/asm-frv/gdb-stub.h:128:
+#define __debug_reg(X)		((unsigned long *) ((unsigned long) &__debug_frame0 + (X)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#978: FILE: include/asm-frv/registers.h:60:
+#define __OFFSET(X,N)	((X)+(N)*4)
                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#978: FILE: include/asm-frv/registers.h:60:
+#define __OFFSET(X,N)	((X)+(N)*4)
                      	    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#978: FILE: include/asm-frv/registers.h:60:
+#define __OFFSET(X,N)	((X)+(N)*4)
                      	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#983: FILE: include/asm-frv/registers.h:63:
+#define __OFFSET(X,N)	((X)+(N)*4)
                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#983: FILE: include/asm-frv/registers.h:63:
+#define __OFFSET(X,N)	((X)+(N)*4)
                      	    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#983: FILE: include/asm-frv/registers.h:63:
+#define __OFFSET(X,N)	((X)+(N)*4)
                      	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#984: FILE: include/asm-frv/registers.h:64:
+#define __OFFSETC(X,N)	((X)+(N))
                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#984: FILE: include/asm-frv/registers.h:64:
+#define __OFFSETC(X,N)	((X)+(N))
                       	    ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1037: FILE: include/asm-frv/registers.h:148:
+	unsigned long		ibar[4] __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1038: FILE: include/asm-frv/registers.h:149:
+	unsigned long		dbar[4] __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1039: FILE: include/asm-frv/registers.h:150:
+	unsigned long		dbdr[4][4] __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1040: FILE: include/asm-frv/registers.h:151:
+	unsigned long		dbmr[4][4] __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(32) over __attribute__((aligned(32)))
#1066: FILE: include/asm-frv/registers.h:217:
+} __attribute__((aligned(32)));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000059928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 17 warnings, 14 checks, 999 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000059928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
