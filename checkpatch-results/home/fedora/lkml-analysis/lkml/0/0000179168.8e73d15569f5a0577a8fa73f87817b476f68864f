WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
Content-Disposition: inline; filename="patch-dynamic-tick-2.6.12-rc5-050602-1"

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#123: FILE: arch/i386/kernel/apic.c:933:
+	apic_timer_val = clocks/APIC_DIVISOR;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#143: FILE: arch/i386/kernel/apic.c:1058:
+		printk(KERN_INFO "dyn-tick: Cannot use local APIC\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: arch/i386/kernel/dyn-tick.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#206: FILE: arch/i386/kernel/dyn-tick.c:2:
+ * linux/arch/i386/kernel/dyn-tick.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#255: FILE: include/asm-i386/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#256: FILE: include/asm-i386/dyn-tick.h:2:
+ * linux/include/asm-i386/dyn-tick.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/asm-i386/dyn-tick.h:13:
+extern int dyn_tick_arch_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: include/asm-i386/dyn-tick.h:14:
+extern void disable_pit_timer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/asm-i386/dyn-tick.h:15:
+extern void reprogram_pit_timer(int jiffies_to_skip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/asm-i386/dyn-tick.h:16:
+extern void reprogram_apic_timer(unsigned int count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: include/asm-i386/dyn-tick.h:17:
+extern void replace_timer_interrupt(void * new_handler);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/asm-i386/dyn-tick.h:17:
+extern void replace_timer_interrupt(void * new_handler);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/asm-i386/dyn-tick.h:20:
+extern void reprogram_apic_timer(unsigned int count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: include/asm-i386/dyn-tick.h:28:
+				printk("%u/%li ", skipped, dyn_tick->skip);}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#282: FILE: include/asm-i386/dyn-tick.h:28:
+				printk("%u/%li ", skipped, dyn_tick->skip);}
 				                                          ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#306: FILE: arch/i386/kernel/irq.c:104:
 	} else
[...]
+	if (dyn_tick->state & (DYN_TICK_ENABLED | DYN_TICK_SKIPPING) && irq != 0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#368: FILE: arch/i386/kernel/time.c:324:
+	volatile unsigned long long now;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#373: FILE: arch/i386/kernel/time.c:329:
+			printk(".");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#375: FILE: arch/i386/kernel/time.c:331:
+			printk("%i ", irq);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#427: FILE: arch/i386/kernel/time.c:511:
+		dyn_tick->max_skip = 0xffff/LATCH;	/* PIT timer length */
 		                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#428: FILE: arch/i386/kernel/time.c:512:
+	printk(KERN_INFO "dyn-tick: Maximum ticks to skip limited to %i\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#454: FILE: arch/i386/kernel/time.c:551:
+		printk(KERN_INFO "dyn-tick: Found suitable timer: %s\n",

CHECK:BRACES: Unbalanced braces around else statement
#456: FILE: arch/i386/kernel/time.c:553:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#457: FILE: arch/i386/kernel/time.c:554:
+		printk(KERN_ERR "dyn-tick: Cannot use timer %s\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#533: FILE: arch/i386/mach-default/setup.c:95:
+void replace_timer_interrupt(void * new_handler)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#550: FILE: include/linux/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#551: FILE: include/linux/dyn-tick.h:2:
+ * linux/include/linux/dyn-tick.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#567: FILE: include/linux/dyn-tick.h:18:
+#define DYN_TICK_DEBUG		(1 << 31)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#568: FILE: include/linux/dyn-tick.h:19:
+#define DYN_TICK_TIMER_INT	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#569: FILE: include/linux/dyn-tick.h:20:
+#define DYN_TICK_USE_APIC	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#570: FILE: include/linux/dyn-tick.h:21:
+#define DYN_TICK_SKIPPING	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#571: FILE: include/linux/dyn-tick.h:22:
+#define DYN_TICK_ENABLED	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#572: FILE: include/linux/dyn-tick.h:23:
+#define DYN_TICK_SUITABLE	(1 << 0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#580: FILE: include/linux/dyn-tick.h:31:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#580: FILE: include/linux/dyn-tick.h:31:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#580: FILE: include/linux/dyn-tick.h:31:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#584: FILE: include/linux/dyn-tick.h:35:
+	int (*arch_init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#585: FILE: include/linux/dyn-tick.h:36:
+	void (*arch_enable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#586: FILE: include/linux/dyn-tick.h:37:
+	void (*arch_disable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#587: FILE: include/linux/dyn-tick.h:38:
+	void (*arch_reprogram_timer) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#590: FILE: include/linux/dyn-tick.h:41:
+extern struct dyn_tick_state * dyn_tick;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#591: FILE: include/linux/dyn-tick.h:42:
+extern void dyn_tick_register(struct dyn_tick_timer * new_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: include/linux/dyn-tick.h:42:
+extern void dyn_tick_register(struct dyn_tick_timer * new_timer);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#593: FILE: include/linux/dyn-tick.h:44:
+#define NS_TICK_LEN		((1 * 1000000000)/HZ)
                    		                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#598: FILE: include/linux/dyn-tick.h:49:
+extern unsigned long dyn_tick_reprogram_timer(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#605: FILE: include/linux/dyn-tick.h:56:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#629: FILE: kernel/dyn-tick.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#630: FILE: kernel/dyn-tick.c:2:
+ * linux/arch/i386/kernel/dyn-tick.c

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#653: FILE: kernel/dyn-tick.c:25:
+#include <asm/io.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#660: FILE: kernel/dyn-tick.c:32:
+struct dyn_tick_state * dyn_tick = &dyn_tick_state;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#661: FILE: kernel/dyn-tick.c:33:
+struct dyn_tick_timer * dyn_tick_cfg;

WARNING:TYPO_SPELLING: 'independed' may be misspelled - perhaps 'independent'?
#665: FILE: kernel/dyn-tick.c:37:
+ * Arch independed code needed to reprogram next timer interrupt.
         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#678: FILE: kernel/dyn-tick.c:50:
+		printk("i");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: kernel/dyn-tick.c:51:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#696: FILE: kernel/dyn-tick.c:68:
+		if (jiffies > next) {
[...]
+		} else
[...]

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#696: FILE: kernel/dyn-tick.c:68:
+		if (jiffies > next) {

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: kernel/dyn-tick.c:72:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#718: FILE: kernel/dyn-tick.c:90:
+void __init dyn_tick_register(struct dyn_tick_timer * arch_timer)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#721: FILE: kernel/dyn-tick.c:93:
+	printk(KERN_INFO "dyn-tick: Registering dynamic tick timer v%s\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#749: FILE: kernel/dyn-tick.c:121:
+static ssize_t set_dyn_tick_state(struct sys_device *dev, const char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: kernel/dyn-tick.c:122:
+static ssize_t set_dyn_tick_state(struct sys_device *dev, const char * buf,
+				size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#753: FILE: kernel/dyn-tick.c:125:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#779: FILE: kernel/dyn-tick.c:151:
+static ssize_t set_dyn_tick_int(struct sys_device *dev, const char * buf,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#783: FILE: kernel/dyn-tick.c:155:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#803: FILE: kernel/dyn-tick.c:175:
+static ssize_t set_dyn_tick_dbg(struct sys_device *dev, const char * buf,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#807: FILE: kernel/dyn-tick.c:179:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: kernel/dyn-tick.c:202:
+   return 0;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyn_tick_cfg"
#842: FILE: kernel/dyn-tick.c:214:
+	if (dyn_tick_cfg == NULL || dyn_tick_cfg->arch_init == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dyn_tick_cfg->arch_init"
#842: FILE: kernel/dyn-tick.c:214:
+	if (dyn_tick_cfg == NULL || dyn_tick_cfg->arch_init == NULL ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#844: FILE: kernel/dyn-tick.c:216:
+		printk(KERN_ERR "dyn-tick: No suitable timer found\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#850: FILE: kernel/dyn-tick.c:222:
+		printk(KERN_ERR "dyn-tick: Init failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#858: FILE: kernel/dyn-tick.c:230:
+	printk(KERN_INFO "dyn-tick: Timer using dynamic tick\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#880: FILE: arch/i386/kernel/timers/timer_pit.c:160:
+	extern spinlock_t i8253_lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#882: FILE: arch/i386/kernel/timers/timer_pit.c:162:
+	unsigned long flags;
+	spin_lock_irqsave(&i8253_lock, flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#896: FILE: arch/i386/kernel/timers/timer_pit.c:176:
+	extern spinlock_t i8253_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179168.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 40 warnings, 24 checks, 768 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179168.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
