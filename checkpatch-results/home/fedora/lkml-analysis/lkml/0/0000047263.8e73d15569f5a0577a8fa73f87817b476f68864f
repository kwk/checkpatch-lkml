WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#41: 
Signed-Off-By: Pavel Emelianov <xemul@sw.ru>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#42: 
Signed-Off-By: Kirill Korotaev <dev@sw.ru>

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: include/ub/beancounter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#56: FILE: include/ub/beancounter.h:2:
+ *  include/ub/beancounter.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#99: FILE: include/ub/beancounter.h:45:
+#include <asm/atomic.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#104: FILE: include/ub/beancounter.h:50:
+#define UB_MAXVALUE	( (1UL << (sizeof(unsigned long)*8-1)) - 1)
                    	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#104: FILE: include/ub/beancounter.h:50:
+#define UB_MAXVALUE	( (1UL << (sizeof(unsigned long)*8-1)) - 1)
                    	                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#104: FILE: include/ub/beancounter.h:50:
+#define UB_MAXVALUE	( (1UL << (sizeof(unsigned long)*8-1)) - 1)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: include/ub/beancounter.h:52:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#117: FILE: include/ub/beancounter.h:63:
+struct user_beancounter
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#119: FILE: include/ub/beancounter.h:65:
+	spinlock_t		ub_lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: include/ub/beancounter.h:90:
+static inline void ub_adjust_held_minmax(struct user_beancounter *ub,
+		int resource)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/ub/beancounter.h:99:
+void ub_print_resource_warning(struct user_beancounter *ub, int res,
+		char *str, unsigned long val, unsigned long held);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: include/ub/beancounter.h:103:
+int  __charge_beancounter_locked(struct user_beancounter *ub,
+		int resource, unsigned long val, enum severity strict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/ub/beancounter.h:105:
+void charge_beancounter_notop(struct user_beancounter *ub,
+		int resource, unsigned long val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/ub/beancounter.h:107:
+int  charge_beancounter(struct user_beancounter *ub,
+		int resource, unsigned long val, enum severity strict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: include/ub/beancounter.h:110:
+void __uncharge_beancounter_locked(struct user_beancounter *ub,
+		int resource, unsigned long val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: include/ub/beancounter.h:112:
+void uncharge_beancounter_notop(struct user_beancounter *ub,
+		int resource, unsigned long val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: include/ub/beancounter.h:114:
+void uncharge_beancounter(struct user_beancounter *ub,
+		int resource, unsigned long val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: include/ub/beancounter.h:117:
+struct user_beancounter *beancounter_findcreate(uid_t uid,
+		struct user_beancounter *parent, int flags);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#173: FILE: include/ub/beancounter.h:119:
+static inline struct user_beancounter *get_beancounter(

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#262: FILE: kernel/ub/beancounter.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#263: FILE: kernel/ub/beancounter.c:2:
+ *  kernel/ub/beancounter.c

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#286: FILE: kernel/ub/beancounter.c:25:
+#define ub_hash_fun(x) ((((x) >> 8) ^ (x)) & (UB_HASH_SIZE - 1))

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#290: FILE: kernel/ub/beancounter.c:29:
+spinlock_t ub_hash_lock;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#292: FILE: kernel/ub/beancounter.c:31:
+EXPORT_SYMBOL(ub_hash);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#293: FILE: kernel/ub/beancounter.c:32:
+EXPORT_SYMBOL(ub_hash_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: kernel/ub/beancounter.c:47:
+struct user_beancounter *beancounter_findcreate(uid_t uid,
+		struct user_beancounter *p, int mask)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#316: FILE: kernel/ub/beancounter.c:55:
+		WARN_ON(p == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#320: FILE: kernel/ub/beancounter.c:59:
+		WARN_ON(p != NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#328: FILE: kernel/ub/beancounter.c:67:
+	hlist_for_each_entry (ub, pos, slot, hash)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#332: FILE: kernel/ub/beancounter.c:71:
+	if (pos != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_ub"
#336: FILE: kernel/ub/beancounter.c:75:
+		if (new_ub != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_ub"
#346: FILE: kernel/ub/beancounter.c:85:
+	if (new_ub != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_ub"
#351: FILE: kernel/ub/beancounter.c:90:
+		if (new_ub == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_ub"
#364: FILE: kernel/ub/beancounter.c:103:
+	if (new_ub == NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#381: FILE: kernel/ub/beancounter.c:120:
+EXPORT_SYMBOL(beancounter_findcreate);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ub->parent"
#385: FILE: kernel/ub/beancounter.c:124:
+	if (ub->parent != NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#391: FILE: kernel/ub/beancounter.c:130:
+EXPORT_SYMBOL(ub_print_uid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: kernel/ub/beancounter.c:133:
+void ub_print_resource_warning(struct user_beancounter *ub, int res,
+		char *str, unsigned long val, unsigned long held)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#399: FILE: kernel/ub/beancounter.c:138:
+	printk(KERN_WARNING "UB %s %s warning: %s "

WARNING:SPLIT_STRING: quoted string split across lines
#400: FILE: kernel/ub/beancounter.c:139:
+	printk(KERN_WARNING "UB %s %s warning: %s "
+			"(held %lu, fails %lu, val %lu)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#407: FILE: kernel/ub/beancounter.c:146:
+EXPORT_SYMBOL(ub_print_resource_warning);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: kernel/ub/beancounter.c:155:
+			ub_print_resource_warning(ub, i,
+					"resource is held on put", 0, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#430: FILE: kernel/ub/beancounter.c:169:
+			printk(KERN_ERR "UB: Bad ub refcount: ub=%p, "

WARNING:SPLIT_STRING: quoted string split across lines
#431: FILE: kernel/ub/beancounter.c:170:
+			printk(KERN_ERR "UB: Bad ub refcount: ub=%p, "
+					"luid=%d, ref=%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#439: FILE: kernel/ub/beancounter.c:178:
+		printk(KERN_ERR "Trying to put ub0\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ub"
#451: FILE: kernel/ub/beancounter.c:190:
+	if (ub != NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#455: FILE: kernel/ub/beancounter.c:194:
+EXPORT_SYMBOL(__put_beancounter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: kernel/ub/beancounter.c:201:
+int __charge_beancounter_locked(struct user_beancounter *ub,
+		int resource, unsigned long val, enum severity strict)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: kernel/ub/beancounter.c:205:
+^I * at the moment is possible so an overflow is impossible.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#470: FILE: kernel/ub/beancounter.c:209:
+	switch (strict) {
+		case UB_BARRIER:
[...]
+		case UB_LIMIT:
[...]
+		case UB_FORCE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#475: FILE: kernel/ub/beancounter.c:214:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#480: FILE: kernel/ub/beancounter.c:219:
+			/* fallthrough */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: kernel/ub/beancounter.c:224:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: kernel/ub/beancounter.c:233:
+int charge_beancounter(struct user_beancounter *ub,
+		int resource, unsigned long val, enum severity strict)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: kernel/ub/beancounter.c:240:
+	BUG_ON(val > UB_MAXVALUE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#504: FILE: kernel/ub/beancounter.c:243:
+	for (p = ub; p != NULL; p = p->parent) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#524: FILE: kernel/ub/beancounter.c:263:
+EXPORT_SYMBOL(charge_beancounter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: kernel/ub/beancounter.c:266:
+void charge_beancounter_notop(struct user_beancounter *ub,
+		int resource, unsigned long val)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->parent"
#533: FILE: kernel/ub/beancounter.c:272:
+	for (p = ub; p->parent != NULL; p = p->parent) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#541: FILE: kernel/ub/beancounter.c:280:
+EXPORT_SYMBOL(charge_beancounter_notop);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: kernel/ub/beancounter.c:283:
+void __uncharge_beancounter_locked(struct user_beancounter *ub,
+		int resource, unsigned long val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: kernel/ub/beancounter.c:287:
+		ub_print_resource_warning(ub, resource,
+				"uncharging too much", val, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: kernel/ub/beancounter.c:295:
+void uncharge_beancounter(struct user_beancounter *ub,
+		int resource, unsigned long val)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#561: FILE: kernel/ub/beancounter.c:300:
+	for (p = ub; p != NULL; p = p->parent) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#568: FILE: kernel/ub/beancounter.c:307:
+EXPORT_SYMBOL(uncharge_beancounter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: kernel/ub/beancounter.c:310:
+void uncharge_beancounter_notop(struct user_beancounter *ub,
+		int resource, unsigned long val)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->parent"
#577: FILE: kernel/ub/beancounter.c:316:
+	for (p = ub; p->parent != NULL; p = p->parent) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#585: FILE: kernel/ub/beancounter.c:324:
+EXPORT_SYMBOL(uncharge_beancounter_notop);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: kernel/ub/beancounter.c:384:
+	ub_cachep = kmem_cache_create("user_beancounters",
+			sizeof(struct user_beancounter),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ub_cachep"
#647: FILE: kernel/ub/beancounter.c:386:
+	if (ub_cachep == NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047263.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 32 warnings, 41 checks, 591 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047263.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
