WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
I've attatched copies of the patch that Michael referred to in his email so you 

WARNING:TYPO_SPELLING: 'attatched' may be misspelled - perhaps 'attached'?
#64: 
I've attatched copies of the patch that Michael referred to in his email so you 
     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#111: FILE: include/asm-i386/core_ibmnumaq.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: include/asm-i386/core_ibmnumaq.h:8:
+ * All rights reserved.          $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#132: FILE: include/asm-i386/core_ibmnumaq.h:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#133: FILE: include/asm-i386/core_ibmnumaq.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: include/asm-i386/core_ibmnumaq.h:42:
+/* Returns the number of the node containing Node 'nid'.  This architecture is flat, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#153: FILE: include/asm-i386/core_ibmnumaq.h:43:
+/* Returns the number of the node containing Node 'nid'.  This architecture is flat, 
+   so it is a pretty simple function. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#153: FILE: include/asm-i386/core_ibmnumaq.h:43:
+   so it is a pretty simple function. */

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: include/asm-i386/core_ibmnumaq.h:51:
+	for(i = 1; i < 16; i <<= 1)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#162: FILE: include/asm-i386/core_ibmnumaq.h:52:
+		if ((cpu = logical_apicid_to_cpu(logical_apicid | i)) >= 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#176: FILE: include/asm-i386/mmzone.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#177: FILE: include/asm-i386/mmzone.h:2:
+ * linux/include/asm-i386/mmzone.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: include/asm-i386/mmzone.h:8:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#197: FILE: include/asm-i386/mmzone.h:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#198: FILE: include/asm-i386/mmzone.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:SPACING: space required before the open brace '{'
#248: FILE: kernel/fork.c:710:
+	if (!null_restrict(&p->numa_launch_policy)){

CHECK:BRACES: braces {} should be used on all arms of this statement
#248: FILE: kernel/fork.c:710:
+	if (!null_restrict(&p->numa_launch_policy)){
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: kernel/fork.c:714:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#257: FILE: kernel/fork.c:719:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#269: FILE: kernel/numa.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#270: FILE: kernel/numa.c:2:
+ * linux/kernel/numa.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: kernel/numa.c:8:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#290: FILE: kernel/numa.c:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#291: FILE: kernel/numa.c:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: kernel/numa.c:36:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#305: FILE: kernel/numa.c:37:
+#define is_valid_cpu_behavior(x)    (x == CPU_BIND_STRICT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#306: FILE: kernel/numa.c:38:
+#define is_valid_memblk_behavior(x) (((x & 0x7) == MPOL_STRICT) || ((x & 0x7) == MPOL_LOOSE))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#306: FILE: kernel/numa.c:38:
+#define is_valid_memblk_behavior(x) (((x & 0x7) == MPOL_STRICT) || ((x & 0x7) == MPOL_LOOSE))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: kernel/numa.c:42:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#311: FILE: kernel/numa.c:43:
+extern int nummemblks;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#312: FILE: kernel/numa.c:44:
+extern unsigned long memblk_online_map;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: kernel/numa.c:62:
+^I/* If there is a binding, at least one of the bound cpus must be valid in the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#331: FILE: kernel/numa.c:63:
+	/* If there is a binding, at least one of the bound cpus must be valid in the 
+	   new restriction set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#331: FILE: kernel/numa.c:63:
+	   new restriction set. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: kernel/numa.c:69:
+^I/* If the new restriction expands upon the old restriction, the caller must $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#338: FILE: kernel/numa.c:70:
+	/* If the new restriction expands upon the old restriction, the caller must 
+	   have CAP_SYS_NICE. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#338: FILE: kernel/numa.c:70:
+	   have CAP_SYS_NICE. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: kernel/numa.c:105:
+^I/* If there is a binding, at least one of the bound memblks must be valid in the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#374: FILE: kernel/numa.c:106:
+	/* If there is a binding, at least one of the bound memblks must be valid in the 
+	   new restriction set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#374: FILE: kernel/numa.c:106:
+	   new restriction set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#381: FILE: kernel/numa.c:113:
+	/* If the new restriction expands upon the old restriction, the caller
+	   must have CAP_SYS_NICE. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#381: FILE: kernel/numa.c:113:
+	   must have CAP_SYS_NICE. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: kernel/numa.c:163:
+ * cpu_to_node(cpu): Returns the number of the most specific Node $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu < 0'
#439: FILE: kernel/numa.c:171:
+	if ((cpu < 0) || (cpu >= NR_CPUS) ||
+	    (!(cpu_online_map & (1 << cpu))))   /* invalid cpu # */

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu >= NR_CPUS'
#439: FILE: kernel/numa.c:171:
+	if ((cpu < 0) || (cpu >= NR_CPUS) ||
+	    (!(cpu_online_map & (1 << cpu))))   /* invalid cpu # */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#439: FILE: kernel/numa.c:171:
+	if ((cpu < 0) || (cpu >= NR_CPUS) ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: kernel/numa.c:179:
+ * memblk_to_node(memblk): Returns the number of the most specific Node $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'memblk < 0'
#455: FILE: kernel/numa.c:187:
+	if ((memblk < 0) || (memblk >= NR_MEMBLKS) ||
+	    (!(memblk_online_map & (1 << memblk))))   /* invalid memblk # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'memblk >= NR_MEMBLKS'
#455: FILE: kernel/numa.c:187:
+	if ((memblk < 0) || (memblk >= NR_MEMBLKS) ||
+	    (!(memblk_online_map & (1 << memblk))))   /* invalid memblk # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid < 0'
#468: FILE: kernel/numa.c:200:
+	if ((nid < 0) || (nid >= numnodes))   /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid >= numnodes'
#468: FILE: kernel/numa.c:200:
+	if ((nid < 0) || (nid >= numnodes))   /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid < 0'
#482: FILE: kernel/numa.c:214:
+	if ((nid < 0) || (nid >= numnodes))   /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid >= numnodes'
#482: FILE: kernel/numa.c:214:
+	if ((nid < 0) || (nid >= numnodes))   /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid < 0'
#496: FILE: kernel/numa.c:228:
+	if ((nid < 0) || (nid >= numnodes))   /* invalid node # */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid >= numnodes'
#496: FILE: kernel/numa.c:228:
+	if ((nid < 0) || (nid >= numnodes))   /* invalid node # */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: kernel/numa.c:247:
+ * get_node(): Returns the number of the Node containing $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#536: FILE: kernel/numa.c:268:
+	/* Make sure that at least one of the cpus in the new binding is online, AND
+	   in the current restriction set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#536: FILE: kernel/numa.c:268:
+	   in the current restriction set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#574: FILE: kernel/numa.c:306:
+	/* Make sure that at least one of the memblks in the new binding is online, AND
+	   in the current restriction set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#574: FILE: kernel/numa.c:306:
+	   in the current restriction set. */

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#605: FILE: kernel/numa.c:337:
+	return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: kernel/numa.c:343:
+int set_launch_policy(numa_bitmap_t cpus, int cpu_behavior, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: kernel/numa.c:344:
+int set_launch_policy(numa_bitmap_t cpus, int cpu_behavior, 
+		       numa_bitmap_t memblks, int memblk_behavior)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: kernel/numa.c:351:
+^I/* Make sure that at least one of the cpus and one of the memblks in the new $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#620: FILE: kernel/numa.c:352:
+	/* Make sure that at least one of the cpus and one of the memblks in the new 
+	   binding are online, AND in the current restriction set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#620: FILE: kernel/numa.c:352:
+	   binding are online, AND in the current restriction set. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: kernel/numa.c:360:
+^Iif ((!is_valid_cpu_behavior(cpu_behavior)) || $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#657: FILE: mm/numa.c:14:
+int nummemblks = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0UL
#658: FILE: mm/numa.c:15:
+unsigned long memblk_online_map = 0UL;  /* Similar to cpu_online_map, but for memory blocks */

ERROR:SPACING: space required before the open brace '{'
#678: FILE: mm/numa.c:82:
+	if (test_and_set_bit(nummemblks++, &memblk_online_map)){

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#679: FILE: mm/numa.c:83:
+		printk("memblk alread counted?!?!\n");
 		               ^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#679: FILE: mm/numa.c:83:
+		printk("memblk alread counted?!?!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#680: FILE: mm/numa.c:84:
+		BUG();

CHECK:BRACES: Unbalanced braces around else statement
#713: FILE: mm/numa.c:124:
+	else {

ERROR:SPACING: space required before the open brace '{'
#716: FILE: mm/numa.c:127:
+		if (current->numa_binding.memblks.behavior == MPOL_LOOSE){

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#718: FILE: mm/numa.c:129:
+			/* and if it is a loose binding, remember to search
+			   the restriction if we come up empty */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#718: FILE: mm/numa.c:129:
+			   the restriction if we come up empty */

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: mm/numa.c:130:
+                        search_twice = 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: mm/numa.c:130:
+                        search_twice = 1;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#721: FILE: mm/numa.c:132:
+			/* no need to search the memblks in the binding again,
+			   so we'll mask them out. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#721: FILE: mm/numa.c:132:
+			   so we'll mask them out. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#727: FILE: mm/numa.c:138:
+search_through_memblks: $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#741: FILE: mm/numa.c:143:
+			if ((ret = alloc_pages_pgdat(temp, gfp_mask, order)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#748: FILE: mm/numa.c:150:
+			if ((ret = alloc_pages_pgdat(temp, gfp_mask, order)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: mm/numa.c:156:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: mm/numa.c:157:
+^I^I * If we failed to find a "preferred" memblk, try again $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#768: FILE: mm/numa.c:170:
+struct page * _alloc_pages(unsigned int gfp_mask, unsigned int order)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#799: FILE: mm/page_alloc.c:44:
+extern int nummemblks;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#800: FILE: mm/page_alloc.c:45:
+extern unsigned long memblk_online_map;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#831: FILE: include/linux/init_task.h:62:
+    numa_restrict:	NEW_NUMA_SET,					\
                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#831: FILE: include/linux/init_task.h:62:
+    numa_restrict:	NEW_NUMA_SET,					\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#832: FILE: include/linux/init_task.h:63:
+    numa_binding:	NEW_NUMA_SET,					\
                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#832: FILE: include/linux/init_task.h:63:
+    numa_binding:	NEW_NUMA_SET,					\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#833: FILE: include/linux/init_task.h:64:
+    numa_launch_policy:	NEW_NUMA_SET,					\
                       ^

WARNING:INDENTED_LABEL: labels should not be indented
#833: FILE: include/linux/init_task.h:64:
+    numa_launch_policy:	NEW_NUMA_SET,					\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#834: FILE: include/linux/init_task.h:65:
+    numa_api_lock:	RW_LOCK_UNLOCKED,				\
                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#834: FILE: include/linux/init_task.h:65:
+    numa_api_lock:	RW_LOCK_UNLOCKED,				\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#857: FILE: include/linux/mmzone.h:169:
+#if defined (CONFIG_DISCONTIGMEM) || defined (CONFIG_NUMA)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#857: FILE: include/linux/mmzone.h:169:
+#if defined (CONFIG_DISCONTIGMEM) || defined (CONFIG_NUMA)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#872: FILE: include/linux/numa.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#873: FILE: include/linux/numa.h:2:
+ * linux/include/linux/numa.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#879: FILE: include/linux/numa.h:8:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#893: FILE: include/linux/numa.h:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#894: FILE: include/linux/numa.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#909: FILE: include/linux/numa.h:38:
+typedef unsigned long		numa_bitmap_t;

CHECK:SPACING: No space is necessary after a cast
#910: FILE: include/linux/numa.h:39:
+#define NUMA_BITMAP_NONE	(~((numa_bitmap_t) 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#918: FILE: include/linux/numa.h:47:
+#define MPOL_LOOSE^I16  /* Memory must try to be allocated according to binding first, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#919: FILE: include/linux/numa.h:48:
+#define MPOL_LOOSE	16  /* Memory must try to be allocated according to binding first, 
+			       and can fall back to restriction if necessary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#919: FILE: include/linux/numa.h:48:
+			       and can fall back to restriction if necessary */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#921: FILE: include/linux/numa.h:50:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#922: FILE: include/linux/numa.h:51:
+typedef struct numa_list {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#927: FILE: include/linux/numa.h:56:
+typedef struct numa_set {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: include/linux/numa.h:61:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#934: FILE: include/linux/numa.h:63:
+#define numa_set_init(x) do { (x)->cpus.list = NUMA_BITMAP_NONE;\
+				(x)->memblks.list = NUMA_BITMAP_NONE;\
+				(x)->cpus.behavior = CPU_BIND_STRICT;\
+				(x)->memblks.behavior = MPOL_STRICT; } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#937: FILE: include/linux/numa.h:66:
+				(x)->memblks.behavior = MPOL_STRICT; } while(0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#937: FILE: include/linux/numa.h:66:
+				(x)->memblks.behavior = MPOL_STRICT; } while(0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#943: FILE: include/linux/numa.h:72:
+/* Tests whether a numa_set_t represents an empty restriction (ie: all 1's.  All cpus/memblks allowed.) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#944: FILE: include/linux/numa.h:73:
+#define null_restrict(x) (((x)->cpus.list == NUMA_BITMAP_NONE) && \
+				((x)->memblks.list == NUMA_BITMAP_NONE))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: include/linux/sched.h:295:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1036: FILE: include/linux/prctl.h:37:
+#define PR_GET_NODE    ^I16$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1040: FILE: include/linux/prctl.h:41:
+#define PR_MEMBLK_TO_NODE      ^I18$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1045: FILE: include/linux/prctl.h:46:
+#define PR_NODE_TO_MEMBLK      ^I21$

CHECK:SPACING: No space is necessary after a cast
#1073: FILE: kernel/sys.c:1283:
+			error = (long) set_restricted_cpus((numa_bitmap_t)arg2, (numa_set_t *)arg3);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1076: FILE: kernel/sys.c:1286:
+			error = (long) set_restricted_memblks((numa_bitmap_t)arg2, (numa_set_t *)arg3);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#1076: FILE: kernel/sys.c:1286:
+			error = (long) set_restricted_memblks((numa_bitmap_t)arg2, (numa_set_t *)arg3);

CHECK:SPACING: No space is necessary after a cast
#1079: FILE: kernel/sys.c:1289:
+			error = (long) get_restricted_cpus();

CHECK:SPACING: No space is necessary after a cast
#1082: FILE: kernel/sys.c:1292:
+			error = (long) get_restricted_memblks();

CHECK:SPACING: No space is necessary after a cast
#1085: FILE: kernel/sys.c:1295:
+			error = (long) get_cpu();

CHECK:SPACING: No space is necessary after a cast
#1088: FILE: kernel/sys.c:1298:
+			error = (long) get_node();

CHECK:SPACING: No space is necessary after a cast
#1091: FILE: kernel/sys.c:1301:
+			error = (long) cpu_to_node((int)arg2);

CHECK:SPACING: No space is necessary after a cast
#1094: FILE: kernel/sys.c:1304:
+			error = (long) memblk_to_node((int)arg2);

CHECK:SPACING: No space is necessary after a cast
#1097: FILE: kernel/sys.c:1307:
+			error = (long) node_to_node((int)arg2);

CHECK:SPACING: No space is necessary after a cast
#1100: FILE: kernel/sys.c:1310:
+			error = (long) node_to_cpu((int)arg2);

CHECK:SPACING: No space is necessary after a cast
#1103: FILE: kernel/sys.c:1313:
+			error = (long) node_to_memblk((int)arg2);

CHECK:SPACING: No space is necessary after a cast
#1106: FILE: kernel/sys.c:1316:
+			error = (long) bind_to_cpu((numa_bitmap_t)arg2, (int)arg3);

CHECK:SPACING: No space is necessary after a cast
#1109: FILE: kernel/sys.c:1319:
+			error = (long) bind_to_memblk((numa_bitmap_t)arg2, (int)arg3);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1112: FILE: kernel/sys.c:1322:
+			error = (long) bind_memory((unsigned long)arg2, (size_t)arg3, (numa_bitmap_t)arg4, (int)arg5);

CHECK:SPACING: No space is necessary after a cast
#1112: FILE: kernel/sys.c:1322:
+			error = (long) bind_memory((unsigned long)arg2, (size_t)arg3, (numa_bitmap_t)arg4, (int)arg5);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1115: FILE: kernel/sys.c:1325:
+			error = (long) set_launch_policy((numa_bitmap_t)arg2, (int)arg3, (numa_bitmap_t)arg4, (int)arg5);

CHECK:SPACING: No space is necessary after a cast
#1115: FILE: kernel/sys.c:1325:
+			error = (long) set_launch_policy((numa_bitmap_t)arg2, (int)arg3, (numa_bitmap_t)arg4, (int)arg5);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454468.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 58 warnings, 39 checks, 918 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454468.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
