ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: drivers/i2c/i2c-adap-ite.c:165:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: drivers/i2c/i2c-adap-ite.c:165:
+  $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#69: FILE: drivers/i2c/i2c-elektor.c:146:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#71: FILE: drivers/i2c/i2c-elektor.c:148:
+			       "i2c-elektor.o: requested I/O region (0x%X:2) "
+			       "is in use.\n", base);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base == 0x3bc'
#105: FILE: drivers/i2c/i2c-elv.c:91:
+	if (!request_region(base, (base == 0x3bc) ? 3 : 8,
+				"i2c (ELV adapter)"))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: drivers/i2c/i2c-elv.c:92:
+	if (!request_region(base, (base == 0x3bc) ? 3 : 8,
+				"i2c (ELV adapter)"))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#109: FILE: drivers/i2c/i2c-elv.c:95:
+	if (inb(base+1) & 0x80) {	/* BUSY should be high	*/
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#110: FILE: drivers/i2c/i2c-elv.c:96:
+		DEBINIT(printk(KERN_DEBUG "i2c-elv.o: Busy was low.\n"));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: drivers/i2c/i2c-elv.c:98:
+^I} $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: drivers/i2c/i2c-elv.c:100:
+	outb(0x0c,base+2);	/* SLCT auf low		*/
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#114: FILE: drivers/i2c/i2c-elv.c:100:
+	outb(0x0c,base+2);	/* SLCT auf low		*/
 	              ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#115: FILE: drivers/i2c/i2c-elv.c:101:
+	udelay(400);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: drivers/i2c/i2c-elv.c:102:
+	if (!(inb(base+1) && 0x10)) {
 	              ^

WARNING:HEXADECIMAL_BOOLEAN_TEST: boolean test with hexadecimal, perhaps just 1 & or |?
#116: FILE: drivers/i2c/i2c-elv.c:102:
+	if (!(inb(base+1) && 0x10)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: drivers/i2c/i2c-elv.c:103:
+		outb(0x04,base+2);
 		         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#117: FILE: drivers/i2c/i2c-elv.c:103:
+		outb(0x04,base+2);
 		              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#118: FILE: drivers/i2c/i2c-elv.c:104:
+		DEBINIT(printk(KERN_DEBUG "i2c-elv.o: Select was high.\n"));

CHECK:CAMELCASE: Avoid CamelCase: <PortData>
#122: FILE: drivers/i2c/i2c-elv.c:108:
+	PortData = 0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#123: FILE: drivers/i2c/i2c-elv.c:109:
+	bit_elv_setsda((void*)base,1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: drivers/i2c/i2c-elv.c:109:
+	bit_elv_setsda((void*)base,1);
 	                          ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#124: FILE: drivers/i2c/i2c-elv.c:110:
+	bit_elv_setscl((void*)base,1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#124: FILE: drivers/i2c/i2c-elv.c:110:
+	bit_elv_setscl((void*)base,1);
 	                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#132: FILE: drivers/i2c/i2c-elv.c:114:
+	release_region(base , (base == 0x3bc) ? 3 : 8);
 	                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000404441.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 6 warnings, 8 checks, 144 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000404441.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
