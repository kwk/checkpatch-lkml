WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
On Sun, Jun 23, 2002 at 10:40:12AM +0200, you [clock@atrey.karlin.mff.cuni.cz] wrote:

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#78: FILE: arch/i386/kernel/traps.c:123:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: arch/i386/kernel/traps.c:127:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: arch/i386/kernel/traps.c:128:
+       unsigned long *stack, *save_stack, addr, module_start, module_end;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: arch/i386/kernel/traps.c:129:
+       unsigned long *stack, *save_stack, addr, module_start, module_end;
+       printk("Stack: ");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: arch/i386/kernel/traps.c:129:
+       printk("Stack: ");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#84: FILE: arch/i386/kernel/traps.c:129:
+       printk("Stack: ");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: arch/i386/kernel/traps.c:131:
+       if (esp)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#86: FILE: arch/i386/kernel/traps.c:131:
+       if (esp)
+               stack = (unsigned long *) esp;

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: arch/i386/kernel/traps.c:132:
+               stack = (unsigned long *) esp;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#87: FILE: arch/i386/kernel/traps.c:132:
+               stack = (unsigned long *) esp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: arch/i386/kernel/traps.c:132:
+               stack = (unsigned long *) esp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: arch/i386/kernel/traps.c:133:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#88: FILE: arch/i386/kernel/traps.c:133:
+       else
+               asm("movl %%esp,%0": "=m" (stack));

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: arch/i386/kernel/traps.c:134:
+               asm("movl %%esp,%0": "=m" (stack));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: arch/i386/kernel/traps.c:134:
+               asm("movl %%esp,%0": "=m" (stack));$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#89: FILE: arch/i386/kernel/traps.c:134:
+               asm("movl %%esp,%0": "=m" (stack));
                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: arch/i386/kernel/traps.c:135:
+       save_stack = stack;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: arch/i386/kernel/traps.c:136:
+       for(i=0; i < kstack_depth_to_print; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#91: FILE: arch/i386/kernel/traps.c:136:
+       for(i=0; i < kstack_depth_to_print; i++) {
+               if (((long) stack & 4095) == 0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#91: FILE: arch/i386/kernel/traps.c:136:
+       for(i=0; i < kstack_depth_to_print; i++) {
             ^

ERROR:SPACING: space required before the open parenthesis '('
#91: FILE: arch/i386/kernel/traps.c:136:
+       for(i=0; i < kstack_depth_to_print; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: arch/i386/kernel/traps.c:137:
+               if (((long) stack & 4095) == 0)$

CHECK:SPACING: No space is necessary after a cast
#92: FILE: arch/i386/kernel/traps.c:137:
+               if (((long) stack & 4095) == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: arch/i386/kernel/traps.c:137:
+               if (((long) stack & 4095) == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#92: FILE: arch/i386/kernel/traps.c:137:
+               if (((long) stack & 4095) == 0)
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: arch/i386/kernel/traps.c:138:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: arch/i386/kernel/traps.c:138:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: arch/i386/kernel/traps.c:139:
+               if (i && ((i % 8) == 0))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: arch/i386/kernel/traps.c:139:
+               if (i && ((i % 8) == 0))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#94: FILE: arch/i386/kernel/traps.c:139:
+               if (i && ((i % 8) == 0))
+                       printk("\n       ");

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: arch/i386/kernel/traps.c:140:
+                       printk("\n       ");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: arch/i386/kernel/traps.c:140:
+                       printk("\n       ");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#95: FILE: arch/i386/kernel/traps.c:140:
+                       printk("\n       ");

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: arch/i386/kernel/traps.c:141:
+               printk("%08lx ", *stack++);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: arch/i386/kernel/traps.c:141:
+               printk("%08lx ", *stack++);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#96: FILE: arch/i386/kernel/traps.c:141:
+               printk("%08lx ", *stack++);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: arch/i386/kernel/traps.c:142:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: arch/i386/kernel/traps.c:143:
+       printk("\nCall Trace: ");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#98: FILE: arch/i386/kernel/traps.c:143:
+       printk("\nCall Trace: ");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: arch/i386/kernel/traps.c:144:
+       stack = save_stack;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/i386/kernel/traps.c:145:
+       i = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/i386/kernel/traps.c:146:
+       module_start = PAGE_OFFSET + (max_mapnr << PAGE_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: arch/i386/kernel/traps.c:147:
+       module_start = ((module_start + VMALLOC_OFFSET) & ~(VMALLOC_OFFSET-1));$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#102: FILE: arch/i386/kernel/traps.c:147:
+       module_start = ((module_start + VMALLOC_OFFSET) & ~(VMALLOC_OFFSET-1));
                                                                          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: arch/i386/kernel/traps.c:148:
+       module_end = module_start + MODULE_RANGE;$

CHECK:SPACING: No space is necessary after a cast
#104: FILE: arch/i386/kernel/traps.c:149:
+       while (((long) stack & 4095) != 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: arch/i386/kernel/traps.c:149:
+       while (((long) stack & 4095) != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#104: FILE: arch/i386/kernel/traps.c:149:
+       while (((long) stack & 4095) != 0) {
+               addr = *stack++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: arch/i386/kernel/traps.c:150:
+               addr = *stack++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: arch/i386/kernel/traps.c:150:
+               addr = *stack++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: arch/i386/kernel/traps.c:151:
+               /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: arch/i386/kernel/traps.c:152:
+                * If the address is either in the text segment of the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: arch/i386/kernel/traps.c:153:
+                * kernel, or in the region which contains vmalloc'ed$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: arch/i386/kernel/traps.c:154:
+                * memory, it *may* be the address of a calling$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: arch/i386/kernel/traps.c:155:
+                * routine; if so, print it so that someone tracing$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: arch/i386/kernel/traps.c:156:
+                * down the cause of the crash will be able to figure$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: arch/i386/kernel/traps.c:157:
+                * out the call path that was taken.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: arch/i386/kernel/traps.c:158:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&$

CHECK:SPACING: No space is necessary after a cast
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&
[...]
+                       if (i && ((i % 8) == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= (unsigned long) &_stext'
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&
+                    (addr <= (unsigned long) &_etext)) ||
+                   ((addr >= module_start) && (addr <= module_end))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= (unsigned long) &_etext'
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&
+                    (addr <= (unsigned long) &_etext)) ||
+                   ((addr >= module_start) && (addr <= module_end))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= module_start'
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&
+                    (addr <= (unsigned long) &_etext)) ||
+                   ((addr >= module_start) && (addr <= module_end))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= module_end'
#114: FILE: arch/i386/kernel/traps.c:159:
+               if (((addr >= (unsigned long) &_stext) &&
+                    (addr <= (unsigned long) &_etext)) ||
+                   ((addr >= module_start) && (addr <= module_end))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: arch/i386/kernel/traps.c:160:
+                    (addr <= (unsigned long) &_etext)) ||$

CHECK:SPACING: No space is necessary after a cast
#115: FILE: arch/i386/kernel/traps.c:160:
+                    (addr <= (unsigned long) &_etext)) ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/i386/kernel/traps.c:160:
+                    (addr <= (unsigned long) &_etext)) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: arch/i386/kernel/traps.c:161:
+                   ((addr >= module_start) && (addr <= module_end))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: arch/i386/kernel/traps.c:161:
+                   ((addr >= module_start) && (addr <= module_end))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: arch/i386/kernel/traps.c:162:
+                       if (i && ((i % 8) == 0))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/i386/kernel/traps.c:162:
+                       if (i && ((i % 8) == 0))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#117: FILE: arch/i386/kernel/traps.c:162:
+                       if (i && ((i % 8) == 0))
+                               printk("\n       ");

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: arch/i386/kernel/traps.c:163:
+                               printk("\n       ");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: arch/i386/kernel/traps.c:163:
+                               printk("\n       ");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#118: FILE: arch/i386/kernel/traps.c:163:
+                               printk("\n       ");

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: arch/i386/kernel/traps.c:164:
+                       printk("[<%08lx>] ", addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/i386/kernel/traps.c:164:
+                       printk("[<%08lx>] ", addr);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#119: FILE: arch/i386/kernel/traps.c:164:
+                       printk("[<%08lx>] ", addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#120: FILE: arch/i386/kernel/traps.c:165:
+                       i++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: arch/i386/kernel/traps.c:165:
+                       i++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: arch/i386/kernel/traps.c:166:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: arch/i386/kernel/traps.c:166:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: arch/i386/kernel/traps.c:167:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/i386/kernel/traps.c:168:
+       printk("\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#123: FILE: arch/i386/kernel/traps.c:168:
+       printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#126: FILE: arch/i386/kernel/traps.c:171:
+
+

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/kernel.h:56:
+extern void show_stack(const unsigned long *); /* For adhoc debugging */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const unsigned long *' should also have an identifier name
#138: FILE: include/linux/kernel.h:56:
+extern void show_stack(const unsigned long *); /* For adhoc debugging */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453687.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 53 warnings, 13 checks, 63 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453687.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
