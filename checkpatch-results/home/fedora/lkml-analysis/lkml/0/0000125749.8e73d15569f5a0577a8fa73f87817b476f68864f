WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: kernel/module.c:1213:
+       const char *name = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: kernel/module.c:1214:
+       unsigned long i, ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: kernel/module.c:1215:
+       struct module *owner;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: kernel/module.c:1216:
+       const unsigned long *crc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: kernel/module.c:1218:
+       for (i = 0; i < mod->num_syms; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#72: FILE: kernel/module.c:1218:
+       for (i = 0; i < mod->num_syms; i++)
+               if (!__find_symbol(mod->syms[i].name, &owner, &crc, 1)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: kernel/module.c:1219:
+               if (!__find_symbol(mod->syms[i].name, &owner, &crc, 1)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: kernel/module.c:1219:
+               if (!__find_symbol(mod->syms[i].name, &owner, &crc, 1)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#73: FILE: kernel/module.c:1219:
+               if (!__find_symbol(mod->syms[i].name, &owner, &crc, 1)) {
+                       name = mod->syms[i].name;

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: kernel/module.c:1220:
+                       name = mod->syms[i].name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: kernel/module.c:1220:
+                       name = mod->syms[i].name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: kernel/module.c:1221:
+                       ret = -ENOEXEC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: kernel/module.c:1221:
+                       ret = -ENOEXEC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: kernel/module.c:1222:
+                       goto dup;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: kernel/module.c:1222:
+                       goto dup;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: kernel/module.c:1223:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: kernel/module.c:1223:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: kernel/module.c:1225:
+       for (i = 0; i < mod->num_gpl_syms; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#79: FILE: kernel/module.c:1225:
+       for (i = 0; i < mod->num_gpl_syms; i++)
+               if (!__find_symbol(mod->gpl_syms[i].name, &owner, &crc, 1)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: kernel/module.c:1226:
+               if (!__find_symbol(mod->gpl_syms[i].name, &owner, &crc, 1)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: kernel/module.c:1226:
+               if (!__find_symbol(mod->gpl_syms[i].name, &owner, &crc, 1)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#80: FILE: kernel/module.c:1226:
+               if (!__find_symbol(mod->gpl_syms[i].name, &owner, &crc, 1)) {
+                       name = mod->gpl_syms[i].name;

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: kernel/module.c:1227:
+                       name = mod->gpl_syms[i].name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: kernel/module.c:1227:
+                       name = mod->gpl_syms[i].name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: kernel/module.c:1228:
+                       ret = -ENOEXEC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: kernel/module.c:1228:
+                       ret = -ENOEXEC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: kernel/module.c:1229:
+                       goto dup;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: kernel/module.c:1229:
+                       goto dup;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: kernel/module.c:1230:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: kernel/module.c:1230:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: kernel/module.c:1233:
+       if (ret)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#87: FILE: kernel/module.c:1233:
+       if (ret)
+               printk(KERN_ERR "%s: exports duplicate symbol %s

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: kernel/module.c:1234:
+               printk(KERN_ERR "%s: exports duplicate symbol %s$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: kernel/module.c:1234:
+               printk(KERN_ERR "%s: exports duplicate symbol %s$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#88: FILE: kernel/module.c:1234:
+               printk(KERN_ERR "%s: exports duplicate symbol %s

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#89: FILE: kernel/module.c:1234:
(owned by %s)\n",

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: kernel/module.c:1235:
+                       mod->name, name, module_name(owner));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: kernel/module.c:1235:
+                       mod->name, name, module_name(owner));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: kernel/module.c:1237:
+       return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: kernel/module.c:1803:
+        /* Find duplicate symbols */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: kernel/module.c:1804:
+       err = verify_export_symbols(mod);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: kernel/module.c:1806:
+       if (err < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#105: FILE: kernel/module.c:1806:
+       if (err < 0)
+               goto cleanup;

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: kernel/module.c:1807:
+               goto cleanup;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: kernel/module.c:1807:
+               goto cleanup;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125749.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 30 warnings, 0 checks, 52 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125749.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
