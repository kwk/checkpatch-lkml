CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#44: FILE: arch/um/include/os.h:157:
+extern void os_early_checks(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#45: FILE: arch/um/include/os.h:158:
+extern int can_do_skas(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: arch/um/include/os.h:169:
+extern void init_new_thread_stack(void *sig_stack, void (*usr1_handler)(int));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: arch/um/include/os.h:170:
+extern void init_new_thread_signals(int altstack);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: arch/um/include/os.h:171:
+extern int run_kernel_thread(int (*fn)(void *), void *arg, void **jmp_ptr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: arch/um/include/os.h:181:
+/* tt.c $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: arch/um/include/os.h:184:
+extern void forward_pending_sigio(int target);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: arch/um/include/os.h:185:
+extern int start_fork_tramp(void *arg, unsigned long temp_stack, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: arch/um/include/os.h:185:
+extern int start_fork_tramp(void *arg, unsigned long temp_stack, 

ERROR:SPACING: space required before the open brace '{'
#676: FILE: arch/um/os-Linux/process.c:177:
+	if(sig_stack != NULL){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#676: FILE: arch/um/os-Linux/process.c:177:
+	if(sig_stack != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sig_stack"
#676: FILE: arch/um/os-Linux/process.c:177:
+	if(sig_stack != NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#681: FILE: arch/um/os-Linux/process.c:182:
+	if(usr1_handler) set_handler(SIGUSR1, usr1_handler, flags, -1);

ERROR:SPACING: space required before the open parenthesis '('
#681: FILE: arch/um/os-Linux/process.c:182:
+	if(usr1_handler) set_handler(SIGUSR1, usr1_handler, flags, -1);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#681: FILE: arch/um/os-Linux/process.c:182:
+	if(usr1_handler) set_handler(SIGUSR1, usr1_handler, flags, -1);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#688: FILE: arch/um/os-Linux/process.c:189:
+	set_handler(SIGSEGV, (__sighandler_t) sig_handler, flags,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#690: FILE: arch/um/os-Linux/process.c:191:
+^Iset_handler(SIGTRAP, (__sighandler_t) sig_handler, flags, $

CHECK:SPACING: No space is necessary after a cast
#690: FILE: arch/um/os-Linux/process.c:191:
+	set_handler(SIGTRAP, (__sighandler_t) sig_handler, flags, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: arch/um/os-Linux/process.c:193:
+^Iset_handler(SIGFPE, (__sighandler_t) sig_handler, flags, $

CHECK:SPACING: No space is necessary after a cast
#692: FILE: arch/um/os-Linux/process.c:193:
+	set_handler(SIGFPE, (__sighandler_t) sig_handler, flags, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: arch/um/os-Linux/process.c:195:
+^Iset_handler(SIGILL, (__sighandler_t) sig_handler, flags, $

CHECK:SPACING: No space is necessary after a cast
#694: FILE: arch/um/os-Linux/process.c:195:
+	set_handler(SIGILL, (__sighandler_t) sig_handler, flags, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: arch/um/os-Linux/process.c:197:
+^Iset_handler(SIGBUS, (__sighandler_t) sig_handler, flags, $

CHECK:SPACING: No space is necessary after a cast
#696: FILE: arch/um/os-Linux/process.c:197:
+	set_handler(SIGBUS, (__sighandler_t) sig_handler, flags, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: arch/um/os-Linux/process.c:199:
+^Iset_handler(SIGUSR2, (__sighandler_t) sig_handler, $

CHECK:SPACING: No space is necessary after a cast
#698: FILE: arch/um/os-Linux/process.c:199:
+	set_handler(SIGUSR2, (__sighandler_t) sig_handler, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: arch/um/os-Linux/process.c:208:
+       sigjmp_buf buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: arch/um/os-Linux/process.c:209:
+       int n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: arch/um/os-Linux/process.c:211:
+       *jmp_ptr = &buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/um/os-Linux/process.c:212:
+       n = sigsetjmp(buf, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: arch/um/os-Linux/process.c:213:
+       if(n != 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#712: FILE: arch/um/os-Linux/process.c:213:
+       if(n != 0)
+               return(n);

ERROR:SPACING: space required before the open parenthesis '('
#712: FILE: arch/um/os-Linux/process.c:213:
+       if(n != 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: arch/um/os-Linux/process.c:214:
+               return(n);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: arch/um/os-Linux/process.c:214:
+               return(n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: arch/um/os-Linux/process.c:215:
+       (*fn)(arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: arch/um/os-Linux/process.c:216:
+       return(0);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#715: FILE: arch/um/os-Linux/process.c:216:
+       return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#726: FILE: arch/um/os-Linux/start_up.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#726: FILE: arch/um/os-Linux/start_up.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required before the open brace '{'
#772: FILE: arch/um/os-Linux/start_up.c:47:
+	if(ptrace(PTRACE_TRACEME, 0, 0, 0) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#772: FILE: arch/um/os-Linux/start_up.c:47:
+	if(ptrace(PTRACE_TRACEME, 0, 0, 0) < 0){

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#779: FILE: arch/um/os-Linux/start_up.c:54:
+	 * once, please.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#784: FILE: arch/um/os-Linux/start_up.c:59:
+		ret = 1; /*Nothing modified by the parent, we are running
+			   normally.*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#784: FILE: arch/um/os-Linux/start_up.c:59:
+			   normally.*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#787: FILE: arch/um/os-Linux/start_up.c:62:
+		ret = 0; /*Expected in check_ptrace and check_sysemu when they
+			   succeed in modifying the stack frame*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#787: FILE: arch/um/os-Linux/start_up.c:62:
+			   succeed in modifying the stack frame*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#790: FILE: arch/um/os-Linux/start_up.c:65:
+		ret = 2; /*Serious trouble! This could be caused by a bug in
+			   host 2.6 SKAS3/2.6 patch before release -V6, together

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#791: FILE: arch/um/os-Linux/start_up.c:66:
+			   with a bug in the UML code itself.*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: arch/um/os-Linux/start_up.c:75:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#803: FILE: arch/um/os-Linux/start_up.c:78:
+	if(stack == MAP_FAILED)

CHECK:SPACING: No space is necessary after a cast
#805: FILE: arch/um/os-Linux/start_up.c:80:
+	sp = (unsigned long) stack + PAGE_SIZE - sizeof(void *);

CHECK:SPACING: No space is necessary after a cast
#806: FILE: arch/um/os-Linux/start_up.c:81:
+	pid = clone(ptrace_child, (void *) sp, SIGCHLD, NULL);

ERROR:SPACING: space required before the open parenthesis '('
#807: FILE: arch/um/os-Linux/start_up.c:82:
+	if(pid < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'start_ptraced_child', this function's name, in a string
#808: FILE: arch/um/os-Linux/start_up.c:83:
+		panic("start_ptraced_child : clone failed, errno = %d", errno);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#810: FILE: arch/um/os-Linux/start_up.c:85:
+	if(n < 0)

ERROR:SPACING: space required before the open parenthesis '('
#812: FILE: arch/um/os-Linux/start_up.c:87:
+	if(!WIFSTOPPED(status) || (WSTOPSIG(status) != SIGSTOP))

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#817: FILE: arch/um/os-Linux/start_up.c:92:
+	return(pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: arch/um/os-Linux/start_up.c:95:
+/* When testing for SYSEMU support, if it is one of the broken versions, we $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: arch/um/os-Linux/start_up.c:96:
+ * must just avoid using sysemu, not panic, but only if SYSEMU features are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: arch/um/os-Linux/start_up.c:101:
+static int stop_ptraced_child(int pid, void *stack, int exitcode, $

ERROR:SPACING: space required before the open parenthesis '('
#831: FILE: arch/um/os-Linux/start_up.c:106:
+	if(ptrace(PTRACE_CONT, pid, 0, 0) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#834: FILE: arch/um/os-Linux/start_up.c:109:
+	if(!WIFEXITED(status) || (WEXITSTATUS(status) != exitcode)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#836: FILE: arch/um/os-Linux/start_up.c:111:
+		int exit_with = WEXITSTATUS(status);
+		if (exit_with == 2)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#837: FILE: arch/um/os-Linux/start_up.c:112:
+			printk("check_ptrace : child exited with status 2. "

WARNING:SPLIT_STRING: quoted string split across lines
#838: FILE: arch/um/os-Linux/start_up.c:113:
+			printk("check_ptrace : child exited with status 2. "
+			       "Serious trouble happening! Try updating your "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#839: FILE: arch/um/os-Linux/start_up.c:114:
+			       "Serious trouble happening! Try updating your "
+			       "host skas patch!\nDisabling SYSEMU support.");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#840: FILE: arch/um/os-Linux/start_up.c:115:
+		printk("check_ptrace : child exited with exitcode %d, while "

WARNING:SPLIT_STRING: quoted string split across lines
#841: FILE: arch/um/os-Linux/start_up.c:116:
+		printk("check_ptrace : child exited with exitcode %d, while "
+		      "expecting %d; status 0x%x", exit_with,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#846: FILE: arch/um/os-Linux/start_up.c:121:
+			printk("\n");

ERROR:SPACING: space required before the open parenthesis '('
#850: FILE: arch/um/os-Linux/start_up.c:125:
+	if(munmap(stack, PAGE_SIZE) < 0)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#858: FILE: arch/um/os-Linux/start_up.c:133:
+static int __init skas0_cmd_param(char *str, int* add)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#860: FILE: arch/um/os-Linux/start_up.c:135:
+	ptrace_faultinfo = proc_mm = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: arch/um/os-Linux/start_up.c:140:
+__uml_setup("skas0", skas0_cmd_param,
+		"skas0\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#866: FILE: arch/um/os-Linux/start_up.c:141:
+		"    Disables SKAS3 usage, so that SKAS0 is used, unless \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#867: FILE: arch/um/os-Linux/start_up.c:142:
+^I        "    you specify mode=tt.\n\n");$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#869: FILE: arch/um/os-Linux/start_up.c:144:
+static int force_sysemu_disabled = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#871: FILE: arch/um/os-Linux/start_up.c:146:
+static int __init nosysemu_cmd_param(char *str, int* add)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: arch/um/os-Linux/start_up.c:153:
+__uml_setup("nosysemu", nosysemu_cmd_param,
+"nosysemu\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#883: FILE: arch/um/os-Linux/start_up.c:158:
+"    See http://perso.wanadoo.fr/laurent.vivier/UML/ for further \n"

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#889: FILE: arch/um/os-Linux/start_up.c:164:
+	int pid, syscall, n, status, count=0;
 	                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#891: FILE: arch/um/os-Linux/start_up.c:166:
+	printk("Checking syscall emulation patch for ptrace...");

ERROR:SPACING: space required before the open parenthesis '('
#895: FILE: arch/um/os-Linux/start_up.c:170:
+	if(ptrace(PTRACE_SYSEMU, pid, 0, 0) < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_sysemu', this function's name, in a string
#900: FILE: arch/um/os-Linux/start_up.c:175:
+		panic("check_sysemu : wait failed, errno = %d", errno);

ERROR:SPACING: space required before the open parenthesis '('
#901: FILE: arch/um/os-Linux/start_up.c:176:
+	if(!WIFSTOPPED(status) || (WSTOPSIG(status) != SIGTRAP))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_sysemu', this function's name, in a string
#902: FILE: arch/um/os-Linux/start_up.c:177:
+		panic("check_sysemu : expected SIGTRAP, "

WARNING:SPLIT_STRING: quoted string split across lines
#903: FILE: arch/um/os-Linux/start_up.c:178:
+		panic("check_sysemu : expected SIGTRAP, "
+		      "got status = %d", status);

ERROR:SPACING: space required before the open parenthesis '('
#907: FILE: arch/um/os-Linux/start_up.c:182:
+	if(n < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_sysemu', this function's name, in a string
#908: FILE: arch/um/os-Linux/start_up.c:183:
+		panic("check_sysemu : failed to modify system "

WARNING:SPLIT_STRING: quoted string split across lines
#909: FILE: arch/um/os-Linux/start_up.c:184:
+		panic("check_sysemu : failed to modify system "
+		      "call return, errno = %d", errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#915: FILE: arch/um/os-Linux/start_up.c:190:
+	printk("OK\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#918: FILE: arch/um/os-Linux/start_up.c:193:
+	printk("Checking advanced syscall emulation patch for ptrace...");

ERROR:SPACING: space required before the open brace '{'
#920: FILE: arch/um/os-Linux/start_up.c:195:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#920: FILE: arch/um/os-Linux/start_up.c:195:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#922: FILE: arch/um/os-Linux/start_up.c:197:
+		if(ptrace(PTRACE_SYSEMU_SINGLESTEP, pid, 0, 0) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#925: FILE: arch/um/os-Linux/start_up.c:200:
+		if(n < 0)

ERROR:SPACING: space required before the open parenthesis '('
#927: FILE: arch/um/os-Linux/start_up.c:202:
+		if(!WIFSTOPPED(status) || (WSTOPSIG(status) != SIGTRAP))

WARNING:SPLIT_STRING: quoted string split across lines
#929: FILE: arch/um/os-Linux/start_up.c:204:
+			panic("check_ptrace : expected (SIGTRAP|SYSCALL_TRAP), "
+			      "got status = %d", status);

ERROR:SPACING: space required before the open brace '{'
#933: FILE: arch/um/os-Linux/start_up.c:208:
+		if(syscall == __NR_getpid){

ERROR:SPACING: space required before the open parenthesis '('
#933: FILE: arch/um/os-Linux/start_up.c:208:
+		if(syscall == __NR_getpid){

ERROR:SPACING: space required before the open parenthesis '('
#938: FILE: arch/um/os-Linux/start_up.c:213:
+			if(n < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_sysemu', this function's name, in a string
#939: FILE: arch/um/os-Linux/start_up.c:214:
+				panic("check_sysemu : failed to modify system "

WARNING:SPLIT_STRING: quoted string split across lines
#940: FILE: arch/um/os-Linux/start_up.c:215:
+				panic("check_sysemu : failed to modify system "
+				      "call return, errno = %d", errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#948: FILE: arch/um/os-Linux/start_up.c:223:
+	printk("OK\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#950: FILE: arch/um/os-Linux/start_up.c:225:
+	if ( !force_sysemu_disabled )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#950: FILE: arch/um/os-Linux/start_up.c:225:
+	if ( !force_sysemu_disabled )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#957: FILE: arch/um/os-Linux/start_up.c:232:
+	printk("missing\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#965: FILE: arch/um/os-Linux/start_up.c:240:
+	printk("Checking that ptrace can change system call numbers...");

ERROR:SPACING: space required before the open parenthesis '('
#968: FILE: arch/um/os-Linux/start_up.c:243:
+	if(ptrace(PTRACE_OLDSETOPTIONS, pid, 0, (void *)PTRACE_O_TRACESYSGOOD) < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_ptrace', this function's name, in a string
#969: FILE: arch/um/os-Linux/start_up.c:244:
+		panic("check_ptrace: PTRACE_OLDSETOPTIONS failed, errno = %d", errno);

ERROR:SPACING: space required before the open brace '{'
#971: FILE: arch/um/os-Linux/start_up.c:246:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#971: FILE: arch/um/os-Linux/start_up.c:246:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#972: FILE: arch/um/os-Linux/start_up.c:247:
+		if(ptrace(PTRACE_SYSCALL, pid, 0, 0) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#973: FILE: arch/um/os-Linux/start_up.c:248:
+^I^I^Ipanic("check_ptrace : ptrace failed, errno = %d", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_ptrace', this function's name, in a string
#973: FILE: arch/um/os-Linux/start_up.c:248:
+			panic("check_ptrace : ptrace failed, errno = %d", 

ERROR:SPACING: space required before the open parenthesis '('
#976: FILE: arch/um/os-Linux/start_up.c:251:
+		if(n < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_ptrace', this function's name, in a string
#977: FILE: arch/um/os-Linux/start_up.c:252:
+			panic("check_ptrace : wait failed, errno = %d", errno);

ERROR:SPACING: space required before the open parenthesis '('
#978: FILE: arch/um/os-Linux/start_up.c:253:
+		if(!WIFSTOPPED(status) || (WSTOPSIG(status) != SIGTRAP + 0x80))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_ptrace', this function's name, in a string
#979: FILE: arch/um/os-Linux/start_up.c:254:
+			panic("check_ptrace : expected SIGTRAP + 0x80, "

WARNING:SPLIT_STRING: quoted string split across lines
#980: FILE: arch/um/os-Linux/start_up.c:255:
+			panic("check_ptrace : expected SIGTRAP + 0x80, "
+			      "got status = %d", status);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#981: FILE: arch/um/os-Linux/start_up.c:256:
+^I^I$

ERROR:SPACING: space required before the open brace '{'
#984: FILE: arch/um/os-Linux/start_up.c:259:
+		if(syscall == __NR_getpid){

ERROR:SPACING: space required before the open parenthesis '('
#984: FILE: arch/um/os-Linux/start_up.c:259:
+		if(syscall == __NR_getpid){

ERROR:SPACING: space required before the open parenthesis '('
#987: FILE: arch/um/os-Linux/start_up.c:262:
+			if(n < 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_ptrace', this function's name, in a string
#988: FILE: arch/um/os-Linux/start_up.c:263:
+				panic("check_ptrace : failed to modify system "

WARNING:SPLIT_STRING: quoted string split across lines
#989: FILE: arch/um/os-Linux/start_up.c:264:
+				panic("check_ptrace : failed to modify system "
+				      "call, errno = %d", errno);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#994: FILE: arch/um/os-Linux/start_up.c:269:
+	printk("OK\n");

ERROR:SPACING: space required before the open parenthesis '('
#1016: FILE: arch/um/os-Linux/start_up.c:291:
+		if(errno == EIO)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1020: FILE: arch/um/os-Linux/start_up.c:295:
+^I} $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1021: FILE: arch/um/os-Linux/start_up.c:296:
+	} 
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1021: FILE: arch/um/os-Linux/start_up.c:296:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1036: FILE: arch/um/os-Linux/start_up.c:311:
+ ^I^Iproc_mm = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1036: FILE: arch/um/os-Linux/start_up.c:311:
+ ^I^Iproc_mm = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: arch/um/os-Linux/start_up.c:311:
+ ^I^Iproc_mm = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: arch/um/os-Linux/start_up.c:313:
+^I} $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1039: FILE: arch/um/os-Linux/start_up.c:314:
+	} 
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1039: FILE: arch/um/os-Linux/start_up.c:314:
+	else {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1052: FILE: arch/um/os-Linux/start_up.c:327:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1060: FILE: arch/um/os-Linux/tt.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1060: FILE: arch/um/os-Linux/tt.c:1:
+/* 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1105: FILE: arch/um/os-Linux/tt.c:46:
+	int (*tramp)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: No space is necessary after a cast
#1122: FILE: arch/um/os-Linux/tt.c:63:
+	t->pid = clone(t->tramp, (void *) t->temp_stack + page_size()/2,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1122: FILE: arch/um/os-Linux/tt.c:63:
+	t->pid = clone(t->tramp, (void *) t->temp_stack + page_size()/2,
 	                                                             ^

ERROR:SPACING: space required before the open parenthesis '('
#1124: FILE: arch/um/os-Linux/tt.c:65:
+	if(t->pid > 0) wait_for_stop(t->pid, SIGSTOP, PTRACE_CONT, NULL);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1124: FILE: arch/um/os-Linux/tt.c:65:
+	if(t->pid > 0) wait_for_stop(t->pid, SIGSTOP, PTRACE_CONT, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1129: FILE: arch/um/os-Linux/tt.c:70:
+int start_fork_tramp(void *thread_arg, unsigned long temp_stack, $

CHECK:SPACING: No space is necessary after a cast
#1147: FILE: arch/um/os-Linux/tt.c:88:
+	new_pid = clone(outer_tramp, (void *) sp, clone_flags, &arg);

ERROR:SPACING: space required before the open parenthesis '('
#1148: FILE: arch/um/os-Linux/tt.c:89:
+	if(new_pid < 0)

ERROR:SPACING: space required before the open parenthesis '('
#1152: FILE: arch/um/os-Linux/tt.c:93:
+	if(err < 0)

ERROR:SPACING: space required before the open parenthesis '('
#1156: FILE: arch/um/os-Linux/tt.c:97:
+	if(!WIFSIGNALED(status) || (WTERMSIG(status) != SIGKILL))

WARNING:SPLIT_STRING: quoted string split across lines
#1158: FILE: arch/um/os-Linux/tt.c:99:
+		panic("outer trampoline didn't exit with SIGKILL, "
+		      "status = %d", status);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1160: FILE: arch/um/os-Linux/tt.c:101:
+	return(arg.pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1167: FILE: arch/um/os-Linux/tt.c:108:
+^Iif(sigpending(&sigs)) $

ERROR:SPACING: space required before the open parenthesis '('
#1167: FILE: arch/um/os-Linux/tt.c:108:
+	if(sigpending(&sigs)) 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'forward_pending_sigio', this function's name, in a string
#1168: FILE: arch/um/os-Linux/tt.c:109:
+		panic("forward_pending_sigio : sigpending failed");

ERROR:SPACING: space required before the open parenthesis '('
#1169: FILE: arch/um/os-Linux/tt.c:110:
+	if(sigismember(&sigs, SIGIO))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155212.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 76 errors, 55 warnings, 25 checks, 645 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155212.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
