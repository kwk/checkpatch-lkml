WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
--- ../2.4.16.uml.clean/arch/um/fs/hostfs/hostfs_kern.c	Wed Jan  2 04:42:37 2002

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#52: FILE: drivers/block/rd.c:676:
+	if ((inode = get_empty_inode(NULL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#61: FILE: drivers/block/rd.c:686:
+	if ((out_inode = get_empty_inode(NULL)) == NULL)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:INDENTED_LABEL: labels should not be indented
#74: FILE: fs/ext2/super.c:802:
+	owner:		THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#75: FILE: fs/ext2/super.c:803:
+	fs_flags:	FS_REQUIRES_DEV,
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#75: FILE: fs/ext2/super.c:803:
+	fs_flags:	FS_REQUIRES_DEV,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#76: FILE: fs/ext2/super.c:804:
+	name:		"ext2",
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#76: FILE: fs/ext2/super.c:804:
+	name:		"ext2",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#77: FILE: fs/ext2/super.c:805:
+	read_super:	ext2_read_super,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#77: FILE: fs/ext2/super.c:805:
+	read_super:	ext2_read_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#78: FILE: fs/ext2/super.c:806:
+	super_size:	sizeof(struct ext2_sb_info),
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#78: FILE: fs/ext2/super.c:806:
+	super_size:	sizeof(struct ext2_sb_info),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#79: FILE: fs/ext2/super.c:807:
+	inode_size:	sizeof(struct ext2_inode_info)
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#79: FILE: fs/ext2/super.c:807:
+	inode_size:	sizeof(struct ext2_inode_info)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: fs/ext2/super.c:809:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: fs/ext2/super.c:809:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: fs/ext2/super.c:812:
+        return register_filesystem(&ext2_fs);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: fs/ext2/super.c:812:
+        return register_filesystem(&ext2_fs);$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#104: FILE: fs/inode.c:78:
+static inline struct inode *alloc_inode (struct super_block *sb)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#106: FILE: fs/inode.c:80:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#106: FILE: fs/inode.c:80:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                                                 ^

CHECK:SPACING: No space is necessary after a cast
#107: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#107: FILE: fs/inode.c:81:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#107: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#107: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);
 	                                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#107: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);
 	                                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: fs/inode.c:84:
+static void destroy_inode (struct inode *inode) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#110: FILE: fs/inode.c:84:
+static void destroy_inode (struct inode *inode) 

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#113: FILE: fs/inode.c:87:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#113: FILE: fs/inode.c:87:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: fs/inode.c:90:
+	kmem_cache_free (cache? cache: inode_cachep, inode);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#117: FILE: fs/inode.c:90:
+	kmem_cache_free (cache? cache: inode_cachep, inode);
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#117: FILE: fs/inode.c:90:
+	kmem_cache_free (cache? cache: inode_cachep, inode);
 	                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#127: FILE: fs/inode.c:98:
+static void init_once (void *p, kmem_cache_t *cache, unsigned long flags)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#133: FILE: fs/inode.c:100:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) == SLAB_CTOR_CONSTRUCTOR)
 	                              ^

CHECK:SPACING: No space is necessary after a cast
#136: FILE: fs/inode.c:102:
+		struct inode *inode = (struct inode *) p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: fs/inode.c:103:
+		struct inode *inode = (struct inode *) p;
+		kmem_cache_clear (cache, inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#137: FILE: fs/inode.c:103:
+		kmem_cache_clear (cache, inode);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#153: FILE: fs/inode.c:732:
+#if 0

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#158: FILE: fs/inode.c:737:
+		kmem_cache_shrink (fs->inode_cache);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#170: FILE: fs/inode.c:780:
+static void clean_inode (struct super_block *sb, struct inode *inode)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#176: FILE: fs/inode.c:785:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#176: FILE: fs/inode.c:785:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
 	                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#176: FILE: fs/inode.c:785:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
 	                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: fs/inode.c:786:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
+	memset(&inode->u, 0, given? given: sizeof(inode->u));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#177: FILE: fs/inode.c:786:
+	memset(&inode->u, 0, given? given: sizeof(inode->u));
 	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#177: FILE: fs/inode.c:786:
+	memset(&inode->u, 0, given? given: sizeof(inode->u));
 	                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#187: FILE: fs/inode.c:819:
+struct inode *get_empty_inode (struct super_block *sb)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#196: FILE: fs/inode.c:825:
+	inode = alloc_inode (sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#221: FILE: fs/inode.c:854:
+	inode = alloc_inode (sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#249: FILE: fs/inode.c:913:
+int create_inode_cache (struct file_system_type *fs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: fs/inode.c:916:
+^I^Iif (!(fs->inode_cache = kmem_cache_create (fs->name, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: fs/inode.c:916:
+		if (!(fs->inode_cache = kmem_cache_create (fs->name, 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#252: FILE: fs/inode.c:916:
+		if (!(fs->inode_cache = kmem_cache_create (fs->name, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: fs/inode.c:917:
+		if (!(fs->inode_cache = kmem_cache_create (fs->name, 
+		    fs->inode_size + sizeof(struct inode) - sizeof(get_empty_inode(0)->u),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#259: FILE: fs/inode.c:923:
+int destroy_inode_cache (struct file_system_type *fs)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#261: FILE: fs/inode.c:925:
+	return kmem_cache_destroy (fs->inode_cache)? -EBUSY: 0;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#261: FILE: fs/inode.c:925:
+	return kmem_cache_destroy (fs->inode_cache)? -EBUSY: 0;
 	                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#261: FILE: fs/inode.c:925:
+	return kmem_cache_destroy (fs->inode_cache)? -EBUSY: 0;
 	                                                   ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: fs/super.c:108:
+int register_filesystem (struct file_system_type *fs)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#300: FILE: fs/super.c:123:
+		if (!(err = create_inode_cache (fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#300: FILE: fs/super.c:123:
+		if (!(err = create_inode_cache (fs)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#313: FILE: fs/super.c:141:
+int unregister_filesystem (struct file_system_type *fs)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#327: FILE: fs/super.c:149:
+			if (fs->inode_cache && (err = destroy_inode_cache (fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#327: FILE: fs/super.c:149:
+			if (fs->inode_cache && (err = destroy_inode_cache (fs)))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#364: FILE: include/linux/fs.h:958:
+	unsigned super_size, inode_size;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#378: FILE: include/linux/fs.h:1337:
+extern struct inode *get_empty_inode (struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#378: FILE: include/linux/fs.h:1337:
+extern struct inode *get_empty_inode (struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#381: FILE: include/linux/fs.h:1339:
+static inline struct inode *new_inode (struct super_block *sb)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#393: FILE: include/linux/fs.h:1349:
+int create_inode_cache (struct file_system_type *fs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#394: FILE: include/linux/fs.h:1350:
+int destroy_inode_cache (struct file_system_type *fs);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: include/linux/slab.h:59:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#405: FILE: include/linux/slab.h:59:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#405: FILE: include/linux/slab.h:59:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#415: FILE: mm/slab.c:1079:
+void kmem_cache_clear (kmem_cache_t *cachep, void *objp)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#417: FILE: mm/slab.c:1081:
+	unsigned size = cachep->objsize;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#420: FILE: mm/slab.c:1084:
+		size -= BYTES_PER_WORD*2;
 		                      ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000488120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 51 warnings, 7 checks, 374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000488120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
