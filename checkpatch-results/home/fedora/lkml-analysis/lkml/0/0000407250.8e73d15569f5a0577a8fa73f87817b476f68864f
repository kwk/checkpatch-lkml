WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
D: The new format is fairly simple: built on top of __module_param_call there

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#139: FILE: include/linux/init.h:161:
+/* This means "can be init if no module support, otherwise module load
+   may call it." */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#139: FILE: include/linux/init.h:161:
+   may call it." */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#149: FILE: include/linux/init.h:171:
 #define __devinit

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#150: FILE: include/linux/init.h:172:
 #define __devinitdata

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/kernel.h:74:
+extern char *get_options(const char *str, int nints, int *ints);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#167: FILE: include/linux/moduleparam.h:1:
+#ifndef _LINUX_MODULE_PARAMS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#174: FILE: include/linux/moduleparam.h:8:
+/* You can override this manually, but generally this should match the
+   module name. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#174: FILE: include/linux/moduleparam.h:8:
+   module name. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#203: FILE: include/linux/moduleparam.h:37:
+/* This is the fundamental function for registering boot/module
+   parameters.  perm sets the visibility in driverfs: 000 means it's

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#205: FILE: include/linux/moduleparam.h:39:
+   writable. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#209: FILE: include/linux/moduleparam.h:43:
+		 __attribute__ ((unused,__section__ ("__param")))	\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#209: FILE: include/linux/moduleparam.h:43:
+		 __attribute__ ((unused,__section__ ("__param")))	\
 		                       ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__param") over __attribute__((__section__("__param")))
#209: FILE: include/linux/moduleparam.h:43:
+		 __attribute__ ((unused,__section__ ("__param")))	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#209: FILE: include/linux/moduleparam.h:43:
+		 __attribute__ ((unused,__section__ ("__param")))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#210: FILE: include/linux/moduleparam.h:44:
+		 __attribute__ ((unused,__section__ ("__param")))	\
+	= { __param_str_##name, perm, set, get, arg }

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: include/linux/moduleparam.h:50:
+/* Helper functions: type is byte, short, ushort, int, uint, long,
+   ulong, charp, bool or invbool, or XXX if you define param_get_XXX,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: include/linux/moduleparam.h:51:
+   param_set_XXX and param_check_XXX. */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#218: FILE: include/linux/moduleparam.h:52:
+#define module_param_named(name, value, type, perm)			   \
+	param_check_##type(name, &(value));				   \
+	module_param_call(name, param_set_##type, param_get_##type, &value, perm)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#218: FILE: include/linux/moduleparam.h:52:
+#define module_param_named(name, value, type, perm)			   \
+	param_check_##type(name, &(value));				   \
+	module_param_call(name, param_set_##type, param_get_##type, &value, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#218: FILE: include/linux/moduleparam.h:52:
+#define module_param_named(name, value, type, perm)			   \
+	param_check_##type(name, &(value));				   \
+	module_param_call(name, param_set_##type, param_get_##type, &value, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#222: FILE: include/linux/moduleparam.h:56:
+#define module_param(name, type, perm)				\
+	module_param_named(name, name, type, perm)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#228: FILE: include/linux/moduleparam.h:62:
+	static struct kparam_string __param_string_##name __initdata	\
+		= { len, string };					\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: include/linux/moduleparam.h:67:
+extern int parse_args(const char *name,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#236: FILE: include/linux/moduleparam.h:70:
+		      unsigned num,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#241: FILE: include/linux/moduleparam.h:75:
+/* The macros to do compile-time type checking stolen from Jakub
+   Jelinek, who IIRC came up with this idea for the 2.4 module init code. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#241: FILE: include/linux/moduleparam.h:75:
+   Jelinek, who IIRC came up with this idea for the 2.4 module init code. */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#242: FILE: include/linux/moduleparam.h:76:
+#define __param_check(name, p, type) \
+	static inline type *__check_##name(void) { return(p); }

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#243: FILE: include/linux/moduleparam.h:77:
+	static inline type *__check_##name(void) { return(p); }
 	                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/linux/moduleparam.h:79:
+extern int param_set_short(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/linux/moduleparam.h:80:
+extern int param_get_short(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: include/linux/moduleparam.h:83:
+extern int param_set_ushort(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/moduleparam.h:84:
+extern int param_get_ushort(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: include/linux/moduleparam.h:87:
+extern int param_set_int(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/linux/moduleparam.h:88:
+extern int param_get_int(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/moduleparam.h:91:
+extern int param_set_uint(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/moduleparam.h:92:
+extern int param_get_uint(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/linux/moduleparam.h:95:
+extern int param_set_long(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/moduleparam.h:96:
+extern int param_get_long(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/linux/moduleparam.h:99:
+extern int param_set_ulong(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: include/linux/moduleparam.h:100:
+extern int param_get_ulong(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/linux/moduleparam.h:103:
+extern int param_set_charp(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/linux/moduleparam.h:104:
+extern int param_get_charp(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#273: FILE: include/linux/moduleparam.h:107:
+extern int param_set_bool(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/linux/moduleparam.h:108:
+extern int param_get_bool(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/moduleparam.h:111:
+extern int param_set_invbool(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/linux/moduleparam.h:112:
+extern int param_get_invbool(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/moduleparam.h:116:
+extern int param_set_intarray(const char *val, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/moduleparam.h:117:
+extern int param_get_intarray(char *buffer, struct kernel_param *kp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/moduleparam.h:120:
+extern int param_set_copystring(const char *val, struct kernel_param *kp);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#314: FILE: init/main.c:143:
+	extern struct obs_kernel_param __setup_start, __setup_end;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#333: FILE: init/main.c:227:
+/* Unknown boot options get handed to init, unless they look like
+   failed parameters */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#333: FILE: init/main.c:227:
+   failed parameters */

WARNING:TYPO_SPELLING: 'mispelled' may be misspelled - perhaps 'misspelled'?
#376: FILE: init/main.c:238:
+	/* Preemptive maintenance for "why didn't my mispelled command
 	                                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: init/main.c:239:
+           line work?" */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#377: FILE: init/main.c:239:
+	/* Preemptive maintenance for "why didn't my mispelled command
+           line work?" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#377: FILE: init/main.c:239:
+           line work?" */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: init/main.c:241:
+		printk(KERN_ERR "Unknown boot option `%s': ignoring\n", param);

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: init/main.c:248:
+		unsigned int i;
+		for (i = 0; envp_init[i]; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: init/main.c:256:
+		unsigned int i;
+		for (i = 0; argv_init[i]; i++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#412: FILE: init/main.c:258:
+				panic("Too many boot init vars at `%s'",param);
 				                                       ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#429: FILE: init/main.c:358:
+	extern struct kernel_param __start___param, __stop___param;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#467: FILE: kernel/params.c:1:
+/* Helpers for initial module or kernel cmdline parsing

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#468: FILE: kernel/params.c:2:
+/* Helpers for initial module or kernel cmdline parsing
+   Copyright (C) 2001 Rusty Russell.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#481: FILE: kernel/params.c:15:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#482: FILE: kernel/params.c:16:
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#490: FILE: kernel/params.c:24:
+#if 0

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#493: FILE: kernel/params.c:27:
+#define DEBUGP(fmt , ...)
                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: kernel/params.c:32:
+^I^I     struct kernel_param *params, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#499: FILE: kernel/params.c:33:
+		     unsigned num_params,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#530: FILE: kernel/params.c:64:
+	while (*args == ' ') args++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#546: FILE: kernel/params.c:80:
+	if (!equals)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#548: FILE: kernel/params.c:82:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#553: FILE: kernel/params.c:87:
+	if (args[i]) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#556: FILE: kernel/params.c:90:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#564: FILE: kernel/params.c:98:
+	       unsigned num,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#578: FILE: kernel/params.c:112:
+			printk(KERN_ERR "%s: Unknown parameter `%s'\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#582: FILE: kernel/params.c:116:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#589: FILE: kernel/params.c:123:
+			printk(KERN_ERR

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#601: FILE: kernel/params.c:135:
+#define STANDARD_PARAM_DEF(name, type, format, tmptype, strtolfn)      ^I\$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#607: FILE: kernel/params.c:141:
+		if (!val) return -EINVAL;				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#629: FILE: kernel/params.c:163:
+		printk(KERN_ERR "%s: string parameter expected\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#635: FILE: kernel/params.c:169:
+		printk(KERN_ERR "%s: string parameter too long\n",

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#652: FILE: kernel/params.c:186:
+	if (!val) val = "1";

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#709: FILE: kernel/params.c:243:
+		printk(KERN_ERR "%s: expects arguments\n", name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#719: FILE: kernel/params.c:253:
+			printk(KERN_ERR "%s: can only take %i arguments\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#734: FILE: kernel/params.c:268:
+		val += len+1;
 		          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#739: FILE: kernel/params.c:273:
+		printk(KERN_ERR "%s: needs at least %i arguments\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#775: FILE: kernel/params.c:309:
+	if (strlen(val)+1 > kps->maxlen) {
 	               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#776: FILE: kernel/params.c:310:
+		printk(KERN_ERR "%s: string doesn't fit in %u chars.\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#777: FILE: kernel/params.c:311:
+		       kp->name, kps->maxlen-1);
 		                            ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#784: FILE: kernel/params.c:318:
+EXPORT_SYMBOL(param_set_short);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#785: FILE: kernel/params.c:319:
+EXPORT_SYMBOL(param_get_short);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#786: FILE: kernel/params.c:320:
+EXPORT_SYMBOL(param_set_ushort);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#787: FILE: kernel/params.c:321:
+EXPORT_SYMBOL(param_get_ushort);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#788: FILE: kernel/params.c:322:
+EXPORT_SYMBOL(param_set_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#789: FILE: kernel/params.c:323:
+EXPORT_SYMBOL(param_get_int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#790: FILE: kernel/params.c:324:
+EXPORT_SYMBOL(param_set_uint);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#791: FILE: kernel/params.c:325:
+EXPORT_SYMBOL(param_get_uint);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#792: FILE: kernel/params.c:326:
+EXPORT_SYMBOL(param_set_long);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#793: FILE: kernel/params.c:327:
+EXPORT_SYMBOL(param_get_long);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#794: FILE: kernel/params.c:328:
+EXPORT_SYMBOL(param_set_ulong);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#795: FILE: kernel/params.c:329:
+EXPORT_SYMBOL(param_get_ulong);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#796: FILE: kernel/params.c:330:
+EXPORT_SYMBOL(param_set_charp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#797: FILE: kernel/params.c:331:
+EXPORT_SYMBOL(param_get_charp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#798: FILE: kernel/params.c:332:
+EXPORT_SYMBOL(param_set_bool);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#799: FILE: kernel/params.c:333:
+EXPORT_SYMBOL(param_get_bool);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#800: FILE: kernel/params.c:334:
+EXPORT_SYMBOL(param_set_invbool);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#801: FILE: kernel/params.c:335:
+EXPORT_SYMBOL(param_get_invbool);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#802: FILE: kernel/params.c:336:
+EXPORT_SYMBOL(param_set_intarray);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#803: FILE: kernel/params.c:337:
+EXPORT_SYMBOL(param_get_intarray);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#804: FILE: kernel/params.c:338:
+EXPORT_SYMBOL(param_set_copystring);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#819: FILE: lib/cmdline.c:72:
+		res = get_option ((char **)&str, ints + i);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407250.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 65 warnings, 36 checks, 736 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407250.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
