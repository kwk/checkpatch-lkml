WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -u -p linux/net/irda/ircomm/ircomm_tty.d7.c linux/net/irda/ircomm/ircomm_tty.c

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#44: FILE: net/irda/ircomm/ircomm_tty.c:456:
 	    (self->flags & ASYNC_CLOSING)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#53: FILE: net/irda/ircomm/ircomm_tty.c:465:
+		if (wait_event_interruptible(self->close_wait, !(self->flags&ASYNC_CLOSING))) {
 		                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#55: FILE: net/irda/ircomm/ircomm_tty.c:467:
+				__FUNCTION__);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#81: FILE: net/irda/af_irda.c:579:
+	if (wait_event_interruptible(self->query_wait, (self->iriap==NULL)))
 	                                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->iriap==NULL'
#81: FILE: net/irda/af_irda.c:579:
+	if (wait_event_interruptible(self->query_wait, (self->iriap==NULL)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->iriap"
#81: FILE: net/irda/af_irda.c:579:
+	if (wait_event_interruptible(self->query_wait, (self->iriap==NULL)))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#100: FILE: net/irda/af_irda.c:884:
+	 * We can perform the accept only if there is incomming data
 	                                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#100: FILE: net/irda/af_irda.c:884:
+	/*
+	 * We can perform the accept only if there is incomming data

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#108: FILE: net/irda/af_irda.c:892:
+	if (skb == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#120: FILE: net/irda/af_irda.c:904:
+		 * skb get dequeued - Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#125: FILE: net/irda/af_irda.c:909:
+			if (skb != NULL)

ERROR:SPACING: space required before the open parenthesis '('
#137: FILE: net/irda/af_irda.c:920:
+		if(ret)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#160: FILE: net/irda/af_irda.c:1060:
+	if (wait_event_interruptible(*(sk->sleep), (sk->state!=TCP_SYN_SENT)))
 	                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sk->sleep
#160: FILE: net/irda/af_irda.c:1060:
+	if (wait_event_interruptible(*(sk->sleep), (sk->state!=TCP_SYN_SENT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sleep'
#160: FILE: net/irda/af_irda.c:1060:
+	if (wait_event_interruptible(*(sk->sleep), (sk->state!=TCP_SYN_SENT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->state!=TCP_SYN_SENT'
#160: FILE: net/irda/af_irda.c:1060:
+	if (wait_event_interruptible(*(sk->sleep), (sk->state!=TCP_SYN_SENT)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sk->sleep
#182: FILE: net/irda/af_irda.c:1307:
+	if (wait_event_interruptible(*(sk->sleep),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sleep'
#182: FILE: net/irda/af_irda.c:1307:
+	if (wait_event_interruptible(*(sk->sleep),
+	    (self->tx_flow != FLOW_STOP  ||  sk->state != TCP_ESTABLISHED)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: net/irda/af_irda.c:1308:
+	if (wait_event_interruptible(*(sk->sleep),
+	    (self->tx_flow != FLOW_STOP  ||  sk->state != TCP_ESTABLISHED)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sk->sleep
#210: FILE: net/irda/af_irda.c:1417:
+		__wait_event_interruptible(*(sk->sleep),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: net/irda/af_irda.c:1418:
+		__wait_event_interruptible(*(sk->sleep),
+			(skb_peek(&sk->receive_queue)!=NULL), ret);

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#211: FILE: net/irda/af_irda.c:1418:
+			(skb_peek(&sk->receive_queue)!=NULL), ret);
 			                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb_peek"
#211: FILE: net/irda/af_irda.c:1418:
+			(skb_peek(&sk->receive_queue)!=NULL), ret);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->iriap"
#234: FILE: net/irda/af_irda.c:2313:
+		if (self->iriap == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->iriap == NULL'
#252: FILE: net/irda/af_irda.c:2328:
+		if (wait_event_interruptible(self->query_wait,
+					     (self->iriap == NULL))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->iriap"
#253: FILE: net/irda/af_irda.c:2329:
+					     (self->iriap == NULL))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#255: FILE: net/irda/af_irda.c:2331:
+			 * we can free it regardless! */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: net/irda/af_irda.c:2413:
+			__wait_event_interruptible(self->query_wait,
+			   (self->cachediscovery!=NULL || self->errno==-ETIME),

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#290: FILE: net/irda/af_irda.c:2413:
+			   (self->cachediscovery!=NULL || self->errno==-ETIME),
 			                        ^

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#290: FILE: net/irda/af_irda.c:2413:
+			   (self->cachediscovery!=NULL || self->errno==-ETIME),
 			                                             ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#290: FILE: net/irda/af_irda.c:2413:
+			   (self->cachediscovery!=NULL || self->errno==-ETIME),
 			                                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self->cachediscovery"
#290: FILE: net/irda/af_irda.c:2413:
+			   (self->cachediscovery!=NULL || self->errno==-ETIME),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000463462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 6 warnings, 20 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000463462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
