WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:INLINE: plain inline is preferred over __inline__
#59: FILE: sparc64/kernel/ioctl32.c:558:
+static __inline__ void *alloc_user_space(long len)

CHECK:SPACING: No space is necessary after a cast
#104: FILE: sparc64/kernel/ioctl32.c:566:
+	return (void *) (usp - len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: sparc64/kernel/ioctl32.c:575:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#119: FILE: sparc64/kernel/ioctl32.c:577:
+	ifr32 = (struct ifreq32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#141: FILE: sparc64/kernel/ioctl32.c:585:
+	datap = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#145: FILE: sparc64/kernel/ioctl32.c:589:
+	return sys_ioctl(fd, cmd, (unsigned long) ifr);

CHECK:SPACING: No space is necessary after a cast
#181: FILE: sparc64/kernel/ioctl32.c:1014:
+	datap = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#194: FILE: sparc64/kernel/ioctl32.c:1027:
+	cmap32 = (struct fb_cmap32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#205: FILE: sparc64/kernel/ioctl32.c:1038:
+	err = sys_ioctl(fd, cmd, (unsigned long) cmap);

CHECK:SPACING: No space is necessary after a cast
#224: FILE: sparc64/kernel/ioctl32.c:1057:
+	data = (__u32) (unsigned long) fix->smem_start;

CHECK:SPACING: No space is necessary after a cast
#236: FILE: sparc64/kernel/ioctl32.c:1069:
+	data = (__u32) (unsigned long) fix->mmio_start;

CHECK:SPACING: No space is necessary after a cast
#257: FILE: sparc64/kernel/ioctl32.c:1087:
+	fix32 = (struct fb_fix_screeninfo32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#261: FILE: sparc64/kernel/ioctl32.c:1091:
+	err = sys_ioctl(fd, cmd, (unsigned long) &fix);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: sparc64/kernel/ioctl32.c:1106:
+		err = fb_get_fscreeninfo(fd,cmd, arg);
 		                           ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#354: FILE: sparc64/kernel/ioctl32.c:1122:
+		err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#386: FILE: sparc64/kernel/ioctl32.c:1491:
+	sg_iovec_t *iov = (sg_iovec_t *) (sgio + 1);

CHECK:SPACING: No space is necessary after a cast
#440: FILE: sparc64/kernel/ioctl32.c:1517:
+	sgio32 = (sg_io_hdr32_t *) arg;

CHECK:SPACING: No space is necessary after a cast
#488: FILE: sparc64/kernel/ioctl32.c:1544:
+	dxferp = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#552: FILE: sparc64/kernel/ioctl32.c:1558:
+		cmdp = (unsigned char *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#559: FILE: sparc64/kernel/ioctl32.c:1562:
+		sbp = (unsigned char *) (unsigned long) data;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#600: FILE: sparc64/kernel/ioctl32.c:1580:
+			 (2 * sizeof(unsigned (short))) +

CHECK:SPACING: No space is necessary after a cast
#606: FILE: sparc64/kernel/ioctl32.c:1584:
+	err = sys_ioctl(fd, cmd, (unsigned long) sgio);

CHECK:SPACING: No space is necessary after a cast
#670: FILE: sparc64/kernel/ioctl32.c:1659:
+	idle32 = (struct ppp_idle32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#672: FILE: sparc64/kernel/ioctl32.c:1661:
+	err = sys_ioctl(fd, PPPIOCGIDLE, (unsigned long) idle);

CHECK:SPACING: No space is necessary after a cast
#692: FILE: sparc64/kernel/ioctl32.c:1681:
+	odata32 = (struct ppp_option_data32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#697: FILE: sparc64/kernel/ioctl32.c:1686:
+	datap = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#705: FILE: sparc64/kernel/ioctl32.c:1694:
+	return sys_ioctl(fd, PPPIOCSCOMPRESS, (unsigned long) odata);

CHECK:SPACING: No space is necessary after a cast
#809: FILE: sparc64/kernel/ioctl32.c:1876:
+	cdread_audio32 = (struct cdrom_read_audio32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#819: FILE: sparc64/kernel/ioctl32.c:1886:
+	datap = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#823: FILE: sparc64/kernel/ioctl32.c:1890:
+	return sys_ioctl(fd, cmd, (unsigned long) cdread_audio);

CHECK:SPACING: No space is necessary after a cast
#833: FILE: sparc64/kernel/ioctl32.c:1900:
+	datap = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#847: FILE: sparc64/kernel/ioctl32.c:1914:
+	cgc32 = (struct cdrom_generic_command32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#850: FILE: sparc64/kernel/ioctl32.c:1917:
+	    __cgc_do_ptr((void **) &cgc->buffer, &cgc32->buffer) ||

CHECK:SPACING: No space is necessary after a cast
#853: FILE: sparc64/kernel/ioctl32.c:1920:
+	    __cgc_do_ptr((void **) &cgc->sense, &cgc32->sense))

CHECK:SPACING: No space is necessary after a cast
#867: FILE: sparc64/kernel/ioctl32.c:1934:
+	return sys_ioctl(fd, cmd, (unsigned long) cgc);

CHECK:SPACING: No space is necessary after a cast
#987: FILE: sparc64/kernel/ioctl32.c:2544:
+	iobuf32 = (struct atm_iobuf32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#1007: FILE: sparc64/kernel/ioctl32.c:2549:
+	datap = (void *) (unsigned long) data;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1045: FILE: sparc64/kernel/ioctl32.c:2568:
+        struct atmif_sioc   *sioc;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: sparc64/kernel/ioctl32.c:2568:
+        struct atmif_sioc   *sioc;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1046: FILE: sparc64/kernel/ioctl32.c:2569:
+        struct atmif_sioc32 *sioc32;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: sparc64/kernel/ioctl32.c:2569:
+        struct atmif_sioc32 *sioc32;$

CHECK:SPACING: No space is necessary after a cast
#1056: FILE: sparc64/kernel/ioctl32.c:2575:
+	sioc32 = (struct atmif_sioc32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#1085: FILE: sparc64/kernel/ioctl32.c:2580:
+	datap = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#1089: FILE: sparc64/kernel/ioctl32.c:2584:
+	err = sys_ioctl(fd, cmd, (unsigned long) sioc);

CHECK:SPACING: No space is necessary after a cast
#1155: FILE: sparc64/kernel/ioctl32.c:4246:
+	struct mtd_oob_buf32	*buf32 = (struct mtd_oob_buf32 *) arg;

CHECK:SPACING: No space is necessary after a cast
#1173: FILE: sparc64/kernel/ioctl32.c:4259:
+	datap = (void *) (unsigned long) data;

CHECK:SPACING: No space is necessary after a cast
#1186: FILE: sparc64/kernel/ioctl32.c:4263:
+	err = sys_ioctl(fd, real_cmd, (unsigned long) buf);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 6 warnings, 38 checks, 1163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
