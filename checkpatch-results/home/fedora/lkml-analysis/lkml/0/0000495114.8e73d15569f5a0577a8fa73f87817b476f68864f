WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
diff -Nru linux-2.5.0.vanilla/arch/i386/kernel/entry.S linux-2.5.0.sstc/arch/i386/kernel/entry.S

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init_task") over __attribute__((__section__(".data.init_task")))
#112: FILE: arch/i386/kernel/init_task.c:21:
+struct init_task_struct init_ts __attribute__((__section__(".data.init_task"))) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#113: FILE: arch/i386/kernel/init_task.c:22:
+struct init_task_struct init_ts __attribute__((__section__(".data.init_task"))) =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#114: FILE: arch/i386/kernel/init_task.c:23:
+	stack:	{(unsigned long) &init_ts.ftsk.task, 0, },

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#114: FILE: arch/i386/kernel/init_task.c:23:
+	stack:	{(unsigned long) &init_ts.ftsk.task, 0, },

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#115: FILE: arch/i386/kernel/init_task.c:24:
+	ftsk: {
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#115: FILE: arch/i386/kernel/init_task.c:24:
+	ftsk: {

WARNING:INDENTED_LABEL: labels should not be indented
#116: FILE: arch/i386/kernel/init_task.c:25:
+		task:	INIT_TASK(init_ts.ftsk.task),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#117: FILE: arch/i386/kernel/init_task.c:26:
+		count:	ATOMIC_INIT(1),
 		     ^

WARNING:INDENTED_LABEL: labels should not be indented
#117: FILE: arch/i386/kernel/init_task.c:26:
+		count:	ATOMIC_INIT(1),

CHECK:SPACING: No space is necessary after a cast
#118: FILE: arch/i386/kernel/init_task.c:27:
+		stack:	(unsigned long) init_ts.stack,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#118: FILE: arch/i386/kernel/init_task.c:27:
+		stack:	(unsigned long) init_ts.stack,
 		     ^

WARNING:INDENTED_LABEL: labels should not be indented
#118: FILE: arch/i386/kernel/init_task.c:27:
+		stack:	(unsigned long) init_ts.stack,

CHECK:SPACING: No space is necessary after a cast
#119: FILE: arch/i386/kernel/init_task.c:28:
+		stack_top:	(unsigned long) init_ts.stack + INIT_TASK_SIZE

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#119: FILE: arch/i386/kernel/init_task.c:28:
+		stack_top:	(unsigned long) init_ts.stack + INIT_TASK_SIZE
 		         ^

WARNING:INDENTED_LABEL: labels should not be indented
#119: FILE: arch/i386/kernel/init_task.c:28:
+		stack_top:	(unsigned long) init_ts.stack + INIT_TASK_SIZE

CHECK:SPACING: No space is necessary after a cast
#161: FILE: arch/i386/kernel/process.c:593:
+	childregs = ((struct pt_regs *) (THREAD_SIZE + TSK_TO_KSTACK(p) - get_stack_jitter(p))) - 1;

CHECK:SPACING: No space is necessary after a cast
#167: FILE: arch/i386/kernel/process.c:598:
+	p->thread.esp = TSK_KSTACK_TOP(p) = (unsigned long) childregs;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: arch/i386/kernel/process.c:834:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: arch/i386/kernel/process.c:838:
+static kmem_cache_t * tsk_cache;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: arch/i386/kernel/process.c:843:
+	tsk_cache = kmem_cache_create("task_struct_cache",
+								  sizeof(struct full_task_struct),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#192: FILE: arch/i386/kernel/process.c:850:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#196: FILE: arch/i386/kernel/process.c:854:
+	struct full_task_struct *f = (struct full_task_struct *) kmem_cache_alloc(tsk_cache, GFP_KERNEL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#196: FILE: arch/i386/kernel/process.c:854:
+	struct full_task_struct *f = (struct full_task_struct *) kmem_cache_alloc(tsk_cache, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#206: FILE: arch/i386/kernel/process.c:864:
+	*((struct task_struct **) f->stack) = (struct task_struct *) f;

CHECK:SPACING: No space is necessary after a cast
#207: FILE: arch/i386/kernel/process.c:865:
+	return (struct task_struct *) f;

CHECK:SPACING: No space is necessary after a cast
#212: FILE: arch/i386/kernel/process.c:870:
+	struct full_task_struct *f = (struct full_task_struct *) p;

CHECK:SPACING: No space is necessary after a cast
#228: FILE: arch/i386/kernel/smpboot.c:818:
+	stack_start.esp = (void *) (THREAD_SIZE + (char *) TSK_TO_KSTACK(idle));

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: include/asm-i386/current.h:9:
+	unsigned long *tskptr;
+	__asm__("andl %%esp,%0; ":"=r" (tskptr) : "0" (~8191UL));

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#282: FILE: include/asm-i386/current.h:9:
+	__asm__("andl %%esp,%0; ":"=r" (tskptr) : "0" (~8191UL));
 	                         ^

CHECK:SPACING: No space is necessary after a cast
#283: FILE: include/asm-i386/current.h:10:
+	return (struct task_struct *) *tskptr;

CHECK:SPACING: No space is necessary after a cast
#318: FILE: include/asm-i386/processor.h:449:
+#define KSTK_EIP(tsk)	((unsigned long *) TSK_KSTACK_TOP(tsk))[EIP]

CHECK:SPACING: No space is necessary after a cast
#319: FILE: include/asm-i386/processor.h:450:
+#define KSTK_ESP(tsk)	((unsigned long *) TSK_KSTACK_TOP(tsk))[UESP]

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/asm-i386/processor.h:455:
+extern void init_tsk_allocator(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/asm-i386/processor.h:456:
+extern struct task_struct *alloc_task_struct(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/asm-i386/processor.h:457:
+extern void free_task_struct(struct task_struct *p);

CHECK:SPACING: No space is necessary after a cast
#349: FILE: include/linux/sched.h:510:
+#define TSK_TO_KSTACK(p)	(((struct full_task_struct *) (p))->stack)

CHECK:SPACING: No space is necessary after a cast
#350: FILE: include/linux/sched.h:511:
+#define TSK_KSTACK_TOP(p)	(((struct full_task_struct *) (p))->stack_top)

CHECK:SPACING: No space is necessary after a cast
#351: FILE: include/linux/sched.h:512:
+#define TSK_COUNT(p)	(((struct full_task_struct *) (p))->count)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#381: FILE: init/main.c:600:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 10 warnings, 24 checks, 278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495114.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
