WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
diff -Nur --exclude-from=exclude linux.orig/Documentation/Configure.help linux/Documentation/Configure.help

ERROR:TRAILING_WHITESPACE: trailing whitespace
#45: FILE: Documentation/Configure.help:15661:
+  If you say Y here, the kernel will collect detailed information about $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: Documentation/Configure.help:15662:
+  the VM subsystem. This information will be available in /proc/stats. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#47: FILE: Documentation/Configure.help:15663:
+  More documentation about this option can be found in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#49: FILE: Documentation/Configure.help:15665:
+  This is only useful for kernel hacking. If unsure, say N. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: Documentation/vm/statistics:2:
+Description of the additional fields in /proc/stats which are added by the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: Documentation/vm/statistics:7:
+vm_pglaunder: nr of page_launder() calls $

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#65: FILE: Documentation/vm/statistics:8:
+vm_pglaunder_write: nr of times page_launder() started writting out data to free 
                                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: Documentation/vm/statistics:8:
+vm_pglaunder_write: nr of times page_launder() started writting out data to free $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: Documentation/vm/statistics:12:
+vm_kswapd_wakeup: nr of kswapd wakeup's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: Documentation/vm/statistics:13:
+vm_kreclaimd_wakeup: nr of kreclaimd wakeup's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: Documentation/vm/statistics:14:
+vm_kflushd_wakeup: nr of kflushd wakeup's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: Documentation/vm/statistics:30:
+vm_pgdeactfail_age: nr of deactivation failures on refill_inactive_scan() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: Documentation/vm/statistics:39:
+There is a modified version of vmstat from procps-2.0.7 at $

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: fs/proc/proc_misc.c:341:
+^I^I       ^I"vm_pglaunder %u\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#149: FILE: fs/proc/proc_misc.c:341:
+^I^I       ^I"vm_pglaunder %u\n"$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: fs/proc/proc_misc.c:347:
+^I^I^I"vm_kflushd_wakeup %u\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: fs/proc/proc_misc.c:355:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: include/linux/kernel_stat.h:75:
+^Iunsigned int vm_pgrescue; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: include/linux/kernel_stat.h:79:
+^Iunsigned int vm_pgdeact; $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#229: FILE: include/linux/mm.h:597:
+#define VM_STAT_INC_PGLAUNDER kstat.vm_pglaunder++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#229: FILE: include/linux/mm.h:597:
+#define VM_STAT_INC_PGLAUNDER kstat.vm_pglaunder++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#230: FILE: include/linux/mm.h:598:
+#define VM_STAT_INC_PGLAUNDER_WRITE kstat.vm_pglaunder_write++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#230: FILE: include/linux/mm.h:598:
+#define VM_STAT_INC_PGLAUNDER_WRITE kstat.vm_pglaunder_write++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#231: FILE: include/linux/mm.h:599:
+#define VM_STAT_INC_REFILL_INACTIVE_SCAN kstat.vm_refill_inactive_scan++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#231: FILE: include/linux/mm.h:599:
+#define VM_STAT_INC_REFILL_INACTIVE_SCAN kstat.vm_refill_inactive_scan++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#232: FILE: include/linux/mm.h:600:
+#define VM_STAT_INC_ALLOC_RESCHED kstat.vm_alloc_resched++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#232: FILE: include/linux/mm.h:600:
+#define VM_STAT_INC_ALLOC_RESCHED kstat.vm_alloc_resched++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#233: FILE: include/linux/mm.h:601:
+#define VM_STAT_INC_KSWAPD_WAKEUP kstat.vm_kswapd_wakeup++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#233: FILE: include/linux/mm.h:601:
+#define VM_STAT_INC_KSWAPD_WAKEUP kstat.vm_kswapd_wakeup++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#234: FILE: include/linux/mm.h:602:
+#define VM_STAT_INC_KRECLAIMD_WAKEUP kstat.vm_kreclaimd_wakeup++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#234: FILE: include/linux/mm.h:602:
+#define VM_STAT_INC_KRECLAIMD_WAKEUP kstat.vm_kreclaimd_wakeup++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#235: FILE: include/linux/mm.h:603:
+#define VM_STAT_INC_KFLUSHD_WAKEUP kstat.vm_kflushd_wakeup++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#235: FILE: include/linux/mm.h:603:
+#define VM_STAT_INC_KFLUSHD_WAKEUP kstat.vm_kflushd_wakeup++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: include/linux/mm.h:605:
+/* Per-zone statistics */ $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#239: FILE: include/linux/mm.h:607:
+#define VM_STAT_INC_PGSCAN(zone) zone->stat.vm_launder_pgscan++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#239: FILE: include/linux/mm.h:607:
+#define VM_STAT_INC_PGSCAN(zone) zone->stat.vm_launder_pgscan++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#239: FILE: include/linux/mm.h:607:
+#define VM_STAT_INC_PGSCAN(zone) zone->stat.vm_launder_pgscan++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#240: FILE: include/linux/mm.h:608:
+#define VM_STAT_INC_PGCLEAN(zone) zone->stat.vm_pgclean++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#240: FILE: include/linux/mm.h:608:
+#define VM_STAT_INC_PGCLEAN(zone) zone->stat.vm_pgclean++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#240: FILE: include/linux/mm.h:608:
+#define VM_STAT_INC_PGCLEAN(zone) zone->stat.vm_pgclean++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#241: FILE: include/linux/mm.h:609:
+#define VM_STAT_INC_PGSKIPLOCKED(zone) zone->stat.vm_pgskiplocked++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#241: FILE: include/linux/mm.h:609:
+#define VM_STAT_INC_PGSKIPLOCKED(zone) zone->stat.vm_pgskiplocked++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#241: FILE: include/linux/mm.h:609:
+#define VM_STAT_INC_PGSKIPLOCKED(zone) zone->stat.vm_pgskiplocked++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#242: FILE: include/linux/mm.h:610:
+#define VM_STAT_INC_PGSKIPDIRTY(zone) zone->stat.vm_pgskipdirty++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#242: FILE: include/linux/mm.h:610:
+#define VM_STAT_INC_PGSKIPDIRTY(zone) zone->stat.vm_pgskipdirty++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#242: FILE: include/linux/mm.h:610:
+#define VM_STAT_INC_PGSKIPDIRTY(zone) zone->stat.vm_pgskipdirty++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#243: FILE: include/linux/mm.h:611:
+#define VM_STAT_INC_PGLAUNDERED(zone) zone->stat.vm_pglaundered++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#243: FILE: include/linux/mm.h:611:
+#define VM_STAT_INC_PGLAUNDERED(zone) zone->stat.vm_pglaundered++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#243: FILE: include/linux/mm.h:611:
+#define VM_STAT_INC_PGLAUNDERED(zone) zone->stat.vm_pglaundered++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#244: FILE: include/linux/mm.h:612:
+#define VM_STAT_INC_PGREACT(zone) zone->stat.vm_pgreact++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#244: FILE: include/linux/mm.h:612:
+#define VM_STAT_INC_PGREACT(zone) zone->stat.vm_pgreact++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#244: FILE: include/linux/mm.h:612:
+#define VM_STAT_INC_PGREACT(zone) zone->stat.vm_pgreact++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#245: FILE: include/linux/mm.h:613:
+#define VM_STAT_INC_PGRESCUE(zone) zone->stat.vm_pgrescue++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#245: FILE: include/linux/mm.h:613:
+#define VM_STAT_INC_PGRESCUE(zone) zone->stat.vm_pgrescue++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#245: FILE: include/linux/mm.h:613:
+#define VM_STAT_INC_PGRESCUE(zone) zone->stat.vm_pgrescue++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#246: FILE: include/linux/mm.h:614:
+#define VM_STAT_INC_PGAGESCAN(zone) zone->stat.vm_pgagescan++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#246: FILE: include/linux/mm.h:614:
+#define VM_STAT_INC_PGAGESCAN(zone) zone->stat.vm_pgagescan++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#246: FILE: include/linux/mm.h:614:
+#define VM_STAT_INC_PGAGESCAN(zone) zone->stat.vm_pgagescan++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#247: FILE: include/linux/mm.h:615:
+#define VM_STAT_INC_PGAGEDOWN(zone) zone->stat.vm_pgagedown++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#247: FILE: include/linux/mm.h:615:
+#define VM_STAT_INC_PGAGEDOWN(zone) zone->stat.vm_pgagedown++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#247: FILE: include/linux/mm.h:615:
+#define VM_STAT_INC_PGAGEDOWN(zone) zone->stat.vm_pgagedown++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#248: FILE: include/linux/mm.h:616:
+#define VM_STAT_INC_PGAGEUP(zone) zone->stat.vm_pgageup++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#248: FILE: include/linux/mm.h:616:
+#define VM_STAT_INC_PGAGEUP(zone) zone->stat.vm_pgageup++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#248: FILE: include/linux/mm.h:616:
+#define VM_STAT_INC_PGAGEUP(zone) zone->stat.vm_pgageup++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#249: FILE: include/linux/mm.h:617:
+#define VM_STAT_INC_PGDEACT(zone) zone->stat.vm_pgdeact++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#249: FILE: include/linux/mm.h:617:
+#define VM_STAT_INC_PGDEACT(zone) zone->stat.vm_pgdeact++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#249: FILE: include/linux/mm.h:617:
+#define VM_STAT_INC_PGDEACT(zone) zone->stat.vm_pgdeact++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#250: FILE: include/linux/mm.h:618:
+#define VM_STAT_INC_PGDEACTFAIL_AGE(zone) zone->stat.vm_pgdeactfail_age++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#250: FILE: include/linux/mm.h:618:
+#define VM_STAT_INC_PGDEACTFAIL_AGE(zone) zone->stat.vm_pgdeactfail_age++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#250: FILE: include/linux/mm.h:618:
+#define VM_STAT_INC_PGDEACTFAIL_AGE(zone) zone->stat.vm_pgdeactfail_age++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#251: FILE: include/linux/mm.h:619:
+#define VM_STAT_INC_PGDEACTFAIL_REF(zone) zone->stat.vm_pgdeactfail_ref++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#251: FILE: include/linux/mm.h:619:
+#define VM_STAT_INC_PGDEACTFAIL_REF(zone) zone->stat.vm_pgdeactfail_ref++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#251: FILE: include/linux/mm.h:619:
+#define VM_STAT_INC_PGDEACTFAIL_REF(zone) zone->stat.vm_pgdeactfail_ref++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#252: FILE: include/linux/mm.h:620:
+#define VM_STAT_INC_RECLAIMFAIL(zone) zone->stat.vm_reclaimfail++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#252: FILE: include/linux/mm.h:620:
+#define VM_STAT_INC_RECLAIMFAIL(zone) zone->stat.vm_reclaimfail++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#252: FILE: include/linux/mm.h:620:
+#define VM_STAT_INC_RECLAIMFAIL(zone) zone->stat.vm_reclaimfail++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#253: FILE: include/linux/mm.h:621:
+#define VM_STAT_INC_PTESCAN(zone) zone->stat.vm_ptescan++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#253: FILE: include/linux/mm.h:621:
+#define VM_STAT_INC_PTESCAN(zone) zone->stat.vm_ptescan++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#253: FILE: include/linux/mm.h:621:
+#define VM_STAT_INC_PTESCAN(zone) zone->stat.vm_ptescan++;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#254: FILE: include/linux/mm.h:622:
+#define VM_STAT_INC_PTEUNMAP(zone) zone->stat.vm_pteunmap++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#254: FILE: include/linux/mm.h:622:
+#define VM_STAT_INC_PTEUNMAP(zone) zone->stat.vm_pteunmap++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#254: FILE: include/linux/mm.h:622:
+#define VM_STAT_INC_PTEUNMAP(zone) zone->stat.vm_pteunmap++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#257: FILE: include/linux/mm.h:625:
+#define VM_STAT_INC_PGLAUNDER do { } while (0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#258: FILE: include/linux/mm.h:626:
+#define VM_STAT_INC_PGLAUNDER_WRITE do { } while (0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#259: FILE: include/linux/mm.h:627:
+#define VM_STAT_INC_REFILL_INACTIVE_SCAN do { } while (0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#260: FILE: include/linux/mm.h:628:
+#define VM_STAT_INC_ALLOC_RESCHED do { } while (0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#261: FILE: include/linux/mm.h:629:
+#define VM_STAT_INC_KSWAPD_WAKEUP do { } while (0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#262: FILE: include/linux/mm.h:630:
+#define VM_STAT_INC_KRECLAIMD_WAKEUP do { } while (0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#263: FILE: include/linux/mm.h:631:
+#define VM_STAT_INC_KFLUSHD_WAKEUP do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#265: FILE: include/linux/mm.h:633:
+#define VM_STAT_INC_PGSCAN(zone) do { } while (0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#266: FILE: include/linux/mm.h:634:
+#define VM_STAT_INC_PGCLEAN(zone)  do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#267: FILE: include/linux/mm.h:635:
+#define VM_STAT_INC_PGSKIPLOCKED(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#268: FILE: include/linux/mm.h:636:
+#define VM_STAT_INC_PGSKIPDIRTY(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#269: FILE: include/linux/mm.h:637:
+#define VM_STAT_INC_PGLAUNDERED(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#270: FILE: include/linux/mm.h:638:
+#define VM_STAT_INC_PGREACT(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#271: FILE: include/linux/mm.h:639:
+#define VM_STAT_INC_PGRESCUE(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#272: FILE: include/linux/mm.h:640:
+#define VM_STAT_INC_PGDEACT(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#273: FILE: include/linux/mm.h:641:
+#define VM_STAT_INC_PGAGESCAN(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#274: FILE: include/linux/mm.h:642:
+#define VM_STAT_INC_PGAGEDOWN(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#275: FILE: include/linux/mm.h:643:
+#define VM_STAT_INC_PGAGEUP(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#276: FILE: include/linux/mm.h:644:
+#define VM_STAT_INC_PGDEACT(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#277: FILE: include/linux/mm.h:645:
+#define VM_STAT_INC_PGDEACTFAIL_AGE(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#278: FILE: include/linux/mm.h:646:
+#define VM_STAT_INC_PGDEACTFAIL_REF(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#279: FILE: include/linux/mm.h:647:
+#define VM_STAT_INC_RECLAIMFAIL(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#280: FILE: include/linux/mm.h:648:
+#define VM_STAT_INC_PTESCAN(zone) do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#281: FILE: include/linux/mm.h:649:
+#define VM_STAT_INC_PTEUNMAP(zone) do { } while (0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: include/linux/mm.h:651:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: include/linux/mmzone.h:130:
+extern int get_perzone_vm_stats(char *page, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: include/linux/swap.h:129:
+static inline int zone_free_shortage(zone_t *zone) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: include/linux/swap.h:132:
+	int sum = 0;
+	if (zone->inactive_clean_pages + zone->free_pages

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: include/linux/swap.h:146:
+^Isum -= zone->inactive_dirty_pages; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: include/linux/swap.h:149:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#356: FILE: include/linux/swap.h:154:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#365: FILE: mm/page_alloc.c:327:
 		} else if (z->free_pages < z->pages_min &&
[...]
+				VM_STAT_INC_KRECLAIMD_WAKEUP

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#367: FILE: mm/page_alloc.c:329:
+				VM_STAT_INC_KRECLAIMD_WAKEUP

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#375: FILE: mm/page_alloc.c:377:
+		VM_STAT_INC_ALLOC_RESCHED

WARNING:FUNCTION_ARGUMENTS: function definition argument 'TASK_RUNNING' should also have an identifier name
#375: FILE: mm/page_alloc.c:377:
+		VM_STAT_INC_ALLOC_RESCHED

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#387: FILE: mm/page_alloc.c:628:
+int get_perzone_vm_stats (char *page, int len)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: mm/page_alloc.c:630:
+^Iunsigned type;^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#389: FILE: mm/page_alloc.c:630:
+	unsigned type;	

WARNING:LINE_SPACING: Missing a blank line after declarations
#398: FILE: mm/page_alloc.c:639:
+		zone_t *zone = pgdat->node_zones + type;
+		if (!zone->size)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#401: FILE: mm/page_alloc.c:642:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: mm/page_alloc.c:645:
+^I^Illen += sprintf(page + llen, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: mm/page_alloc.c:670:
+^I^I^Izone->stat.vm_pgskiplocked, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: mm/page_alloc.c:673:
+^I^I^Izone->stat.vm_pgreact, $

CHECK:BRACES: braces {} should be used on all arms of this statement
#549: FILE: mm/vmscan.c:543:
+			if (launder_loop && maxlaunder == 0 && sync) {
[...]
+			} else if (launder_loop && maxlaunder-- > 0) {
[...]
 			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: mm/vmscan.c:544:
+^I^I^I^Ibuffer_mask = gfp_mask;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: mm/vmscan.c:548:
+^I^I^I^Ibuffer_mask = gfp_mask & ~__GFP_WAIT;^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#602: FILE: mm/vmscan.c:681:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: mm/vmscan.c:734:
+^I^I^I * with non zero age (accounted as DEACTFAIL_AGE) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: mm/vmscan.c:735:
+^I^I^I * or due to a zero aged page with more users than $

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#650: FILE: mm/vmscan.c:1011:
+	if (waitqueue_active(&kswapd_wait)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000524367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 59 warnings, 22 checks, 553 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000524367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
