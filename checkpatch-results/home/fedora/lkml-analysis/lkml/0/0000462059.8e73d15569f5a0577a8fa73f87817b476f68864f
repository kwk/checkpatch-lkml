WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
   instead of a hard coded integer types.  This increases the chances that at

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#132: FILE: drivers/ide/ide.c:483:
+	printk("%s: ata_special: 0x%02x\n", drive->name, special_cmd);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ata_special', this function's name, in a string
#132: FILE: drivers/ide/ide.c:483:
+	printk("%s: ata_special: 0x%02x\n", drive->name, special_cmd);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#154: FILE: drivers/ide/ide.c:499:
+		printk("%s: bad special flag: 0x%02x\n", drive->name, special_cmd);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: drivers/ide/ide.c:590:
+			printk("master:");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#167: FILE: drivers/ide/ide.c:591:
 			switch (tmp & 0x7f) {
+				case 1: msg = " passed";
[...]
+				case 2: msg = " formatter device";
[...]
+				case 3: msg = " sector buffer";
[...]
+				case 4: msg = " ECC circuitry";
[...]
+				case 5: msg = " controlling MPU error";

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#169: FILE: drivers/ide/ide.c:592:
+				case 1: msg = " passed";

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#172: FILE: drivers/ide/ide.c:594:
+				case 2: msg = " formatter device";

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#175: FILE: drivers/ide/ide.c:596:
+				case 3: msg = " sector buffer";

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#178: FILE: drivers/ide/ide.c:598:
+				case 4: msg = " ECC circuitry";

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#181: FILE: drivers/ide/ide.c:600:
+				case 5: msg = " controlling MPU error";

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#190: FILE: drivers/ide/ide.c:604:
+				printk("; slave:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#192: FILE: drivers/ide/ide.c:606:
+			printk("%s error [%02x]\n", msg, tmp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: drivers/ide/ide.c:717:
+		u8 *args = rq->buffer;
+		rq->errors = !OK_STAT(stat, READY_STAT, BAD_STAT);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: drivers/ide/ide.c:775:
+			printk("DriveReady ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: drivers/ide/ide.c:777:
+			printk("DeviceFault ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#253: FILE: drivers/ide/ide.c:779:
+			printk("SeekComplete ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: drivers/ide/ide.c:781:
+			printk("DataRequest ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: drivers/ide/ide.c:783:
+			printk("CorrectedError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: drivers/ide/ide.c:785:
+			printk("Index ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#261: FILE: drivers/ide/ide.c:787:
+			printk("Error ");

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/ide/ide.c:1025:
+	printk("%s: start_request: current=0x%08lx\n", ch->name, (unsigned long) rq);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: drivers/ide/ide.c:1025:
+	printk("%s: start_request: current=0x%08lx\n", ch->name, (unsigned long) rq);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->failures > drive->max_failures'
#317: FILE: drivers/ide/ide.c:1029:
+	if (drive->max_failures && (drive->failures > drive->max_failures))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#323: FILE: drivers/ide/ide.c:1033:
+		printk(KERN_ERR "%s: bad device number: %s\n", ch->name, kdevname(rq->rq_dev));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#347: FILE: drivers/ide/ide.c:1053:
+	while ((read_timer() - ch->last_time) < DISK_RECOVERY_TIME);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: drivers/ide/ide.c:1061:
+		if (ide_wait_stat(&res, drive, drive->ready_stat,
+					BUSY_STAT|DRQ_STAT, WAIT_READY)) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#360: FILE: drivers/ide/ide.c:1061:
+					BUSY_STAT|DRQ_STAT, WAIT_READY)) {
 					         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#361: FILE: drivers/ide/ide.c:1062:
+			printk(KERN_WARNING "%s: drive not ready for command\n", drive->name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->command_type == IDE_DRIVE_TASK_RAW_WRITE'
#398: FILE: drivers/ide/ide.c:1087:
+		if (((args->command_type == IDE_DRIVE_TASK_RAW_WRITE) ||
 					(args->command_type == IDE_DRIVE_TASK_OUT)) &&
+				args->prehandler && args->handler)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'args->command_type == IDE_DRIVE_TASK_OUT'
#398: FILE: drivers/ide/ide.c:1087:
+		if (((args->command_type == IDE_DRIVE_TASK_RAW_WRITE) ||
 					(args->command_type == IDE_DRIVE_TASK_OUT)) &&
+				args->prehandler && args->handler)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: drivers/ide/ide.c:1088:
+		if (((args->command_type == IDE_DRIVE_TASK_RAW_WRITE) ||
 					(args->command_type == IDE_DRIVE_TASK_OUT)) &&

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#471: FILE: drivers/ide/ide.c:1101:
+		printk("%s: DRIVE_CMD ", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#472: FILE: drivers/ide/ide.c:1102:
+		printk("cmd=0x%02x ", args[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#473: FILE: drivers/ide/ide.c:1103:
+		printk("sc=0x%02x ", args[1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: drivers/ide/ide.c:1104:
+		printk("fr=0x%02x ", args[2]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#475: FILE: drivers/ide/ide.c:1105:
+		printk("xx=0x%02x\n", args[3]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#480: FILE: drivers/ide/ide.c:1110:
+			OUT_BYTE(args[2],IDE_FEATURE_REG);
 			                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#481: FILE: drivers/ide/ide.c:1111:
+			OUT_BYTE(args[1],IDE_SECTOR_REG);
 			                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: drivers/ide/ide.c:1116:
+		OUT_BYTE(args[2],IDE_FEATURE_REG);
 		                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#506: FILE: drivers/ide/ide.c:1126:
+		if (ata_ops(drive)->do_request)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#508: FILE: drivers/ide/ide.c:1128:
+			return ata_ops(drive)->do_request(drive, rq, block);
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#508: FILE: drivers/ide/ide.c:1128:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#522: FILE: drivers/ide/ide.c:1138:
+	printk(KERN_WARNING "%s: device type %d not supported\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: drivers/ide/ide.c:1139:
+	printk(KERN_WARNING "%s: device type %d not supported\n",
+			drive->name, drive->type);

WARNING:TYPO_SPELLING: 'arguemnt' may be misspelled - perhaps 'argument'?
#535: FILE: drivers/ide/ide.c:1151:
+	/* NULL as arguemnt is used by ioctls as a way of waiting for all
 	           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#540: FILE: drivers/ide/ide.c:1156:
+	printk("%s: DRIVE_CMD (null)\n", drive->name);

CHECK:SPACING: No space is necessary after a cast
#583: FILE: drivers/ide/ide.c:2386:
+	drive->tune_req = (u8) arg;

CHECK:SPACING: No space is necessary after a cast
#676: FILE: drivers/ide/ide-cd.c:1203:
+		sector_t n = (rq->buffer - (char *) bio_data(rq->bio)) / SECTOR_SIZE;

WARNING:TYPO_SPELLING: 'worng' may be misspelled - perhaps 'wrong'?
#721: FILE: drivers/ide/ide-cd.c:2029:
+	/* FIXME: This is making worng assumptions about register layout. */
 	                         ^^^^^

CHECK:SPACING: No space is necessary after a cast
#722: FILE: drivers/ide/ide-cd.c:2030:
+	stat = cdrom_get_last_written(dev, (unsigned long *) &toc->capacity);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#782: FILE: drivers/ide/ide-cd.h:158:
+	struct atapi_toc_entry ent[MAX_TRACKS+1];  /* one extra for the leadout. */
 	                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#829: FILE: drivers/ide/ide-disk.c:155:
+	args.taskfile.high_cylinder = (cyl>>8);
 	                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#842: FILE: drivers/ide/ide-disk.c:167:
+	printk("buffer=%p\n", rq->buffer);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#854: FILE: drivers/ide/ide-disk.c:176:
+static ide_startstop_t lba28_do_request(struct ata_device *drive, struct request *rq, sector_t block)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#897: FILE: drivers/ide/ide-disk.c:203:
+	printk("buffer=%p\n", rq->buffer);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#910: FILE: drivers/ide/ide-disk.c:218:
+static ide_startstop_t lba48_do_request(struct ata_device *drive, struct request *rq, sector_t block)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#960: FILE: drivers/ide/ide-disk.c:242:
+	args.hobfile.control = (drive->ctl|0x80);
 	                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#970: FILE: drivers/ide/ide-disk.c:251:
+	printk("buffer=%p\n",rq->buffer);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#970: FILE: drivers/ide/ide-disk.c:251:
+	printk("buffer=%p\n",rq->buffer);
 	                    ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#983: FILE: drivers/ide/ide-disk.c:265:
+static ide_startstop_t idedisk_do_request(struct ata_device *drive, struct request *rq, sector_t block)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#992: FILE: drivers/ide/ide-disk.c:273:
+		printk(KERN_ERR "ide: Request while drive blocked?");

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1001: FILE: drivers/ide/ide-disk.c:283:
+		extern ide_startstop_t promise_rw_disk(struct ata_device *, struct request *, unsigned long);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1001: FILE: drivers/ide/ide-disk.c:283:
+		extern ide_startstop_t promise_rw_disk(struct ata_device *, struct request *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1001: FILE: drivers/ide/ide-disk.c:283:
+		extern ide_startstop_t promise_rw_disk(struct ata_device *, struct request *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1001: FILE: drivers/ide/ide-disk.c:283:
+		extern ide_startstop_t promise_rw_disk(struct ata_device *, struct request *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1001: FILE: drivers/ide/ide-disk.c:283:
+		extern ide_startstop_t promise_rw_disk(struct ata_device *, struct request *, unsigned long);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1302: FILE: drivers/ide/ide-disk.c:423:
+		printk(KERN_ERR "%s: bad special flag: 0x%02x\n", drive->name, special_cmd);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1415: FILE: drivers/ide/ide-disk.c:768:
+        /* submit command request */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1416: FILE: drivers/ide/ide-disk.c:769:
+        ide_raw_taskfile(drive, &args, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1416: FILE: drivers/ide/ide-disk.c:769:
+        ide_raw_taskfile(drive, &args, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1490: FILE: drivers/ide/ide-disk.c:843:
+        args.handler = task_no_data_intr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1490: FILE: drivers/ide/ide-disk.c:843:
+        args.handler = task_no_data_intr;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1564: FILE: drivers/ide/ide-disk.c:955:
+		u64 capacity_2;
+		capacity_2 = capacity;

CHECK:SPACING: No space is necessary after a cast
#1567: FILE: drivers/ide/ide-disk.c:958:
+		drive->cyl = (unsigned int) capacity_2 / (drive->head * drive->sect);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1568: FILE: drivers/ide/ide-disk.c:959:
+		drive->head = drive->bios_head = 255;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1569: FILE: drivers/ide/ide-disk.c:960:
+		drive->sect = drive->bios_sect = 63;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1578: FILE: drivers/ide/ide-disk.c:969:
+				drive->capacity = capacity_2 = set_max_ext;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1579: FILE: drivers/ide/ide-disk.c:970:
+				drive->cyl = (unsigned int) set_max_ext / (drive->head * drive->sect);

CHECK:SPACING: No space is necessary after a cast
#1579: FILE: drivers/ide/ide-disk.c:970:
+				drive->cyl = (unsigned int) set_max_ext / (drive->head * drive->sect);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1582: FILE: drivers/ide/ide-disk.c:973:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1582: FILE: drivers/ide/ide-disk.c:973:
+                        }$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1584: FILE: drivers/ide/ide-disk.c:975:
+			printk("%s: setmax_ext LBA %llu, native  %llu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1585: FILE: drivers/ide/ide-disk.c:976:
+			printk("%s: setmax_ext LBA %llu, native  %llu\n",
+				drive->name, set_max_ext, capacity_2);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1591: FILE: drivers/ide/ide-disk.c:982:
+	} else {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1608: FILE: drivers/ide/ide-disk.c:999:
+				drive->capacity = capacity = set_max;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1614: FILE: drivers/ide/ide-disk.c:1005:
+			printk("%s: setmax LBA %lu, native  %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1615: FILE: drivers/ide/ide-disk.c:1006:
+			printk("%s: setmax LBA %lu, native  %lu\n",
+					drive->name, set_max, capacity);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1643: FILE: drivers/ide/ide-disk.c:1030:
+#if 0

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing == 1'
#1706: FILE: drivers/ide/ide-dma.c:593:
+			if ((HWGROUP(drive)->rq->flags & REQ_DRIVE_ACB) &&
 			    (drive->addressing == 1)) {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1721: FILE: drivers/ide/ide-floppy.c:1258:
+static void idefloppy_create_rw_cmd(idefloppy_floppy_t *floppy, idefloppy_pc_t *pc, struct request *rq, sector_t sector)

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1739: FILE: drivers/ide/ide-floppy.c:1292:
+static ide_startstop_t idefloppy_do_request(struct ata_device *drive, struct request *rq, sector_t block)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing == 1'
#1788: FILE: drivers/ide/ide-pmac.c:1389:
+		if ((HWGROUP(drive)->rq->flags & REQ_DRIVE_ACB) &&
 		    (drive->addressing == 1)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1802: FILE: drivers/ide/ide-proc.c:164:
+static int proc_ide_read_channel(char *page, char **start,
+		off_t off, int count, int *eof, void *data)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1817: FILE: drivers/ide/ide-tape.c:2619:
+static ide_startstop_t idetape_do_request(struct ata_device *drive, struct request *rq, sector_t block)

WARNING:TYPO_SPELLING: 'programm' may be misspelled - perhaps 'program'?
#1877: FILE: drivers/ide/ide-taskfile.c:904:
+ * Unfortunately every single low level programm out there is using this
                                         ^^^^^^^^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1993: FILE: drivers/scsi/ide-scsi.c:463:
+static ide_startstop_t idescsi_do_request(struct ata_device *drive, struct request *rq, sector_t block)

CHECK:SPACING: No space is necessary after a cast
#2002: FILE: drivers/scsi/ide-scsi.c:471:
+		return idescsi_issue_pc(drive, (idescsi_pc_t *) rq->special);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2010: FILE: drivers/scsi/ide-scsi.c:478:
+static int idescsi_open(struct inode *inode, struct file *filp, struct ata_device *drive)
                                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2017: FILE: drivers/scsi/ide-scsi.c:484:
+static void idescsi_ide_release(struct inode *inode, struct file *filp, struct ata_device *drive)
                                                                   ^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2064: FILE: include/linux/blkdev.h:104:
+#define REQ_SENSE	(1 << __REQ_SENSE)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2134: FILE: include/linux/hdreg.h:565:
+} __attribute__((packed));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2280: FILE: include/linux/ide.h:618:
+	int (*cleanup)(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2281: FILE: include/linux/ide.h:619:
+	int (*standby)(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2282: FILE: include/linux/ide.h:620:
+	ide_startstop_t	(*do_request)(struct ata_device *, struct request *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#2282: FILE: include/linux/ide.h:620:
+	ide_startstop_t	(*do_request)(struct ata_device *, struct request *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#2282: FILE: include/linux/ide.h:620:
+	ide_startstop_t	(*do_request)(struct ata_device *, struct request *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2283: FILE: include/linux/ide.h:621:
+	int (*end_request)(struct ata_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2283: FILE: include/linux/ide.h:621:
+	int (*end_request)(struct ata_device *, int);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2285: FILE: include/linux/ide.h:623:
+	int (*ioctl)(struct ata_device *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2285: FILE: include/linux/ide.h:623:
+	int (*ioctl)(struct ata_device *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2285: FILE: include/linux/ide.h:623:
+	int (*ioctl)(struct ata_device *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2285: FILE: include/linux/ide.h:623:
+	int (*ioctl)(struct ata_device *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2285: FILE: include/linux/ide.h:623:
+	int (*ioctl)(struct ata_device *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2285: FILE: include/linux/ide.h:623:
+	int (*ioctl)(struct ata_device *, struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2286: FILE: include/linux/ide.h:624:
+	int (*open)(struct inode *, struct file *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2286: FILE: include/linux/ide.h:624:
+	int (*open)(struct inode *, struct file *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2286: FILE: include/linux/ide.h:624:
+	int (*open)(struct inode *, struct file *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2287: FILE: include/linux/ide.h:625:
+	void (*release)(struct inode *, struct file *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2287: FILE: include/linux/ide.h:625:
+	void (*release)(struct inode *, struct file *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2287: FILE: include/linux/ide.h:625:
+	void (*release)(struct inode *, struct file *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2288: FILE: include/linux/ide.h:626:
+	int (*check_media_change)(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2289: FILE: include/linux/ide.h:627:
+	void (*revalidate)(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2291: FILE: include/linux/ide.h:629:
+	void (*pre_reset)(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2292: FILE: include/linux/ide.h:630:
+	sector_t (*capacity)(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2293: FILE: include/linux/ide.h:631:
+	ide_startstop_t	(*special)(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2302: FILE: include/linux/ide.h:648:
+extern sector_t ata_capacity(struct ata_device *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2322: FILE: include/linux/ide.h:788:
+extern int ide_raw_taskfile(struct ata_device *drive, struct ata_taskfile *cmd, byte *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2323: FILE: include/linux/ide.h:789:
+extern int ide_cmd_ioctl(struct ata_device *drive, unsigned long arg);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462059.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 81 warnings, 33 checks, 2155 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462059.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
