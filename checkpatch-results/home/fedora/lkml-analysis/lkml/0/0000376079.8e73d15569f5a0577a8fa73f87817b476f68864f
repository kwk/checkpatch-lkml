ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#36: 
--- a/drivers/base/Makefile	Tue Apr 22 13:08:01 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: drivers/base/bus.c:330:
+			bus_match(dev,drv);
 			             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#138: FILE: drivers/base/class.c:13:
+#define to_class_attr(_attr) container_of(_attr,struct class_attribute,attr)
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#138: FILE: drivers/base/class.c:13:
+#define to_class_attr(_attr) container_of(_attr,struct class_attribute,attr)
                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/base/class.c:14:
+#define to_class(obj) container_of(obj,struct class,subsys.kset.kobj)
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: drivers/base/class.c:14:
+#define to_class(obj) container_of(obj,struct class,subsys.kset.kobj)
                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: drivers/base/class.c:19:
+class_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: drivers/base/class.c:19:
+class_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: drivers/base/class.c:19:
+class_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: drivers/base/class.c:21:
+	struct class_attribute * class_attr = to_class_attr(attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: drivers/base/class.c:22:
+	struct class * dc = to_class(kobj);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: drivers/base/class.c:31:
+class_attr_store(struct kobject * kobj, struct attribute * attr, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: drivers/base/class.c:31:
+class_attr_store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: drivers/base/class.c:31:
+class_attr_store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: drivers/base/class.c:32:
+		 const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: drivers/base/class.c:34:
+	struct class_attribute * class_attr = to_class_attr(attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: drivers/base/class.c:35:
+	struct class * dc = to_class(kobj);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#190: FILE: drivers/base/class.c:53:
+static decl_subsys(class,&ktype_class,NULL);
                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#190: FILE: drivers/base/class.c:53:
+static decl_subsys(class,&ktype_class,NULL);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#190: FILE: drivers/base/class.c:53:
+static decl_subsys(class,&ktype_class,NULL);
                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: drivers/base/class.c:56:
+int class_create_file(struct class * cls, struct class_attribute * attr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: drivers/base/class.c:56:
+int class_create_file(struct class * cls, struct class_attribute * attr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: drivers/base/class.c:59:
+	int error;
+	if (cls) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#200: FILE: drivers/base/class.c:59:
+	if (cls) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#201: FILE: drivers/base/class.c:60:
+		error = sysfs_create_file(&cls->subsys.kset.kobj,&attr->attr);
 		                                                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#201: FILE: drivers/base/class.c:60:
+		error = sysfs_create_file(&cls->subsys.kset.kobj,&attr->attr);
 		                                                 ^

CHECK:BRACES: Unbalanced braces around else statement
#202: FILE: drivers/base/class.c:61:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: drivers/base/class.c:66:
+void class_remove_file(struct class * cls, struct class_attribute * attr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: drivers/base/class.c:66:
+void class_remove_file(struct class * cls, struct class_attribute * attr)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#214: FILE: drivers/base/class.c:69:
+		sysfs_remove_file(&cls->subsys.kset.kobj,&attr->attr);
 		                                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#214: FILE: drivers/base/class.c:69:
+		sysfs_remove_file(&cls->subsys.kset.kobj,&attr->attr);
 		                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#218: FILE: drivers/base/class.c:72:
+struct class * class_get(struct class * cls)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#218: FILE: drivers/base/class.c:72:
+struct class * class_get(struct class * cls)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: drivers/base/class.c:75:
+		return container_of(subsys_get(&cls->subsys),struct class,subsys);
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: drivers/base/class.c:75:
+		return container_of(subsys_get(&cls->subsys),struct class,subsys);
 		                                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: drivers/base/class.c:79:
+void class_put(struct class * cls)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: drivers/base/class.c:84:
+int class_register(struct class * cls)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: drivers/base/class.c:86:
+	pr_debug("device class '%s': registering\n",cls->name);
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: drivers/base/class.c:90:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: drivers/base/class.c:91:
+	strncpy(cls->subsys.kset.kobj.name,cls->name,KOBJ_NAME_LEN);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: drivers/base/class.c:91:
+	strncpy(cls->subsys.kset.kobj.name,cls->name,KOBJ_NAME_LEN);
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: drivers/base/class.c:92:
+	subsys_set_kset(cls,class_subsys);
 	                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: drivers/base/class.c:98:
+void class_unregister(struct class * cls)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: drivers/base/class.c:100:
+	pr_debug("device class '%s': unregistering\n",cls->name);
 	                                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: drivers/base/class.c:106:
+int class_device_create_file(struct class_device * class_dev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: drivers/base/class.c:107:
+			     struct class_device_attribute * attr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#269: FILE: drivers/base/class.c:110:
+	int error = -EINVAL;
+	if (class_dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: drivers/base/class.c:115:
+void class_device_remove_file(struct class_device * class_dev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: drivers/base/class.c:116:
+			      struct class_device_attribute * attr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: drivers/base/class.c:122:
+static int class_device_dev_link(struct class_device * class_dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#293: FILE: drivers/base/class.c:130:
+static void class_device_dev_unlink(struct class_device * class_dev)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: drivers/base/class.c:136:
+#define to_class_dev(obj) container_of(obj,struct class_device,kobj)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: drivers/base/class.c:136:
+#define to_class_dev(obj) container_of(obj,struct class_device,kobj)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: drivers/base/class.c:137:
+#define to_class_dev_attr(_attr) container_of(_attr,struct class_device_attribute,attr)
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: drivers/base/class.c:137:
+#define to_class_dev_attr(_attr) container_of(_attr,struct class_device_attribute,attr)
                                                                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: drivers/base/class.c:140:
+class_device_attr_show(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: drivers/base/class.c:140:
+class_device_attr_show(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#317: FILE: drivers/base/class.c:141:
+		       char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: drivers/base/class.c:143:
+	struct class_device_attribute * class_dev_attr = to_class_dev_attr(attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: drivers/base/class.c:144:
+	struct class_device * cd = to_class_dev(kobj);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#324: FILE: drivers/base/class.c:148:
+		ret = class_dev_attr->show(cd,buf);
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: drivers/base/class.c:153:
+class_device_attr_store(struct kobject * kobj, struct attribute * attr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: drivers/base/class.c:153:
+class_device_attr_store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: drivers/base/class.c:153:
+class_device_attr_store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: drivers/base/class.c:154:
+			const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#343: FILE: drivers/base/class.c:156:
+	struct class_device_attribute * class_dev_attr = to_class_dev_attr(attr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#344: FILE: drivers/base/class.c:157:
+	struct class_device * cd = to_class_dev(kobj);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: drivers/base/class.c:161:
+		ret = class_dev_attr->store(cd,buf,count);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: drivers/base/class.c:161:
+		ret = class_dev_attr->store(cd,buf,count);
 		                                  ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#352: FILE: drivers/base/class.c:165:
+static struct sysfs_ops class_dev_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: drivers/base/class.c:180:
+		struct class_device *class_dev = to_class_dev(kobj);
+		if (class_dev->class)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#441: FILE: drivers/base/class.c:199:
+	pr_debug("%s - name = %s\n", __FUNCTION__, class_dev->class_id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: drivers/base/class.c:202:
+		retval = class_dev->class->hotplug (class_dev, envp, num_envp,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#446: FILE: drivers/base/class.c:204:
+			if (retval) {
+			pr_debug ("%s - hotplug() returned %d\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#447: FILE: drivers/base/class.c:205:
+			pr_debug ("%s - hotplug() returned %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#448: FILE: drivers/base/class.c:206:
+				  __FUNCTION__, retval);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: drivers/base/class.c:229:
+	struct class * parent;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#482: FILE: drivers/base/class.c:230:
+	struct class_interface * class_intf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#483: FILE: drivers/base/class.c:231:
+	struct list_head * entry;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#505: FILE: drivers/base/class.c:252:
+	if ((error = kobject_add(&class_dev->kobj)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#544: FILE: drivers/base/class.c:284:
+	struct class * parent = class_dev->class;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#545: FILE: drivers/base/class.c:285:
+	struct class_interface * class_intf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#546: FILE: drivers/base/class.c:286:
+	struct list_head * entry;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: drivers/base/class.c:303:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#587: FILE: drivers/base/class.c:318:
+struct class_device * class_device_get(struct class_device *class_dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: drivers/base/class.c:333:
+	struct class * parent;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#609: FILE: drivers/base/class.c:334:
+	struct class_device * class_dev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#610: FILE: drivers/base/class.c:335:
+	struct list_head * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: drivers/base/class.c:358:
+	struct class * parent = class_intf->class;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: drivers/base/class.c:359:
+	struct list_head * entry;

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#653: FILE: drivers/base/class.c:366:
+			struct class_device *class_dev = container_of(entry, struct class_device, node);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#654: FILE: drivers/base/class.c:367:
+			struct class_device *class_dev = container_of(entry, struct class_device, node);
+			class_intf->remove(class_dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#662: FILE: drivers/base/class.c:375:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#674: FILE: drivers/base/class.c:386:
+	 * in sysfs... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#676: FILE: drivers/base/class.c:388:
+	if (!class_obj_subsys.kset.subsys)
+			class_obj_subsys.kset.subsys = &class_obj_subsys;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#687: FILE: drivers/base/class.c:393:
+EXPORT_SYMBOL(class_create_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#689: FILE: drivers/base/class.c:395:
+EXPORT_SYMBOL(class_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#690: FILE: drivers/base/class.c:396:
+EXPORT_SYMBOL(class_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#691: FILE: drivers/base/class.c:397:
+EXPORT_SYMBOL(class_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#692: FILE: drivers/base/class.c:398:
+EXPORT_SYMBOL(class_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#694: FILE: drivers/base/class.c:400:
+EXPORT_SYMBOL(class_device_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#695: FILE: drivers/base/class.c:401:
+EXPORT_SYMBOL(class_device_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#696: FILE: drivers/base/class.c:402:
+EXPORT_SYMBOL(class_device_initialize);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#697: FILE: drivers/base/class.c:403:
+EXPORT_SYMBOL(class_device_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#698: FILE: drivers/base/class.c:404:
+EXPORT_SYMBOL(class_device_del);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#699: FILE: drivers/base/class.c:405:
+EXPORT_SYMBOL(class_device_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#700: FILE: drivers/base/class.c:406:
+EXPORT_SYMBOL(class_device_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#701: FILE: drivers/base/class.c:407:
+EXPORT_SYMBOL(class_device_create_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#702: FILE: drivers/base/class.c:408:
+EXPORT_SYMBOL(class_device_remove_file);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1384: FILE: include/linux/device.h:169:
+^Iint^I(*hotplug)(struct class_device *dev, char **envp, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1390: FILE: include/linux/device.h:173:
+extern int class_register(struct class *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1390: FILE: include/linux/device.h:173:
+extern int class_register(struct class *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1391: FILE: include/linux/device.h:174:
+extern void class_unregister(struct class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1391: FILE: include/linux/device.h:174:
+extern void class_unregister(struct class *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1395: FILE: include/linux/device.h:176:
+extern struct class * class_get(struct class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1395: FILE: include/linux/device.h:176:
+extern struct class * class_get(struct class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1395: FILE: include/linux/device.h:176:
+extern struct class * class_get(struct class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1396: FILE: include/linux/device.h:177:
+extern void class_put(struct class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1396: FILE: include/linux/device.h:177:
+extern void class_put(struct class *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1404: FILE: include/linux/device.h:182:
+	ssize_t (*show)(struct class *, char * buf);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1404: FILE: include/linux/device.h:182:
+	ssize_t (*show)(struct class *, char * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1405: FILE: include/linux/device.h:183:
+	ssize_t (*store)(struct class *, const char * buf, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1405: FILE: include/linux/device.h:183:
+	ssize_t (*store)(struct class *, const char * buf, size_t count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1413: FILE: include/linux/device.h:186:
+#define CLASS_ATTR(_name,_mode,_show,_store)			\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1413: FILE: include/linux/device.h:186:
+#define CLASS_ATTR(_name,_mode,_show,_store)			\
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1413: FILE: include/linux/device.h:186:
+#define CLASS_ATTR(_name,_mode,_show,_store)			\
                                     ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1413: FILE: include/linux/device.h:186:
+#define CLASS_ATTR(_name,_mode,_show,_store)			\
+struct class_attribute class_attr_##_name = { 			\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.show	= _show,					\
+	.store	= _store,					\
 };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1414: FILE: include/linux/device.h:187:
+struct class_attribute class_attr_##_name = { ^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1422: FILE: include/linux/device.h:193:
+extern int class_create_file(struct class *, struct class_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1422: FILE: include/linux/device.h:193:
+extern int class_create_file(struct class *, struct class_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_attribute *' should also have an identifier name
#1422: FILE: include/linux/device.h:193:
+extern int class_create_file(struct class *, struct class_attribute *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1423: FILE: include/linux/device.h:194:
+extern void class_remove_file(struct class *, struct class_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class *' should also have an identifier name
#1423: FILE: include/linux/device.h:194:
+extern void class_remove_file(struct class *, struct class_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_attribute *' should also have an identifier name
#1423: FILE: include/linux/device.h:194:
+extern void class_remove_file(struct class *, struct class_attribute *);

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#1443: FILE: include/linux/device.h:201:
+	struct class		* class;	/* required */

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#1444: FILE: include/linux/device.h:202:
+	struct device		* dev;		/* not necessary, but nice to have */

ERROR:POINTER_LOCATION: "foo			* bar" should be "foo			*bar"
#1445: FILE: include/linux/device.h:203:
+	void			* class_data;	/* class-specific data */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1451: FILE: include/linux/device.h:209:
+class_get_devdata (struct class_device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1457: FILE: include/linux/device.h:215:
+class_set_devdata (struct class_device *dev, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1462: FILE: include/linux/device.h:220:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1463: FILE: include/linux/device.h:221:
+extern int class_device_register(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1464: FILE: include/linux/device.h:222:
+extern void class_device_unregister(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1464: FILE: include/linux/device.h:222:
+extern void class_device_unregister(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1465: FILE: include/linux/device.h:223:
+extern void class_device_initialize(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1465: FILE: include/linux/device.h:223:
+extern void class_device_initialize(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1466: FILE: include/linux/device.h:224:
+extern int class_device_add(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1466: FILE: include/linux/device.h:224:
+extern int class_device_add(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1467: FILE: include/linux/device.h:225:
+extern void class_device_del(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1467: FILE: include/linux/device.h:225:
+extern void class_device_del(struct class_device *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1469: FILE: include/linux/device.h:227:
+extern struct class_device * class_device_get(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1469: FILE: include/linux/device.h:227:
+extern struct class_device * class_device_get(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1469: FILE: include/linux/device.h:227:
+extern struct class_device * class_device_get(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1470: FILE: include/linux/device.h:228:
+extern void class_device_put(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1470: FILE: include/linux/device.h:228:
+extern void class_device_put(struct class_device *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1474: FILE: include/linux/device.h:232:
+	ssize_t (*show)(struct class_device *, char * buf);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1474: FILE: include/linux/device.h:232:
+	ssize_t (*show)(struct class_device *, char * buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1475: FILE: include/linux/device.h:233:
+	ssize_t (*store)(struct class_device *, const char * buf, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1475: FILE: include/linux/device.h:233:
+	ssize_t (*store)(struct class_device *, const char * buf, size_t count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1478: FILE: include/linux/device.h:236:
+#define CLASS_DEVICE_ATTR(_name,_mode,_show,_store)		\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1478: FILE: include/linux/device.h:236:
+#define CLASS_DEVICE_ATTR(_name,_mode,_show,_store)		\
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1478: FILE: include/linux/device.h:236:
+#define CLASS_DEVICE_ATTR(_name,_mode,_show,_store)		\
                                            ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1478: FILE: include/linux/device.h:236:
+#define CLASS_DEVICE_ATTR(_name,_mode,_show,_store)		\
+struct class_device_attribute class_device_attr_##_name = { 	\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.show	= _show,					\
+	.store	= _store,					\
+};

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1479: FILE: include/linux/device.h:237:
+struct class_device_attribute class_device_attr_##_name = { ^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1487: FILE: include/linux/device.h:243:
+extern int class_device_create_file(struct class_device *, struct class_device_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1487: FILE: include/linux/device.h:243:
+extern int class_device_create_file(struct class_device *, struct class_device_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device_attribute *' should also have an identifier name
#1487: FILE: include/linux/device.h:243:
+extern int class_device_create_file(struct class_device *, struct class_device_attribute *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1488: FILE: include/linux/device.h:244:
+extern void class_device_remove_file(struct class_device *, struct class_device_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1488: FILE: include/linux/device.h:244:
+extern void class_device_remove_file(struct class_device *, struct class_device_attribute *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device_attribute *' should also have an identifier name
#1488: FILE: include/linux/device.h:244:
+extern void class_device_remove_file(struct class_device *, struct class_device_attribute *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1492: FILE: include/linux/device.h:246:
 
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#1497: FILE: include/linux/device.h:251:
+	int (*add)	(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1497: FILE: include/linux/device.h:251:
+	int (*add)	(struct class_device *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1498: FILE: include/linux/device.h:252:
+	int (*remove)	(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#1498: FILE: include/linux/device.h:252:
+	int (*remove)	(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1503: FILE: include/linux/device.h:255:
+extern int class_interface_register(struct class_interface *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_interface *' should also have an identifier name
#1503: FILE: include/linux/device.h:255:
+extern int class_interface_register(struct class_interface *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1504: FILE: include/linux/device.h:256:
+extern void class_interface_unregister(struct class_interface *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_interface *' should also have an identifier name
#1504: FILE: include/linux/device.h:256:
+extern void class_interface_unregister(struct class_interface *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000376079.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 95 errors, 62 warnings, 21 checks, 998 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000376079.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
