WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: fs/gfs2/glock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#60: FILE: fs/gfs2/glock.c:20:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: fs/gfs2/glock.c:43:
+typedef void (*glock_examiner) (struct gfs2_glock * gl);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#94: FILE: fs/gfs2/glock.c:54:
+static inline int relaxed_state_ok(unsigned int actual, unsigned requested,

ERROR:SPACING: space required after that ',' (ctx:VxB)
#138: FILE: fs/gfs2/glock.c:98:
+	gfs2_assert(gl->gl_sbd, atomic_read(&gl->gl_count) > 0,);
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxB)
#152: FILE: fs/gfs2/glock.c:112:
+	gfs2_assert(gl->gl_sbd, atomic_read(&gl->gl_count) > 0,);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: fs/gfs2/glock.c:127:
+	int empty;
+	spin_lock(&gl->gl_spin);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#308: FILE: fs/gfs2/glock.c:268:
+	/* If this glock protects actual on-disk data or metadata blocks,
+	   create a VFS inode to manage the pages/buffers holding them. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#308: FILE: fs/gfs2/glock.c:268:
+	   create a VFS inode to manage the pages/buffers holding them. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: fs/gfs2/glock.c:305:
+^Ikmem_cache_free(gfs2_glock_cachep, gl);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gh)...) over kmalloc(sizeof(struct gfs2_holder)...)
#450: FILE: fs/gfs2/glock.c:410:
+	gh = kmalloc(sizeof(struct gfs2_holder), GFP_KERNEL | gfp_flags);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: fs/gfs2/glock.c:567:
+		struct gfs2_holder *next_gh;
+		if (gh->gh_flags & GL_LOCAL_EXCL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#611: FILE: fs/gfs2/glock.c:571:
+		if (next_gh->gh_flags & GL_LOCAL_EXCL)
+			 return TRUE;

WARNING:TABSTOP: Statements should start on a tabstop
#612: FILE: fs/gfs2/glock.c:572:
+			 return TRUE;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#688: FILE: fs/gfs2/glock.c:648:
+^Ispin_lock(&gl->gl_spin);^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#708: FILE: fs/gfs2/glock.c:668:
+		if (!list_empty(&gl->gl_waiters1)) {
[...]
+		} else if (!list_empty(&gl->gl_waiters2) &&
[...]
+		} else if (!list_empty(&gl->gl_waiters3)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#738: FILE: fs/gfs2/glock.c:698:
+		} else

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#833: FILE: fs/gfs2/glock.c:793:
+		new_gh = gfs2_holder_get(gl, state,
+					 LM_FLAG_TRY | GL_NEVER_RECURSE,
+					 __GFP_NOFAIL),
+		set_bit(HIF_DEMOTE, &new_gh->gh_iflags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#903: FILE: fs/gfs2/glock.c:863:
+		/* We might not want to do this here.
+		   Look at moving to the inode glops. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#903: FILE: fs/gfs2/glock.c:863:
+		   Look at moving to the inode glops. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#910: FILE: fs/gfs2/glock.c:870:
+	if (!gh)
[...]
+	else if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags))) {
[...]
+	} else if (test_bit(HIF_DEMOTE, &gh->gh_iflags)) {
[...]
+	} else if (ret & LM_OUT_CANCELED) {
[...]
+	} else if (relaxed_state_ok(gl->gl_state, gh->gh_state, gh->gh_flags)) {
[...]
+	} else if (gh->gh_flags & (LM_FLAG_TRY | LM_FLAG_TRY_1CB)) {
[...]
+	} else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#927: FILE: fs/gfs2/glock.c:887:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1317: FILE: fs/gfs2/glock.c:1277:
+^I^Ilist_add_tail(&gh->gh_list, &gl->gl_waiters3);^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1377: FILE: fs/gfs2/glock.c:1337:
+	if (test_bit(HIF_HOLDER, &gh->gh_iflags))
[...]
+	else if (list_empty(&gh->gh_list)) {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1380: FILE: fs/gfs2/glock.c:1340:
+		if (gh->gh_error == GLR_CANCELED) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1386: FILE: fs/gfs2/glock.c:1346:
+			return FALSE;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1386: FILE: fs/gfs2/glock.c:1346:
+		} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gr)...) over kmalloc(sizeof(struct greedy)...)
#1563: FILE: fs/gfs2/glock.c:1523:
+	gr = kmalloc(sizeof(struct greedy), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#1581: FILE: fs/gfs2/glock.c:1541:
+ * gfs2_glock_nq_init - intialize a holder and enqueue it on a glock
                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'aquisition' may be misspelled - perhaps 'acquisition'?
#1622: FILE: fs/gfs2/glock.c:1582:
+ * @flags: modifier flags for the aquisition
                                   ^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1659: FILE: fs/gfs2/glock.c:1619:
+	if (a->ln_number > b->ln_number)
[...]
+	else if (a->ln_number < b->ln_number)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1663: FILE: fs/gfs2/glock.c:1623:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1754: FILE: fs/gfs2/glock.c:1714:
+		error = e[x] = glock_wait_internal(&ghs[x]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1771: FILE: fs/gfs2/glock.c:1731:
+	if (serious)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1773: FILE: fs/gfs2/glock.c:1733:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1776: FILE: fs/gfs2/glock.c:1736:
+			gfs2_holder_reinit(ghs[x].gh_state, ghs[x].gh_flags,
+					  &ghs[x]);

WARNING:TYPO_SPELLING: 'aquisition' may be misspelled - perhaps 'acquisition'?
#1821: FILE: fs/gfs2/glock.c:1781:
+ * @flags: modifier flags for the aquisition
                                   ^^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1881: FILE: fs/gfs2/glock.c:1841:
+	gfs2_assert(gl->gl_sbd, atomic_read(&gl->gl_lvb_count) > 0,);
 	                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1896: FILE: fs/gfs2/glock.c:1856:
+	gfs2_assert(gl->gl_sbd, atomic_read(&gl->gl_lvb_count),);
 	                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2048: FILE: fs/gfs2/glock.c:2008:
+		struct gfs2_inode *ip = get_gl2ip(i_gl);
+		if (ip) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2078: FILE: fs/gfs2/glock.c:2038:
+		demote = time_after_eq(jiffies,
+				    gl->gl_stamp +

WARNING:LINE_SPACING: Missing a blank line after declarations
#2141: FILE: fs/gfs2/glock.c:2101:
+			struct gfs2_inode *ip = get_gl2ip(gl);
+			if (ip && !atomic_read(&ip->i_count))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2232: FILE: fs/gfs2/glock.c:2192:
+			struct gfs2_inode *ip = get_gl2ip(gl);
+			if (ip && !atomic_read(&ip->i_count))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2291: FILE: fs/gfs2/glock.c:2251:
+			struct gfs2_inode *ip = get_gl2ip(gl);
+			if (ip && !atomic_read(&ip->i_count))

WARNING:SPLIT_STRING: quoted string split across lines
#2343: FILE: fs/gfs2/glock.c:2303:
+			fs_warn(sdp, "Unmount seems to be stalled. "
+				     "Dumping lock state...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2349: FILE: fs/gfs2/glock.c:2309:
+		yield();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2376: FILE: fs/gfs2/glock.c:2336:
+	gfs2_printf("    owner = %ld\n",
+		   (gh->gh_owner) ? (long)gh->gh_owner->pid : -1);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2382: FILE: fs/gfs2/glock.c:2342:
+	gfs2_printf(" \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2388: FILE: fs/gfs2/glock.c:2348:
+	gfs2_printf(" \n");

CHECK:CAMELCASE: Avoid CamelCase: <PRIu64>
#2413: FILE: fs/gfs2/glock.c:2373:
+	gfs2_printf("    num = %"PRIu64"/%"PRIu64"\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2413: FILE: fs/gfs2/glock.c:2373:
+	gfs2_printf("    num = %"PRIu64"/%"PRIu64"\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2421: FILE: fs/gfs2/glock.c:2381:
+	gfs2_printf(" \n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2449: FILE: fs/gfs2/glock.c:2409:
+	gfs2_printf("Glock (%u, %"PRIu64")\n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2456: FILE: fs/gfs2/glock.c:2416:
+	gfs2_printf(" \n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2464: FILE: fs/gfs2/glock.c:2424:
+	gfs2_printf("  le = %s\n",
+		   (list_empty(&gl->gl_le.le_list)) ? "no" : "yes");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2584: FILE: fs/gfs2/glock.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2597: FILE: fs/gfs2/glock.h:14:
+/* Flags for lock requests; used in gfs2_holder gh_flag field.
+   From lm_interface.h:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2602: FILE: fs/gfs2/glock.h:19:
+#define LM_FLAG_PRIORITY	0x00000010 */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2657: FILE: fs/gfs2/glock.h:74:
+	int ret;
+	spin_lock(&gl->gl_spin);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2666: FILE: fs/gfs2/glock.h:83:
+		   uint64_t number, struct gfs2_glock_operations *glops,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2700: FILE: fs/gfs2/glock.h:117:
+		      uint64_t number, struct gfs2_glock_operations *glops,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2734: FILE: fs/gfs2/lm.c:1:
+/*

WARNING:TYPO_SPELLING: 'arguements' may be misspelled - perhaps 'arguments'?
#2760: FILE: fs/gfs2/lm.c:27:
+ * @args: mount arguements
                 ^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2783: FILE: fs/gfs2/lm.c:50:
+		struct buffer_head *bh;
+		bh = sb_getblk(sdp->sd_vfs,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sb)...) over kmalloc(sizeof(struct gfs2_sb)...)
#2797: FILE: fs/gfs2/lm.c:64:
+		sb = kmalloc(sizeof(struct gfs2_sb), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2888: FILE: fs/gfs2/lm.c:155:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'oustanding' may be misspelled - perhaps 'outstanding'?
#2892: FILE: fs/gfs2/lm.c:159:
+	/* FIXME: suspend dm device so oustanding bio's complete
 	                               ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2893: FILE: fs/gfs2/lm.c:160:
+	/* FIXME: suspend dm device so oustanding bio's complete
+	   and all further io requests fail */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2893: FILE: fs/gfs2/lm.c:160:
+	   and all further io requests fail */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2906: FILE: fs/gfs2/lm.c:173:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2909: FILE: fs/gfs2/lm.c:176:
+		error = sdp->sd_lockstruct.ls_ops->lm_get_lock(sdp->sd_lockstruct.ls_lockspace, name, lockp);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#2924: FILE: fs/gfs2/lm.c:191:
+	int ret;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2937: FILE: fs/gfs2/lm.c:204:
+	int ret;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2953: FILE: fs/gfs2/lm.c:220:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2976: FILE: fs/gfs2/lm.c:243:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2979: FILE: fs/gfs2/lm.c:246:
+		error = sdp->sd_lockstruct.ls_ops->lm_plock_get(

WARNING:LINE_SPACING: Missing a blank line after declarations
#2989: FILE: fs/gfs2/lm.c:256:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2992: FILE: fs/gfs2/lm.c:259:
+		error = sdp->sd_lockstruct.ls_ops->lm_plock(

WARNING:LINE_SPACING: Missing a blank line after declarations
#3002: FILE: fs/gfs2/lm.c:269:
+	int error;
+	if (unlikely(test_bit(SDF_SHUTDOWN, &sdp->sd_flags)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3005: FILE: fs/gfs2/lm.c:272:
+		error = sdp->sd_lockstruct.ls_ops->lm_punlock(

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#3015: FILE: fs/gfs2/lm.c:282:
+		sdp->sd_lockstruct.ls_ops->lm_recovery_done(sdp->sd_lockstruct.ls_lockspace, jid, message);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3021: FILE: fs/gfs2/lm.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#3037: FILE: fs/gfs2/lm.h:17:
+__attribute__ ((format(printf, 2, 3)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3039: FILE: fs/gfs2/lm.h:19:
+int gfs2_lm_get_lock(struct gfs2_sbd *sdp,
+		    struct lm_lockname *name, lm_lock_t **lockp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3042: FILE: fs/gfs2/lm.h:22:
+unsigned int gfs2_lm_lock(struct gfs2_sbd *sdp, lm_lock_t *lock,
+			 unsigned int cur_state, unsigned int req_state,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3045: FILE: fs/gfs2/lm.h:25:
+unsigned int gfs2_lm_unlock(struct gfs2_sbd *sdp, lm_lock_t *lock,
+			   unsigned int cur_state);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3051: FILE: fs/gfs2/lm.h:31:
+int gfs2_lm_plock_get(struct gfs2_sbd *sdp,
+		     struct lm_lockname *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3054: FILE: fs/gfs2/lm.h:34:
+int gfs2_lm_plock(struct gfs2_sbd *sdp,
+		 struct lm_lockname *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3057: FILE: fs/gfs2/lm.h:37:
+int gfs2_lm_punlock(struct gfs2_sbd *sdp,
+		   struct lm_lockname *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3060: FILE: fs/gfs2/lm.h:40:
+void gfs2_lm_recovery_done(struct gfs2_sbd *sdp,
+			  unsigned int jid, unsigned int message);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 48 warnings, 34 checks, 3013 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
