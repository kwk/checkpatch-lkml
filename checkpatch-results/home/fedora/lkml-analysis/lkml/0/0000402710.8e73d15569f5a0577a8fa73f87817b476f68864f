WARNING:TYPO_SPELLING: 'proprietory' may be misspelled - perhaps 'proprietary'?
#32: 
D: restrictions are enforced).  Also fixes "proprietory" spelling.
                                            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
diff -urNp --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.5-bk/include/linux/kernel.h working-2.5-bk-module-license/include/linux/kernel.h

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#42: FILE: include/linux/kernel.h:108:
+#define TAINT_PROPRIETARY_MODULE	(1<<0)
                                 	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#42: FILE: include/linux/kernel.h:108:
+#define TAINT_PROPRIETARY_MODULE	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: include/linux/module.h:80:
+ * 1.^ISo modinfo can show license info for users wanting to vet their setup $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".init.license") over __attribute__((section(".init.license")))
#89: FILE: include/linux/module.h:87:
+		__attribute__((section(".init.license"))) = license

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#116: FILE: include/linux/module.h:137:
+#define EXPORT_SYMBOL_GPL(sym)				\

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#116: FILE: include/linux/module.h:137:
+#define EXPORT_SYMBOL_GPL(sym)				\
+	const struct kernel_symbol __ksymtab_##sym	\
+	__attribute__((section("__gpl_ksymtab")))	\
+	= { (unsigned long)&sym, #sym }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__gpl_ksymtab") over __attribute__((section("__gpl_ksymtab")))
#118: FILE: include/linux/module.h:139:
+	__attribute__((section("__gpl_ksymtab")))	\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#119: FILE: include/linux/module.h:140:
+	__attribute__((section("__gpl_ksymtab")))	\
+	= { (unsigned long)&sym, #sym }

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#158: FILE: kernel/extable.c:27:
+extern const struct kernel_symbol __start___gpl_ksymtab[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#159: FILE: kernel/extable.c:28:
+extern const struct kernel_symbol __stop___gpl_ksymtab[];

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#248: FILE: kernel/module.c:940:
+	return (strcmp(license, "GPL") == 0
+		|| strcmp(license, "GPL v2") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#249: FILE: kernel/module.c:941:
+		|| strcmp(license, "GPL v2") == 0
+		|| strcmp(license, "GPL and additional rights") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#250: FILE: kernel/module.c:942:
+		|| strcmp(license, "GPL and additional rights") == 0
+		|| strcmp(license, "Dual BSD/GPL") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#251: FILE: kernel/module.c:943:
+		|| strcmp(license, "Dual BSD/GPL") == 0
+		|| strcmp(license, "Dual MPL/GPL") == 0);

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#254: FILE: kernel/module.c:946:
+static void set_license(struct module *mod, Elf_Shdr *sechdrs, int licenseidx)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: kernel/module.c:950:
+^Iif (licenseidx) $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#265: FILE: kernel/module.c:957:
+		printk(KERN_WARNING "%s: module license '%s' taints kernel.\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#272: FILE: kernel/module.c:964:
+/* Allocate and load the module: note that size of section 0 is always
+   zero, and we rely on this for optional sections. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#272: FILE: kernel/module.c:964:
+   zero, and we rely on this for optional sections. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#290: FILE: kernel/module.c:1009:
+	exportindex = setupindex = obsparmindex = gplindex = licenseindex = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: kernel/module.c:1052:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name,".init.license")
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#298: FILE: kernel/module.c:1052:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name,".init.license")
 		                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#303: FILE: kernel/module.c:1057:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name,
 		                            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 10 warnings, 12 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
