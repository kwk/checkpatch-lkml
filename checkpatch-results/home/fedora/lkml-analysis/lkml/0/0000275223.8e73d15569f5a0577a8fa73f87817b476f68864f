WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
> > > > Here's a revision to the patch that uses a HAVE_ARCH_GET_TB to allow

WARNING:TYPO_SPELLING: 'impement' may be misspelled - perhaps 'implement'?
#48: 
> > > they can use to impement the same thing. That part should be entirely
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#59: 
--- a/arch/alpha/Kconfig	Mon Jun 14 08:05:25 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#65: FILE: arch/alpha/Kconfig:667:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#100: FILE: arch/arm/Kconfig:731:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#134: FILE: arch/arm26/Kconfig:287:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#169: FILE: arch/i386/Kconfig:1250:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#204: FILE: arch/ia64/Kconfig:471:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#239: FILE: arch/mips/Kconfig:1363:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#274: FILE: arch/ppc/Kconfig:1202:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#344: FILE: arch/s390/Kconfig:426:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#379: FILE: arch/sh/Kconfig:678:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#414: FILE: arch/sparc/Kconfig:443:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#449: FILE: arch/sparc64/Kconfig:661:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#484: FILE: arch/um/Kconfig:225:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#519: FILE: arch/x86_64/Kconfig:439:
+config SPINLOCK_TIMEOUT
+       bool "Spinlocks timeout"
+       depends on DEBUG_KERNEL && SMP
+       help
+         If you say Y here, the spinlocks will timeout after X number
+	 of seconds. This is useful for catching deadlocks, and make sure
+	 locks are not held too long.
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: include/linux/spinlock.h:242:
+static inline void spin_lock(spinlock_t * lock) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#594: FILE: include/linux/spinlock.h:242:
+static inline void spin_lock(spinlock_t * lock) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#600: FILE: include/linux/spinlock.h:248:
+^I^I        BUG();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: include/linux/spinlock.h:248:
+		        BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#634: FILE: kernel/sched.c:4011:
+		while (spin_is_locked(lock)) {

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: kernel/sched.c:4014:
+				BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 18 warnings, 0 checks, 461 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
