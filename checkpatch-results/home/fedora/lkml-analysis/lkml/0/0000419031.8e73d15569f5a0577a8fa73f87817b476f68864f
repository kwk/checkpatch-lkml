WARNING:TYPO_SPELLING: 'prefered' may be misspelled - perhaps 'preferred'?
#53: 
care too much about the sched_balance_exec performance and prefered to
                                                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
Content-Disposition: attachment; filename="01-numa_sched_core-2.5.39-12b.patch"

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#67: 
--- a/arch/i386/kernel/smpboot.c	Fri Sep 27 23:49:54 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#100: FILE: arch/ia64/kernel/smpboot.c:516:
 int __devinit

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#108: FILE: include/linux/sched.h:25:
+#include <asm/topology.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/sched.h:461:
+extern void build_pools(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#151: FILE: kernel/sched.c:183:
+int _pool_nr_cpus[MAX_NUMNODES] = { [0 ... MAX_NUMNODES-1] = NR_CPUS };
                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#151: FILE: kernel/sched.c:183:
+int _pool_nr_cpus[MAX_NUMNODES] = { [0 ... MAX_NUMNODES-1] = NR_CPUS };

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#153: FILE: kernel/sched.c:185:
+int pool_ptr[MAX_NUMNODES+1];	/* pointer into the sorted list */
                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#158: FILE: kernel/sched.c:190:
+#define POOL_DELAY_IDLE  (1*HZ/1000)
                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#158: FILE: kernel/sched.c:190:
+#define POOL_DELAY_IDLE  (1*HZ/1000)
                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#159: FILE: kernel/sched.c:191:
+#define POOL_DELAY_BUSY  (20*HZ/1000)
                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#159: FILE: kernel/sched.c:191:
+#define POOL_DELAY_BUSY  (20*HZ/1000)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: kernel/sched.c:193:
+#define loop_over_node(i,cpu,n) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: kernel/sched.c:193:
+#define loop_over_node(i,cpu,n) \
                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#161: FILE: kernel/sched.c:193:
+#define loop_over_node(i,cpu,n) \
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \
+		    i++, cpu=pool_cpus[i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#161: FILE: kernel/sched.c:193:
+#define loop_over_node(i,cpu,n) \
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \
+		    i++, cpu=pool_cpus[i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#161: FILE: kernel/sched.c:193:
+#define loop_over_node(i,cpu,n) \
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \
+		    i++, cpu=pool_cpus[i])

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#162: FILE: kernel/sched.c:194:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#162: FILE: kernel/sched.c:194:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \
 	                      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#162: FILE: kernel/sched.c:194:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#162: FILE: kernel/sched.c:194:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \
 	                                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: kernel/sched.c:194:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#163: FILE: kernel/sched.c:195:
+		    i++, cpu=pool_cpus[i])
 		            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#165: FILE: kernel/sched.c:197:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#174: FILE: kernel/sched.c:206:
+	ptr=0;
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#175: FILE: kernel/sched.c:207:
+	for (n=0; n<numnodes; n++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#175: FILE: kernel/sched.c:207:
+	for (n=0; n<numnodes; n++) {
 	           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#176: FILE: kernel/sched.c:208:
+		mask = pool_mask[n] = __node_to_cpu_mask(n) & cpu_online_map;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#178: FILE: kernel/sched.c:210:
+		for (cpu=0; cpu<NR_CPUS; cpu++)
 		        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#178: FILE: kernel/sched.c:210:
+		for (cpu=0; cpu<NR_CPUS; cpu++)
 		               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#178: FILE: kernel/sched.c:210:
+		for (cpu=0; cpu<NR_CPUS; cpu++)

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#181: FILE: kernel/sched.c:213:
+		pool_ncpus(n) = ptr - pool_ptr[n];;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#183: FILE: kernel/sched.c:215:
+	printk("CPU pools : %d\n",numpools());

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: kernel/sched.c:215:
+	printk("CPU pools : %d\n",numpools());
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: kernel/sched.c:216:
+	for (n=0;n<numpools();n++)
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#184: FILE: kernel/sched.c:216:
+	for (n=0;n<numpools();n++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#184: FILE: kernel/sched.c:216:
+	for (n=0;n<numpools();n++)
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#184: FILE: kernel/sched.c:216:
+	for (n=0;n<numpools();n++)
 	                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: kernel/sched.c:217:
+		printk("pool %d : %lx\n",n,pool_mask[n]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: kernel/sched.c:217:
+		printk("pool %d : %lx\n",n,pool_mask[n]);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: kernel/sched.c:217:
+		printk("pool %d : %lx\n",n,pool_mask[n]);
 		                          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#186: FILE: kernel/sched.c:218:
+	if (cache_decay_ticks==1)
 	                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#187: FILE: kernel/sched.c:219:
+		printk("WARNING: cache_decay_ticks=1, probably unset by platform. Running with poor CPU affinity!\n");

WARNING:TYPO_SPELLING: 'temporarilly' may be misspelled - perhaps 'temporarily'?
#189: FILE: kernel/sched.c:221:
+	/* temporarilly set this to a reasonable value for NUMAQ */
 	   ^^^^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#190: FILE: kernel/sched.c:222:
+	cache_decay_ticks=8;
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: kernel/sched.c:231:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: kernel/sched.c:231:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#199: FILE: kernel/sched.c:231:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                                        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#199: FILE: kernel/sched.c:231:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: kernel/sched.c:231:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#199: FILE: kernel/sched.c:231:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#202: FILE: kernel/sched.c:234:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: kernel/sched.c:696:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: kernel/sched.c:707:
+ * node is unloaded) if the most loaded node didn't change. This gives less $

WARNING:TYPO_SPELLING: 'easilly' may be misspelled - perhaps 'easily'?
#233: FILE: kernel/sched.c:711:
+ * This concept can be extended easilly to more than two levels (multi-level
                                 ^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: kernel/sched.c:726:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#248: FILE: kernel/sched.c:726:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#248: FILE: kernel/sched.c:726:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#248: FILE: kernel/sched.c:726:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#248: FILE: kernel/sched.c:726:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#248: FILE: kernel/sched.c:726:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#289: FILE: kernel/sched.c:734:
+	for (pool=0; pool<MAX_NUMNODES; pool++)
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#289: FILE: kernel/sched.c:734:
+	for (pool=0; pool<MAX_NUMNODES; pool++)
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#292: FILE: kernel/sched.c:737:
+	for (cpu=0; cpu<NR_CPUS; cpu++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#292: FILE: kernel/sched.c:737:
+	for (cpu=0; cpu<NR_CPUS; cpu++) {
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#292: FILE: kernel/sched.c:737:
+	for (cpu=0; cpu<NR_CPUS; cpu++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#293: FILE: kernel/sched.c:738:
+		if (!cpu_online(cpu)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'src_rq->nr_running < this_rq->prev_nr_running[cpu]'
#296: FILE: kernel/sched.c:741:
+		if (idle || (src_rq->nr_running < this_rq->prev_nr_running[cpu]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxO)
#319: FILE: kernel/sched.c:757:
+		if (!CPUS_BALANCED(cpu_load[this_pool],*nr_running)) {
 		                                      ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#319: FILE: kernel/sched.c:757:
+		if (!CPUS_BALANCED(cpu_load[this_pool],*nr_running)) {
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#327: FILE: kernel/sched.c:764:
+#define POOLS_BALANCED(comp,this) (((comp) -(this)) < 50)
                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#327: FILE: kernel/sched.c:764:
+#define POOLS_BALANCED(comp,this) (((comp) -(this)) < 50)
                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: kernel/sched.c:766:
+^Ipool_load[this_pool] = max_pool_load = $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#329: FILE: kernel/sched.c:766:
+	pool_load[this_pool] = max_pool_load = 

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#330: FILE: kernel/sched.c:767:
+		pool_load[this_pool]*100/pool_ncpus(this_pool);
 		                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#330: FILE: kernel/sched.c:767:
+		pool_load[this_pool]*100/pool_ncpus(this_pool);
 		                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#335: FILE: kernel/sched.c:772:
+		pool_load[pool]=pool_load[pool]*100/pool_ncpus(pool);
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#335: FILE: kernel/sched.c:772:
+		pool_load[pool]=pool_load[pool]*100/pool_ncpus(pool);
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#335: FILE: kernel/sched.c:772:
+		pool_load[pool]=pool_load[pool]*100/pool_ncpus(pool);
 		                                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#345: FILE: kernel/sched.c:779:
+	best_cpu = (pool_idx==this_pool) ? -1 : cpu_idx[pool_idx];
 	                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu < 0'
#347: FILE: kernel/sched.c:781:
+	if ((best_cpu < 0) || (max_pool_load <= 100) ||
+	    POOLS_BALANCED(max_pool_load,pool_load[this_pool])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_pool_load <= 100'
#347: FILE: kernel/sched.c:781:
+	if ((best_cpu < 0) || (max_pool_load <= 100) ||
+	    POOLS_BALANCED(max_pool_load,pool_load[this_pool])) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: kernel/sched.c:782:
+	    POOLS_BALANCED(max_pool_load,pool_load[this_pool])) {
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#361: FILE: kernel/sched.c:786:
+	avg_load = avg_load*100/num_online_cpus();
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#361: FILE: kernel/sched.c:786:
+	avg_load = avg_load*100/num_online_cpus();
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: kernel/sched.c:788:
+	if (POOLS_BALANCED(avg_load,pool_load[this_pool]))
 	                           ^

CHECK:BRACES: Unbalanced braces around else statement
#372: FILE: kernel/sched.c:797:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu >= 0'
#377: FILE: kernel/sched.c:802:
+	if ((best_cpu >= 0) &&
+	    (!CPUS_BALANCED(cpu_load[pool_idx],*nr_running))) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#378: FILE: kernel/sched.c:803:
+	    (!CPUS_BALANCED(cpu_load[pool_idx],*nr_running))) {
 	                                      ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#378: FILE: kernel/sched.c:803:
+	    (!CPUS_BALANCED(cpu_load[pool_idx],*nr_running))) {
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: kernel/sched.c:814:
+ * while calling this routine. $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#427: FILE: kernel/sched.c:822:
+	int weight, maxweight=0;
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: kernel/sched.c:830:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: kernel/sched.c:830:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#438: FILE: kernel/sched.c:830:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#438: FILE: kernel/sched.c:830:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#441: FILE: kernel/sched.c:833:
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))
 		                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#459: FILE: kernel/sched.c:868:
+		weight = (jiffies - tmp->sleep_timestamp)/cache_decay_ticks;
 		                                         ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#479: FILE: kernel/sched.c:888:
+static inline void pull_task(runqueue_t *src_rq, prio_array_t *src_array, task_t *p, runqueue_t *this_rq, int this_cpu)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#520: FILE: kernel/sched.c:905:
+ * inbalance (current runqueue is too short) then pull from
    ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#560: FILE: kernel/sched.c:948:
+#define BUSY_REBALANCE_TICK (HZ/5 ?: 1)
                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#579: FILE: kernel/sched.c:2258:
+		cache_decay_ticks=1;
 		                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419031.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 15 warnings, 38 checks, 491 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419031.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
