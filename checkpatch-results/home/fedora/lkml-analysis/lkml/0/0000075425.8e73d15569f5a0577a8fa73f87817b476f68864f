ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#44: FILE: include/linux/kernel.h:32:
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#44: FILE: include/linux/kernel.h:32:
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#53: FILE: include/linux/kernel.h:335:
+/* Force a compilation error if condition is true, but also produce a
+   result (of value 0 and type size_t), so the expression can be used

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#55: FILE: include/linux/kernel.h:337:
+   aren't permitted). */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: include/linux/unwind.h:1:
+#ifndef _LINUX_UNWIND_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/unwind.h:29:
+extern void unwind_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/unwind.h:31:
+extern void *unwind_add_table(struct module *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#110: FILE: include/linux/unwind.h:31:
+extern void *unwind_add_table(struct module *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: include/linux/unwind.h:32:
+                              const void *table_start,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: include/linux/unwind.h:32:
+                              const void *table_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: include/linux/unwind.h:33:
+                              unsigned long table_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: include/linux/unwind.h:33:
+                              unsigned long table_size);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/unwind.h:35:
+extern void unwind_remove_table(void *handle, int init_only);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/unwind.h:37:
+extern int unwind_init_frame_info(struct unwind_frame_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#116: FILE: include/linux/unwind.h:37:
+extern int unwind_init_frame_info(struct unwind_frame_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#116: FILE: include/linux/unwind.h:37:
+extern int unwind_init_frame_info(struct unwind_frame_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#116: FILE: include/linux/unwind.h:37:
+extern int unwind_init_frame_info(struct unwind_frame_info *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: include/linux/unwind.h:38:
+                                  struct task_struct *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: include/linux/unwind.h:38:
+                                  struct task_struct *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: include/linux/unwind.h:39:
+                                  /*const*/ struct pt_regs *);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/unwind.h:44:
+extern int unwind_init_blocked(struct unwind_frame_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#123: FILE: include/linux/unwind.h:44:
+extern int unwind_init_blocked(struct unwind_frame_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#123: FILE: include/linux/unwind.h:44:
+extern int unwind_init_blocked(struct unwind_frame_info *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: include/linux/unwind.h:45:
+                               struct task_struct *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: include/linux/unwind.h:45:
+                               struct task_struct *);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/unwind.h:50:
+extern int unwind_init_running(struct unwind_frame_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#129: FILE: include/linux/unwind.h:50:
+extern int unwind_init_running(struct unwind_frame_info *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: include/linux/unwind.h:51:
+                               asmlinkage void (*callback)(struct unwind_frame_info *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: include/linux/unwind.h:51:
+                               asmlinkage void (*callback)(struct unwind_frame_info *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: include/linux/unwind.h:52:
+                                                           void *arg),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: include/linux/unwind.h:52:
+                                                           void *arg),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: include/linux/unwind.h:53:
+                               void *arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: include/linux/unwind.h:53:
+                               void *arg);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/unwind.h:59:
+extern int unwind(struct unwind_frame_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#138: FILE: include/linux/unwind.h:59:
+extern int unwind(struct unwind_frame_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/unwind.h:66:
+extern int unwind_to_user(struct unwind_frame_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct unwind_frame_info *' should also have an identifier name
#145: FILE: include/linux/unwind.h:66:
+extern int unwind_to_user(struct unwind_frame_info *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: include/linux/unwind.h:75:
+                                     const void *table_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: include/linux/unwind.h:75:
+                                     const void *table_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: include/linux/unwind.h:76:
+                                     unsigned long table_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: include/linux/unwind.h:76:
+                                     unsigned long table_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: include/linux/unwind.h:86:
+                                         struct task_struct *tsk,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: include/linux/unwind.h:86:
+                                         struct task_struct *tsk,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: include/linux/unwind.h:87:
+                                         const struct pt_regs *regs)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: include/linux/unwind.h:87:
+                                         const struct pt_regs *regs)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#168: FILE: include/linux/unwind.h:89:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: include/linux/unwind.h:93:
+                                      struct task_struct *tsk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: include/linux/unwind.h:93:
+                                      struct task_struct *tsk)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#174: FILE: include/linux/unwind.h:95:
+	return -ENOSYS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: include/linux/unwind.h:99:
+                                      asmlinkage void (*cb)(struct unwind_frame_info *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: include/linux/unwind.h:99:
+                                      asmlinkage void (*cb)(struct unwind_frame_info *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: include/linux/unwind.h:100:
+                                                            void *arg),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: include/linux/unwind.h:100:
+                                                            void *arg),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: include/linux/unwind.h:101:
+                                      void *arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/linux/unwind.h:101:
+                                      void *arg)$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#182: FILE: include/linux/unwind.h:103:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#187: FILE: include/linux/unwind.h:108:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#192: FILE: include/linux/unwind.h:113:
+	return -ENOSYS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: kernel/module.c:1751:
+^I                                    (void *)sechdrs[unwindex].sh_addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: kernel/module.c:1752:
+^I                                    sechdrs[unwindex].sh_size);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: kernel/unwind.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#320: FILE: kernel/unwind.c:17:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#327: FILE: kernel/unwind.c:24:
+#define EXTRA_INFO(f) { \
+		BUILD_BUG_ON_ZERO(offsetof(struct unwind_frame_info, f) \
+		                  % FIELD_SIZEOF(struct unwind_frame_info, f)) \
+		+ offsetof(struct unwind_frame_info, f) \
+		  / FIELD_SIZEOF(struct unwind_frame_info, f), \
+		FIELD_SIZEOF(struct unwind_frame_info, f) \
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: kernel/unwind.c:26:
+^I^I                  % FIELD_SIZEOF(struct unwind_frame_info, f)) \$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#396: FILE: kernel/unwind.c:93:
+typedef unsigned long uleb128_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#397: FILE: kernel/unwind.c:94:
+typedef   signed long sleb128_t;

CHECK:CAMELCASE: Avoid CamelCase: <Nowhere>
#412: FILE: kernel/unwind.c:109:
+		Nowhere,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Memory>
#413: FILE: kernel/unwind.c:110:
+		Memory,

CHECK:CAMELCASE: Avoid CamelCase: <Register>
#414: FILE: kernel/unwind.c:111:
+		Register,

CHECK:CAMELCASE: Avoid CamelCase: <Value>
#415: FILE: kernel/unwind.c:112:
+		Value

CHECK:CAMELCASE: Avoid CamelCase: <cieStart>
#422: FILE: kernel/unwind.c:119:
+	const u8 *cieStart, *cieEnd;

CHECK:CAMELCASE: Avoid CamelCase: <cieEnd>
#422: FILE: kernel/unwind.c:119:
+	const u8 *cieStart, *cieEnd;

CHECK:CAMELCASE: Avoid CamelCase: <codeAlign>
#423: FILE: kernel/unwind.c:120:
+	uleb128_t codeAlign;

CHECK:CAMELCASE: Avoid CamelCase: <dataAlign>
#424: FILE: kernel/unwind.c:121:
+	sleb128_t dataAlign;

CHECK:CAMELCASE: Avoid CamelCase: <stackDepth>
#429: FILE: kernel/unwind.c:126:
+	unsigned stackDepth:8;

CHECK:CAMELCASE: Avoid CamelCase: <badCFA>
#435: FILE: kernel/unwind.c:132:
+static const struct cfa badCFA = { ARRAY_SIZE(reg_info), 1 };

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#443: FILE: kernel/unwind.c:140:
+		if ((pc >= table->core.pc
+		     && pc < table->core.pc + table->core.range)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#444: FILE: kernel/unwind.c:141:
+		     && pc < table->core.pc + table->core.range)
+		    || (pc >= table->init.pc

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: kernel/unwind.c:142:
+^I^I        && pc < table->init.pc + table->init.range))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#445: FILE: kernel/unwind.c:142:
+		    || (pc >= table->init.pc
+		        && pc < table->init.pc + table->init.range))

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: kernel/unwind.c:149:
+                              const char *name,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: kernel/unwind.c:149:
+                              const char *name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: kernel/unwind.c:150:
+                              const void *core_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: kernel/unwind.c:150:
+                              const void *core_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: kernel/unwind.c:151:
+                              unsigned long core_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: kernel/unwind.c:151:
+                              unsigned long core_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: kernel/unwind.c:152:
+                              const void *init_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: kernel/unwind.c:152:
+                              const void *init_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: kernel/unwind.c:153:
+                              unsigned long init_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: kernel/unwind.c:153:
+                              unsigned long init_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: kernel/unwind.c:154:
+                              const void *table_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: kernel/unwind.c:154:
+                              const void *table_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: kernel/unwind.c:155:
+                              unsigned long table_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: kernel/unwind.c:155:
+                              unsigned long table_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: kernel/unwind.c:170:
+^I                  _text, _end - _text,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: kernel/unwind.c:171:
+^I                  NULL, 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: kernel/unwind.c:172:
+^I                  __start_unwind, __end_unwind - __start_unwind);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: kernel/unwind.c:177:
+                       const void *table_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: kernel/unwind.c:177:
+                       const void *table_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: kernel/unwind.c:178:
+                       unsigned long table_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: kernel/unwind.c:178:
+                       unsigned long table_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: kernel/unwind.c:190:
+^I                  module->module_core, module->core_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: kernel/unwind.c:191:
+^I                  module->module_init, module->init_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: kernel/unwind.c:192:
+^I                  table_start, table_size);$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#507: FILE: kernel/unwind.c:204:
+struct unlink_table_info
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#520: FILE: kernel/unwind.c:217:
+	if (prev->link) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#530: FILE: kernel/unwind.c:227:
+	} else

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#553: FILE: kernel/unwind.c:250:
+	stop_machine_run(unlink_table, &info, NR_CPUS);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#563: FILE: kernel/unwind.c:260:
+	unsigned shift;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#567: FILE: kernel/unwind.c:264:
+		if (shift + 7 > 8 * sizeof(value)
+		    && (*cur & 0x7fU) >= (1U << (8 * sizeof(value) - shift))) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#584: FILE: kernel/unwind.c:281:
+	unsigned shift;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#588: FILE: kernel/unwind.c:285:
+		if (shift + 7 > 8 * sizeof(value)
+		    && (*cur & 0x7fU) >= (1U << (8 * sizeof(value) - shift))) {

CHECK:CAMELCASE: Avoid CamelCase: <pLoc>
#603: FILE: kernel/unwind.c:300:
+static unsigned long read_pointer(const u8 **pLoc,

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: kernel/unwind.c:301:
+                                  const void *end,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: kernel/unwind.c:301:
+                                  const void *end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: kernel/unwind.c:302:
+                                  signed ptrType)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: kernel/unwind.c:302:
+                                  signed ptrType)$

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#605: FILE: kernel/unwind.c:302:
+                                  signed ptrType)

CHECK:CAMELCASE: Avoid CamelCase: <ptrType>
#605: FILE: kernel/unwind.c:302:
+                                  signed ptrType)

ERROR:SPACING: space required before the open parenthesis '('
#620: FILE: kernel/unwind.c:317:
+	switch(ptrType & DW_EH_PE_FORM) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#624: FILE: kernel/unwind.c:321:
+		if(ptrType & DW_EH_PE_signed)

ERROR:SPACING: space required before the open parenthesis '('
#633: FILE: kernel/unwind.c:330:
+		if(ptrType & DW_EH_PE_signed)

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: kernel/unwind.c:348:
+^I^I        ? get_sleb128(&ptr.p8, end)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: kernel/unwind.c:349:
+^I^I        : get_uleb128(&ptr.p8, end);$

ERROR:SPACING: space required before the open parenthesis '('
#659: FILE: kernel/unwind.c:356:
+	switch(ptrType & DW_EH_PE_ADJUST) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#669: FILE: kernel/unwind.c:366:
+	if ((ptrType & DW_EH_PE_indirect)
+	    && __get_user(value, (unsigned long *)value))

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#676: FILE: kernel/unwind.c:373:
+static signed fde_pointer_type(const u32 *cie)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#679: FILE: kernel/unwind.c:376:
+	unsigned version = *ptr;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#692: FILE: kernel/unwind.c:389:
+		if ((ptr = memchr(aug = (const void *)ptr, 0, end - ptr)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required one side of that '++' (ctx:VxV)
#698: FILE: kernel/unwind.c:395:
+		version <= 1 ? (void)++ptr : (void)get_uleb128(&ptr, end);
 		                     ^

ERROR:SPACING: space required before the open parenthesis '('
#706: FILE: kernel/unwind.c:403:
+			switch(*aug) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#711: FILE: kernel/unwind.c:408:
+					signed ptrType = *ptr++;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#724: FILE: kernel/unwind.c:421:
+	return DW_EH_PE_native|DW_EH_PE_abs;
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#735: FILE: kernel/unwind.c:432:
+                     enum item_location where,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: kernel/unwind.c:432:
+                     enum item_location where,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#736: FILE: kernel/unwind.c:433:
+                     uleb128_t value,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: kernel/unwind.c:433:
+                     uleb128_t value,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#737: FILE: kernel/unwind.c:434:
+                     struct unwind_state *state)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: kernel/unwind.c:434:
+                     struct unwind_state *state)$

CHECK:CAMELCASE: Avoid CamelCase: <processCFI>
#745: FILE: kernel/unwind.c:442:
+static int processCFI(const u8 *start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: kernel/unwind.c:443:
+                      const u8 *end,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: kernel/unwind.c:443:
+                      const u8 *end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#747: FILE: kernel/unwind.c:444:
+                      unsigned long targetLoc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: kernel/unwind.c:444:
+                      unsigned long targetLoc,$

CHECK:CAMELCASE: Avoid CamelCase: <targetLoc>
#747: FILE: kernel/unwind.c:444:
+                      unsigned long targetLoc,

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: kernel/unwind.c:445:
+                      signed ptrType,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: kernel/unwind.c:445:
+                      signed ptrType,$

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#748: FILE: kernel/unwind.c:445:
+                      signed ptrType,

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: kernel/unwind.c:446:
+                      struct unwind_state *state)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: kernel/unwind.c:446:
+                      struct unwind_state *state)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state->label"
#761: FILE: kernel/unwind.c:458:
+		if (targetLoc == 0 && state->label == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#765: FILE: kernel/unwind.c:462:
+		switch(*ptr.p8 >> 6) {

ERROR:SPACING: space required before the open parenthesis '('
#769: FILE: kernel/unwind.c:466:
+			switch(*ptr.p8++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#773: FILE: kernel/unwind.c:470:
+				if ((state->loc = read_pointer(&ptr.p8, end, ptrType)) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: kernel/unwind.c:478:
+^I^I^I^I         && advance_loc(*ptr.p16++, state);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#781: FILE: kernel/unwind.c:478:
+				result = ptr.p8 <= end + 2
+				         && advance_loc(*ptr.p16++, state);

ERROR:CODE_INDENT: code indent should use tabs where possible
#785: FILE: kernel/unwind.c:482:
+^I^I^I^I         && advance_loc(*ptr.p32++, state);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#785: FILE: kernel/unwind.c:482:
+				result = ptr.p8 <= end + 4
+				         && advance_loc(*ptr.p32++, state);

ERROR:CODE_INDENT: code indent should use tabs where possible
#811: FILE: kernel/unwind.c:508:
+^I^I^I^I         Register,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#812: FILE: kernel/unwind.c:509:
+^I^I^I^I         get_uleb128(&ptr.p8, end), state);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#824: FILE: kernel/unwind.c:521:
+				if (state->stackDepth) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#835: FILE: kernel/unwind.c:532:
+				} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: kernel/unwind.c:546:
+^I^I^I^I                  * state->dataAlign;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#863: FILE: kernel/unwind.c:560:
+^I^I^I^I         Memory,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#864: FILE: kernel/unwind.c:561:
+^I^I^I^I         (uleb128_t)0 - get_uleb128(&ptr.p8, end), state);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#890: FILE: kernel/unwind.c:587:
+	return result
+	   && ptr.p8 == end

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#891: FILE: kernel/unwind.c:588:
+	   && ptr.p8 == end
+	   && (targetLoc == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#892: FILE: kernel/unwind.c:589:
+	   && (targetLoc == 0
+	    || (/*todo While in theory this should apply, gcc in practice omits

ERROR:CODE_INDENT: code indent should use tabs where possible
#893: FILE: kernel/unwind.c:590:
+^I          everything past the function prolog, and hence the location$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#893: FILE: kernel/unwind.c:590:
+	    || (/*todo While in theory this should apply, gcc in practice omits
+	          everything past the function prolog, and hence the location

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: kernel/unwind.c:591:
+^I          never reaches the end of the function.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: kernel/unwind.c:592:
+^I        targetLoc < state->loc &&*/ state->label == NULL));$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state->label"
#895: FILE: kernel/unwind.c:592:
+	        targetLoc < state->loc &&*/ state->label == NULL));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#899: FILE: kernel/unwind.c:596:
+ * number in case of an error. */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#902: FILE: kernel/unwind.c:599:
+#define FRAME_REG(r, t) (((t *)frame)[reg_info[r].offs])

CHECK:CAMELCASE: Avoid CamelCase: <startLoc>
#905: FILE: kernel/unwind.c:602:
+	unsigned long startLoc = 0, endLoc = 0, cfa;

CHECK:CAMELCASE: Avoid CamelCase: <endLoc>
#905: FILE: kernel/unwind.c:602:
+	unsigned long startLoc = 0, endLoc = 0, cfa;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#906: FILE: kernel/unwind.c:603:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#907: FILE: kernel/unwind.c:604:
+	signed ptrType = -1;

CHECK:CAMELCASE: Avoid CamelCase: <retAddrReg>
#908: FILE: kernel/unwind.c:605:
+	uleb128_t retAddrReg = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#914: FILE: kernel/unwind.c:611:
+	if ((table = find_table(UNW_PC(frame))) != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#915: FILE: kernel/unwind.c:612:
+	if ((table = find_table(UNW_PC(frame))) != NULL
+	    && !(table->size & (sizeof(*fde) - 1))) {

CHECK:CAMELCASE: Avoid CamelCase: <tableSize>
#916: FILE: kernel/unwind.c:613:
+		unsigned long tableSize = table->size;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#927: FILE: kernel/unwind.c:624:
+			if ((fde[1] & (sizeof(*fde) - 1))
+			    || fde[1] > (unsigned long)(fde + 1)

ERROR:CODE_INDENT: code indent should use tabs where possible
#928: FILE: kernel/unwind.c:625:
+^I^I^I                - (unsigned long)table->address)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#931: FILE: kernel/unwind.c:628:
+			if (*cie <= sizeof(*cie) + 4

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#932: FILE: kernel/unwind.c:629:
+			if (*cie <= sizeof(*cie) + 4
+			    || *cie >= fde[1] - sizeof(*fde)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#933: FILE: kernel/unwind.c:630:
+			    || *cie >= fde[1] - sizeof(*fde)
+			    || (*cie & (sizeof(*cie) - 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#934: FILE: kernel/unwind.c:631:
+			    || (*cie & (sizeof(*cie) - 1))
+			    || cie[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#935: FILE: kernel/unwind.c:632:
+			    || cie[1]
+			    || (ptrType = fde_pointer_type(cie)) < 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: kernel/unwind.c:638:
+^I^I^I                        (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#942: FILE: kernel/unwind.c:639:
+^I^I^I                        ptrType);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: kernel/unwind.c:641:
+^I^I^I         + read_pointer(&ptr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: kernel/unwind.c:642:
+^I^I^I                        (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#946: FILE: kernel/unwind.c:643:
+^I^I^I                        ptrType & DW_EH_PE_indirect$

ERROR:CODE_INDENT: code indent should use tabs where possible
#947: FILE: kernel/unwind.c:644:
+^I^I^I                        ? ptrType$

ERROR:CODE_INDENT: code indent should use tabs where possible
#948: FILE: kernel/unwind.c:645:
+^I^I^I                        : ptrType & (DW_EH_PE_FORM|DW_EH_PE_signed));$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#948: FILE: kernel/unwind.c:645:
+			                        : ptrType & (DW_EH_PE_FORM|DW_EH_PE_signed));
 			                                                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cie"
#954: FILE: kernel/unwind.c:651:
+	if (cie != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#959: FILE: kernel/unwind.c:656:
+		if ((state.version = *ptr) != 1)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#965: FILE: kernel/unwind.c:662:
+				 * nul-terminated augmentation string */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strchr"
#967: FILE: kernel/unwind.c:664:
+					if (strchr("LPR", *ptr) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cie"
#975: FILE: kernel/unwind.c:672:
+	if (cie != NULL) {

WARNING:TYPO_SPELLING: 'aligment' may be misspelled - perhaps 'alignment'?
#976: FILE: kernel/unwind.c:673:
+		/* get code aligment factor */
 		            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'aligment' may be misspelled - perhaps 'alignment'?
#978: FILE: kernel/unwind.c:675:
+		/* get data aligment factor */
 		            ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#980: FILE: kernel/unwind.c:677:
+		if (state.codeAlign == 0 || state.dataAlign == 0 || ptr >= end)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#982: FILE: kernel/unwind.c:679:
+		else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#988: FILE: kernel/unwind.c:685:
+			if (ptr > end
+			   || retAddrReg >= ARRAY_SIZE(reg_info)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#989: FILE: kernel/unwind.c:686:
+			   || retAddrReg >= ARRAY_SIZE(reg_info)
+			   || REG_INVALID(retAddrReg)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#990: FILE: kernel/unwind.c:687:
+			   || REG_INVALID(retAddrReg)
+			   || reg_info[retAddrReg].width != sizeof(unsigned long))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cie"
#994: FILE: kernel/unwind.c:691:
+	if (cie != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <augSize>
#1001: FILE: kernel/unwind.c:698:
+			uleb128_t augSize = get_uleb128(&ptr, end);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1003: FILE: kernel/unwind.c:700:
+			if ((ptr += augSize) > end)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cie"
#1007: FILE: kernel/unwind.c:704:
+	if (cie == NULL || fde == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fde"
#1007: FILE: kernel/unwind.c:704:
+	if (cie == NULL || fde == NULL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1016: FILE: kernel/unwind.c:713:
+		if (UNW_SP(frame) < top
[...]
+		if (UNW_SP(frame) > top

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1017: FILE: kernel/unwind.c:714:
+		if (UNW_SP(frame) < top
+		    && UNW_FP(frame) <= UNW_SP(frame)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1018: FILE: kernel/unwind.c:715:
+		    && UNW_FP(frame) <= UNW_SP(frame)
+		    && bottom < UNW_FP(frame)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1020: FILE: kernel/unwind.c:717:
+		if (UNW_SP(frame) > top
[...]
+		        & (sizeof(unsigned long) - 1))) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1021: FILE: kernel/unwind.c:718:
+		if (UNW_SP(frame) > top
+		    && UNW_FP(frame) >= UNW_SP(frame)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1022: FILE: kernel/unwind.c:719:
+		    && UNW_FP(frame) >= UNW_SP(frame)
+		    && bottom > UNW_FP(frame)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1024: FILE: kernel/unwind.c:721:
+# endif
+		   && !((UNW_SP(frame) | UNW_FP(frame))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: kernel/unwind.c:722:
+^I^I        & (sizeof(unsigned long) - 1))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 27)
#1028: FILE: kernel/unwind.c:725:
+			if (!__get_user(link,
[...]
+			   && link > UNW_FP(frame) && link < bottom

ERROR:CODE_INDENT: code indent should use tabs where possible
#1029: FILE: kernel/unwind.c:726:
+^I^I^I                (unsigned long *)(UNW_FP(frame)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1030: FILE: kernel/unwind.c:727:
+^I^I^I                                  + FRAME_LINK_OFFSET))$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1032: FILE: kernel/unwind.c:729:
+# if FRAME_RETADDR_OFFSET < 0
+			   && link > bottom && link < UNW_FP(frame)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1034: FILE: kernel/unwind.c:731:
+# else
+			   && link > UNW_FP(frame) && link < bottom

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1036: FILE: kernel/unwind.c:733:
+# endif
+			   && !(link & (sizeof(link) - 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1037: FILE: kernel/unwind.c:734:
+			   && !(link & (sizeof(link) - 1))
+			   && !__get_user(UNW_PC(frame),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: kernel/unwind.c:735:
+^I^I^I                  (unsigned long *)(UNW_FP(frame)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1039: FILE: kernel/unwind.c:736:
+^I^I^I                                    + FRAME_RETADDR_OFFSET))) {$

CHECK:SPACING: space preferred before that '-' (ctx:ExE)
#1042: FILE: kernel/unwind.c:739:
+					-
 					^

CHECK:SPACING: space preferred before that '+' (ctx:ExE)
#1044: FILE: kernel/unwind.c:741:
+					+
 					^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1058: FILE: kernel/unwind.c:755:
+	if (!processCFI(ptr, end, UNW_PC(frame), ptrType, &state)
+	   || state.loc > endLoc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1059: FILE: kernel/unwind.c:756:
+	   || state.loc > endLoc
+	   || state.regs[retAddrReg].where == Nowhere

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1060: FILE: kernel/unwind.c:757:
+	   || state.regs[retAddrReg].where == Nowhere
+	   || state.cfa.reg >= ARRAY_SIZE(reg_info)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1061: FILE: kernel/unwind.c:758:
+	   || state.cfa.reg >= ARRAY_SIZE(reg_info)
+	   || reg_info[state.cfa.reg].width != sizeof(unsigned long)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1062: FILE: kernel/unwind.c:759:
+	   || reg_info[state.cfa.reg].width != sizeof(unsigned long)
+	   || state.cfa.offs % sizeof(unsigned long))

WARNING:MINMAX: min() should probably be min_t(unsigned long, UNW_SP(frame), cfa)
#1066: FILE: kernel/unwind.c:763:
+	startLoc = min((unsigned long)UNW_SP(frame), cfa);

WARNING:MINMAX: max() should probably be max_t(unsigned long, UNW_SP(frame), cfa)
#1067: FILE: kernel/unwind.c:764:
+	endLoc = max((unsigned long)UNW_SP(frame), cfa);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1073: FILE: kernel/unwind.c:770:
+# define CASES CASE(8); CASE(16); CASE(32)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1075: FILE: kernel/unwind.c:772:
+# define CASES CASE(8); CASE(16); CASE(32); CASE(64)

ERROR:SPACING: space required before the open parenthesis '('
#1083: FILE: kernel/unwind.c:780:
+		switch(state.regs[i].where) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1088: FILE: kernel/unwind.c:785:
+			if (state.regs[i].value >= ARRAY_SIZE(reg_info)
+			   || REG_INVALID(state.regs[i].value)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1089: FILE: kernel/unwind.c:786:
+			   || REG_INVALID(state.regs[i].value)
+			   || reg_info[i].width > reg_info[state.regs[i].value].width)

ERROR:SPACING: space required before the open parenthesis '('
#1091: FILE: kernel/unwind.c:788:
+			switch(reg_info[state.regs[i].value].width) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1095: FILE: kernel/unwind.c:792:
+^I^I^I^I                                const u##n); \$

ERROR:SPACING: space required before the open parenthesis '('
#1108: FILE: kernel/unwind.c:805:
+		switch(state.regs[i].where) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1111: FILE: kernel/unwind.c:808:
+			if (reg_info[i].width != sizeof(UNW_SP(frame))
+			   || &FRAME_REG(i, __typeof__(UNW_SP(frame)))

ERROR:SPACING: space required before the open parenthesis '('
#1117: FILE: kernel/unwind.c:814:
+			switch(reg_info[i].width) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1131: FILE: kernel/unwind.c:828:
+^I^I^I                                    * state.dataAlign;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1135: FILE: kernel/unwind.c:832:
+^I^I^I^I                           * state.dataAlign;$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1139: FILE: kernel/unwind.c:836:
+				    % sizeof(unsigned long)
+				    || addr < startLoc

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1140: FILE: kernel/unwind.c:837:
+				    || addr < startLoc
+				    || addr + sizeof(unsigned long) < addr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1141: FILE: kernel/unwind.c:838:
+				    || addr + sizeof(unsigned long) < addr
+				    || addr + sizeof(unsigned long) > endLoc)

ERROR:SPACING: space required before the open parenthesis '('
#1143: FILE: kernel/unwind.c:840:
+				switch(reg_info[i].width) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: kernel/unwind.c:861:
+                           struct task_struct *tsk,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: kernel/unwind.c:861:
+                           struct task_struct *tsk,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1165: FILE: kernel/unwind.c:862:
+                           /*const*/ struct pt_regs *regs)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1178: FILE: kernel/unwind.c:875:
+                        struct task_struct *tsk)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: kernel/unwind.c:875:
+                        struct task_struct *tsk)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1191: FILE: kernel/unwind.c:888:
+                        asmlinkage void (*callback)(struct unwind_frame_info *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1191: FILE: kernel/unwind.c:888:
+                        asmlinkage void (*callback)(struct unwind_frame_info *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: kernel/unwind.c:889:
+                                                    void *arg),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: kernel/unwind.c:889:
+                                                    void *arg),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1193: FILE: kernel/unwind.c:890:
+                        void *arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: kernel/unwind.c:890:
+                        void *arg)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075425.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 102 errors, 78 warnings, 88 checks, 1162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075425.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
