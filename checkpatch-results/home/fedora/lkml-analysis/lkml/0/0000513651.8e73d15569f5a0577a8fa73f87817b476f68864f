WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#52: FILE: include/linux/irda.h:101:
+ * Note : need 60+1 ('\0'), make it 64 for alignement - Jean II */
                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#52: FILE: include/linux/irda.h:101:
+ * Note : need 60+1 ('\0'), make it 64 for alignement - Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#112: FILE: net/irda/irias_object.c:56:
+	if(len > max)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: net/irda/irias_object.c:60:
+        new_str = kmalloc(len + 1, GFP_ATOMIC);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: net/irda/irias_object.c:60:
+        new_str = kmalloc(len + 1, GFP_ATOMIC);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: net/irda/irias_object.c:61:
+        if (new_str == NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: net/irda/irias_object.c:61:
+        if (new_str == NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_str"
#117: FILE: net/irda/irias_object.c:61:
+        if (new_str == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#118: FILE: net/irda/irias_object.c:62:
+		WARNING(__FUNCTION__"(), Unable to kmalloc!\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#118: FILE: net/irda/irias_object.c:62:
+		WARNING(__FUNCTION__"(), Unable to kmalloc!\n");

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: net/irda/irias_object.c:477:
+	if(len > IAS_MAX_OCTET_STRING)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: net/irda/iriap.c:406:
+	skb_len = self->max_header_size+2+name_len+1+attr_len+4;
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: net/irda/iriap.c:406:
+	skb_len = self->max_header_size+2+name_len+1+attr_len+4;
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: net/irda/iriap.c:406:
+	skb_len = self->max_header_size+2+name_len+1+attr_len+4;
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: net/irda/iriap.c:406:
+	skb_len = self->max_header_size+2+name_len+1+attr_len+4;
 	                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: net/irda/iriap.c:406:
+	skb_len = self->max_header_size+2+name_len+1+attr_len+4;
 	                                                     ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#286: FILE: net/irda/iriap.c:1016:
+				len += sprintf(buf+len, "octet sequence (%d bytes)\n", attrib->value->len);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#286: FILE: net/irda/iriap.c:1016:
+				len += sprintf(buf+len, "octet sequence (%d bytes)\n", attrib->value->len);
 				                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000513651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 6 warnings, 8 checks, 226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000513651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
