CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/ptrace.h:28:
+extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: include/linux/ptrace.h:29:
+extern int ptrace_writedata(struct task_struct *tsk, char * src, unsigned long dst, int len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/ptrace.h:29:
+extern int ptrace_writedata(struct task_struct *tsk, char * src, unsigned long dst, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/ptrace.h:30:
+extern int ptrace_attach(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/ptrace.h:31:
+extern int ptrace_detach(struct task_struct *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#141: FILE: include/linux/ptrace.h:31:
+extern int ptrace_detach(struct task_struct *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#141: FILE: include/linux/ptrace.h:31:
+extern int ptrace_detach(struct task_struct *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/ptrace.h:32:
+extern void ptrace_disable(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#142: FILE: include/linux/ptrace.h:32:
+extern void ptrace_disable(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/ptrace.h:33:
+extern int ptrace_check_attach(struct task_struct *task, int kill);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/ptrace.h:34:
+extern void __ptrace_link(struct task_struct *child,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: include/linux/ptrace.h:35:
+extern void __ptrace_link(struct task_struct *child,
+				struct task_struct *new_parent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/ptrace.h:36:
+extern void __ptrace_unlink(struct task_struct *child);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: include/linux/ptrace.h:39:
+static inline void ptrace_link(struct task_struct *child,
+				struct task_struct *new_parent)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#154: FILE: include/linux/ptrace.h:44:
+}
+static inline void ptrace_unlink(struct task_struct *child)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#187: FILE: include/linux/init_task.h:57:
+	.ptrace_children= LIST_HEAD_INIT(tsk.ptrace_children),		\
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: kernel/exit.c:69:
+	BUG_ON(p->ptrace || !list_empty(&p->ptrace_list) ||

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: kernel/exit.c:70:
+	BUG_ON(p->ptrace || !list_empty(&p->ptrace_list) ||
+					!list_empty(&p->ptrace_children));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#306: FILE: kernel/exit.c:407:
+static inline void forget_original_parent(struct task_struct * father)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: kernel/exit.c:434:
+		p = list_entry(_p,struct task_struct,sibling);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: kernel/exit.c:434:
+		p = list_entry(_p,struct task_struct,sibling);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: kernel/exit.c:438:
+		p = list_entry(_p,struct task_struct,ptrace_list);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: kernel/exit.c:438:
+		p = list_entry(_p,struct task_struct,ptrace_list);
 		                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->pgrp != current->pgrp'
#359: FILE: kernel/exit.c:460:
+	if ((p->pgrp != current->pgrp) &&
+	    (p->session == current->session)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->session == current->session'
#359: FILE: kernel/exit.c:460:
+	if ((p->pgrp != current->pgrp) &&
+	    (p->session == current->session)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#365: FILE: kernel/exit.c:466:
+			kill_pg(pgrp,SIGHUP,1);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#365: FILE: kernel/exit.c:466:
+			kill_pg(pgrp,SIGHUP,1);
 			                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#366: FILE: kernel/exit.c:467:
+			kill_pg(pgrp,SIGCONT,1);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#366: FILE: kernel/exit.c:467:
+			kill_pg(pgrp,SIGCONT,1);
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#417: FILE: kernel/exit.c:542:
+		zap_thread(list_entry(_p,struct task_struct,sibling), current);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#417: FILE: kernel/exit.c:542:
+		zap_thread(list_entry(_p,struct task_struct,sibling), current);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#419: FILE: kernel/exit.c:544:
+		zap_thread(list_entry(_p,struct task_struct,ptrace_list), current);
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#419: FILE: kernel/exit.c:544:
+		zap_thread(list_entry(_p,struct task_struct,ptrace_list), current);
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: kernel/exit.c:551:
+	if (unlikely(!list_empty(&current->children) ||
+			!list_empty(&current->ptrace_children)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#500: FILE: kernel/ptrace.c:30:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: kernel/ptrace.c:32:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: kernel/ptrace.c:38:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: kernel/ptrace.c:38:
+ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: kernel/ptrace.c:48:
+		BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438476.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 8 warnings, 15 checks, 466 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438476.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
