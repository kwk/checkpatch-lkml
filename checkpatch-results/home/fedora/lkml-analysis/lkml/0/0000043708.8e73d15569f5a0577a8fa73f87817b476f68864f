WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/linux/kmalloc.h:1:
+#ifndef _LINUX_KMALLOC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#49: FILE: include/linux/kmalloc.h:7:
+ * ^I^IChristoph Lameter <clameter@sgi.com>$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#87: FILE: include/linux/kmalloc.h:45:
+	if (size <=    8) return 3;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#88: FILE: include/linux/kmalloc.h:46:
+	if (size <=   16) return 4;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#89: FILE: include/linux/kmalloc.h:47:
+	if (size <=   32) return 5;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#90: FILE: include/linux/kmalloc.h:48:
+	if (size <=   64) return 6;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#92: FILE: include/linux/kmalloc.h:50:
+	if (size <=   96) return KMALLOC_SHIFT_HIGH + 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#94: FILE: include/linux/kmalloc.h:52:
+	if (size <=  128) return 7;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#96: FILE: include/linux/kmalloc.h:54:
+	if (size <=  192) return KMALLOC_SHIFT_HIGH + 2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#98: FILE: include/linux/kmalloc.h:56:
+	if (size <=  256) return 8;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#99: FILE: include/linux/kmalloc.h:57:
+	if (size <=  512) return 9;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#100: FILE: include/linux/kmalloc.h:58:
+	if (size <= 1024) return 10;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#101: FILE: include/linux/kmalloc.h:59:
+	if (size <= 2048) return 11;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#102: FILE: include/linux/kmalloc.h:60:
+	if (size <= 4096) return 12;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#103: FILE: include/linux/kmalloc.h:61:
+	if (size <=   8 * 1024) return 13;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#104: FILE: include/linux/kmalloc.h:62:
+	if (size <=  16 * 1024) return 14;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#105: FILE: include/linux/kmalloc.h:63:
+	if (size <=  32 * 1024) return 15;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#106: FILE: include/linux/kmalloc.h:64:
+	if (size <=  64 * 1024) return 16;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#107: FILE: include/linux/kmalloc.h:65:
+	if (size <= 128 * 1024) return 17;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#108: FILE: include/linux/kmalloc.h:66:
+	if (size <= 256 * 1024) return 18;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/kmalloc.h:85:
+		extern void __kmalloc_size_too_large(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/kmalloc.h:91:
+extern void *__kmalloc(size_t, gfp_t);

CHECK:BRACES: braces {} should be used on all arms of this statement
#138: FILE: include/linux/kmalloc.h:96:
+	if (__builtin_constant_p(size) && !(flags & __GFP_DMA)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#142: FILE: include/linux/kmalloc.h:100:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/kmalloc.h:105:
+extern void *__kmalloc_node(size_t, gfp_t, int);

CHECK:BRACES: braces {} should be used on all arms of this statement
#150: FILE: include/linux/kmalloc.h:108:
+	if (__builtin_constant_p(size) && !(flags & __GFP_DMA)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#154: FILE: include/linux/kmalloc.h:112:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/kmalloc.h:126:
+extern void *kzalloc(size_t, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: include/linux/kmalloc.h:129:
+extern size_t ksize(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#171: FILE: include/linux/kmalloc.h:129:
+extern size_t ksize(const void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: mm/kmalloc.c:1:
+/*

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#217: FILE: mm/kmalloc.c:36:
+		return fls(size -1) - PAGE_SHIFT;
 		                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/kmalloc.c:43:
+static struct slab_cache *create_kmalloc_cache(struct slab_control *x,
+		const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: mm/kmalloc.c:63:
+		panic("Creation of kmalloc slab %s size=%d failed.\n",
+			name, size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#256: FILE: mm/kmalloc.c:75:
+	BUG_ON(size < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*x)...) over kmalloc(sizeof(struct slab_control)...)
#266: FILE: mm/kmalloc.c:85:
+	x = kmalloc(sizeof(struct slab_control), flags & ~(__GFP_DMA));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#269: FILE: mm/kmalloc.c:88:
+	if (!x)
+		panic("Unable to allocate memory for dma cache\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#276: FILE: mm/kmalloc.c:95:
+	else if (index = KMALLOC_EXTRA)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: mm/kmalloc.c:144:
+static struct slab_cache *kmalloc_create(struct slab_control *x,
+	const struct slab_cache *s)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#332: FILE: mm/kmalloc.c:151:
+	if (index > KMALLOC_SHIFT_HIGH - KMALLOC_SHIFT_LOW + 1
+			|| s->offset)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: mm/kmalloc.c:156:
+	BUG_ON(s->size > km->size);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#349: FILE: mm/kmalloc.c:168:
+		create_kmalloc_cache(

WARNING:TYPO_SPELLING: 'precending' may be misspelled - perhaps 'preceding'?
#369: FILE: mm/kmalloc.c:188:
+	 * Fix up the initial arrays. Because of the precending uses
 	                                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#373: FILE: mm/kmalloc.c:192:
+	for(i = 0; i < KMALLOC_NR_CACHES; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: mm/kmalloc.c:201:
+	memcpy(&kmalloc_slab_allocator, &KMALLOC_ALLOCATOR,
+			sizeof(struct slab_allocator));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000043708.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 8 warnings, 17 checks, 344 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000043708.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
