WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#29: 
then set a variable ibcs_interpreter (which btw is completly misnamed as
                                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
iBCS2 mandates COFF) that can be used by the arch code to set the personality.

WARNING:TYPO_SPELLING: 'intepreter' may be misspelled - perhaps 'interpreter'?
#39: 
 1) the arch code gets the ELF header and the intepreter name to do
                                              ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'inital' may be misspelled - perhaps 'initial'?
#47: 
Jakub, I assume you wrote the inital sparc hack, that's why I'd like to
                              ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: fs/binfmt_elf.c:491:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-alpha/elf.h:130:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interp' - possible side-effects?
#149: FILE: include/asm-alpha/elf.h:130:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	unsigned long			personality = PER_LINUX;	\
+									\
+	/* If the header identifies the binary, use that information */	\
+	if ((ex).e_flags & EF_ALPHA_32BIT)				\
+		personality = PER_LINUX_32BIT;				\
+									\
+	/* Else check the interpreter for SVR4isms */			\
+	else if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+		 strcmp((interp), "/usr/lib/ld.so.1") == 0)		\
+		personality = PER_SVR4;					\
+									\
+	set_personality(personality);					\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: include/asm-arm/proc-armo/elf.h:13:
+#define SET_ELF_PERSONALITY(ex,interp)	set_personality(PER_LINUX)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: include/asm-arm/proc-armv/elf.h:19:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#209: FILE: include/asm-cris/elf.h:72:
+#define SET_ELF_PERSONALITY(ex,interp)	set_personality(PER_LINUX)
                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: include/asm-i386/elf.h:18:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: include/asm-i386/elf.h:107:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ex' - possible side-effects?
#234: FILE: include/asm-i386/elf.h:107:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	unsigned long		personality = abi_defhandler_elf;	\
+									\
+	/* If the header identifies the binary, use that information */	\
+	if ((ex).e_flags == EF_386_UW7)					\
+		personality = PER_UW7;					\
+	else if ((ex).e_flags == EF_386_OSR5)				\
+		personality = PER_OSR5;					\
+									\
+	/* Else check the interpreter for SVR4isms */			\
+	else if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+		 strcmp((interp), "/usr/lib/ld.so.1") == 0)		\
+		personality = abi_defhandler_libcso;			\
+									\
+	set_personality(personality);					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interp' - possible side-effects?
#234: FILE: include/asm-i386/elf.h:107:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	unsigned long		personality = abi_defhandler_elf;	\
+									\
+	/* If the header identifies the binary, use that information */	\
+	if ((ex).e_flags == EF_386_UW7)					\
+		personality = PER_UW7;					\
+	else if ((ex).e_flags == EF_386_OSR5)				\
+		personality = PER_OSR5;					\
+									\
+	/* Else check the interpreter for SVR4isms */			\
+	else if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+		 strcmp((interp), "/usr/lib/ld.so.1") == 0)		\
+		personality = abi_defhandler_libcso;			\
+									\
+	set_personality(personality);					\
+} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: include/asm-i386/elfmark.h:1:
+/*	$Id: elfmark.h,v 1.1 2001/04/29 10:15:23 hch Exp $	*/

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#259: FILE: include/asm-i386/elfmark.h:1:
+/*	$Id: elfmark.h,v 1.1 2001/04/29 10:15:23 hch Exp $	*/

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: include/asm-i386/elfmark.h:6:
+ * for use by the UW Linux kernel module that provides exec domain for PER_UW7 $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#307: FILE: include/asm-ia64/elf.h:86:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interp' - possible side-effects?
#307: FILE: include/asm-ia64/elf.h:86:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	unsigned long			personality = PER_LINUX;	\
+									\
+	/* Check the interpreter for SVR4isms */			\
+	if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+	    strcmp((interp), "/usr/lib/ld.so.1") == 0)		\
+		personality = PER_SVR4;					\
+									\
+	set_personality(personality);					\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: include/asm-m68k/elf.h:92:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interp' - possible side-effects?
#330: FILE: include/asm-m68k/elf.h:92:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	unsigned long			personality = PER_LINUX;	\
+									\
+	/* Check the interpreter for SVR4isms */			\
+	if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+	    strcmp((interp), "/usr/lib/ld.so.1") == 0)		\
+		personality = PER_SVR4;					\
+									\
+	set_personality(personality);					\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#355: FILE: include/asm-mips/elf.h:95:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#355: FILE: include/asm-mips/elf.h:95:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	/* IRIX binaries are handled elsewhere. */			\
+	if (strcmp((interp), "/usr/lib/ld.so.1") == 0)			\
+		retval = -ENOEXEC;					\
+		goto out_free_interp;					\
+									\
+	set_personality(PER_LINUX);					\
+} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: include/asm-mips/elf.h:104:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: include/asm-mips/elf.h:104:
+ $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: include/asm-mips64/elf.h:99:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interp' - possible side-effects?
#384: FILE: include/asm-mips64/elf.h:99:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	/* First do some adjustments for 32bit binary compatiblity */	\
+	if ((ex).e_ident[EI_CLASS] == ELFCLASS32)			\
+		current->thread.mflags |= MF_32BIT;			\
+	else								\
+		current->thread.mflags &= ~MF_32BIT;			\
+									\
+	/* Check the interpreter for SVR4isms */			\
+	if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+		 strcmp((interp), "/usr/lib/ld.so.1") == 0)		\
+		set_personality(PER_SVR4);				\
+	else if (current->personality != PER_LINUX32)			\
+		set_personality(PER_LINUX);				\
 } while (0)

WARNING:TYPO_SPELLING: 'compatiblity' may be misspelled - perhaps 'compatibility'?
#386: FILE: include/asm-mips64/elf.h:101:
+	/* First do some adjustments for 32bit binary compatiblity */	\
 	                                              ^^^^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: include/asm-parisc/elf.h:94:
+#define SET_ELF_PERSONALITY(ex,interp)	set_personality(PER_LINUX)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#435: FILE: include/asm-ppc/elf.h:114:
+#define SET_ELF_PERSONALITY(ex,interp)	set_personality(PER_LINUX)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#451: FILE: include/asm-s390/elf.h:80:
+#define SET_ELF_PERSONALITY(ex,interp)	set_personality(PER_LINUX)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#466: FILE: include/asm-s390x/elf.h:81:
+#define SET_ELF_PERSONALITY(ex,interp)	set_personality(PER_LINUX)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#480: FILE: include/asm-sh/elf.h:73:
+#define SET_ELF_PERSONALITY(ex,interp)	set_personality(PER_LINUX_32BIT)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#494: FILE: include/asm-sparc/elf.h:109:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interp' - possible side-effects?
#494: FILE: include/asm-sparc/elf.h:109:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	unsigned long			personality = PER_LINUX;	\
+									\
+	/* Check the interpreter for SVR4isms */			\
+	if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+		 strcmp((interp), "/usr/lib/ld.so.1") == 0)		\
+		personality = PER_SVR4;					\
+									\
+	set_personality(personality);					\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#548: FILE: include/asm-sparc64/elf.h:72:
+#define SET_ELF_PERSONALITY(ex,interp)					\
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'interp' - possible side-effects?
#548: FILE: include/asm-sparc64/elf.h:72:
+#define SET_ELF_PERSONALITY(ex,interp)					\
+do {									\
+	unsigned long			personality = PER_LINUX;	\
+	unsigned char			flags = current->thread.flags;	\
+									\
+	if ((ex).e_ident[EI_CLASS] == ELFCLASS32)			\
+		flags |= SPARC_FLAG_32BIT;				\
+	else								\
+		flags &= ~SPARC_FLAG_32BIT;				\
+									\
+	if (flags != current->thread.flags) {				\
+		unsigned long		pgd_cache = 0UL;		\
+									\
+		if (flags & SPARC_FLAG_32BIT) {				\
+			pgd_t		*pgd0 = &current->mm->pgd[0];	\
+									\
+		  	if (pgd_none (*pgd0)) {				\
+				pmd_t	*page = pmd_alloc_one_fast(NULL, 0); \
+									\
+				if (!page)				\
+					page = pmd_alloc_one(NULL, 0);	\
+				pgd_set(pgd0, page);			\
+			}						\
+									\
+			pgd_cache = pgd_val(*pgd0) << 11UL;		\
+		}							\
+		__asm__ __volatile__(					\
+			"stxa\t%0, [%1] %2\n\t"				\
+			"membar #Sync"					\
+			: /* no outputs */				\
+			: "r" (pgd_cache),				\
+			  "r" (TSB_REG),				\
+			  "i" (ASI_DMMU));				\
+									\
+		current->thread.flags = flags;				\
+	}								\
+									\
+	/* Check the interpreter for SVR4isms */			\
+	if (strcmp((interp), "/usr/lib/libc.so.1") == 0 ||		\
+	    strcmp((interp), "/usr/lib/ld.so.1") == 0)			\
+		set_personality(PER_SVR4);				\
+	else if (current->personality != PER_LINUX32)			\
+		set_personality(PER_LINUX);				\
 } while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: include/asm-sparc64/elf.h:88:
+^I^I  ^Iif (pgd_none (*pgd0)) {^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#564: FILE: include/asm-sparc64/elf.h:88:
+^I^I  ^Iif (pgd_none (*pgd0)) {^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: include/asm-sparc64/elf.h:88:
+		  	if (pgd_none (*pgd0)) {				\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000513132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 11 warnings, 9 checks, 464 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000513132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
