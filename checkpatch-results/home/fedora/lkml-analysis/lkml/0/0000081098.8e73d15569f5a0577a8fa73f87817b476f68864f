CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/audit.h:323:
+extern int audit_ipc_obj(struct kern_ipc_perm *ipcp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#82: FILE: include/linux/audit.h:324:
+extern int audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid, mode_t mode, struct kern_ipc_perm *ipcp);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/audit.h:324:
+extern int audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid, mode_t mode, struct kern_ipc_perm *ipcp);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/linux/audit.h:344:
+#define audit_ipc_set_perm(q,u,g,m,i) ({ 0; })
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/linux/audit.h:344:
+#define audit_ipc_set_perm(q,u,g,m,i) ({ 0; })
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/linux/audit.h:344:
+#define audit_ipc_set_perm(q,u,g,m,i) ({ 0; })
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: include/linux/audit.h:344:
+#define audit_ipc_set_perm(q,u,g,m,i) ({ 0; })
                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shp->shm_perm
#185: FILE: ipc/shm.c:547:
+		err = audit_ipc_obj(&(shp->shm_perm));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shp->shm_perm
#196: FILE: ipc/shm.c:603:
+		err = audit_ipc_obj(&(shp->shm_perm));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shp->shm_perm
#213: FILE: ipc/shm.c:643:
+		err = audit_ipc_obj(&(shp->shm_perm));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shp->shm_perm
#216: FILE: ipc/shm.c:646:
+		err = audit_ipc_set_perm(0, setbuf.uid, setbuf.gid, setbuf.mode, &(shp->shm_perm));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#250: FILE: ipc/util.c:472:
+	if (unlikely((err = audit_ipc_obj(ipcp))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: kernel/auditsc.c:651:
+			struct audit_aux_data_ipcctl *axi = (void *)aux;
+			audit_log_format(ab,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: kernel/auditsc.c:652:
+			audit_log_format(ab,
+				" new qbytes=%lx new iuid=%u new igid=%u new mode=%x",

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: kernel/auditsc.c:657:
+				u32 len;
+				if (selinux_ctxid_to_string(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#271: FILE: kernel/auditsc.c:657:
+				if (selinux_ctxid_to_string(

CHECK:BRACES: braces {} should be used on all arms of this statement
#271: FILE: kernel/auditsc.c:657:
+				if (selinux_ctxid_to_string(
[...]
+				} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: kernel/auditsc.c:660:
+					audit_log_format(ab, " osid=%u",
+							axi->osid);

CHECK:BRACES: Unbalanced braces around else statement
#276: FILE: kernel/auditsc.c:662:
+				} else

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#328: FILE: kernel/auditsc.c:1207:
+int audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid, mode_t mode, struct kern_ipc_perm *ipcp)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081098.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 4 warnings, 11 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081098.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
