WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
--- linux-2.6.4-rc2-bk3-kgdb.orig/arch/i386/Kconfig	2004-03-08 14:30:07.074879168 +0530

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: arch/i386/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#120: FILE: arch/i386/kernel/kgdb.c:23:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by David Grothe <dave@gcom.com>
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#142: FILE: arch/i386/kernel/kgdb.c:45:
+/* Likewise, the vector number here (since GDB only gets the signal
+   number through the usual means, and that's not very specific).  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#142: FILE: arch/i386/kernel/kgdb.c:45:
+   number through the usual means, and that's not very specific).  */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#203: FILE: arch/i386/kernel/kgdb.c:106:
+#if 0				/* can't change these */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#210: FILE: arch/i386/kernel/kgdb.c:113:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#213: FILE: arch/i386/kernel/kgdb.c:116:
+	unsigned enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#214: FILE: arch/i386/kernel/kgdb.c:117:
+	unsigned type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: arch/i386/kernel/kgdb.c:118:
+	unsigned len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#216: FILE: arch/i386/kernel/kgdb.c:119:
+	unsigned addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#228: FILE: arch/i386/kernel/kgdb.c:131:
+	unsigned dr7;

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#230: FILE: arch/i386/kernel/kgdb.c:133:
+	asm volatile ("movl %%db7, %0\n":"=r" (dr7)
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#233: FILE: arch/i386/kernel/kgdb.c:136:
+		unsigned addr0, addr1, addr2, addr3;

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: arch/i386/kernel/kgdb.c:137:
+		unsigned addr0, addr1, addr2, addr3;
+		asm volatile ("movl %%db0, %0\n"

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#237: FILE: arch/i386/kernel/kgdb.c:140:
+			      "movl %%db3, %3\n":"=r" (addr0), "=r"(addr1),
 			                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxB)
#238: FILE: arch/i386/kernel/kgdb.c:141:
+			      "=r"(addr2), "=r"(addr3):);
 			                              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#277: FILE: arch/i386/kernel/kgdb.c:180:
+	if (correctit) {
+		asm volatile ("movl %0, %%db7\n"::"r" (dr7));
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: arch/i386/kernel/kgdb.c:188:
+	int i, idx = -1;
+	for (i = 0; i < 4; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: arch/i386/kernel/kgdb.c:204:
+	int i, idx = -1;
+	for (i = 0; i < 4; i++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#317: FILE: arch/i386/kernel/kgdb.c:220:
+int remove_hw_break(unsigned breakno)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#319: FILE: arch/i386/kernel/kgdb.c:222:
+	if (!breakinfo[breakno].enabled) {
+		return -1;
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#326: FILE: arch/i386/kernel/kgdb.c:229:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#326: FILE: arch/i386/kernel/kgdb.c:229:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#326: FILE: arch/i386/kernel/kgdb.c:229:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#326: FILE: arch/i386/kernel/kgdb.c:229:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#328: FILE: arch/i386/kernel/kgdb.c:231:
+	if (breakinfo[breakno].enabled) {
+		return -1;
+	}

CHECK:CAMELCASE: Avoid CamelCase: <exceptionNo>
#338: FILE: arch/i386/kernel/kgdb.c:241:
+void kgdb_printexceptioninfo(int exceptionNo, int errorcode, char *buffer)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#340: FILE: arch/i386/kernel/kgdb.c:243:
+	unsigned dr6;

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: arch/i386/kernel/kgdb.c:245:
+	int i;
+	switch (exceptionNo) {

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#352: FILE: arch/i386/kernel/kgdb.c:255:
+	asm volatile ("movl %%db6, %0\n":"=r" (dr6)
 	                                ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#366: FILE: arch/i386/kernel/kgdb.c:269:
+	return;
+}

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#371: FILE: arch/i386/kernel/kgdb.c:274:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#371: FILE: arch/i386/kernel/kgdb.c:274:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <eVector>
#374: FILE: arch/i386/kernel/kgdb.c:277:
+void kgdb_post_master_code(struct pt_regs *regs, int eVector, int err_code)

CHECK:CAMELCASE: Avoid CamelCase: <exceptionVector>
#381: FILE: arch/i386/kernel/kgdb.c:284:
+int kgdb_arch_handle_exception(int exceptionVector, int signo,

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#389: FILE: arch/i386/kernel/kgdb.c:292:
+	int newPC;

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#402: FILE: arch/i386/kernel/kgdb.c:305:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#404: FILE: arch/i386/kernel/kgdb.c:307:
+		if (kgdb_hex2long(&ptr, &addr)) {
+			linux_regs->eip = addr;
+		}

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#418: FILE: arch/i386/kernel/kgdb.c:321:
+		asm volatile ("movl %%db6, %0\n":"=r" (dr6));
 		                                ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#433: FILE: arch/i386/kernel/kgdb.c:336:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#456: FILE: arch/i386/kernel/kgdb.c:359:
+		if (remove_hw_break(breakno & 0x3) == 0) {
[...]
+		} else {
[...]

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#467: FILE: arch/i386/kernel/kgdb.c:370:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#504: FILE: arch/i386/kernel/nmi.c:440:
 		if (alert_counter[cpu] == 5*nmi_hz) {
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: arch/i386/kernel/nmi.c:441:
+			CHK_DEBUGGER(2,SIGSEGV,0,regs,)
 			              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: arch/i386/kernel/nmi.c:441:
+			CHK_DEBUGGER(2,SIGSEGV,0,regs,)
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: arch/i386/kernel/nmi.c:441:
+			CHK_DEBUGGER(2,SIGSEGV,0,regs,)
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#505: FILE: arch/i386/kernel/nmi.c:441:
+			CHK_DEBUGGER(2,SIGSEGV,0,regs,)
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#540: FILE: arch/i386/kernel/traps.c:260:
+	CHK_DEBUGGER(1,SIGTRAP,err,regs,)
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#540: FILE: arch/i386/kernel/traps.c:260:
+	CHK_DEBUGGER(1,SIGTRAP,err,regs,)
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#540: FILE: arch/i386/kernel/traps.c:260:
+	CHK_DEBUGGER(1,SIGTRAP,err,regs,)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#540: FILE: arch/i386/kernel/traps.c:260:
+	CHK_DEBUGGER(1,SIGTRAP,err,regs,)
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#548: FILE: arch/i386/kernel/traps.c:335:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,)\
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#548: FILE: arch/i386/kernel/traps.c:335:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,)\
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#548: FILE: arch/i386/kernel/traps.c:335:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,)\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#548: FILE: arch/i386/kernel/traps.c:335:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,)\
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#556: FILE: arch/i386/kernel/traps.c:353:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,goto skip_trap)\
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#556: FILE: arch/i386/kernel/traps.c:353:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,goto skip_trap)\
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#556: FILE: arch/i386/kernel/traps.c:353:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,goto skip_trap)\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#556: FILE: arch/i386/kernel/traps.c:353:
+	CHK_DEBUGGER(trapnr,signr,error_code,regs,goto skip_trap)\
 	                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#581: FILE: arch/i386/kernel/traps.c:579:
 	
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#583: FILE: arch/i386/kernel/traps.c:581:
+	 * to continue sanely */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#595: FILE: arch/i386/kernel/traps.c:595:
+	CHK_DEBUGGER(1,SIGTRAP,error_code,regs,)
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#595: FILE: arch/i386/kernel/traps.c:595:
+	CHK_DEBUGGER(1,SIGTRAP,error_code,regs,)
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#595: FILE: arch/i386/kernel/traps.c:595:
+	CHK_DEBUGGER(1,SIGTRAP,error_code,regs,)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#595: FILE: arch/i386/kernel/traps.c:595:
+	CHK_DEBUGGER(1,SIGTRAP,error_code,regs,)
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#627: FILE: arch/i386/mm/fault.c:408:
+	CHK_DEBUGGER(14, SIGSEGV,error_code, regs,)
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#627: FILE: arch/i386/mm/fault.c:408:
+	CHK_DEBUGGER(14, SIGSEGV,error_code, regs,)
 	                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#636: FILE: arch/i386/mm/fault.c:417:
 
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#645: FILE: include/asm-i386/kgdb.h:1:
+#ifndef _ASM_KGDB_H_

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: include/asm-i386/kgdb.h:24:
+ *  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#690: FILE: include/asm-i386/kgdb.h:46:
+#define BREAKPOINT() asm("   int $3");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#702: FILE: include/asm-i386/processor.h:428:
+	void *		debuggerinfo;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297970.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 33 warnings, 12 checks, 599 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297970.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
