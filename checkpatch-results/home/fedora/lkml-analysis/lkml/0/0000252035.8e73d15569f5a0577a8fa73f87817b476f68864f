WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#61: 
cond_resched_lock() doesnt notice that a reschedule is due.
                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#73: 
CONFIG_PREEMPT enabled, didnt have any spin-nicely preemption logic for
                        ^^^^^

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#81: 
the above list didnt do any IRQ-enabling while spinning - possibly
               ^^^^^

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#135: 
cond_resched_lock() doesnt notice that a reschedule is due.
                    ^^^^^^

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#147: 
CONFIG_PREEMPT enabled, didnt have any spin-nicely preemption logic for
                        ^^^^^

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#155: 
the above list didnt do any IRQ-enabling while spinning - possibly
               ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: include/asm-x86_64/spinlock.h:199:
+	atomic_t *count = (atomic_t *)lock;
+	atomic_dec(count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#408: FILE: include/linux/spinlock.h:225:
+#define _read_trylock(lock)	({preempt_disable();_raw_read_trylock(lock) ? \
                            	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#409: FILE: include/linux/spinlock.h:226:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#409: FILE: include/linux/spinlock.h:226:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: include/linux/spinlock.h:416:
+extern void __lockfunc spin_lock(spinlock_t *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#429: FILE: include/linux/spinlock.h:417:
+extern void __lockfunc write_lock(rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#430: FILE: include/linux/spinlock.h:418:
+extern void __lockfunc read_lock(rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: include/linux/spinlock.h:421:
+extern void __lockfunc spin_lock_irq(spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: include/linux/spinlock.h:422:
+extern void __lockfunc spin_lock_bh(spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: include/linux/spinlock.h:425:
+extern void __lockfunc read_lock_irq(rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: include/linux/spinlock.h:426:
+extern void __lockfunc read_lock_bh(rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#441: FILE: include/linux/spinlock.h:429:
+extern void __lockfunc write_lock_irq(rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: include/linux/spinlock.h:430:
+extern void __lockfunc write_lock_bh(rwlock_t *lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: include/linux/spinlock.h:431:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: include/linux/spinlock.h:431:
+ $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#477: FILE: include/linux/spinlock.h:489:
+extern int  _metered_read_trylock (rwlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: include/linux/spinlock.h:489:
+extern int  _metered_read_trylock (rwlock_t *lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#517: FILE: include/linux/sched.h:961:
+extern int cond_resched_lock(spinlock_t * lock);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: include/linux/sched.h:961:
+extern int cond_resched_lock(spinlock_t * lock);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#580: FILE: include/asm-sparc/spinlock.h:88:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#596: FILE: include/asm-sparc/spinlock.h:152:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#597: FILE: include/asm-sparc/spinlock.h:153:
+	volatile unsigned int lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: include/asm-i386/spinlock.h:228:
+	atomic_t *count = (atomic_t *)lock;
+	atomic_dec(count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: kernel/spinlock.c:43:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#812: FILE: kernel/spinlock.c:68:
+EXPORT_SYMBOL(_spin_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#861: FILE: kernel/spinlock.c:170:
+ * time (making _this_ CPU preemptable if possible), and we also signal
                            ^^^^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'locktype' - possible side-effects?
#867: FILE: kernel/spinlock.c:176:
+#define BUILD_LOCK_OPS(op, locktype)					\
+void __lockfunc op##_lock(locktype *lock)				\
+{									\
+	preempt_disable();						\
+	for (;;) {							\
+		if (likely(_raw_##op##_trylock(lock)))			\
+			break;						\
+		preempt_enable();					\
+		if (!(lock)->break_lock)				\
+			(lock)->break_lock = 1;				\
+		cpu_relax();						\
+		preempt_disable();					\
+	}								\
+}									\
+									\
+EXPORT_SYMBOL(op##_lock);						\
+									\
+void __lockfunc __##op##_lock_irqsave(locktype *lock, unsigned long *flags)\
+{									\
+	preempt_disable();						\
+	for (;;) {							\
+		local_irq_save(*flags);					\
+		if (likely(_raw_##op##_trylock(lock)))			\
+			break;						\
+		local_irq_restore(*flags);				\
+									\
+		preempt_enable();					\
+		if (!(lock)->break_lock)				\
+			(lock)->break_lock = 1;				\
+		cpu_relax();						\
+		preempt_disable();					\
+	}								\
+}									\
+									\
+EXPORT_SYMBOL(__##op##_lock_irqsave);					\
+									\
+void __lockfunc op##_lock_irq(locktype *lock)				\
+{									\
+	unsigned long flags;						\
+									\
+	__##op##_lock_irqsave(lock, &flags);				\
+}									\
+									\
+EXPORT_SYMBOL(op##_lock_irq);						\
+									\
+void __lockfunc op##_lock_bh(locktype *lock)				\
+{									\
+	unsigned long flags;						\
+									\
+	/*							*/	\
+	/* Careful: we must exclude softirqs too, hence the	*/	\
+	/* irq-disabling. We use the generic preemption-aware	*/	\
+	/* function:						*/	\
+	/**/								\
+	__##op##_lock_irqsave(lock, &flags);				\
+	local_bh_disable();						\
+	local_irq_restore(flags);					\
+}									\
+									\
+EXPORT_SYMBOL(op##_lock_bh)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'locktype' may be better as '(locktype)' to avoid precedence issues
#867: FILE: kernel/spinlock.c:176:
+#define BUILD_LOCK_OPS(op, locktype)					\
+void __lockfunc op##_lock(locktype *lock)				\
+{									\
+	preempt_disable();						\
+	for (;;) {							\
+		if (likely(_raw_##op##_trylock(lock)))			\
+			break;						\
+		preempt_enable();					\
+		if (!(lock)->break_lock)				\
+			(lock)->break_lock = 1;				\
+		cpu_relax();						\
+		preempt_disable();					\
+	}								\
+}									\
+									\
+EXPORT_SYMBOL(op##_lock);						\
+									\
+void __lockfunc __##op##_lock_irqsave(locktype *lock, unsigned long *flags)\
+{									\
+	preempt_disable();						\
+	for (;;) {							\
+		local_irq_save(*flags);					\
+		if (likely(_raw_##op##_trylock(lock)))			\
+			break;						\
+		local_irq_restore(*flags);				\
+									\
+		preempt_enable();					\
+		if (!(lock)->break_lock)				\
+			(lock)->break_lock = 1;				\
+		cpu_relax();						\
+		preempt_disable();					\
+	}								\
+}									\
+									\
+EXPORT_SYMBOL(__##op##_lock_irqsave);					\
+									\
+void __lockfunc op##_lock_irq(locktype *lock)				\
+{									\
+	unsigned long flags;						\
+									\
+	__##op##_lock_irqsave(lock, &flags);				\
+}									\
+									\
+EXPORT_SYMBOL(op##_lock_irq);						\
+									\
+void __lockfunc op##_lock_bh(locktype *lock)				\
+{									\
+	unsigned long flags;						\
+									\
+	/*							*/	\
+	/* Careful: we must exclude softirqs too, hence the	*/	\
+	/* irq-disabling. We use the generic preemption-aware	*/	\
+	/* function:						*/	\
+	/**/								\
+	__##op##_lock_irqsave(lock, &flags);				\
+	local_bh_disable();						\
+	local_irq_restore(flags);					\
+}									\
+									\
+EXPORT_SYMBOL(op##_lock_bh)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#868: FILE: kernel/spinlock.c:177:
+void __lockfunc op##_lock(locktype *lock)				\
                                    ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#882: FILE: kernel/spinlock.c:191:
+EXPORT_SYMBOL(op##_lock);						\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#901: FILE: kernel/spinlock.c:210:
+EXPORT_SYMBOL(__##op##_lock_irqsave);					\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#910: FILE: kernel/spinlock.c:219:
+EXPORT_SYMBOL(op##_lock_irq);						\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#981: FILE: kernel/sched.c:3540:
+int cond_resched_lock(spinlock_t * lock)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1002: FILE: kernel/sched.c:3561:
+EXPORT_SYMBOL(cond_resched_lock);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 19 warnings, 14 checks, 735 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
