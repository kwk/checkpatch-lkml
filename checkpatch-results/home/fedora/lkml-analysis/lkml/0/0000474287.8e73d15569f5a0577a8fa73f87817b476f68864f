WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: include/linux/cpumap.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: include/linux/cpumap.h:6:
+ *^I01/25/02 Initial Version ^IRuss Weight <rweight@us.ibm.com>$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#82: FILE: include/linux/cpumap.h:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#83: FILE: include/linux/cpumap.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#98: FILE: include/linux/cpumap.h:38:
+typedef unsigned long cpumap_t[CPUMAP_SIZE];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: include/linux/cpumap.h:48:
+	BUG();	/* Not supported */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#118: FILE: include/linux/cpumap.h:58:
+	BUG();	/* Not supported */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: include/linux/cpumap.h:64:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#130: FILE: include/linux/cpumap.h:70:
+	if (nr < NR_CPUS) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#130: FILE: include/linux/cpumap.h:70:
+	if (nr < NR_CPUS) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#133: FILE: include/linux/cpumap.h:73:
+		BUG();

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#139: FILE: include/linux/cpumap.h:79:
+	if (nr < NR_CPUS) {
[...]
+	} else {
[...]

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#139: FILE: include/linux/cpumap.h:79:
+	if (nr < NR_CPUS) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: include/linux/cpumap.h:82:
+		BUG();

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#148: FILE: include/linux/cpumap.h:88:
+	if (nr < NR_CPUS) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#150: FILE: include/linux/cpumap.h:90:
+		return test_and_set_bit(nr, cpumap);
+	} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#151: FILE: include/linux/cpumap.h:91:
+		BUG();

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#161: FILE: include/linux/cpumap.h:101:
+	if (nr < NR_CPUS) {
[...]
+	} else {
[...]

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#161: FILE: include/linux/cpumap.h:101:
+	if (nr < NR_CPUS) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#178: FILE: include/linux/cpumap.h:118:
+	for (i = 0; i < CPUMAP_SIZE; i++) {
+		cpumap[i] = 0UL;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: include/linux/cpumap.h:130:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#191: FILE: include/linux/cpumap.h:131:
+		if (map[i] !=  0) {
+			return 0;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: include/linux/cpumap.h:148:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#209: FILE: include/linux/cpumap.h:149:
+		if (map1[i] !=  map2[i]) {
+			return 0;
+		}

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#220: FILE: include/linux/cpumap.h:160:
+#define	CPUMAP_FILLMASK	((1 << (NR_CPUS % BITS_PER_LONG)) -1)
        	               	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#230: FILE: include/linux/cpumap.h:170:
+	for (i = 0; i < (CPUMAP_SIZE - 1); i++) {
+		cpumap[i] = ~0UL;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#247: FILE: include/linux/cpumap.h:187:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#247: FILE: include/linux/cpumap.h:187:
+	for (i = 0; i < CPUMAP_SIZE; i++) {
+		destmap[i] = srcmap[i];
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: include/linux/cpumap.h:199:
+	int i;
+	for (i = 0; i < CPUMAP_SIZE; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#259: FILE: include/linux/cpumap.h:199:
+	for (i = 0; i < CPUMAP_SIZE; i++) {
+		result[i] = map1[i] & map2[i];
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: include/linux/cpumap.h:209:
+ * a cpumap_t object for display. This function knows the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#286: FILE: include/linux/cpumap.h:226:
+	if (size < CPUMAP_BUFSIZE) {
+		BUG();
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: include/linux/cpumap.h:227:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#291: FILE: include/linux/cpumap.h:231:
+	sprintf(buf, "0x" CPUMAP_FORMAT_STR, map[CPUMAP_SIZE-1]);
 	                                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#295: FILE: include/linux/cpumap.h:235:
+		char *p = buf + strlen(buf);
+		for (i = CPUMAP_SIZE-2; i >= 0; i--, p += (sizeof(long) + 1)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#295: FILE: include/linux/cpumap.h:235:
+		for (i = CPUMAP_SIZE-2; i >= 0; i--, p += (sizeof(long) + 1)) {
 		                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#295: FILE: include/linux/cpumap.h:235:
+		for (i = CPUMAP_SIZE-2; i >= 0; i--, p += (sizeof(long) + 1)) {
+			sprintf(p, " " CPUMAP_FORMAT_STR, map[i]);
+		}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 30 warnings, 4 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
