WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
diff -u --recursive --new-file linux-2.5.69-02-open2/fs/affs/namei.c linux-2.5.69-03-creat/fs/affs/namei.c

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: fs/bfs/dir.c:81:
+static int bfs_create(struct inode * dir, struct dentry * dentry, int mode,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: fs/bfs/dir.c:81:
+static int bfs_create(struct inode * dir, struct dentry * dentry, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: fs/bfs/dir.c:82:
+static int bfs_create(struct inode * dir, struct dentry * dentry, int mode,
+		struct vfsintent *intent)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct vfsintent *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#75: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct vfsintent *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#75: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#75: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#75: FILE: fs/cifs/cifsfs.h:49:
+extern int cifs_create(struct inode *, struct dentry *, int, struct vfsintent *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: fs/cifs/dir.c:123:
+cifs_create(struct inode *inode, struct dentry *direntry, int mode,
+		struct vfsintent *intent)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#121: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfsintent *intent)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfsintent *intent)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#121: FILE: fs/ext2/namei.c:123:
+static int ext2_create (struct inode * dir, struct dentry * dentry, int mode, struct vfsintent *intent)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: fs/ext3/namei.c:1636:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#133: FILE: fs/ext3/namei.c:1636:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: fs/ext3/namei.c:1636:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: fs/ext3/namei.c:1637:
+static int ext3_create (struct inode * dir, struct dentry * dentry, int mode,
+		struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: fs/hfs/dir.c:166:
+int hfs_create(struct inode * dir, struct dentry *dentry, int mode, struct vfsintent *intent)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#188: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#188: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#188: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#188: FILE: fs/hpfs/hpfs_fn.h:288:
+int hpfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#212: FILE: fs/hugetlbfs/inode.c:413:
+static int hugetlbfs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#224: FILE: fs/intermezzo/dir.c:415:
+static int presto_create(struct inode * dir, struct dentry * dentry, int mode,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#224: FILE: fs/intermezzo/dir.c:415:
+static int presto_create(struct inode * dir, struct dentry * dentry, int mode,

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/intermezzo/dir.c:416:
+                struct vfsintent *intent)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: fs/intermezzo/dir.c:416:
+static int presto_create(struct inode * dir, struct dentry * dentry, int mode,
+                struct vfsintent *intent)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: fs/intermezzo/dir.c:416:
+                struct vfsintent *intent)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: fs/intermezzo/vfs.c:601:
+        error = iops->create(dir->d_inode, dentry, mode, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: fs/intermezzo/vfs.c:601:
+        error = iops->create(dir->d_inode, dentry, mode, NULL);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/jffs/inode-v23.c:1277:
+jffs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#262: FILE: fs/jffs2/dir.c:28:
+static int jffs2_create (struct inode *,struct dentry *,int, struct vfsintent *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#262: FILE: fs/jffs2/dir.c:28:
+static int jffs2_create (struct inode *,struct dentry *,int, struct vfsintent *);
                                        ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#262: FILE: fs/jffs2/dir.c:28:
+static int jffs2_create (struct inode *,struct dentry *,int, struct vfsintent *);
                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: fs/jffs2/dir.c:172:
+static int jffs2_create(struct inode *dir_i, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: fs/jfs/namei.c:64:
+int jfs_create(struct inode *dip, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#302: FILE: fs/minix/namei.c:92:
+static int minix_create(struct inode * dir, struct dentry *dentry, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: fs/minix/namei.c:93:
+static int minix_create(struct inode * dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: fs/msdos/namei.c:265:
+int msdos_create(struct inode *dir,struct dentry *dentry,int mode,
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: fs/msdos/namei.c:265:
+int msdos_create(struct inode *dir,struct dentry *dentry,int mode,
                                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/msdos/namei.c:266:
+int msdos_create(struct inode *dir,struct dentry *dentry,int mode,
+		struct vfsintent *intent)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: fs/namei.c:1110:
+int vfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#356: FILE: fs/namei.c:1448:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,NULL);
 			                   ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: fs/namei.c:1448:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,NULL);
 			                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: fs/namei.c:1448:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,NULL);
 			                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: fs/namei.c:1448:
+			error = vfs_create(nd.dentry->d_inode,dentry,mode,NULL);
 			                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: fs/ncpfs/dir.c:946:
+static int ncp_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: fs/nfs/dir.c:791:
+static int nfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#433: FILE: fs/openpromfs/inode.c:62:
+static int openpromfs_create (struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#442: FILE: fs/openpromfs/inode.c:857:
+static int openpromfs_create (struct inode *dir, struct dentry *dentry, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: fs/openpromfs/inode.c:858:
+static int openpromfs_create (struct inode *dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#468: FILE: fs/ramfs/inode.c:114:
+static int ramfs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: fs/reiserfs/namei.c:561:
+static int reiserfs_create (struct inode * dir, struct dentry *dentry, int mode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#480: FILE: fs/reiserfs/namei.c:561:
+static int reiserfs_create (struct inode * dir, struct dentry *dentry, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: fs/reiserfs/namei.c:562:
+static int reiserfs_create (struct inode * dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: fs/smbfs/dir.c:514:
+smb_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#515: FILE: fs/sysv/namei.c:99:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#515: FILE: fs/sysv/namei.c:99:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#515: FILE: fs/sysv/namei.c:99:
+static int sysv_create(struct inode * dir, struct dentry * dentry, int mode, struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#539: FILE: fs/ufs/namei.c:95:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#539: FILE: fs/ufs/namei.c:95:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#539: FILE: fs/ufs/namei.c:95:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: fs/ufs/namei.c:96:
+static int ufs_create (struct inode * dir, struct dentry * dentry, int mode,
+		struct vfsintent *intent)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: fs/umsdos/namei.c:277:
+	ret = msdos_create (dir, fake, S_IFREG | 0777, NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#573: FILE: fs/umsdos/namei.c:314:
+int UMSDOS_create (struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *intent)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#585: FILE: fs/vfat/namei.c:914:
+int vfat_create(struct inode *dir,struct dentry* dentry,int mode,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#585: FILE: fs/vfat/namei.c:914:
+int vfat_create(struct inode *dir,struct dentry* dentry,int mode,
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#585: FILE: fs/vfat/namei.c:914:
+int vfat_create(struct inode *dir,struct dentry* dentry,int mode,
                                                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: include/linux/affs_fs.h:46:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#611: FILE: include/linux/affs_fs.h:46:
+extern int	affs_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#623: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#623: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#623: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#623: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#623: FILE: include/linux/fs.h:642:
+extern int vfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#632: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct vfsintent *);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#632: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct vfsintent *);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#632: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct vfsintent *);
 	                                             ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#632: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#632: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#632: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#632: FILE: include/linux/fs.h:733:
+	int (*create) (struct inode *,struct dentry *,int, struct vfsintent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#644: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#644: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#644: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#644: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#644: FILE: include/linux/hfs_fs.h:237:
+extern int hfs_create(struct inode *, struct dentry *, int, struct vfsintent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/linux/msdos_fs.h:321:
+extern int msdos_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#656: FILE: include/linux/msdos_fs.h:321:
+extern int msdos_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#665: FILE: include/linux/msdos_fs.h:331:
+extern int vfat_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsintent *' should also have an identifier name
#665: FILE: include/linux/msdos_fs.h:331:
+extern int vfat_create(struct inode *dir, struct dentry *dentry, int mode, struct vfsintent *);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#684: FILE: include/linux/qnx4_fs.h:126:
+extern int qnx4_create(struct inode *inode, struct dentry *dentry, int mode, struct vfsintent *intent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: include/linux/qnx4_fs.h:126:
+extern int qnx4_create(struct inode *inode, struct dentry *dentry, int mode, struct vfsintent *intent);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: mm/shmem.c:1400:
+static int shmem_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct vfsintent *intent)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 42 warnings, 24 checks, 480 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
