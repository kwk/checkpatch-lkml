CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#78: FILE: include/linux/radix-tree.h:36:
+	spinlock_t		lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#102: FILE: include/linux/radix-tree.h:123:
+void **radix_tree_lookup_slot(struct radix_tree_root *, unsigned long, spinlock_t **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#102: FILE: include/linux/radix-tree.h:123:
+void **radix_tree_lookup_slot(struct radix_tree_root *, unsigned long, spinlock_t **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t **' should also have an identifier name
#102: FILE: include/linux/radix-tree.h:123:
+void **radix_tree_lookup_slot(struct radix_tree_root *, unsigned long, spinlock_t **);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#122: FILE: lib/radix-tree.c:56:
+	spinlock_t	lock;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: lib/radix-tree.c:73:
+static inline spinlock_t * radix_node_lock(struct radix_tree_root *root,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: lib/radix-tree.c:74:
+static inline spinlock_t * radix_node_lock(struct radix_tree_root *root,
+		struct radix_tree_node *node)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#148: FILE: lib/radix-tree.c:82:
+	spinlock_t *lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: lib/radix-tree.c:204:
+static inline int any_tag_set_but(struct radix_tree_node *node,
+		unsigned int tag, int offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#162: FILE: lib/radix-tree.c:209:
+	unsigned long offset_mask = ~(1 << (offset % BITS_PER_LONG));
+	for (idx = 0; idx < RADIX_TREE_TAG_LONGS; idx++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: lib/radix-tree.c:211:
+		unsigned long mask = ~0UL;
+		if (idx == offset_idx)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#203: FILE: lib/radix-tree.c:319:
+			if (!(slot = radix_tree_node_alloc(root))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot"
#229: FILE: lib/radix-tree.c:347:
+	if (slot != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: lib/radix-tree.c:356:
+		BUG_ON(tag_get(node, tag, offset));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#320: FILE: lib/radix-tree.c:492:
+	BUG_ON(index > radix_tree_maxindex(height));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#405: FILE: lib/radix-tree.c:586:
+				BUG_ON(!punlock->lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#418: FILE: lib/radix-tree.c:597:
+	if (slot == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#430: FILE: lib/radix-tree.c:601:
+		BUG_ON(!punlock->lock);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!pathp->offset'
#530: FILE: lib/radix-tree.c:984:
+		if (lock && (!parent_tags || !no_tags) &&
+				slot->count > 1+(!pathp->offset)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: lib/radix-tree.c:985:
+		if (lock && (!parent_tags || !no_tags) &&
+				slot->count > 1+(!pathp->offset)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#531: FILE: lib/radix-tree.c:985:
+				slot->count > 1+(!pathp->offset)) {
 				               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#533: FILE: lib/radix-tree.c:987:
+				BUG_ON(!punlock->lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#545: FILE: lib/radix-tree.c:997:
+	if (slot == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#611: FILE: lib/radix-tree.c:1031:
+	BUG_ON(punlock->node || !punlock->lock);

CHECK:CAMELCASE: Avoid CamelCase: <LockPageNoNewRefs>
#647: FILE: fs/buffer.c:854:
+		LockPageNoNewRefs(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPageNoNewRefs>
#656: FILE: fs/buffer.c:862:
+		UnlockPageNoNewRefs(page);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#771: FILE: mm/filemap.c:638:
+	spinlock_t *lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#774: FILE: mm/filemap.c:641:
+	radix_pointer = (struct page **)radix_tree_lookup_slot(

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#804: FILE: mm/migrate.c:186:
+	spinlock_t *lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: mm/migrate.c:202:
+  ^I * processes from accessing this page until the new page is ready.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#813: FILE: mm/migrate.c:202:
+  ^I * processes from accessing this page until the new page is ready.$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000061531.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 12 warnings, 16 checks, 1006 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000061531.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
