WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#39: FILE: drivers/infiniband/hw/ehca/ehca_main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#78: FILE: drivers/infiniband/hw/ehca/ehca_main.c:40:
+ *  $Id: ehca_main.c,v 1.35 2006/04/25 08:59:43 schickhj Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#95: FILE: drivers/infiniband/hw/ehca/ehca_main.c:57:
+struct ehca_comp_pool* ehca_pool;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#97: FILE: drivers/infiniband/hw/ehca/ehca_main.c:59:
+int ehca_open_aqp1     = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#99: FILE: drivers/infiniband/hw/ehca/ehca_main.c:61:
+int ehca_hw_level      = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#101: FILE: drivers/infiniband/hw/ehca/ehca_main.c:63:
+int ehca_use_hp_mr     = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#119: FILE: drivers/infiniband/hw/ehca/ehca_main.c:81:
+		 "debug level"
+		 " (0: node, 6: only errors (default), 9: all)");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#122: FILE: drivers/infiniband/hw/ehca/ehca_main.c:84:
+		 "hardware level"
+		 " (0: autosensing (default), 1: v. 0.20, 2: v. 0.21)");

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: drivers/infiniband/hw/ehca/ehca_main.c:93:
+		 "polls all event queues periodically"
+		 " (0: no, 1: yes (default))");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#139: FILE: drivers/infiniband/hw/ehca/ehca_main.c:101:
+u8 ehca_edeb_mask[EHCA_EDEB_TRACE_MASK_SIZE]={6, 6, 6, 6,
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#148: FILE: drivers/infiniband/hw/ehca/ehca_main.c:110:
+spinlock_t ehca_qp_idr_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#149: FILE: drivers/infiniband/hw/ehca/ehca_main.c:111:
+spinlock_t ehca_cq_idr_lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: drivers/infiniband/hw/ehca/ehca_main.c:123:
+		int i;
+		for (i = 0; i < EHCA_EDEB_TRACE_MASK_SIZE; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ehca_module->cache_pd"
#179: FILE: drivers/infiniband/hw/ehca/ehca_main.c:141:
+	if (ehca_module->cache_pd == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ehca_module->cache_cq"
#190: FILE: drivers/infiniband/hw/ehca/ehca_main.c:152:
+	if (ehca_module->cache_cq == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ehca_module->cache_qp"
#201: FILE: drivers/infiniband/hw/ehca/ehca_main.c:163:
+	if (ehca_module->cache_qp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ehca_module->cache_av"
#212: FILE: drivers/infiniband/hw/ehca/ehca_main.c:174:
+	if (ehca_module->cache_av == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ehca_module->cache_mw"
#223: FILE: drivers/infiniband/hw/ehca/ehca_main.c:185:
+	if (ehca_module->cache_mw == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ehca_module->cache_mr"
#234: FILE: drivers/infiniband/hw/ehca/ehca_main.c:196:
+	if (ehca_module->cache_mr == NULL) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#300: FILE: drivers/infiniband/hw/ehca/ehca_main.c:262:
+#define EHCA_HCAAVER  EHCA_BMASK_IBM(32,39)
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: drivers/infiniband/hw/ehca/ehca_main.c:263:
+#define EHCA_REVID    EHCA_BMASK_IBM(40,63)
                                        ^

CHECK:SPACING: No space is necessary after a cast
#328: FILE: drivers/infiniband/hw/ehca/ehca_main.c:290:
+		shca->num_ports = (u8) rblock->num_ports;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hcaaver == 1'
#342: FILE: drivers/infiniband/hw/ehca/ehca_main.c:304:
+		if ((hcaaver == 1) && (revid == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'revid == 0'
#342: FILE: drivers/infiniband/hw/ehca/ehca_main.c:304:
+		if ((hcaaver == 1) && (revid == 0))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#365: FILE: drivers/infiniband/hw/ehca/ehca_main.c:327:
+static int init_node_guid(struct ehca_shca* shca)

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#406: FILE: drivers/infiniband/hw/ehca/ehca_main.c:368:
+	strlcpy(shca->ib_device.name, "ehca%d", IB_DEVICE_NAME_MAX);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sport->ibcq_aqp1"
#495: FILE: drivers/infiniband/hw/ehca/ehca_main.c:457:
+	if (sport->ibcq_aqp1 != NULL) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#500: FILE: drivers/infiniband/hw/ehca/ehca_main.c:462:
+	ibcq = ib_create_cq(&shca->ib_device, NULL, NULL, (void*)(-1), 10);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sport->ibqp_aqp1"
#507: FILE: drivers/infiniband/hw/ehca/ehca_main.c:469:
+	if (sport->ibqp_aqp1 != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#573: FILE: drivers/infiniband/hw/ehca/ehca_main.c:535:
+	int total = 0;
+	total += snprintf(buf + total, PAGE_SIZE - total, "%d",

WARNING:LINE_SPACING: Missing a blank line after declarations
#589: FILE: drivers/infiniband/hw/ehca/ehca_main.c:551:
+	int i;
+	for (i = 0; i < EHCA_EDEB_TRACE_MASK_SIZE; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: drivers/infiniband/hw/ehca/ehca_main.c:553:
+		char value = buf[i] - '0';
+		if ((value <= 9) && (count >= i)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'value <= 9'
#591: FILE: drivers/infiniband/hw/ehca/ehca_main.c:553:
+		if ((value <= 9) && (count >= i)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count >= i'
#591: FILE: drivers/infiniband/hw/ehca/ehca_main.c:553:
+		if ((value <= 9) && (count >= i)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#591: FILE: drivers/infiniband/hw/ehca/ehca_main.c:553:
+		if ((value <= 9) && (count >= i)) {
+			ehca_edeb_mask[i] = value;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#597: FILE: drivers/infiniband/hw/ehca/ehca_main.c:559:
+DRIVER_ATTR(debug_mask, S_IRUSR | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#610: FILE: drivers/infiniband/hw/ehca/ehca_main.c:572:
+#define EHCA_RESOURCE_ATTR(name)                                           \
+static ssize_t  ehca_show_##name(struct device *dev,                       \
+				 struct device_attribute *attr,            \
+				 char *buf)                                \
+{									   \
+	struct ehca_shca *shca;						   \
+	struct hipz_query_hca *rblock;				           \
+        int data;                                                          \
+									   \
+	shca = dev->driver_data;					   \
+									   \
+	rblock = kzalloc(H_CB_ALIGNMENT, GFP_KERNEL);			   \
+	if (!rblock) {						           \
+		EDEB_ERR(4, "Can't allocate rblock memory.");		   \
+		return 0;						   \
+	}								   \
+									   \
+	if (hipz_h_query_hca(shca->ipz_hca_handle, rblock) != H_SUCCESS) { \
+			EDEB_ERR(4, "Can't query device properties");	   \
+			kfree(rblock);					   \
+			return 0;					   \
+	}								   \
+                                                                           \
+	data = rblock->name;                                               \
+	kfree(rblock);                                                     \
+									   \
+	if ((strcmp(#name, "num_ports") == 0) && (ehca_nr_ports == 1))	   \
+		return snprintf(buf, 256, "1\n");			   \
+	else								   \
+		return snprintf(buf, 256, "%d\n", data);		   \
+									   \
+}									   \
+static DEVICE_ATTR(name, S_IRUGO, ehca_show_##name, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#610: FILE: drivers/infiniband/hw/ehca/ehca_main.c:572:
+#define EHCA_RESOURCE_ATTR(name)                                           \
+static ssize_t  ehca_show_##name(struct device *dev,                       \
+				 struct device_attribute *attr,            \
+				 char *buf)                                \
+{									   \
+	struct ehca_shca *shca;						   \
+	struct hipz_query_hca *rblock;				           \
+        int data;                                                          \
+									   \
+	shca = dev->driver_data;					   \
+									   \
+	rblock = kzalloc(H_CB_ALIGNMENT, GFP_KERNEL);			   \
+	if (!rblock) {						           \
+		EDEB_ERR(4, "Can't allocate rblock memory.");		   \
+		return 0;						   \
+	}								   \
+									   \
+	if (hipz_h_query_hca(shca->ipz_hca_handle, rblock) != H_SUCCESS) { \
+			EDEB_ERR(4, "Can't query device properties");	   \
+			kfree(rblock);					   \
+			return 0;					   \
+	}								   \
+                                                                           \
+	data = rblock->name;                                               \
+	kfree(rblock);                                                     \
+									   \
+	if ((strcmp(#name, "num_ports") == 0) && (ehca_nr_ports == 1))	   \
+		return snprintf(buf, 256, "1\n");			   \
+	else								   \
+		return snprintf(buf, 256, "%d\n", data);		   \
+									   \
+}									   \
+static DEVICE_ATTR(name, S_IRUGO, ehca_show_##name, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#610: FILE: drivers/infiniband/hw/ehca/ehca_main.c:572:
+#define EHCA_RESOURCE_ATTR(name)                                           \
+static ssize_t  ehca_show_##name(struct device *dev,                       \
+				 struct device_attribute *attr,            \
+				 char *buf)                                \
+{									   \
+	struct ehca_shca *shca;						   \
+	struct hipz_query_hca *rblock;				           \
+        int data;                                                          \
+									   \
+	shca = dev->driver_data;					   \
+									   \
+	rblock = kzalloc(H_CB_ALIGNMENT, GFP_KERNEL);			   \
+	if (!rblock) {						           \
+		EDEB_ERR(4, "Can't allocate rblock memory.");		   \
+		return 0;						   \
+	}								   \
+									   \
+	if (hipz_h_query_hca(shca->ipz_hca_handle, rblock) != H_SUCCESS) { \
+			EDEB_ERR(4, "Can't query device properties");	   \
+			kfree(rblock);					   \
+			return 0;					   \
+	}								   \
+                                                                           \
+	data = rblock->name;                                               \
+	kfree(rblock);                                                     \
+									   \
+	if ((strcmp(#name, "num_ports") == 0) && (ehca_nr_ports == 1))	   \
+		return snprintf(buf, 256, "1\n");			   \
+	else								   \
+		return snprintf(buf, 256, "%d\n", data);		   \
+									   \
+}									   \
+static DEVICE_ATTR(name, S_IRUGO, ehca_show_##name, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: drivers/infiniband/hw/ehca/ehca_main.c:579:
+        int data;                                                          \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: drivers/infiniband/hw/ehca/ehca_main.c:579:
+        int data;                                                          \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#627: FILE: drivers/infiniband/hw/ehca/ehca_main.c:589:
+	if (hipz_h_query_hca(shca->ipz_hca_handle, rblock) != H_SUCCESS) { \
+			EDEB_ERR(4, "Can't query device properties");	   \

ERROR:CODE_INDENT: code indent should use tabs where possible
#632: FILE: drivers/infiniband/hw/ehca/ehca_main.c:594:
+                                                                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: drivers/infiniband/hw/ehca/ehca_main.c:594:
+                                                                           \$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ehca_nr_ports == 1'
#636: FILE: drivers/infiniband/hw/ehca/ehca_main.c:598:
+	if ((strcmp(#name, "num_ports") == 0) && (ehca_nr_ports == 1))	   \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#642: FILE: drivers/infiniband/hw/ehca/ehca_main.c:604:
+static DEVICE_ATTR(name, S_IRUGO, ehca_show_##name, NULL);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#667: FILE: drivers/infiniband/hw/ehca/ehca_main.c:629:
+
+}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'ehca_show_adapter_handle' to 'adapter_handle_show'
#667: FILE: drivers/infiniband/hw/ehca/ehca_main.c:629:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#668: FILE: drivers/infiniband/hw/ehca/ehca_main.c:630:
+static DEVICE_ATTR(adapter_handle, S_IRUGO, ehca_show_adapter_handle, NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#670: FILE: drivers/infiniband/hw/ehca/ehca_main.c:632:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#710: FILE: drivers/infiniband/hw/ehca/ehca_main.c:672:
+static int __devinit ehca_probe(struct ibmebus_dev *dev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shca"
#734: FILE: drivers/infiniband/hw/ehca/ehca_main.c:696:
+	if (shca == NULL) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#763: FILE: drivers/infiniband/hw/ehca/ehca_main.c:725:
+	ibpd = ehca_alloc_pd(&shca->ib_device, (void*)(-1), NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#776: FILE: drivers/infiniband/hw/ehca/ehca_main.c:738:
+		struct ehca_mr *e_maxmr = NULL;
+		ret = ehca_reg_internal_maxmr(shca, shca->pd, &e_maxmr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ehca_open_aqp1 == 1'
#801: FILE: drivers/infiniband/hw/ehca/ehca_main.c:763:
+	if ((ehca_open_aqp1 == 1) && (shca->num_ports == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'shca->num_ports == 2'
#801: FILE: drivers/infiniband/hw/ehca/ehca_main.c:763:
+	if ((ehca_open_aqp1 == 1) && (shca->num_ports == 2)) {

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#856: FILE: drivers/infiniband/hw/ehca/ehca_main.c:818:
+static int __devexit ehca_remove(struct ibmebus_dev *dev)

WARNING:SPLIT_STRING: quoted string split across lines
#872: FILE: drivers/infiniband/hw/ehca/ehca_main.c:834:
+				EDEB_ERR(4, "Cannot destroy AQP1 for port %x."
+					 " ret=%x", ret, i);

WARNING:TYPO_SPELLING: 'Canot' may be misspelled - perhaps 'Cannot'?
#892: FILE: drivers/infiniband/hw/ehca/ehca_main.c:854:
+		EDEB_ERR(4, "Canot destroy NEQ. ret=%x", ret);
 		             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#905: FILE: drivers/infiniband/hw/ehca/ehca_main.c:867:
+static struct of_device_id ehca_device_table[] =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#906: FILE: drivers/infiniband/hw/ehca/ehca_main.c:868:
+static struct of_device_id ehca_device_table[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "IBM,lhca" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#909: FILE: drivers/infiniband/hw/ehca/ehca_main.c:871:
+		.compatible = "IBM,lhca",

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string vendor "IBM" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/vendor-prefixes.yaml
#909: FILE: drivers/infiniband/hw/ehca/ehca_main.c:871:
+		.compatible = "IBM,lhca",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#925: FILE: drivers/infiniband/hw/ehca/ehca_main.c:887:
+	printk(KERN_INFO "eHCA Infiniband Device Driver "

ERROR:CODE_INDENT: code indent should use tabs where possible
#926: FILE: drivers/infiniband/hw/ehca/ehca_main.c:888:
+^I                 "(Rel.: SVNEHCA_0005)\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#926: FILE: drivers/infiniband/hw/ehca/ehca_main.c:888:
+	printk(KERN_INFO "eHCA Infiniband Device Driver "
+	                 "(Rel.: SVNEHCA_0005)\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ehca_pool"
#940: FILE: drivers/infiniband/hw/ehca/ehca_main.c:902:
+	if (ehca_pool == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#946: FILE: drivers/infiniband/hw/ehca/ehca_main.c:908:
+	if ((ret = ehca_create_slab_caches(&ehca_module)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#952: FILE: drivers/infiniband/hw/ehca/ehca_main.c:914:
+	if ((ret = ibmebus_register_driver(&ehca_driver)) != 0) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#969: FILE: drivers/infiniband/hw/ehca/ehca_main.c:931:
+	ehca_module.timer.data = (unsigned long)(void*)&ehca_module;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 30 warnings, 24 checks, 973 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000082038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
