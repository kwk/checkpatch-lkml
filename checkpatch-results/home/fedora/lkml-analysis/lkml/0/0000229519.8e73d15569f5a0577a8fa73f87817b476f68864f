WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#52: FILE: kernel/power/disk.c:28:
+extern int pcs_suspend(int resume);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#61: FILE: kernel/power/disk.c:75:
+#if 0

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#98: FILE: kernel/power/disk.c:136:
+	if ((error = pcs_suspend(resume))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#98: FILE: kernel/power/disk.c:136:
+	if ((error = pcs_suspend(resume))) {
+		goto Finish;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Finish>
#99: FILE: kernel/power/disk.c:137:
+		goto Finish;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#109: FILE: kernel/power/disk.c:166:
+	if ((error = prepare(0)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#118: FILE: kernel/power/disk.c:232:
+	if ((error = prepare(1)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: kernel/power/swsusp.c:305:
+^I^Ipr_debug("data_write: %p %p %u\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: kernel/power/swsusp.c:306:
+^I^I^I^I(void *)(pagedir_nosave+i)->address, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: kernel/power/swsusp.c:306:
+		pr_debug("data_write: %p %p %u\n", 
+				(void *)(pagedir_nosave+i)->address, 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#143: FILE: kernel/power/swsusp.c:306:
+				(void *)(pagedir_nosave+i)->address, 
 				                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#144: FILE: kernel/power/swsusp.c:307:
+				(void *)(pagedir_nosave+i)->orig_address,
 				                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: kernel/power/swsusp.c:308:
+				(pagedir_nosave+i)->swap_address);
 				               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: kernel/power/swsusp.c:519:
+ *^Ito allocate enough contiguous space to hold $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: kernel/power/swsusp.c:520:
+ *^I^I(%nr_copy_pages * sizeof(struct pbe)), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: kernel/power/swsusp.c:521:
+ *^Iwhich has the saved/orig locations of the page.. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: kernel/power/swsusp.c:523:
+ *^ISUSPEND_PD_PAGES() tells us how many pages we need to hold those $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: kernel/power/swsusp.c:526:
+ *^Iis 0x0000001e in hex. The last bit is the 5th, which is the order we $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: kernel/power/swsusp.c:530:
+ *^Iwe need to nr_copy_pages, and in case of an overflow, do the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: kernel/power/swsusp.c:531:
+ *^Icalculation again to update the number of pages needed. $

WARNING:TYPO_SPELLING: 'situtation' may be misspelled - perhaps 'situation'?
#175: FILE: kernel/power/swsusp.c:535:
+ *	to do, the more likely we are to fail in a low-memory situtation 
   	                                                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: kernel/power/swsusp.c:535:
+ *^Ito do, the more likely we are to fail in a low-memory situtation $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: kernel/power/swsusp.c:536:
+ *^I(though^Iwe're unlikely to get this far in such a case, since swsusp $

ERROR:SPACING: space required before the open parenthesis '('
#191: FILE: kernel/power/swsusp.c:551:
+	} while(diff);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: kernel/power/swsusp.c:564:
+		struct list_head * entry = zone->inactive_list.prev;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: kernel/power/swsusp.c:565:
+		struct list_head * entry = zone->inactive_list.prev;
+		while (entry != &zone->inactive_list) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: kernel/power/swsusp.c:567:
+				struct page * page = list_entry(entry, struct page, lru);

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: kernel/power/swsusp.c:568:
+				struct page * page = list_entry(entry, struct page, lru);
+				inactive += fun(page, p);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: kernel/power/swsusp.c:569:
+^I^I^I} else { $

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#210: FILE: kernel/power/swsusp.c:570:
+				inactive ++;
 				         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#216: FILE: kernel/power/swsusp.c:576:
+		struct list_head * entry = zone->active_list.prev;

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: kernel/power/swsusp.c:577:
+		struct list_head * entry = zone->active_list.prev;
+		while (entry != &zone->active_list) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: kernel/power/swsusp.c:579:
+				struct page * page = list_entry(entry, struct page, lru);

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: kernel/power/swsusp.c:580:
+				struct page * page = list_entry(entry, struct page, lru);
+				active += fun(page, p);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#222: FILE: kernel/power/swsusp.c:582:
+				active ++;
 				       ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#232: FILE: kernel/power/swsusp.c:592:
+static unsigned long *pageset2map = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#234: FILE: kernel/power/swsusp.c:594:
+#define PAGENUMBER(page) (page-mem_map)
                               ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#234: FILE: kernel/power/swsusp.c:594:
+#define PAGENUMBER(page) (page-mem_map)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#235: FILE: kernel/power/swsusp.c:595:
+#define PAGEINDEX(page) ((PAGENUMBER(page))/(8*sizeof(unsigned long)))
                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#235: FILE: kernel/power/swsusp.c:595:
+#define PAGEINDEX(page) ((PAGENUMBER(page))/(8*sizeof(unsigned long)))
                                               ^

CHECK:SPACING: No space is necessary after a cast
#236: FILE: kernel/power/swsusp.c:596:
+#define PAGEBIT(page) ((int) ((PAGENUMBER(page))%(8 * sizeof(unsigned long))))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#236: FILE: kernel/power/swsusp.c:596:
+#define PAGEBIT(page) ((int) ((PAGENUMBER(page))%(8 * sizeof(unsigned long))))
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#242: FILE: kernel/power/swsusp.c:602:
+#define PagePageset2(page) \
+	test_bit(PAGEBIT(page), &pageset2map[PAGEINDEX(page)])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#244: FILE: kernel/power/swsusp.c:604:
+#define SetPagePageset2(page) \
+	set_bit(PAGEBIT(page), &pageset2map[PAGEINDEX(page)])

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: kernel/power/swsusp.c:612:
+	BUG_ON(PageReserved(page) && PageNosave(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#254: FILE: kernel/power/swsusp.c:614:
+		printk("not valid page\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#258: FILE: kernel/power/swsusp.c:618:
+		printk("nosave\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: kernel/power/swsusp.c:622:
+		printk("[nosave]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#266: FILE: kernel/power/swsusp.c:626:
+		printk("slab\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#267: FILE: kernel/power/swsusp.c:627:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#270: FILE: kernel/power/swsusp.c:630:
+		(*pe)->address = (long) page_address(page);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#271: FILE: kernel/power/swsusp.c:631:
+		(*pe) ++;
 		      ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#275: FILE: kernel/power/swsusp.c:635:
+	return (1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#278: FILE: kernel/power/swsusp.c:638:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: kernel/power/swsusp.c:641:
+^Ireturn foreach_zone_page(zone, setup_pcs_pe, pe);^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#283: FILE: kernel/power/swsusp.c:643:
+}
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#283: FILE: kernel/power/swsusp.c:643:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: kernel/power/swsusp.c:647:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#288: FILE: kernel/power/swsusp.c:648:
+	if (pg == page) return (1);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#289: FILE: kernel/power/swsusp.c:649:
+	else return (0);

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#299: FILE: kernel/power/swsusp.c:659:
+static suspend_pagedir_t *pagedir_cache = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#300: FILE: kernel/power/swsusp.c:660:
+static int nr_copy_pcs = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#301: FILE: kernel/power/swsusp.c:661:
+static int pcs_order = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: kernel/power/swsusp.c:679:
+static int pcs_alloc_pagemap(void) $

CHECK:SPACING: No space is necessary after a cast
#319: FILE: kernel/power/swsusp.c:679:
+static int pcs_alloc_pagemap(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: kernel/power/swsusp.c:681:
+^Ipageset2map = (unsigned long *) $

CHECK:SPACING: No space is necessary after a cast
#321: FILE: kernel/power/swsusp.c:681:
+	pageset2map = (unsigned long *) 

CHECK:SPACING: No space is necessary after a cast
#331: FILE: kernel/power/swsusp.c:691:
+		free_pages((unsigned long) pageset2map, BITMAP_ORDER);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#338: FILE: kernel/power/swsusp.c:698:
+int bio_read_page(pgoff_t page_off, void * page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: kernel/power/swsusp.c:702:
+	struct pbe * p;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#346: FILE: kernel/power/swsusp.c:706:
+	printk( "Reading Page Caches (%d pages): ", nr_copy_pcs);

ERROR:SPACING: space prohibited after that open parenthesis '('
#346: FILE: kernel/power/swsusp.c:706:
+	printk( "Reading Page Caches (%d pages): ", nr_copy_pcs);

ERROR:SPACING: space required before the open parenthesis '('
#347: FILE: kernel/power/swsusp.c:707:
+	for(i = 0, p = pagedir_cache; i < nr_copy_pcs && !error; i++, p++) {

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#348: FILE: kernel/power/swsusp.c:708:
+		if (!(i%100))
 		       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#349: FILE: kernel/power/swsusp.c:709:
+			printk( "." );

ERROR:SPACING: space prohibited after that open parenthesis '('
#349: FILE: kernel/power/swsusp.c:709:
+			printk( "." );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#349: FILE: kernel/power/swsusp.c:709:
+			printk( "." );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: kernel/power/swsusp.c:711:
+		error = bio_read_page(swp_offset(p->swap_address),
+				(void *)p->address);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: kernel/power/swsusp.c:713:
+^I^Ipr_debug("pcs_read: %p %p %u\n", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pcs_read', this function's name, in a string
#353: FILE: kernel/power/swsusp.c:713:
+		pr_debug("pcs_read: %p %p %u\n", 

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: kernel/power/swsusp.c:714:
+^I^I^I^I(void *)p->address, (void *)p->orig_address, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: kernel/power/swsusp.c:714:
+		pr_debug("pcs_read: %p %p %u\n", 
+				(void *)p->address, (void *)p->orig_address, 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#366: FILE: kernel/power/swsusp.c:726:
+	printk(" %d done.\n",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#366: FILE: kernel/power/swsusp.c:726:
+	printk(" %d done.\n",i);
 	                    ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#368: FILE: kernel/power/swsusp.c:728:
+	return (0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#376: FILE: kernel/power/swsusp.c:736:
+	printk( "Writing PageCaches to swap (%d pages): ", nr_copy_pcs);

ERROR:SPACING: space prohibited after that open parenthesis '('
#376: FILE: kernel/power/swsusp.c:736:
+	printk( "Writing PageCaches to swap (%d pages): ", nr_copy_pcs);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#378: FILE: kernel/power/swsusp.c:738:
+		if (!(i%100))
 		       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#379: FILE: kernel/power/swsusp.c:739:
+			printk( "." );

ERROR:SPACING: space prohibited after that open parenthesis '('
#379: FILE: kernel/power/swsusp.c:739:
+			printk( "." );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#379: FILE: kernel/power/swsusp.c:739:
+			printk( "." );

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: kernel/power/swsusp.c:740:
+		error = write_page((pagedir_cache+i)->address,
 		                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: kernel/power/swsusp.c:741:
+		error = write_page((pagedir_cache+i)->address,
+					  &((pagedir_cache+i)->swap_address));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: kernel/power/swsusp.c:741:
+					  &((pagedir_cache+i)->swap_address));
 					                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: kernel/power/swsusp.c:743:
+^I^Ipr_debug("pcs_write: %p %p %u\n", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pcs_write', this function's name, in a string
#383: FILE: kernel/power/swsusp.c:743:
+		pr_debug("pcs_write: %p %p %u\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: kernel/power/swsusp.c:744:
+^I^I^I^I(void *)(pagedir_cache+i)->address, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: kernel/power/swsusp.c:744:
+		pr_debug("pcs_write: %p %p %u\n", 
+				(void *)(pagedir_cache+i)->address, 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: kernel/power/swsusp.c:744:
+				(void *)(pagedir_cache+i)->address, 
 				                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: kernel/power/swsusp.c:745:
+				(void *)(pagedir_cache+i)->orig_address,
 				                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#386: FILE: kernel/power/swsusp.c:746:
+				(pagedir_cache+i)->swap_address);
 				              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#389: FILE: kernel/power/swsusp.c:749:
+	printk(" %d Pages done.\n",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: kernel/power/swsusp.c:749:
+	printk(" %d Pages done.\n",i);
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#403: FILE: kernel/power/swsusp.c:763:
+	if (resume == 1) {
+		return (0);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#404: FILE: kernel/power/swsusp.c:764:
+		return (0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#409: FILE: kernel/power/swsusp.c:769:
+		return (0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#418: FILE: kernel/power/swsusp.c:778:
+		if (!is_highmem(zone)) {
+			nr_copy_pcs += count_pcs(zone, NULL);
+		}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#423: FILE: kernel/power/swsusp.c:783:
+	printk("swsusp: Need to copy %u pcs\n", nr_copy_pcs);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#425: FILE: kernel/power/swsusp.c:785:
+	if (nr_copy_pcs == 0) {
+		return (0);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#426: FILE: kernel/power/swsusp.c:786:
+		return (0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#429: FILE: kernel/power/swsusp.c:789:
+	if ((error = swsusp_swap_check()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#432: FILE: kernel/power/swsusp.c:792:
+	if ((error = alloc_pagedir_cache())) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#432: FILE: kernel/power/swsusp.c:792:
+	if ((error = alloc_pagedir_cache())) {
+		return error;
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#438: FILE: kernel/power/swsusp.c:798:
+	printk("swsusp(1/2): Need to copy %u pages, %u pcs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: kernel/power/swsusp.c:799:
+	printk("swsusp(1/2): Need to copy %u pages, %u pcs\n",
+			nr_copy_pages, nr_copy_pcs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: kernel/power/swsusp.c:804:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: kernel/power/swsusp.c:807:
+	printk("swsusp(2/2): Need to copy %u pages, %u pcs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: kernel/power/swsusp.c:808:
+	printk("swsusp(2/2): Need to copy %u pages, %u pcs\n",
+			nr_copy_pages, nr_copy_pcs);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#454: FILE: kernel/power/swsusp.c:814:
+		if (!is_highmem(zone)) {
+			count_pcs(zone, &pe);
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: kernel/power/swsusp.c:819:
+^Iif (error) $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#462: FILE: kernel/power/swsusp.c:822:
+	return (0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: kernel/power/swsusp.c:866:
+^Iif ((zone->nr_inactive || zone->nr_active) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: kernel/power/swsusp.c:867:
+	if ((zone->nr_inactive || zone->nr_active) && 
+			find_pcs(zone, page)) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#585: FILE: kernel/power/swsusp.c:1288:
+static struct block_device * resume_bdev __nosavedata;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: kernel/power/swsusp.c:1429:
+^I^Ipr_debug("data_read: %p %p %u\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: kernel/power/swsusp.c:1430:
+^I^I^I^I(void *)p->address, (void *)p->orig_address, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: kernel/power/swsusp.c:1430:
+		pr_debug("data_read: %p %p %u\n", 
+				(void *)p->address, (void *)p->orig_address, 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229519.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 63 errors, 30 warnings, 34 checks, 545 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229519.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
