WARNING:TYPO_SPELLING: 'Seperation' may be misspelled - perhaps 'Separation'?
#23: 
Seperation of some framebuffer code from the console code. Moving away
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
ChangeSet@1.714.6.3, 2002-10-09 11:55:52-07:00, jsimmons@maxwell.earthlink.net

WARNING:TYPO_SPELLING: 'gloabl' may be misspelled - perhaps 'global'?
#34: 
  Started to nuke the gloabl currcon variable. I changed over the unimap and font handling functions to use struct vc_data instead. I also seperated out the framebuffer code from the VT code since very soon the framebuffer will be able to function without a VT.
                      ^^^^^^

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#34: 
  Started to nuke the gloabl currcon variable. I changed over the unimap and font handling functions to use struct vc_data instead. I also seperated out the framebuffer code from the VT code since very soon the framebuffer will be able to function without a VT.
                                                                                                                                           ^^^^^^^^^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#60: 
--- a/arch/mips64/kernel/ioctl32.c	Fri Oct 11 18:17:53 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:SPACING: No space is necessary after a cast
#86: FILE: arch/ppc64/kernel/ioctl32.c:1797:
+	struct tty_struct *tty = (struct tty_struct *) file->private_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#87: FILE: arch/ppc64/kernel/ioctl32.c:1798:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#114: FILE: arch/ppc64/kernel/ioctl32.c:1854:
+	struct tty_struct *tty = (struct tty_struct *) file->private_data;

CHECK:SPACING: No space is necessary after a cast
#115: FILE: arch/ppc64/kernel/ioctl32.c:1855:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#141: FILE: arch/ppc64/kernel/ioctl32.c:1880:
+static int do_unimap_ioctl(unsigned int fd, unsigned int cmd, struct unimapdesc32 *user_ud, struct file *file)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#143: FILE: arch/ppc64/kernel/ioctl32.c:1882:
+	struct tty_struct *tty = (struct tty_struct *) file->private_data;

CHECK:SPACING: No space is necessary after a cast
#144: FILE: arch/ppc64/kernel/ioctl32.c:1883:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#148: FILE: arch/ppc64/kernel/ioctl32.c:1887:
+	if (perm < 0) return perm;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SIZEOF_PARENTHESIS: sizeof tmp should be sizeof(tmp)
#149: FILE: arch/ppc64/kernel/ioctl32.c:1888:
+	if (copy_from_user(&tmp, user_ud, sizeof tmp))

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#153: FILE: arch/ppc64/kernel/ioctl32.c:1892:
+		if (!perm) return -EPERM;

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#156: FILE: arch/ppc64/kernel/ioctl32.c:1895:
+		return con_get_unimap(vc, tmp.entry_ct, &(user_ud->entry_ct), (struct unipair *)A(tmp.entries));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around user_ud->entry_ct
#156: FILE: arch/ppc64/kernel/ioctl32.c:1895:
+		return con_get_unimap(vc, tmp.entry_ct, &(user_ud->entry_ct), (struct unipair *)A(tmp.entries));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: exactly one space required after that #ifdef
#203: FILE: arch/ppc64/kernel/ioctl32.c:4476:
+#ifdef  CONFIG_FB

CHECK:SPACING: No space is necessary after a cast
#239: FILE: arch/sparc64/kernel/ioctl32.c:2116:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#267: FILE: arch/sparc64/kernel/ioctl32.c:2173:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#290: FILE: arch/sparc64/kernel/ioctl32.c:2201:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#304: FILE: arch/sparc64/kernel/ioctl32.c:2213:
+		return con_get_unimap(vc, tmp.entry_ct, &(user_ud->entry_ct), (struct unipair *)A(tmp.entries));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around user_ud->entry_ct
#304: FILE: arch/sparc64/kernel/ioctl32.c:2213:
+		return con_get_unimap(vc, tmp.entry_ct, &(user_ud->entry_ct), (struct unipair *)A(tmp.entries));

CHECK:SPACING: No space is necessary after a cast
#406: FILE: arch/x86_64/ia32/ia32_ioctl.c:1673:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#434: FILE: arch/x86_64/ia32/ia32_ioctl.c:1730:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#457: FILE: arch/x86_64/ia32/ia32_ioctl.c:1758:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#471: FILE: arch/x86_64/ia32/ia32_ioctl.c:1770:
+		return con_get_unimap(vc, tmp.entry_ct, &(user_ud->entry_ct), (struct unipair *)A(tmp.entries));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around user_ud->entry_ct
#471: FILE: arch/x86_64/ia32/ia32_ioctl.c:1770:
+		return con_get_unimap(vc, tmp.entry_ct, &(user_ud->entry_ct), (struct unipair *)A(tmp.entries));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#591: FILE: drivers/char/consolemap.c:227:
+	else if (!(p = (struct uni_pagedir *)*vc->vc_uni_pagedir_loc) ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#625: FILE: drivers/char/consolemap.c:261:
+int con_set_trans_old(struct vc_data *vc, unsigned char * arg)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#634: FILE: drivers/char/consolemap.c:280:
+int con_get_trans_old(struct vc_data *vc, unsigned char * arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#650: FILE: drivers/char/consolemap.c:297:
+int con_set_trans_new(struct vc_data *vc, ushort * arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#659: FILE: drivers/char/consolemap.c:317:
+int con_get_trans_new(struct vc_data *vc, ushort * arg)

CHECK:SPACING: No space is necessary after a cast
#958: FILE: drivers/char/selection.c:290:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1093: FILE: drivers/char/vt.c:1845:
+	if (!vc) {
[...]
 	    static int error = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1099: FILE: drivers/char/vt.c:1850:
+		printk("con_write: tty %d not allocated\n", currcons + 1);

CHECK:SPACING: No space is necessary after a cast
#1108: FILE: drivers/char/vt.c:2308:
+	struct vc_data *vc = (struct vc_data *) tty->driver_data;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1234: FILE: drivers/char/vt_ioctl.c:323:
+do_unimap_ioctl(struct vc_data *vc, int cmd, struct unimapdesc *user_ud,int perm)
                                                                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around user_ud->entry_ct
#1246: FILE: drivers/char/vt_ioctl.c:341:
+		return con_get_unimap(vc, tmp.entry_ct, &(user_ud->entry_ct), tmp.entries);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1256: FILE: drivers/char/vt_ioctl.c:354:
+	struct kbd_struct * kbd;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1501: FILE: include/linux/consolemap.h:13:
+extern unsigned char inverse_translate(struct vc_data *vc, int glyph);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1502: FILE: include/linux/consolemap.h:14:
+extern void set_translate(struct vc_data *vc, int m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1503: FILE: include/linux/consolemap.h:15:
+extern int conv_uni_to_pc(struct vc_data *vc, long ucs);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1539: FILE: include/linux/vt_kern.h:73:
+int con_set_trans_old(struct vc_data *vc, unsigned char * table);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1540: FILE: include/linux/vt_kern.h:74:
+int con_get_trans_old(struct vc_data *vc, unsigned char * table);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1541: FILE: include/linux/vt_kern.h:75:
+int con_set_trans_new(struct vc_data *vc, unsigned short * table);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1542: FILE: include/linux/vt_kern.h:76:
+int con_get_trans_new(struct vc_data *vc, unsigned short * table);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424304.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 11 warnings, 21 checks, 1331 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424304.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
