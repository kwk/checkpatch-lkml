WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: fs/gfs2/acl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: fs/gfs2/acl.c:33:
+int gfs2_acl_validate_set(struct gfs2_inode *ip, int access,
+		      struct gfs2_ea_request *er,

CHECK:BRACES: braces {} should be used on all arms of this statement
#175: FILE: fs/gfs2/acl.c:134:
+	if (error || !data)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#177: FILE: fs/gfs2/acl.c:136:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: fs/gfs2/acl.c:187:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: fs/gfs2/acl.c:204:
+		gfs2_assert_withdraw(sdp,
+				(ip->i_di.di_mode & S_IFMT) == (mode & S_IFMT));

CHECK:BRACES: braces {} should be used on all arms of this statement
#302: FILE: fs/gfs2/acl.c:261:
+	if (error > 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#311: FILE: fs/gfs2/acl.c:270:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#358: FILE: fs/gfs2/acl.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#375: FILE: fs/gfs2/acl.h:18:
+#define GFS2_ACL_IS_ACCESS(name, len) \
+         ((len) == GFS2_POSIX_ACL_ACCESS_LEN && \
+         !memcmp(GFS2_POSIX_ACL_ACCESS, (name), (len)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: fs/gfs2/acl.h:19:
+         ((len) == GFS2_POSIX_ACL_ACCESS_LEN && \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: fs/gfs2/acl.h:19:
+         ((len) == GFS2_POSIX_ACL_ACCESS_LEN && \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: fs/gfs2/acl.h:20:
+         !memcmp(GFS2_POSIX_ACL_ACCESS, (name), (len)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: fs/gfs2/acl.h:20:
+         !memcmp(GFS2_POSIX_ACL_ACCESS, (name), (len)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#379: FILE: fs/gfs2/acl.h:22:
+#define GFS2_ACL_IS_DEFAULT(name, len) \
+         ((len) == GFS2_POSIX_ACL_DEFAULT_LEN && \
+         !memcmp(GFS2_POSIX_ACL_DEFAULT, (name), (len)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: fs/gfs2/acl.h:23:
+         ((len) == GFS2_POSIX_ACL_DEFAULT_LEN && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: fs/gfs2/acl.h:23:
+         ((len) == GFS2_POSIX_ACL_DEFAULT_LEN && \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: fs/gfs2/acl.h:24:
+         !memcmp(GFS2_POSIX_ACL_DEFAULT, (name), (len)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: fs/gfs2/acl.h:24:
+         !memcmp(GFS2_POSIX_ACL_DEFAULT, (name), (len)))$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#398: FILE: fs/gfs2/eattr.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#415: FILE: fs/gfs2/eattr.c:18:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'acutal' may be misspelled - perhaps 'actual'?
#429: FILE: fs/gfs2/eattr.c:32:
+ * ea_calc_size - returns the acutal number of bytes the request will take up
                               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#513: FILE: fs/gfs2/eattr.c:116:
+	uint64_t *eablk, *end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#535: FILE: fs/gfs2/eattr.c:138:
+		uint64_t bn;

WARNING:LINE_SPACING: Missing a blank line after declarations
#575: FILE: fs/gfs2/eattr.c:178:
+			struct gfs2_ea_location *el = ef->ef_el;
+			get_bh(bh);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#583: FILE: fs/gfs2/eattr.c:186:
+#if 0

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#634: FILE: fs/gfs2/eattr.c:237:
+	uint64_t *dataptrs, bn = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#635: FILE: fs/gfs2/eattr.c:238:
+	uint64_t bstart = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#677: FILE: fs/gfs2/eattr.c:280:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#679: FILE: fs/gfs2/eattr.c:282:
+		else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#695: FILE: fs/gfs2/eattr.c:298:
+		uint32_t len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#846: FILE: fs/gfs2/eattr.c:449:
+	error = gfs2_glock_nq_init(ip->i_gl,
+				  LM_ST_SHARED, LM_FLAG_ANY,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#881: FILE: fs/gfs2/eattr.c:484:
+	uint64_t *dataptrs = GFS2_EA2DATAPTRS(ea);

CHECK:BRACES: braces {} should be used on all arms of this statement
#933: FILE: fs/gfs2/eattr.c:536:
+	if (GFS2_EA_IS_STUFFED(el->el_ea)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#938: FILE: fs/gfs2/eattr.c:541:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: fs/gfs2/eattr.c:603:
+	error = gfs2_glock_nq_init(ip->i_gl,
+				  LM_ST_SHARED, LM_FLAG_ANY,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1024: FILE: fs/gfs2/eattr.c:627:
+	uint64_t block;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1072: FILE: fs/gfs2/eattr.c:675:
+		uint64_t *dataptr = GFS2_EA2DATAPTRS(ea);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1081: FILE: fs/gfs2/eattr.c:684:
+			uint64_t block;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1155: FILE: fs/gfs2/eattr.c:758:
+			gfs2_assert_withdraw(ip->i_sbd,
+					    (ip->i_di.di_mode & S_IFMT) ==

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1219: FILE: fs/gfs2/eattr.c:822:
+	uint32_t ea_size = GFS2_EA_SIZE(ea);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1221: FILE: fs/gfs2/eattr.c:824:
+	uint32_t new_size = GFS2_EA_REC_LEN(ea) - ea_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1238: FILE: fs/gfs2/eattr.c:841:
+	uint32_t len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: fs/gfs2/eattr.c:897:
+		gfs2_assert_withdraw(ip->i_sbd,
+			(ip->i_di.di_mode & S_IFMT) == (er->er_mode & S_IFMT));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1340: FILE: fs/gfs2/eattr.c:943:
+	if (ea->ea_type == GFS2_EATYPE_UNUSED) {
[...]
+	} else if (GFS2_EA_REC_LEN(ea) - GFS2_EA_SIZE(ea) >= size)
[...]
+	else
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1379: FILE: fs/gfs2/eattr.c:982:
+	uint64_t *eablk;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1384: FILE: fs/gfs2/eattr.c:987:
+		uint64_t *end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1410: FILE: fs/gfs2/eattr.c:1013:
+		uint64_t blk;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1481: FILE: fs/gfs2/eattr.c:1084:
+	return ea_remove_unstuffed(ip, el->el_bh, el->el_ea, el->el_prev,FALSE);
 	                                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1508: FILE: fs/gfs2/eattr.c:1111:
+			int unstuffed = !GFS2_EA_IS_STUFFED(el.el_ea);
+			error = ea_set_i(ip, er, &el);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1566: FILE: fs/gfs2/eattr.c:1169:
+	if (prev) {
[...]
+	} else
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1567: FILE: fs/gfs2/eattr.c:1170:
+		uint32_t len;

CHECK:BRACES: Unbalanced braces around else statement
#1574: FILE: fs/gfs2/eattr.c:1177:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1583: FILE: fs/gfs2/eattr.c:1186:
+^I}^I$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1652: FILE: fs/gfs2/eattr.c:1255:
+	uint64_t *dataptrs = GFS2_EA2DATAPTRS(ea);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1719: FILE: fs/gfs2/eattr.c:1322:
+	if (GFS2_EA_IS_STUFFED(el->el_ea)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1728: FILE: fs/gfs2/eattr.c:1331:
+	} else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1754: FILE: fs/gfs2/eattr.c:1357:
+	uint64_t *eablk, *end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1756: FILE: fs/gfs2/eattr.c:1359:
+	uint64_t bstart = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1778: FILE: fs/gfs2/eattr.c:1381:
+		uint64_t bn;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1784: FILE: fs/gfs2/eattr.c:1387:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1786: FILE: fs/gfs2/eattr.c:1389:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1803: FILE: fs/gfs2/eattr.c:1406:
+		struct gfs2_rgrpd *rgd;
+		rgd = get_gl2rgd(rlist.rl_ghs[x].gh_gl);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1824: FILE: fs/gfs2/eattr.c:1427:
+		uint64_t bn;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1830: FILE: fs/gfs2/eattr.c:1433:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1832: FILE: fs/gfs2/eattr.c:1435:
+		else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1984: FILE: fs/gfs2/eattr.c:1587:
+		uint64_t *eablk, *end;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1996: FILE: fs/gfs2/eattr.c:1599:
+			uint64_t bn;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2022: FILE: fs/gfs2/eattr.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#2037: FILE: fs/gfs2/eattr.h:16:
+#define GFS2_EA_SIZE(ea) \
+MAKE_MULT8(sizeof(struct gfs2_ea_header) + \
+	   (ea)->ea_name_len + \
+	   ((GFS2_EA_IS_STUFFED(ea)) ? \
+	    GFS2_EA_DATA_LEN(ea) : \
+	    (sizeof(uint64_t) * (ea)->ea_num_ptrs)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#2043: FILE: fs/gfs2/eattr.h:22:
+#define GFS2_EA_STRLEN(ea) \
+((((ea)->ea_type == GFS2_EATYPE_USR) ? 5 : 7) + \
+ (ea)->ea_name_len + 1)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2045: FILE: fs/gfs2/eattr.h:24:
+ (ea)->ea_name_len + 1)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'er' - possible side-effects?
#2050: FILE: fs/gfs2/eattr.h:29:
+#define GFS2_EAREQ_SIZE_STUFFED(er) \
+MAKE_MULT8(sizeof(struct gfs2_ea_header) + \
+	   (er)->er_name_len + (er)->er_data_len)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'er' - possible side-effects?
#2053: FILE: fs/gfs2/eattr.h:32:
+#define GFS2_EAREQ_SIZE_UNSTUFFED(sdp, er) \
+MAKE_MULT8(sizeof(struct gfs2_ea_header) + \
+	   (er)->er_name_len + \
+	   sizeof(uint64_t) * DIV_RU((er)->er_data_len, (sdp)->sd_jbsize))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#2059: FILE: fs/gfs2/eattr.h:38:
+#define GFS2_EA2DATA(ea) (GFS2_EA2NAME(ea) + (ea)->ea_name_len)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#2060: FILE: fs/gfs2/eattr.h:39:
+#define GFS2_EA2DATAPTRS(ea) \
+((uint64_t *)(GFS2_EA2NAME(ea) + MAKE_MULT8((ea)->ea_name_len)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ea' - possible side-effects?
#2062: FILE: fs/gfs2/eattr.h:41:
+#define GFS2_EA2NEXT(ea) \
+((struct gfs2_ea_header *)((char *)(ea) + GFS2_EA_REC_LEN(ea)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2116: FILE: fs/gfs2/eaops.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2133: FILE: fs/gfs2/eaops.c:18:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#2172: FILE: fs/gfs2/eaops.c:57:
+	int error = permission(inode, MAY_READ, NULL);
+	if (error)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2182: FILE: fs/gfs2/eaops.c:67:
+	if (S_ISREG(inode->i_mode) ||
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2185: FILE: fs/gfs2/eaops.c:70:
+		int error = permission(inode, MAY_WRITE, NULL);
+		if (error)

CHECK:BRACES: Unbalanced braces around else statement
#2187: FILE: fs/gfs2/eaops.c:72:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2197: FILE: fs/gfs2/eaops.c:82:
+	if (S_ISREG(inode->i_mode) ||
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2200: FILE: fs/gfs2/eaops.c:85:
+		int error = permission(inode, MAY_WRITE, NULL);
+		if (error)

CHECK:BRACES: Unbalanced braces around else statement
#2202: FILE: fs/gfs2/eaops.c:87:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2244: FILE: fs/gfs2/eaops.c:129:
+		if (!remove)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2246: FILE: fs/gfs2/eaops.c:131:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2251: FILE: fs/gfs2/eaops.c:136:
+^I^Ireturn error;^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2259: FILE: fs/gfs2/eaops.c:144:
+	if (GFS2_ACL_IS_ACCESS(er->er_name, er->er_name_len)) {
[...]
+	} else if (GFS2_ACL_IS_DEFAULT(er->er_name, er->er_name_len)) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2261: FILE: fs/gfs2/eaops.c:146:
+		int error = gfs2_acl_validate_remove(ip, TRUE);
+		if (error)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2266: FILE: fs/gfs2/eaops.c:151:
+		int error = gfs2_acl_validate_remove(ip, FALSE);
+		if (error)

CHECK:BRACES: Unbalanced braces around else statement
#2269: FILE: fs/gfs2/eaops.c:154:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2298: FILE: fs/gfs2/eaops.h:1:
+/*

WARNING:SPACING: Unnecessary space before function pointer arguments
#2313: FILE: fs/gfs2/eaops.h:16:
+	int (*eo_get) (struct gfs2_inode *ip, struct gfs2_ea_request *er);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2314: FILE: fs/gfs2/eaops.h:17:
+	int (*eo_set) (struct gfs2_inode *ip, struct gfs2_ea_request *er);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2315: FILE: fs/gfs2/eaops.h:18:
+	int (*eo_remove) (struct gfs2_inode *ip, struct gfs2_ea_request *er);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155469.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 26 warnings, 63 checks, 2271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155469.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
