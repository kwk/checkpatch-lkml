WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
diff -urN linux-2.5.21/drivers/block/elevator.c linux/drivers/block/elevator.c

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#105: FILE: drivers/block/elevator.c:405:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#120: FILE: drivers/block/elevator.c:442:
+EXPORT_SYMBOL(elv_next_request);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: drivers/block/ll_rw_blk.c:1236:
+static inline void add_request(request_queue_t * q, struct request * rq,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: drivers/block/ll_rw_blk.c:1236:
+static inline void add_request(request_queue_t * q, struct request * rq,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#184: FILE: fs/binfmt_elf.c:48:
+extern int dump_fpu(struct pt_regs *, elf_fpregset_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#184: FILE: fs/binfmt_elf.c:48:
+extern int dump_fpu(struct pt_regs *, elf_fpregset_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'elf_fpregset_t *' should also have an identifier name
#184: FILE: fs/binfmt_elf.c:48:
+extern int dump_fpu(struct pt_regs *, elf_fpregset_t *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: fs/dcache.c:72:
+static void dentry_iput(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: fs/dcache.c:216:
+static struct dentry * __dget_locked(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: fs/dcache.c:301:
+static void prune_one_dentry(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: fs/dcache.c:720:
+static struct list_head * d_hash(struct dentry * parent, unsigned long hash)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: fs/dcache.c:720:
+static struct list_head * d_hash(struct dentry * parent, unsigned long hash)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: fs/dcache.c:1009:
+static void switch_names(struct dentry * dentry, struct dentry * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: fs/dcache.c:1009:
+static void switch_names(struct dentry * dentry, struct dentry * target)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#331: FILE: fs/namei.c:283:
+static void unlock_nd(struct nameidata *nd)
                                         ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#340: FILE: fs/namei.c:296:
+static void lock_nd(struct nameidata *nd)
                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#349: FILE: fs/namei.c:394:
+static int do_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/namei.c:821:
+void set_fs_root(struct fs_struct *fs,
+	struct vfsmount *mnt,

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: fs/namei.c:826:
+	struct vfsmount *old_rootmnt;
+	write_lock(&fs->lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: fs/namei.c:845:
+void set_fs_pwd(struct fs_struct *fs,
+	struct vfsmount *mnt,

WARNING:LINE_SPACING: Missing a blank line after declarations
#423: FILE: fs/namei.c:850:
+	struct vfsmount *old_pwdmnt;
+	write_lock(&fs->lock);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#440: FILE: fs/namei.c:865:
+static int walk_init_root(const char *name, struct nameidata *nd)
                                                               ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: fs/namei.c:1053:
+static int may_delete(struct inode *dir,struct dentry *victim, int isdir)
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#490: FILE: fs/namei.c:1086:
+static int may_create(struct inode *dir, struct dentry *child) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#512: FILE: fs/namei.c:1343:
+		while (follow_down(&nd->mnt,&dentry) && d_mountpoint(dentry));
 		                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#512: FILE: fs/namei.c:1343:
+		while (follow_down(&nd->mnt,&dentry) && d_mountpoint(dentry));
 		                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#512: FILE: fs/namei.c:1343:
+		while (follow_down(&nd->mnt,&dentry) && d_mountpoint(dentry));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#521: FILE: fs/namei.c:1982:
+static int do_rename(const char * oldname, const char * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#521: FILE: fs/namei.c:1982:
+static int do_rename(const char * oldname, const char * newname)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#531: FILE: fs/namei.c:2094:
+int vfs_follow_link(struct nameidata *nd, const char *link)
                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#552: FILE: fs/namei.c:2167:
+	int res = vfs_follow_link(nd, s);
 	                          ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: fs/open.c:93:
+static long do_sys_truncate(const char * path, loff_t length)

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: fs/seq_file.c:282:
+	int len = strlen(s);
+	if (m->count + len < m->size) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#660: FILE: include/linux/elevator.h:41:
+extern struct request *elv_next_request(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#660: FILE: include/linux/elevator.h:41:
+extern struct request *elv_next_request(request_queue_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#721: FILE: include/linux/fs_struct.h:25:
+extern void set_fs_root(struct fs_struct *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_struct *' should also have an identifier name
#721: FILE: include/linux/fs_struct.h:25:
+extern void set_fs_root(struct fs_struct *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#721: FILE: include/linux/fs_struct.h:25:
+extern void set_fs_root(struct fs_struct *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#721: FILE: include/linux/fs_struct.h:25:
+extern void set_fs_root(struct fs_struct *, struct vfsmount *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#722: FILE: include/linux/fs_struct.h:26:
+extern void set_fs_pwd(struct fs_struct *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_struct *' should also have an identifier name
#722: FILE: include/linux/fs_struct.h:26:
+extern void set_fs_pwd(struct fs_struct *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#722: FILE: include/linux/fs_struct.h:26:
+extern void set_fs_pwd(struct fs_struct *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#722: FILE: include/linux/fs_struct.h:26:
+extern void set_fs_pwd(struct fs_struct *, struct vfsmount *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#800: FILE: include/linux/seq_file.h:46:
+extern int seq_puts(struct seq_file *m, const char *s);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#801: FILE: include/linux/seq_file.h:47:
+extern int seq_printf(struct seq_file *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#801: FILE: include/linux/seq_file.h:47:
+extern int seq_printf(struct seq_file *, const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#801: FILE: include/linux/seq_file.h:47:
+extern int seq_printf(struct seq_file *, const char *, ...)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#890: FILE: kernel/exit.c:376:
+void exit_mm(struct task_struct * tsk)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: lib/rwsem.c:114:
+static struct rw_semaphore *rwsem_down_failed_common(struct rw_semaphore *sem,
 								 struct rwsem_waiter *waiter,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1035: FILE: mm/filemap.c:1634:
+static void setup_read_behavior(struct vm_area_struct * vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1036: FILE: mm/filemap.c:1635:
+static void setup_read_behavior(struct vm_area_struct * vma,
 	int behavior)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1086: FILE: mm/slab.c:1366:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1095: FILE: mm/slab.c:1375:
+void * kmem_cache_alloc(kmem_cache_t *cachep, int flags)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 24 warnings, 10 checks, 920 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
