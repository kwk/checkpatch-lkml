CHECK:LINE_SPACING: Please don't use multiple blank lines
#96: FILE: kernel/sched.c:4438:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#104: FILE: kernel/sched.c:4446:
+	unsigned long size = __size/sizeof(long);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#109: FILE: kernel/sched.c:4451:
+	for (i = 0; i < size/4; i++) {
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#113: FILE: kernel/sched.c:4455:
+			cache[size-1-i] = data;
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#113: FILE: kernel/sched.c:4455:
+			cache[size-1-i] = data;
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#115: FILE: kernel/sched.c:4457:
+			cache[size/2-i] = data;
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#115: FILE: kernel/sched.c:4457:
+			cache[size/2-i] = data;
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#117: FILE: kernel/sched.c:4459:
+			cache[size/2+i] = data;
 			          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#117: FILE: kernel/sched.c:4459:
+			cache[size/2+i] = data;
 			            ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#123: FILE: kernel/sched.c:4465:
+	void (*fn)(void *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#123: FILE: kernel/sched.c:4465:
+	void (*fn)(void *, unsigned long);

WARNING:TYPO_SPELLING: 'couldnt' may be misspelled - perhaps 'couldn't'?
#178: FILE: kernel/sched.c:4520:
+		printk("couldnt allocate local cache ...\n");
 		        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#178: FILE: kernel/sched.c:4520:
+		printk("couldnt allocate local cache ...\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#178: FILE: kernel/sched.c:4520:
+	if (!local_cache) {
+		printk("couldnt allocate local cache ...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: kernel/sched.c:4535:
+		printk("measure_one: timed out waiting for other CPUs\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#198: FILE: kernel/sched.c:4540:
+		printk("measure_one: timed out waiting for other CPUs\n");

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#217: FILE: kernel/sched.c:4559:
+ * chosen in such a nonsymmetric way so that fill_cache() doesnt
                                                           ^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#223: FILE: kernel/sched.c:4565:
+	unsigned long size = sched_cache_size*21/10;
 	                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#223: FILE: kernel/sched.c:4565:
+	unsigned long size = sched_cache_size*21/10;
 	                                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#229: FILE: kernel/sched.c:4571:
+		printk("arch has not set cachesize - using default.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#233: FILE: kernel/sched.c:4575:
+		printk("cpu %d and %d not both online!\n", cpu1, cpu2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#238: FILE: kernel/sched.c:4580:
+		printk("could not vmalloc %ld bytes for cache!\n", size);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#238: FILE: kernel/sched.c:4580:
+	if (!cache) {
+		printk("could not vmalloc %ld bytes for cache!\n", size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: kernel/sched.c:4615:
+	printk("arch cache_decay_nsec: %ld\n", cache_decay_ticks*1000000);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#273: FILE: kernel/sched.c:4615:
+	printk("arch cache_decay_nsec: %ld\n", cache_decay_ticks*1000000);
 	                                                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#274: FILE: kernel/sched.c:4616:
+	printk("migration cost matrix (cache_size: %ld, cpu: %ld MHz):\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: kernel/sched.c:4617:
+	printk("migration cost matrix (cache_size: %ld, cpu: %ld MHz):\n",
+		sched_cache_size, cpu_khz/1000);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#275: FILE: kernel/sched.c:4617:
+		sched_cache_size, cpu_khz/1000);
 		                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: kernel/sched.c:4618:
+	printk("      ");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#277: FILE: kernel/sched.c:4619:
+	for (cpu1 = 0; cpu1 < NR_CPUS; cpu1++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#280: FILE: kernel/sched.c:4622:
+		printk("  [%02d]", cpu1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: kernel/sched.c:4624:
+	printk("\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#283: FILE: kernel/sched.c:4625:
+	for (cpu1 = 0; cpu1 < NR_CPUS; cpu1++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: kernel/sched.c:4628:
+		printk("[%02d]: ", cpu1);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#287: FILE: kernel/sched.c:4629:
+		for (cpu2 = 0; cpu2 < NR_CPUS; cpu2++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: kernel/sched.c:4635:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#294: FILE: kernel/sched.c:4636:
+			printk(" %3Ld.%ld", delta >> 20,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#294: FILE: kernel/sched.c:4636:
+			printk(" %3Ld.%ld", delta >> 20,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: kernel/sched.c:4637:
+			printk(" %3Ld.%ld", delta >> 20,
+				(((long)delta >> 10) / 102) % 10);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu1 != cpu2'
#296: FILE: kernel/sched.c:4638:
+			if ((cpu1 != cpu2) && (delta < min_delta))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta < min_delta'
#296: FILE: kernel/sched.c:4638:
+			if ((cpu1 != cpu2) && (delta < min_delta))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#299: FILE: kernel/sched.c:4641:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#301: FILE: kernel/sched.c:4643:
+	printk("min_delta: %Ld\n", min_delta);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#301: FILE: kernel/sched.c:4643:
+	printk("min_delta: %Ld\n", min_delta);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#304: FILE: kernel/sched.c:4646:
+	printk("using cache_decay nsec: %Ld (%Ld msec)\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#304: FILE: kernel/sched.c:4646:
+	printk("using cache_decay nsec: %Ld (%Ld msec)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: kernel/sched.c:4647:
+	printk("using cache_decay nsec: %Ld (%Ld msec)\n",
+		cache_decay_nsec, cache_decay_nsec >> 20);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#316: FILE: arch/i386/kernel/smpboot.c:852:
+extern unsigned long sched_cache_size;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 29 warnings, 18 checks, 264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
