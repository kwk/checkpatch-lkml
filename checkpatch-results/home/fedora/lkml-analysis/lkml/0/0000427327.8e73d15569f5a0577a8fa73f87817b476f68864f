WARNING:TYPO_SPELLING: 'unnecessery' may be misspelled - perhaps 'unnecessary'?
#40: 
  unnecessery cleaning of these fields. Removed lots of unnecessary list
  ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'unnecessery' may be misspelled - perhaps 'unnecessary'?
#61: 
     - removed unnecessery includes
               ^^^^^^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#149: FILE: fs/xfs/pagebuf/page_buf.c:1683:
 	struct timer_list	pb_daemon_timer =
+		{ .function = (timeout_fn)pagebuf_daemon_wakeup };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: include/linux/timer.h:26:
+static inline void init_timer(struct timer_list * timer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: include/linux/timer.h:41:
+static inline int timer_pending(const struct timer_list * timer)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "timer->base"
#247: FILE: include/linux/timer.h:43:
+	return timer->base != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: include/linux/timer.h:46:
+extern void add_timer(struct timer_list * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/timer.h:46:
+extern void add_timer(struct timer_list * timer);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: include/linux/timer.h:47:
+extern int del_timer(struct timer_list * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/linux/timer.h:47:
+extern int del_timer(struct timer_list * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#252: FILE: include/linux/timer.h:48:
+extern int mod_timer(struct timer_list *timer, unsigned long expires);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: include/linux/timer.h:49:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: include/linux/timer.h:49:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: include/linux/timer.h:51:
+  extern int del_timer_sync(struct timer_list * timer);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: include/linux/timer.h:51:
+  extern int del_timer_sync(struct timer_list * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/linux/timer.h:51:
+  extern int del_timer_sync(struct timer_list * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/timer.h:56:
+extern void init_timers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/linux/timer.h:57:
+extern void run_local_timers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/timer.h:58:
+extern void it_real_fn(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#262: FILE: include/linux/timer.h:58:
+extern void it_real_fn(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#283: FILE: net/ipv4/inetpeer.c:101:
 static struct timer_list peer_periodic_timer =
+	{ .function = &peer_check_expire };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#294: FILE: net/core/profile.c:38:
 static struct timer_list alpha_timer =
+	{ .function = alpha_tick };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#303: FILE: net/core/profile.c:161:
 static struct timer_list whitehole_timer =
+	{ .function = whitehole_inject };

WARNING:NEW_TYPEDEFS: do not add new typedefs
#324: FILE: kernel/timer.c:50:
+typedef struct timer_list timer_t;

CHECK:BRACES: Unbalanced braces around else statement
#348: FILE: kernel/timer.c:97:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: kernel/timer.c:126:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#381: FILE: kernel/timer.c:126:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: kernel/timer.c:126:
+  ^IBUG_ON(timer_pending(timer) || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#381: FILE: kernel/timer.c:126:
+  	BUG_ON(timer_pending(timer) || !timer->function);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#427: FILE: kernel/timer.c:160:
+	BUG_ON(!timer->function);

WARNING:TYPO_SPELLING: 'deactive' may be misspelled - perhaps 'deactivate'?
#471: FILE: kernel/timer.c:217:
+ * del_timer - deactive a timer.
                ^^^^^^^^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#560: FILE: kernel/timer.c:271:
+	for (i = 0; i < NR_CPUS; i++) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427327.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 12 warnings, 9 checks, 545 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427327.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
