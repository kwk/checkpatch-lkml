WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
variants HighPoint has created so far. This should cure the rest of the timing

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#91: FILE: drivers/ide/pci/hpt366.c:2:
+ * linux/drivers/ide/pci/hpt366.c		Version 1.00	Jun 25, 2006

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: drivers/ide/pci/hpt366.c:395:
+^Iu32 **settings; ^I/* Chipset settings table */$

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#286: FILE: drivers/ide/pci/hpt366.c:429:
+static struct hpt_info hpt36x __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#293: FILE: drivers/ide/pci/hpt366.c:436:
+static struct hpt_info hpt370 __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#300: FILE: drivers/ide/pci/hpt366.c:443:
+static struct hpt_info hpt370a __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#307: FILE: drivers/ide/pci/hpt366.c:450:
+static struct hpt_info hpt374 __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#314: FILE: drivers/ide/pci/hpt366.c:457:
+static struct hpt_info hpt372 __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#321: FILE: drivers/ide/pci/hpt366.c:464:
+static struct hpt_info hpt372a __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#328: FILE: drivers/ide/pci/hpt366.c:471:
+static struct hpt_info hpt302 __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#335: FILE: drivers/ide/pci/hpt366.c:478:
+static struct hpt_info hpt371 __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#342: FILE: drivers/ide/pci/hpt366.c:485:
+static struct hpt_info hpt372n __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#349: FILE: drivers/ide/pci/hpt366.c:492:
+static struct hpt_info hpt302n __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#355: FILE: drivers/ide/pci/hpt366.c:498:
+static struct hpt_info hpt371n __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#593: FILE: drivers/ide/pci/hpt366.c:987:
+static int __devinit hpt37x_calibrate_dpll(struct pci_dev *dev, u16 f_low, u16 f_high)

ERROR:SPACING: space required before the open parenthesis '('
#616: FILE: drivers/ide/pci/hpt366.c:996:
+	for(i = 0; i < 0x5000; ++i) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#617: FILE: drivers/ide/pci/hpt366.c:997:
+		udelay(50);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: space required before the open parenthesis '('
#623: FILE: drivers/ide/pci/hpt366.c:1003:
+	for(i = 0; i < 0x1000; ++i) {

ERROR:SPACING: space required before the open parenthesis '('
#626: FILE: drivers/ide/pci/hpt366.c:1006:
+		if(!(scr2 & 0x80))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#630: FILE: drivers/ide/pci/hpt366.c:1010:
+	pci_read_config_dword (dev, 0x5c, &dpll);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#636: FILE: drivers/ide/pci/hpt366.c:1015:
+static unsigned int __devinit init_chipset_hpt366(struct pci_dev *dev, const char *name)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct hpt_info)...)
#646: FILE: drivers/ide/pci/hpt366.c:1017:
+	struct hpt_info *info	= kmalloc(sizeof(struct hpt_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info"
#651: FILE: drivers/ide/pci/hpt366.c:1022:
+	if (info == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#652: FILE: drivers/ide/pci/hpt366.c:1023:
+		printk(KERN_ERR "%s: out of memory!\n", name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: drivers/ide/pci/hpt366.c:1039:
+		pci_write_config_dword(dev, PCI_ROM_ADDRESS,
+			dev->resource[PCI_ROM_RESOURCE].start | PCI_ROM_ADDRESS_ENABLE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#759: FILE: drivers/ide/pci/hpt366.c:1088:
+		if ((temp & 0xFFFFF000) != 0xABCDE000) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#762: FILE: drivers/ide/pci/hpt366.c:1091:
+			printk(KERN_WARNING "%s: no clock data saved by BIOS\n",

CHECK:BRACES: Unbalanced braces around else statement
#772: FILE: drivers/ide/pci/hpt366.c:1101:
+		} else

ERROR:SPACING: space required before the open parenthesis '('
#781: FILE: drivers/ide/pci/hpt366.c:1110:
+		else if(pci_clk < 45)

ERROR:SPACING: space required before the open parenthesis '('
#783: FILE: drivers/ide/pci/hpt366.c:1112:
+		else if(pci_clk < 55)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#789: FILE: drivers/ide/pci/hpt366.c:1117:
+		printk(KERN_INFO "%s: DPLL base: %d MHz, f_CNT: %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#790: FILE: drivers/ide/pci/hpt366.c:1118:
+		printk(KERN_INFO "%s: DPLL base: %d MHz, f_CNT: %d, "
+		       "assuming %d MHz PCI\n", name, dpll_clk, f_cnt, pci_clk);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#820: FILE: drivers/ide/pci/hpt366.c:1125:
+		switch((itr1 >> 8) & 0x07) {
+			case 0x09:
[...]
+			case 0x05:
[...]
+			case 0x07:
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#820: FILE: drivers/ide/pci/hpt366.c:1125:
+		switch((itr1 >> 8) & 0x07) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#834: FILE: drivers/ide/pci/hpt366.c:1137:
+	switch (pci_clk) {
+		case 25:
[...]
+		case 33:
+		default:
[...]
+		case 40:
[...]
+		case 50:
[...]
+		case 66:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info->settings[clock]"
#870: FILE: drivers/ide/pci/hpt366.c:1164:
+	if (info->chip_type >= HPT374 || info->settings[clock] == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info->settings[clock]"
#918: FILE: drivers/ide/pci/hpt366.c:1180:
+		if (info->settings[clock] == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#919: FILE: drivers/ide/pci/hpt366.c:1181:
+			printk(KERN_ERR "%s: unknown bus timing!\n", name);

ERROR:SPACING: space required before the open parenthesis '('
#954: FILE: drivers/ide/pci/hpt366.c:1196:
+			if(hpt37x_calibrate_dpll(dev, f_low, f_low + delta))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#966: FILE: drivers/ide/pci/hpt366.c:1208:
+			printk(KERN_ERR "%s: DPLL did not stabilize!\n", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#971: FILE: drivers/ide/pci/hpt366.c:1213:
+		printk("%s: using %d MHz DPLL clock\n", name, dpll_clk);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#976: FILE: drivers/ide/pci/hpt366.c:1218:
+		printk("%s: using %d MHz PCI clock\n", name, pci_clk);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1016: FILE: drivers/ide/pci/hpt366.c:1241:
+		pci_read_config_byte (dev, 0x50, &mcr1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1017: FILE: drivers/ide/pci/hpt366.c:1242:
+		pci_read_config_byte (dev, 0x54, &mcr4);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1020: FILE: drivers/ide/pci/hpt366.c:1245:
+		udelay(100);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1035: FILE: drivers/ide/pci/hpt366.c:1260:
 static void __devinit init_hwif_hpt366(ide_hwif_t *hwif)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1099: FILE: drivers/ide/pci/hpt366.c:1383:
 static void __devinit init_dma_hpt366(ide_hwif_t *hwif, unsigned long dmabase)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1177: FILE: drivers/ide/pci/hpt366.c:1411:
 static int __devinit init_setup_hpt374(struct pci_dev *dev, ide_pci_device_t *d)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1196: FILE: drivers/ide/pci/hpt366.c:1439:
 static int __devinit init_setup_hpt372n(struct pci_dev *dev, ide_pci_device_t *d)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1203: FILE: drivers/ide/pci/hpt366.c:1446:
 static int __devinit init_setup_hpt371(struct pci_dev *dev, ide_pci_device_t *d)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1211: FILE: drivers/ide/pci/hpt366.c:1453:
+	if (rev > 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1215: FILE: drivers/ide/pci/hpt366.c:1457:
+	} else

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1230: FILE: drivers/ide/pci/hpt366.c:1475:
 static int __devinit init_setup_hpt372a(struct pci_dev *dev, ide_pci_device_t *d)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1238: FILE: drivers/ide/pci/hpt366.c:1482:
+	if (rev > 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1242: FILE: drivers/ide/pci/hpt366.c:1486:
+	} else

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1249: FILE: drivers/ide/pci/hpt366.c:1493:
 static int __devinit init_setup_hpt302(struct pci_dev *dev, ide_pci_device_t *d)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1257: FILE: drivers/ide/pci/hpt366.c:1500:
+	if (rev > 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1261: FILE: drivers/ide/pci/hpt366.c:1504:
+	} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1305: FILE: drivers/ide/pci/hpt366.c:1570:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1305: FILE: drivers/ide/pci/hpt366.c:1570:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1305: FILE: drivers/ide/pci/hpt366.c:1570:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1305: FILE: drivers/ide/pci/hpt366.c:1570:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1317: FILE: drivers/ide/pci/hpt366.c:1581:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1317: FILE: drivers/ide/pci/hpt366.c:1581:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1317: FILE: drivers/ide/pci/hpt366.c:1581:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1317: FILE: drivers/ide/pci/hpt366.c:1581:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1329: FILE: drivers/ide/pci/hpt366.c:1592:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1329: FILE: drivers/ide/pci/hpt366.c:1592:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1329: FILE: drivers/ide/pci/hpt366.c:1592:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1329: FILE: drivers/ide/pci/hpt366.c:1592:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1349: FILE: drivers/ide/pci/hpt366.c:1614:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1349: FILE: drivers/ide/pci/hpt366.c:1614:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1349: FILE: drivers/ide/pci/hpt366.c:1614:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1349: FILE: drivers/ide/pci/hpt366.c:1614:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1361: FILE: drivers/ide/pci/hpt366.c:1625:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1361: FILE: drivers/ide/pci/hpt366.c:1625:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1361: FILE: drivers/ide/pci/hpt366.c:1625:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1361: FILE: drivers/ide/pci/hpt366.c:1625:
+		.enablebits	= {{0x50,0x04,0x04}, {0x54,0x04,0x04}},
 		           	                               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000063875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 34 warnings, 15 checks, 1244 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000063875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
