ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#48: 
--- a/drivers/scsi/aic7xxx/aic7770_osm.c

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#267: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:478:
+	BUG_ON(targ == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!targ"
#267: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:478:
+	BUG_ON(targ == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#534: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:611:
+ahc_linux_queue(struct scsi_cmnd * cmd, void (*scsi_done) (struct scsi_cmnd *))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#576: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:634:
+	BUG_ON(dev == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#576: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:634:
+	BUG_ON(dev == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!targ"
#614: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:661:
+	if (targ == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#617: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:664:
+		struct seeprom_config *sc = ahc->seep_config;
+		if (targ == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!targ"
#617: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:664:
+		if (targ == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#638: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:685:
+			if (sc->device_flags[target_offset] & CFWIDEB) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#641: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:688:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:690:
+^I^I^Ispi_min_period(starget) = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:702:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#656: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:703:
+			
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#658: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:705:
+	if (dev == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#660: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:707:
+		if (dev == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#779: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:752:
+	BUG_ON(dev->active);

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#969: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:924:
+				      dmat->maxsize, mapp);
 				                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -ENOMEM)
#974: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:926:
+		return ENOMEM;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1248: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1573:
+	if (!blk_rq_tagged(cmd->request)
+	    && (ahc->features & AHC_SCB_BTT) == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ahc->untagged_queues[target_offset]
#1269: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1577:
+		untagged_q = &(ahc->untagged_queues[target_offset]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1272: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1580:
+			 * we're busy to another */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1279: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1587:
+	if ((scb = ahc_get_scb(ahc)) == NULL) {
 			ahc->flags |= AHC_RESOURCE_SHORTAGE;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1279: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1587:
+	if ((scb = ahc_get_scb(ahc)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1354: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1611:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1357: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1614:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1366: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1620:
+	if ((dev->flags & (AHC_DEV_Q_TAGGED|AHC_DEV_Q_BASIC)) != 0) {
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1368: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1622:
+		uint8_t tag_msgs[2];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1369: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1623:
+^I^I$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1376: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1630:
+		} else if (dev->commands_since_idle_or_otag == AHC_OTAG_THRESH
+				&& (dev->flags & AHC_DEV_Q_TAGGED) != 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1462: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1665:
+^I^I */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1499: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1687:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1583: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1734:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1689: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:1971:
+		BUG_ON(!TAILQ_EMPTY(untagged_q));

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#1994: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:2628:
+	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1997: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:2631:
+^Istruct ahc_initiator_tinfo *tinfo $

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1998: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:2632:
+	struct ahc_initiator_tinfo *tinfo 
+		= ahc_fetch_transinfo(ahc,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2075: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.c:2769:
+	syncrate = ahc_find_syncrate(ahc, &period, &ppr_options,AHC_SYNCRATE_DT);
 	                                                       ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2195: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.h:113:
+typedef struct scsi_cmnd      *ahc_io_ctx_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2217: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.h:181:
+typedef dma_addr_t bus_dmamap_t;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2348: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.h:461:
+	uint32_t		 flags;

WARNING:INLINE: plain inline is preferred over __inline
#2464: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.h:781:
+static __inline void ahc_cmd_set_transaction_status(struct scsi_cmnd *, uint32_t);

WARNING:INLINE: plain inline is preferred over __inline
#2467: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.h:783:
+static __inline void ahc_cmd_set_scsi_status(struct scsi_cmnd *, uint32_t);

WARNING:INLINE: plain inline is preferred over __inline
#2470: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.h:785:
+static __inline uint32_t ahc_cmd_get_transaction_status(struct scsi_cmnd *cmd);

WARNING:INLINE: plain inline is preferred over __inline
#2473: FILE: drivers/scsi/aic7xxx/aic7xxx_osm.h:787:
+static __inline uint32_t ahc_cmd_get_scsi_status(struct scsi_cmnd *cmd);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2615: FILE: drivers/scsi/scsi_transport_spi.c:241:
+#define spi_transport_show_simple(field, format_string)			\
+									\
+static ssize_t								\
+show_spi_transport_##field(struct class_device *cdev, char *buf)	\
+{									\
+	struct scsi_target *starget = transport_class_to_starget(cdev);	\
+	struct spi_transport_attrs *tp;					\
+									\
+	tp = (struct spi_transport_attrs *)&starget->starget_data;	\
+	return snprintf(buf, 20, format_string, tp->field);		\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#2627: FILE: drivers/scsi/scsi_transport_spi.c:253:
+#define spi_transport_store_simple(field, format_string)		\
+									\
+static ssize_t								\
+store_spi_transport_##field(struct class_device *cdev, const char *buf, \
+			    size_t count)				\
+{									\
+	int val;							\
+	struct scsi_target *starget = transport_class_to_starget(cdev);	\
+	struct spi_transport_attrs *tp;					\
+									\
+	tp = (struct spi_transport_attrs *)&starget->starget_data;	\
+	val = simple_strtoul(buf, NULL, 0);				\
+	tp->field = val;						\
+	return count;							\
+}

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2638: FILE: drivers/scsi/scsi_transport_spi.c:264:
+	val = simple_strtoul(buf, NULL, 0);				\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2664: FILE: drivers/scsi/scsi_transport_spi.c:309:
+	struct spi_transport_attrs *tp					\
+		= (struct spi_transport_attrs *)&starget->starget_data;	\

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2666: FILE: drivers/scsi/scsi_transport_spi.c:311:
+	val = simple_strtoul(buf, NULL, 0);				\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2676: FILE: drivers/scsi/scsi_transport_spi.c:325:
+#define spi_transport_simple_attr(field, format_string)			\
+	spi_transport_show_simple(field, format_string)			\
+	spi_transport_store_simple(field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2676: FILE: drivers/scsi/scsi_transport_spi.c:325:
+#define spi_transport_simple_attr(field, format_string)			\
+	spi_transport_show_simple(field, format_string)			\
+	spi_transport_store_simple(field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format_string' - possible side-effects?
#2676: FILE: drivers/scsi/scsi_transport_spi.c:325:
+#define spi_transport_simple_attr(field, format_string)			\
+	spi_transport_show_simple(field, format_string)			\
+	spi_transport_store_simple(field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2676: FILE: drivers/scsi/scsi_transport_spi.c:325:
+#define spi_transport_simple_attr(field, format_string)			\
+	spi_transport_show_simple(field, format_string)			\
+	spi_transport_store_simple(field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2679: FILE: drivers/scsi/scsi_transport_spi.c:328:
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2683: FILE: drivers/scsi/scsi_transport_spi.c:332:
+#define spi_transport_max_attr(field, format_string)			\
+	spi_transport_show_function(field, format_string)		\
+	spi_transport_store_max(field, format_string)			\
+	spi_transport_simple_attr(max_##field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#2683: FILE: drivers/scsi/scsi_transport_spi.c:332:
+#define spi_transport_max_attr(field, format_string)			\
+	spi_transport_show_function(field, format_string)		\
+	spi_transport_store_max(field, format_string)			\
+	spi_transport_simple_attr(max_##field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format_string' - possible side-effects?
#2683: FILE: drivers/scsi/scsi_transport_spi.c:332:
+#define spi_transport_max_attr(field, format_string)			\
+	spi_transport_show_function(field, format_string)		\
+	spi_transport_store_max(field, format_string)			\
+	spi_transport_simple_attr(max_##field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2683: FILE: drivers/scsi/scsi_transport_spi.c:332:
+#define spi_transport_max_attr(field, format_string)			\
+	spi_transport_show_function(field, format_string)		\
+	spi_transport_store_max(field, format_string)			\
+	spi_transport_simple_attr(max_##field, format_string)		\
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\
+			 show_spi_transport_##field,			\
+			 store_spi_transport_##field);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2687: FILE: drivers/scsi/scsi_transport_spi.c:336:
+static CLASS_DEVICE_ATTR(field, S_IRUGO | S_IWUSR,			\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2775: FILE: drivers/scsi/scsi_transport_spi.c:447:
+store_spi_transport_period(struct class_device *cdev, const char *buf,
+			    size_t count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2810: FILE: drivers/scsi/scsi_transport_spi.c:482:
+store_spi_transport_min_period(struct class_device *cdev, const char *buf,
+			    size_t count)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2820: FILE: drivers/scsi/scsi_transport_spi.c:492:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2821: FILE: drivers/scsi/scsi_transport_spi.c:493:
+static CLASS_DEVICE_ATTR(min_period, S_IRUGO | S_IWUSR, $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2821: FILE: drivers/scsi/scsi_transport_spi.c:493:
+static CLASS_DEVICE_ATTR(min_period, S_IRUGO | S_IWUSR, 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2825: FILE: drivers/scsi/scsi_transport_spi.c:497:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2845: FILE: drivers/scsi/scsi_transport_spi.c:780:
+		printk("WIDTH IS %d\n", spi_max_width(starget));

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2865: FILE: drivers/scsi/scsi_transport_spi.c:1016:
+#define SETUP_RELATED_ATTRIBUTE(field, rel_field)			\
+	i->private_attrs[count] = class_device_attr_##field;		\
+	if (!i->f->set_##rel_field) {					\
+		i->private_attrs[count].attr.mode = S_IRUGO;		\
+		i->private_attrs[count].store = NULL;			\
+	}								\
+	i->attrs[count] = &i->private_attrs[count];			\
+	if (i->f->show_##rel_field)					\
+		count++

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2868: FILE: drivers/scsi/scsi_transport_spi.c:1019:
+		i->private_attrs[count].attr.mode = S_IRUGO;		\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 24 warnings, 28 checks, 2744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
