WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#101: FILE: MAINTAINERS:939:
+P:	Eric Biederman
+M:	ebiederm@xmission.com

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: arch/i386/Config.help:423:
+  allows you to replace your current kernel with another kernel, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: arch/i386/Config.help:428:
+  $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#167: FILE: arch/i386/kernel/apic.c:158:
 	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: arch/i386/kernel/apic.c:158:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: arch/i386/kernel/apic.c:164:
+^I^Ivalue &= ~APIC_VECTOR_MASK; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: arch/i386/kernel/apic.c:171:
+^I^Ivalue &= ~(APIC_MODE_MASK | APIC_SEND_PENDING | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: arch/i386/kernel/apic.c:172:
+^I^I^IAPIC_INPUT_POLARITY | APIC_LVT_REMOTE_IRR | $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#182: FILE: arch/i386/kernel/apic.c:173:
+			APIC_LVT_LEVEL_TRIGGER | APIC_LVT_MASKED );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: arch/i386/kernel/apic.c:177:
+^I^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#189: FILE: arch/i386/kernel/apic.c:180:
+		value &= ~(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: arch/i386/kernel/apic.c:181:
+^I^I^IAPIC_MODE_MASK | APIC_SEND_PENDING | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: arch/i386/kernel/apic.c:182:
+^I^I^IAPIC_INPUT_POLARITY | APIC_LVT_REMOTE_IRR | $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#219: FILE: arch/i386/kernel/apic.c:1177:
+	if (smp_found_config) {
+		disable_IO_APIC();
+	}

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#267: FILE: arch/i386/kernel/dmi_scan.c:507:
+	{ set_bios_reboot, "Dell PowerEdge 1300", {	/* Handle problems with rebooting on Dell 1300's */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: arch/i386/kernel/i8259.c:250:
+{   $

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#307: FILE: arch/i386/kernel/i8259.c:267:
+	udelay(100);		/* wait for 8259A to initialize */

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#336: FILE: arch/i386/kernel/machine_kexec.c:1:
+#include <linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#340: FILE: arch/i386/kernel/machine_kexec.c:5:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#343: FILE: arch/i386/kernel/machine_kexec.c:8:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: arch/i386/kernel/machine_kexec.c:11:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: arch/i386/kernel/machine_kexec.c:17:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#359: FILE: arch/i386/kernel/machine_kexec.c:24:
+	(*(__u32 *)(curidt +2)) = (unsigned long)(newidt);
 	                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#361: FILE: arch/i386/kernel/machine_kexec.c:26:
+	__asm__ __volatile__ (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: arch/i386/kernel/machine_kexec.c:27:
+^I^I"lidt %0\n" $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: arch/i386/kernel/machine_kexec.c:32:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#374: FILE: arch/i386/kernel/machine_kexec.c:39:
+	(*(__u32 *)(curgdt +2)) = (unsigned long)(newgdt);
 	                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#376: FILE: arch/i386/kernel/machine_kexec.c:41:
+	__asm__ __volatile__ (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: arch/i386/kernel/machine_kexec.c:42:
+^I^I"lgdt %0\n" $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#387: FILE: arch/i386/kernel/machine_kexec.c:52:
+	__asm__ __volatile__ (

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#388: FILE: arch/i386/kernel/machine_kexec.c:53:
+		"\tljmp $"STR(__KERNEL_CS)",$1f\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#390: FILE: arch/i386/kernel/machine_kexec.c:55:
+		"\tmovl $"STR(__KERNEL_DS)",%eax\n"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: arch/i386/kernel/machine_kexec.c:69:
+^I * general purpose code must be more carful $

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: arch/i386/kernel/machine_kexec.c:75:
+	struct mm_struct *mm = current->mm;
+	spin_lock(&mm->page_table_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: arch/i386/kernel/machine_kexec.c:76:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: arch/i386/kernel/machine_kexec.c:82:
+		pte_t *pte = pte_alloc_map(mm, pmd, address);
+		if (pte) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: arch/i386/kernel/machine_kexec.c:83:
+^I^I^Iset_pte(pte, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: arch/i386/kernel/machine_kexec.c:84:
+^I^I^I^Imk_pte(virt_to_page(phys_to_virt(address)), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: arch/i386/kernel/machine_kexec.c:85:
+				mk_pte(virt_to_page(phys_to_virt(address)), 
+					PAGE_SHARED));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#427: FILE: arch/i386/kernel/machine_kexec.c:92:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#428: FILE: arch/i386/kernel/machine_kexec.c:93:
+typedef void (*relocate_new_kernel_t)(

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#433: FILE: arch/i386/kernel/machine_kexec.c:98:
+extern void relocate_new_kernel_end(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: arch/i386/kernel/machine_kexec.c:117:
+^Imemcpy(reboot_code_buffer, relocate_new_kernel, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: arch/i386/kernel/machine_kexec.c:118:
+	memcpy(reboot_code_buffer, relocate_new_kernel, 
+		relocate_new_kernel_size);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: arch/i386/kernel/machine_kexec.c:136:
+	set_gdt(phys_to_virt(0),0);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: arch/i386/kernel/machine_kexec.c:137:
+	set_idt(phys_to_virt(0),0);
 	                       ^

CHECK:SPACING: No space is necessary after a cast
#475: FILE: arch/i386/kernel/machine_kexec.c:140:
+	rnk = (relocate_new_kernel_t) virt_to_phys(reboot_code_buffer);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: arch/i386/kernel/machine_kexec.c:141:
+^I(*rnk)(virt_to_phys(indirection_page), virt_to_phys(reboot_code_buffer), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: arch/i386/kernel/machine_kexec.c:142:
+	(*rnk)(virt_to_phys(indirection_page), virt_to_phys(reboot_code_buffer), 
+		image->start);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#570: FILE: arch/i386/kernel/relocate_kernel.S:1:
+#include <linux/config.h>

WARNING:TYPO_SPELLING: 'Proctected' may be misspelled - perhaps 'Protected'?
#600: FILE: arch/i386/kernel/relocate_kernel.S:31:
+	 * 0  1 == Proctected mode enabled
 	           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#607: FILE: arch/i386/kernel/relocate_kernel.S:38:
+1:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: arch/i386/kernel/relocate_kernel.S:83:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: arch/i386/kernel/relocate_kernel.S:86:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#667: FILE: arch/i386/kernel/relocate_kernel.S:98:
+relocate_new_kernel_size:^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: arch/i386/kernel/smp.c:614:
+ ^Iextern int reboot_cpu;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#676: FILE: arch/i386/kernel/smp.c:614:
+ ^Iextern int reboot_cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: arch/i386/kernel/smp.c:614:
+ ^Iextern int reboot_cpu;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#676: FILE: arch/i386/kernel/smp.c:614:
+ 	extern int reboot_cpu;

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: arch/i386/kernel/smp.c:617:
+ ^I/* The boot cpu is always logical cpu 0 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#679: FILE: arch/i386/kernel/smp.c:617:
+ ^I/* The boot cpu is always logical cpu 0 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: arch/i386/kernel/smp.c:617:
+ ^I/* The boot cpu is always logical cpu 0 */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#684: FILE: arch/i386/kernel/smp.c:622:
+^Iif ((reboot_cpu != -1) && !(reboot_cpu >= NR_CPUS) && $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#684: FILE: arch/i386/kernel/smp.c:622:
+	if ((reboot_cpu != -1) && !(reboot_cpu >= NR_CPUS) && 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: arch/i386/kernel/smp.c:623:
+	if ((reboot_cpu != -1) && !(reboot_cpu >= NR_CPUS) && 
+		test_bit(reboot_cpu, &cpu_online_map)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#688: FILE: arch/i386/kernel/smp.c:626:
+^I $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#689: FILE: arch/i386/kernel/smp.c:627:
+	/* Make certain the the cpu I'm rebooting on is online */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#690: FILE: arch/i386/kernel/smp.c:628:
+	if (!test_bit(reboot_cpu_id, &cpu_online_map)) {
+		reboot_cpu_id = smp_processor_id();
+	}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#710: FILE: include/asm-i386/apic.h:99:
+extern void stop_apics(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#731: FILE: include/asm-i386/kexec.h:1:
+#ifndef _I386_KEXEC_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: include/asm-i386/kexec.h:17:
+#define KEXEC_SOURCE_MEMORY_LIMIT (FIXADDR_START - PAGE_OFFSET) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#754: FILE: include/asm-i386/kexec.h:24:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#772: FILE: include/linux/kexec.h:1:
+#ifndef LINUX_KEXEC_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#779: FILE: include/linux/kexec.h:8:
+/* $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#784: FILE: include/linux/kexec.h:13:
+typedef unsigned long kimage_entry_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#814: FILE: include/linux/kexec.h:43:
+extern void machine_kexec(struct kimage *image);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: include/linux/kexec.h:44:
+extern int do_kexec(unsigned long entry, long nr_segments, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#815: FILE: include/linux/kexec.h:44:
+extern int do_kexec(unsigned long entry, long nr_segments, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: include/linux/kexec.h:45:
+extern int do_kexec(unsigned long entry, long nr_segments, 
+	struct kexec_segment *segments, struct kimage *image);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#843: FILE: kernel/kexec.c:1:
+#include <linux/mm.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#852: FILE: kernel/kexec.c:10:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#853: FILE: kernel/kexec.c:11:
+#include <asm/io.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#865: FILE: kernel/kexec.c:23:
+ * $

WARNING:TYPO_SPELLING: 'calcuate' may be misspelled - perhaps 'calculate'?
#870: FILE: kernel/kexec.c:28:
+ * I don't know of a good way to do this calcuate which pages get_free_page
                                          ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: kernel/kexec.c:30:
+ * <asm/kexec.h> to properly set $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: kernel/kexec.c:32:
+ * $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#884: FILE: kernel/kexec.c:42:
+}
+static int kimage_add_entry(struct kimage *image, kimage_entry_t entry)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#886: FILE: kernel/kexec.c:44:
+	if (image->offset != 0) {
+		image->entry++;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#891: FILE: kernel/kexec.c:49:
+		kimage_entry_t *ind_page;
+		ind_page = (void *)__get_free_page(GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#892: FILE: kernel/kexec.c:50:
+		if (!ind_page) {
+			return -ENOMEM;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: kernel/kexec.c:55:
+^I^Iimage->last_entry = $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#898: FILE: kernel/kexec.c:56:
+			ind_page + ((PAGE_SIZE/sizeof(kimage_entry_t)) - 1);
 			                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#909: FILE: kernel/kexec.c:67:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#913: FILE: kernel/kexec.c:71:
+	if (destination >= KEXEC_DESTINATION_MEMORY_LIMIT) {
+		goto out;
+	}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#926: FILE: kernel/kexec.c:84:
+static int kimage_set_destination(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: kernel/kexec.c:85:
+^Istruct kimage *image, unsigned long destination) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#930: FILE: kernel/kexec.c:88:
+	int result;
+	destination &= PAGE_MASK;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#932: FILE: kernel/kexec.c:90:
+	if (result) {
+		return result;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#936: FILE: kernel/kexec.c:94:
+	if (result == 0) {
+		image->destination = destination;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#942: FILE: kernel/kexec.c:100:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#946: FILE: kernel/kexec.c:104:
+	int result;
+	page &= PAGE_MASK;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#948: FILE: kernel/kexec.c:106:
+	if (result) {
+		return result;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#952: FILE: kernel/kexec.c:110:
+	if (result == 0) {
+		image->destination += PAGE_SIZE;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#958: FILE: kernel/kexec.c:116:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#962: FILE: kernel/kexec.c:120:
+	int result;
+	result = kimage_add_entry(image, IND_DONE);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'image' may be better as '(image)' to avoid precedence issues
#970: FILE: kernel/kexec.c:128:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#970: FILE: kernel/kexec.c:128:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#970: FILE: kernel/kexec.c:128:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#972: FILE: kernel/kexec.c:130:
+		ptr = (entry & IND_INDIRECTION)? \
 		                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#973: FILE: kernel/kexec.c:131:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#973: FILE: kernel/kexec.c:131:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#979: FILE: kernel/kexec.c:137:
+	kimage_entry_t ind = 0;
+	for_each_kimage_entry(image, ptr, entry) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#982: FILE: kernel/kexec.c:140:
+			if (ind & IND_INDIRECTION) {
+				free_page((unsigned long)phys_to_virt(ind & PAGE_MASK));
+			}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#990: FILE: kernel/kexec.c:148:
+		}
+		else if (entry & IND_SOURCE) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1001: FILE: kernel/kexec.c:159:
+	int i;
+	printk(KERN_EMERG "kimage_print_image\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1001: FILE: kernel/kexec.c:159:
+	printk(KERN_EMERG "kimage_print_image\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kimage_print_image', this function's name, in a string
#1001: FILE: kernel/kexec.c:159:
+	printk(KERN_EMERG "kimage_print_image\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1004: FILE: kernel/kexec.c:162:
+		if (entry & IND_DESTINATION) {
[...]
+		else if (entry & IND_INDIRECTION) {
[...]
+		else if (entry & IND_SOURCE) {
[...]
+		else if (entry & IND_DONE) {
[...]
+		else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1005: FILE: kernel/kexec.c:163:
+			printk(KERN_EMERG "%5d DEST\n", i);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1007: FILE: kernel/kexec.c:165:
+		}
+		else if (entry & IND_INDIRECTION) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1008: FILE: kernel/kexec.c:166:
+			printk(KERN_EMERG "%5d IND\n", i);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1010: FILE: kernel/kexec.c:168:
+		}
+		else if (entry & IND_SOURCE) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1011: FILE: kernel/kexec.c:169:
+			printk(KERN_EMERG "%5d SOURCE\n", i);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1013: FILE: kernel/kexec.c:171:
+		}
+		else if (entry & IND_DONE) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1014: FILE: kernel/kexec.c:172:
+			printk(KERN_EMERG "%5d DONE\n", i);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1016: FILE: kernel/kexec.c:174:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1016: FILE: kernel/kexec.c:174:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1017: FILE: kernel/kexec.c:175:
+			printk(KERN_EMERG "%5d ?\n", i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1021: FILE: kernel/kexec.c:179:
+	printk(KERN_EMERG "kimage_print_image: %5d\n", i);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kimage_print_image', this function's name, in a string
#1021: FILE: kernel/kexec.c:179:
+	printk(KERN_EMERG "kimage_print_image: %5d\n", i);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1024: FILE: kernel/kexec.c:182:
+static int kimage_is_destination_page(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1029: FILE: kernel/kexec.c:187:
+	unsigned long destination;
+	destination = 0;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1035: FILE: kernel/kexec.c:193:
+		}
+		else if (entry & IND_SOURCE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1036: FILE: kernel/kexec.c:194:
+			if (page == destination) {
+				return 1;
+			}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1045: FILE: kernel/kexec.c:203:
+static int kimage_get_unused_area(

WARNING:TYPO_SPELLING: 'ununsed' may be misspelled - perhaps 'unused'?
#1050: FILE: kernel/kexec.c:208:
+	 * ununsed memory that is at least size bytes long.
 	   ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: kernel/kexec.c:212:
+^I * conservative estimate of what we need to do. $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1063: FILE: kernel/kexec.c:221:
+	unsigned long mask;
+	mask = ((1 << align) -1);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1063: FILE: kernel/kexec.c:221:
+	mask = ((1 << align) -1);
 	                     ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1064: FILE: kernel/kexec.c:222:
+	start = end = PAGE_SIZE;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#1065: FILE: kernel/kexec.c:223:
+	for(addr = PAGE_SIZE; addr < KEXEC_SOURCE_MEMORY_LIMIT; addr += PAGE_SIZE) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1068: FILE: kernel/kexec.c:226:
+		unsigned long aligned_start;
+		page = virt_to_page(phys_to_virt(addr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1070: FILE: kernel/kexec.c:228:
+		if (PageReserved(page) ||
+			kimage_is_destination_page(image, addr)) {

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#1072: FILE: kernel/kexec.c:230:
+			 * end of the next area must be atleast at the
 			                                ^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1075: FILE: kernel/kexec.c:233:
+			start = end = addr + PAGE_SIZE;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1077: FILE: kernel/kexec.c:235:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1077: FILE: kernel/kexec.c:235:
+		else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1084: FILE: kernel/kexec.c:242:
+		if (aligned_start > start) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1087: FILE: kernel/kexec.c:245:
+		if (aligned_start > end) {
+			continue;
+		}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1099: FILE: kernel/kexec.c:257:
+static kimage_entry_t *kimage_dst_conflict(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1104: FILE: kernel/kexec.c:262:
+	unsigned long destination = 0;
+	for_each_kimage_entry(image, ptr, entry) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1108: FILE: kernel/kexec.c:266:
+		}
+		else if (entry & IND_DESTINATION) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1111: FILE: kernel/kexec.c:269:
+		}
+		else if (entry & IND_SOURCE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1112: FILE: kernel/kexec.c:270:
+			if (page == destination) {
+				return ptr;
+			}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1121: FILE: kernel/kexec.c:279:
+static kimage_entry_t *kimage_src_conflict(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1125: FILE: kernel/kexec.c:283:
+	kimage_entry_t *ptr, entry;
+	for_each_kimage_entry(image, ptr, entry) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1127: FILE: kernel/kexec.c:285:
+		unsigned long page;
+		if (ptr == limit) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1130: FILE: kernel/kexec.c:288:
+		}
+		else if (entry & IND_DESTINATION) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1133: FILE: kernel/kexec.c:291:
+		}
+		else if (entry & IND_DONE) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1136: FILE: kernel/kexec.c:294:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1136: FILE: kernel/kexec.c:294:
+		else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1139: FILE: kernel/kexec.c:297:
+			if (page == destination) {
+				return ptr;
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: kernel/kexec.c:316:
+^I * To make it work we actually wind up with a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: kernel/kexec.c:321:
+^I * Invariants $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1168: FILE: kernel/kexec.c:326:
+^I * Result: Either a source page and a destination page $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1174: FILE: kernel/kexec.c:332:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: kernel/kexec.c:341:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1183: FILE: kernel/kexec.c:341:
+
+	

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1185: FILE: kernel/kexec.c:343:
+	if (!buffer) {
+		return -ENOMEM;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1192: FILE: kernel/kexec.c:350:
+		kimage_entry_t *limit;
+		if (entry & IND_DESTINATION) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1195: FILE: kernel/kexec.c:353:
+		}
+		else if (entry & IND_INDIRECTION) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1201: FILE: kernel/kexec.c:359:
+		if (!((entry & IND_SOURCE) | (entry & IND_INDIRECTION))) {
+			continue;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1207: FILE: kernel/kexec.c:365:
+^I^I/* See if a previous page has the current page as it's $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1214: FILE: kernel/kexec.c:372:
+ ^I^I^Ikimage_entry_t centry;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1214: FILE: kernel/kexec.c:372:
+ ^I^I^Ikimage_entry_t centry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1214: FILE: kernel/kexec.c:372:
+ ^I^I^Ikimage_entry_t centry;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1223: FILE: kernel/kexec.c:381:
+		if (!(entry & IND_SOURCE)) {
+			continue;
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1234: FILE: kernel/kexec.c:392:
+ ^I^I^Ikimage_entry_t centry;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1234: FILE: kernel/kexec.c:392:
+ ^I^I^Ikimage_entry_t centry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: kernel/kexec.c:392:
+ ^I^I^Ikimage_entry_t centry;$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1240: FILE: kernel/kexec.c:398:
+			*ptr = cpage | ( entry & ~PAGE_MASK);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1243: FILE: kernel/kexec.c:401:
+^I^I/* If the buffer is my destination page do the copy now $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1257: FILE: kernel/kexec.c:415:
+static int kimage_add_empty_pages(struct kimage *image,
+	unsigned long len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1261: FILE: kernel/kexec.c:419:
+	int result;
+	for(pos = 0; pos < len; pos += PAGE_SIZE) {

ERROR:SPACING: space required before the open parenthesis '('
#1261: FILE: kernel/kexec.c:419:
+	for(pos = 0; pos < len; pos += PAGE_SIZE) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1263: FILE: kernel/kexec.c:421:
+		char *page;
+		result = -ENOMEM;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1265: FILE: kernel/kexec.c:423:
+		if (!page) {
+			goto out;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1269: FILE: kernel/kexec.c:427:
+		if (result) {
+			goto out;
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1278: FILE: kernel/kexec.c:436:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1280: FILE: kernel/kexec.c:438:
+static int kimage_load_segment(struct kimage *image,
+	struct kexec_segment *segment)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1281: FILE: kernel/kexec.c:439:
+{^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1295: FILE: kernel/kexec.c:453:
+	if (result < 0) {
+		goto out;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1298: FILE: kernel/kexec.c:456:
+	for(offset = 0;  offset < segment->memsz; offset += PAGE_SIZE) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1301: FILE: kernel/kexec.c:459:
+		size_t size, leader;
+		page = (char *)__get_free_page(GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1307: FILE: kernel/kexec.c:465:
+		if (result < 0) {
+			goto out;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset == 0'
#1317: FILE: kernel/kexec.c:475:
+		if ((offset == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1317: FILE: kernel/kexec.c:475:
+		if ((offset == 0)) {
+			leader = mstart & ~PAGE_MASK;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1326: FILE: kernel/kexec.c:484:
+		if (size > (segment->bufsz - offset)) {
+			size = segment->bufsz - offset;
+		}

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1331: FILE: kernel/kexec.c:489:
+			result = (result < 0)?result : -EIO;
 			                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1343: FILE: kernel/kexec.c:501:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1344: FILE: kernel/kexec.c:502:
+/* do_kexec executes a new kernel $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: kernel/kexec.c:505:
+int do_kexec(unsigned long start, long nr_segments,
+	struct kexec_segment *arg_segments, struct kimage *image)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1353: FILE: kernel/kexec.c:511:
+^Iint result; $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1372: FILE: kernel/kexec.c:530:
+	if (result) {
+		goto out;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1376: FILE: kernel/kexec.c:534:
+	for(i = 0; i < nr_segments; i++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1377: FILE: kernel/kexec.c:535:
+		printk(KERN_EMERG "k_segment[%d].buf   = %p\n",   i, segments[i].buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1378: FILE: kernel/kexec.c:536:
+		printk(KERN_EMERG "k_segment[%d].bufsz = 0x%x\n", i, segments[i].bufsz);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1379: FILE: kernel/kexec.c:537:
+		printk(KERN_EMERG "k_segment[%d].mem   = %p\n",   i, segments[i].mem);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1380: FILE: kernel/kexec.c:538:
+		printk(KERN_EMERG "k_segment[%d].memsz = 0x%x\n", i, segments[i].memsz);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1382: FILE: kernel/kexec.c:540:
+	printk(KERN_EMERG "k_entry       = 0x%08lx\n", start);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1383: FILE: kernel/kexec.c:541:
+	printk(KERN_EMERG "k_nr_segments = %d\n", nr_segments);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1384: FILE: kernel/kexec.c:542:
+	printk(KERN_EMERG "k_segments    = %p\n", segments);

ERROR:SPACING: space required before the open parenthesis '('
#1389: FILE: kernel/kexec.c:547:
+	for(i = 0; i < nr_segments; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1391: FILE: kernel/kexec.c:549:
+		if (result) {
+			goto out;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1395: FILE: kernel/kexec.c:553:
+^I$

WARNING:TYPO_SPELLING: 'continguous' may be misspelled - perhaps 'contiguous'?
#1403: FILE: kernel/kexec.c:561:
+	 * find a continguous area of ram, that is not one
 	          ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'abitrary' may be misspelled - perhaps 'arbitrary'?
#1408: FILE: kernel/kexec.c:566:
+	 * backing store so we allocate abitrary source pages.
 	                                ^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1417: FILE: kernel/kexec.c:575:
+	result = kimage_get_unused_area(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1420: FILE: kernel/kexec.c:578:
+^Iif (result) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1425: FILE: kernel/kexec.c:583:
+^I * work with. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1428: FILE: kernel/kexec.c:586:
+^Iif (result) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1447: FILE: kernel/kexec.c:605:
+^I/* Now hide the extra source pages for the reboot code buffer $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1463: FILE: kernel/kexec.c:621:
+	if (segments)	kfree(segments);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1486: FILE: kernel/sys.c:438:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1487: FILE: kernel/sys.c:439:
+ * This call breaks up into three pieces.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1504: FILE: kernel/sys.c:456:
+asmlinkage long sys_kexec(unsigned long entry, long nr_segments, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: kernel/sys.c:457:
+asmlinkage long sys_kexec(unsigned long entry, long nr_segments, 
+	struct kexec_segment *segments)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1510: FILE: kernel/sys.c:462:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1523: FILE: kernel/sys.c:475:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1528: FILE: kernel/sys.c:480:
+	printk(KERN_EMERG "kexecing image\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1533: FILE: kernel/sys.c:485:
+^Ireturn -EINVAL; $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1537: FILE: kernel/sys.c:489:
+asmlinkage long sys_kexec(unsigned long entry, long nr_segments,
+	struct kexec_segment *segments)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1539: FILE: kernel/sys.c:491:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 84 errors, 91 warnings, 58 checks, 1360 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421721.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
