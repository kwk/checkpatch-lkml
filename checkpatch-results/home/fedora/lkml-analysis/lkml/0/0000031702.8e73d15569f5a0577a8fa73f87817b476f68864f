WARNING:REPEATED_WORD: Possible repeated word: 'the'
#29: 
This patch adds NUMA support to the the spufs scheduler.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#197: FILE: arch/powerpc/platforms/cell/spufs/sched.c:53:
+	struct mutex active_mutex[MAX_NUMNODES];

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#311: FILE: arch/powerpc/platforms/cell/spufs/sched.c:72:
+	int nr = (NR_CPUS > 1) ? NR_CPUS : NR_CPUS + 1;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#326: FILE: arch/powerpc/platforms/cell/spufs/sched.c:80:
+	pr_debug("%s: pid=%d SPU=%d NODE=%d\n", __FUNCTION__, current->pid,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#342: FILE: arch/powerpc/platforms/cell/spufs/sched.c:104:
+	pr_debug("%s: unbind pid=%d SPU=%d NODE=%d\n", __FUNCTION__,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: arch/powerpc/platforms/cell/spufs/sched.c:124:
+static inline void spu_add_wq(wait_queue_head_t * wq, wait_queue_t * wait,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#352: FILE: arch/powerpc/platforms/cell/spufs/sched.c:124:
+static inline void spu_add_wq(wait_queue_head_t * wq, wait_queue_t * wait,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: arch/powerpc/platforms/cell/spufs/sched.c:131:
+static inline void spu_del_wq(wait_queue_head_t * wq, wait_queue_t * wait,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: arch/powerpc/platforms/cell/spufs/sched.c:131:
+static inline void spu_del_wq(wait_queue_head_t * wq, wait_queue_t * wait,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#463: FILE: arch/powerpc/platforms/cell/spufs/sched.c:160:
+		pr_debug("%s: pid=%d prio=%d\n", __FUNCTION__,

WARNING:LINE_SPACING: Missing a blank line after declarations
#484: FILE: arch/powerpc/platforms/cell/spufs/sched.c:172:
+	int best = sched_find_first_bit(spu_prio->bitmap);
+	if (best < MAX_PRIO) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#486: FILE: arch/powerpc/platforms/cell/spufs/sched.c:174:
+		wait_queue_head_t *wq = &spu_prio->waitq[best];
+		wake_up_interruptible_nr(wq, 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "spu"
#590: FILE: arch/powerpc/platforms/cell/spufs/sched.c:248:
+		if (spu != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx->spu"
#591: FILE: arch/powerpc/platforms/cell/spufs/sched.c:249:
+			if (ctx->spu != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#638: FILE: arch/powerpc/platforms/cell/spufs/sched.c:290:
+		if ((spu = ctx->spu) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#640: FILE: arch/powerpc/platforms/cell/spufs/sched.c:292:
+			int best = sched_find_first_bit(spu_prio->bitmap);
+			if (best < MAX_PRIO) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#642: FILE: arch/powerpc/platforms/cell/spufs/sched.c:294:
+					 __FUNCTION__, spu->number, spu->node);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*spu_prio)...) over kzalloc(sizeof(struct spu_prio_array)...)
#666: FILE: arch/powerpc/platforms/cell/spufs/sched.c:312:
+	spu_prio = kzalloc(sizeof(struct spu_prio_array), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#668: FILE: arch/powerpc/platforms/cell/spufs/sched.c:314:
+		printk(KERN_WARNING "%s: Unable to allocate priority queue.\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#668: FILE: arch/powerpc/platforms/cell/spufs/sched.c:314:
+	if (!spu_prio) {
+		printk(KERN_WARNING "%s: Unable to allocate priority queue.\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031702.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 11 warnings, 4 checks, 671 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000031702.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
