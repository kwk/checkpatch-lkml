WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: fs/Kconfig:1883:
+config AFS_FSCACHE
+	bool "Provide AFS client caching support"
+	depends on AFS_FS && FSCACHE && EXPERIMENTAL
+	help
+	  Say Y here if you want AFS data to be cached locally on through the
+	  generic filesystem cache manager
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#184: FILE: fs/afs/cell.c:539:
+	uint16_t klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#209: FILE: fs/afs/cell.c:555:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#220: FILE: fs/afs/cell.c:562:
+	uint16_t dlen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#242: FILE: fs/afs/cell.c:579:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: fs/afs/file.c:36:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: fs/afs/file.c:36:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#406: FILE: fs/afs/file.c:39:
+static int afs_file_readpages(struct file *filp, struct address_space *mapping,
                                            ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#407: FILE: fs/afs/file.c:40:
+			      struct list_head *pages, unsigned nr_pages);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#415: FILE: fs/afs/file.c:48:
+struct file_operations afs_file_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#431: FILE: fs/afs/file.c:64:
+static struct vm_operations_struct afs_fs_vm_operations = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#489: FILE: fs/afs/file.c:120:
+	 * modified */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INDENTED_LABEL: labels should not be indented
#551: FILE: fs/afs/file.c:174:
+	go_on:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#592: FILE: fs/afs/file.c:208:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#622: FILE: fs/afs/file.c:241:
+static int afs_file_readpages(struct file *filp, struct address_space *mapping,
                                            ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#623: FILE: fs/afs/file.c:242:
+			      struct list_head *pages, unsigned nr_pages)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#627: FILE: fs/afs/file.c:245:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#629: FILE: fs/afs/file.c:247:
+	unsigned page_idx;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#656: FILE: fs/afs/file.c:271:
+		BUG_ON(!list_empty(pages));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#657: FILE: fs/afs/file.c:272:
+		BUG_ON(nr_pages != 0);

CHECK:SPACING: No space is necessary after a cast
#674: FILE: fs/afs/file.c:289:
+			       (void *) afs_file_readpage, NULL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#810: FILE: fs/afs/inode.c:123:
+				printk("Negative\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#884: FILE: fs/afs/internal.h:24:
+#define __kdbg(FMT, a...)	printk("[%05d] "FMT"\n", current->pid , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#884: FILE: fs/afs/internal.h:24:
+#define __kdbg(FMT, a...)	printk("[%05d] "FMT"\n", current->pid , ## a)
                          	                                      ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#884: FILE: fs/afs/internal.h:24:
+#define __kdbg(FMT, a...)	printk("[%05d] "FMT"\n", current->pid , ## a)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#885: FILE: fs/afs/internal.h:25:
+#define kenter(FMT, a...)	__kdbg("==> %s("FMT")", __FUNCTION__ , ## a)
                          	                                     ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#885: FILE: fs/afs/internal.h:25:
+#define kenter(FMT, a...)	__kdbg("==> %s("FMT")", __FUNCTION__ , ## a)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#885: FILE: fs/afs/internal.h:25:
+#define kenter(FMT, a...)	__kdbg("==> %s("FMT")", __FUNCTION__ , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#886: FILE: fs/afs/internal.h:26:
+#define kleave(FMT, a...)	__kdbg("<== %s()"FMT, __FUNCTION__ , ## a)
                          	                                   ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#886: FILE: fs/afs/internal.h:26:
+#define kleave(FMT, a...)	__kdbg("<== %s()"FMT, __FUNCTION__ , ## a)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#886: FILE: fs/afs/internal.h:26:
+#define kleave(FMT, a...)	__kdbg("<== %s()"FMT, __FUNCTION__ , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#887: FILE: fs/afs/internal.h:27:
+#define kdebug(FMT, a...)	__kdbg(FMT , ## a)
                          	           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#888: FILE: fs/afs/internal.h:28:
+#define kproto(FMT, a...)	__kdbg("### "FMT , ## a)
                          	                 ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#888: FILE: fs/afs/internal.h:28:
+#define kproto(FMT, a...)	__kdbg("### "FMT , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#889: FILE: fs/afs/internal.h:29:
+#define knet(FMT, a...)		__kdbg(FMT , ## a)
                        		           ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1220: FILE: fs/afs/vlocation.c:903:
+	uint16_t klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1250: FILE: fs/afs/vlocation.c:921:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1261: FILE: fs/afs/vlocation.c:928:
+	uint16_t dlen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1281: FILE: fs/afs/vlocation.c:947:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1290: FILE: fs/afs/vlocation.c:956:
+	uint16_t dlen;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1303: FILE: fs/afs/vlocation.c:969:
+	 * VL record from the cache */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1411: FILE: fs/afs/vnode.c:368:
+	uint16_t klen;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1425: FILE: fs/afs/vnode.c:370:
+	_enter("{%x,%x,%Lx},%p,%u",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1451: FILE: fs/afs/vnode.c:396:
+	_enter("{%x,%x,%Lx},",

CHECK:SPACING: No space is necessary after a cast
#1454: FILE: fs/afs/vnode.c:399:
+	*size = i_size_read((struct inode *) &vnode->vfs_inode);

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1461: FILE: fs/afs/vnode.c:406:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1468: FILE: fs/afs/vnode.c:413:
+	uint16_t dlen;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1470: FILE: fs/afs/vnode.c:415:
+	_enter("{%x,%x,%Lx},%p,%u",

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1494: FILE: fs/afs/vnode.c:435:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1502: FILE: fs/afs/vnode.c:443:
+	uint16_t dlen;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1504: FILE: fs/afs/vnode.c:445:
+	_enter("{%x,%x,%Lx},%p,%u",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1520: FILE: fs/afs/vnode.c:461:
+		unsigned unique;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1600: FILE: fs/afs/vnode.c:529:
+	_enter("{%x,%x,%Lx}",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1743: FILE: fs/afs/volume.c:483:
+static uint16_t afs_volume_cache_get_key(const void *cookie_netfs_data,
+					void *buffer, uint16_t bufmax)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1748: FILE: fs/afs/volume.c:486:
+	uint16_t klen;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134773.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 32 warnings, 16 checks, 1636 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134773.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
