WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#26: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: arch/frv/kernel/sysctl.c:1:
+/* sysctl.c: implementation of /proc/sys files relating to FRV specifically

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#56: FILE: arch/frv/kernel/sysctl.c:17:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#71: FILE: arch/frv/kernel/sysctl.c:32:
+	asm volatile("	dcef	@(gr0,gr0),#1	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#72: FILE: arch/frv/kernel/sysctl.c:33:
+		     "	membar			\n"

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#90: FILE: arch/frv/kernel/sysctl.c:51:
+static int procctl_frv_cachemode(ctl_table *table, int write, struct file *filp,
                                                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#164: FILE: arch/frv/kernel/sysctl.c:125:
+static int procctl_frv_pin_cxnr(ctl_table *table, int write, struct file *filp,
                                                                           ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#186: FILE: arch/frv/kernel/sysctl.c:147:
+		pid = simple_strtoul(buff, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#217: FILE: arch/frv/kernel/sysctl.c:178:
+static struct ctl_table frv_table[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#231: FILE: arch/frv/kernel/sysctl.c:192:
+static struct ctl_table frv_dir_table[] =
+{

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#245: FILE: arch/frv/kernel/sysctl.c:206:
+__initcall(frv_sysctl_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#250: FILE: arch/frv/kernel/sys_frv.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#273: FILE: arch/frv/kernel/sys_frv.c:24:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: arch/frv/kernel/sys_frv.c:31:
+asmlinkage long sys_pipe(unsigned long * fildes)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#287: FILE: arch/frv/kernel/sys_frv.c:38:
+		if (copy_to_user(fildes, fd, 2*sizeof(int)))
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: arch/frv/kernel/sys_frv.c:49:
+	struct file * file = NULL;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#308: FILE: arch/frv/kernel/sys_frv.c:59:
+	/* As with sparc32, make sure the shift for mmap2 is constant
+	   (12), no matter what PAGE_SIZE we have.... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#308: FILE: arch/frv/kernel/sys_frv.c:59:
+	   (12), no matter what PAGE_SIZE we have.... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#311: FILE: arch/frv/kernel/sys_frv.c:62:
+	/* But unlike sparc32, don't just silently break if we're
+	   trying to map something we can't */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#311: FILE: arch/frv/kernel/sys_frv.c:62:
+	   trying to map something we can't */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#312: FILE: arch/frv/kernel/sys_frv.c:63:
+	if (pgoff & ((1<<(PAGE_SHIFT-12))-1))
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: arch/frv/kernel/sys_frv.c:63:
+	if (pgoff & ((1<<(PAGE_SHIFT-12))-1))
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: arch/frv/kernel/sys_frv.c:63:
+	if (pgoff & ((1<<(PAGE_SHIFT-12))-1))
 	                                 ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#327: FILE: arch/frv/kernel/sys_frv.c:78:
+#if 0 /* DAVIDM - do we want this */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#340: FILE: arch/frv/kernel/sys_frv.c:91:
+	struct file * file = NULL;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#397: FILE: arch/frv/kernel/sys_frv.c:148:
+		return sys_semget (first, second, third);

WARNING:LINE_SPACING: Missing a blank line after declarations
#400: FILE: arch/frv/kernel/sys_frv.c:151:
+		union semun fourth;
+		if (!ptr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#404: FILE: arch/frv/kernel/sys_frv.c:155:
+		return sys_semctl (first, second, third, fourth);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: arch/frv/kernel/sys_frv.c:159:
+^I^Ireturn sys_msgsnd (first, (struct msgbuf __user *) ptr, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#408: FILE: arch/frv/kernel/sys_frv.c:159:
+		return sys_msgsnd (first, (struct msgbuf __user *) ptr, 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#408: FILE: arch/frv/kernel/sys_frv.c:159:
+		return sys_msgsnd (first, (struct msgbuf __user *) ptr, 

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: arch/frv/kernel/sys_frv.c:165:
+			struct ipc_kludge tmp;
+			if (!ptr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: arch/frv/kernel/sys_frv.c:167:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: arch/frv/kernel/sys_frv.c:169:
+^I^I^I^I^I   (struct ipc_kludge __user *) ptr, $

CHECK:SPACING: No space is necessary after a cast
#418: FILE: arch/frv/kernel/sys_frv.c:169:
+					   (struct ipc_kludge __user *) ptr, 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#419: FILE: arch/frv/kernel/sys_frv.c:170:
+					   sizeof (tmp)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#421: FILE: arch/frv/kernel/sys_frv.c:172:
+			return sys_msgrcv (first, tmp.msgp, second,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#425: FILE: arch/frv/kernel/sys_frv.c:176:
+			return sys_msgrcv (first,

CHECK:SPACING: No space is necessary after a cast
#426: FILE: arch/frv/kernel/sys_frv.c:177:
+					   (struct msgbuf __user *) ptr,

CHECK:SPACING: No space is necessary after a cast
#430: FILE: arch/frv/kernel/sys_frv.c:181:
+		return sys_msgget ((key_t) first, second);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#430: FILE: arch/frv/kernel/sys_frv.c:181:
+		return sys_msgget ((key_t) first, second);

CHECK:SPACING: No space is necessary after a cast
#432: FILE: arch/frv/kernel/sys_frv.c:183:
+		return sys_msgctl (first, second, (struct msqid_ds __user *) ptr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#432: FILE: arch/frv/kernel/sys_frv.c:183:
+		return sys_msgctl (first, second, (struct msqid_ds __user *) ptr);

CHECK:SPACING: No space is necessary after a cast
#438: FILE: arch/frv/kernel/sys_frv.c:189:
+			ret = do_shmat (first, (char __user *) ptr, second, &raddr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#438: FILE: arch/frv/kernel/sys_frv.c:189:
+			ulong raddr;
+			ret = do_shmat (first, (char __user *) ptr, second, &raddr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#438: FILE: arch/frv/kernel/sys_frv.c:189:
+			ret = do_shmat (first, (char __user *) ptr, second, &raddr);

CHECK:SPACING: No space is necessary after a cast
#441: FILE: arch/frv/kernel/sys_frv.c:192:
+			return put_user (raddr, (ulong __user *) third);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#441: FILE: arch/frv/kernel/sys_frv.c:192:
+			return put_user (raddr, (ulong __user *) third);

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#446: FILE: arch/frv/kernel/sys_frv.c:197:
+			/* The "(ulong *) third" is valid _only_ because of the kernel segment thing */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#447: FILE: arch/frv/kernel/sys_frv.c:198:
+			return do_shmat (first, (char __user *) ptr, second, (ulong *) third);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#447: FILE: arch/frv/kernel/sys_frv.c:198:
+			return do_shmat (first, (char __user *) ptr, second, (ulong *) third);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: arch/frv/kernel/sys_frv.c:200:
+^Icase SHMDT: $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#450: FILE: arch/frv/kernel/sys_frv.c:201:
+		return sys_shmdt ((char __user *)ptr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#452: FILE: arch/frv/kernel/sys_frv.c:203:
+		return sys_shmget (first, second, third);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#454: FILE: arch/frv/kernel/sys_frv.c:205:
+		return sys_shmctl (first, second,

CHECK:SPACING: No space is necessary after a cast
#455: FILE: arch/frv/kernel/sys_frv.c:206:
+				   (struct shmid_ds __user *) ptr);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#457: FILE: arch/frv/kernel/sys_frv.c:208:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#464: FILE: arch/frv/kernel/time.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#488: FILE: arch/frv/kernel/time.c:25:
+#include <asm/io.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#498: FILE: arch/frv/kernel/time.c:35:
+extern unsigned long wall_jiffies;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#528: FILE: arch/frv/kernel/time.c:65:
+static irqreturn_t timer_interrupt(int irq, void *dummy, struct pt_regs * regs)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#531: FILE: arch/frv/kernel/time.c:68:
+	static long last_rtc_update = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: No space is necessary after a cast
#553: FILE: arch/frv/kernel/time.c:90:
+	    (xtime.tv_nsec / 1000) >= 500000 - ((unsigned) TICK_SIZE) / 2 &&

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#553: FILE: arch/frv/kernel/time.c:90:
+	    (xtime.tv_nsec / 1000) >= 500000 - ((unsigned) TICK_SIZE) / 2 &&

CHECK:SPACING: No space is necessary after a cast
#554: FILE: arch/frv/kernel/time.c:91:
+	    (xtime.tv_nsec / 1000) <= 500000 + ((unsigned) TICK_SIZE) / 2

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#554: FILE: arch/frv/kernel/time.c:91:
+	    (xtime.tv_nsec / 1000) <= 500000 + ((unsigned) TICK_SIZE) / 2

WARNING:LINE_SPACING: Missing a blank line after declarations
#564: FILE: arch/frv/kernel/time.c:101:
+	static unsigned short n;
+	n++;

CHECK:CAMELCASE: Avoid CamelCase: <__set_TxCKSL_DATA>
#582: FILE: arch/frv/kernel/time.c:119:
+	__set_TxCKSL_DATA(0, prediv);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#592: FILE: arch/frv/kernel/time.c:129:
+	extern void arch_gettod(int *year, int *mon, int *day, int *hour, int *min, int *sec);

WARNING:TYPO_SPELLING: 'stange' may be misspelled - perhaps 'strange'?
#596: FILE: arch/frv/kernel/time.c:133:
+	/* very stange errors */
 	        ^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#598: FILE: arch/frv/kernel/time.c:135:
+	mon = day = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#599: FILE: arch/frv/kernel/time.c:136:
+	hour = min = sec = 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#600: FILE: arch/frv/kernel/time.c:137:
+	arch_gettod (&year, &mon, &day, &hour, &min, &sec);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#602: FILE: arch/frv/kernel/time.c:139:
+	if ((year += 1900) < 1970)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#635: FILE: arch/frv/kernel/time.c:172:
+		if (unlikely(time_adjust < 0)) {
[...]
+		else if (unlikely(lost))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#642: FILE: arch/frv/kernel/time.c:179:
+		}
+		else if (unlikely(lost))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#702: FILE: arch/frv/kernel/traps.c:1:
+/* traps.c: high-level exception handler for FR-V

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#727: FILE: arch/frv/kernel/traps.c:26:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#728: FILE: arch/frv/kernel/traps.c:27:
+#include <asm/pgtable.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#734: FILE: arch/frv/kernel/traps.c:33:
+extern asmlinkage void __break_hijack_kernel_event(void);

CHECK:SPACING: No space is necessary after a cast
#752: FILE: arch/frv/kernel/traps.c:51:
+	info.si_addr	= (void *) ((epcr0 & EPCR0_V) ? (epcr0 & EPCR0_PC) : __frame->pc);

CHECK:SPACING: No space is necessary after a cast
#776: FILE: arch/frv/kernel/traps.c:75:
+	info.si_addr	= (void *) ((epcr0 & EPCR0_PC) ? (epcr0 & EPCR0_PC) : __frame->pc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: arch/frv/kernel/traps.c:104:
+ * $

CHECK:SPACING: No space is necessary after a cast
#819: FILE: arch/frv/kernel/traps.c:118:
+	info.si_addr	= (void *) __frame->pc;

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC>
#837: FILE: arch/frv/kernel/traps.c:136:
+	if ((esr0 & ESRx_EC) == ESRx_EC_DATA_ACCESS)

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_EC_DATA_ACCESS>
#837: FILE: arch/frv/kernel/traps.c:136:
+	if ((esr0 & ESRx_EC) == ESRx_EC_DATA_ACCESS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#841: FILE: arch/frv/kernel/traps.c:140:
+	if ((fixup = search_exception_table(__frame->pc)) != 0) {

CHECK:CAMELCASE: Avoid CamelCase: <ESRx_VALID>
#858: FILE: arch/frv/kernel/traps.c:157:
+	if ((esr0 & (ESRx_VALID | ESR0_EAV)) == (ESRx_VALID | ESR0_EAV))

CHECK:SPACING: No space is necessary after a cast
#859: FILE: arch/frv/kernel/traps.c:158:
+		info.si_addr = (void *) ear0;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#889: FILE: arch/frv/kernel/traps.c:188:
+		(((esr15 & (ESRx_VALID|ESR15_EAV)) == (ESRx_VALID|ESR15_EAV)) ? ear15 : 0);
 		                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#889: FILE: arch/frv/kernel/traps.c:188:
+		(((esr15 & (ESRx_VALID|ESR15_EAV)) == (ESRx_VALID|ESR15_EAV)) ? ear15 : 0);
 		                                                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#903: FILE: arch/frv/kernel/traps.c:202:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: arch/frv/kernel/traps.c:207:
+ * $

CHECK:SPACING: No space is necessary after a cast
#922: FILE: arch/frv/kernel/traps.c:221:
+	info.si_addr	= (void *) __frame->pc;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#929: FILE: arch/frv/kernel/traps.c:228:
+ * $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#942: FILE: arch/frv/kernel/traps.c:241:
+	BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#960: FILE: arch/frv/kernel/traps.c:259:
+	printk("CONTEXT: stack=0x%lx frame=0x%p LR=0x%lx RET=0x%lx\n",

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#964: FILE: arch/frv/kernel/traps.c:263:
+static const char *regnames[] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#981: FILE: arch/frv/kernel/traps.c:280:
+	uint32_t *reg;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#984: FILE: arch/frv/kernel/traps.c:283:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#986: FILE: arch/frv/kernel/traps.c:285:
+	printk("Frame: @%08x [%s]\n",

CHECK:SPACING: No space is necessary after a cast
#987: FILE: arch/frv/kernel/traps.c:286:
+	       (uint32_t) regs,

CHECK:SPACING: No space is necessary after a cast
#990: FILE: arch/frv/kernel/traps.c:289:
+	reg = (uint32_t *) regs;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#992: FILE: arch/frv/kernel/traps.c:291:
+		printk("%s %08x", regnames[loop + 0], reg[loop + 0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#995: FILE: arch/frv/kernel/traps.c:294:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#997: FILE: arch/frv/kernel/traps.c:296:
+			printk(" | ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1000: FILE: arch/frv/kernel/traps.c:299:
+	printk("Process %s (pid: %d)\n", current->comm, current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1016: FILE: arch/frv/kernel/traps.c:315:
+	printk("\n===================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1017: FILE: arch/frv/kernel/traps.c:316:
+	printk("%s\n", buffer);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1030: FILE: arch/frv/kernel/traps.c:329:
+	uint32_t *reg;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1034: FILE: arch/frv/kernel/traps.c:333:
+	printk("<-- %s Frame: @%p -->\n",

CHECK:SPACING: No space is necessary after a cast
#1038: FILE: arch/frv/kernel/traps.c:337:
+	reg = (uint32_t *) frame;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1040: FILE: arch/frv/kernel/traps.c:339:
+		printk("%s %08x", regnames[loop + 0], reg[loop + 0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1043: FILE: arch/frv/kernel/traps.c:342:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1045: FILE: arch/frv/kernel/traps.c:344:
+			printk(" | ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1048: FILE: arch/frv/kernel/traps.c:347:
+	printk("--------\n");

CHECK:SPACING: No space is necessary after a cast
#1061: FILE: arch/frv/kernel/traps.c:360:
+	base = ((((unsigned long) frame) + 8191) & ~8191) - sizeof(struct user_context);

CHECK:SPACING: No space is necessary after a cast
#1062: FILE: arch/frv/kernel/traps.c:361:
+	frame0 = (struct pt_regs *) base;

CHECK:SPACING: No space is necessary after a cast
#1066: FILE: arch/frv/kernel/traps.c:365:
+		stop = (unsigned long) frame;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1069: FILE: arch/frv/kernel/traps.c:368:
+	printk("\nProcess %s (pid: %d)\n\n", current->comm, current->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1077: FILE: arch/frv/kernel/traps.c:376:
+				printk(" %04lx :", tos & 0xffff);

CHECK:SPACING: No space is necessary after a cast
#1079: FILE: arch/frv/kernel/traps.c:378:
+			printk(" %08lx", *(unsigned long *) tos);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1079: FILE: arch/frv/kernel/traps.c:378:
+			printk(" %08lx", *(unsigned long *) tos);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1084: FILE: arch/frv/kernel/traps.c:383:
+				printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1090: FILE: arch/frv/kernel/traps.c:389:
+			printk("\n");

CHECK:SPACING: No space is necessary after a cast
#1097: FILE: arch/frv/kernel/traps.c:396:
+		if (((unsigned long) frame) + sizeof(*frame) != tos) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1098: FILE: arch/frv/kernel/traps.c:397:
+			printk("-- TOS %08lx does not follow frame %p --\n",

CHECK:SPACING: No space is necessary after a cast
#1106: FILE: arch/frv/kernel/traps.c:405:
+		stop = (unsigned long) frame->next_frame;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1112: FILE: arch/frv/kernel/traps.c:411:
+			printk("-- next_frame %08lx is invalid (range %08lx-%08lx) --\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1128: FILE: arch/frv/kernel/traps.c:427:
+ * initialise traps $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1130: FILE: arch/frv/kernel/traps.c:429:
+void __init trap_init (void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1137: FILE: arch/frv/kernel/uaccess.c:1:
+/* uaccess.c: userspace access functions

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1149: FILE: arch/frv/kernel/uaccess.c:13:
+#include <asm/uaccess.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1162: FILE: arch/frv/kernel/uaccess.c:26:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#1167: FILE: arch/frv/kernel/uaccess.c:31:
+	if ((unsigned long) src < memory_start)

CHECK:SPACING: No space is necessary after a cast
#1171: FILE: arch/frv/kernel/uaccess.c:35:
+	if ((unsigned long) src >= get_addr_limit())

CHECK:SPACING: No space is necessary after a cast
#1174: FILE: arch/frv/kernel/uaccess.c:38:
+	max = get_addr_limit() - (unsigned long) src;

CHECK:SPACING: No space is necessary after a cast
#1175: FILE: arch/frv/kernel/uaccess.c:39:
+	if ((unsigned long) count > max) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1179: FILE: arch/frv/kernel/uaccess.c:43:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1212: FILE: arch/frv/kernel/uaccess.c:76:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#1215: FILE: arch/frv/kernel/uaccess.c:79:
+	if ((unsigned long) src < memory_start)

CHECK:SPACING: No space is necessary after a cast
#1219: FILE: arch/frv/kernel/uaccess.c:83:
+	if ((unsigned long) src >= get_addr_limit())

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232857.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 71 warnings, 52 checks, 1176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232857.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
