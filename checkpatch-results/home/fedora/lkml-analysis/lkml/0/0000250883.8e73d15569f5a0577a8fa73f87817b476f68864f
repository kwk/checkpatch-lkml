WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#51: FILE: include/asm-m32r/uaccess.h:5:
+ *  linux/include/asm-m32r/uaccess.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/asm-m32r/uaccess.h:112:
+#define access_ok(type,addr,size) (likely(__range_ok(addr,size) == 0))
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/asm-m32r/uaccess.h:112:
+#define access_ok(type,addr,size) (likely(__range_ok(addr,size) == 0))
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: include/asm-m32r/uaccess.h:112:
+#define access_ok(type,addr,size) (likely(__range_ok(addr,size) == 0))
                                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: include/asm-m32r/uaccess.h:268:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#202: FILE: include/asm-m32r/uaccess.h:292:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: include/asm-m32r/uaccess.h:386:
+#define __put_user_size(x,ptr,size,retval)				\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: include/asm-m32r/uaccess.h:386:
+#define __put_user_size(x,ptr,size,retval)				\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: include/asm-m32r/uaccess.h:386:
+#define __put_user_size(x,ptr,size,retval)				\
                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#278: FILE: include/asm-m32r/uaccess.h:386:
+#define __put_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\
+	  default: __put_user_bad();					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#278: FILE: include/asm-m32r/uaccess.h:386:
+#define __put_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\
+	  default: __put_user_bad();					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'retval' - possible side-effects?
#278: FILE: include/asm-m32r/uaccess.h:386:
+#define __put_user_size(x,ptr,size,retval)				\
+do {									\
+	retval = 0;							\
+	__chk_user_ptr(ptr);						\
+	switch (size) {							\
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\
+	  default: __put_user_bad();					\
+	}								\
+} while (0)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#282: FILE: include/asm-m32r/uaccess.h:390:
+	switch (size) {							\
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\
+	  default: __put_user_bad();					\

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#283: FILE: include/asm-m32r/uaccess.h:391:
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: include/asm-m32r/uaccess.h:391:
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: include/asm-m32r/uaccess.h:391:
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: include/asm-m32r/uaccess.h:391:
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#283: FILE: include/asm-m32r/uaccess.h:391:
+	  case 1: __put_user_asm(x,ptr,retval,"b"); break;		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TABSTOP: Statements should start on a tabstop
#284: FILE: include/asm-m32r/uaccess.h:392:
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: include/asm-m32r/uaccess.h:392:
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: include/asm-m32r/uaccess.h:392:
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: include/asm-m32r/uaccess.h:392:
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#284: FILE: include/asm-m32r/uaccess.h:392:
+	  case 2: __put_user_asm(x,ptr,retval,"h"); break;		\

WARNING:TABSTOP: Statements should start on a tabstop
#285: FILE: include/asm-m32r/uaccess.h:393:
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: include/asm-m32r/uaccess.h:393:
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: include/asm-m32r/uaccess.h:393:
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: include/asm-m32r/uaccess.h:393:
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\
 	                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#285: FILE: include/asm-m32r/uaccess.h:393:
+	  case 4: __put_user_asm(x,ptr,retval,""); break;		\

WARNING:TABSTOP: Statements should start on a tabstop
#286: FILE: include/asm-m32r/uaccess.h:394:
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: include/asm-m32r/uaccess.h:394:
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: include/asm-m32r/uaccess.h:394:
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\
 	                                                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#286: FILE: include/asm-m32r/uaccess.h:394:
+	  case 8: __put_user_u64((__typeof__(*ptr))(x),ptr,retval); break;\

WARNING:TABSTOP: Statements should start on a tabstop
#287: FILE: include/asm-m32r/uaccess.h:395:
+	  default: __put_user_bad();					\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#287: FILE: include/asm-m32r/uaccess.h:395:
+	  default: __put_user_bad();					\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#299: FILE: include/asm-m32r/uaccess.h:407:
+#define __put_user_asm(x, addr, err, itype)				\
+	__asm__ __volatile__(						\
+		"	.fillinsn\n"					\
+		"1:	st"itype" %1,@%2\n"				\
+		"	.fillinsn\n"					\
+		"2:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"	.balign 4\n"					\
+		"3:	ldi %0,%3\n"					\
+		"	seth r14,#high(2b)\n"				\
+		"	or3 r14,r14,#low(2b)\n"				\
+		"	jmp r14\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.balign 4\n"					\
+		"	.long 1b,3b\n"					\
+		".previous"						\
+		: "=r"(err)						\
+		: "r"(x), "r"(addr), "i"(-EFAULT), "0"(err)		\
+		: "r14", "memory")

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#299: FILE: include/asm-m32r/uaccess.h:407:
+#define __put_user_asm(x, addr, err, itype)				\
+	__asm__ __volatile__(						\
+		"	.fillinsn\n"					\
+		"1:	st"itype" %1,@%2\n"				\
+		"	.fillinsn\n"					\
+		"2:\n"							\
+		".section .fixup,\"ax\"\n"				\
+		"	.balign 4\n"					\
+		"3:	ldi %0,%3\n"					\
+		"	seth r14,#high(2b)\n"				\
+		"	or3 r14,r14,#low(2b)\n"				\
+		"	jmp r14\n"					\
+		".previous\n"						\
+		".section __ex_table,\"a\"\n"				\
+		"	.balign 4\n"					\
+		"	.long 1b,3b\n"					\
+		".previous"						\
+		: "=r"(err)						\
+		: "r"(x), "r"(addr), "i"(-EFAULT), "0"(err)		\
+		: "r14", "memory")

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#302: FILE: include/asm-m32r/uaccess.h:410:
+		"1:	st"itype" %1,@%2\n"				\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: include/asm-m32r/uaccess.h:608:
+static inline unsigned long __generic_copy_from_user_nocheck(void *to,
 	const void __user *from, unsigned long n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: include/asm-m32r/uaccess.h:615:
+static inline unsigned long __generic_copy_to_user_nocheck(void __user *to,
 	const void *from, unsigned long n)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: include/asm-m32r/uaccess.h:638:
+#define __copy_to_user(to,from,n)			\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#372: FILE: include/asm-m32r/uaccess.h:638:
+#define __copy_to_user(to,from,n)			\
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#373: FILE: include/asm-m32r/uaccess.h:639:
+	__generic_copy_to_user_nocheck((to),(from),(n))
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#373: FILE: include/asm-m32r/uaccess.h:639:
+	__generic_copy_to_user_nocheck((to),(from),(n))
 	                                          ^

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#398: FILE: include/asm-m32r/uaccess.h:664:
+ * __copy_from_user: - Copy a block of data from user space, with less checking. * @to:   Destination address, in kernel space.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: include/asm-m32r/uaccess.h:679:
+#define __copy_from_user(to,from,n)			\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: include/asm-m32r/uaccess.h:679:
+#define __copy_from_user(to,from,n)			\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: include/asm-m32r/uaccess.h:680:
+	__generic_copy_from_user_nocheck((to),(from),(n))
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: include/asm-m32r/uaccess.h:680:
+	__generic_copy_from_user_nocheck((to),(from),(n))
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: include/asm-m32r/uaccess.h:701:
+__generic_copy_from_user((to),(from),(n));	\
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#436: FILE: include/asm-m32r/uaccess.h:701:
+__generic_copy_from_user((to),(from),(n));	\
                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: include/asm-m32r/uaccess.h:704:
+long __must_check strncpy_from_user(char *dst, const char __user *src, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: include/asm-m32r/uaccess.h:705:
+long __must_check strncpy_from_user(char *dst, const char __user *src, 
+				long count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: include/asm-m32r/uaccess.h:706:
+long __must_check __strncpy_from_user(char *dst, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: include/asm-m32r/uaccess.h:707:
+long __must_check __strncpy_from_user(char *dst, 
+				const char __user *src, long count);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250883.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 7 warnings, 11 checks, 440 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250883.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
