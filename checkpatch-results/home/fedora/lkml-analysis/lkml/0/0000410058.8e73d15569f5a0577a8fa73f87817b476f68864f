WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#614: FILE: security/dummy.c:125:
+static int dummy_sb_mount (char *dev_name, struct nameidata *nd, char *type,
                                                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#614: FILE: security/dummy.c:125:
+static int dummy_sb_mount (char *dev_name, struct nameidata *nd, char *type,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#621: FILE: security/dummy.c:131:
+static int dummy_sb_check_sb (struct vfsmount *mnt, struct nameidata *nd)
                                                                       ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#621: FILE: security/dummy.c:131:
+static int dummy_sb_check_sb (struct vfsmount *mnt, struct nameidata *nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#627: FILE: security/dummy.c:136:
+static int dummy_sb_umount (struct vfsmount *mnt, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#633: FILE: security/dummy.c:141:
+static void dummy_sb_umount_close (struct vfsmount *mnt)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#639: FILE: security/dummy.c:146:
+static void dummy_sb_umount_busy (struct vfsmount *mnt)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#646: FILE: security/dummy.c:151:
+static void dummy_sb_post_remount (struct vfsmount *mnt, unsigned long flags,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#654: FILE: security/dummy.c:158:
+static void dummy_sb_post_mountroot (void)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#660: FILE: security/dummy.c:163:
+static void dummy_sb_post_addmount (struct vfsmount *mnt, struct nameidata *nd)
                                                                             ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#660: FILE: security/dummy.c:163:
+static void dummy_sb_post_addmount (struct vfsmount *mnt, struct nameidata *nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#666: FILE: security/dummy.c:168:
+static int dummy_sb_pivotroot (struct nameidata *old_nd, struct nameidata *new_nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#672: FILE: security/dummy.c:173:
+static void dummy_sb_post_pivotroot (struct nameidata *old_nd, struct nameidata *new_nd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#681: FILE: security/dummy.c:306:
+static void dummy_inode_post_lookup (struct inode *ino, struct dentry *d)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#687: FILE: security/dummy.c:311:
+static void dummy_inode_delete (struct inode *ino)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#696: FILE: security/dummy.c:532:
+static int dummy_register_security (const char *name, struct security_operations *ops)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#702: FILE: security/dummy.c:537:
+static int dummy_unregister_security (const char *name, struct security_operations *ops)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ops' - possible side-effects?
#754: FILE: security/dummy.c:648:
+#define set_to_dummy_if_null(ops, function)			\
+	do {							\
+		if (!ops->function)				\
+			ops->function = dummy_##function;	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ops' may be better as '(ops)' to avoid precedence issues
#754: FILE: security/dummy.c:648:
+#define set_to_dummy_if_null(ops, function)			\
+	do {							\
+		if (!ops->function)				\
+			ops->function = dummy_##function;	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'function' - possible side-effects?
#754: FILE: security/dummy.c:648:
+#define set_to_dummy_if_null(ops, function)			\
+	do {							\
+		if (!ops->function)				\
+			ops->function = dummy_##function;	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#754: FILE: security/dummy.c:648:
+#define set_to_dummy_if_null(ops, function)			\
+	do {							\
+		if (!ops->function)				\
+			ops->function = dummy_##function;	\
+	} while (0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#760: FILE: security/dummy.c:654:
+void security_fixup_ops (struct security_operations *ops)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#867: FILE: security/security.c:24:
+extern struct security_operations dummy_security_ops;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#868: FILE: security/security.c:25:
+extern void security_fixup_ops (struct security_operations *ops);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#868: FILE: security/security.c:25:
+extern void security_fixup_ops (struct security_operations *ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#877: FILE: security/security.c:50:
+static int verify (struct security_operations *ops)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#898: FILE: security/security.c:108:
+	security_fixup_ops (ops);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#906: FILE: security/security.c:165:
+	security_fixup_ops (ops);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410058.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 24 warnings, 4 checks, 839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000410058.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
