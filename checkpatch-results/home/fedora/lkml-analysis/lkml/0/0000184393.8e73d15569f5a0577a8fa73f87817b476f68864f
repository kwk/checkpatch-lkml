WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
    1      485.36  100       485.3640     11.99      1.91   Sat Apr 30 14:01:51 2005

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#128: FILE: mm/slab.c:266:
+	spinlock_t lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#141: FILE: mm/slab.c:294:
+^Iunsigned int ^Ifree_limit;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#142: FILE: mm/slab.c:295:
+	spinlock_t      list_lock;

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: mm/slab.c:321:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#176: FILE: mm/slab.c:324:
+#define LIST3_INIT(parent) \
+	do {	\
+		INIT_LIST_HEAD(&(parent)->slabs_full);	\
+		INIT_LIST_HEAD(&(parent)->slabs_partial);	\
+		INIT_LIST_HEAD(&(parent)->slabs_free);	\
+		(parent)->shared = NULL; \
+		(parent)->list_lock = SPIN_LOCK_UNLOCKED;	\
+		(parent)->free_objects = 0;	\
+		(parent)->free_touched = 0;	\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: mm/slab.c:333:
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#188: FILE: mm/slab.c:336:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		INIT_LIST_HEAD(listp);		\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'listp' - possible side-effects?
#188: FILE: mm/slab.c:336:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		INIT_LIST_HEAD(listp);		\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \
+	}while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'slab' may be better as '(slab)' to avoid precedence issues
#188: FILE: mm/slab.c:336:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		INIT_LIST_HEAD(listp);		\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \
+	}while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]->slab
#191: FILE: mm/slab.c:339:
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that close brace '}'
#192: FILE: mm/slab.c:340:
+	}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#192: FILE: mm/slab.c:340:
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cachep' - possible side-effects?
#194: FILE: mm/slab.c:342:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#194: FILE: mm/slab.c:342:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nodeid' - possible side-effects?
#194: FILE: mm/slab.c:342:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#195: FILE: mm/slab.c:343:
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\

ERROR:SPACING: space required after that close brace '}'
#199: FILE: mm/slab.c:347:
+	}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: mm/slab.c:347:
+	}while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#212: FILE: mm/slab.c:359:
+#define is_node_online(node) \
+	({ BUG_ON(node != 0); 1; })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: mm/slab.c:360:
+	({ BUG_ON(node != 0); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: mm/slab.c:374:
+^Iunsigned int ^I^Ishared;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#318: FILE: mm/slab.c:766:
 }
+#ifdef CONFIG_NUMA

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#322: FILE: mm/slab.c:770:
+	int memsize = sizeof(void*)*MAX_NUMNODES;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#322: FILE: mm/slab.c:770:
+	int memsize = sizeof(void*)*MAX_NUMNODES;
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#329: FILE: mm/slab.c:777:
+	if(ac_ptr) {

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: mm/slab.c:784:
+			if(!ac_ptr[i]) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#337: FILE: mm/slab.c:785:
+				for(i--; i <=0; i--)
 				           ^

ERROR:SPACING: space required before the open parenthesis '('
#337: FILE: mm/slab.c:785:
+				for(i--; i <=0; i--)

ERROR:SPACING: space required before the open parenthesis '('
#351: FILE: mm/slab.c:799:
+	if(!ac_ptr)

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: mm/slab.c:811:
+	if(ac->avail) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#373: FILE: mm/slab.c:821:
+	int i=0;
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#379: FILE: mm/slab.c:827:
+		if(ac) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#388: FILE: mm/slab.c:836:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#401: FILE: mm/slab.c:849:
+		/* we need to do this right in the begining since
 		                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#414: FILE: mm/slab.c:861:
+				if(!(l3 = kmalloc_node(memsize,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#414: FILE: mm/slab.c:861:
+				if(!(l3 = kmalloc_node(memsize,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: mm/slab.c:862:
+				if(!(l3 = kmalloc_node(memsize,
+						GFP_KERNEL, node)))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#419: FILE: mm/slab.c:866:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 					                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#433: FILE: mm/slab.c:879:
+		/* Now we can go ahead with allocating the shared array's
+		  & array cache's */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#433: FILE: mm/slab.c:879:
+		  & array cache's */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: mm/slab.c:882:
+			nc = alloc_arraycache(cpu, cachep->limit,
+					cachep->batchcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: mm/slab.c:888:
+			BUG_ON(!l3);

ERROR:SPACING: space required before the open parenthesis '('
#448: FILE: mm/slab.c:889:
+			if(!l3->shared) {

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: mm/slab.c:890:
+				if(!(nc = alloc_arraycache(cpu,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#449: FILE: mm/slab.c:890:
+				if(!(nc = alloc_arraycache(cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: mm/slab.c:891:
+				if(!(nc = alloc_arraycache(cpu,
+					cachep->shared*cachep->batchcount,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#450: FILE: mm/slab.c:891:
+					cachep->shared*cachep->batchcount,
 					              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#455: FILE: mm/slab.c:896:
+				/* we are serialised from CPU_DEAD or
+				  CPU_UP_CANCELLED by the cpucontrol lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#455: FILE: mm/slab.c:896:
+				  CPU_UP_CANCELLED by the cpucontrol lock */

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: mm/slab.c:922:
+			if(!l3)

ERROR:SPACING: space required before the open parenthesis '('
#483: FILE: mm/slab.c:929:
+			if(nc)

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: mm/slab.c:932:
+			if(!cpus_empty(mask)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: mm/slab.c:933:
+                                spin_unlock(&l3->list_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: mm/slab.c:933:
+                                spin_unlock(&l3->list_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: mm/slab.c:934:
+                                goto unlock_cache;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: mm/slab.c:934:
+                                goto unlock_cache;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: mm/slab.c:935:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: mm/slab.c:935:
+                        }$

ERROR:SPACING: space required before the open parenthesis '('
#491: FILE: mm/slab.c:937:
+			if(l3->shared) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: mm/slab.c:939:
+				free_block(cachep, l3->shared->entry,
+						l3->shared->avail);

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: mm/slab.c:944:
+			if(l3->alien) {

ERROR:SPACING: space required before the open parenthesis '('
#506: FILE: mm/slab.c:952:
+			if(__node_shrink(cachep, node)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#506: FILE: mm/slab.c:952:
+			if(__node_shrink(cachep, node)) {
[...]
+			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#511: FILE: mm/slab.c:957:
+			}
+			else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: mm/slab.c:979:
+static void init_list(kmem_cache_t *cachep, struct kmem_list3 *list,
+		int nodeid)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: mm/slab.c:983:
+	BUG_ON((cachep->nodelists[nodeid]) != list);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*ptr)...) over kmalloc_node(sizeof(struct kmem_list3)...)
#530: FILE: mm/slab.c:984:
+	ptr = kmalloc_node(sizeof(struct kmem_list3), GFP_KERNEL, nodeid);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#531: FILE: mm/slab.c:985:
+	BUG_ON(!ptr);

ERROR:SPACING: space required before the open parenthesis '('
#549: FILE: mm/slab.c:1004:
+	for(i = 0; i < NUM_INIT_LISTS; i++)

ERROR:SPACING: space required before the open parenthesis '('
#552: FILE: mm/slab.c:1007:
+	for(i = 0; i < MAX_NUMNODES; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: mm/slab.c:1095:
+		memcpy(ptr, ac_data(&cache_cache),
+				sizeof(struct arraycache_init));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#620: FILE: mm/slab.c:1102:
+		BUG_ON(ac_data(malloc_sizes[0].cs_cachep)

WARNING:LINE_SPACING: Missing a blank line after declarations
#629: FILE: mm/slab.c:1111:
+		int i, j;
+		for (i=0; malloc_sizes[i].cs_size &&

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#629: FILE: mm/slab.c:1111:
+		for (i=0; malloc_sizes[i].cs_size &&
 		      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#629: FILE: mm/slab.c:1111:
+		for (i=0; malloc_sizes[i].cs_size &&
[...]
+			i++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: mm/slab.c:1112:
+		for (i=0; malloc_sizes[i].cs_size &&
+			(malloc_sizes[i].cs_size < sizeof(struct kmem_list3));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#633: FILE: mm/slab.c:1115:
+		BUG_ON(!malloc_sizes[i].cs_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: mm/slab.c:1118:
+		init_list(&cache_cache, &initkmem_list3[CACHE_CACHE],
+				numa_node_id());

ERROR:SPACING: space required before the open parenthesis '('
#637: FILE: mm/slab.c:1119:
+		if(i) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: mm/slab.c:1121:
+			init_list(malloc_sizes[0].cs_cachep,
+					&initkmem_list3[SIZE_32],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: mm/slab.c:1124:
+			init_list(malloc_sizes[0].cs_dmacachep,
+					&initkmem_list3[SIZE_DMA_32],

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#646: FILE: mm/slab.c:1128:
+		for (j=0; j < MAX_NUMNODES; j++) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: mm/slab.c:1129:
+			if(is_node_online(j))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: mm/slab.c:1131:
+				init_list(malloc_sizes[i].cs_cachep,
+						&kmem64_list3[j], j);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#672: FILE: mm/slab.c:1449:
+/* For setting up all the kmem_list3s for cache whose objsize is same
+   as size of kmem_list3. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#672: FILE: mm/slab.c:1449:
+   as size of kmem_list3. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#676: FILE: mm/slab.c:1453:
+	int i;
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#676: FILE: mm/slab.c:1453:
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#677: FILE: mm/slab.c:1454:
+		if(is_node_online(i)) {

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#681: FILE: mm/slab.c:1458:
+				((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 				                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#718: FILE: mm/slab.c:1745:
+			for (i=0; malloc_sizes[i].cs_size &&
 			      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#718: FILE: mm/slab.c:1745:
+			for (i=0; malloc_sizes[i].cs_size &&
[...]
+					 sizeof(struct kmem_list3)); i++);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: mm/slab.c:1746:
+			for (i=0; malloc_sizes[i].cs_size &&
+					(malloc_sizes[i].cs_size <

ERROR:SPACING: space required before the open parenthesis '('
#721: FILE: mm/slab.c:1748:
+			if(i == 0) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#725: FILE: mm/slab.c:1752:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#725: FILE: mm/slab.c:1752:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: mm/slab.c:1762:
+				kmalloc(sizeof(struct arraycache_init),
+						GFP_KERNEL);

ERROR:SPACING: space required before the open parenthesis '('
#737: FILE: mm/slab.c:1763:
+			if(cpucache_up_64 == SIZE_DMA_32) {

ERROR:SPACING: space required before the open parenthesis '('
#742: FILE: mm/slab.c:1768:
+			else if(cpucache_up_64 == SIZE_64) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#742: FILE: mm/slab.c:1768:
+			}
+			else if(cpucache_up_64 == SIZE_64) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#746: FILE: mm/slab.c:1772:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#746: FILE: mm/slab.c:1772:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: mm/slab.c:1775:
+					kmalloc(sizeof(struct kmem_list3),
+							GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#755: FILE: mm/slab.c:1781:
+			((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 			                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#758: FILE: mm/slab.c:1784:
+		BUG_ON(!cachep->nodelists[numa_node_id()]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#780: FILE: mm/slab.c:1849:
+	BUG_ON(spin_trylock(&list3_data(cachep)->list_lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: mm/slab.c:1857:
+	BUG_ON(spin_trylock(&(cachep->nodelists[node])->list_lock));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[node]
#788: FILE: mm/slab.c:1857:
+	BUG_ON(spin_trylock(&(cachep->nodelists[node])->list_lock));

ERROR:SPACING: space required before the open parenthesis '('
#796: FILE: mm/slab.c:1865:
+#define check_spinlock_acquired_node(x, y) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#832: FILE: mm/slab.c:1910:
+	for(i = 0; i < MAX_NUMNODES; i++)  {

ERROR:SPACING: space required before the open parenthesis '('
#839: FILE: mm/slab.c:1917:
+			if(l3->alien)

ERROR:SPACING: space required before the open parenthesis '('
#904: FILE: mm/slab.c:1965:
+		if(l3) {

ERROR:SPACING: space required before the open parenthesis '('
#930: FILE: mm/slab.c:2045:
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#931: FILE: mm/slab.c:2046:
+		if((l3 = cachep->nodelists[i])) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#931: FILE: mm/slab.c:2046:
+		if((l3 = cachep->nodelists[i])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#990: FILE: mm/slab.c:2240:
+	list_add_tail(&slabp->list, &(l3->slabs_free));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1013: FILE: mm/slab.c:2393:
+	BUG_ON(ac->avail > 0 || !l3);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: mm/slab.c:2404:
+			memcpy(ac->entry,
+				&(shared_array->entry[shared_array->avail]),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shared_array->entry[shared_array->avail]
#1026: FILE: mm/slab.c:2404:
+				&(shared_array->entry[shared_array->avail]),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1027: FILE: mm/slab.c:2405:
+				sizeof(void*)*batchcount);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1027: FILE: mm/slab.c:2405:
+				sizeof(void*)*batchcount);
 				             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1037: FILE: mm/slab.c:2433:
+				slabp->free*cachep->objsize;
 				           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1096: FILE: mm/slab.c:2566:
+	BUG_ON(!l3);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1116: FILE: mm/slab.c:2586:
+	BUG_ON(slabp->inuse == cachep->num);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1119: FILE: mm/slab.c:2589:
+	obj =  slabp->s_mem + slabp->free*cachep->objsize;
 	                                 ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1131: FILE: mm/slab.c:2601:
+	if (slabp->free == BUFCTL_END) {
[...]
+	else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1134: FILE: mm/slab.c:2604:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1134: FILE: mm/slab.c:2604:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shared_array->entry[shared_array->avail]
#1240: FILE: mm/slab.c:2698:
+			memcpy(&(shared_array->entry[shared_array->avail]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: mm/slab.c:2699:
+			memcpy(&(shared_array->entry[shared_array->avail]),
+					ac->entry,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#1259: FILE: mm/slab.c:2714:
+		while (p != &(l3->slabs_free)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ac->entry[batchcount]
#1271: FILE: mm/slab.c:2728:
+	memmove(ac->entry, &(ac->entry[batchcount]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1272: FILE: mm/slab.c:2729:
+	memmove(ac->entry, &(ac->entry[batchcount]),
 			sizeof(void*)*ac->avail);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1289: FILE: mm/slab.c:2753:
+		struct slab *slabp;
+		slabp = GET_PAGE_SLAB(virt_to_page(objp));

ERROR:SPACING: space required before the open parenthesis '('
#1290: FILE: mm/slab.c:2754:
+		if(unlikely(slabp->nodeid != numa_node_id())) {

ERROR:SPACING: space required before the open parenthesis '('
#1296: FILE: mm/slab.c:2760:
+			if(l3->alien && l3->alien[nodeid]) {

ERROR:SPACING: space required before the open parenthesis '('
#1299: FILE: mm/slab.c:2763:
+				if(unlikely(alien->avail == alien->limit))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1301: FILE: mm/slab.c:2765:
+					__drain_alien_cache(cachep,
+							alien, nodeid);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1305: FILE: mm/slab.c:2769:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1305: FILE: mm/slab.c:2769:
+			else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#1306: FILE: mm/slab.c:2770:
+				spin_lock(&(cachep->nodelists[nodeid])->

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#1309: FILE: mm/slab.c:2773:
+				spin_unlock(&(cachep->nodelists[nodeid])->

ERROR:SPACING: space required before the open parenthesis '('
#1402: FILE: mm/slab.c:2865:
+	if(nodeid == numa_node_id() || nodeid == -1)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1433: FILE: mm/slab.c:3069:
+	for(i=0; i < NR_CPUS; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#1433: FILE: mm/slab.c:3069:
+	for(i=0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1433: FILE: mm/slab.c:3069:
+	for(i=0; i < NR_CPUS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1434: FILE: mm/slab.c:3070:
+		if(cpu_online(i)) {

ERROR:SPACING: space required before the open parenthesis '('
#1441: FILE: mm/slab.c:3077:
+			if(!(new_alien = alloc_alien_cache(i, cachep->limit)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1441: FILE: mm/slab.c:3077:
+			if(!(new_alien = alloc_alien_cache(i, cachep->limit)))

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1444: FILE: mm/slab.c:3080:
+			if(!(new = alloc_arraycache(i, (cachep->shared*
 			                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#1444: FILE: mm/slab.c:3080:
+			if(!(new = alloc_arraycache(i, (cachep->shared*

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1444: FILE: mm/slab.c:3080:
+			if(!(new = alloc_arraycache(i, (cachep->shared*

ERROR:SPACING: space required before the open parenthesis '('
#1447: FILE: mm/slab.c:3083:
+			if((l3 = cachep->nodelists[node])) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1447: FILE: mm/slab.c:3083:
+			if((l3 = cachep->nodelists[node])) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1448: FILE: mm/slab.c:3084:
+			if((l3 = cachep->nodelists[node])) {
+

ERROR:SPACING: space required before the open parenthesis '('
#1451: FILE: mm/slab.c:3087:
+				if((nc = cachep->nodelists[node]->shared))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1451: FILE: mm/slab.c:3087:
+				if((nc = cachep->nodelists[node]->shared))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1453: FILE: mm/slab.c:3089:
+					free_block(cachep, nc->entry,
+							nc->avail);

ERROR:SPACING: space required before the open parenthesis '('
#1457: FILE: mm/slab.c:3093:
+				if(!cachep->nodelists[node]->alien) {

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1461: FILE: mm/slab.c:3097:
+				l3->free_limit = (1 + nr_cpus_node(node))*
 				                                         ^

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1464: FILE: mm/slab.c:3100:
+				l3->free_limit = (1 + num_online_cpus())*
 				                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#1474: FILE: mm/slab.c:3110:
+			if(!(l3 = kmalloc_node(sizeof(struct kmem_list3),

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1474: FILE: mm/slab.c:3110:
+			if(!(l3 = kmalloc_node(sizeof(struct kmem_list3),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*l3)...) over kmalloc_node(sizeof(struct kmem_list3)...)
#1474: FILE: mm/slab.c:3110:
+			if(!(l3 = kmalloc_node(sizeof(struct kmem_list3),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1475: FILE: mm/slab.c:3111:
+			if(!(l3 = kmalloc_node(sizeof(struct kmem_list3),
+							GFP_KERNEL, node)))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1480: FILE: mm/slab.c:3116:
+				((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 				                       ^

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1484: FILE: mm/slab.c:3120:
+			l3->free_limit = (1 + nr_cpus_node(node))*
 			                                         ^

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1487: FILE: mm/slab.c:3123:
+			l3->free_limit = (1 + num_online_cpus())*
 			                                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1553: FILE: mm/slab.c:3194:
+		printk(KERN_ERR "alloc_kmemlist failed for %s, error %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1554: FILE: mm/slab.c:3195:
+		printk(KERN_ERR "alloc_kmemlist failed for %s, error %d.\n",
+				cachep->name, -err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1555: FILE: mm/slab.c:3196:
+		BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ac->entry[tofree]
#1582: FILE: mm/slab.c:3269:
+		memmove(ac->entry, &(ac->entry[tofree]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: mm/slab.c:3270:
+		memmove(ac->entry, &(ac->entry[tofree]),
 					sizeof(void*)*ac->avail);

ERROR:SPACING: space required before the open parenthesis '('
#1601: FILE: mm/slab.c:3311:
+		if(l3->alien)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1609: FILE: mm/slab.c:3318:
+		drain_array_locked(searchp, ac_data(searchp), 0,
+				numa_node_id());

ERROR:SPACING: space required before the open parenthesis '('
#1612: FILE: mm/slab.c:3320:
+		if(time_after(l3->next_reap, jiffies))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1622: FILE: mm/slab.c:3327:
+			drain_array_locked(searchp, l3->shared, 0,
+					numa_node_id());

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1632: FILE: mm/slab.c:3334:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1632: FILE: mm/slab.c:3334:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1632: FILE: mm/slab.c:3334:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1632: FILE: mm/slab.c:3334:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1632: FILE: mm/slab.c:3334:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#1637: FILE: mm/slab.c:3337:
+			if (p == &(l3->slabs_free))

WARNING:SPLIT_STRING: quoted string split across lines
#1664: FILE: mm/slab.c:3389:
 		seq_puts(m, " : globalstat <listallocs> <maxobjs> <grown> <reaped>"
+				" <error> <maxfreeable> <nodeallocs> <remotefrees>");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1705: FILE: mm/slab.c:3434:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1705: FILE: mm/slab.c:3434:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1705: FILE: mm/slab.c:3434:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1705: FILE: mm/slab.c:3434:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1707: FILE: mm/slab.c:3436:
+		if(!l3 || !is_node_online(i))

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1712: FILE: mm/slab.c:3441:
+		list_for_each(q,&l3->slabs_full) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1712: FILE: mm/slab.c:3441:
+		list_for_each(q,&l3->slabs_full) {
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1719: FILE: mm/slab.c:3448:
+		list_for_each(q,&l3->slabs_partial) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1719: FILE: mm/slab.c:3448:
+		list_for_each(q,&l3->slabs_partial) {
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1728: FILE: mm/slab.c:3457:
+		list_for_each(q,&l3->slabs_free) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1728: FILE: mm/slab.c:3457:
+		list_for_each(q,&l3->slabs_free) {
 		                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1755: FILE: mm/slab.c:3484:
+	seq_printf(m, " : slabdata %6lu %6lu %6lu",
+			active_slabs, num_slabs, shared_avail);

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1770: FILE: mm/slab.c:3496:
+		seq_printf(m, " : globalstat %7lu %6lu %5lu %4lu \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1783: FILE: mm/slab.c:3581:
+				res = do_tune_cpucache(cachep, limit,
+						batchcount, shared);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 88 errors, 36 warnings, 75 checks, 1639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184393.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
