WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#54: FILE: power/disk.c:29:
+extern int swsusp_read_from(dev_t resume_device);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#58: FILE: power/disk.c:32:
+extern void swsusp_set_resume_device(dev_t resume_device);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#97: FILE: power/disk.c:225:
+		if ((error = swsusp_read_from(resume_device)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#98: FILE: power/disk.c:226:
+			goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#100: FILE: power/disk.c:228:
+		if ((error = swsusp_read()))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: power/disk.c:257:
+ *      luck, we end up in pm_suspend_disk(). Otherwise, we fail gracefully $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: power/disk.c:349:
+static ssize_t resume_show(struct subsystem * subsys, char * buf) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: power/disk.c:349:
+static ssize_t resume_show(struct subsystem * subsys, char * buf) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#138: FILE: power/disk.c:349:
+static ssize_t resume_show(struct subsystem * subsys, char * buf) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: power/disk.c:350:
+	return sprintf(buf,"set resume\n");
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: power/disk.c:353:
+static ssize_t resume_store(struct subsystem * s, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: power/disk.c:353:
+static ssize_t resume_store(struct subsystem * s, const char * buf, size_t n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#147: FILE: power/disk.c:358:
+	unsigned maj, min;

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: power/disk.c:359:
+	unsigned maj, min;
+	dev_t (res);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: power/disk.c:364:
+^Iif (sscanf(buf, "resume %u:%u", &maj, &min) == 2) {          $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#155: FILE: power/disk.c:366:
+		if (maj == MAJOR(res) && min == MINOR(res)) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#162: FILE: power/disk.c:373:
+		if (maj == MAJOR(res) && min == MINOR(res)) {
[...]
+		} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: power/disk.c:381:
+^I$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#174: FILE: power/disk.c:384:
Error should be -EINVAL.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000225240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 8 warnings, 1 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000225240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
