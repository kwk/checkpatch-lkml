WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#18: 
This fixes the last of my cpu_online_map damage, completing the abstraction.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#40: FILE: include/linux/init_task.h:51:
+    cpus_allowed:^ICPU_MASK_ALL,^I^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#40: FILE: include/linux/init_task.h:51:
+    cpus_allowed:	CPU_MASK_ALL,					
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#40: FILE: include/linux/init_task.h:51:
+    cpus_allowed:	CPU_MASK_ALL,					

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/sched.h:411:
+extern void set_cpus_allowed(task_t *p, cpu_mask_t new_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: include/linux/sched.h:415:
+	cpu_mask_t mask = CPU_MASK_NONE;
+	BUG_ON(!cpu_online(cpu));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#73: FILE: include/linux/sched.h:415:
+	BUG_ON(!cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#80: FILE: include/linux/sched.h:421:
+#define migrate_to_cpu(cpu) do { BUG_ON((cpu) != 0); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#80: FILE: include/linux/sched.h:421:
+#define migrate_to_cpu(cpu) do { BUG_ON((cpu) != 0); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#80: FILE: include/linux/sched.h:421:
+#define migrate_to_cpu(cpu) do { BUG_ON((cpu) != 0); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#107: FILE: include/linux/smp.h:94:
+typedef unsigned long cpu_mask_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#110: FILE: include/linux/smp.h:97:
+#define cpu_online_mask(res,mask) do { *(res) = ((mask) & 1); } while(0)
                            ^

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: include/linux/smp.h:97:
+#define cpu_online_mask(res,mask) do { *(res) = ((mask) & 1); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#110: FILE: include/linux/smp.h:97:
+#define cpu_online_mask(res,mask) do { *(res) = ((mask) & 1); } while(0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#162: FILE: include/asm-i386/smp.h:115:
+typedef unsigned long cpu_mask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#175: FILE: include/asm-i386/smp.h:128:
+	return NR_CPUS;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#188: FILE: include/asm-ia64/smp.h:55:
+typedef unsigned long cpu_mask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#203: FILE: include/asm-ia64/smp.h:69:
+	return NR_CPUS;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#215: FILE: include/asm-ppc/smp.h:57:
+typedef unsigned long cpu_mask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#230: FILE: include/asm-ppc/smp.h:71:
+	return NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#272: FILE: kernel/sched.c:1334:
+	if (find_first_bit((unsigned long *)online_mask, NR_CPUS) == NR_CPUS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#336: FILE: kernel/sched.c:1773:
+		BUG_ON(task_cpu(p) >= NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#336: FILE: kernel/sched.c:1773:
+		BUG_ON(task_cpu(p) >= NR_CPUS);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000448372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 17 warnings, 1 checks, 322 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000448372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
