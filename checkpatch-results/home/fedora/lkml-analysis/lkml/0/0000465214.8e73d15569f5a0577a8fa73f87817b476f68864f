WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#86: 
--- 2.5.8-pre3/fs/block_dev.c~dallocbase-20-readahead	Tue Apr  9 21:33:04 2002

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: fs/block_dev.c:696:
+	int ret = -EINVAL;
+	switch (cmd) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#121: FILE: fs/block_dev.c:705:
+			ret =inode->i_bdev->bd_op->ioctl(inode, file, cmd, arg);
 			    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#661: FILE: mm/filemap.c:990:
+		page_cache_readahead(filp, index);
 		                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#673: FILE: mm/filemap.c:1002:
+			handle_ra_thrashing(filp);
 			                    ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pgoff < size'
#851: FILE: mm/filemap.c:1523:
+	if ((pgoff < size) && !VM_RandomReadHint(area))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#942: FILE: include/linux/blkdev.h:159:
+	unsigned ra_sectors;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#952: FILE: include/linux/blkdev.h:317:
+extern int blk_set_readahead(kdev_t dev, unsigned sectors);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#952: FILE: include/linux/blkdev.h:317:
+extern int blk_set_readahead(kdev_t dev, unsigned sectors);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#953: FILE: include/linux/blkdev.h:318:
+extern unsigned blk_get_readahead(kdev_t dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#953: FILE: include/linux/blkdev.h:318:
+extern unsigned blk_get_readahead(kdev_t dev);

ERROR:SPACING: space required before the open parenthesis '('
#976: FILE: drivers/block/blkpg.c:242:
+			if(!capable(CAP_SYS_ADMIN))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1002: FILE: drivers/block/ll_rw_blk.c:118:
+int blk_set_readahead(kdev_t dev, unsigned sectors)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1026: FILE: drivers/block/ll_rw_blk.c:142:
+unsigned blk_get_readahead(kdev_t dev)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1028: FILE: drivers/block/ll_rw_blk.c:144:
+	unsigned ret = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1065: FILE: drivers/md/md.c:3390:
+	window = 32*(PAGE_SIZE/512);
 	           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1065: FILE: drivers/md/md.c:3390:
+	window = 32*(PAGE_SIZE/512);
 	                      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1091: FILE: mm/readahead.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1092: FILE: mm/readahead.c:2:
+ * mm/readahead.c - address_space-level file readahead.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1126: FILE: mm/readahead.c:36:
+	unsigned blk_ra_kbytes = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1197: FILE: mm/readahead.c:107:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1214: FILE: mm/readahead.c:124:
+void do_page_cache_readahead(struct file *file,
+			unsigned long offset, unsigned long nr_to_read)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1227: FILE: mm/readahead.c:137:
+ ^Iend_index = ((inode->i_size - 1) >> PAGE_CACHE_SHIFT);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1227: FILE: mm/readahead.c:137:
+ ^Iend_index = ((inode->i_size - 1) >> PAGE_CACHE_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1227: FILE: mm/readahead.c:137:
+ ^Iend_index = ((inode->i_size - 1) >> PAGE_CACHE_SHIFT);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: mm/readahead.c:144:
+^I^I$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1254: FILE: mm/readahead.c:164:
+	 * uptodate then the caller will launch readpage again, and
 	   ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1259: FILE: mm/readahead.c:169:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1273: FILE: mm/readahead.c:183:
+		BUG();

WARNING:RETURN_VOID: void function return statements are not generally useful
#1276: FILE: mm/readahead.c:186:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1387: FILE: mm/readahead.c:297:
+			do_page_cache_readahead(file,
+					ra->ahead_start, ra->ahead_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1444: FILE: include/linux/mm.h:536:
+void do_page_cache_readahead(struct file *file,
+			unsigned long offset, unsigned long nr_to_read);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000465214.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 19 warnings, 8 checks, 1289 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000465214.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
