WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
after init_module() function exits. Modutils have support for this since 19=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#67: FILE: include/asm-alpha/module.h:5:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#118: FILE: include/asm-ia64/module.h:15:
+#define module_remap(ptr, size)	(-ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#238: FILE: include/asm-sparc64/module.h:8:
+#define module_remap(ptr, size)	(-ENOSYS)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#250: FILE: include/asm-x86_64/module.h:11:
+#define module_remap(ptr, size)	(-ENOSYS)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#267: FILE: include/linux/init.h:44:
+#define __init		__attribute__ ((__section__ (".text.init")))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#267: FILE: include/linux/init.h:44:
+#define __init		__attribute__ ((__section__ (".text.init")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".text.init") over __attribute__((__section__(".text.init")))
#267: FILE: include/linux/init.h:44:
+#define __init		__attribute__ ((__section__ (".text.init")))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#268: FILE: include/linux/init.h:45:
+#define __initdata	__attribute__ ((__section__ (".data.init")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: include/linux/init.h:45:
+#define __initdata	__attribute__ ((__section__ (".data.init")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init") over __attribute__((__section__(".data.init")))
#268: FILE: include/linux/init.h:45:
+#define __initdata	__attribute__ ((__section__ (".data.init")))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#271: FILE: include/linux/init.h:48:
+#define __INIT		.section	".text.init","ax"
               		        	            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#272: FILE: include/linux/init.h:49:
+#define __FINIT		.previous

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: include/linux/init.h:50:
+#define __INITDATA	.section	".data.init","aw"
                   	        	            ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".text.exit") over __attribute__((__section__(".text.exit")))
#293: FILE: include/linux/init.h:104:
+#define __exit		__attribute__ ((unused, __section__(".text.exit")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#293: FILE: include/linux/init.h:104:
+#define __exit		__attribute__ ((unused, __section__(".text.exit")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.exit") over __attribute__((__section__(".data.exit")))
#294: FILE: include/linux/init.h:105:
+#define __exitdata	__attribute__ ((unused, __section__ (".data.exit")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#294: FILE: include/linux/init.h:105:
+#define __exitdata	__attribute__ ((unused, __section__ (".data.exit")))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#329: FILE: include/linux/init.h:27:
+extern int shrink_vm_area(void * addr, unsigned long size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: include/linux/init.h:27:
+extern int shrink_vm_area(void * addr, unsigned long size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#353: FILE: kernel/module.c:561:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#357: FILE: kernel/module.c:565:
+			mod->size =3D mod->runsize;
 			          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#371: FILE: mm/vmalloc.c:176:
 }
+int shrink_vm_area(void * addr, unsigned long size)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: mm/vmalloc.c:176:
+int shrink_vm_area(void * addr, unsigned long size)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#379: FILE: mm/vmalloc.c:184:
+	size =3D PAGE_ALIGN(size) + PAGE_SIZE;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#381: FILE: mm/vmalloc.c:186:
+	ret =3D 0;
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#383: FILE: mm/vmalloc.c:188:
+	for (p =3D &vmlist; (tmp =3D *p) ; p =3D &tmp->next) {
 	       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#383: FILE: mm/vmalloc.c:188:
+	for (p =3D &vmlist; (tmp =3D *p) ; p =3D &tmp->next) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#383: FILE: mm/vmalloc.c:188:
+	for (p =3D &vmlist; (tmp =3D *p) ; p =3D &tmp->next) {
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#383: FILE: mm/vmalloc.c:188:
+	for (p =3D &vmlist; (tmp =3D *p) ; p =3D &tmp->next) {
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#383: FILE: mm/vmalloc.c:188:
+	for (p =3D &vmlist; (tmp =3D *p) ; p =3D &tmp->next) {
 	                                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#383: FILE: mm/vmalloc.c:188:
+	for (p =3D &vmlist; (tmp =3D *p) ; p =3D &tmp->next) {
 	                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#384: FILE: mm/vmalloc.c:189:
+		if (tmp->addr =3D=3D addr) {
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#384: FILE: mm/vmalloc.c:189:
+		if (tmp->addr =3D=3D addr) {
 		                 ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#384: FILE: mm/vmalloc.c:189:
+		if (tmp->addr =3D=3D addr) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#389: FILE: mm/vmalloc.c:194:
+				ret =3D -EINVAL;
 				    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#389: FILE: mm/vmalloc.c:194:
+				ret =3D -EINVAL;
 				        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#392: FILE: mm/vmalloc.c:197:
+			if (size =3D=3D tmp->size)
 			         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#392: FILE: mm/vmalloc.c:197:
+			if (size =3D=3D tmp->size)
 			            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#392: FILE: mm/vmalloc.c:197:
+			if (size =3D=3D tmp->size)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#395: FILE: mm/vmalloc.c:200:
+			delta =3D tmp->size - size;
 			      ^

CHECK:SPACING: No space is necessary after a cast
#396: FILE: mm/vmalloc.c:201:
+			end =3D (unsigned long) tmp->addr + size - PAGE_SIZE;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#396: FILE: mm/vmalloc.c:201:
+			end =3D (unsigned long) tmp->addr + size - PAGE_SIZE;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#396: FILE: mm/vmalloc.c:201:
+			end =3D (unsigned long) tmp->addr + size - PAGE_SIZE;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#398: FILE: mm/vmalloc.c:203:
+			tmp->size =3D size + PAGE_SIZE;
 			          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459913.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 13 warnings, 7 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459913.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
