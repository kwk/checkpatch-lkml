WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
o while sysfs_create_dir() we attach a sysfs_dirent structure to the d_fsdata

WARNING:TYPO_SPELLING: 'direcotry' may be misspelled - perhaps 'directory'?
#44: 
  filed of dentry corresponding to the kobject's direcotry. 
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#49: 
  field. As after instantiating we can get a successfull lookup for the dentry
                                             ^^^^^^^^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#71: FILE: fs/sysfs/dir.c:13:
+struct inode_operations sysfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#75: FILE: fs/sysfs/dir.c:17:
+struct file_operations sysfs_dir_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: fs/sysfs/dir.c:25:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: fs/sysfs/dir.c:25:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: fs/sysfs/dir.c:25:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode) 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: fs/sysfs/dir.c:27:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/sysfs/dir.c:32:
+		if ((sd->s_type & SYSFS_KOBJECT) ||
+			(sd->s_type & SYSFS_KOBJ_ATTR_GROUP))

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#94: FILE: fs/sysfs/dir.c:36:
+	iput(inode);
 	^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#97: FILE: fs/sysfs/dir.c:39:
+static struct dentry_operations sysfs_dentry_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/sysfs/dir.c:43:
+char * sysfs_get_name(struct sysfs_dirent *sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: fs/sysfs/dir.c:45:
+	struct attribute * attr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: fs/sysfs/dir.c:46:
+	struct bin_attribute * bin_attr;

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#105: FILE: fs/sysfs/dir.c:47:
+	char ** link_names;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: fs/sysfs/dir.c:50:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#110: FILE: fs/sysfs/dir.c:52:
+	switch (sd->s_type) {
+		case SYSFS_KOBJ_ATTR:
[...]
+		case SYSFS_KOBJ_BIN_ATTR:
[...]
+		case SYSFS_KOBJ_LINK:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: fs/sysfs/dir.c:68:
+static int init_file(struct inode * inode)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: fs/sysfs/dir.c:85:
+/* attaches attribute's sysfs_dirent to the dentry corresponding to the $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: fs/sysfs/dir.c:88:
+static int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: fs/sysfs/dir.c:88:
+static int sysfs_attach_attr(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: fs/sysfs/dir.c:90:
+	struct attribute * attr = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: fs/sysfs/dir.c:91:
+	struct bin_attribute * bin_attr = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: fs/sysfs/dir.c:92:
+        int (* init) (struct inode *) = NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: fs/sysfs/dir.c:92:
+        int (* init) (struct inode *) = NULL;$

WARNING:SPACING: Unnecessary space before function pointer name
#152: FILE: fs/sysfs/dir.c:92:
+        int (* init) (struct inode *) = NULL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#152: FILE: fs/sysfs/dir.c:92:
+        int (* init) (struct inode *) = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#152: FILE: fs/sysfs/dir.c:92:
+        int (* init) (struct inode *) = NULL;
              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: fs/sysfs/dir.c:95:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: fs/sysfs/dir.c:95:
+        if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: fs/sysfs/dir.c:96:
+                bin_attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/sysfs/dir.c:96:
+                bin_attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: fs/sysfs/dir.c:97:
+                attr = &bin_attr->attr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/sysfs/dir.c:97:
+                attr = &bin_attr->attr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: fs/sysfs/dir.c:98:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: fs/sysfs/dir.c:98:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: fs/sysfs/dir.c:99:
+                attr = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/sysfs/dir.c:99:
+                attr = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: fs/sysfs/dir.c:100:
+                init = init_file;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: fs/sysfs/dir.c:100:
+                init = init_file;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/sysfs/dir.c:101:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/sysfs/dir.c:101:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: fs/sysfs/dir.c:107:
+        if (bin_attr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: fs/sysfs/dir.c:107:
+        if (bin_attr) {$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/sysfs/dir.c:119:
+static int sysfs_attach_link(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/sysfs/dir.c:119:
+static int sysfs_attach_link(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: fs/sysfs/dir.c:121:
+	struct inode * dir = dentry->d_parent->d_inode;

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#182: FILE: fs/sysfs/dir.c:122:
+	char ** link_names = sd->s_element;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: fs/sysfs/dir.c:135:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: fs/sysfs/dir.c:135:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#196: FILE: fs/sysfs/dir.c:136:
+				struct nameidata *nd)
 				                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: fs/sysfs/dir.c:136:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, 
+				struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: fs/sysfs/dir.c:138:
+	struct sysfs_dirent * parent_sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: fs/sysfs/dir.c:139:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: fs/sysfs/dir.c:144:
+			char * name = sysfs_get_name(sd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: fs/sysfs/dir.c:145:
+			char * name = sysfs_get_name(sd);
+			if (strcmp(name, dentry->d_name.name))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: fs/sysfs/dir.c:147:
+^I^I^Iif (sd->s_type & SYSFS_KOBJ_LINK) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: fs/sysfs/dir.c:157:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/sysfs/dir.c:157:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: fs/sysfs/dir.c:170:
+			struct sysfs_dirent * sd, * parent_sd;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#227: FILE: fs/sysfs/dir.c:170:
+			struct sysfs_dirent * sd, * parent_sd;
 			                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#228: FILE: fs/sysfs/dir.c:171:
+			struct sysfs_dirent * sd, * parent_sd;
+			parent_sd = p->d_fsdata;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: fs/sysfs/dir.c:172:
+^I^I^Isd = sysfs_new_dirent(parent_sd, k, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: fs/sysfs/dir.c:173:
+^I^I^I^I^I^I(parent_sd->s_element == k) ? $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: fs/sysfs/dir.c:173:
+			sd = sysfs_new_dirent(parent_sd, k, 
+						(parent_sd->s_element == k) ? 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: fs/sysfs/dir.c:174:
+^I^I^I^I^I^ISYSFS_KOBJ_ATTR_GROUP : $

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: fs/sysfs/dir.c:176:
+			if (sd) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: fs/sysfs/dir.c:183:
+			} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: fs/sysfs/dir.c:230:
+	struct sysfs_dirent * sd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: fs/sysfs/dir.c:235:
+ ^Ilist_del_init(&sd->s_sibling);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: fs/sysfs/dir.c:235:
+ ^Ilist_del_init(&sd->s_sibling);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: fs/sysfs/dir.c:235:
+ ^Ilist_del_init(&sd->s_sibling);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: fs/sysfs/dir.c:236:
+ ^Isysfs_put(d->d_fsdata);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: fs/sysfs/dir.c:236:
+ ^Isysfs_put(d->d_fsdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: fs/sysfs/dir.c:236:
+ ^Isysfs_put(d->d_fsdata);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: fs/sysfs/dir.c:267:
+	struct dentry * d;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: fs/sysfs/dir.c:268:
+	struct sysfs_dirent * parent_sd = dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: fs/sysfs/dir.c:269:
+	struct sysfs_dirent * sd, * tmp;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#284: FILE: fs/sysfs/dir.c:269:
+	struct sysfs_dirent * sd, * tmp;
 	                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: fs/sysfs/dir.c:270:
+	char * name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: fs/sysfs/dir.c:316:
+static void sysfs_close_dir_entries(struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#344: FILE: fs/sysfs/dir.c:318:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: fs/sysfs/dir.c:319:
+	struct sysfs_dirent * sd, * tmp;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#345: FILE: fs/sysfs/dir.c:319:
+	struct sysfs_dirent * sd, * tmp;
 	                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#349: FILE: fs/sysfs/dir.c:323:
+			struct dentry * dentry = sd->s_dentry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: fs/sysfs/dir.c:324:
+			struct dentry * dentry = sd->s_dentry;
+			if (dentry && dentry->d_inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#357: FILE: fs/sysfs/dir.c:331:
+static int sysfs_open_dir_entries(struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: fs/sysfs/dir.c:333:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: fs/sysfs/dir.c:334:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: fs/sysfs/dir.c:335:
+	struct dentry * dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: fs/sysfs/dir.c:340:
+			char * name = sysfs_get_name(sd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: fs/sysfs/dir.c:341:
+			char * name = sysfs_get_name(sd);
+			dentry = sysfs_get_dentry(parent, name);

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#381: FILE: fs/sysfs/dir.c:355:
+		/* release all successfully opened entires so far*/
 		                                   ^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#400: FILE: fs/sysfs/dir.c:374:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: fs/sysfs/dir.c:374:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: fs/sysfs/dir.c:374:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#409: FILE: fs/sysfs/dir.c:383:
+	switch (i) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#416: FILE: fs/sysfs/dir.c:390:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#423: FILE: fs/sysfs/dir.c:397:
+			/* fallthrough */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#425: FILE: fs/sysfs/dir.c:399:
+			if ((err = sysfs_open_dir_entries(dentry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: fs/sysfs/dir.c:401:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#433: FILE: fs/sysfs/dir.c:407:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#433: FILE: fs/sysfs/dir.c:407:
+			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 			                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#435: FILE: fs/sysfs/dir.c:409:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#440: FILE: fs/sysfs/dir.c:414:
+				if (filldir(dirent, next->d_name.name, next->d_name.len, filp->f_pos, next->d_inode->i_ino, dt_type(next->d_inode)) < 0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#460: FILE: fs/sysfs/dir.c:434:
+	switch (origin) {
+		case 1:
[...]
+		case 0:
[...]
+		default:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#477: FILE: fs/sysfs/dir.c:451:
+			if ((err = sysfs_open_dir_entries(file->f_dentry))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: fs/sysfs/dir.c:461:
+				struct dentry *next;
+				next = list_entry(p, struct dentry, d_child);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000306666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 36 warnings, 5 checks, 430 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000306666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
