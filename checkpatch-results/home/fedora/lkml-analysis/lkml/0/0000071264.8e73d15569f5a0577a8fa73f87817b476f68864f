ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: drivers/usb/serial/ftdi_sio.c:553:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#71: FILE: drivers/usb/serial/ftdi_sio.c:573:
+static void ftdi_send                   (struct usb_serial_port *port);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: drivers/usb/serial/ftdi_sio.c:1189:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: drivers/usb/serial/ftdi_sio.c:1189:
+    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: drivers/usb/serial/ftdi_sio.c:1194:
+                port->write_urb->transfer_buffer = transfer_buffer;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: drivers/usb/serial/ftdi_sio.c:1194:
+                port->write_urb->transfer_buffer = transfer_buffer;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: drivers/usb/serial/ftdi_sio.c:1195:
+                port->write_urb->transfer_buffer_length = SERIAL_BUF_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: drivers/usb/serial/ftdi_sio.c:1195:
+                port->write_urb->transfer_buffer_length = SERIAL_BUF_SIZE;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: drivers/usb/serial/ftdi_sio.c:1196:
+^I} $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv->buf"
#124: FILE: drivers/usb/serial/ftdi_sio.c:1200:
+	if (priv->buf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: drivers/usb/serial/ftdi_sio.c:1379:
+^I        usb_kill_urb(port->write_urb);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: drivers/usb/serial/ftdi_sio.c:1386:
+^I$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#171: FILE: drivers/usb/serial/ftdi_sio.c:1387:
+	dbg("%s - port %d, %d bytes", __FUNCTION__, port->number, count);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#196: FILE: drivers/usb/serial/ftdi_sio.c:1401:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#209: FILE: drivers/usb/serial/ftdi_sio.c:1409:
+	dbg("%s - port %d", __FUNCTION__, port->number);

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: drivers/usb/serial/ftdi_sio.c:1422:
+        if (data_offset > 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: drivers/usb/serial/ftdi_sio.c:1422:
+        if (data_offset > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: drivers/usb/serial/ftdi_sio.c:1423:
+                int len = port->bulk_out_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: drivers/usb/serial/ftdi_sio.c:1423:
+                int len = port->bulk_out_size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: drivers/usb/serial/ftdi_sio.c:1426:
+                count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: drivers/usb/serial/ftdi_sio.c:1426:
+                count = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: drivers/usb/serial/ftdi_sio.c:1428:
+                while (serial_buf_data_avail(priv->buf) && len > 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: drivers/usb/serial/ftdi_sio.c:1428:
+                while (serial_buf_data_avail(priv->buf) && len > 1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: drivers/usb/serial/ftdi_sio.c:1429:
+                        int toget = min(len - data_offset, PKTSZ - data_offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: drivers/usb/serial/ftdi_sio.c:1429:
+                        int toget = min(len - data_offset, PKTSZ - data_offset);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: drivers/usb/serial/ftdi_sio.c:1430:
+                        int cnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: drivers/usb/serial/ftdi_sio.c:1430:
+                        int cnt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: drivers/usb/serial/ftdi_sio.c:1432:
+        ^I        cnt = serial_buf_get(priv->buf, first_byte + data_offset,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: drivers/usb/serial/ftdi_sio.c:1432:
+        ^I        cnt = serial_buf_get(priv->buf, first_byte + data_offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: drivers/usb/serial/ftdi_sio.c:1432:
+        ^I        cnt = serial_buf_get(priv->buf, first_byte + data_offset,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: drivers/usb/serial/ftdi_sio.c:1433:
+^I^I                                toget);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: drivers/usb/serial/ftdi_sio.c:1433:
+        	        cnt = serial_buf_get(priv->buf, first_byte + data_offset,
+		                                toget);

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: drivers/usb/serial/ftdi_sio.c:1434:
+                        *first_byte |= 1 | (cnt << 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: drivers/usb/serial/ftdi_sio.c:1434:
+                        *first_byte |= 1 | (cnt << 2);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: drivers/usb/serial/ftdi_sio.c:1435:
+                        first_byte += cnt + data_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: drivers/usb/serial/ftdi_sio.c:1435:
+                        first_byte += cnt + data_offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: drivers/usb/serial/ftdi_sio.c:1436:
+                        len -= cnt + data_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: drivers/usb/serial/ftdi_sio.c:1436:
+                        len -= cnt + data_offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: drivers/usb/serial/ftdi_sio.c:1437:
+                        count += cnt + data_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: drivers/usb/serial/ftdi_sio.c:1437:
+                        count += cnt + data_offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: drivers/usb/serial/ftdi_sio.c:1438:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: drivers/usb/serial/ftdi_sio.c:1438:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: drivers/usb/serial/ftdi_sio.c:1439:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: drivers/usb/serial/ftdi_sio.c:1439:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: drivers/usb/serial/ftdi_sio.c:1440:
+^I        count = serial_buf_get(priv->buf, port->write_urb->transfer_buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: drivers/usb/serial/ftdi_sio.c:1441:
+^I^I                            port->bulk_out_size);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: drivers/usb/serial/ftdi_sio.c:1441:
+	        count = serial_buf_get(priv->buf, port->write_urb->transfer_buffer,
+		                            port->bulk_out_size);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#306: FILE: drivers/usb/serial/ftdi_sio.c:1452:
+	usb_serial_debug_data(debug, &port->dev, __FUNCTION__, count, port->write_urb->transfer_buffer);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#306: FILE: drivers/usb/serial/ftdi_sio.c:1452:
+	usb_serial_debug_data(debug, &port->dev, __FUNCTION__, count, port->write_urb->transfer_buffer);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: drivers/usb/serial/ftdi_sio.c:1456:
+	result = usb_submit_urb (port->write_urb, GFP_ATOMIC);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#317: FILE: drivers/usb/serial/ftdi_sio.c:1458:
+		dev_err(&port->dev, "%s - failed submitting write urb, error %d\n", __FUNCTION__, result);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#317: FILE: drivers/usb/serial/ftdi_sio.c:1458:
+		dev_err(&port->dev, "%s - failed submitting write urb, error %d\n", __FUNCTION__, result);

CHECK:SPACING: No space is necessary after a cast
#341: FILE: drivers/usb/serial/ftdi_sio.c:1469:
+	struct usb_serial_port *port = (struct usb_serial_port *) urb->context;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#358: FILE: drivers/usb/serial/ftdi_sio.c:1483:
+		dbg("%s - urb shutting down with status: %d", __FUNCTION__, urb->status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#363: FILE: drivers/usb/serial/ftdi_sio.c:1488:
+		dbg("%s - Overflow in write", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#364: FILE: drivers/usb/serial/ftdi_sio.c:1489:
+		dbg("%s - nonzero write bulk status received: %d", __FUNCTION__, urb->status);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#367: FILE: drivers/usb/serial/ftdi_sio.c:1492:
+		result = usb_submit_urb (port->write_urb, GFP_ATOMIC);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#369: FILE: drivers/usb/serial/ftdi_sio.c:1494:
+			dev_err(&urb->dev->dev, "%s - failed resubmitting write urb, error %d\n", __FUNCTION__, result);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#369: FILE: drivers/usb/serial/ftdi_sio.c:1494:
+			dev_err(&urb->dev->dev, "%s - failed resubmitting write urb, error %d\n", __FUNCTION__, result);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#401: FILE: drivers/usb/serial/ftdi_sio.c:2128:
+	cb = (struct circ_buf *)kmalloc(sizeof(struct circ_buf), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cb)...) over kmalloc(sizeof(struct circ_buf)...)
#401: FILE: drivers/usb/serial/ftdi_sio.c:2128:
+	cb = (struct circ_buf *)kmalloc(sizeof(struct circ_buf), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cb"
#402: FILE: drivers/usb/serial/ftdi_sio.c:2129:
+	if (cb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cb->buf"
#406: FILE: drivers/usb/serial/ftdi_sio.c:2133:
+	if (cb->buf == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#416: FILE: drivers/usb/serial/ftdi_sio.c:2143:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#429: FILE: drivers/usb/serial/ftdi_sio.c:2156:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#438: FILE: drivers/usb/serial/ftdi_sio.c:2165:
+	cb->head = cb->tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: drivers/usb/serial/ftdi_sio.c:2168:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#451: FILE: drivers/usb/serial/ftdi_sio.c:2178:
+	return CIRC_CNT(cb->head,cb->tail,SERIAL_BUF_SIZE);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#451: FILE: drivers/usb/serial/ftdi_sio.c:2178:
+	return CIRC_CNT(cb->head,cb->tail,SERIAL_BUF_SIZE);
 	                                 ^

WARNING:REPEATED_WORD: Possible repeated word: 'data'
#457: FILE: drivers/usb/serial/ftdi_sio.c:2184:
+ * Copy data data from a user buffer and put it into the circular buffer.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#474: FILE: drivers/usb/serial/ftdi_sio.c:2201:
+		cb->head = (cb->head + c) & (SERIAL_BUF_SIZE-1);
 		                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#503: FILE: drivers/usb/serial/ftdi_sio.c:2230:
+		cb->tail = (cb->tail + c) & (SERIAL_BUF_SIZE-1);
 		                                            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071264.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 33 warnings, 14 checks, 465 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000071264.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
