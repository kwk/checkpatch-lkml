WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
/proc/sys/dev/cdrom/{hdc,sr0}/{autoclose,autoeject,check_media,debug,info,lock}

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#44: 
--- a/drivers/cdrom/cdrom.c	Mon Aug 19 14:40:56 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#94: FILE: drivers/cdrom/cdrom.c:327:
+static int cdrom_sysctl_min = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#97: FILE: drivers/cdrom/cdrom.c:330:
+int cdrom_sysctl_info(ctl_table *ctl, int write, struct file * filp, void *buffer, size_t *lenp)
                                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: drivers/cdrom/cdrom.c:330:
+int cdrom_sysctl_info(ctl_table *ctl, int write, struct file * filp, void *buffer, size_t *lenp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: drivers/cdrom/cdrom.c:335:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: drivers/cdrom/cdrom.c:342:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#110: FILE: drivers/cdrom/cdrom.c:343:
+	pos += sprintf(info+pos, "\ndrive name:\t");
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#111: FILE: drivers/cdrom/cdrom.c:344:
+	pos += sprintf(info+pos, "\t%s", cdi->name);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: drivers/cdrom/cdrom.c:346:
+	pos += sprintf(info+pos, "\ndrive speed:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#114: FILE: drivers/cdrom/cdrom.c:347:
+	pos += sprintf(info+pos, "\t%d", cdi->speed);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: drivers/cdrom/cdrom.c:349:
+	pos += sprintf(info+pos, "\ndrive # of slots:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#117: FILE: drivers/cdrom/cdrom.c:350:
+	pos += sprintf(info+pos, "\t%d", cdi->capacity);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: drivers/cdrom/cdrom.c:352:
+	pos += sprintf(info+pos, "\nCan close tray:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#120: FILE: drivers/cdrom/cdrom.c:353:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_CLOSE_TRAY) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#122: FILE: drivers/cdrom/cdrom.c:355:
+	pos += sprintf(info+pos, "\nCan open tray:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#123: FILE: drivers/cdrom/cdrom.c:356:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_OPEN_TRAY) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#125: FILE: drivers/cdrom/cdrom.c:358:
+	pos += sprintf(info+pos, "\nCan lock tray:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: drivers/cdrom/cdrom.c:359:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_LOCK) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#128: FILE: drivers/cdrom/cdrom.c:361:
+	pos += sprintf(info+pos, "\nCan change speed:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#129: FILE: drivers/cdrom/cdrom.c:362:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_SELECT_SPEED) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#131: FILE: drivers/cdrom/cdrom.c:364:
+	pos += sprintf(info+pos, "\nCan select disk:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#132: FILE: drivers/cdrom/cdrom.c:365:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_SELECT_DISC) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#134: FILE: drivers/cdrom/cdrom.c:367:
+	pos += sprintf(info+pos, "\nCan read multisession:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#135: FILE: drivers/cdrom/cdrom.c:368:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_MULTI_SESSION) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#137: FILE: drivers/cdrom/cdrom.c:370:
+	pos += sprintf(info+pos, "\nCan read MCN:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#138: FILE: drivers/cdrom/cdrom.c:371:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_MCN) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#140: FILE: drivers/cdrom/cdrom.c:373:
+	pos += sprintf(info+pos, "\nReports media changed:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#141: FILE: drivers/cdrom/cdrom.c:374:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_MEDIA_CHANGED) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#143: FILE: drivers/cdrom/cdrom.c:376:
+	pos += sprintf(info+pos, "\nCan play audio:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#144: FILE: drivers/cdrom/cdrom.c:377:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_PLAY_AUDIO) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#146: FILE: drivers/cdrom/cdrom.c:379:
+	pos += sprintf(info+pos, "\nCan write CD-R:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#147: FILE: drivers/cdrom/cdrom.c:380:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_CD_R) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#149: FILE: drivers/cdrom/cdrom.c:382:
+	pos += sprintf(info+pos, "\nCan write CD-RW:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#150: FILE: drivers/cdrom/cdrom.c:383:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_CD_RW) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#152: FILE: drivers/cdrom/cdrom.c:385:
+	pos += sprintf(info+pos, "\nCan read DVD:\t");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#153: FILE: drivers/cdrom/cdrom.c:386:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_DVD) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: drivers/cdrom/cdrom.c:388:
+	pos += sprintf(info+pos, "\nCan write DVD-R:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#156: FILE: drivers/cdrom/cdrom.c:389:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_DVD_R) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#158: FILE: drivers/cdrom/cdrom.c:391:
+	pos += sprintf(info+pos, "\nCan write DVD-RAM:");
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#159: FILE: drivers/cdrom/cdrom.c:392:
+	pos += sprintf(info+pos, "\t%d", CDROM_CAN(CDC_DVD_RAM) != 0);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: drivers/cdrom/cdrom.c:394:
+	strcpy(info+pos,"\n\n");
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: drivers/cdrom/cdrom.c:394:
+	strcpy(info+pos,"\n\n");
 	               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: drivers/cdrom/cdrom.c:395:
+^I^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#163: FILE: drivers/cdrom/cdrom.c:396:
+	return proc_dostring(ctl, write, filp, buffer, lenp);
 	                                 ^^^^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#168: FILE: drivers/cdrom/cdrom.c:401:
+	{{ DEV_CDROM_DRIVE_AUTOCLOSE, "autoclose", &cdrom_table.options.autoclose, sizeof(int), 0644, NULL,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#170: FILE: drivers/cdrom/cdrom.c:403:
+		{ DEV_CDROM_DRIVE_AUTOEJECT, "autoeject", &cdrom_table.options.autoeject, sizeof(int), 0644, NULL,

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#172: FILE: drivers/cdrom/cdrom.c:405:
+		{ DEV_CDROM_DRIVE_DEBUG, "debug", &cdrom_table.options.debug, sizeof(int), 0644, NULL,

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#176: FILE: drivers/cdrom/cdrom.c:409:
+		{ DEV_CDROM_DRIVE_CHECK_MEDIA, "check_media", &cdrom_table.options.check_media, sizeof(int), 0644, NULL,

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#187: FILE: drivers/cdrom/cdrom.c:420:
+static void cdrom_sysctl_init(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#196: FILE: drivers/cdrom/cdrom.c:429:
+		cdinfo(CD_WARNING, "%s: failed to register sysctl table\n", __FUNCTION__);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#199: FILE: drivers/cdrom/cdrom.c:432:
+static void cdrom_sysctl_exit(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#204: FILE: drivers/cdrom/cdrom.c:437:
+static void cdrom_register_sysctl(struct cdrom_device_info *cdi) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cdi->sysctl_table)...) over kmalloc(sizeof(struct cdrom_sysctl_table)...)
#207: FILE: drivers/cdrom/cdrom.c:440:
+	cdi->sysctl_table = kmalloc(sizeof(struct cdrom_sysctl_table), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:RETURN_VOID: void function return statements are not generally useful
#237: FILE: drivers/cdrom/cdrom.c:470:
+	return;
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#239: FILE: drivers/cdrom/cdrom.c:472:
+static void cdrom_unregister_sysctl(struct cdrom_device_info *cdi) {

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void cdrom_sysctl_init() should probably be void cdrom_sysctl_init(void)
#248: FILE: drivers/cdrom/cdrom.c:481:
+static inline void cdrom_sysctl_init() {}

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void cdrom_sysctl_exit() should probably be void cdrom_sysctl_exit(void)
#249: FILE: drivers/cdrom/cdrom.c:482:
+static inline void cdrom_sysctl_exit() {}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: include/linux/cdrom.h:18:
+#endif $

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#611: FILE: include/linux/sysctl.h:564:
+	DEV_CDROM_DEFAULT=-2
 	                 ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#611: FILE: include/linux/sysctl.h:564:
+	DEV_CDROM_DEFAULT=-2
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#616: FILE: include/linux/sysctl.h:569:
+	DEV_CDROM_DRIVE_INFO=1,
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#617: FILE: include/linux/sysctl.h:570:
+	DEV_CDROM_DRIVE_AUTOCLOSE=2,
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#618: FILE: include/linux/sysctl.h:571:
+	DEV_CDROM_DRIVE_AUTOEJECT=3,
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#619: FILE: include/linux/sysctl.h:572:
+	DEV_CDROM_DRIVE_DEBUG=4,
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#620: FILE: include/linux/sysctl.h:573:
+	DEV_CDROM_DRIVE_LOCK=5,
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#621: FILE: include/linux/sysctl.h:574:
+	DEV_CDROM_DRIVE_CHECK_MEDIA=6
 	                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 9 warnings, 36 checks, 561 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
