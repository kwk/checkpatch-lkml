WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: include/linux/ktimeout.h:1:
+#ifndef _LINUX_KTIMEOUT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#58: FILE: include/linux/ktimeout.h:15:
+	void (*function)(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: include/linux/ktimeout.h:34:
+void fastcall init_timer(struct timer_list * timer);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: include/linux/ktimeout.h:36:
+static inline void setup_timer(struct timer_list * timer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/ktimeout.h:37:
+static inline void setup_timer(struct timer_list * timer,
+				void (*function)(unsigned long),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#98: FILE: include/linux/ktimeout.h:55:
+static inline int timer_pending(const struct timer_list * timer)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "timer->entry.next"
#100: FILE: include/linux/ktimeout.h:57:
+	return timer->entry.next != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/ktimeout.h:60:
+extern void add_timer_on(struct timer_list *timer, int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: include/linux/ktimeout.h:61:
+extern int del_timer(struct timer_list * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/ktimeout.h:61:
+extern int del_timer(struct timer_list * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/ktimeout.h:62:
+extern int __mod_timer(struct timer_list *timer, unsigned long expires);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/ktimeout.h:63:
+extern int mod_timer(struct timer_list *timer, unsigned long expires);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/ktimeout.h:65:
+extern unsigned long next_timer_interrupt(void);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#126: FILE: include/linux/ktimeout.h:83:
+	BUG_ON(timer_pending(timer));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: include/linux/ktimeout.h:88:
+  extern int try_to_del_timer_sync(struct timer_list *timer);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/ktimeout.h:88:
+  extern int try_to_del_timer_sync(struct timer_list *timer);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: include/linux/ktimeout.h:89:
+  extern int del_timer_sync(struct timer_list *timer);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/ktimeout.h:89:
+  extern int del_timer_sync(struct timer_list *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/ktimeout.h:97:
+extern void init_timers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/ktimeout.h:98:
+extern void run_local_timers(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129827.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 11 checks, 204 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129827.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
