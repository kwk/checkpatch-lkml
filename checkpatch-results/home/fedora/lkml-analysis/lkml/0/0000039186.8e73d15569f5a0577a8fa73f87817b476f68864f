ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#63: FILE: drivers/md/raid5.c:1374:
+	int overlap=0, work=0, written=0, compute=0, dd_idx=0;
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#63: FILE: drivers/md/raid5.c:1374:
+	int overlap=0, work=0, written=0, compute=0, dd_idx=0;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#63: FILE: drivers/md/raid5.c:1374:
+	int overlap=0, work=0, written=0, compute=0, dd_idx=0;
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#63: FILE: drivers/md/raid5.c:1374:
+	int overlap=0, work=0, written=0, compute=0, dd_idx=0;
 	                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#63: FILE: drivers/md/raid5.c:1374:
+	int overlap=0, work=0, written=0, compute=0, dd_idx=0;
 	                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#64: FILE: drivers/md/raid5.c:1375:
+	int pd_uptodate=0;
 	               ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#71: FILE: drivers/md/raid5.c:1382:
+	ops_state_orig = ops_state = sh->ops.state;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#75: FILE: drivers/md/raid5.c:1386:
+		struct bio *return_bi=NULL;
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#77: FILE: drivers/md/raid5.c:1388:
+		for (i=disks ; i-- ;) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#79: FILE: drivers/md/raid5.c:1390:
+			struct r5dev *dev = &sh->dev[i];
+			if (test_bit(R5_ReadReq, &dev->flags)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <R5_ReadReq>
#79: FILE: drivers/md/raid5.c:1390:
+			if (test_bit(R5_ReadReq, &dev->flags)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#81: FILE: drivers/md/raid5.c:1392:
+				struct bio *rbi, *rbi2;
+				PRINTK("%s: stripe %llu STRIPE_OP_BIOFILL op_state: %lx disk: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: drivers/md/raid5.c:1393:
+				PRINTK("%s: stripe %llu STRIPE_OP_BIOFILL op_state: %lx disk: %d\n",
+					__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#82: FILE: drivers/md/raid5.c:1393:
+					__FUNCTION__, (unsigned long long)sh->sector,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#110: FILE: drivers/md/raid5.c:1421:
+		for (i=disks ; i-- ;) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: drivers/md/raid5.c:1423:
+			struct r5dev *dev = &sh->dev[i];
+			if (test_bit(R5_ComputeReq, &dev->flags)) {

CHECK:CAMELCASE: Avoid CamelCase: <R5_ComputeReq>
#112: FILE: drivers/md/raid5.c:1423:
+			if (test_bit(R5_ComputeReq, &dev->flags)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#118: FILE: drivers/md/raid5.c:1429:
+		BUG_ON(i >= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: drivers/md/raid5.c:1431:
+		PRINTK("%s: stripe %llu STRIPE_OP_COMPUTE op_state: %lx block: %d\n",
+			__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#120: FILE: drivers/md/raid5.c:1431:
+			__FUNCTION__, (unsigned long long)sh->sector,

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: drivers/md/raid5.c:1442:
+			int count = 1;
+			for (i = disks ; i--; ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: drivers/md/raid5.c:1445:
+				void *p;
+				if (i == dd_idx)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#151: FILE: drivers/md/raid5.c:1462:
+		BUG_ON(test_bit(STRIPE_OP_RCW, &state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: drivers/md/raid5.c:1465:
+		PRINTK("%s: stripe %llu STRIPE_OP_RMW op_state: %lx\n",
+			__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#154: FILE: drivers/md/raid5.c:1465:
+			__FUNCTION__, (unsigned long long)sh->sector,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#162: FILE: drivers/md/raid5.c:1473:
+			for (i=disks ; i-- ;) {
 			      ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#166: FILE: drivers/md/raid5.c:1477:
+				/* Only process blocks that are known to be uptodate */
 				                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <R5_RMWReq>
#167: FILE: drivers/md/raid5.c:1478:
+				if (dev->towrite && test_bit(R5_RMWReq, &dev->flags)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: drivers/md/raid5.c:1484:
+					BUG_ON(dev->written);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#187: FILE: drivers/md/raid5.c:1498:
+			for (i=disks ; i-- ;) {
 			      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: drivers/md/raid5.c:1514:
+			int count = 1;
+			for (i=disks ; i-- ;) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#203: FILE: drivers/md/raid5.c:1514:
+			for (i=disks ; i-- ;) {
 			      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: drivers/md/raid5.c:1516:
+				struct r5dev *dev = &sh->dev[i];
+				if (dev->written) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#218: FILE: drivers/md/raid5.c:1529:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#221: FILE: drivers/md/raid5.c:1532:
+		BUG_ON(test_bit(STRIPE_OP_RMW, &state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: drivers/md/raid5.c:1535:
+		PRINTK("%s: stripe %llu STRIPE_OP_RCW op_state: %lx\n",
+			__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#224: FILE: drivers/md/raid5.c:1535:
+			__FUNCTION__, (unsigned long long)sh->sector,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#230: FILE: drivers/md/raid5.c:1541:
+			for (i=disks ; i-- ;) {
 			      ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#235: FILE: drivers/md/raid5.c:1546:
+				if (i!=pd_idx && dev->towrite &&
 				     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: drivers/md/raid5.c:1546:
+				if (i!=pd_idx && dev->towrite &&
[...]
+				} else if (i==pd_idx)
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: drivers/md/raid5.c:1547:
+				if (i!=pd_idx && dev->towrite &&
+					test_bit(R5_LOCKED, &dev->flags)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#237: FILE: drivers/md/raid5.c:1548:
+					test_bit(R5_LOCKED, &dev->flags)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#243: FILE: drivers/md/raid5.c:1554:
+					BUG_ON(dev->written);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#244: FILE: drivers/md/raid5.c:1555:
+					wbi = dev->written = chosen;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#249: FILE: drivers/md/raid5.c:1560:
+					while (wbi && wbi->bi_sector < dev->sector + STRIPE_SECTORS) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#253: FILE: drivers/md/raid5.c:1564:
+				} else if (i==pd_idx)
 				            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: drivers/md/raid5.c:1571:
+			int count = 1;
+			for (i=disks; i--;)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#260: FILE: drivers/md/raid5.c:1571:
+			for (i=disks; i--;)
 			      ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#272: FILE: drivers/md/raid5.c:1583:
+
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: drivers/md/raid5.c:1588:
+		PRINTK("%s: stripe %llu STRIPE_OP_CHECK op_state: %lx\n",
+		__FUNCTION__, (unsigned long long)sh->sector,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#277: FILE: drivers/md/raid5.c:1588:
+		__FUNCTION__, (unsigned long long)sh->sector,

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: drivers/md/raid5.c:1595:
+			int count = 1;
+			for (i=disks; i--;)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#284: FILE: drivers/md/raid5.c:1595:
+			for (i=disks; i--;)
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#316: FILE: drivers/md/raid5.c:1627:
+		for (i=disks ; i-- ;) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: drivers/md/raid5.c:1629:
+			struct r5dev *dev = &sh->dev[i];
+			if (dev->written)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#323: FILE: drivers/md/raid5.c:1634:
+		for (i= disks; i-- ;) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#325: FILE: drivers/md/raid5.c:1636:
+			struct r5dev *dev = &sh->dev[i];
+			if (test_and_clear_bit(R5_Overlap, &dev->flags))

CHECK:CAMELCASE: Avoid CamelCase: <R5_Overlap>
#325: FILE: drivers/md/raid5.c:1636:
+			if (test_and_clear_bit(R5_Overlap, &dev->flags))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#335: FILE: drivers/md/raid5.c:1646:
+	BUG_ON(sh->ops.pending < 0);

WARNING:LONG_LINE_COMMENT: line length of 141 exceeds 100 columns
#355: FILE: include/linux/raid/raid5.h:119:
+ *     lockstripe clrSTRIPE_HANDLE ... (lockdev check-buffers unlockdev) .. change-state .. record io/ops needed unlockstripe schedule io/ops

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'guaruntees' may be misspelled - perhaps 'guarantees'?
#387: FILE: include/linux/raid/raid5.h:150:
+ *  operation guaruntees that any operation that is dependent on the
               ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <R5_Consistent>
#416: FILE: include/linux/raid/raid5.h:194:
+#define	R5_Consistent	11	/* Block is HW DMA-able without a cache flush */

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#417: FILE: include/linux/raid/raid5.h:195:
+#define	R5_ComputeReq	12	/* compute_block in progress treat as uptodate */
        	             	  	                                      ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#458: FILE: include/linux/raid/raid5.h:250:
+#define^ISTRIPE_OP_CHECK_Gen   ^I^I8$

CHECK:CAMELCASE: Avoid CamelCase: <STRIPE_OP_COMPUTE2_Dma>
#473: FILE: include/linux/raid/raid5.h:265:
+#define	STRIPE_OP_COMPUTE2_Dma		23

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: include/linux/raid/raid5.h:271:
+#define^ISTRIPE_OP_COMPLETION_MASK ^I(1 << STRIPE_OP_RCW_Done |\$

CHECK:BIT_MACRO: Prefer using the BIT macro
#479: FILE: include/linux/raid/raid5.h:271:
+#define	STRIPE_OP_COMPLETION_MASK 	(1 << STRIPE_OP_RCW_Done |\

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#504: FILE: include/linux/raid/raid5.h:339:
+	void (*do_block_ops)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000039186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 30 warnings, 19 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000039186.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
