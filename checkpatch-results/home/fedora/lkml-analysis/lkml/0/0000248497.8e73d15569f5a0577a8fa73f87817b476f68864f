CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#43: FILE: include/linux/module.h:583:
+extern void __deprecated inter_module_register(const char *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#43: FILE: include/linux/module.h:583:
+extern void __deprecated inter_module_register(const char *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#43: FILE: include/linux/module.h:583:
+extern void __deprecated inter_module_register(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#43: FILE: include/linux/module.h:583:
+extern void __deprecated inter_module_register(const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#44: FILE: include/linux/module.h:584:
+extern void __deprecated inter_module_register(const char *,
+		struct module *, const void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#45: FILE: include/linux/module.h:585:
+extern void __deprecated inter_module_unregister(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#45: FILE: include/linux/module.h:585:
+extern void __deprecated inter_module_unregister(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#46: FILE: include/linux/module.h:586:
+extern const void * __deprecated inter_module_get(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#46: FILE: include/linux/module.h:586:
+extern const void * __deprecated inter_module_get(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#47: FILE: include/linux/module.h:587:
+extern const void * __deprecated inter_module_get_request(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#47: FILE: include/linux/module.h:587:
+extern const void * __deprecated inter_module_get_request(const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#47: FILE: include/linux/module.h:587:
+extern const void * __deprecated inter_module_get_request(const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#48: FILE: include/linux/module.h:588:
+extern const void * __deprecated inter_module_get_request(const char *,
+		const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#49: FILE: include/linux/module.h:589:
+extern void __deprecated inter_module_put(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#49: FILE: include/linux/module.h:589:
+extern void __deprecated inter_module_put(const char *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000248497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 8 warnings, 7 checks, 17 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000248497.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
