WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
and very kludgy solutions ("create a partition that starts at an odd sector,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#100: FILE: linux/drivers/block/ll_rw_blk.c:96:
+loff_t * blk_size_in_bytes[MAX_BLKDEV];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#138: FILE: linux/drivers/block/ll_rw_blk.c:890:
+			printk(KERN_INFO "%s: rw=%d, want=%ld, limit=%ld\n",

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#141: FILE: linux/drivers/block/ll_rw_blk.c:892:
+			       (sector + count)>>1, maxsector>>1);
 			                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#141: FILE: linux/drivers/block/ll_rw_blk.c:892:
+			       (sector + count)>>1, maxsector>>1);
 			                                     ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: linux/drivers/block/loop.c:151:
+			     struct dentry * lo_dentry, kdev_t lodev)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: linux/drivers/block/rd.c:268:
+         ^Icase BLKGETSIZE:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: linux/drivers/block/rd.c:268:
+         ^Icase BLKGETSIZE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: linux/drivers/block/rd.c:268:
+         ^Icase BLKGETSIZE:$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#258: FILE: linux/drivers/ide/ide-probe.c:768:
+	byteszs   = kmalloc (minors*sizeof(loff_t), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#258: FILE: linux/drivers/ide/ide-probe.c:768:
+	byteszs   = kmalloc (minors*sizeof(loff_t), GFP_KERNEL);
 	                           ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#258: FILE: linux/drivers/ide/ide-probe.c:768:
+	byteszs   = kmalloc (minors*sizeof(loff_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: linux/drivers/md/md.c:1123:
+		printk("md: %s has zero or unknown size, marking faulty!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: linux/drivers/md/md.c:1124:
+		printk("md: %s has zero or unknown size, marking faulty!\n",
 				partition_name(newdev));

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: linux/drivers/usb/storage/dpcm.c:61:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: linux/drivers/usb/storage/dpcm.c:62:
+    int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: linux/drivers/usb/storage/dpcm.c:76:
+   }$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#494: FILE: linux/fs/block_dev.c:89:
+		if (!buffer_uptodate(bh)) {
 		  if (chars == blocksize)

WARNING:TABSTOP: Statements should start on a tabstop
#499: FILE: linux/fs/block_dev.c:92:
+		  else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 20)
#499: FILE: linux/fs/block_dev.c:92:
+		  else {
 		    bhlist[0] = bh;

CHECK:BRACES: Unbalanced braces around else statement
#499: FILE: linux/fs/block_dev.c:92:
+		  else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#512: FILE: linux/fs/block_dev.c:100:
+		      if (size && block + blocks > size)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (22, 30)
#512: FILE: linux/fs/block_dev.c:100:
+		      if (size && block + blocks > size)
+			      blocks = size - block;

WARNING:TABSTOP: Statements should start on a tabstop
#514: FILE: linux/fs/block_dev.c:102:
+		      if (blocks > NBUF)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (22, 30)
#514: FILE: linux/fs/block_dev.c:102:
+		      if (blocks > NBUF)
+			      blocks=NBUF;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#515: FILE: linux/fs/block_dev.c:103:
+			      blocks=NBUF;
 			            ^

WARNING:TABSTOP: Statements should start on a tabstop
#516: FILE: linux/fs/block_dev.c:104:
+		      if (!blocks)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (22, 30)
#516: FILE: linux/fs/block_dev.c:104:
+		      if (!blocks)
+			      blocks = 1;

WARNING:TABSTOP: Statements should start on a tabstop
#518: FILE: linux/fs/block_dev.c:106:
+		      for(i=1; i<blocks; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#518: FILE: linux/fs/block_dev.c:106:
+		      for(i=1; i<blocks; i++) {
 		           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#518: FILE: linux/fs/block_dev.c:106:
+		      for(i=1; i<blocks; i++) {
 		                ^

ERROR:SPACING: space required before the open parenthesis '('
#518: FILE: linux/fs/block_dev.c:106:
+		      for(i=1; i<blocks; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: linux/fs/block_dev.c:108:
+^I^I        if (!bhlist[i]) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#522: FILE: linux/fs/block_dev.c:108:
+		        if (!bhlist[i]) {
 			  while(i >= 0) brelse(bhlist[i--]);

WARNING:TABSTOP: Statements should start on a tabstop
#532: FILE: linux/fs/block_dev.c:123:
+		  }

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#632: FILE: linux/fs/partitions/check.c:409:
+void grok_partitions(struct gendisk *dev, int drive, unsigned minors,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev->sizes"
#657: FILE: linux/fs/partitions/check.c:440:
+	if (dev->sizes != NULL && blk_size_in_bytes[dev->major] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "blk_size_in_bytes[dev->major]"
#657: FILE: linux/fs/partitions/check.c:440:
+	if (dev->sizes != NULL && blk_size_in_bytes[dev->major] != NULL) {

CHECK:SPACING: No space is necessary after a cast
#660: FILE: linux/fs/partitions/check.c:443:
+				((loff_t) dev->part[i].nr_sects << 9);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#671: FILE: linux/include/linux/blkdev.h:167:
+extern int * blk_size[MAX_BLKDEV];	/* in units of 1024 bytes */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#672: FILE: linux/include/linux/blkdev.h:168:
+extern loff_t * blk_size_in_bytes[MAX_BLKDEV];

CHECK:SPACING: No space is necessary after a cast
#687: FILE: linux/include/linux/blkdev.h:214:
+		return (loff_t) blk_size[MAJOR(dev)][MINOR(dev)]

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000528955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 39 warnings, 9 checks, 614 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000528955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
