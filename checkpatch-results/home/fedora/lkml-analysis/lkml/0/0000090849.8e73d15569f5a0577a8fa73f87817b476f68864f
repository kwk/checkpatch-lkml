WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: arch/um/include/irq_user.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: arch/um/include/misc_constants.h:1:
+#ifndef __MISC_CONSTANT_H_

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: arch/um/include/os.h:202:
+extern void forward_ipi(int fd, int pid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: arch/um/include/os.h:203:
+extern void kill_child_dead(int pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: arch/um/include/os.h:301:
+extern int os_waiting_for_events(struct irq_fd *active_fds);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: arch/um/include/os.h:302:
+extern int os_isatty(int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: arch/um/include/os.h:303:
+extern int os_create_pollfd(int fd, int events, void *tmp_pfd, int size_tmpfds);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: arch/um/include/os.h:304:
+extern void os_free_irq_by_cb(int (*test)(struct irq_fd *, void *), void *arg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: arch/um/include/os.h:305:
+extern void os_free_irq_by_cb(int (*test)(struct irq_fd *, void *), void *arg,
+		struct irq_fd *active_fds, struct irq_fd ***last_irq_ptr2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: arch/um/include/os.h:306:
+extern void os_free_irq_later(struct irq_fd *active_fds,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: arch/um/include/os.h:307:
+extern void os_free_irq_later(struct irq_fd *active_fds,
+		int irq, void *dev_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: arch/um/include/os.h:308:
+extern int os_get_pollfd(int i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: arch/um/include/os.h:309:
+extern void os_set_pollfd(int i, int fd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: arch/um/include/os.h:310:
+extern void os_set_ioignore(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: arch/um/include/os.h:311:
+extern void init_irq_signals(int on_sigstack);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: arch/um/kernel/irq_user.c:1:
+/*

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#147: FILE: arch/um/kernel/irq_user.c:23:
+struct irq_fd *active_fds = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: arch/um/kernel/irq_user.c:37:
+			if(n == -EINTR) continue;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#185: FILE: arch/um/kernel/irq_user.c:37:
+			if(n == -EINTR) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#186: FILE: arch/um/kernel/irq_user.c:38:
+			else break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: arch/um/kernel/irq_user.c:39:
+ ^I^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: arch/um/kernel/irq_user.c:39:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: arch/um/kernel/irq_user.c:39:
+ ^I^I}$

ERROR:SPACING: space required before the open brace '{'
#203: FILE: arch/um/kernel/irq_user.c:54:
+	if(os_isatty(fd)){

ERROR:SPACING: space required before the open parenthesis '('
#203: FILE: arch/um/kernel/irq_user.c:54:
+	if(os_isatty(fd)){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: arch/um/kernel/irq_user.c:66:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#228: FILE: arch/um/kernel/irq_user.c:84:
+	if(type == IRQ_READ) events = UM_POLLIN | UM_POLLPRI;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#228: FILE: arch/um/kernel/irq_user.c:84:
+	if(type == IRQ_READ) events = UM_POLLIN | UM_POLLPRI;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#229: FILE: arch/um/kernel/irq_user.c:85:
+	else events = UM_POLLOUT;

ERROR:SPACING: space required before the open parenthesis '('
#269: FILE: arch/um/kernel/irq_user.c:119:
+	if(type == IRQ_WRITE)

ERROR:SPACING: space required before the open brace '{'
#275: FILE: arch/um/kernel/irq_user.c:125:
+	while(1){

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: arch/um/kernel/irq_user.c:125:
+	while(1){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp_pfd"
#292: FILE: arch/um/kernel/irq_user.c:142:
+		if (tmp_pfd != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp_pfd"
#308: FILE: arch/um/kernel/irq_user.c:148:
+		if (tmp_pfd == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: arch/um/kernel/irq_user.c:180:
+ ^Ios_free_irq_by_cb(test, arg, active_fds, &last_irq_ptr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: arch/um/kernel/irq_user.c:180:
+ ^Ios_free_irq_by_cb(test, arg, active_fds, &last_irq_ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: arch/um/kernel/irq_user.c:180:
+ ^Ios_free_irq_by_cb(test, arg, active_fds, &last_irq_ptr);$

ERROR:SPACING: space required before the open brace '{'
#388: FILE: arch/um/kernel/irq_user.c:229:
+	if((fdi != -1) && (fdi != fd)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fdi != fd'
#388: FILE: arch/um/kernel/irq_user.c:229:
+	if((fdi != -1) && (fdi != fd)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#388: FILE: arch/um/kernel/irq_user.c:229:
+	if((fdi != -1) && (fdi != fd)){

WARNING:SPLIT_STRING: quoted string split across lines
#392: FILE: arch/um/kernel/irq_user.c:231:
 		printk("find_irq_by_fd - mismatch between active_fds and "
+		       "pollfds, fd %d vs %d, need %d\n", irq->fd,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#469: FILE: arch/um/kernel/smp.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: arch/um/kernel/smp.c:81:
+	os_set_fd_async(cpu_data[cpu].ipi_pipe[0],
 		     current->thread.mode.tt.extern_pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: arch/um/kernel/smp.c:138:
+	os_set_fd_async(cpu_data[me].ipi_pipe[0],
 		     current->thread.mode.tt.extern_pid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#545: FILE: arch/um/os-Linux/irq.c:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#566: FILE: arch/um/os-Linux/irq.c:22:
+static struct pollfd *pollfds = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#567: FILE: arch/um/os-Linux/irq.c:23:
+static int pollfds_num = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#568: FILE: arch/um/os-Linux/irq.c:24:
+static int pollfds_size = 0;

ERROR:SPACING: space required before the open brace '{'
#576: FILE: arch/um/os-Linux/irq.c:32:
+	if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#576: FILE: arch/um/os-Linux/irq.c:32:
+	if(n < 0){

ERROR:SPACING: space required before the open parenthesis '('
#578: FILE: arch/um/os-Linux/irq.c:34:
+		if(errno != EINTR)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#579: FILE: arch/um/os-Linux/irq.c:35:
+			printk("sigio_handler: os_waiting_for_events:"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'os_waiting_for_events', this function's name, in a string
#579: FILE: arch/um/os-Linux/irq.c:35:
+			printk("sigio_handler: os_waiting_for_events:"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#580: FILE: arch/um/os-Linux/irq.c:36:
+			printk("sigio_handler: os_waiting_for_events:"
+			       " poll returned %d, errno = %d\n", n, errno);

ERROR:SPACING: space required before the open parenthesis '('
#584: FILE: arch/um/os-Linux/irq.c:40:
+	if(n == 0)

ERROR:SPACING: space required before the open brace '{'
#589: FILE: arch/um/os-Linux/irq.c:45:
+	for(i = 0; i < pollfds_num; i++){

ERROR:SPACING: space required before the open parenthesis '('
#589: FILE: arch/um/os-Linux/irq.c:45:
+	for(i = 0; i < pollfds_num; i++){

ERROR:SPACING: space required before the open brace '{'
#590: FILE: arch/um/os-Linux/irq.c:46:
+		if(pollfds[i].revents != 0){

ERROR:SPACING: space required before the open parenthesis '('
#590: FILE: arch/um/os-Linux/irq.c:46:
+		if(pollfds[i].revents != 0){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#601: FILE: arch/um/os-Linux/irq.c:57:
+	return(isatty(fd));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open brace '{'
#612: FILE: arch/um/os-Linux/irq.c:68:
+		if(pollfds != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#612: FILE: arch/um/os-Linux/irq.c:68:
+		if(pollfds != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pollfds"
#612: FILE: arch/um/os-Linux/irq.c:68:
+		if(pollfds != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp_pfd"
#622: FILE: arch/um/os-Linux/irq.c:78:
+		if (tmp_pfd != NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#626: FILE: arch/um/os-Linux/irq.c:82:
+^Ipollfds[pollfds_num] = ((struct pollfd) { .fd ^I= fd,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#627: FILE: arch/um/os-Linux/irq.c:83:
+^I^I^I^I^I^I  .events ^I= events,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#628: FILE: arch/um/os-Linux/irq.c:84:
+^I^I^I^I^I^I  .revents ^I= 0 });$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#631: FILE: arch/um/os-Linux/irq.c:87:
+	return(0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: arch/um/os-Linux/irq.c:91:
+void os_free_irq_by_cb(int (*test)(struct irq_fd *, void *), void *arg,
+		struct irq_fd *active_fds, struct irq_fd ***last_irq_ptr2)

ERROR:SPACING: space required before the open brace '{'
#641: FILE: arch/um/os-Linux/irq.c:97:
+	while(*prev != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#641: FILE: arch/um/os-Linux/irq.c:97:
+	while(*prev != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#641: FILE: arch/um/os-Linux/irq.c:97:
+	while(*prev != NULL){

ERROR:SPACING: space required before the open brace '{'
#642: FILE: arch/um/os-Linux/irq.c:98:
+		if((*test)(*prev, arg)){

ERROR:SPACING: space required before the open parenthesis '('
#642: FILE: arch/um/os-Linux/irq.c:98:
+		if((*test)(*prev, arg)){

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: arch/um/os-Linux/irq.c:100:
+			struct irq_fd *old_fd = *prev;
+			if((pollfds[i].fd != -1) &&

ERROR:SPACING: space required before the open parenthesis '('
#644: FILE: arch/um/os-Linux/irq.c:100:
+			if((pollfds[i].fd != -1) &&

ERROR:SPACING: space required before the open brace '{'
#645: FILE: arch/um/os-Linux/irq.c:101:
+			   (pollfds[i].fd != (*prev)->fd)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#646: FILE: arch/um/os-Linux/irq.c:102:
+				printk("os_free_irq_by_cb - mismatch between "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'os_free_irq_by_cb', this function's name, in a string
#646: FILE: arch/um/os-Linux/irq.c:102:
+				printk("os_free_irq_by_cb - mismatch between "

WARNING:SPLIT_STRING: quoted string split across lines
#647: FILE: arch/um/os-Linux/irq.c:103:
+				printk("os_free_irq_by_cb - mismatch between "
+				       "active_fds and pollfds, fd %d vs %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: arch/um/os-Linux/irq.c:115:
+			memmove(&pollfds[i], &pollfds[i + 1],
+			       (pollfds_num - i) * sizeof(pollfds[0]));

ERROR:SPACING: space required before the open parenthesis '('
#660: FILE: arch/um/os-Linux/irq.c:116:
+			if(*last_irq_ptr2 == &old_fd->next)

ERROR:SPACING: space required before the open parenthesis '('
#664: FILE: arch/um/os-Linux/irq.c:120:
+			if(old_fd->type == IRQ_WRITE)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#676: FILE: arch/um/os-Linux/irq.c:132:
+
+

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#679: FILE: arch/um/os-Linux/irq.c:135:
+	return(pollfds[i].fd);

CHECK:SPACING: No space is necessary after a cast
#698: FILE: arch/um/os-Linux/irq.c:154:
+	if(timer_irq_inited) h = (__sighandler_t) alarm_handler;

ERROR:SPACING: space required before the open parenthesis '('
#698: FILE: arch/um/os-Linux/irq.c:154:
+	if(timer_irq_inited) h = (__sighandler_t) alarm_handler;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#698: FILE: arch/um/os-Linux/irq.c:154:
+	if(timer_irq_inited) h = (__sighandler_t) alarm_handler;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#699: FILE: arch/um/os-Linux/irq.c:155:
+	else h = boot_timer_handler;

CHECK:SPACING: No space is necessary after a cast
#703: FILE: arch/um/os-Linux/irq.c:159:
+	set_handler(SIGIO, (__sighandler_t) sig_handler, flags | SA_RESTART,

ERROR:SPACING: space required before the open parenthesis '('
#720: FILE: arch/um/os-Linux/tt.c:118:
+	if(err < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#721: FILE: arch/um/os-Linux/tt.c:119:
+		printk("forward_ipi: set_owner failed, fd = %d, me = %d, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'forward_ipi', this function's name, in a string
#721: FILE: arch/um/os-Linux/tt.c:119:
+		printk("forward_ipi: set_owner failed, fd = %d, me = %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#722: FILE: arch/um/os-Linux/tt.c:120:
+		printk("forward_ipi: set_owner failed, fd = %d, me = %d, "
+		       "target = %d, err = %d\n", fd, os_getpid(), pid, -err);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#744: FILE: arch/um/sys-i386/user-offsets.c:12:
+	asm volatile("\n->" #sym " %0 " #val : : "i" (val/sizeof(unsigned long)))
 	                                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 23 warnings, 28 checks, 674 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
