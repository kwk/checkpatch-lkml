WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/allocator.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: include/linux/allocator.h:22:
+struct page *allocate_pages(struct allocation_control *ac,
+					gfp_t additional_flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#85: FILE: include/linux/allocator.h:28:
+void free_a_page(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#91: FILE: include/linux/allocator.h:34:
+void free_some_pages(struct page *, struct allocation_control *ac);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: mm/page_allocator.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: mm/page_allocator.c:7:
+struct page *allocate_pages(struct allocation_control *ac,
+					gfp_t additional_flags)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#109: FILE: mm/page_allocator.c:12:
+	if (high_boundary < MAX_DMA32_ADDRESS)
+			gfp_flags |= __GFP_DMA32;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#111: FILE: mm/page_allocator.c:14:
+	else
[...]
+	if (high_boundary < MAX_DMA_ADDRESS)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#114: FILE: mm/page_allocator.c:17:
+	if (high_boundary < MAX_DMA_ADDRESS)
+			gfp_flags |= GFP_DMA;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000036078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 7 warnings, 2 checks, 72 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000036078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
