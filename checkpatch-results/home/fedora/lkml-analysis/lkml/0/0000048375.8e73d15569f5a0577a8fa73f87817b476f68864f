WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
http://ubuntustudio.com/wiki/index.php/Dapper:Vanilla_Kernel_With_Realtime_Preemption

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#47: 
EXTRAVERSION = .8-rt8
^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#200: FILE: sched.c:4768:
low-level

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#213: FILE: sched.c:4771:
+ *       */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: sched.c:4772:
+ int __cond_resched_raw_spinlock(raw_spinlock_t *lock)$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#214: FILE: sched.c:4772:
+ int __cond_resched_raw_spinlock(raw_spinlock_t *lock)
+  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: sched.c:4773:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: sched.c:4774:
+       int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: sched.c:4776:
+       if (need_lockbreak_raw(lock)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#218: FILE: sched.c:4776:
+       if (need_lockbreak_raw(lock)) {
+               spin_unlock(lock);

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: sched.c:4777:
+               spin_unlock(lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: sched.c:4777:
+               spin_unlock(lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: sched.c:4778:
+               cpu_relax();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: sched.c:4778:
+               cpu_relax();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: sched.c:4779:
+               spin_lock(lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: sched.c:4779:
+               spin_lock(lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: sched.c:4781:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: sched.c:4782:
+       if (need_resched()) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#225: FILE: sched.c:4782:
+       if (need_resched()) {
+               spin_unlock_no_resched(lock);

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: sched.c:4783:
+               spin_unlock_no_resched(lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: sched.c:4783:
+               spin_unlock_no_resched(lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: sched.c:4784:
+               __cond_resched();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: sched.c:4784:
+               __cond_resched();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: sched.c:4785:
+               spin_lock(lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: sched.c:4785:
+               spin_lock(lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: sched.c:4786:
+               ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: sched.c:4786:
+               ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: sched.c:4787:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: sched.c:4788:
+       return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: sched.c:4789:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: sched.c:4791:
+ EXPORT_SYMBOL(__cond_resched_raw_spinlock);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#234: FILE: sched.c:4791:
+ EXPORT_SYMBOL(__cond_resched_raw_spinlock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: sched.c:4795:
+ int __cond_resched_spinlock(spinlock_t *lock)$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#238: FILE: sched.c:4795:
+ int __cond_resched_spinlock(spinlock_t *lock)
+ {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: sched.c:4796:
+ {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: sched.c:4797:
+ #if (defined(CONFIG_SMP) && defined(CONFIG_PREEMPT)) || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: sched.c:4798:
+       if (lock->break_lock) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#242: FILE: sched.c:4798:
+       if (lock->break_lock) {
+               lock->break_lock = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: sched.c:4799:
+               lock->break_lock = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: sched.c:4799:
+               lock->break_lock = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: sched.c:4800:
+               _spin_unlock(lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: sched.c:4800:
+               _spin_unlock(lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: sched.c:4801:
+               __cond_resched();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: sched.c:4801:
+               __cond_resched();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: sched.c:4802:
+               _spin_lock(lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: sched.c:4802:
+               _spin_lock(lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: sched.c:4803:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: sched.c:4803:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: sched.c:4806:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: sched.c:4807:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: sched.c:4809:
+ EXPORT_SYMBOL(__cond_resched_spinlock);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#272: FILE: sched.c:4809:
+ EXPORT_SYMBOL(__cond_resched_spinlock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#276: FILE: sched.c:4813:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: sched.c:4817:
+  int __sched cond_resched_softirq(void)$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#280: FILE: sched.c:4817:
+  int __sched cond_resched_softirq(void)
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: sched.c:4818:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: sched.c:4820:
+       BUG_ON(!in_softirq());$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#283: FILE: sched.c:4820:
+       BUG_ON(!in_softirq());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: sched.c:4822:
+       if (softirq_need_resched()) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#285: FILE: sched.c:4822:
+       if (softirq_need_resched()) {
+               __local_bh_enable();

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: sched.c:4823:
+               __local_bh_enable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: sched.c:4823:
+               __local_bh_enable();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: sched.c:4824:
+               __cond_resched();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: sched.c:4824:
+               __cond_resched();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: sched.c:4825:
+               local_bh_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: sched.c:4825:
+               local_bh_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: sched.c:4829:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: sched.c:4830:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: sched.c:4832:
+ EXPORT_SYMBOL(cond_resched_softirq);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#295: FILE: sched.c:4832:
+ EXPORT_SYMBOL(cond_resched_softirq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: sched.c:4837:
+ int cond_resched_hardirq(void)$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#300: FILE: sched.c:4837:
+ int cond_resched_hardirq(void)
+ {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: sched.c:4838:
+ {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: sched.c:4839:
+       BUG_ON(!in_irq());$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#302: FILE: sched.c:4839:
+       BUG_ON(!in_irq());

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: sched.c:4841:
+       if (hardirq_need_resched()) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#304: FILE: sched.c:4841:
+       if (hardirq_need_resched()) {
+               irq_exit();

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: sched.c:4842:
+               irq_exit();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: sched.c:4842:
+               irq_exit();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: sched.c:4843:
+               __cond_resched();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: sched.c:4843:
+               __cond_resched();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: sched.c:4844:
+               irq_enter();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: sched.c:4844:
+               irq_enter();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: sched.c:4845:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: sched.c:4845:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: sched.c:4846:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: sched.c:4848:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: sched.c:4850:
+ EXPORT_SYMBOL(cond_resched_hardirq);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#318: FILE: sched.c:4850:
+ EXPORT_SYMBOL(cond_resched_hardirq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: sched.c:4855:
+ int cond_resched_all(void)$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#323: FILE: sched.c:4855:
+ int cond_resched_all(void)
+ {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: sched.c:4856:
+ {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: sched.c:4857:
+       if (hardirq_count())$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#325: FILE: sched.c:4857:
+       if (hardirq_count())
+               return cond_resched_hardirq();

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: sched.c:4858:
+               return cond_resched_hardirq();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: sched.c:4858:
+               return cond_resched_hardirq();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: sched.c:4859:
+       if (softirq_count())$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#327: FILE: sched.c:4859:
+       if (softirq_count())
+               return cond_resched_softirq();

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: sched.c:4860:
+               return cond_resched_softirq();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: sched.c:4860:
+               return cond_resched_softirq();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: sched.c:4861:
+       return cond_resched();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: sched.c:4862:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: sched.c:4864:
+ EXPORT_SYMBOL(cond_resched_all);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#332: FILE: sched.c:4864:
+ EXPORT_SYMBOL(cond_resched_all);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: sched.c:4868:
+ int voluntary_preemption = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: sched.c:4870:
+ EXPORT_SYMBOL(voluntary_preemption);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#338: FILE: sched.c:4870:
+ EXPORT_SYMBOL(voluntary_preemption);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: sched.c:4872:
+ static int __init voluntary_preempt_setup (char *str)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#340: FILE: sched.c:4872:
+ static int __init voluntary_preempt_setup (char *str)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#340: FILE: sched.c:4872:
+ static int __init voluntary_preempt_setup (char *str)
+ {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: sched.c:4873:
+ {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: sched.c:4874:
+       if (!strncmp(str, "off", 3))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#342: FILE: sched.c:4874:
+       if (!strncmp(str, "off", 3))
+               voluntary_preemption = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: sched.c:4875:
+               voluntary_preemption = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: sched.c:4875:
+               voluntary_preemption = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: sched.c:4876:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#344: FILE: sched.c:4876:
+       else
+               get_option(&str, &voluntary_preemption);

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: sched.c:4877:
+               get_option(&str, &voluntary_preemption);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: sched.c:4877:
+               get_option(&str, &voluntary_preemption);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: sched.c:4878:
+       if (!voluntary_preemption)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#346: FILE: sched.c:4878:
+       if (!voluntary_preemption)
+               printk("turning off voluntary preemption!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: sched.c:4879:
+               printk("turning off voluntary preemption!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: sched.c:4879:
+               printk("turning off voluntary preemption!\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#347: FILE: sched.c:4879:
+               printk("turning off voluntary preemption!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: sched.c:4881:
+       return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: sched.c:4882:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: sched.c:4884:
+ __setup("voluntary-preempt=", voluntary_preempt_setup);$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#352: FILE: sched.c:4884:
+ __setup("voluntary-preempt=", voluntary_preempt_setup);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#357: FILE: sched.c:4889:
+ /**
+ *    * yield - yield the current processor to other threads.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000048375.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 96 warnings, 2 checks, 164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000048375.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
