WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
http://groups-beta.google.com/group/linux.kernel/browse_frm/thread/46f6ca7ffeac184f/dd31c0959a614cac

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#81: 
accomodate the new options and new macros are defined.
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#124: FILE: fs/file_table.c:218:
+int __list_may_remount_ro(struct list_head* list)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: fs/file_table.c:237:
+^Ireturn 0;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#157: FILE: fs/file_table.c:253:
+	struct vfsmount* mnt;

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: fs/file_table.c:256:
+	if(!__list_may_remount_ro(&sb->s_files))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: fs/file_table.c:259:
+		if(!__list_may_remount_ro(&mnt->mnt_files))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: fs/file_table.c:269:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#261: FILE: fs/namespace.c:681:
+static int do_remount_mnt(struct vfsmount* mnt, int mnt_flags)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#263: FILE: fs/namespace.c:683:
+	if((mnt_flags & MNT_RDONLY) && !(mnt->mnt_flags & MNT_RDONLY))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#263: FILE: fs/namespace.c:683:
+	if((mnt_flags & MNT_RDONLY) && !(mnt->mnt_flags & MNT_RDONLY))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: fs/namespace.c:690:
+^I^I$

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#271: FILE: fs/namespace.c:691:
+	mnt->mnt_flags = mnt_flags &~ MNT_RDONLY_FORCE;
 	                           ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#271: FILE: fs/namespace.c:691:
+	mnt->mnt_flags = mnt_flags &~ MNT_RDONLY_FORCE;
 	                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#292: FILE: fs/namespace.c:840:
+	newmnt->mnt_flags = mnt_flags &~ MNT_RDONLY_FORCE;
 	                              ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#292: FILE: fs/namespace.c:840:
+	newmnt->mnt_flags = mnt_flags &~ MNT_RDONLY_FORCE;
 	                               ^

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#309: FILE: fs/namespace.c:1075:
+	flags &= ~(MS_NOSUID | MS_NOEXEC | MS_NODEV | MS_ACTIVE | MS_MNT_RDONLY | MS_MNT_RDONLY_FORCE | MS_MNT_NOATIME | MS_MNT_NODIRATIME);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#398: FILE: include/linux/fs.h:130:
+#define MS_MNT_RDONLY	(1<<18)
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#398: FILE: include/linux/fs.h:130:
+#define MS_MNT_RDONLY	(1<<18)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#399: FILE: include/linux/fs.h:131:
+#define MS_MNT_RDONLY_FORCE	(1<<19)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#399: FILE: include/linux/fs.h:131:
+#define MS_MNT_RDONLY_FORCE	(1<<19)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#400: FILE: include/linux/fs.h:132:
+#define MS_MNT_NOATIME		(1<<20)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#400: FILE: include/linux/fs.h:132:
+#define MS_MNT_NOATIME		(1<<20)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#401: FILE: include/linux/fs.h:133:
+#define MS_MNT_NODIRATIME	(1<<21)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#401: FILE: include/linux/fs.h:133:
+#define MS_MNT_NODIRATIME	(1<<21)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mp' - possible side-effects?
#438: FILE: include/linux/fs.h:815:
+#define for_each_sfile(p, mp, sb) for (mp = 0; mp != &(sb)->s_mnts; \
+                                       mp = mp ? mp->next : (sb)->s_mnts.next, prefetch(mp->next)) \
+                                     list_for_each(p, mp ? &container_of(mp, struct vfsmount, mnt_sblist)->mnt_files : &(sb)->s_files)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sb' - possible side-effects?
#438: FILE: include/linux/fs.h:815:
+#define for_each_sfile(p, mp, sb) for (mp = 0; mp != &(sb)->s_mnts; \
+                                       mp = mp ? mp->next : (sb)->s_mnts.next, prefetch(mp->next)) \
+                                     list_for_each(p, mp ? &container_of(mp, struct vfsmount, mnt_sblist)->mnt_files : &(sb)->s_files)

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: include/linux/fs.h:816:
+                                       mp = mp ? mp->next : (sb)->s_mnts.next, prefetch(mp->next)) \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: include/linux/fs.h:816:
+                                       mp = mp ? mp->next : (sb)->s_mnts.next, prefetch(mp->next)) \$

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#440: FILE: include/linux/fs.h:817:
+                                     list_for_each(p, mp ? &container_of(mp, struct vfsmount, mnt_sblist)->mnt_files : &(sb)->s_files)

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: include/linux/fs.h:817:
+                                     list_for_each(p, mp ? &container_of(mp, struct vfsmount, mnt_sblist)->mnt_files : &(sb)->s_files)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: include/linux/fs.h:817:
+                                     list_for_each(p, mp ? &container_of(mp, struct vfsmount, mnt_sblist)->mnt_files : &(sb)->s_files)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/linux/fs.h:1335:
+extern int mnt_may_remount_ro(struct vfsmount *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#449: FILE: include/linux/fs.h:1335:
+extern int mnt_may_remount_ro(struct vfsmount *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/fs.h:1337:
+extern void mark_files_ro(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#451: FILE: include/linux/fs.h:1337:
+extern void mark_files_ro(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#452: FILE: include/linux/fs.h:1338:
+extern void mnt_mark_files_ro(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#452: FILE: include/linux/fs.h:1338:
+extern void mnt_mark_files_ro(struct vfsmount *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:BIT_MACRO: Prefer using the BIT macro
#467: FILE: include/linux/mount.h:26:
+#define MNT_RDONLY_FORCE (1 << 31)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#480: FILE: include/linux/mount.h:48:
+#define	MNT_IS_RDONLY(m)	((m) && ((m)->mnt_flags & MNT_RDONLY))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#481: FILE: include/linux/mount.h:49:
+#define	MNT_IS_NOATIME(m)	((m) && ((m)->mnt_flags & MNT_NOATIME))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#482: FILE: include/linux/mount.h:50:
+#define	MNT_IS_NODIRATIME(m)	((m) && ((m)->mnt_flags & MNT_NODIRATIME))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: fs/open.c:802:
+	if(mnt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: mount/mount.c:172:
+  { "mnt_ro", 0, 0, MS_MNT_RDONLY },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: mount/mount.c:173:
+  { "mnt_rw", 0, 1, MS_MNT_RDONLY },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: mount/mount.c:175:
+  { "mnt_rof", 0, 0, MS_MNT_RDONLY | MS_MNT_RDONLY_FORCE },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: mount/mount.c:176:
+  { "mnt_ronf", 0, 1, MS_MNT_RDONLY_FORCE },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: mount/mount.c:180:
+  { "mnt_atime",       0, 1, MS_MNT_NOATIME }, /* Update access time */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: mount/mount.c:181:
+  { "mnt_noatime",     0, 0, MS_MNT_NOATIME }, /* Do not update access time */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: mount/mount.c:184:
+  { "mnt_diratime",    0, 1, MS_MNT_NODIRATIME },      /* Update dir access times */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: mount/mount.c:185:
+  { "mnt_nodiratime", 0, 0, MS_MNT_NODIRATIME },/* Do not update dir access times */$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#569: FILE: mount/mount_constants.h:62:
+#define MS_MNT_RDONLY  (1<<18)
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#569: FILE: mount/mount_constants.h:62:
+#define MS_MNT_RDONLY  (1<<18)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#573: FILE: mount/mount_constants.h:66:
+#define MS_MNT_RDONLY_FORCE    (1<<19)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#573: FILE: mount/mount_constants.h:66:
+#define MS_MNT_RDONLY_FORCE    (1<<19)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#577: FILE: mount/mount_constants.h:70:
+#define MS_MNT_NOATIME         (1<<20)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#577: FILE: mount/mount_constants.h:70:
+#define MS_MNT_NOATIME         (1<<20)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#581: FILE: mount/mount_constants.h:74:
+#define MS_MNT_NODIRATIME      (1<<21)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#581: FILE: mount/mount_constants.h:74:
+#define MS_MNT_NODIRATIME      (1<<21)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210851.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 26 warnings, 28 checks, 414 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000210851.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
