WARNING:REPEATED_WORD: Possible repeated word: 'and'
#44: 
generates the expected shifts and and masks for power of two divides.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#89: 
diff -ru linux-2.6.10-rc1/include/asm-arm/div64.h linux-2.6.10-rc1-nsz/include/asm-arm/div64.h

ERROR:SPACING: space required after that ',' (ctx:VxV)
#112: FILE: include/asm-arm/div64.h:30:
+#define do_div(n,base)							\
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#112: FILE: include/asm-arm/div64.h:30:
+#define do_div(n,base)							\
+({									\
+	register unsigned long long __n   asm("r0") = n;		\
+	register unsigned long long __res asm("r2");			\
+	register unsigned int __rem       asm(__xh);			\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = __n % (base);					\
+		__res = __n / (base);					\
+	} else {							\
+		register unsigned int __base      asm("r4") = base;	\
+		asm(	__asmeq("%0", __xh)				\
+			__asmeq("%1", "r2")				\
+			__asmeq("%2", "r0")				\
+			__asmeq("%3", "r4")				\
+			"bl	__do_div64"				\
+			: "=r" (__rem), "=r" (__res)			\
+			: "r" (__n), "r" (__base)			\
+			: "ip", "lr", "cc");				\
+	}								\
+	n = __res;							\
+	__rem;								\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#112: FILE: include/asm-arm/div64.h:30:
+#define do_div(n,base)							\
+({									\
+	register unsigned long long __n   asm("r0") = n;		\
+	register unsigned long long __res asm("r2");			\
+	register unsigned int __rem       asm(__xh);			\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = __n % (base);					\
+		__res = __n / (base);					\
+	} else {							\
+		register unsigned int __base      asm("r4") = base;	\
+		asm(	__asmeq("%0", __xh)				\
+			__asmeq("%1", "r2")				\
+			__asmeq("%2", "r0")				\
+			__asmeq("%3", "r4")				\
+			"bl	__do_div64"				\
+			: "=r" (__rem), "=r" (__res)			\
+			: "r" (__n), "r" (__base)			\
+			: "ip", "lr", "cc");				\
+	}								\
+	n = __res;							\
+	__rem;								\
 })

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: include/asm-arm/div64.h:35:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
 	                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#122: FILE: include/asm-arm/div64.h:40:
+		asm(	__asmeq("%0", __xh)				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: include/asm-generic/div64.h:25:
+# define do_div(n,base) ({						\
                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#149: FILE: include/asm-generic/div64.h:25:
+# define do_div(n,base) ({						\
+	uint32_t __rem;							\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		__rem = ((uint64_t)(n)) % __base;			\
+		(n) = ((uint64_t)(n)) / __base;				\
+	}								\
+	__rem;								\
  })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#149: FILE: include/asm-generic/div64.h:25:
+# define do_div(n,base) ({						\
+	uint32_t __rem;							\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		__rem = ((uint64_t)(n)) % __base;			\
+		(n) = ((uint64_t)(n)) / __base;				\
+	}								\
+	__rem;								\
  })

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#150: FILE: include/asm-generic/div64.h:26:
+	uint32_t __rem;							\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#151: FILE: include/asm-generic/div64.h:27:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
 	                                                    ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#155: FILE: include/asm-generic/div64.h:31:
+		uint32_t __base = (base);				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#177: FILE: include/asm-generic/div64.h:45:
+# define do_div(n,base) ({						\
                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#177: FILE: include/asm-generic/div64.h:45:
+# define do_div(n,base) ({						\
+	uint32_t __rem;						 	\
+	(void)(((typeof((n)) *)0) == ((uint64_t *)0));			\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {     \
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		if (likely(((n) >> 32) == 0)) {				\
+			__rem = (uint32_t)(n) % __base;			\
+			(n) = (uint32_t)(n) / __base;			\
+		} else 							\
+			__rem = __div64_32(&(n), __base);		\
+	}								\
+	__rem;								\
  })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#177: FILE: include/asm-generic/div64.h:45:
+# define do_div(n,base) ({						\
+	uint32_t __rem;						 	\
+	(void)(((typeof((n)) *)0) == ((uint64_t *)0));			\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {     \
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		uint32_t __base = (base);				\
+		if (likely(((n) >> 32) == 0)) {				\
+			__rem = (uint32_t)(n) % __base;			\
+			(n) = (uint32_t)(n) / __base;			\
+		} else 							\
+			__rem = __div64_32(&(n), __base);		\
+	}								\
+	__rem;								\
  })

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: include/asm-generic/div64.h:46:
+^Iuint32_t __rem;^I^I^I^I^I^I ^I\$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#178: FILE: include/asm-generic/div64.h:46:
+	uint32_t __rem;						 	\

CHECK:SPACING: No space is necessary after a cast
#179: FILE: include/asm-generic/div64.h:47:
+	(void)(((typeof((n)) *)0) == ((uint64_t *)0));			\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#180: FILE: include/asm-generic/div64.h:48:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {     \
 	                                                    ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#184: FILE: include/asm-generic/div64.h:52:
+		uint32_t __base = (base);				\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: include/asm-generic/div64.h:56:
+^I^I} else ^I^I^I^I^I^I^I\$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#210: FILE: include/asm-i386/div64.h:18:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) { \
 	                                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#216: FILE: include/asm-i386/div64.h:24:
+		asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 		      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#216: FILE: include/asm-i386/div64.h:24:
+		asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 		                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#222: FILE: include/asm-i386/div64.h:30:
+		asm("divl %2":	"=a" (__low), "=d" (__mod) : \
 		             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#224: FILE: include/asm-i386/div64.h:32:
+		asm("":"=A" (n):"a" (__low),"d" (__high)); \
 		      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#224: FILE: include/asm-i386/div64.h:32:
+		asm("":"=A" (n):"a" (__low),"d" (__high)); \
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: include/asm-i386/div64.h:32:
+		asm("":"=A" (n):"a" (__low),"d" (__high)); \
 		                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#260: FILE: include/asm-m32r/div64.h:14:
+#define do_div(n, base)							\
+({									\
+	unsigned long _res;						\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		_res = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		unsigned long _high, _mid, _low;			\
+		_low = (n) & 0xffffffffUL;				\
+		_high = (n) >> 32;					\
+		if (_high) {						\
+			_mid = (_high % (unsigned long)(base)) << 16;	\
+			_high = _high / (unsigned long)(base);		\
+			_mid += _low >> 16;				\
+			_low &= 0x0000ffffUL;				\
+			_low += (_mid % (unsigned long)(base)) << 16;	\
+			_mid = _mid / (unsigned long)(base);		\
+			_res = _low % (unsigned long)(base);		\
+			_low = _low / (unsigned long)(base);		\
+			n = _low + ((long long)_mid << 16) +		\
+				((long long)_high << 32);		\
+		} else {						\
+			_res = _low % (unsigned long)(base);		\
+			n = (_low / (unsigned long)(base));		\
+		}							\
+	}								\
+	_res;								\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#260: FILE: include/asm-m32r/div64.h:14:
+#define do_div(n, base)							\
+({									\
+	unsigned long _res;						\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		_res = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		unsigned long _high, _mid, _low;			\
+		_low = (n) & 0xffffffffUL;				\
+		_high = (n) >> 32;					\
+		if (_high) {						\
+			_mid = (_high % (unsigned long)(base)) << 16;	\
+			_high = _high / (unsigned long)(base);		\
+			_mid += _low >> 16;				\
+			_low &= 0x0000ffffUL;				\
+			_low += (_mid % (unsigned long)(base)) << 16;	\
+			_mid = _mid / (unsigned long)(base);		\
+			_res = _low % (unsigned long)(base);		\
+			_low = _low / (unsigned long)(base);		\
+			n = _low + ((long long)_mid << 16) +		\
+				((long long)_high << 32);		\
+		} else {						\
+			_res = _low % (unsigned long)(base);		\
+			n = (_low / (unsigned long)(base));		\
+		}							\
+	}								\
+	_res;								\
 })

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#263: FILE: include/asm-m32r/div64.h:17:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
 	                                                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#316: FILE: include/asm-m68k/div64.h:6:
+#define do_div(n, base) ({						\
+	unsigned long __rem;						\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		union {							\
+			unsigned long n32[2];				\
+			unsigned long long n64;				\
+		} __n;							\
+		unsigned long __upper;					\
+									\
+		__n.n64 = (n);						\
+		if ((__upper = __n.n32[0])) {				\
+			asm ("divul.l %2,%1:%0"				\
+				: "=d" (__n.n32[0]), "=d" (__upper)	\
+				: "d" (base), "0" (__n.n32[0]));	\
+		}							\
+		asm ("divu.l %2,%1:%0"					\
+			: "=d" (__n.n32[1]), "=d" (__rem)		\
+			: "d" (base), "1" (__upper), "0" (__n.n32[1]));	\
+		(n) = __n.n64;						\
+	}								\
+	__rem;								\
+}))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#316: FILE: include/asm-m68k/div64.h:6:
+#define do_div(n, base) ({						\
+	unsigned long __rem;						\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		union {							\
+			unsigned long n32[2];				\
+			unsigned long long n64;				\
+		} __n;							\
+		unsigned long __upper;					\
+									\
+		__n.n64 = (n);						\
+		if ((__upper = __n.n32[0])) {				\
+			asm ("divul.l %2,%1:%0"				\
+				: "=d" (__n.n32[0]), "=d" (__upper)	\
+				: "d" (base), "0" (__n.n32[0]));	\
+		}							\
+		asm ("divu.l %2,%1:%0"					\
+			: "=d" (__n.n32[1]), "=d" (__rem)		\
+			: "d" (base), "1" (__upper), "0" (__n.n32[1]));	\
+		(n) = __n.n64;						\
+	}								\
+	__rem;								\
+}))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#316: FILE: include/asm-m68k/div64.h:6:
+#define do_div(n, base) ({						\
+	unsigned long __rem;						\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__rem = ((uint64_t)(n)) % (base);			\
+		(n) = ((uint64_t)(n)) / (base);				\
+	} else {							\
+		union {							\
+			unsigned long n32[2];				\
+			unsigned long long n64;				\
+		} __n;							\
+		unsigned long __upper;					\
+									\
+		__n.n64 = (n);						\
+		if ((__upper = __n.n32[0])) {				\
+			asm ("divul.l %2,%1:%0"				\
+				: "=d" (__n.n32[0]), "=d" (__upper)	\
+				: "d" (base), "0" (__n.n32[0]));	\
+		}							\
+		asm ("divu.l %2,%1:%0"					\
+			: "=d" (__n.n32[1]), "=d" (__rem)		\
+			: "d" (base), "1" (__upper), "0" (__n.n32[1]));	\
+		(n) = __n.n64;						\
+	}								\
+	__rem;								\
+}))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#318: FILE: include/asm-m68k/div64.h:8:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
 	                                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#329: FILE: include/asm-m68k/div64.h:19:
+		if ((__upper = __n.n32[0])) {				\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#372: FILE: include/asm-mips/div64.h:60:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) { \
 	                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#401: FILE: include/asm-mips/div64.h:112:
+#define do_div(n, base) ( \
+	unsigned long __div; \
 	unsigned long __quot; \
 	unsigned int __mod; \
 	\
 	__div = (n); \
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) { \
+		__mod = __div % (base); \
+		__quot = __div / (base); \
+	} else { \
+		unsigned int __base; \
+		\
+		__base = (base); \
+		__mod = __div % __base; \
+		__quot = __div / __base; \
+	} \
 	(n) = __quot; \
 	__mod; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#401: FILE: include/asm-mips/div64.h:112:
+#define do_div(n, base) ( \
+	unsigned long __div; \
 	unsigned long __quot; \
 	unsigned int __mod; \
 	\
 	__div = (n); \
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) { \
+		__mod = __div % (base); \
+		__quot = __div / (base); \
+	} else { \
+		unsigned int __base; \
+		\
+		__base = (base); \
+		__mod = __div % __base; \
+		__quot = __div / __base; \
+	} \
 	(n) = __quot; \
 	__mod; })

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#414: FILE: include/asm-mips/div64.h:118:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) { \
 	                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#470: FILE: include/asm-s390/div64.h:7:
+#define do_div(n, base) ({						\
+	unsigned long long __n = (n);					\
+	unsigned long __r;						\
+									\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__r = __n % (base);					\
+		__n = __n / (base);					\
+	} else {							\
+		asm ("   slr  0,0\n"					\
+		     "   l    1,%1\n"					\
+		     "   srdl 0,1\n"					\
+		     "   dr   0,%2\n"					\
+		     "   alr  1,1\n"					\
+		     "   alr  0,0\n"					\
+		     "   lhi  2,1\n"					\
+		     "   n    2,%1\n"					\
+		     "   alr  0,2\n"					\
+		     "   clr  0,%2\n"					\
+		     "   jl   0f\n"					\
+		     "   slr  0,%2\n"					\
+		     "   ahi  1,1\n"					\
+		     "0: st   1,%1\n"					\
+		     "   l    1,4+%1\n"					\
+		     "   srdl 0,1\n"					\
+		     "   dr   0,%2\n"					\
+		     "   alr  1,1\n"					\
+		     "   alr  0,0\n"					\
+		     "   lhi  2,1\n"					\
+		     "   n    2,4+%1\n"					\
+		     "   alr  0,2\n"					\
+		     "   clr  0,%2\n"					\
+		     "   jl   1f\n"					\
+		     "   slr  0,%2\n"					\
+		     "   ahi  1,1\n"					\
+		     "1: st   1,4+%1\n"					\
+		     "   lr   %0,0"					\
+		     : "=d" (__r), "=m" (__n)				\
+		     : "d" (base), "m" (__n) : "0", "1", "2", "cc" );	\
+	}								\
+	(n) = (__n);							\
+	__r;								\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#470: FILE: include/asm-s390/div64.h:7:
+#define do_div(n, base) ({						\
+	unsigned long long __n = (n);					\
+	unsigned long __r;						\
+									\
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
+		__r = __n % (base);					\
+		__n = __n / (base);					\
+	} else {							\
+		asm ("   slr  0,0\n"					\
+		     "   l    1,%1\n"					\
+		     "   srdl 0,1\n"					\
+		     "   dr   0,%2\n"					\
+		     "   alr  1,1\n"					\
+		     "   alr  0,0\n"					\
+		     "   lhi  2,1\n"					\
+		     "   n    2,%1\n"					\
+		     "   alr  0,2\n"					\
+		     "   clr  0,%2\n"					\
+		     "   jl   0f\n"					\
+		     "   slr  0,%2\n"					\
+		     "   ahi  1,1\n"					\
+		     "0: st   1,%1\n"					\
+		     "   l    1,4+%1\n"					\
+		     "   srdl 0,1\n"					\
+		     "   dr   0,%2\n"					\
+		     "   alr  1,1\n"					\
+		     "   alr  0,0\n"					\
+		     "   lhi  2,1\n"					\
+		     "   n    2,4+%1\n"					\
+		     "   alr  0,2\n"					\
+		     "   clr  0,%2\n"					\
+		     "   jl   1f\n"					\
+		     "   slr  0,%2\n"					\
+		     "   ahi  1,1\n"					\
+		     "1: st   1,4+%1\n"					\
+		     "   lr   %0,0"					\
+		     : "=d" (__r), "=m" (__n)				\
+		     : "d" (base), "m" (__n) : "0", "1", "2", "cc" );	\
+	}								\
+	(n) = (__n);							\
+	__r;								\
 })

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#474: FILE: include/asm-s390/div64.h:11:
+	if (__builtin_constant_p(base) && !((base) & ((base)-1))) {	\
 	                                                    ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#507: FILE: include/asm-s390/div64.h:44:
+		     : "d" (base), "m" (__n) : "0", "1", "2", "cc" );	\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236568.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 4 warnings, 32 checks, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000236568.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
