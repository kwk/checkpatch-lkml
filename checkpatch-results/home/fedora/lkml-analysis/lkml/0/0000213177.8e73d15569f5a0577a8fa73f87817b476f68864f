WARNING:TYPO_SPELLING: 'arbitray' may be misspelled - perhaps 'arbitrary'?
#37: 
real-time scheduling (just something like CAP_SCHED allowing arbitray
                                                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#47: 
least should allow to set/get capabilites of process ids, user ids and
                              ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'priviledged' may be misspelled - perhaps 'privileged'?
#64: 
a priviledged user to set the capabilities of another user (i386 only). 
  ^^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#69: 
to be done in the future it looks like either compatibility has to be broken

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#undef _POSIX_SOURCE

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#include <linux/capability.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#include <sys/types.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#include <stdio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#include <fcntl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#include <linux/unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#define __NR_sys_id_capget	289

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#define __NR_sys_id_capset	290

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#define cap_t(x) (x)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#define CAP_TO_MASK(x) (1 << (x))

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#define cap_raise(c, flag)   (cap_t(c) |=  CAP_TO_MASK(flag))

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#define cap_clear(c)         do { cap_t(c) =  0; } while(0)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#define cap_raised(c, flag)  (cap_t(c) & CAP_TO_MASK(flag))

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
#define cap_isclear(c)       (!cap_t(c))

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
#define CAP_TYPE_UID    1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
#define CAP_TYPE_GID    2

WARNING:NEW_TYPEDEFS: do not add new typedefs
#174: FILE: include/linux/capability.h:37:
+typedef struct __user_cap_id_header_struct {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: include/linux/capability.h:74:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#190: FILE: include/linux/capability.h:77:
+ * processes, users or groups.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: include/linux/capability.h:366:
+#define cap_dup(c, d)        do { cap_t(d) = cap_t(c); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#201: FILE: include/linux/capability.h:366:
+#define cap_dup(c, d)        do { cap_t(d) = cap_t(c); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: include/linux/syscalls.h:511:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: include/linux/syscalls.h:512:
+	
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: kernel/capability.c:237:
+^I^I^Ireturn -EFAULT; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: kernel/capability.c:246:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: kernel/capability.c:256:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: kernel/capability.c:262:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: kernel/capability.c:280:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: kernel/capability.c:282:
+^I^Ireturn -EFAULT; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: kernel/capability.c:283:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: kernel/capability.c:297:
+^I^Ireturn -EFAULT; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: kernel/capability.c:301:
+^I^I^Ireturn -EFAULT; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: kernel/capability.c:304:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: kernel/capability.c:310:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: kernel/capability.c:318:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: kernel/capability.c:325:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: kernel/capability.c:331:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: kernel/capability.c:347:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213177.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 25 warnings, 1 checks, 220 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213177.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
