WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:CAMELCASE: Avoid CamelCase: <InterruptTheCard>
#53: FILE: drivers/char/isicom.c:139:
+#define InterruptTheCard(base) outw(0, (base) + 0xc)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ClearInterrupt>
#54: FILE: drivers/char/isicom.c:140:
+#define ClearInterrupt(base) inw((base) + 0x0a)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#57: FILE: drivers/char/isicom.c:143:
+#define pr_deb(str, ...) printk((str), ##args);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#57: FILE: drivers/char/isicom.c:143:
+#define pr_deb(str, ...) printk((str), ##args);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#65: FILE: drivers/char/isicom.c:151:
+static void __devexit isicom_remove(struct pci_dev*);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#65: FILE: drivers/char/isicom.c:151:
+static void __devexit isicom_remove(struct pci_dev*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: drivers/char/isicom.c:623:
+static inline int __isicom_paranoia_check(struct isi_port const *port,
+	char *name, const char *routine)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#133: FILE: drivers/char/isicom.c:626:
+		printk(KERN_WARNING "ISICOM: Warning: bad isicom magic for "

WARNING:SPLIT_STRING: quoted string split across lines
#134: FILE: drivers/char/isicom.c:627:
+		printk(KERN_WARNING "ISICOM: Warning: bad isicom magic for "
+			"dev %s in %s.\n", name, routine);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#139: FILE: drivers/char/isicom.c:631:
+		printk(KERN_WARNING "ISICOM: Warning: NULL isicom port for "

WARNING:SPLIT_STRING: quoted string split across lines
#140: FILE: drivers/char/isicom.c:632:
+		printk(KERN_WARNING "ISICOM: Warning: NULL isicom port for "
+			"dev %s in %s.\n", name, routine);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: drivers/char/isicom.c:695:
+		pr_deb(KERN_DEBUG "ISICOM: txing %d bytes, port%d.\n",
+			txcount, port->channel + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: drivers/char/isicom.c:697:
+		outw((port->channel << isi_card[card].shift_count) | txcount,
+			base);

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: drivers/char/isicom.c:745:
+ ^I^Ireturn;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: drivers/char/isicom.c:745:
+ ^I^Ireturn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/char/isicom.c:745:
+ ^I^Ireturn;$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#208: FILE: drivers/char/isicom.c:1762:
+static int __devinit isicom_register_ioregion(struct isi_board *board,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/char/isicom.c:1763:
+static int __devinit isicom_register_ioregion(struct isi_board *board,
+	const unsigned int index)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#226: FILE: drivers/char/isicom.c:1769:
+		printk(KERN_DEBUG "ISICOM: I/O Region 0x%x-0x%x is busy. "

WARNING:SPLIT_STRING: quoted string split across lines
#227: FILE: drivers/char/isicom.c:1770:
+		printk(KERN_DEBUG "ISICOM: I/O Region 0x%x-0x%x is busy. "
+			"Card%d will be disabled.\n", board->base,

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: drivers/char/isicom.c:1773:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: drivers/char/isicom.c:1773:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/char/isicom.c:1773:
+ ^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/char/isicom.c:1779:
+static void isicom_unregister_ioregion(struct isi_board *board,
+	const unsigned int index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: drivers/char/isicom.c:1787:
+	pr_deb(KERN_DEBUG "ISICOM: I/O Region 0x%x-0x%x released for Card%d.\n",
+		board->base, board->base + 15, index + 1);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#262: FILE: drivers/char/isicom.c:1810:
+static int __devinit isicom_register_tty_driver(void)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: drivers/char/isicom.c:1820:
+^Iisicom_normal->name ^I^I^I= "ttyM";$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: drivers/char/isicom.c:1821:
+^Iisicom_normal->devfs_name^I ^I= "isicom/";$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#300: FILE: drivers/char/isicom.c:1832:
+	if ((error = tty_register_driver(isicom_normal))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#301: FILE: drivers/char/isicom.c:1833:
+		printk(KERN_DEBUG "ISICOM: Couldn't register the dialin "

WARNING:SPLIT_STRING: quoted string split across lines
#302: FILE: drivers/char/isicom.c:1834:
+		printk(KERN_DEBUG "ISICOM: Couldn't register the dialin "
+			"driver, error=%d\n", error);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#319: FILE: drivers/char/isicom.c:1845:
+	if ((error = tty_unregister_driver(isicom_normal)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#320: FILE: drivers/char/isicom.c:1846:
+		printk(KERN_DEBUG "ISICOM: couldn't unregister normal driver, "

WARNING:SPLIT_STRING: quoted string split across lines
#321: FILE: drivers/char/isicom.c:1847:
+		printk(KERN_DEBUG "ISICOM: couldn't unregister normal driver, "
+			"error=%d.\n", error);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#327: FILE: drivers/char/isicom.c:1852:
+static int __devinit isicom_register_isr(struct isi_board *board,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: drivers/char/isicom.c:1853:
+static int __devinit isicom_register_isr(struct isi_board *board,
+	const unsigned int index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/char/isicom.c:1865:
+	retval = request_irq(board->irq, isicom_interrupt, irqflags,
+		ISICOM_NAME, board);

CHECK:BRACES: braces {} should be used on all arms of this statement
#364: FILE: drivers/char/isicom.c:1866:
+	if (retval < 0) {
[...]
+ 	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#365: FILE: drivers/char/isicom.c:1867:
+		printk(KERN_WARNING "ISICOM: Could not install handler at Irq "

WARNING:SPLIT_STRING: quoted string split across lines
#366: FILE: drivers/char/isicom.c:1868:
+		printk(KERN_WARNING "ISICOM: Could not install handler at Irq "
+			"%d. Card%d will be disabled.\n", board->irq,

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: drivers/char/isicom.c:1870:
+ ^I} else$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#368: FILE: drivers/char/isicom.c:1870:
+ ^I} else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: drivers/char/isicom.c:1870:
+ ^I} else$

CHECK:BRACES: Unbalanced braces around else statement
#368: FILE: drivers/char/isicom.c:1870:
+ 	} else

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#380: FILE: drivers/char/isicom.c:1882:
+static int __devinit reset_card(struct isi_board *board,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/char/isicom.c:1883:
+static int __devinit reset_card(struct isi_board *board,
+	const unsigned int card, unsigned int *signature)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#387: FILE: drivers/char/isicom.c:1889:
+	printk(KERN_DEBUG "ISILoad:Resetting Card%d at 0x%x\n", card + 1, base);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: drivers/char/isicom.c:1904:
+			pr_deb(KERN_DEBUG "base+0x2=0x%x, base+0xe=0x%x",
+				inw(base + 0x2), inw(base + 0xe));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#403: FILE: drivers/char/isicom.c:1905:
+			printk(KERN_ERR "ISILoad:ISA Card%d reset failure "

WARNING:SPLIT_STRING: quoted string split across lines
#404: FILE: drivers/char/isicom.c:1906:
+			printk(KERN_ERR "ISILoad:ISA Card%d reset failure "
+				"(Possible bad I/O Port Address 0x%x).\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'portcount != 0'
#411: FILE: drivers/char/isicom.c:1913:
+		if (!(inw(base + 0xe) & 0x1) || ((portcount != 0) &&
+				(portcount != 4) && (portcount != 8))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'portcount != 4'
#411: FILE: drivers/char/isicom.c:1913:
+		if (!(inw(base + 0xe) & 0x1) || ((portcount != 0) &&
+				(portcount != 4) && (portcount != 8))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'portcount != 8'
#411: FILE: drivers/char/isicom.c:1913:
+		if (!(inw(base + 0xe) & 0x1) || ((portcount != 0) &&
+				(portcount != 4) && (portcount != 8))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: drivers/char/isicom.c:1914:
+		if (!(inw(base + 0xe) & 0x1) || ((portcount != 0) &&
+				(portcount != 4) && (portcount != 8))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/char/isicom.c:1916:
+			pr_deb("\nbase+0x2=0x%x , base+0xe=0x%x",
+				inw(base + 0x2), inw(base + 0xe));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#415: FILE: drivers/char/isicom.c:1917:
+			printk("\nISILoad:PCI Card%d reset failure (Possible "

WARNING:SPLIT_STRING: quoted string split across lines
#416: FILE: drivers/char/isicom.c:1918:
+			printk("\nISILoad:PCI Card%d reset failure (Possible "
+				"bad I/O Port Address 0x%x).\n", card + 1,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#436: FILE: drivers/char/isicom.c:1938:
+		printk(KERN_WARNING "ISILoad:Card%d reset failure (Possible "

WARNING:SPLIT_STRING: quoted string split across lines
#437: FILE: drivers/char/isicom.c:1939:
+		printk(KERN_WARNING "ISILoad:Card%d reset failure (Possible "
+			"bad I/O Port Address 0x%x).\n", card + 1, base);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#442: FILE: drivers/char/isicom.c:1943:
+	printk(KERN_INFO "-Done\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#456: FILE: drivers/char/isicom.c:1956:
+static int __devinit isicom_probe(struct pci_dev *pdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: drivers/char/isicom.c:1957:
+static int __devinit isicom_probe(struct pci_dev *pdev,
+	const struct pci_device_id *ent)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#471: FILE: drivers/char/isicom.c:1970:
+	printk(KERN_INFO "ISI PCI Card(Device ID 0x%x)\n", ent->device);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#503: FILE: drivers/char/isicom.c:1998:
+/*	retval = load_firmware(board, index, signature);
+	if (retval < 0)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: drivers/char/isicom.c:1999:
+		goto errunri; */

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#518: FILE: drivers/char/isicom.c:2012:
+static void __devexit isicom_remove(struct pci_dev *pdev)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#567: FILE: drivers/char/isicom.c:2027:
+static int __devinit isicom_setup(void)

ERROR:SPACING: space required before the open parenthesis '('
#580: FILE: drivers/char/isicom.c:2035:
+	for(idx = 0; idx < BOARD_COUNT; idx++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#615: FILE: drivers/char/isicom.c:2051:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#615: FILE: drivers/char/isicom.c:2051:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: drivers/char/isicom.c:2051:
+ ^I^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/char/isicom.c:2059:
+		if (irq[idx] == 2 || irq[idx] == 3 || irq[idx] == 4	||
+				irq[idx] == 5	|| irq[idx] == 7	||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#703: FILE: drivers/char/isicom.c:2062:
+			printk(KERN_ERR "ISICOM: ISA not supported yet.\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#706: FILE: drivers/char/isicom.c:2065:
+/*			isi_card[idx].base = io[idx];
+			isi_card[idx].irq = irq[idx];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#711: FILE: drivers/char/isicom.c:2070:
+			card++;*/

CHECK:BRACES: Unbalanced braces around else statement
#712: FILE: drivers/char/isicom.c:2071:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#713: FILE: drivers/char/isicom.c:2072:
+			printk(KERN_ERR "ISICOM: Irq %d unsupported. "

WARNING:SPLIT_STRING: quoted string split across lines
#714: FILE: drivers/char/isicom.c:2073:
+			printk(KERN_ERR "ISICOM: Irq %d unsupported. "
+				"Disabling Card%d...\n", irq[idx], idx + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#726: FILE: drivers/char/isicom.c:2082:
+		printk(KERN_ERR "ISICOM: Unable to register pci driver.\n");

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#769: FILE: drivers/char/isicom.c:2113:
+		msleep(10);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151701.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 51 warnings, 22 checks, 753 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151701.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
