WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#53: 
Signed-Off-By: Simon Derr <simon.derr@bull.net>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask' may be better as '(mask)' to avoid precedence issues
#105: FILE: kernel/cpuset.c:478:
+#define cyclic_next_cpu(index, mask)	__cyclic_next_cpu(index, &mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: kernel/cpuset.c:479:
+static inline int __cyclic_next_cpu(int index, const cpumask_t * mask)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#109: FILE: kernel/cpuset.c:482:
+	int i;
+	i = next_cpu(index, *mask);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#110: FILE: kernel/cpuset.c:483:
+	if (i >= NR_CPUS) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#133: FILE: kernel/cpuset.c:506:
+	int cpu = NR_CPUS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: kernel/cpuset.c:507:
+	int cpu = NR_CPUS;
+	cpus_clear(*mask);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#136: FILE: kernel/cpuset.c:509:
+	if (cpus_empty(virt_allowed)) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#137: FILE: kernel/cpuset.c:510:
+	if (cpus_empty(cs_allowed)) return 0;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#139: FILE: kernel/cpuset.c:512:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#176: FILE: kernel/cpuset.c:549:
+	if (is_virtualized(p->cpuset))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#178: FILE: kernel/cpuset.c:551:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: kernel/cpuset.c:553:
+		cpumask_t cpus_allowed;
+		cpus_allowed = p->cpuset->cpus_allowed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: kernel/cpuset.c:574:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#249: FILE: kernel/cpuset.c:698:
+		if (is_virtualized(cs))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#251: FILE: kernel/cpuset.c:700:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: kernel/cpuset.c:843:
+	cpumask_t virt_allowed, allowed;
+	if (is_virtualized(cs) == is_virtualized(tsk->cpuset)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#306: FILE: kernel/cpuset.c:855:
+	if (is_virtualized(cs))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#308: FILE: kernel/cpuset.c:857:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#367: FILE: kernel/cpuset.c:1408:
+	if ((err = cpuset_add_file(cs_dentry, &cft_virtualize)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#382: FILE: kernel/sched.c:3201:
+int cpuset_get_cpus_virt_affinity(task_t *p, cpumask_t *mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 9 warnings, 8 checks, 334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251291.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
