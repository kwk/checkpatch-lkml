WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > > > dmi_scan.c is arch-independent and is used by i386, x86_64, and ia64.

WARNING:TYPO_SPELLING: 'upcomming' may be misspelled - perhaps 'upcoming'?
#48: 
> > > This conflicts with at least three patches in my upcomming x86-64 patchkit.
                                                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#445: FILE: drivers/firmware/dmi_scan.c:1:
+#include <linux/types.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#457: FILE: drivers/firmware/dmi_scan.c:13:
+	u8 *bp = ((u8 *) dm) + dm->length;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "str"
#469: FILE: drivers/firmware/dmi_scan.c:25:
+			if (str != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#472: FILE: drivers/firmware/dmi_scan.c:28:
+				printk(KERN_ERR "dmi_string: out of memory.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmi_string', this function's name, in a string
#472: FILE: drivers/firmware/dmi_scan.c:28:
+				printk(KERN_ERR "dmi_string: out of memory.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#490: FILE: drivers/firmware/dmi_scan.c:46:
+	if (buf == NULL)

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#502: FILE: drivers/firmware/dmi_scan.c:58:
+		 *  We want to know the total length (formated area and strings)
 		                                      ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#537: FILE: drivers/firmware/dmi_scan.c:93:
+	char *p, *d = (char*) dm;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#537: FILE: drivers/firmware/dmi_scan.c:93:
+	char *p, *d = (char*) dm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#543: FILE: drivers/firmware/dmi_scan.c:99:
+	if (p == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#563: FILE: drivers/firmware/dmi_scan.c:119:
+			printk(KERN_ERR "dmi_save_devices: out of memory.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmi_save_devices', this function's name, in a string
#563: FILE: drivers/firmware/dmi_scan.c:119:
+			printk(KERN_ERR "dmi_save_devices: out of memory.\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#578: FILE: drivers/firmware/dmi_scan.c:134:
+	void * data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#581: FILE: drivers/firmware/dmi_scan.c:137:
+	if (data == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#582: FILE: drivers/firmware/dmi_scan.c:138:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmi_save_ipmi_device', this function's name, in a string
#582: FILE: drivers/firmware/dmi_scan.c:138:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#590: FILE: drivers/firmware/dmi_scan.c:146:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dmi_save_ipmi_device', this function's name, in a string
#590: FILE: drivers/firmware/dmi_scan.c:146:
+		printk(KERN_ERR "dmi_save_ipmi_device: out of memory.\n");

ERROR:SPACING: space required before the open parenthesis '('
#608: FILE: drivers/firmware/dmi_scan.c:164:
+	switch(dm->type) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#636: FILE: drivers/firmware/dmi_scan.c:192:
+	u8 buf[15];
+	memcpy_fromio(buf, p, 15);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#648: FILE: drivers/firmware/dmi_scan.c:204:
+			printk(KERN_INFO "DMI %d.%d present.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#651: FILE: drivers/firmware/dmi_scan.c:207:
+			printk(KERN_INFO "DMI present.\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#652: FILE: drivers/firmware/dmi_scan.c:208:
+		if (dmi_table(base,len, num, dmi_decode) == 0)
 		                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: drivers/firmware/dmi_scan.c:223:
+               /* This is called as a core_initcall() because it isn't$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: drivers/firmware/dmi_scan.c:224:
+                * needed during early boot.  This also means we can$

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: drivers/firmware/dmi_scan.c:225:
+                * iounmap the space when we're done with it.$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#672: FILE: drivers/firmware/dmi_scan.c:228:
+		if (p == NULL)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#680: FILE: drivers/firmware/dmi_scan.c:236:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#680: FILE: drivers/firmware/dmi_scan.c:236:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#687: FILE: drivers/firmware/dmi_scan.c:243:
+		if (p == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#696: FILE: drivers/firmware/dmi_scan.c:252:
+ out:	printk(KERN_INFO "DMI not present or invalid.\n");

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#705: FILE: drivers/firmware/dmi_scan.c:261:
+ *	each successfull match. Returns the number of matches.
   	     ^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#715: FILE: drivers/firmware/dmi_scan.c:271:
+			int s = d->matches[i].slot;
+			if (s == DMI_NONE)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#757: FILE: drivers/firmware/dmi_scan.c:313:
+struct dmi_device * dmi_find_device(int type, const char *name,

ERROR:SPACING: space required before the open parenthesis '('
#762: FILE: drivers/firmware/dmi_scan.c:318:
+	for(d = head->next; d != &dmi_devices; d = d->next) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == DMI_DEV_TYPE_ANY'
#765: FILE: drivers/firmware/dmi_scan.c:321:
+		if (((type == DMI_DEV_TYPE_ANY) || (dev->type == type)) &&
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->type == type'
#765: FILE: drivers/firmware/dmi_scan.c:321:
+		if (((type == DMI_DEV_TYPE_ANY) || (dev->type == type)) &&
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'name == NULL'
#765: FILE: drivers/firmware/dmi_scan.c:321:
+		if (((type == DMI_DEV_TYPE_ANY) || (dev->type == type)) &&
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#766: FILE: drivers/firmware/dmi_scan.c:322:
+		    ((name == NULL) || (strcmp(dev->name, name) == 0)))

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#794: FILE: drivers/firmware/dmi_scan.c:350:
+	year = simple_strtoul(s, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 19 warnings, 13 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087943.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
