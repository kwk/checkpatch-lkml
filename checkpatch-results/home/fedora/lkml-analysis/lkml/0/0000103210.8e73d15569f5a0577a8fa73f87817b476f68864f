WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#44: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#88: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:40:
+ *  $Id: ehca_flightrecorder.h,v 1.5 2006/02/06 10:17:34 schickhj Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#94: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:46:
+#define ED_EXTEND1(x,ar1...) \
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#94: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:46:
+#define ED_EXTEND1(x,ar1...) \
+	unsigned long __EDEB_R2=(const unsigned long)x-0;ED_EXTEND2(ar1)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#95: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:47:
+	unsigned long __EDEB_R2=(const unsigned long)x-0;ED_EXTEND2(ar1)
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#95: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:47:
+	unsigned long __EDEB_R2=(const unsigned long)x-0;ED_EXTEND2(ar1)
 	                                              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#95: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:47:
+	unsigned long __EDEB_R2=(const unsigned long)x-0;ED_EXTEND2(ar1)
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:48:
+#define ED_EXTEND2(x,ar1...) \
                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#96: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:48:
+#define ED_EXTEND2(x,ar1...) \
+	unsigned long __EDEB_R3=(const unsigned long)x-0;ED_EXTEND3(ar1)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#97: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:49:
+	unsigned long __EDEB_R3=(const unsigned long)x-0;ED_EXTEND3(ar1)
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#97: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:49:
+	unsigned long __EDEB_R3=(const unsigned long)x-0;ED_EXTEND3(ar1)
 	                                              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#97: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:49:
+	unsigned long __EDEB_R3=(const unsigned long)x-0;ED_EXTEND3(ar1)
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:50:
+#define ED_EXTEND3(x,ar1...) \
                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#98: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:50:
+#define ED_EXTEND3(x,ar1...) \
+	unsigned long __EDEB_R4=(const unsigned long)x-0;ED_EXTEND4(ar1)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#99: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:51:
+	unsigned long __EDEB_R4=(const unsigned long)x-0;ED_EXTEND4(ar1)
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#99: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:51:
+	unsigned long __EDEB_R4=(const unsigned long)x-0;ED_EXTEND4(ar1)
 	                                              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#99: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:51:
+	unsigned long __EDEB_R4=(const unsigned long)x-0;ED_EXTEND4(ar1)
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#100: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:52:
+#define ED_EXTEND4(x,ar1...)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#109: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:61:
+#define ED_FLIGHT_LOG(x,ar1...) {                                            \
                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#109: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:61:
+#define ED_FLIGHT_LOG(x,ar1...) {                                            \
+	u32 flight_offset = ((u32)					     \
+	atomic_add_return(4, &ehca_flightrecorder_index))		     \
+	% EHCA_FLIGHTRECORDER_SIZE;					     \
+	unsigned long *flight_trline = &ehca_flightrecorder[flight_offset];  \
+	unsigned long __EDEB_R1 = (unsigned long) x-0; ED_EXTEND1(ar1)	     \
+	flight_trline[0]=__EDEB_R1,flight_trline[1]=__EDEB_R2,		     \
+	flight_trline[2]=__EDEB_R3,flight_trline[3]=__EDEB_R4; }

CHECK:SPACING: No space is necessary after a cast
#114: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:66:
+	unsigned long __EDEB_R1 = (unsigned long) x-0; ED_EXTEND1(ar1)	     \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#114: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:66:
+	unsigned long __EDEB_R1 = (unsigned long) x-0; ED_EXTEND1(ar1)	     \
 	                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:67:
+	flight_trline[0]=__EDEB_R1,flight_trline[1]=__EDEB_R2,		     \
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:67:
+	flight_trline[0]=__EDEB_R1,flight_trline[1]=__EDEB_R2,		     \
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:67:
+	flight_trline[0]=__EDEB_R1,flight_trline[1]=__EDEB_R2,		     \
 	                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#116: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:68:
+	flight_trline[2]=__EDEB_R3,flight_trline[3]=__EDEB_R4; }
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:68:
+	flight_trline[2]=__EDEB_R3,flight_trline[3]=__EDEB_R4; }
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#116: FILE: drivers/infiniband/hw/ehca/ehca_flightrecorder.h:68:
+	flight_trline[2]=__EDEB_R3,flight_trline[3]=__EDEB_R4; }
 	                                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#168: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:40:
+ *  $Id: ehca_kernel.h,v 1.39 2006/02/06 11:45:10 schickhj Exp $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#174: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:46:
+#define FALSE (1==0)
                 ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#175: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:47:
+#define TRUE (1==1)
                ^

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#185: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:57:
+ * Handle to be used for adress translation mechanisms, currently a placeholder.
                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#191: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:63:
+inline static int ehca_adr_bad(void *adr)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#207: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:79:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#215: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:87:
+#include <asm/processor.h>

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#226: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:98:
+#ifdef __powerpc64__

Architecture specific defines should be avoided wherever
possible.

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#235: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:107:
+#include <asm/pgtable.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#237: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:109:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#242: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:114:
+inline static u64 ehca_kv_to_g(void *adr)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#249: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:121:
+	 * but the absolute to account for memory segmentation */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#262: FILE: drivers/infiniband/hw/ehca/ehca_kernel.h:134:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#270: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:1:
+/*

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#310: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:41:
+ *  $Id: ehca_tools.h,v 1.43 2006/02/06 10:17:34 schickhj Exp $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#313: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:44:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#323: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:54:
+#define sizeofmember(TYPE, MEMBER) (sizeof( ((TYPE *)0)->MEMBER))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'MEMBER' may be better as '(MEMBER)' to avoid precedence issues
#323: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:54:
+#define sizeofmember(TYPE, MEMBER) (sizeof( ((TYPE *)0)->MEMBER))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str4' - possible side-effects?
#328: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:59:
+#define EDEB_ID_TO_U32(str4) (str4[3] | (str4[2] << 8) | (str4[1] << 16) | \
+			      (str4[0] << 24))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#331: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:62:
+inline static u64 ehca_edeb_filter(const u32 level,

WARNING:TYPO_SPELLING: 'everythin' may be misspelled - perhaps 'everything'?
#340: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:71:
+	 * compiler means trace everythin below 6. */
 	                        ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#340: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:71:
+	 * compiler means trace everythin below 6. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#410: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:141:
+	if ((filenr - 1) > sizeof(ehca_edeb_mask)) {
+		filenr = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#414: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:145:
+	if (filenr == 0) {
+		filter_level = 9;
+	}			/* default */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#418: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:149:
+	if (filter_level <= level) {
+		return (ret | 0x100000000); /* this is the flag to not trace */
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:168:
+    ((ehca_edeb_filter(level, EDEB_ID_TO_U32(DEB_PREFIX), __LINE__) & 0x100000000)==0)$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#437: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:168:
+    ((ehca_edeb_filter(level, EDEB_ID_TO_U32(DEB_PREFIX), __LINE__) & 0x100000000)==0)
                                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:170:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:170:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:170:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:175:
+		printk("PU%04x %08x:%s " idstring " "format "\n",	\

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#447: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:178:
+	if (unlikely(ehca_edeb_mask[0x1e]!=0))				\
 	                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxW)
#448: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:179:
+		ED_FLIGHT_LOG((((u64)(get_paca()->paca_index)<< 32) |	\
 		                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#450: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:181:
+			       (flightlog_value()&0xffffffff)), args);	\
 			                         ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#451: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:182:
+} while (1==0)
           ^

WARNING:INCLUDE_LINUX: Use #include <linux/smp.h> instead of <asm/smp.h>
#455: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:186:
+#include <asm/smp.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:187:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:187:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:187:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#461: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:192:
+		printk("PU%04x %08x:%s " idstring " "format "\n",	\

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#464: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:195:
+} while (1==0)
           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:199:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:199:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:199:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#473: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:204:
+		printk("%08x:%s " idstring " "format "\n",	\

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#476: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:207:
+} while (1==0)
           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#483: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:214:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#483: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:214:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#483: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:214:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#485: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:216:
+	printk("%s " idstring " "format "\n",	\

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#487: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:218:
+} while (1==0)
           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#498: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:229:
+#define EDEB(level,format,args...) \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#498: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:229:
+#define EDEB(level,format,args...) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#499: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:230:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#499: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:230:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#499: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:230:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#500: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:231:
+#define EDEB_ERR(level,format,args...) \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#500: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:231:
+#define EDEB_ERR(level,format,args...) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#501: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#501: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#501: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#502: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:233:
+#define EDEB_EN(level,format,args...) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#502: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:233:
+#define EDEB_EN(level,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:234:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:235:
+#define EDEB_EX(level,format,args...) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:235:
+#define EDEB_EX(level,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:236:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:236:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:236:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:244:
+#define EDEB_DMP(level,adr,len,format,args...) \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:244:
+#define EDEB_DMP(level,adr,len,format,args...) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:244:
+#define EDEB_DMP(level,adr,len,format,args...) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:244:
+#define EDEB_DMP(level,adr,len,format,args...) \
                                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#517: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:248:
+		unsigned char *deb = (unsigned char*)(adr);	\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:250:
+^I^I        EDEB(level, format " adr=%p ofs=%04x %016lx %016lx", \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#528: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:259:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#528: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:259:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:259:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'to' may be better as '(to)' to avoid precedence issues
#530: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:261:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#532: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:263:
+#define EHCA_BMASK_SHIFTPOS(mask) (((mask)>>16)&0xffff)
                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#532: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:263:
+#define EHCA_BMASK_SHIFTPOS(mask) (((mask)>>16)&0xffff)
                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#534: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:265:
+#define EHCA_BMASK_MASK(mask) (0xffffffffffffffffULL >> ((64-(mask))&0xffff))
                                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#534: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:265:
+#define EHCA_BMASK_MASK(mask) (0xffffffffffffffffULL >> ((64-(mask))&0xffff))
                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#540: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:271:
+#define EHCA_BMASK_SET(mask,value) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#540: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:271:
+#define EHCA_BMASK_SET(mask,value) \
+	((EHCA_BMASK_MASK(mask) & ((u64)(value)))<<EHCA_BMASK_SHIFTPOS(mask))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#541: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:272:
+	((EHCA_BMASK_MASK(mask) & ((u64)(value)))<<EHCA_BMASK_SHIFTPOS(mask))
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#545: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:276:
+#define EHCA_BMASK_GET(mask,value) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#545: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:276:
+#define EHCA_BMASK_GET(mask,value) \
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#546: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))
 	                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#546: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))
 	                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#546: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:285:
+extern void exit(int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:285:
+extern void exit(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#555: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:286:
+inline static void ehca_catastrophic(char *str)

ERROR:SPACING: exactly one space required after that #ifndef
#557: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:288:
+#ifndef  EHCA_USERDRIVER

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#558: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:289:
+	printk(KERN_ERR "HCAD_ERROR %s\n", str);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#568: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:299:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adr' - possible side-effects?
#568: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:299:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'adr' may be better as '(adr)' to avoid precedence issues
#568: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:299:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#568: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:299:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#569: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:300:
+	if (unlikely(adr==0)) {					\
 	                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adr' - possible side-effects?
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'adr' may be better as '(adr)' to avoid precedence issues
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr==0)) {					\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#575: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:306:
+	if (unlikely(adr==0)) {					\
 	                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#580: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:311:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'device' - possible side-effects?
#580: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:311:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#580: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:311:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#580: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:311:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#581: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:312:
+	if (unlikely(device==0)) {				\
 	                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#585: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:316:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'device' - possible side-effects?
#585: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:316:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#585: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:316:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#585: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:316:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device==0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#586: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:317:
+	if (unlikely(device==0)) {				\
 	                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#590: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:321:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pd' - possible side-effects?
#590: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:321:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pd' may be better as '(pd)' to avoid precedence issues
#590: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:321:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#590: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:321:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#591: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:322:
+	if (unlikely(pd==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#595: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:326:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pd' - possible side-effects?
#595: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:326:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pd' may be better as '(pd)' to avoid precedence issues
#595: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:326:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#595: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:326:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd==0)) {				\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#596: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:327:
+	if (unlikely(pd==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#600: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:331:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'av' - possible side-effects?
#600: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:331:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'av' may be better as '(av)' to avoid precedence issues
#600: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:331:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#600: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:331:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#601: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:332:
+	if (unlikely(av==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#605: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:336:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'av' - possible side-effects?
#605: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:336:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'av' may be better as '(av)' to avoid precedence issues
#605: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:336:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#605: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:336:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av==0)) {				\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#606: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:337:
+	if (unlikely(av==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:341:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cq' - possible side-effects?
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:341:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cq' may be better as '(cq)' to avoid precedence issues
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:341:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#610: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:341:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#611: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:342:
+	if (unlikely(cq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#615: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:346:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cq' - possible side-effects?
#615: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:346:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cq' may be better as '(cq)' to avoid precedence issues
#615: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:346:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#615: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:346:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq==0)) {				\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#616: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:347:
+	if (unlikely(cq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#620: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:351:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'eq' - possible side-effects?
#620: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:351:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'eq' may be better as '(eq)' to avoid precedence issues
#620: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:351:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#620: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:351:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#621: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:352:
+	if (unlikely(eq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:356:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'eq' - possible side-effects?
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:356:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'eq' may be better as '(eq)' to avoid precedence issues
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:356:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#625: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:356:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq==0)) {				\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#626: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:357:
+	if (unlikely(eq==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#630: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:361:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qp' - possible side-effects?
#630: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:361:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'qp' may be better as '(qp)' to avoid precedence issues
#630: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:361:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#630: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:361:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#631: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:362:
+	if (unlikely(qp==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#635: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:366:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qp' - possible side-effects?
#635: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:366:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'qp' may be better as '(qp)' to avoid precedence issues
#635: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:366:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#635: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:366:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp==0)) {				\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#636: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:367:
+	if (unlikely(qp==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#640: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:371:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mr' - possible side-effects?
#640: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:371:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mr' may be better as '(mr)' to avoid precedence issues
#640: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:371:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#640: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:371:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#641: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:372:
+	if (unlikely(mr==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#645: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:376:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mr' - possible side-effects?
#645: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:376:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mr' may be better as '(mr)' to avoid precedence issues
#645: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:376:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#645: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:376:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr==0)) {				\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#646: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:377:
+	if (unlikely(mr==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#650: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:381:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mw' - possible side-effects?
#650: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:381:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mw' may be better as '(mw)' to avoid precedence issues
#650: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:381:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#650: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:381:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#651: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:382:
+	if (unlikely(mw==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#655: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:386:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mw' - possible side-effects?
#655: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:386:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mw' may be better as '(mw)' to avoid precedence issues
#655: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:386:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#655: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:386:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw==0)) {				\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#656: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:387:
+	if (unlikely(mw==0)) {				\
 	               ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#660: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:391:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmr' - possible side-effects?
#660: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:391:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fmr' may be better as '(fmr)' to avoid precedence issues
#660: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:391:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#660: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:391:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#661: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:392:
+	if (unlikely(fmr==0)) {					\
 	                ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#665: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:396:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmr' - possible side-effects?
#665: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:396:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fmr' may be better as '(fmr)' to avoid precedence issues
#665: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:396:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#665: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:396:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr==0)) {					\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#666: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:397:
+	if (unlikely(fmr==0)) {					\
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#670: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:401:
+#define EHCA_REGISTER_PD(device,pd)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#671: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:402:
+#define EHCA_REGISTER_AV(pd,av)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#678: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:409:
+#define EHCA_REGISTER_PD(device,pd)
                                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 117 errors, 45 warnings, 76 checks, 640 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
