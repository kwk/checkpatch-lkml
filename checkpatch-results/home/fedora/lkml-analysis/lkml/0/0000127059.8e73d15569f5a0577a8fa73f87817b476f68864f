ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#68: FILE: drivers/s390/cio/chsc.c:40:
+	return (css[0]->chps[chp] ? css[0]->chps[chp]->state : -ENODEV);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#204: FILE: drivers/s390/cio/chsc.h:67:
+#define to_channelpath(dev) container_of(dev, struct channel_path, dev)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#221: FILE: drivers/s390/cio/css.c:29:
+int css_characteristics_avail = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:SPACING: No space is necessary after a cast
#260: FILE: drivers/s390/cio/css.c:433:
+	css->global_pgid.cpu_id = ((cpuid_t *) __LC_CPUID)->ident;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#261: FILE: drivers/s390/cio/css.c:434:
+	css->global_pgid.cpu_model = ((cpuid_t *) __LC_CPUID)->machine;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#264: FILE: drivers/s390/cio/css.c:437:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#275: FILE: drivers/s390/cio/css.c:448:
+	tod_high = (u32) (get_clock() >> 32);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*css[i])...) over kmalloc(sizeof(struct channel_subsystem)...)
#299: FILE: drivers/s390/cio/css.c:470:
+		css[i] = kmalloc(sizeof(struct channel_subsystem), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#335: FILE: drivers/s390/cio/css.h:41:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#371: FILE: drivers/s390/cio/css.h:148:
+};
+#define to_css(dev) container_of(dev, struct channel_subsystem, device)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127059.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 1 warnings, 7 checks, 321 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127059.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
