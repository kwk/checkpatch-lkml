WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#115: FILE: arch/i386/Kconfig:613:
+config NMI_EXTENDED
+ bool "Extended support for NMI handlers (EXPERIMENTAL)"
+ depends on EXPERIMENTAL
+ help
+   This option provides a few things that facilitate writing kernel
+   modules that handle NMIs (nonmaskable interrupts).
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#147: FILE: arch/x86_64/Kconfig:354:
+config NMI_EXTENDED
+ bool "Extended support for NMI handlers (EXPERIMENTAL)"
+ depends on EXPERIMENTAL
+ help
+   This option provides a few things that facilitate writing kernel
+   modules that handle NMIs (nonmaskable interrupts).
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: include/linux/nmi.h:7:
+ *      Written by David S. Peterson <dsp@llnl.gov> $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#169: FILE: include/linux/nmi.h:7:
<dave_peterson@pobox.com>.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: include/linux/nmi.h:41:
+/* NMI producer/consumer data structure.  For SMP safety, use one of these $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#200: FILE: include/linux/nmi.h:44:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: include/linux/nmi.h:46:
+ void *container[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: include/linux/nmi.h:49:
+ volatile int has_items[2];$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#205: FILE: include/linux/nmi.h:49:
+ volatile int has_items[2];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: include/linux/nmi.h:51:
+ int active_container_nr;  /* container for NMI handler to use */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: include/linux/nmi.h:59:
+  (nmi_producer_consumer_t *p, void *container0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: include/linux/nmi.h:60:
+   void *container1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: include/linux/nmi.h:62:
+ p->container[0] = container0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: include/linux/nmi.h:63:
+ p->container[1] = container1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: include/linux/nmi.h:64:
+ p->has_items[0] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/linux/nmi.h:65:
+ p->has_items[1] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: include/linux/nmi.h:66:
+ p->active_container_nr = 0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#228: FILE: include/linux/nmi.h:72:
+static inline void * nmi_producer_start_put (nmi_producer_consumer_t *p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#228: FILE: include/linux/nmi.h:72:
+static inline void * nmi_producer_start_put (nmi_producer_consumer_t *p)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/linux/nmi.h:74:
+ int n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/linux/nmi.h:76:
+ n = p->active_container_nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: include/linux/nmi.h:77:
+ p->has_items[n] = 1;  /* because we are about to add items */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: include/linux/nmi.h:78:
+ return p->container[n];$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: include/linux/nmi.h:85:
+static inline void * nmi_consumer_start_get (nmi_producer_consumer_t *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: include/linux/nmi.h:85:
+static inline void * nmi_consumer_start_get (nmi_producer_consumer_t *p)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: include/linux/nmi.h:87:
+ int n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: include/linux/nmi.h:90:
+ n = p->active_container_nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: include/linux/nmi.h:95:
+ p->active_container_nr = !n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: include/linux/nmi.h:96:
+ barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: include/linux/nmi.h:99:
+ p->has_items[n] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: include/linux/nmi.h:101:
+ return p->container[n];$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#263: FILE: include/linux/nmi.h:107:
+static inline int nmi_consumer_check (const nmi_producer_consumer_t *p)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: include/linux/nmi.h:109:
+ return p->has_items[p->active_container_nr];$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#278: FILE: include/linux/nmi.h:122:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/linux/nmi.h:123:
+ struct list_head link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/linux/nmi.h:124:
+ void *data;  /* pointer to user-defined data */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#286: FILE: include/linux/nmi.h:130:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/linux/nmi.h:131:
+ struct list_head head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: include/linux/nmi.h:132:
+ unsigned nr_items;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#288: FILE: include/linux/nmi.h:132:
+ unsigned nr_items;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#294: FILE: include/linux/nmi.h:138:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: include/linux/nmi.h:140:
+ nmi_producer_consumer_t queue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: include/linux/nmi.h:141:
+ struct list_head qpair[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: include/linux/nmi.h:144:
+ nmi_msgbuf_freelist_t freelists[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: include/linux/nmi.h:145:
+ int filling;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: include/linux/nmi.h:146:
+ int filling_which;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#305: FILE: include/linux/nmi.h:149:
+void nmi_msgqueue_init (nmi_msgqueue_t *q);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#306: FILE: include/linux/nmi.h:150:
+void nmi_msgqueue_send (nmi_msgqueue_t *q, nmi_msgbuf_t *msg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#307: FILE: include/linux/nmi.h:151:
+void nmi_msgqueue_receive (nmi_msgqueue_t *q, struct list_head *list);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#308: FILE: include/linux/nmi.h:152:
+nmi_msgbuf_t * nmi_msgqueue_getbuf (nmi_msgqueue_t *q);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#308: FILE: include/linux/nmi.h:152:
+nmi_msgbuf_t * nmi_msgqueue_getbuf (nmi_msgqueue_t *q);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#309: FILE: include/linux/nmi.h:153:
+void nmi_msgqueue_putbuf (nmi_msgqueue_t *q, nmi_msgbuf_t *buf);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: include/linux/nmi.h:159:
+static inline int nmi_msgqueue_check (const nmi_msgqueue_t *q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: include/linux/nmi.h:161:
+ return nmi_consumer_check(&q->queue);$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#334: FILE: include/linux/nmi.h:178:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: include/linux/nmi.h:179:
+ struct list_head link;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: include/linux/nmi.h:180:
+ nmi_defer_callback_fn_t fn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: include/linux/nmi.h:181:
+ void *data;  /* parameter passed to callback function */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: include/linux/nmi.h:182:
+ int pending;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#341: FILE: include/linux/nmi.h:185:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: include/linux/nmi.h:186:
+ nmi_producer_consumer_t list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: include/linux/nmi.h:187:
+ struct list_head listpair[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: include/linux/nmi.h:188:
+ int pending;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#347: FILE: include/linux/nmi.h:191:
+void init_nmi_defer_callback_list (nmi_defer_callback_list_t *list);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: include/linux/nmi.h:192:
+void nmi_defer_callback_set (nmi_defer_callback_list_t *list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: include/linux/nmi.h:193:
+void nmi_defer_callback_set (nmi_defer_callback_list_t *list,
+  nmi_defer_callback_t *callback);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: include/linux/nmi.h:193:
+  nmi_defer_callback_t *callback);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: include/linux/nmi.h:194:
+void __do_nmi_defer_callbacks (nmi_defer_callback_list_t *list);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: include/linux/nmi.h:196:
+static inline void init_nmi_defer_callback (nmi_defer_callback_t *callback,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: include/linux/nmi.h:197:
+static inline void init_nmi_defer_callback (nmi_defer_callback_t *callback,
+  nmi_defer_callback_fn_t fn, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: include/linux/nmi.h:197:
+  nmi_defer_callback_fn_t fn, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: include/linux/nmi.h:199:
+ callback->fn = fn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: include/linux/nmi.h:200:
+ callback->data = data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: include/linux/nmi.h:201:
+ callback->pending = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: include/linux/nmi.h:202:
+ INIT_LIST_HEAD(&callback->link);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: include/linux/nmi.h:205:
+/* Return 1 if list contains at least one pending callback.  Else return 0. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#363: FILE: include/linux/nmi.h:206:
+/* Return 1 if list contains at least one pending callback.  Else return 0. 
+static inline int nmi_defer_callback_pending

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#372: FILE: include/linux/nmi.h:215:
+static inline void do_nmi_defer_callbacks (nmi_defer_callback_list_t *list)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: include/linux/nmi.h:217:
+ if (nmi_defer_callback_pending(list))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#374: FILE: include/linux/nmi.h:217:
+ if (nmi_defer_callback_pending(list))
+  __do_nmi_defer_callbacks(list);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: include/linux/nmi.h:218:
+  __do_nmi_defer_callbacks(list);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#399: FILE: kernel/nmi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#400: FILE: kernel/nmi.c:2:
+ * linux/kernel/nmi.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: kernel/nmi.c:12:
+ * A.  This notice is required to be provided under our contract with the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: kernel/nmi.c:19:
+ *     assumes any liability or responsibility for the accuracy, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: kernel/nmi.c:24:
+ * C.  Also, reference herein to any specific commercial products, process, $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#468: FILE: kernel/nmi.c:67:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#469: FILE: kernel/nmi.c:68:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#479: FILE: kernel/nmi.c:78:
+void nmi_msgqueue_init (nmi_msgqueue_t *q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: kernel/nmi.c:80:
+ INIT_LIST_HEAD(&q->qpair[0]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: kernel/nmi.c:81:
+ INIT_LIST_HEAD(&q->qpair[1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: kernel/nmi.c:82:
+ nmi_producer_consumer_init(&q->queue, &q->qpair[0], &q->qpair[1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: kernel/nmi.c:83:
+ INIT_LIST_HEAD(&q->freelists[0].head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: kernel/nmi.c:84:
+ q->freelists[0].nr_items = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: kernel/nmi.c:85:
+ INIT_LIST_HEAD(&q->freelists[1].head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: kernel/nmi.c:86:
+ q->freelists[1].nr_items = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: kernel/nmi.c:87:
+ q->filling = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: kernel/nmi.c:88:
+ q->filling_which = 0;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#492: FILE: kernel/nmi.c:91:
+EXPORT_SYMBOL(nmi_msgqueue_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#497: FILE: kernel/nmi.c:96:
+void nmi_msgqueue_send (nmi_msgqueue_t *q, nmi_msgbuf_t *msg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: kernel/nmi.c:98:
+ list_add_tail(&msg->link,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: kernel/nmi.c:99:
+ list_add_tail(&msg->link,
+  (struct list_head *) nmi_producer_start_put(&q->queue));

CHECK:SPACING: No space is necessary after a cast
#500: FILE: kernel/nmi.c:99:
+  (struct list_head *) nmi_producer_start_put(&q->queue));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: kernel/nmi.c:99:
+  (struct list_head *) nmi_producer_start_put(&q->queue));$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#503: FILE: kernel/nmi.c:102:
+EXPORT_SYMBOL(nmi_msgqueue_send);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#510: FILE: kernel/nmi.c:109:
+void nmi_msgqueue_receive (nmi_msgqueue_t *q, struct list_head *list)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: kernel/nmi.c:111:
+ list_splice_init($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#512: FILE: kernel/nmi.c:111:
+ list_splice_init(

CHECK:SPACING: No space is necessary after a cast
#513: FILE: kernel/nmi.c:112:
+  (struct list_head *) nmi_consumer_start_get(&q->queue), list);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: kernel/nmi.c:112:
+  (struct list_head *) nmi_consumer_start_get(&q->queue), list);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#516: FILE: kernel/nmi.c:115:
+EXPORT_SYMBOL(nmi_msgqueue_receive);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#518: FILE: kernel/nmi.c:117:
+static nmi_msgbuf_t * freelist_getbuf (nmi_msgbuf_freelist_t *list)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: kernel/nmi.c:117:
+static nmi_msgbuf_t * freelist_getbuf (nmi_msgbuf_freelist_t *list)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: kernel/nmi.c:119:
+ struct list_head *item;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: kernel/nmi.c:124:
+ if (unlikely(list_empty(&list->head)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#525: FILE: kernel/nmi.c:124:
+ if (unlikely(list_empty(&list->head)))
+  return NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: kernel/nmi.c:125:
+  return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: kernel/nmi.c:127:
+ BUG_ON(list->nr_items == 0);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#528: FILE: kernel/nmi.c:127:
+ BUG_ON(list->nr_items == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: kernel/nmi.c:128:
+ item = list->head.next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: kernel/nmi.c:129:
+ list_del(item);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: kernel/nmi.c:130:
+ list->nr_items--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: kernel/nmi.c:131:
+ return list_entry(item, nmi_msgbuf_t, link);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#535: FILE: kernel/nmi.c:134:
+static inline void freelist_putbuf (nmi_msgbuf_freelist_t *list,

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: kernel/nmi.c:135:
+        nmi_msgbuf_t *buf)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: kernel/nmi.c:135:
+static inline void freelist_putbuf (nmi_msgbuf_freelist_t *list,
+        nmi_msgbuf_t *buf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: kernel/nmi.c:135:
+        nmi_msgbuf_t *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: kernel/nmi.c:137:
+ list_add(&buf->link, &list->head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: kernel/nmi.c:138:
+ list->nr_items++;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#546: FILE: kernel/nmi.c:145:
+nmi_msgbuf_t * nmi_msgqueue_getbuf (nmi_msgqueue_t *q)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#546: FILE: kernel/nmi.c:145:
+nmi_msgbuf_t * nmi_msgqueue_getbuf (nmi_msgqueue_t *q)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: kernel/nmi.c:147:
+ nmi_msgbuf_freelist_t *shorter, *longer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: kernel/nmi.c:148:
+ int list1_shorter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: kernel/nmi.c:149:
+ nmi_msgbuf_t *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: kernel/nmi.c:158:
+ if (unlikely(q->filling))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#559: FILE: kernel/nmi.c:158:
+ if (unlikely(q->filling))
+  return freelist_getbuf(&q->freelists[!q->filling_which]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: kernel/nmi.c:159:
+  return freelist_getbuf(&q->freelists[!q->filling_which]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: kernel/nmi.c:178:
+ list1_shorter = (q->freelists[1].nr_items < q->freelists[0].nr_items);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: kernel/nmi.c:179:
+ shorter = &q->freelists[list1_shorter];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: kernel/nmi.c:180:
+ longer = &q->freelists[!list1_shorter];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: kernel/nmi.c:181:
+ buf = freelist_getbuf(shorter->nr_items ? shorter : longer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: kernel/nmi.c:194:
+ list_splice_init(&shorter->head, &longer->head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: kernel/nmi.c:195:
+ longer->nr_items += shorter->nr_items;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: kernel/nmi.c:196:
+ shorter->nr_items = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: kernel/nmi.c:198:
+ return buf;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#602: FILE: kernel/nmi.c:201:
+EXPORT_SYMBOL(nmi_msgqueue_getbuf);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#612: FILE: kernel/nmi.c:211:
+void nmi_msgqueue_putbuf (nmi_msgqueue_t *q, nmi_msgbuf_t *buf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: kernel/nmi.c:213:
+ nmi_msgbuf_freelist_t *list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: kernel/nmi.c:214:
+ int filling_which;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: kernel/nmi.c:233:
+ filling_which = (q->freelists[1].nr_items < q->freelists[0].nr_items);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: kernel/nmi.c:234:
+ list = &q->freelists[filling_which];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: kernel/nmi.c:236:
+ BUG_ON(q->filling);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: kernel/nmi.c:236:
+ BUG_ON(q->filling);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: kernel/nmi.c:246:
+ q->filling_which = filling_which;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: kernel/nmi.c:247:
+ barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: kernel/nmi.c:248:
+ q->filling = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: kernel/nmi.c:249:
+ barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: kernel/nmi.c:250:
+ freelist_putbuf(list, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: kernel/nmi.c:251:
+ barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: kernel/nmi.c:252:
+ q->filling = 0;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#656: FILE: kernel/nmi.c:255:
+EXPORT_SYMBOL(nmi_msgqueue_putbuf);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#658: FILE: kernel/nmi.c:257:
+void init_nmi_defer_callback_list (nmi_defer_callback_list_t *list)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: kernel/nmi.c:259:
+ INIT_LIST_HEAD(&list->listpair[0]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: kernel/nmi.c:260:
+ INIT_LIST_HEAD(&list->listpair[1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: kernel/nmi.c:261:
+ nmi_producer_consumer_init(&list->list, &list->listpair[0],$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: kernel/nmi.c:262:
+ nmi_producer_consumer_init(&list->list, &list->listpair[0],
+   &list->listpair[1]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: kernel/nmi.c:262:
+   &list->listpair[1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: kernel/nmi.c:263:
+ list->pending = 0;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#667: FILE: kernel/nmi.c:266:
+EXPORT_SYMBOL(init_nmi_defer_callback_list);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: kernel/nmi.c:269:
+ * context.  The callback will execute when code executing outside NMI $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#675: FILE: kernel/nmi.c:273:
+void nmi_defer_callback_set (nmi_defer_callback_list_t *list,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: kernel/nmi.c:274:
+void nmi_defer_callback_set (nmi_defer_callback_list_t *list,
+  nmi_defer_callback_t *callback)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: kernel/nmi.c:274:
+  nmi_defer_callback_t *callback)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: kernel/nmi.c:276:
+ if (callback->pending)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#678: FILE: kernel/nmi.c:276:
+ if (callback->pending)
+  return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: kernel/nmi.c:277:
+  return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: kernel/nmi.c:279:
+ callback->pending = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: kernel/nmi.c:280:
+ list_add_tail(&callback->link,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: kernel/nmi.c:281:
+ list_add_tail(&callback->link,
+  (struct list_head *) nmi_producer_start_put(&list->list));

CHECK:SPACING: No space is necessary after a cast
#683: FILE: kernel/nmi.c:281:
+  (struct list_head *) nmi_producer_start_put(&list->list));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: kernel/nmi.c:281:
+  (struct list_head *) nmi_producer_start_put(&list->list));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: kernel/nmi.c:282:
+ list->pending = 1;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#687: FILE: kernel/nmi.c:285:
+EXPORT_SYMBOL(nmi_defer_callback_set);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#696: FILE: kernel/nmi.c:294:
+void __do_nmi_defer_callbacks (nmi_defer_callback_list_t *list)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: kernel/nmi.c:296:
+ struct list_head head, *item;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: kernel/nmi.c:297:
+ nmi_defer_callback_t *callback;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: kernel/nmi.c:308:
+ list->pending = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: kernel/nmi.c:309:
+ barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: kernel/nmi.c:311:
+ INIT_LIST_HEAD(&head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: kernel/nmi.c:312:
+ list_splice_init($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#714: FILE: kernel/nmi.c:312:
+ list_splice_init(

CHECK:SPACING: No space is necessary after a cast
#715: FILE: kernel/nmi.c:313:
+  (struct list_head *) nmi_consumer_start_get(&list->list),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: kernel/nmi.c:313:
+  (struct list_head *) nmi_consumer_start_get(&list->list),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: kernel/nmi.c:314:
+  &head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: kernel/nmi.c:320:
+ while (!list_empty(&head)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#722: FILE: kernel/nmi.c:320:
+ while (!list_empty(&head)) {
+  item = head.next;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: kernel/nmi.c:321:
+  item = head.next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: kernel/nmi.c:322:
+  list_del(item);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: kernel/nmi.c:323:
+  callback = list_entry(item, nmi_defer_callback_t, link);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: kernel/nmi.c:335:
+  barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: kernel/nmi.c:336:
+  callback->pending = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: kernel/nmi.c:337:
+  barrier();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: kernel/nmi.c:338:
+  callback->fn(callback->data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: kernel/nmi.c:339:
+ }$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#744: FILE: kernel/nmi.c:342:
+EXPORT_SYMBOL(__do_nmi_defer_callbacks);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197455.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 176 warnings, 13 checks, 612 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197455.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
