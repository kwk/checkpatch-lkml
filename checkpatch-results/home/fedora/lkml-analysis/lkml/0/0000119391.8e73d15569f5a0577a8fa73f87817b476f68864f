CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: arch/um/include/os.h:223:
+extern void set_sigstack(void *sig_stack, int size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: arch/um/include/os.h:224:
+extern void remove_sigstack(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: arch/um/include/os.h:225:
+extern void set_handler(int sig, void (*handler)(int), int flags, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: arch/um/include/os.h:226:
+extern int change_sig(int signal, int on);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: arch/um/include/os.h:227:
+extern void block_signals(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: arch/um/include/os.h:228:
+extern void unblock_signals(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: arch/um/include/os.h:229:
+extern int get_signals(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: arch/um/include/os.h:230:
+extern int set_signals(int enable);

CHECK:SPACING: No space is necessary after a cast
#531: FILE: arch/um/os-Linux/signal.c:55:
+				     .ss_sp	= (__ptr_t) sig_stack,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: arch/um/os-Linux/signal.c:56:
+^I^I^I^I     .ss_size ^I= size - sizeof(void *) });$

ERROR:SPACING: space required before the open parenthesis '('
#534: FILE: arch/um/os-Linux/signal.c:58:
+	if(sigaltstack(&stack, NULL) != 0)

ERROR:SPACING: space required before the open parenthesis '('
#544: FILE: arch/um/os-Linux/signal.c:68:
+	if(sigaltstack(&stack, NULL) != 0)

ERROR:SPACING: space required before the open brace '{'
#557: FILE: arch/um/os-Linux/signal.c:81:
+	while((mask = va_arg(ap, int)) != -1){

ERROR:SPACING: space required before the open parenthesis '('
#557: FILE: arch/um/os-Linux/signal.c:81:
+	while((mask = va_arg(ap, int)) != -1){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#557: FILE: arch/um/os-Linux/signal.c:81:
+	while((mask = va_arg(ap, int)) != -1){
+		sigaddset(&action.sa_mask, mask);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#563: FILE: arch/um/os-Linux/signal.c:87:
+	if(sigaction(sig, &action, NULL) < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#579: FILE: arch/um/os-Linux/signal.c:103:
+ * with the kernel code at all.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#589: FILE: arch/um/os-Linux/signal.c:113:
+	if(sigprocmask(type, &mask, NULL) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#619: FILE: arch/um/os-Linux/signal.c:143:
+	return(sigs);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required before the open parenthesis '('
#626: FILE: arch/um/os-Linux/signal.c:150:
+	if(sigprocmask(SIG_SETMASK, NULL, &mask) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#628: FILE: arch/um/os-Linux/signal.c:152:
+	return(enable_mask(&mask));

ERROR:SPACING: space required before the open parenthesis '('
#637: FILE: arch/um/os-Linux/signal.c:161:
+	if(enable & (1 << SIGIO_BIT))

ERROR:SPACING: space required before the open brace '{'
#639: FILE: arch/um/os-Linux/signal.c:163:
+	if(enable & (1 << SIGVTALRM_BIT)){

ERROR:SPACING: space required before the open parenthesis '('
#639: FILE: arch/um/os-Linux/signal.c:163:
+	if(enable & (1 << SIGVTALRM_BIT)){

ERROR:SPACING: space required before the open parenthesis '('
#648: FILE: arch/um/os-Linux/signal.c:172:
+	if(sigprocmask(SIG_UNBLOCK, &mask, &mask) < 0)

ERROR:SPACING: space required before the open parenthesis '('
#652: FILE: arch/um/os-Linux/signal.c:176:
+	if((enable & (1 << SIGIO_BIT)) == 0)

ERROR:SPACING: space required before the open brace '{'
#654: FILE: arch/um/os-Linux/signal.c:178:
+	if((enable & (1 << SIGVTALRM_BIT)) == 0){

ERROR:SPACING: space required before the open parenthesis '('
#654: FILE: arch/um/os-Linux/signal.c:178:
+	if((enable & (1 << SIGVTALRM_BIT)) == 0){

ERROR:SPACING: space required before the open parenthesis '('
#658: FILE: arch/um/os-Linux/signal.c:182:
+	if(sigprocmask(SIG_BLOCK, &mask, NULL) < 0)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#661: FILE: arch/um/os-Linux/signal.c:185:
+	return(ret);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 3 warnings, 9 checks, 357 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119391.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
