WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#48: FILE: drivers/char/Kconfig:992:
+config TCG_TPM
+	tristate "TPM Hardware Support"
+	depends on EXPERIMENTAL
+	---help---
+	  If you have a TPM security chip in your system, which
+	  implements the Trusted Computing Group's specification,
+	  say Yes and it will be accessible from within Linux. To 
+	  compile this driver as a module, choose M here; the module 
+	  will be called tpm. For more information see 
+	  www.trustedcomputinggroup.org. A implementation of the 
+	  Trusted Software Stack (TSS), the userspace enablement piece 
+	  of the specification, can be obtained at 
+	  http://sourceforge.net/projects/trousers
+	  If unsure, say N.
+
 endmenu
 

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#54: FILE: drivers/char/Kconfig:998:
+^I  say Yes and it will be accessible from within Linux. To $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: drivers/char/Kconfig:999:
+^I  compile this driver as a module, choose M here; the module $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: drivers/char/Kconfig:1000:
+^I  will be called tpm. For more information see $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: drivers/char/Kconfig:1001:
+^I  www.trustedcomputinggroup.org. A implementation of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: drivers/char/Kconfig:1002:
+^I  Trusted Software Stack (TSS), the userspace enablement piece $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: drivers/char/Kconfig:1003:
+^I  of the specification, can be obtained at $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/char/tpm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: drivers/char/tpm.c:13:
+ * Specifications at www.trustedcomputinggroup.org^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: drivers/char/tpm.c:19:
+ * $

WARNING:SPACING: Unnecessary space before function pointer arguments
#189: FILE: drivers/char/tpm.c:110:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#189: FILE: drivers/char/tpm.c:110:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#189: FILE: drivers/char/tpm.c:110:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#189: FILE: drivers/char/tpm.c:110:
+	int (*recv) (struct tpm_chip *, u8 *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#190: FILE: drivers/char/tpm.c:111:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#190: FILE: drivers/char/tpm.c:111:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#190: FILE: drivers/char/tpm.c:111:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#190: FILE: drivers/char/tpm.c:111:
+	int (*send) (struct tpm_chip *, u8 *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#191: FILE: drivers/char/tpm.c:112:
+	void (*cancel) (struct tpm_chip *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tpm_chip *' should also have an identifier name
#191: FILE: drivers/char/tpm.c:112:
+	void (*cancel) (struct tpm_chip *);

CHECK:SPACING: No space is necessary after a cast
#200: FILE: drivers/char/tpm.c:121:
+	struct tpm_chip *chip = (struct tpm_chip *) ptr;

CHECK:SPACING: No space is necessary after a cast
#212: FILE: drivers/char/tpm.c:133:
+	int *exp = (int *) ptr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: drivers/char/tpm.c:221:
+static int wait_for_stat(struct tpm_chip *chip, u8 mask, u8 val, u8 * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#305: FILE: drivers/char/tpm.c:226:
+			      (unsigned long) &expired);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#338: FILE: drivers/char/tpm.c:259:
+	if (rdx(NSC_SID_INDEX) != 0xEF) {
+		return -ENODEV;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#362: FILE: drivers/char/tpm.c:283:
+		"NSC Config "
+		"0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#410: FILE: drivers/char/tpm.c:331:
+			      (unsigned long) &expired);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#436: FILE: drivers/char/tpm.c:357:
+static int tpm_nsc_recv(struct tpm_chip *chip, u8 * buf, size_t count)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#450: FILE: drivers/char/tpm.c:371:
+	if ((data = inb(chip->base + NSC_DATA)) != NSC_COMMAND_NORMAL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#473: FILE: drivers/char/tpm.c:394:
+	if ((data = inb(chip->base + NSC_DATA)) != NSC_COMMAND_EOC) {

CHECK:SPACING: No space is necessary after a cast
#479: FILE: drivers/char/tpm.c:400:
+	native_size = (__force __be32 *) (buf + 2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#488: FILE: drivers/char/tpm.c:409:
+static int tpm_nsc_send(struct tpm_chip *chip, u8 * buf, size_t count)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#553: FILE: drivers/char/tpm.c:474:
+	if (rdx(4) != 'A' || rdx(5) != 'T' || rdx(6) != 'M'
+	    || rdx(7) != 'L') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#558: FILE: drivers/char/tpm.c:479:
+	if ((version[0] = rdx(0x00)) != 0xFF) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#574: FILE: drivers/char/tpm.c:495:
+static int tpm_atml_recv(struct tpm_chip *chip, u8 * buf, size_t count)

CHECK:SPACING: No space is necessary after a cast
#596: FILE: drivers/char/tpm.c:517:
+	native_size = (__force __be32 *) (hdr + 2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#623: FILE: drivers/char/tpm.c:544:
+static int tpm_atml_send(struct tpm_chip *chip, u8 * buf, size_t count)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_atml_send', this function's name, in a string
#627: FILE: drivers/char/tpm.c:548:
+	dev_dbg(&chip->pci_dev->dev, "tpm_atml_send: ");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#652: FILE: drivers/char/tpm.c:573:
+	native_size = (__force __be32 *) (buf + 2);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#659: FILE: drivers/char/tpm.c:580:
+			"invalid count value %x %x \n", count, bufsiz);

CHECK:SPACING: No space is necessary after a cast
#663: FILE: drivers/char/tpm.c:584:
+	if ((len = chip->send(chip, (u8 *) buf, count)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#663: FILE: drivers/char/tpm.c:584:
+	if ((len = chip->send(chip, (u8 *) buf, count)) < 0) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_transmit', this function's name, in a string
#665: FILE: drivers/char/tpm.c:586:
+			"tpm_transmit: tpm_send: error %d\n", len);

CHECK:SPACING: No space is necessary after a cast
#673: FILE: drivers/char/tpm.c:594:
+	chip->tpm_timer.data = (unsigned long) &chip->tpm_time_expired;

WARNING:LINE_SPACING: Missing a blank line after declarations
#678: FILE: drivers/char/tpm.c:599:
+		u8 status = inb(chip->base + 1);
+		if ((status & chip->req_complete_mask) ==

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#686: FILE: drivers/char/tpm.c:607:
+	if (!chip->tpm_time_expired)
[...]
+	else {
[...]

CHECK:SPACING: No space is necessary after a cast
#687: FILE: drivers/char/tpm.c:608:
+		len = chip->recv(chip, (u8 *) buf, bufsiz);

CHECK:BRACES: Unbalanced braces around else statement
#688: FILE: drivers/char/tpm.c:609:
+	else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tpm_transmit', this function's name, in a string
#695: FILE: drivers/char/tpm.c:616:
+			"tpm_transmit: tpm_recv: error %d\n", len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#716: FILE: drivers/char/tpm.c:637:
+	if (chip == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#733: FILE: drivers/char/tpm.c:654:
+	chip->userspace_buffer =
+	    kmalloc(TPM_BUFSIZE * sizeof(u8), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip->userspace_buffer"
#735: FILE: drivers/char/tpm.c:656:
+	if (chip->userspace_buffer == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#755: FILE: drivers/char/tpm.c:676:
+	if (chip == NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#771: FILE: drivers/char/tpm.c:692:
+static ssize_t tpm_write(struct file *file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#772: FILE: drivers/char/tpm.c:693:
+			 size_t size, loff_t * off)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#777: FILE: drivers/char/tpm.c:698:
+	if (chip == NULL)

CHECK:SPACING: No space is necessary after a cast
#783: FILE: drivers/char/tpm.c:704:
+			   (void __user *) buf, size)) {

CHECK:SPACING: No space is necessary after a cast
#791: FILE: drivers/char/tpm.c:712:
+	chip->user_read_timer.data = (unsigned long) chip;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#800: FILE: drivers/char/tpm.c:721:
+static ssize_t tpm_read(struct file *file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#801: FILE: drivers/char/tpm.c:722:
+			size_t size, loff_t * off)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#806: FILE: drivers/char/tpm.c:727:
+	if (chip == NULL)

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#810: FILE: drivers/char/tpm.c:731:
+		dev_err(&chip->pci_dev->dev, "Timeout occured\n");
 		                                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#832: FILE: drivers/char/tpm.c:753:
+	if (copy_to_user((void __user *) buf,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#843: FILE: drivers/char/tpm.c:764:
+static struct file_operations tpm_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#852: FILE: drivers/char/tpm.c:773:
+static int __devinit tpm_probe(struct pci_dev *pci_dev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#864: FILE: drivers/char/tpm.c:785:
+	if (chip == NULL) {

CHECK:SPACING: No space is necessary after a cast
#879: FILE: drivers/char/tpm.c:800:
+	devname[3] = (u8) (dev_cnt + '0');

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pci_dev->dev
#882: FILE: drivers/char/tpm.c:803:
+	chip->miscdev.dev = &(pci_dev->dev);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#933: FILE: drivers/char/tpm.c:854:
+static void __devexit tpm_remove(struct pci_dev *pci_dev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#937: FILE: drivers/char/tpm.c:858:
+	if (chip == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#980: FILE: drivers/char/tpm.c:901:
+	struct tpm_chip *chip = pci_get_drvdata(pci_dev);
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#980: FILE: drivers/char/tpm.c:901:
+	if (chip == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#994: FILE: drivers/char/tpm.c:915:
+	struct tpm_chip *chip = pci_get_drvdata(pci_dev);
+	if (chip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#994: FILE: drivers/char/tpm.c:915:
+	if (chip == NULL)

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1004: FILE: drivers/char/tpm.c:925:
+static struct pci_device_id tpm_pci_tbl[] __devinitdata = {

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1064: FILE: MAINTAINERS:2149:
+P:	Kylene Hall
+M:	tpmdd-devel@lists.sourceforge.net

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 28 warnings, 27 checks, 1010 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
