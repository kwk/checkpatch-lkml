WARNING:TYPO_SPELLING: 'Seperates' may be misspelled - perhaps 'Separates'?
#28: 
Seperates isofs_sb_info from struct super_block.
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#97: FILE: fs/isofs/dir.c:217:
 			} else
[...]
+			if (sbi->s_mapping == 'a') {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#103: FILE: fs/isofs/dir.c:222:
 			} else
+			if (sbi->s_mapping == 'n') {

ERROR:POINTER_LOCATION: "foo	      * bar" should be "foo	      *bar"
#148: FILE: fs/isofs/inode.c:531:
+	struct isofs_sb_info	      * sbi;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sbi)...) over kmalloc(sizeof(struct isofs_sb_info)...)
#150: FILE: fs/isofs/inode.c:533:
+	sbi = kmalloc(sizeof(struct isofs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#186: FILE: fs/isofs/inode.c:657:
+	if(sbi->s_high_sierra){
 	  rootp = (struct iso_directory_record *) h_pri->root_directory_record;

ERROR:SPACING: space required before the open brace '{'
#186: FILE: fs/isofs/inode.c:657:
+	if(sbi->s_high_sierra){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#186: FILE: fs/isofs/inode.c:657:
+	if(sbi->s_high_sierra){

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#195: FILE: fs/isofs/inode.c:663:
+	  sbi->s_nzones = isonum_733 (h_pri->volume_space_size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#196: FILE: fs/isofs/inode.c:664:
+	  sbi->s_log_zone_size = isonum_723 (h_pri->logical_block_size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#207: FILE: fs/isofs/inode.c:672:
+	  sbi->s_nzones = isonum_733 (pri->volume_space_size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#208: FILE: fs/isofs/inode.c:673:
+	  sbi->s_log_zone_size = isonum_723 (pri->logical_block_size);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#228: FILE: fs/isofs/inode.c:691:
+	switch (sbi->s_log_zone_size)
+	  { case  512: sbi->s_log_zone_size =  9; break;

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#230: FILE: fs/isofs/inode.c:693:
+	    case 1024: sbi->s_log_zone_size = 10; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#230: FILE: fs/isofs/inode.c:693:
+	    case 1024: sbi->s_log_zone_size = 10; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TABSTOP: Statements should start on a tabstop
#231: FILE: fs/isofs/inode.c:694:
+	    case 2048: sbi->s_log_zone_size = 11; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#231: FILE: fs/isofs/inode.c:694:
+	    case 2048: sbi->s_log_zone_size = 11; break;

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: fs/isofs/inode.c:725:
+	if(sbi->s_high_sierra)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#281: FILE: fs/isofs/inode.c:778:
+		if (! sbi->s_nls_iocharset) {
 		    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: fs/isofs/inode.c:905:
+                  << (ISOFS_SB(sb)->s_log_zone_size - sb->s_blocksize_bits));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: fs/isofs/inode.c:905:
+                  << (ISOFS_SB(sb)->s_log_zone_size - sb->s_blocksize_bits));$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'volume_seq_no != 0'
#488: FILE: fs/isofs/inode.c:1325:
+	if (sbi->s_cruft == 'n' &&
 	    (volume_seq_no != 0) && (volume_seq_no != 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'volume_seq_no != 1'
#488: FILE: fs/isofs/inode.c:1325:
+	if (sbi->s_cruft == 'n' &&
 	    (volume_seq_no != 0) && (volume_seq_no != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'volume_seq_no != 0'
#500: FILE: fs/isofs/inode.c:1335:
+	if (sbi->s_cruft != 'y' &&
 	    (volume_seq_no != 0) && (volume_seq_no != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'volume_seq_no != 1'
#500: FILE: fs/isofs/inode.c:1335:
+	if (sbi->s_cruft != 'y' &&
 	    (volume_seq_no != 0) && (volume_seq_no != 1)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#534: FILE: fs/isofs/namei.c:124:
+		if (sbi->s_rock &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#560: FILE: fs/isofs/namei.c:147:
+		    (!(de->flags[-sbi->s_high_sierra] & 5)
+		     || sbi->s_unhide == 'y'))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: fs/isofs/rock.c:35:
+      ISOFS_SB(inode->i_sb)->s_rock_offset=rr->u.SP.skip;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#572: FILE: fs/isofs/rock.c:35:
+      ISOFS_SB(inode->i_sb)->s_rock_offset=rr->u.SP.skip;
                                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: fs/isofs/rock.c:54:
+  if (ISOFS_SB(inode->i_sb)->s_rock_offset!=-1)                \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 2)
#581: FILE: fs/isofs/rock.c:54:
+  if (ISOFS_SB(inode->i_sb)->s_rock_offset!=-1)                \
   {                                                             \

ERROR:SPACING: spaces required around that '!=' (ctx:VxO)
#581: FILE: fs/isofs/rock.c:54:
+  if (ISOFS_SB(inode->i_sb)->s_rock_offset!=-1)                \
                                           ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#581: FILE: fs/isofs/rock.c:54:
+  if (ISOFS_SB(inode->i_sb)->s_rock_offset!=-1)                \
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: fs/isofs/rock.c:56:
+     LEN-=ISOFS_SB(inode->i_sb)->s_rock_offset;                \$

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#585: FILE: fs/isofs/rock.c:56:
+     LEN-=ISOFS_SB(inode->i_sb)->s_rock_offset;                \
         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#586: FILE: fs/isofs/rock.c:57:
+     CHR+=ISOFS_SB(inode->i_sb)->s_rock_offset;                \$

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#586: FILE: fs/isofs/rock.c:57:
+     CHR+=ISOFS_SB(inode->i_sb)->s_rock_offset;                \
         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: fs/isofs/rock.c:105:
+  if (!ISOFS_SB(inode->i_sb)->s_rock) return retval;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#595: FILE: fs/isofs/rock.c:105:
+  if (!ISOFS_SB(inode->i_sb)->s_rock) return retval;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: fs/isofs/rock.c:165:
+  if (!ISOFS_SB(inode->i_sb)->s_rock) return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#604: FILE: fs/isofs/rock.c:165:
+  if (!ISOFS_SB(inode->i_sb)->s_rock) return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: fs/isofs/rock.c:237:
+  if (!ISOFS_SB(inode->i_sb)->s_rock) return 0;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#613: FILE: fs/isofs/rock.c:237:
+  if (!ISOFS_SB(inode->i_sb)->s_rock) return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#640: FILE: fs/isofs/rock.c:388:
+	      if ( !ISOFS_SB(inode->i_sb)->s_nocompress ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 22)
#640: FILE: fs/isofs/rock.c:388:
+	      if ( !ISOFS_SB(inode->i_sb)->s_nocompress ) {
 		      int algo;

ERROR:SPACING: space prohibited after that open parenthesis '('
#640: FILE: fs/isofs/rock.c:388:
+	      if ( !ISOFS_SB(inode->i_sb)->s_nocompress ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#640: FILE: fs/isofs/rock.c:388:
+	      if ( !ISOFS_SB(inode->i_sb)->s_nocompress ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: fs/isofs/rock.c:481:
+   if ((ISOFS_SB(inode->i_sb)->s_rock_offset==-1)$

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#650: FILE: fs/isofs/rock.c:481:
+   if ((ISOFS_SB(inode->i_sb)->s_rock_offset==-1)
                                             ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#650: FILE: fs/isofs/rock.c:481:
+   if ((ISOFS_SB(inode->i_sb)->s_rock_offset==-1)
                                               ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#651: FILE: fs/isofs/rock.c:482:
+   if ((ISOFS_SB(inode->i_sb)->s_rock_offset==-1)
+       &&(ISOFS_SB(inode->i_sb)->s_rock==2))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: fs/isofs/rock.c:482:
+       &&(ISOFS_SB(inode->i_sb)->s_rock==2))$

ERROR:SPACING: spaces required around that '&&' (ctx:ExV)
#651: FILE: fs/isofs/rock.c:482:
+       &&(ISOFS_SB(inode->i_sb)->s_rock==2))
        ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#651: FILE: fs/isofs/rock.c:482:
+       &&(ISOFS_SB(inode->i_sb)->s_rock==2))
                                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 23 warnings, 7 checks, 599 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000469293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
