WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
It's not just xtime but jiffies also needs to be recovered. My understanding

WARNING:TYPO_SPELLING: 'becasue' may be misspelled - perhaps 'because'?
#64: 
	Lets say that this check was true (becasue CPU0 and CPU1 both
	                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'cann' may be misspelled - perhaps 'can'?
#254: 
> that function again, we cann call current_dyntick_timer->recover_time()
                          ^^^^

WARNING:TYPO_SPELLING: 'initalized' may be misspelled - perhaps 'initialized'?
#265: 
	a. dyn_tick_timer structure is initalized and registered 
	                               ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#286: 
	   whether is atleast min_skip away. If so, it calls
	              ^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#361: FILE: kernel/dyn-tick.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#362: FILE: kernel/dyn-tick.c:2:
+ * linux/kernel/dyn-tick.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#409: FILE: kernel/dyn-tick.c:49:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#412: FILE: kernel/dyn-tick.c:52:
+	smp_wmb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: kernel/dyn-tick.c:80:
+        unsigned long flags;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: kernel/dyn-tick.c:80:
+        unsigned long flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: kernel/dyn-tick.c:81:
+        int ret = -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: kernel/dyn-tick.c:81:
+        int ret = -ENODEV;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: kernel/dyn-tick.c:83:
+        if (dyn_tick) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: kernel/dyn-tick.c:83:
+        if (dyn_tick) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: kernel/dyn-tick.c:84:
+                write_seqlock_irqsave(&xtime_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: kernel/dyn-tick.c:84:
+                write_seqlock_irqsave(&xtime_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: kernel/dyn-tick.c:85:
+                ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: kernel/dyn-tick.c:85:
+                ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: kernel/dyn-tick.c:86:
+                if (!dyn_tick_enabled())$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: kernel/dyn-tick.c:86:
+                if (!dyn_tick_enabled())$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: kernel/dyn-tick.c:87:
+                        ret = dyn_tick->enable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: kernel/dyn-tick.c:87:
+                        ret = dyn_tick->enable();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: kernel/dyn-tick.c:89:
+                        if (ret == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: kernel/dyn-tick.c:89:
+                        if (ret == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: kernel/dyn-tick.c:90:
+                                dyn_tick->state |= DYN_TICK_ENABLED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: kernel/dyn-tick.c:90:
+                                dyn_tick->state |= DYN_TICK_ENABLED;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: kernel/dyn-tick.c:91:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: kernel/dyn-tick.c:91:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: kernel/dyn-tick.c:92:
+                write_sequnlock_irqrestore(&xtime_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: kernel/dyn-tick.c:92:
+                write_sequnlock_irqrestore(&xtime_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: kernel/dyn-tick.c:93:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: kernel/dyn-tick.c:93:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: kernel/dyn-tick.c:95:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: kernel/dyn-tick.c:95:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: kernel/dyn-tick.c:100:
+        unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: kernel/dyn-tick.c:100:
+        unsigned long flags;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: kernel/dyn-tick.c:101:
+        int ret = -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: kernel/dyn-tick.c:101:
+        int ret = -ENODEV;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: kernel/dyn-tick.c:103:
+        if (dyn_tick) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: kernel/dyn-tick.c:103:
+        if (dyn_tick) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: kernel/dyn-tick.c:104:
+                write_seqlock_irqsave(&xtime_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: kernel/dyn-tick.c:104:
+                write_seqlock_irqsave(&xtime_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: kernel/dyn-tick.c:105:
+                ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: kernel/dyn-tick.c:105:
+                ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: kernel/dyn-tick.c:106:
+                if (dyn_tick_enabled())$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: kernel/dyn-tick.c:106:
+                if (dyn_tick_enabled())$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: kernel/dyn-tick.c:107:
+                        ret = dyn_tick->disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: kernel/dyn-tick.c:107:
+                        ret = dyn_tick->disable();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#469: FILE: kernel/dyn-tick.c:109:
+                        if (ret == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: kernel/dyn-tick.c:109:
+                        if (ret == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: kernel/dyn-tick.c:110:
+                                dyn_tick->state &= ~DYN_TICK_ENABLED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: kernel/dyn-tick.c:110:
+                                dyn_tick->state &= ~DYN_TICK_ENABLED;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: kernel/dyn-tick.c:111:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: kernel/dyn-tick.c:111:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: kernel/dyn-tick.c:112:
+                write_sequnlock_irqrestore(&xtime_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: kernel/dyn-tick.c:112:
+                write_sequnlock_irqrestore(&xtime_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: kernel/dyn-tick.c:113:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: kernel/dyn-tick.c:113:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: kernel/dyn-tick.c:115:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: kernel/dyn-tick.c:115:
+        return ret;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#478: FILE: kernel/dyn-tick.c:118:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#482: FILE: kernel/dyn-tick.c:122:
+	printk(KERN_INFO "dyn-tick: Registering dynamic tick timer v%s\n",

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#503: FILE: kernel/dyn-tick.c:143:
+	unsigned int enable = simple_strtoul(buf, NULL, 2);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#532: FILE: kernel/dyn-tick.c:172:
+	if ((error = sysdev_class_register(&dyn_tick_sysclass)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#534: FILE: kernel/dyn-tick.c:174:
+	if ((error = sysdev_register(&device_dyn_tick)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#547: FILE: include/linux/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#548: FILE: include/linux/dyn-tick.h:2:
+ * linux/include/linux/dyn-tick.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#565: FILE: include/linux/dyn-tick.h:19:
+#define DYN_TICK_ENABLED	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#570: FILE: include/linux/dyn-tick.h:24:
+ * @state^I     ^I: current state (bitfield)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#571: FILE: include/linux/dyn-tick.h:25:
+ * @max_skip^I     ^I: maximum number of ticks to skip$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: include/linux/dyn-tick.h:27:
+ * @enable_dyn_tick  ^I: called via sysfs to enable interrupt skipping$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: include/linux/dyn-tick.h:28:
+ * @disable_dyn_tick ^I: called via sysfs to disable interrupt skipping$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#575: FILE: include/linux/dyn-tick.h:29:
+ * @reprogram^I     ^I: reprogram the interrupt source to skip ticks.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: include/linux/dyn-tick.h:30:
+^I               ^I  Passed with one argument - the number of ticks$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#576: FILE: include/linux/dyn-tick.h:30:
+^I               ^I  Passed with one argument - the number of ticks$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#579: FILE: include/linux/dyn-tick.h:33:
+ * @recover_time ^I: handler to recover time. Called when coming out of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#585: FILE: include/linux/dyn-tick.h:39:
+ * ^I^I^I  with modifications to nohz_cpu_mask.$

WARNING:SPACING: Unnecessary space before function pointer arguments
#592: FILE: include/linux/dyn-tick.h:46:
+	void (*enable) (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#593: FILE: include/linux/dyn-tick.h:47:
+	void (*disable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#594: FILE: include/linux/dyn-tick.h:48:
+	unsigned long (*reprogram) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#594: FILE: include/linux/dyn-tick.h:48:
+	unsigned long (*reprogram) (unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#595: FILE: include/linux/dyn-tick.h:49:
+	unsigned long (*recover_time) (int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#595: FILE: include/linux/dyn-tick.h:49:
+	unsigned long (*recover_time) (int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#595: FILE: include/linux/dyn-tick.h:49:
+	unsigned long (*recover_time) (int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#595: FILE: include/linux/dyn-tick.h:49:
+	unsigned long (*recover_time) (int, void *, struct pt_regs *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#596: FILE: include/linux/dyn-tick.h:50:
+	void (*enter_all_cpus_idle) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#596: FILE: include/linux/dyn-tick.h:50:
+	void (*enter_all_cpus_idle) (int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#597: FILE: include/linux/dyn-tick.h:51:
+	void (*exit_all_cpus_idle) (int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#597: FILE: include/linux/dyn-tick.h:51:
+	void (*exit_all_cpus_idle) (int);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#598: FILE: include/linux/dyn-tick.h:52:
+	spinlock_t lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: include/linux/dyn-tick.h:57:
+extern void dyn_tick_timer_register(struct dyn_tick_timer *new_dyntick_timer);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: include/linux/dyn-tick.h:58:
+extern int dyn_tick_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: include/linux/dyn-tick.h:59:
+extern int dyn_tick_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: include/linux/dyn-tick.h:62:
+extern unsigned int dyn_tick_reprogram_timer(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 58 warnings, 8 checks, 266 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
