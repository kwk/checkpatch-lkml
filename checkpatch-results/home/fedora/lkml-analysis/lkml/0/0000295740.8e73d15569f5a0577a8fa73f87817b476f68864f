WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
Config is added under "General options" and it defaults to same behavior as so 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/oom_notify.h:1:
+#ifndef _LINUX_OOM_NOTIFY_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#76: FILE: include/linux/oom_notify.h:4:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#80: FILE: include/linux/oom_notify.h:8:
+#define dbg(format, arg...)					\
+do {							\
+		printk (KERN_DEBUG "Out of memory: " format "\n",	## arg);                        \
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#81: FILE: include/linux/oom_notify.h:9:
+do {							\
+		printk (KERN_DEBUG "Out of memory: " format "\n",	## arg);                        \

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#82: FILE: include/linux/oom_notify.h:10:
+		printk (KERN_DEBUG "Out of memory: " format "\n",	## arg);                        \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#82: FILE: include/linux/oom_notify.h:10:
+		printk (KERN_DEBUG "Out of memory: " format "\n",	## arg);                        \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#82: FILE: include/linux/oom_notify.h:10:
+		printk (KERN_DEBUG "Out of memory: " format "\n",	## arg);                        \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: include/linux/oom_notify.h:11:
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#88: FILE: include/linux/oom_notify.h:16:
+#define warn(format, arg...)					  \
+do {							  \
+		printk (KERN_WARNING "Out of memory: " format "\n", ## arg);                          \
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#89: FILE: include/linux/oom_notify.h:17:
+do {							  \
+		printk (KERN_WARNING "Out of memory: " format "\n", ## arg);                          \

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#90: FILE: include/linux/oom_notify.h:18:
+		printk (KERN_WARNING "Out of memory: " format "\n", ## arg);                          \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#90: FILE: include/linux/oom_notify.h:18:
+		printk (KERN_WARNING "Out of memory: " format "\n", ## arg);                          \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#90: FILE: include/linux/oom_notify.h:18:
+		printk (KERN_WARNING "Out of memory: " format "\n", ## arg);                          \

ERROR:SPACING: space required before the open parenthesis '('
#91: FILE: include/linux/oom_notify.h:19:
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#96: FILE: include/linux/oom_notify.h:24:
+#define info(format, arg...)					  \
+do {							  \
+		printk (KERN_INFO "Out of Memory: " format "\n", ## arg);                          \
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#97: FILE: include/linux/oom_notify.h:25:
+do {							  \
+		printk (KERN_INFO "Out of Memory: " format "\n", ## arg);                          \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#98: FILE: include/linux/oom_notify.h:26:
+		printk (KERN_INFO "Out of Memory: " format "\n", ## arg);                          \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#98: FILE: include/linux/oom_notify.h:26:
+		printk (KERN_INFO "Out of Memory: " format "\n", ## arg);                          \

ERROR:SPACING: space required before the open parenthesis '('
#99: FILE: include/linux/oom_notify.h:27:
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#104: FILE: include/linux/oom_notify.h:32:
+#define error(format, arg...)					        \
+do {							        \
+		printk (KERN_ERR "Out of Memory: " format "\n",	## arg);                                \
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#105: FILE: include/linux/oom_notify.h:33:
+do {							        \
+		printk (KERN_ERR "Out of Memory: " format "\n",	## arg);                                \

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#106: FILE: include/linux/oom_notify.h:34:
+		printk (KERN_ERR "Out of Memory: " format "\n",	## arg);                                \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#106: FILE: include/linux/oom_notify.h:34:
+		printk (KERN_ERR "Out of Memory: " format "\n",	## arg);                                \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#106: FILE: include/linux/oom_notify.h:34:
+		printk (KERN_ERR "Out of Memory: " format "\n",	## arg);                                \

ERROR:SPACING: space required before the open parenthesis '('
#107: FILE: include/linux/oom_notify.h:35:
+} while(0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: include/linux/oom_notify.h:37:
+int register_oom_notifier(struct notifier_block * nb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: include/linux/oom_notify.h:38:
+int unregister_oom_notifier(struct notifier_block * nb);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#120: FILE: include/linux/sysctl.h:161:
+	VM_OOM=22,   /* Out of memory */
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: init/Kconfig:200:
+config OOM_KILLER_CLASSIC^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: init/Kconfig:207:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: init/Kconfig:209:
+^I^I^I  ^I  $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#172: FILE: kernel/fork.c:452:
+EXPORT_SYMBOL_GPL(mmput);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#181: FILE: kernel/fork.c:471:
+EXPORT_SYMBOL_GPL(mmgrab);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#236: FILE: mm/oom_kill.c:105:
+	dbg("Task %d (%s) got %d points",p->pid, p->comm, points);
 	                                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: mm/oom_kill.c:306:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: mm/oom_kill.c:306:
+static int oom_notify(struct notifier_block * s, unsigned long v, void * d)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#315: FILE: mm/oom_notify.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#316: FILE: mm/oom_notify.c:2:
+ * linux/mm/oom_notify.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#326: FILE: mm/oom_notify.c:12:
+static struct notifier_block * oom_notify_list = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#326: FILE: mm/oom_notify.c:12:
+static struct notifier_block * oom_notify_list = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#328: FILE: mm/oom_notify.c:14:
+int register_oom_notifier(struct notifier_block * nb)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#340: FILE: mm/oom_notify.c:26:
+int unregister_oom_notifier(struct notifier_block * nb)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#366: FILE: mm/page_alloc.c:1061:
+EXPORT_SYMBOL_GPL(show_free_areas);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: mm/vmscan.c:896:
+#ifdef CONFIG_OOM_KILLER^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000295740.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 26 warnings, 1 checks, 281 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000295740.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
