WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Specifically, UML used to capture a host signal frame and use it as a template

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#108: FILE: arch/um/include/frame_kern.h:9:
+#define _S(nr) (1<<((nr)-1))
                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#108: FILE: arch/um/include/frame_kern.h:9:
+#define _S(nr) (1<<((nr)-1))
                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1291: FILE: arch/um/sys-i386/sigcontext.c:18:
+	if(from->fpstate != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "from->fpstate"
#1291: FILE: arch/um/sys-i386/sigcontext.c:18:
+	if(from->fpstate != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1292: FILE: arch/um/sys-i386/sigcontext.c:19:
+		to->fpstate = (struct _fpstate *) (to + 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1301: FILE: arch/um/sys-i386/signal.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1301: FILE: arch/um/sys-i386/signal.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1322: FILE: arch/um/sys-i386/signal.c:22:
+static int copy_sc_from_user_skas(struct pt_regs *regs, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1325: FILE: arch/um/sys-i386/signal.c:25:
+  ^Istruct sigcontext sc;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1325: FILE: arch/um/sys-i386/signal.c:25:
+  ^Istruct sigcontext sc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: arch/um/sys-i386/signal.c:25:
+  ^Istruct sigcontext sc;$

ERROR:SPACING: space required before the open parenthesis '('
#1331: FILE: arch/um/sys-i386/signal.c:31:
+	if(err)

ERROR:SPACING: space required before the open brace '{'
#1355: FILE: arch/um/sys-i386/signal.c:55:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#1355: FILE: arch/um/sys-i386/signal.c:55:
+	if(err < 0){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1356: FILE: arch/um/sys-i386/signal.c:56:
+^I  ^Iprintk("copy_sc_from_user_skas - PTRACE_SETFPREGS failed, "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1356: FILE: arch/um/sys-i386/signal.c:56:
+^I  ^Iprintk("copy_sc_from_user_skas - PTRACE_SETFPREGS failed, "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1356: FILE: arch/um/sys-i386/signal.c:56:
+	  	printk("copy_sc_from_user_skas - PTRACE_SETFPREGS failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_sc_from_user_skas', this function's name, in a string
#1356: FILE: arch/um/sys-i386/signal.c:56:
+	  	printk("copy_sc_from_user_skas - PTRACE_SETFPREGS failed, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1357: FILE: arch/um/sys-i386/signal.c:57:
+	  	printk("copy_sc_from_user_skas - PTRACE_SETFPREGS failed, "
+		       "errno = %d\n", err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1358: FILE: arch/um/sys-i386/signal.c:58:
+		return(1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1364: FILE: arch/um/sys-i386/signal.c:64:
+int copy_sc_to_user_skas(struct sigcontext *to, struct _fpstate *to_fp, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1365: FILE: arch/um/sys-i386/signal.c:65:
+^I^I^I struct pt_regs *regs, unsigned long fault_addr, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: arch/um/sys-i386/signal.c:68:
+  ^Istruct sigcontext sc;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1368: FILE: arch/um/sys-i386/signal.c:68:
+  ^Istruct sigcontext sc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: arch/um/sys-i386/signal.c:68:
+  ^Istruct sigcontext sc;$

ERROR:SPACING: space required before the open brace '{'
#1394: FILE: arch/um/sys-i386/signal.c:94:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#1394: FILE: arch/um/sys-i386/signal.c:94:
+	if(err < 0){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1395: FILE: arch/um/sys-i386/signal.c:95:
+^I  ^Iprintk("copy_sc_to_user_skas - PTRACE_GETFPREGS failed, "$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1395: FILE: arch/um/sys-i386/signal.c:95:
+^I  ^Iprintk("copy_sc_to_user_skas - PTRACE_GETFPREGS failed, "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1395: FILE: arch/um/sys-i386/signal.c:95:
+	  	printk("copy_sc_to_user_skas - PTRACE_GETFPREGS failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_sc_to_user_skas', this function's name, in a string
#1395: FILE: arch/um/sys-i386/signal.c:95:
+	  	printk("copy_sc_to_user_skas - PTRACE_GETFPREGS failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#1396: FILE: arch/um/sys-i386/signal.c:96:
+	  	printk("copy_sc_to_user_skas - PTRACE_GETFPREGS failed, "
+		       "errno = %d\n", err);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1397: FILE: arch/um/sys-i386/signal.c:97:
+		return(1);

CHECK:SPACING: No space is necessary after a cast
#1399: FILE: arch/um/sys-i386/signal.c:99:
+	to_fp = (to_fp ? to_fp : (struct _fpstate *) (to + 1));

ERROR:SPACING: space required before the open parenthesis '('
#1402: FILE: arch/um/sys-i386/signal.c:102:
+	if(err)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1403: FILE: arch/um/sys-i386/signal.c:103:
+^I  ^Ireturn(err);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1403: FILE: arch/um/sys-i386/signal.c:103:
+^I  ^Ireturn(err);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1411: FILE: arch/um/sys-i386/signal.c:111:
+int copy_sc_from_user_tt(struct sigcontext *to, struct sigcontext *from, $

ERROR:SPACING: space required before the open brace '{'
#1423: FILE: arch/um/sys-i386/signal.c:123:
+	if(to_fp != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#1423: FILE: arch/um/sys-i386/signal.c:123:
+	if(to_fp != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "to_fp"
#1423: FILE: arch/um/sys-i386/signal.c:123:
+	if(to_fp != NULL){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1431: FILE: arch/um/sys-i386/signal.c:131:
+int copy_sc_to_user_tt(struct sigcontext *to, struct _fpstate *fp, $

CHECK:SPACING: No space is necessary after a cast
#1437: FILE: arch/um/sys-i386/signal.c:137:
+	to_fp =	(fp ? fp : (struct _fpstate *) (to + 1));

ERROR:SPACING: space required before the open brace '{'
#1440: FILE: arch/um/sys-i386/signal.c:140:
+	if(from_fp != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#1440: FILE: arch/um/sys-i386/signal.c:140:
+	if(from_fp != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "from_fp"
#1440: FILE: arch/um/sys-i386/signal.c:140:
+	if(from_fp != NULL){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1456: FILE: arch/um/sys-i386/signal.c:156:
+	return(ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1459: FILE: arch/um/sys-i386/signal.c:159:
+static int copy_sc_to_user(struct sigcontext *to, struct _fpstate *fp, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: arch/um/sys-i386/signal.c:164:
+^I^I^I   copy_sc_to_user_skas(to, fp, from, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1469: FILE: arch/um/sys-i386/signal.c:169:
+static int copy_ucontext_to_user(struct ucontext *uc, struct _fpstate *fp, $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1479: FILE: arch/um/sys-i386/signal.c:179:
+	return(err);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1483: FILE: arch/um/sys-i386/signal.c:183:
+struct sigframe
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1488: FILE: arch/um/sys-i386/signal.c:188:
+	unsigned long extramask[_NSIG_WORDS-1];
 	                                   ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1493: FILE: arch/um/sys-i386/signal.c:193:
+struct rt_sigframe
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1504: FILE: arch/um/sys-i386/signal.c:204:
+int setup_signal_stack_sc(unsigned long stack_top, int sig, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1505: FILE: arch/um/sys-i386/signal.c:205:
+^I^I^I  struct k_sigaction *ka, struct pt_regs *regs, $

CHECK:SPACING: No space is necessary after a cast
#1513: FILE: arch/um/sys-i386/signal.c:213:
+	frame = (struct sigframe *) stack_top - 1;

ERROR:SPACING: space required before the open parenthesis '('
#1514: FILE: arch/um/sys-i386/signal.c:214:
+	if(verify_area(VERIFY_WRITE, frame, sizeof(*frame)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1516: FILE: arch/um/sys-i386/signal.c:216:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1517: FILE: arch/um/sys-i386/signal.c:217:
+	restorer = (void *) frame->retcode;

ERROR:SPACING: space required before the open parenthesis '('
#1518: FILE: arch/um/sys-i386/signal.c:218:
+	if(ka->sa.sa_flags & SA_RESTORER)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1536: FILE: arch/um/sys-i386/signal.c:236:
+	err |= __put_user(0xb8, (char __user *)(frame->retcode+0));
 	                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1537: FILE: arch/um/sys-i386/signal.c:237:
+	err |= __put_user(__NR_rt_sigreturn, (int __user *)(frame->retcode+1));
 	                                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1538: FILE: arch/um/sys-i386/signal.c:238:
+	err |= __put_user(0x80cd, (short __user *)(frame->retcode+5));
 	                                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1540: FILE: arch/um/sys-i386/signal.c:240:
+	if(err)

CHECK:SPACING: No space is necessary after a cast
#1543: FILE: arch/um/sys-i386/signal.c:243:
+	PT_REGS_SP(regs) = (unsigned long) frame;

CHECK:SPACING: No space is necessary after a cast
#1544: FILE: arch/um/sys-i386/signal.c:244:
+	PT_REGS_IP(regs) = (unsigned long) ka->sa.sa_handler;

CHECK:SPACING: No space is necessary after a cast
#1545: FILE: arch/um/sys-i386/signal.c:245:
+	PT_REGS_EAX(regs) = (unsigned long) sig;

CHECK:SPACING: No space is necessary after a cast
#1546: FILE: arch/um/sys-i386/signal.c:246:
+	PT_REGS_EDX(regs) = (unsigned long) 0;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long) 0' could be '0UL'
#1546: FILE: arch/um/sys-i386/signal.c:246:
+	PT_REGS_EDX(regs) = (unsigned long) 0;

CHECK:SPACING: No space is necessary after a cast
#1547: FILE: arch/um/sys-i386/signal.c:247:
+	PT_REGS_ECX(regs) = (unsigned long) 0;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long) 0' could be '0UL'
#1547: FILE: arch/um/sys-i386/signal.c:247:
+	PT_REGS_ECX(regs) = (unsigned long) 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1548: FILE: arch/um/sys-i386/signal.c:248:
+^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1551: FILE: arch/um/sys-i386/signal.c:251:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1554: FILE: arch/um/sys-i386/signal.c:254:
+int setup_signal_stack_si(unsigned long stack_top, int sig, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1555: FILE: arch/um/sys-i386/signal.c:255:
+^I^I^I  struct k_sigaction *ka, struct pt_regs *regs, $

CHECK:SPACING: No space is necessary after a cast
#1563: FILE: arch/um/sys-i386/signal.c:263:
+	frame = (struct rt_sigframe *) stack_top - 1;

ERROR:SPACING: space required before the open parenthesis '('
#1564: FILE: arch/um/sys-i386/signal.c:264:
+	if(verify_area(VERIFY_WRITE, frame, sizeof(*frame)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1566: FILE: arch/um/sys-i386/signal.c:266:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1567: FILE: arch/um/sys-i386/signal.c:267:
+	restorer = (void *) frame->retcode;

ERROR:SPACING: space required before the open parenthesis '('
#1568: FILE: arch/um/sys-i386/signal.c:268:
+	if(ka->sa.sa_flags & SA_RESTORER)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1586: FILE: arch/um/sys-i386/signal.c:286:
+	err |= __put_user(0xb8, (char __user *)(frame->retcode+0));
 	                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1587: FILE: arch/um/sys-i386/signal.c:287:
+	err |= __put_user(__NR_rt_sigreturn, (int __user *)(frame->retcode+1));
 	                                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1588: FILE: arch/um/sys-i386/signal.c:288:
+	err |= __put_user(0x80cd, (short __user *)(frame->retcode+5));
 	                                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1590: FILE: arch/um/sys-i386/signal.c:290:
+	if(err)

CHECK:SPACING: No space is necessary after a cast
#1593: FILE: arch/um/sys-i386/signal.c:293:
+	PT_REGS_SP(regs) = (unsigned long) frame;

CHECK:SPACING: No space is necessary after a cast
#1594: FILE: arch/um/sys-i386/signal.c:294:
+	PT_REGS_IP(regs) = (unsigned long) ka->sa.sa_handler;

CHECK:SPACING: No space is necessary after a cast
#1595: FILE: arch/um/sys-i386/signal.c:295:
+	PT_REGS_EAX(regs) = (unsigned long) sig;

CHECK:SPACING: No space is necessary after a cast
#1596: FILE: arch/um/sys-i386/signal.c:296:
+	PT_REGS_EDX(regs) = (unsigned long) &frame->info;

CHECK:SPACING: No space is necessary after a cast
#1597: FILE: arch/um/sys-i386/signal.c:297:
+	PT_REGS_ECX(regs) = (unsigned long) &frame->uc;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1601: FILE: arch/um/sys-i386/signal.c:301:
+	return(0);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1620: FILE: arch/um/sys-i386/signal.c:320:
+	return(PT_REGS_SYSCALL_RET(&current->thread.regs));

CHECK:SPACING: No space is necessary after a cast
#1626: FILE: arch/um/sys-i386/signal.c:326:
+	struct rt_sigframe __user *frame = (struct rt_sigframe *) (sp - 4);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1636: FILE: arch/um/sys-i386/signal.c:336:
+	return(PT_REGS_SYSCALL_RET(&current->thread.regs));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227732.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 17 warnings, 30 checks, 528 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227732.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
