ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#32: 
--- a/drivers/scsi/scsi_ioctl.c	Fri Oct 25 11:26:48 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#46: FILE: drivers/scsi/scsi_ioctl.c:136:
+			printk("SCSI error: host %d channel %d id %d lun %d return code = %x\n",

CHECK:CAMELCASE: Avoid CamelCase: <SRpnt>
#47: FILE: drivers/scsi/scsi_ioctl.c:137:
+			       SRpnt->sr_command->host->host_no,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#58: FILE: drivers/scsi/scsi_ioctl.c:222:
+	struct Scsi_Host *SHpnt;

CHECK:CAMELCASE: Avoid CamelCase: <SHpnt>
#58: FILE: drivers/scsi/scsi_ioctl.c:222:
+	struct Scsi_Host *SHpnt;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#67: FILE: drivers/scsi/scsi_ioctl.c:232:
+	if ((SHpnt = scsi_get_host(dev)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: drivers/scsi/scsi_ioctl.c:410:
+^I */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#85: FILE: drivers/scsi/scsi_ioctl.c:411:
+	if ((SHpnt = scsi_get_host(dev)) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: drivers/scsi/scsi_ioctl.c:413:
+        if (!SHpnt->pci_dev) return -ENXIO;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: drivers/scsi/scsi_ioctl.c:413:
+        if (!SHpnt->pci_dev) return -ENXIO;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#87: FILE: drivers/scsi/scsi_ioctl.c:413:
+        if (!SHpnt->pci_dev) return -ENXIO;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: drivers/scsi/scsi_ioctl.c:414:
+        return copy_to_user(arg, SHpnt->pci_dev->slot_name,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: drivers/scsi/scsi_ioctl.c:414:
+        return copy_to_user(arg, SHpnt->pci_dev->slot_name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: drivers/scsi/scsi_ioctl.c:415:
+                            sizeof(SHpnt->pci_dev->slot_name));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: drivers/scsi/scsi_ioctl.c:415:
+                            sizeof(SHpnt->pci_dev->slot_name));$

CHECK:SPACING: No space is necessary after a cast
#122: FILE: drivers/scsi/scsi_ioctl.c:460:
+		__put_user(scsi_path.spi_shpnt->unique_id, &((Scsi_Idlun *) arg)->host_unique_id);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Idlun>
#122: FILE: drivers/scsi/scsi_ioctl.c:460:
+		__put_user(scsi_path.spi_shpnt->unique_id, &((Scsi_Idlun *) arg)->host_unique_id);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#126: FILE: drivers/scsi/scsi_ioctl.c:463:
+		if ((SHpnt = scsi_get_host(dev)) == NULL)

CHECK:SPACING: No space is necessary after a cast
#128: FILE: drivers/scsi/scsi_ioctl.c:465:
+		return put_user(SHpnt->host_no, (int *) arg);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#137: FILE: drivers/scsi/scsi_ioctl.c:491:
+		if ((SHpnt = scsi_get_host(dev)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#149: FILE: drivers/scsi/scsi_ioctl.c:531:
+		if ((SHpnt = scsi_get_host(dev)) == NULL)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#180: FILE: drivers/scsi/scsi_lib.c:132:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: drivers/scsi/scsi_lib.c:135:
+^I * QUEUE_FULL and host busy cases will not be retried. There are $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#196: FILE: drivers/scsi/scsi_lib.c:232:
+void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#196: FILE: drivers/scsi/scsi_lib.c:232:
+void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#196: FILE: drivers/scsi/scsi_lib.c:232:
+void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#196: FILE: drivers/scsi/scsi_lib.c:232:
+void scsi_queue_next_request(request_queue_t * q, Scsi_Cmnd * SCpnt,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: drivers/scsi/scsi_lib.c:233:
+			     struct Scsi_Host * SHpnt)

CHECK:CAMELCASE: Avoid CamelCase: <SDpnt>
#222: FILE: drivers/scsi/scsi_lib.c:275:
+		scsi_for_each_host_sdev(&strav_hndl, SDpnt, SHpnt->host_no) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: drivers/scsi/scsi_lib.c:352:
+	struct Scsi_Host * SHpnt = SCpnt->host;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#367: FILE: drivers/scsi/scsi_lib.c:725:
+ * Notes: ^IThe q arg and local flags are only needed for the locking hack.$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#369: FILE: drivers/scsi/scsi_lib.c:727:
+void scsi_dec_check_host_busy (struct Scsi_Host *SHpnt, request_queue_t * q)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#369: FILE: drivers/scsi/scsi_lib.c:727:
+void scsi_dec_check_host_busy (struct Scsi_Host *SHpnt, request_queue_t * q)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#493: FILE: drivers/scsi/scsi_lib.c:816:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: drivers/scsi/scsi_lib.c:852:
+^I^I^I^I/* $

CHECK:CAMELCASE: Avoid CamelCase: <SDloop>
#617: FILE: drivers/scsi/scsi_lib.c:1053:
+	scsi_for_each_host_sdev(&strav_hndl, SDloop, SHpnt->host_no) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#646: FILE: drivers/scsi/scsi_lib.c:1107:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#660: FILE: drivers/scsi/scsi_lib.c:1121:
+Scsi_Device *scsi_lookup_id(char *id, Scsi_Device *sdev_skip)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#665: FILE: drivers/scsi/scsi_lib.c:1126:
+	SCSI_LOG_SCAN_BUS(3, printk(KERN_INFO "scsi: id '%s'", id));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: drivers/scsi/scsi_lib.c:1132:
+^I^I^Iif ((sdev != sdev_skip) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sdev != sdev_skip'
#671: FILE: drivers/scsi/scsi_lib.c:1132:
+			if ((sdev != sdev_skip) && 
+			    strcmp(sdev->sdev_driverfs_dev.name,
+				   (char *) id) == 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#673: FILE: drivers/scsi/scsi_lib.c:1134:
+				   (char *) id) == 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#674: FILE: drivers/scsi/scsi_lib.c:1135:
+				SCSI_LOG_SCAN_BUS(3, printk("; found\n"));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#678: FILE: drivers/scsi/scsi_lib.c:1139:
+	SCSI_LOG_SCAN_BUS(3, printk("; no match\n"));

CHECK:BRACES: braces {} should be used on all arms of this statement
#700: FILE: drivers/scsi/scsi_lib.c:1161:
+	if (scsi_sdev_list != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scsi_sdev_list"
#700: FILE: drivers/scsi/scsi_lib.c:1161:
+	if (scsi_sdev_list != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdtailpnt->sdev_next"
#702: FILE: drivers/scsi/scsi_lib.c:1163:
+		while (sdtailpnt->sdev_next != NULL)

CHECK:BRACES: Unbalanced braces around else statement
#706: FILE: drivers/scsi/scsi_lib.c:1167:
+	} else

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#718: FILE: drivers/scsi/scsi_lib.c:1179:
+ * ^I^Ito removal of all Scsi_Devices.$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!SDpnt"
#722: FILE: drivers/scsi/scsi_lib.c:1183:
+	if (SDpnt == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "SDpnt->sdev_next"
#724: FILE: drivers/scsi/scsi_lib.c:1185:
+	if (SDpnt->sdev_next != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "SDpnt->sdev_prev"
#726: FILE: drivers/scsi/scsi_lib.c:1187:
+	if (SDpnt->sdev_prev != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: drivers/scsi/scsi_lib.c:1194:
+	scsi_remove_path(SDpnt, SCSI_FIND_ALL_HOST_NO,  SCSI_FIND_ALL_CHANNEL,
+		SCSI_FIND_ALL_ID, SCSI_FIND_ALL_LUN);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "SDpnt->inquiry"
#734: FILE: drivers/scsi/scsi_lib.c:1195:
+	if (SDpnt->inquiry != NULL)

CHECK:SPACING: No space is necessary after a cast
#736: FILE: drivers/scsi/scsi_lib.c:1197:
+	kfree((char *) SDpnt);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: drivers/scsi/scsi_merge.c:142:
+ * Lock status: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: drivers/scsi/scsi_merge.c:153:
+^I * Free up any indirection buffers we allocated for DMA purposes. $

CHECK:SPACING: No space is necessary after a cast
#779: FILE: drivers/scsi/scsi_merge.c:160:
+		sgpnt = (struct scatterlist *) SCpnt->buffer;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#818: FILE: drivers/scsi/scsi_merge.c:205:
+	BUG_ON(SHpnt == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!SHpnt"
#818: FILE: drivers/scsi/scsi_merge.c:205:
+	BUG_ON(SHpnt == NULL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#826: FILE: drivers/scsi/scsi_paths.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#845: FILE: drivers/scsi/scsi_paths.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#846: FILE: drivers/scsi/scsi_paths.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#858: FILE: drivers/scsi/scsi_paths.c:33:
+#include <asm/uaccess.h>

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#868: FILE: drivers/scsi/scsi_paths.c:43:
+#if defined (CONFIG_SCSI_PATH_POLICY_LPU)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#870: FILE: drivers/scsi/scsi_paths.c:45:
+#elif defined (CONFIG_SCSI_PATH_POLICY_RR)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: drivers/scsi/scsi_paths.c:47:
+    SCSI_PATH_POLICY_ROUND_ROBIN;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#880: FILE: drivers/scsi/scsi_paths.c:55:
+MODULE_PARM_DESC(scsi_path_dflt_path_policy,
+	"path selection policy, Last Path Used = 1, Round Robin = 2");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#890: FILE: drivers/scsi/scsi_paths.c:65:
+		return 1;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#891: FILE: drivers/scsi/scsi_paths.c:66:
+		printk(KERN_INFO "scsi_path_policy_setup: usage "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'scsi_path_policy_setup', this function's name, in a string
#891: FILE: drivers/scsi/scsi_paths.c:66:
+		printk(KERN_INFO "scsi_path_policy_setup: usage "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#892: FILE: drivers/scsi/scsi_paths.c:67:
+		printk(KERN_INFO "scsi_path_policy_setup: usage "
+		       "scsi_path_dflt_path_policy=n "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#893: FILE: drivers/scsi/scsi_paths.c:68:
+		       "scsi_path_dflt_path_policy=n "
+		       "Last Path Used = 1, Round Robin = 2");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#898: FILE: drivers/scsi/scsi_paths.c:73:
+__setup("scsi_path_dflt_path_policy=", scsi_path_policy_setup);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: drivers/scsi/scsi_paths.c:81:
+    SCSI_PATH_POLICY_ROUND_ROBIN;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#909: FILE: drivers/scsi/scsi_paths.c:84:
+
+

WARNING:TYPO_SPELLING: 'whenver' may be misspelled - perhaps 'whenever'?
#911: FILE: drivers/scsi/scsi_paths.c:86:
+ * XXX audit and ensure that we have a lock whenver accessing any paths.
                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#931: FILE: drivers/scsi/scsi_paths.c:106:
+	if (sdev->sdev_paths != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev->sdev_paths"
#931: FILE: drivers/scsi/scsi_paths.c:106:
+	if (sdev->sdev_paths != NULL) {

CHECK:SPACING: No space is necessary after a cast
#932: FILE: drivers/scsi/scsi_paths.c:107:
+		mpath = (struct scsi_mpath *) sdev->sdev_paths;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#937: FILE: drivers/scsi/scsi_paths.c:112:
+				printk(prefix);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#940: FILE: drivers/scsi/scsi_paths.c:115:
+			printk(format, pathcur->sp_path_id.spi_shpnt->host_no,

CHECK:BRACES: Unbalanced braces around else statement
#945: FILE: drivers/scsi/scsi_paths.c:120:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#946: FILE: drivers/scsi/scsi_paths.c:121:
+		printk("no paths");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#966: FILE: drivers/scsi/scsi_paths.c:141:
+	SCSI_LOG_SCAN_BUS(4, printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#968: FILE: drivers/scsi/scsi_paths.c:143:
+		__FUNCTION__, oldpath->sp_path_id.spi_shpnt->host_no,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#972: FILE: drivers/scsi/scsi_paths.c:147:
+	BUG_ON(ind_active >= SCSI_MAX_ACTIVE_LIST);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!last_active"
#974: FILE: drivers/scsi/scsi_paths.c:149:
+	if (last_active == NULL)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#977: FILE: drivers/scsi/scsi_paths.c:152:
+	if (ind_active == SCSI_PATHS_ALL_LIST) {
[...]
+	} else {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#985: FILE: drivers/scsi/scsi_paths.c:160:
+			if (pathcur == oldpath)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#987: FILE: drivers/scsi/scsi_paths.c:162:
+			else {

CHECK:SPACING: No space is necessary after a cast
#1017: FILE: drivers/scsi/scsi_paths.c:192:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1018: FILE: drivers/scsi/scsi_paths.c:193:
+	if (mpath == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#1049: FILE: drivers/scsi/scsi_paths.c:224:
+		KERN_WARNING "scsi: the parameter '%s' differs for two"
+			" adapters attached to the same device.\n"

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1052: FILE: drivers/scsi/scsi_paths.c:227:
+#define	CHECK_HOST_PARAMS(param) \
+	if (host1->param != host2->param) { \
+		printk(message, __stringify(param)); \
+		ret = 1; \
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#1052: FILE: drivers/scsi/scsi_paths.c:227:
+#define	CHECK_HOST_PARAMS(param) \
+	if (host1->param != host2->param) { \
+		printk(message, __stringify(param)); \
+		ret = 1; \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'param' may be better as '(param)' to avoid precedence issues
#1052: FILE: drivers/scsi/scsi_paths.c:227:
+#define	CHECK_HOST_PARAMS(param) \
+	if (host1->param != host2->param) { \
+		printk(message, __stringify(param)); \
+		ret = 1; \
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1054: FILE: drivers/scsi/scsi_paths.c:229:
+		printk(message, __stringify(param)); \

CHECK:SPACING: No space is necessary after a cast
#1089: FILE: drivers/scsi/scsi_paths.c:264:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1090: FILE: drivers/scsi/scsi_paths.c:265:
+	if (mpath == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1092: FILE: drivers/scsi/scsi_paths.c:267:
+	BUG_ON(ind_active >= SCSI_MAX_ACTIVE_LIST);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pathcur->sp_active_next[ind_next]"
#1097: FILE: drivers/scsi/scsi_paths.c:272:
+	if (pathcur->sp_active_next[ind_next] != NULL)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1102: FILE: drivers/scsi/scsi_paths.c:277:
+		return;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1102: FILE: drivers/scsi/scsi_paths.c:277:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1103: FILE: drivers/scsi/scsi_paths.c:278:
+		SCSI_LOG_SCAN_BUS(4, printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1105: FILE: drivers/scsi/scsi_paths.c:280:
+			__FUNCTION__, sdev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last_active"
#1112: FILE: drivers/scsi/scsi_paths.c:287:
+		if (last_active != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1147: FILE: drivers/scsi/scsi_paths.c:322:
+	SCSI_LOG_SCAN_BUS(4, printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1148: FILE: drivers/scsi/scsi_paths.c:323:
+		"%s: sdev 0x%p path: <%d, %d, %d, %d>\n", __FUNCTION__,

CHECK:SPACING: No space is necessary after a cast
#1151: FILE: drivers/scsi/scsi_paths.c:326:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pathcur"
#1154: FILE: drivers/scsi/scsi_paths.c:329:
+	if (pathcur == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1155: FILE: drivers/scsi/scsi_paths.c:330:
+		printk(KERN_WARNING

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1155: FILE: drivers/scsi/scsi_paths.c:330:
+	if (pathcur == NULL) {
+		printk(KERN_WARNING

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1156: FILE: drivers/scsi/scsi_paths.c:331:
+		       "%s: memory allocation failure.\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1169: FILE: drivers/scsi/scsi_paths.c:344:
+	if (mpath == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1173: FILE: drivers/scsi/scsi_paths.c:348:
+		SCSI_LOG_SCAN_BUS(5, printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1174: FILE: drivers/scsi/scsi_paths.c:349:
+			"%s: adding first path\n", __FUNCTION__));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1176: FILE: drivers/scsi/scsi_paths.c:351:
+		if (mpath == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1177: FILE: drivers/scsi/scsi_paths.c:352:
+			printk(KERN_WARNING "%s: memory allocation failure.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1178: FILE: drivers/scsi/scsi_paths.c:353:
+			       __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#1188: FILE: drivers/scsi/scsi_paths.c:363:
+		(struct scsi_mpath *) sdev->sdev_paths = mpath;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1191: FILE: drivers/scsi/scsi_paths.c:366:
+			printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1193: FILE: drivers/scsi/scsi_paths.c:368:
+			       "scsi: Multi-path single LUN devices are not "
+			       "supported. path host %d chan %d id %d lun %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1194: FILE: drivers/scsi/scsi_paths.c:369:
+			       "supported. path host %d chan %d id %d lun %d "
+			       "not added\n", shost->host_no, channel, id, lun);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1199: FILE: drivers/scsi/scsi_paths.c:374:
+		BUG_ON(shostcur == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shostcur"
#1199: FILE: drivers/scsi/scsi_paths.c:374:
+		BUG_ON(shostcur == NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1201: FILE: drivers/scsi/scsi_paths.c:376:
+			printk(KERN_ERR "scsi: path host %d chan %d id %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1202: FILE: drivers/scsi/scsi_paths.c:377:
+			printk(KERN_ERR "scsi: path host %d chan %d id %d"
+			       " lun %d not added\n", shost->host_no, channel,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1207: FILE: drivers/scsi/scsi_paths.c:382:
+		SCSI_LOG_SCAN_BUS(5, printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1224: FILE: drivers/scsi/scsi_paths.c:399:
+			  printk(KERN_INFO "%s: All paths for sdev 0x%p:\n    ",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1225: FILE: drivers/scsi/scsi_paths.c:400:
+				 __FUNCTION__, sdev);

WARNING:TABSTOP: Statements should start on a tabstop
#1228: FILE: drivers/scsi/scsi_paths.c:403:
+			  }

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1254: FILE: drivers/scsi/scsi_paths.c:429:
+	SCSI_LOG_SCAN_BUS(4, printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1255: FILE: drivers/scsi/scsi_paths.c:430:
+		 "%s: sdev 0x%p path <%d, %d, %d, %d>\n", __FUNCTION__,

CHECK:SPACING: No space is necessary after a cast
#1258: FILE: drivers/scsi/scsi_paths.c:433:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1259: FILE: drivers/scsi/scsi_paths.c:434:
+	if (mpath == NULL)

CHECK:SPACING: No space is necessary after a cast
#1267: FILE: drivers/scsi/scsi_paths.c:442:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1285: FILE: drivers/scsi/scsi_paths.c:460:
+		SCSI_LOG_SCAN_BUS(4, printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1286: FILE: drivers/scsi/scsi_paths.c:461:
+		    "%s: sdev 0x%p removed last path\n", __FUNCTION__, sdev));

WARNING:RETURN_VOID: void function return statements are not generally useful
#1291: FILE: drivers/scsi/scsi_paths.c:466:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1309: FILE: drivers/scsi/scsi_paths.c:484:
+void scsi_replace_path(Scsi_Device *sdev, struct Scsi_Host *shost,
+	unsigned int channel, unsigned int id, unsigned int lun)

CHECK:SPACING: No space is necessary after a cast
#1317: FILE: drivers/scsi/scsi_paths.c:492:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1318: FILE: drivers/scsi/scsi_paths.c:493:
+	BUG_ON(mpath == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1318: FILE: drivers/scsi/scsi_paths.c:493:
+	BUG_ON(mpath == NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1325: FILE: drivers/scsi/scsi_paths.c:500:
+		SCSI_LOG_SCAN_BUS(5, printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#1327: FILE: drivers/scsi/scsi_paths.c:502:
+			 "%s: sdev* 0x%p replace <%d, %d, %d, %d> with"
+			 " <%d, %d, %d, %d>\n", __FUNCTION__, sdev,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1327: FILE: drivers/scsi/scsi_paths.c:502:
+			 " <%d, %d, %d, %d>\n", __FUNCTION__, sdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: drivers/scsi/scsi_paths.c:522:
+			scsi_add_active_path(sdev, pathcur,
+				SCSI_PATHS_ALL_LIST);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1350: FILE: drivers/scsi/scsi_paths.c:525:
+	BUG();

CHECK:SPACING: No space is necessary after a cast
#1379: FILE: drivers/scsi/scsi_paths.c:554:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1380: FILE: drivers/scsi/scsi_paths.c:555:
+	if (mpath == NULL)

CHECK:SPACING: No space is necessary after a cast
#1404: FILE: drivers/scsi/scsi_paths.c:579:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1405: FILE: drivers/scsi/scsi_paths.c:580:
+	if (mpath == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handle"
#1432: FILE: drivers/scsi/scsi_paths.c:607:
+	if (handle == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev->sdev_paths"
#1441: FILE: drivers/scsi/scsi_paths.c:616:
+		if (sdev->sdev_paths != NULL) {

CHECK:SPACING: No space is necessary after a cast
#1446: FILE: drivers/scsi/scsi_paths.c:621:
+			mpath_iopnt = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: drivers/scsi/scsi_paths.c:624:
+				pathpnt = list_entry(lh, struct scsi_path,
+						    sp_path_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1451: FILE: drivers/scsi/scsi_paths.c:626:
+				if ((host_no == SCSI_FIND_ALL_HOST_NO ||
+				   host_no == pathpnt->sp_path_id.spi_shpnt->host_no ) &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1451: FILE: drivers/scsi/scsi_paths.c:626:
+				   host_no == pathpnt->sp_path_id.spi_shpnt->host_no ) &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1453: FILE: drivers/scsi/scsi_paths.c:628:
+				   channel == pathpnt->sp_path_id.spi_channel ) &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1455: FILE: drivers/scsi/scsi_paths.c:630:
+				   id == pathpnt->sp_path_id.spi_id ) &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1457: FILE: drivers/scsi/scsi_paths.c:632:
+				   lun == pathpnt->sp_path_id.spi_lun )) {

CHECK:SPACING: No space is necessary after a cast
#1492: FILE: drivers/scsi/scsi_paths.c:667:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpath == NULL'
#1493: FILE: drivers/scsi/scsi_paths.c:668:
+	if ((mpath == NULL) ||
+	    (mpath->scsi_mp_last_active[SCSI_PATHS_ALL_LIST] == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpath->scsi_mp_last_active[SCSI_PATHS_ALL_LIST] == NULL'
#1493: FILE: drivers/scsi/scsi_paths.c:668:
+	if ((mpath == NULL) ||
+	    (mpath->scsi_mp_last_active[SCSI_PATHS_ALL_LIST] == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1493: FILE: drivers/scsi/scsi_paths.c:668:
+	if ((mpath == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath->scsi_mp_last_active[SCSI_PATHS_ALL_LIST]"
#1494: FILE: drivers/scsi/scsi_paths.c:669:
+	    (mpath->scsi_mp_last_active[SCSI_PATHS_ALL_LIST] == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1500: FILE: drivers/scsi/scsi_paths.c:675:
+		printk(KERN_WARNING

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath->scsi_mp_last_active[ind_active]"
#1513: FILE: drivers/scsi/scsi_paths.c:688:
+		if (mpath->scsi_mp_last_active[ind_active] == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1516: FILE: drivers/scsi/scsi_paths.c:691:
+	first_path = pathcur = mpath->scsi_mp_last_active[ind_active];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1517: FILE: drivers/scsi/scsi_paths.c:692:
+	BUG_ON(ind_active >= SCSI_MAX_ACTIVE_LIST);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'shost->host_busy >= shost->can_queue'
#1535: FILE: drivers/scsi/scsi_paths.c:710:
+			if ((shost->can_queue > 0 &&
+			     (shost->host_busy >= shost->can_queue))
+			    || (shost->host_blocked)
+			    || (shost->host_self_blocked)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'shost->host_blocked'
#1535: FILE: drivers/scsi/scsi_paths.c:710:
+			if ((shost->can_queue > 0 &&
+			     (shost->host_busy >= shost->can_queue))
+			    || (shost->host_blocked)
+			    || (shost->host_self_blocked)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'shost->host_self_blocked'
#1535: FILE: drivers/scsi/scsi_paths.c:710:
+			if ((shost->can_queue > 0 &&
+			     (shost->host_busy >= shost->can_queue))
+			    || (shost->host_blocked)
+			    || (shost->host_self_blocked)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1537: FILE: drivers/scsi/scsi_paths.c:712:
+			     (shost->host_busy >= shost->can_queue))
+			    || (shost->host_blocked)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1538: FILE: drivers/scsi/scsi_paths.c:713:
+			    || (shost->host_blocked)
+			    || (shost->host_self_blocked)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1539: FILE: drivers/scsi/scsi_paths.c:714:
+				if (sdev->device_busy == 0) {
+					starving = 1;
+				}

WARNING:TYPO_SPELLING: 'futher' may be misspelled - perhaps 'further'?
#1562: FILE: drivers/scsi/scsi_paths.c:737:
+		 * would be used for futher IO.
 		                     ^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1571: FILE: drivers/scsi/scsi_paths.c:746:
+		pathcur = first_path = mpath->scsi_mp_last_active[ind_active];

CHECK:BRACES: Unbalanced braces around else statement
#1586: FILE: drivers/scsi/scsi_paths.c:761:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1601: FILE: drivers/scsi/scsi_paths.c:776:
+		printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1602: FILE: drivers/scsi/scsi_paths.c:777:
+		       "%s: invalid scsi_mp_path_policy %d\n", __FUNCTION__,

WARNING:TYPO_SPELLING: 'upate' may be misspelled - perhaps 'update'?
#1618: FILE: drivers/scsi/scsi_paths.c:793:
+ * @path_state: Path state to upate paths with
                               ^^^^^

CHECK:SPACING: No space is necessary after a cast
#1647: FILE: drivers/scsi/scsi_paths.c:822:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mpath == NULL'
#1648: FILE: drivers/scsi/scsi_paths.c:823:
+	if ((mpath == NULL) || (sdev->scanning &&
+				(path_state != SCSI_PATH_STATE_GOOD)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'path_state != SCSI_PATH_STATE_GOOD'
#1648: FILE: drivers/scsi/scsi_paths.c:823:
+	if ((mpath == NULL) || (sdev->scanning &&
+				(path_state != SCSI_PATH_STATE_GOOD)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mpath"
#1648: FILE: drivers/scsi/scsi_paths.c:823:
+	if ((mpath == NULL) || (sdev->scanning &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'check_path->spi_shpnt->host_no ==
 		     pathcur->sp_path_id.spi_shpnt->host_no'
#1658: FILE: drivers/scsi/scsi_paths.c:833:
+		if ((check_path->spi_shpnt->host_no ==
+		     pathcur->sp_path_id.spi_shpnt->host_no)
+		    && (check_path->spi_channel ==
+			pathcur->sp_path_id.spi_channel)
+		    && (check_path->spi_id == pathcur->sp_path_id.spi_id)
+		    && (check_path->spi_lun == pathcur->sp_path_id.spi_lun)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'check_path->spi_channel ==
 			pathcur->sp_path_id.spi_channel'
#1658: FILE: drivers/scsi/scsi_paths.c:833:
+		if ((check_path->spi_shpnt->host_no ==
+		     pathcur->sp_path_id.spi_shpnt->host_no)
+		    && (check_path->spi_channel ==
+			pathcur->sp_path_id.spi_channel)
+		    && (check_path->spi_id == pathcur->sp_path_id.spi_id)
+		    && (check_path->spi_lun == pathcur->sp_path_id.spi_lun)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'check_path->spi_id == pathcur->sp_path_id.spi_id'
#1658: FILE: drivers/scsi/scsi_paths.c:833:
+		if ((check_path->spi_shpnt->host_no ==
+		     pathcur->sp_path_id.spi_shpnt->host_no)
+		    && (check_path->spi_channel ==
+			pathcur->sp_path_id.spi_channel)
+		    && (check_path->spi_id == pathcur->sp_path_id.spi_id)
+		    && (check_path->spi_lun == pathcur->sp_path_id.spi_lun)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'check_path->spi_lun == pathcur->sp_path_id.spi_lun'
#1658: FILE: drivers/scsi/scsi_paths.c:833:
+		if ((check_path->spi_shpnt->host_no ==
+		     pathcur->sp_path_id.spi_shpnt->host_no)
+		    && (check_path->spi_channel ==
+			pathcur->sp_path_id.spi_channel)
+		    && (check_path->spi_id == pathcur->sp_path_id.spi_id)
+		    && (check_path->spi_lun == pathcur->sp_path_id.spi_lun)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1660: FILE: drivers/scsi/scsi_paths.c:835:
+		     pathcur->sp_path_id.spi_shpnt->host_no)
+		    && (check_path->spi_channel ==

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1662: FILE: drivers/scsi/scsi_paths.c:837:
+			pathcur->sp_path_id.spi_channel)
+		    && (check_path->spi_id == pathcur->sp_path_id.spi_id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1663: FILE: drivers/scsi/scsi_paths.c:838:
+		    && (check_path->spi_id == pathcur->sp_path_id.spi_id)
+		    && (check_path->spi_lun == pathcur->sp_path_id.spi_lun)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1664: FILE: drivers/scsi/scsi_paths.c:839:
+			if (path_state == SCSI_PATH_STATE_GOOD) {
[...]
+			} else if (path_state == SCSI_PATH_STATE_FAILING) {
[...]
+			} else if (path_state == SCSI_PATH_STATE_DEAD) {
[...]
+			} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1678: FILE: drivers/scsi/scsi_paths.c:853:
+					printk(KERN_ERR "scsi: result 0x%x caused path host %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1679: FILE: drivers/scsi/scsi_paths.c:854:
+					printk(KERN_ERR "scsi: result 0x%x caused path host %d"
+					       " channel %d id %d lun %d failure\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1689: FILE: drivers/scsi/scsi_paths.c:864:
+				printk(KERN_ERR "scsi: result 0x%x caused path host %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1690: FILE: drivers/scsi/scsi_paths.c:865:
+				printk(KERN_ERR "scsi: result 0x%x caused path host %d"
+				       " channel %d id %d lun %d failure\n",

CHECK:BRACES: Unbalanced braces around else statement
#1696: FILE: drivers/scsi/scsi_paths.c:871:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1697: FILE: drivers/scsi/scsi_paths.c:872:
+				BUG();

WARNING:TYPO_SPELLING: 'similiar' may be misspelled - perhaps 'similar'?
#1708: FILE: drivers/scsi/scsi_paths.c:883:
+	 * might be a similiar issue when failing or removing a path.
 	              ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1719: FILE: drivers/scsi/scsi_paths.c:894:
+	SCSI_LOG_ERROR_RECOVERY(5, printk("%s: retries %d, allowed %d,"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1720: FILE: drivers/scsi/scsi_paths.c:895:
+^I^I^I^I" paths_left %d\n", __FUNCTION__, $

WARNING:SPLIT_STRING: quoted string split across lines
#1720: FILE: drivers/scsi/scsi_paths.c:895:
+	SCSI_LOG_ERROR_RECOVERY(5, printk("%s: retries %d, allowed %d,"
+				" paths_left %d\n", __FUNCTION__, 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1720: FILE: drivers/scsi/scsi_paths.c:895:
+				" paths_left %d\n", __FUNCTION__, 

WARNING:TYPO_SPELLING: 'procede' may be misspelled - perhaps 'proceed'?
#1733: FILE: drivers/scsi/scsi_paths.c:908:
+ * Check the result of @scmd, and determine how to procede.
                                                    ^^^^^^^

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#1740: FILE: drivers/scsi/scsi_paths.c:915:
+	if (scmd->device->online == FALSE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1741: FILE: drivers/scsi/scsi_paths.c:916:
+		SCSI_LOG_ERROR_RECOVERY(5, printk("%s: device offline - report"

WARNING:SPLIT_STRING: quoted string split across lines
#1742: FILE: drivers/scsi/scsi_paths.c:917:
+		SCSI_LOG_ERROR_RECOVERY(5, printk("%s: device offline - report"
+						  " as SUCCESS\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1743: FILE: drivers/scsi/scsi_paths.c:918:
+						  __FUNCTION__));

CHECK:SPACING: No space is necessary after a cast
#1762: FILE: drivers/scsi/scsi_paths.c:937:
+		(void) scsi_check_paths(SCSI_PATH_STATE_GOOD, &pathid, scmd);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1805: FILE: drivers/scsi/scsi_paths.c:980:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1815: FILE: drivers/scsi/scsi_paths.c:990:
+		/*
+		   * When we scan the bus, we get timeout messages for

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1818: FILE: drivers/scsi/scsi_paths.c:993:
+		   * Other hosts report DID_NO_CONNECT for the same thing.
+		 */

CHECK:SPACING: No space is necessary after a cast
#1826: FILE: drivers/scsi/scsi_paths.c:1001:
+			(void) scsi_check_paths(SCSI_PATH_STATE_GOOD, &pathid,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1829: FILE: drivers/scsi/scsi_paths.c:1004:
+			return SUCCESS;
+		} else {

CHECK:SPACING: No space is necessary after a cast
#1850: FILE: drivers/scsi/scsi_paths.c:1025:
+		(void) scsi_check_paths(SCSI_PATH_STATE_GOOD, &pathid, scmd);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1878: FILE: drivers/scsi/scsi_paths.c:1053:
+		/* fallthrough */

CHECK:SPACING: No space is necessary after a cast
#1886: FILE: drivers/scsi/scsi_paths.c:1061:
+		(void) scsi_check_paths(SCSI_PATH_STATE_GOOD, &pathid, scmd);

CHECK:SPACING: No space is necessary after a cast
#1900: FILE: drivers/scsi/scsi_paths.c:1075:
+		(void) scsi_check_paths(SCSI_PATH_STATE_GOOD, &pathid, scmd);

CHECK:SPACING: No space is necessary after a cast
#1908: FILE: drivers/scsi/scsi_paths.c:1083:
+		(void) scsi_check_paths(SCSI_PATH_STATE_GOOD, &pathid, scmd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1911: FILE: drivers/scsi/scsi_paths.c:1086:
+		printk(KERN_ERR "scsi%d (%d,%d,%d) : RESERVATION CONFLICT\n",

CHECK:SPACING: No space is necessary after a cast
#1914: FILE: drivers/scsi/scsi_paths.c:1089:
+		(void) scsi_check_paths(SCSI_PATH_STATE_GOOD, &pathid, scmd);

CHECK:SPACING: No space is necessary after a cast
#1917: FILE: drivers/scsi/scsi_paths.c:1092:
+		(void) scsi_check_paths(SCSI_PATH_STATE_DEAD, &pathid, scmd);

WARNING:INDENTED_LABEL: labels should not be indented
#1925: FILE: drivers/scsi/scsi_paths.c:1100:
+      maybe_retry:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sdev == NULL'
#1969: FILE: drivers/scsi/scsi_paths.c:1144:
+	if ((sdev == NULL) || (sdev->sdev_paths == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sdev->sdev_paths == NULL'
#1969: FILE: drivers/scsi/scsi_paths.c:1144:
+	if ((sdev == NULL) || (sdev->sdev_paths == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sdev"
#1969: FILE: drivers/scsi/scsi_paths.c:1144:
+	if ((sdev == NULL) || (sdev->sdev_paths == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sdev->sdev_paths"
#1969: FILE: drivers/scsi/scsi_paths.c:1144:
+	if ((sdev == NULL) || (sdev->sdev_paths == NULL))

CHECK:SPACING: No space is necessary after a cast
#1972: FILE: drivers/scsi/scsi_paths.c:1147:
+	mpath = (struct scsi_mpath *) sdev->sdev_paths;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1989: FILE: drivers/scsi/scsi_paths.c:1164:
+					printk(KERN_WARNING "scsi: setting path host %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1990: FILE: drivers/scsi/scsi_paths.c:1165:
+					printk(KERN_WARNING "scsi: setting path host %d"
+					       " channel %d id %d lun %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1991: FILE: drivers/scsi/scsi_paths.c:1166:
+					       " channel %d id %d lun %d"
+					       " to good\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2004: FILE: drivers/scsi/scsi_paths.c:1179:
+						scsi_add_active_path(sdev,
+							pathcur,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2010: FILE: drivers/scsi/scsi_paths.c:1185:
+					printk(KERN_WARNING "scsi: setting path host %d"

WARNING:SPLIT_STRING: quoted string split across lines
#2011: FILE: drivers/scsi/scsi_paths.c:1186:
+					printk(KERN_WARNING "scsi: setting path host %d"
+					       " channel %d id %d lun %d"

WARNING:SPLIT_STRING: quoted string split across lines
#2012: FILE: drivers/scsi/scsi_paths.c:1187:
+					       " channel %d id %d lun %d"
+					       " to failing\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2022: FILE: drivers/scsi/scsi_paths.c:1197:
+					printk(KERN_WARNING "scsi: setting path host %d"

WARNING:SPLIT_STRING: quoted string split across lines
#2023: FILE: drivers/scsi/scsi_paths.c:1198:
+					printk(KERN_WARNING "scsi: setting path host %d"
+					       " channel %d id %d lun %d"

WARNING:SPLIT_STRING: quoted string split across lines
#2024: FILE: drivers/scsi/scsi_paths.c:1199:
+					       " channel %d id %d lun %d"
+					       " to failed\n",

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#2050: FILE: drivers/scsi/scsi_paths.c:1225:
+static struct proc_dir_entry *scsi_paths_proc_mpp = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#2052: FILE: drivers/scsi/scsi_paths.c:1227:
+static const char *scsi_paths_proc_leaf_names[] = { "paths", "version" };

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2056: FILE: drivers/scsi/scsi_paths.c:1231:
+static int scsi_paths_proc_paths_write(struct file *filp, const char *buffer,
                                                     ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2075: FILE: drivers/scsi/scsi_paths.c:1250:
+#define PRINT_PROC(fmt,args...)                                 \
                       ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2075: FILE: drivers/scsi/scsi_paths.c:1250:
+#define PRINT_PROC(fmt,args...)                                 \
+    do {                                                        \
+	*len += sprintf(buffer + *len, fmt, ##args);            \
+	if (*begin + *len > offset + size)                      \
+		return 0;                                       \
+	if (*begin + *len < offset) {                           \
+		*begin += *len;                                 \
+		*len = 0;                                       \
+	}                                                       \
+    } while(0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2076: FILE: drivers/scsi/scsi_paths.c:1251:
+    do {                                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2084: FILE: drivers/scsi/scsi_paths.c:1259:
+    } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#2084: FILE: drivers/scsi/scsi_paths.c:1259:
+    } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2086: FILE: drivers/scsi/scsi_paths.c:1261:
+#define SP_PROC_READ_FN(infofp)                                 \
+    do {                                                        \
+	int len = 0;                                            \
+	off_t begin = 0;                                        \
+	*eof = infofp(buffer, &len, &begin, offset, size);      \
+	if (offset >= (begin + len))                            \
+		return 0;                                       \
+	*start = buffer + offset - begin;                       \
+	return (size < (begin + len - offset)) ?                \
+				size : begin + len - offset;    \
+    } while(0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2087: FILE: drivers/scsi/scsi_paths.c:1262:
+    do {                                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2096: FILE: drivers/scsi/scsi_paths.c:1271:
+    } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#2096: FILE: drivers/scsi/scsi_paths.c:1271:
+    } while(0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#2108: FILE: drivers/scsi/scsi_paths.c:1283:
+						S_IFDIR | S_IRUGO | S_IXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2113: FILE: drivers/scsi/scsi_paths.c:1288:
+		mask = scsi_paths_proc_leaf_writes[k] ? S_IRUGO | S_IWUSR :

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2114: FILE: drivers/scsi/scsi_paths.c:1289:
+		    S_IRUGO;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!proc_scsi'
#2136: FILE: drivers/scsi/scsi_paths.c:1311:
+	if ((!proc_scsi) || (!scsi_paths_proc_mpp))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!scsi_paths_proc_mpp'
#2136: FILE: drivers/scsi/scsi_paths.c:1311:
+	if ((!proc_scsi) || (!scsi_paths_proc_mpp))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev->sdev_paths"
#2152: FILE: drivers/scsi/scsi_paths.c:1327:
+	if (sdev->sdev_paths != NULL) {

CHECK:SPACING: No space is necessary after a cast
#2153: FILE: drivers/scsi/scsi_paths.c:1328:
+		mpath = (struct scsi_mpath *) sdev->sdev_paths;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2167: FILE: drivers/scsi/scsi_paths.c:1342:
+static int scsi_paths_proc_paths_info(char * buffer, int * len, off_t * begin,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2167: FILE: drivers/scsi/scsi_paths.c:1342:
+static int scsi_paths_proc_paths_info(char * buffer, int * len, off_t * begin,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2167: FILE: drivers/scsi/scsi_paths.c:1342:
+static int scsi_paths_proc_paths_info(char * buffer, int * len, off_t * begin,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev->sdev_paths"
#2174: FILE: drivers/scsi/scsi_paths.c:1349:
+		if (sdev->sdev_paths != NULL) {

CHECK:SPACING: No space is necessary after a cast
#2187: FILE: drivers/scsi/scsi_paths.c:1362:
+			mpath = (struct scsi_mpath *) sdev->sdev_paths;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2190: FILE: drivers/scsi/scsi_paths.c:1365:
+				pathcur = list_entry(lh, struct scsi_path,
+					       sp_path_list);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pathcur->sp_path_id.spi_shpnt->host_no'
#2194: FILE: drivers/scsi/scsi_paths.c:1369:
+					   pathcur->sp_path_id.spi_shpnt->
+					   host_no,

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2208: FILE: drivers/scsi/scsi_paths.c:1383:
+static int scsi_paths_proc_paths_read(char * buffer, char ** start,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#2208: FILE: drivers/scsi/scsi_paths.c:1383:
+static int scsi_paths_proc_paths_read(char * buffer, char ** start,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2209: FILE: drivers/scsi/scsi_paths.c:1384:
+				      off_t offset, int size, int * eof,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2210: FILE: drivers/scsi/scsi_paths.c:1385:
+				      void * data)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2215: FILE: drivers/scsi/scsi_paths.c:1390:
+static int scsi_paths_proc_paths_write(struct file *filp, const char *buffer,
                                                     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buff_in"
#2234: FILE: drivers/scsi/scsi_paths.c:1409:
+	if (buff_in == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2235: FILE: drivers/scsi/scsi_paths.c:1410:
+		printk(KERN_WARNING "%s: could not malloc\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2235: FILE: drivers/scsi/scsi_paths.c:1410:
+	if (buff_in == NULL) {
+		printk(KERN_WARNING "%s: could not malloc\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2235: FILE: drivers/scsi/scsi_paths.c:1410:
+		printk(KERN_WARNING "%s: could not malloc\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name_id"
#2240: FILE: drivers/scsi/scsi_paths.c:1415:
+	if (name_id == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2241: FILE: drivers/scsi/scsi_paths.c:1416:
+		printk(KERN_WARNING "%s: could not malloc\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2241: FILE: drivers/scsi/scsi_paths.c:1416:
+	if (name_id == NULL) {
+		printk(KERN_WARNING "%s: could not malloc\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2241: FILE: drivers/scsi/scsi_paths.c:1416:
+		printk(KERN_WARNING "%s: could not malloc\n", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#2288: FILE: drivers/scsi/scsi_paths.c:1463:
+		     &lun, (unsigned int *) &path_state, &path_failures,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res != 7'
#2290: FILE: drivers/scsi/scsi_paths.c:1465:
+	if ((res != 7) || ((path_state != SCSI_PATH_STATE_GOOD) &&
+	    (path_state != SCSI_PATH_STATE_FAILING) &&
+	    (path_state != SCSI_PATH_STATE_DEAD))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'path_state != SCSI_PATH_STATE_GOOD'
#2290: FILE: drivers/scsi/scsi_paths.c:1465:
+	if ((res != 7) || ((path_state != SCSI_PATH_STATE_GOOD) &&
+	    (path_state != SCSI_PATH_STATE_FAILING) &&
+	    (path_state != SCSI_PATH_STATE_DEAD))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'path_state != SCSI_PATH_STATE_FAILING'
#2290: FILE: drivers/scsi/scsi_paths.c:1465:
+	if ((res != 7) || ((path_state != SCSI_PATH_STATE_GOOD) &&
+	    (path_state != SCSI_PATH_STATE_FAILING) &&
+	    (path_state != SCSI_PATH_STATE_DEAD))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'path_state != SCSI_PATH_STATE_DEAD'
#2290: FILE: drivers/scsi/scsi_paths.c:1465:
+	if ((res != 7) || ((path_state != SCSI_PATH_STATE_GOOD) &&
+	    (path_state != SCSI_PATH_STATE_FAILING) &&
+	    (path_state != SCSI_PATH_STATE_DEAD))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2291: FILE: drivers/scsi/scsi_paths.c:1466:
+	if ((res != 7) || ((path_state != SCSI_PATH_STATE_GOOD) &&
+	    (path_state != SCSI_PATH_STATE_FAILING) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sdev"
#2298: FILE: drivers/scsi/scsi_paths.c:1473:
+	if (sdev != NULL)

WARNING:INDENTED_LABEL: labels should not be indented
#2302: FILE: drivers/scsi/scsi_paths.c:1477:
+  done:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buff_in"
#2303: FILE: drivers/scsi/scsi_paths.c:1478:
+	if (buff_in != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "name_id"
#2305: FILE: drivers/scsi/scsi_paths.c:1480:
+	if (name_id != NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 123 warnings, 127 checks, 2243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000419571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
