WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/linux/ckrm_tc.h:1:
+#include <linux/ckrm_rc.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#45: FILE: include/linux/ckrm_tc.h:3:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#49: FILE: include/linux/ckrm_tc.h:7:
+typedef struct ckrm_task_class {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#50: FILE: include/linux/ckrm_tc.h:8:
+^Istruct ckrm_core_class core;   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#53: FILE: include/linux/ckrm_tc.h:11:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#58: FILE: include/linux/ckrm_tc.h:16:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/ckrm_tc.h:17:
+extern int ckrm_forced_reclassify_pid(int pid, struct ckrm_task_class *cls);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: kernel/ckrm/ckrm_tc.c:1:
+/* ckrm_tc.c - Class-based Kernel Resource Management (CKRM)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: kernel/ckrm/ckrm_tc.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: kernel/ckrm/ckrm_tc.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: kernel/ckrm/ckrm_tc.c:9:
+ * Provides kernel API of CKRM for in-kernel,per-resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: kernel/ckrm/ckrm_tc.c:10:
+ * (one each for cpu, memory, io, network) and callbacks for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: kernel/ckrm/ckrm_tc.c:14:
+ * $

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#94: FILE: kernel/ckrm/ckrm_tc.c:30:
+ *        surrounding logic. Added task paramter for all CE callbacks.
                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#106: FILE: kernel/ckrm/ckrm_tc.c:42:
+#include <asm/uaccess.h>

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#122: FILE: kernel/ckrm/ckrm_tc.c:58:
+static struct ckrm_core_class *ckrm_alloc_task_class(struct ckrm_core_class *parent, const char *name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: kernel/ckrm/ckrm_tc.c:68:
+^I.typeID         = CKRM_CLASSTYPE_TASK_CLASS, $

CHECK:CAMELCASE: Avoid CamelCase: <typeID>
#132: FILE: kernel/ckrm/ckrm_tc.c:68:
+	.typeID         = CKRM_CLASSTYPE_TASK_CLASS, 

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: kernel/ckrm/ckrm_tc.c:69:
+^I.maxdepth       = 3,                           // Hubertus .. just to start $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: kernel/ckrm/ckrm_tc.c:71:
+^I.max_res_ctlrs  = CKRM_MAX_RES_CTLRS,        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: kernel/ckrm/ckrm_tc.c:78:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: kernel/ckrm/ckrm_tc.c:79:
+^I// private version of functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: kernel/ckrm/ckrm_tc.c:85:
+^I// use of default functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: kernel/ckrm/ckrm_tc.c:94:
+^I.add_resctrl    = &tc_add_resctrl,^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: kernel/ckrm/ckrm_tc.c:112:
+  ^Ispin_lock(&tsk->ckrm_tsklock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: kernel/ckrm/ckrm_tc.c:112:
+  ^Ispin_lock(&tsk->ckrm_tsklock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: kernel/ckrm/ckrm_tc.c:112:
+  ^Ispin_lock(&tsk->ckrm_tsklock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: kernel/ckrm/ckrm_tc.c:118:
+  ^Ispin_unlock(&tsk->ckrm_tsklock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: kernel/ckrm/ckrm_tc.c:118:
+  ^Ispin_unlock(&tsk->ckrm_tsklock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: kernel/ckrm/ckrm_tc.c:118:
+  ^Ispin_unlock(&tsk->ckrm_tsklock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: kernel/ckrm/ckrm_tc.c:124:
+ * Change the task's task class  to "newcls" if the task's current $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: kernel/ckrm/ckrm_tc.c:131:
+ * ^I- tsk->ckrm_task_lock$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: kernel/ckrm/ckrm_tc.c:132:
+ * ^I- core->ckrm_lock, if core is NULL then ckrm_dflt_class.ckrm_lock$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: kernel/ckrm/ckrm_tc.c:133:
+ * ^I- tsk->taskclass->ckrm_lock $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: kernel/ckrm/ckrm_tc.c:133:
+ * ^I- tsk->taskclass->ckrm_lock $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: kernel/ckrm/ckrm_tc.c:134:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: kernel/ckrm/ckrm_tc.c:140:
+ckrm_set_taskclass(struct task_struct *tsk, ckrm_task_class_t *newcls, $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldcls != curcls'
#218: FILE: kernel/ckrm/ckrm_tc.c:154:
+	if (oldcls && (oldcls != curcls)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#222: FILE: kernel/ckrm/ckrm_tc.c:158:
+			printk("ckrm_set_taskclass(%s:%d): Race-condition caught <%s> %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_set_taskclass', this function's name, in a string
#222: FILE: kernel/ckrm/ckrm_tc.c:158:
+			printk("ckrm_set_taskclass(%s:%d): Race-condition caught <%s> %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: kernel/ckrm/ckrm_tc.c:159:
+			printk("ckrm_set_taskclass(%s:%d): Race-condition caught <%s> %d\n",
+				tsk->comm,tsk->pid,class_core(newcls)->name,event);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: kernel/ckrm/ckrm_tc.c:159:
+				tsk->comm,tsk->pid,class_core(newcls)->name,event);
 				         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: kernel/ckrm/ckrm_tc.c:159:
+				tsk->comm,tsk->pid,class_core(newcls)->name,event);
 				                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: kernel/ckrm/ckrm_tc.c:159:
+				tsk->comm,tsk->pid,class_core(newcls)->name,event);
 				                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: kernel/ckrm/ckrm_tc.c:171:
+^I// take out of old class $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curcls != NULL'
#237: FILE: kernel/ckrm/ckrm_tc.c:173:
+	if ((drop_old_cls = (curcls != NULL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#237: FILE: kernel/ckrm/ckrm_tc.c:173:
+	if ((drop_old_cls = (curcls != NULL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "curcls"
#237: FILE: kernel/ckrm/ckrm_tc.c:173:
+	if ((drop_old_cls = (curcls != NULL))) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: kernel/ckrm/ckrm_tc.c:186:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: kernel/ckrm/ckrm_tc.c:188:
+^I// put into new class $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: kernel/ckrm/ckrm_tc.c:199:
+	CE_NOTIFY(&CT_taskclass,event,newcls,tsk);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: kernel/ckrm/ckrm_tc.c:199:
+	CE_NOTIFY(&CT_taskclass,event,newcls,tsk);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#263: FILE: kernel/ckrm/ckrm_tc.c:199:
+	CE_NOTIFY(&CT_taskclass,event,newcls,tsk);
 	                                    ^

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#267: FILE: kernel/ckrm/ckrm_tc.c:203:
+	clstype = class_isa(newcls);                      // Hubertus .. can hardcode ckrm_CT_taskclass

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: kernel/ckrm/ckrm_tc.c:209:
+^I^Iif (rcbs && rcbs->change_resclass && (old_res_class != new_res_class)) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_res_class != new_res_class'
#273: FILE: kernel/ckrm/ckrm_tc.c:209:
+		if (rcbs && rcbs->change_resclass && (old_res_class != new_res_class)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: kernel/ckrm/ckrm_tc.c:215:
+^Iif (drop_old_cls) $

WARNING:RETURN_VOID: void function return statements are not generally useful
#282: FILE: kernel/ckrm/ckrm_tc.c:218:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: kernel/ckrm/ckrm_tc.c:229:
+^Iif ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) $

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#293: FILE: kernel/ckrm/ckrm_tc.c:229:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#293: FILE: kernel/ckrm/ckrm_tc.c:229:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid >= CKRM_MAX_RES_CTLRS'
#293: FILE: kernel/ckrm/ckrm_tc.c:229:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#293: FILE: kernel/ckrm/ckrm_tc.c:229:
+	if ((resid < 0) || (resid >= CKRM_MAX_RES_CTLRS) || ((rcbs = core->classtype->res_ctlrs[resid]) == NULL)) 

CHECK:SPACING: No space is necessary after a cast
#299: FILE: kernel/ckrm/ckrm_tc.c:235:
+			(*rcbs->change_resclass)(tsk, (void *) -1, core->res_class[resid]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: kernel/ckrm/ckrm_tc.c:240:
+
+

WARNING:LONG_LINE_COMMENT: line length of 122 exceeds 100 columns
#309: FILE: kernel/ckrm/ckrm_tc.c:245:
+#define ECB_PRINTK(fmt, args...) // do { if (CT_taskclass.ce_regd) printk("%s: " fmt, __FUNCTION__ , ## args); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#311: FILE: kernel/ckrm/ckrm_tc.c:247:
+#define CE_CLASSIFY_TASK(event, tsk)						\
+do {										\
+	struct ckrm_task_class *newcls = NULL, *oldcls = tsk->taskclass;	\
+										\
+	CE_CLASSIFY_RET(newcls,&CT_taskclass,event,tsk);			\
+	if (newcls) {								\
+		/* called synchrously. no need to get task struct */		\
+		ckrm_set_taskclass(tsk, newcls, oldcls, event);			\
+	}									\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#311: FILE: kernel/ckrm/ckrm_tc.c:247:
+#define CE_CLASSIFY_TASK(event, tsk)						\
+do {										\
+	struct ckrm_task_class *newcls = NULL, *oldcls = tsk->taskclass;	\
+										\
+	CE_CLASSIFY_RET(newcls,&CT_taskclass,event,tsk);			\
+	if (newcls) {								\
+		/* called synchrously. no need to get task struct */		\
+		ckrm_set_taskclass(tsk, newcls, oldcls, event);			\
+	}									\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#311: FILE: kernel/ckrm/ckrm_tc.c:247:
+#define CE_CLASSIFY_TASK(event, tsk)						\
+do {										\
+	struct ckrm_task_class *newcls = NULL, *oldcls = tsk->taskclass;	\
+										\
+	CE_CLASSIFY_RET(newcls,&CT_taskclass,event,tsk);			\
+	if (newcls) {								\
+		/* called synchrously. no need to get task struct */		\
+		ckrm_set_taskclass(tsk, newcls, oldcls, event);			\
+	}									\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#315: FILE: kernel/ckrm/ckrm_tc.c:251:
+	CE_CLASSIFY_RET(newcls,&CT_taskclass,event,tsk);			\
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#315: FILE: kernel/ckrm/ckrm_tc.c:251:
+	CE_CLASSIFY_RET(newcls,&CT_taskclass,event,tsk);			\
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: kernel/ckrm/ckrm_tc.c:251:
+	CE_CLASSIFY_RET(newcls,&CT_taskclass,event,tsk);			\
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#315: FILE: kernel/ckrm/ckrm_tc.c:251:
+	CE_CLASSIFY_RET(newcls,&CT_taskclass,event,tsk);			\
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: kernel/ckrm/ckrm_tc.c:261:
+	CE_CLASSIFY_TASK(event,tsk);		\
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: kernel/ckrm/ckrm_tc.c:265:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#331: FILE: kernel/ckrm/ckrm_tc.c:267:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: kernel/ckrm/ckrm_tc.c:275:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: kernel/ckrm/ckrm_tc.c:281:
+	ECB_PRINTK("%p:%d:%s\n",tsk,tsk->pid,tsk->comm);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: kernel/ckrm/ckrm_tc.c:281:
+	ECB_PRINTK("%p:%d:%s\n",tsk,tsk->pid,tsk->comm);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: kernel/ckrm/ckrm_tc.c:281:
+	ECB_PRINTK("%p:%d:%s\n",tsk,tsk->pid,tsk->comm);
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: kernel/ckrm/ckrm_tc.c:284:
+^ICE_CLASSIFY_RET(cls,&CT_taskclass,CKRM_EVENT_FORK,tsk);^I     $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#348: FILE: kernel/ckrm/ckrm_tc.c:284:
+	CE_CLASSIFY_RET(cls,&CT_taskclass,CKRM_EVENT_FORK,tsk);	     
 	                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#348: FILE: kernel/ckrm/ckrm_tc.c:284:
+	CE_CLASSIFY_RET(cls,&CT_taskclass,CKRM_EVENT_FORK,tsk);	     
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: kernel/ckrm/ckrm_tc.c:284:
+	CE_CLASSIFY_RET(cls,&CT_taskclass,CKRM_EVENT_FORK,tsk);	     
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: kernel/ckrm/ckrm_tc.c:284:
+	CE_CLASSIFY_RET(cls,&CT_taskclass,CKRM_EVENT_FORK,tsk);	     
 	                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cls"
#349: FILE: kernel/ckrm/ckrm_tc.c:285:
+	if (cls == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#356: FILE: kernel/ckrm/ckrm_tc.c:292:
+		printk("BUG in cb_fork.. tsk (%s:%d> already linked\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: kernel/ckrm/ckrm_tc.c:293:
+		printk("BUG in cb_fork.. tsk (%s:%d> already linked\n",
+			tsk->comm,tsk->pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: kernel/ckrm/ckrm_tc.c:293:
+			tsk->comm,tsk->pid);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: kernel/ckrm/ckrm_tc.c:305:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: kernel/ckrm/ckrm_tc.c:306:
+	ECB_PRINTK("%p:%d:%s\n",tsk,tsk->pid,tsk->comm);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: kernel/ckrm/ckrm_tc.c:306:
+	ECB_PRINTK("%p:%d:%s\n",tsk,tsk->pid,tsk->comm);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: kernel/ckrm/ckrm_tc.c:306:
+	ECB_PRINTK("%p:%d:%s\n",tsk,tsk->pid,tsk->comm);
 	                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#373: FILE: kernel/ckrm/ckrm_tc.c:309:
+	CE_CLASSIFY_NORET( &CT_taskclass, CKRM_EVENT_EXIT, tsk);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#375: FILE: kernel/ckrm/ckrm_tc.c:311:
+	if ((cls = tsk->taskclass) != NULL) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: kernel/ckrm/ckrm_tc.c:326:
+	ECB_PRINTK("%p:%d:%s <%s>\n",current,current->pid,current->comm,filename);
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: kernel/ckrm/ckrm_tc.c:326:
+	ECB_PRINTK("%p:%d:%s <%s>\n",current,current->pid,current->comm,filename);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: kernel/ckrm/ckrm_tc.c:326:
+	ECB_PRINTK("%p:%d:%s <%s>\n",current,current->pid,current->comm,filename);
 	                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#390: FILE: kernel/ckrm/ckrm_tc.c:326:
+	ECB_PRINTK("%p:%d:%s <%s>\n",current,current->pid,current->comm,filename);
 	                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#397: FILE: kernel/ckrm/ckrm_tc.c:333:
+	ECB_PRINTK("%p:%d:%s\n",current,current->pid,current->comm);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#397: FILE: kernel/ckrm/ckrm_tc.c:333:
+	ECB_PRINTK("%p:%d:%s\n",current,current->pid,current->comm);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#397: FILE: kernel/ckrm/ckrm_tc.c:333:
+	ECB_PRINTK("%p:%d:%s\n",current,current->pid,current->comm);
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: kernel/ckrm/ckrm_tc.c:340:
+	ECB_PRINTK("%p:%d:%s\n",current,current->pid,current->comm);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: kernel/ckrm/ckrm_tc.c:340:
+	ECB_PRINTK("%p:%d:%s\n",current,current->pid,current->comm);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: kernel/ckrm/ckrm_tc.c:340:
+	ECB_PRINTK("%p:%d:%s\n",current,current->pid,current->comm);
 	                                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#409: FILE: kernel/ckrm/ckrm_tc.c:345:
+	CKRM_EVENT_SPEC( NEWTASK, cb_taskclass_newtask ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#409: FILE: kernel/ckrm/ckrm_tc.c:345:
+	CKRM_EVENT_SPEC( NEWTASK, cb_taskclass_newtask ),

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#410: FILE: kernel/ckrm/ckrm_tc.c:346:
+	CKRM_EVENT_SPEC( EXEC   , cb_taskclass_exec ),
 	                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#410: FILE: kernel/ckrm/ckrm_tc.c:346:
+	CKRM_EVENT_SPEC( EXEC   , cb_taskclass_exec ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#410: FILE: kernel/ckrm/ckrm_tc.c:346:
+	CKRM_EVENT_SPEC( EXEC   , cb_taskclass_exec ),

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#411: FILE: kernel/ckrm/ckrm_tc.c:347:
+	CKRM_EVENT_SPEC( FORK   , cb_taskclass_fork ),
 	                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#411: FILE: kernel/ckrm/ckrm_tc.c:347:
+	CKRM_EVENT_SPEC( FORK   , cb_taskclass_fork ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#411: FILE: kernel/ckrm/ckrm_tc.c:347:
+	CKRM_EVENT_SPEC( FORK   , cb_taskclass_fork ),

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#412: FILE: kernel/ckrm/ckrm_tc.c:348:
+	CKRM_EVENT_SPEC( EXIT   , cb_taskclass_exit ),
 	                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#412: FILE: kernel/ckrm/ckrm_tc.c:348:
+	CKRM_EVENT_SPEC( EXIT   , cb_taskclass_exit ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#412: FILE: kernel/ckrm/ckrm_tc.c:348:
+	CKRM_EVENT_SPEC( EXIT   , cb_taskclass_exit ),

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#413: FILE: kernel/ckrm/ckrm_tc.c:349:
+	CKRM_EVENT_SPEC( UID    , cb_taskclass_uid  ),
 	                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#413: FILE: kernel/ckrm/ckrm_tc.c:349:
+	CKRM_EVENT_SPEC( UID    , cb_taskclass_uid  ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#413: FILE: kernel/ckrm/ckrm_tc.c:349:
+	CKRM_EVENT_SPEC( UID    , cb_taskclass_uid  ),

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#414: FILE: kernel/ckrm/ckrm_tc.c:350:
+	CKRM_EVENT_SPEC( GID    , cb_taskclass_gid  ),
 	                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#414: FILE: kernel/ckrm/ckrm_tc.c:350:
+	CKRM_EVENT_SPEC( GID    , cb_taskclass_gid  ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#414: FILE: kernel/ckrm/ckrm_tc.c:350:
+	CKRM_EVENT_SPEC( GID    , cb_taskclass_gid  ),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: kernel/ckrm/ckrm_tc.c:357:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: kernel/ckrm/ckrm_tc.c:359:
+ *    synchronous callbacks are protected against race conditions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: kernel/ckrm/ckrm_tc.c:361:
+ *    Async calls need to be serialized to ensure they can't $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: kernel/ckrm/ckrm_tc.c:362:
+ *    race against each other $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#432: FILE: kernel/ckrm/ckrm_tc.c:368:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: kernel/ckrm/ckrm_tc.c:373:
+ * We have the problem that we can not hold any lock (including the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: kernel/ckrm/ckrm_tc.c:376:
+ * (a) go through entire pidrange (0..pidmax) and if a task exists at $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: kernel/ckrm/ckrm_tc.c:378:
+ * (b) go several time through task list and build a bitmap for a particular $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: kernel/ckrm/ckrm_tc.c:380:
+ * $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#451: FILE: kernel/ckrm/ckrm_tc.c:387:
+	extern int pid_max;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#459: FILE: kernel/ckrm/ckrm_tc.c:395:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 13)
#461: FILE: kernel/ckrm/ckrm_tc.c:397:
+	if (curpidmax <= PID_MAX_DEFAULT) {
+	     use_bitmap = 1;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#461: FILE: kernel/ckrm/ckrm_tc.c:397:
+	if (curpidmax <= PID_MAX_DEFAULT) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 13)
#463: FILE: kernel/ckrm/ckrm_tc.c:399:
+	} else {
+	     use_bitmap = (ratio >= 2);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: kernel/ckrm/ckrm_tc.c:405:
+ retry:^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#473: FILE: kernel/ckrm/ckrm_tc.c:409:
+		for ( i=0 ; i<curpidmax ; i++ ) {
 		       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#473: FILE: kernel/ckrm/ckrm_tc.c:409:
+		for ( i=0 ; i<curpidmax ; i++ ) {
 		             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#473: FILE: kernel/ckrm/ckrm_tc.c:409:
+		for ( i=0 ; i<curpidmax ; i++ ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#473: FILE: kernel/ckrm/ckrm_tc.c:409:
+		for ( i=0 ; i<curpidmax ; i++ ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: kernel/ckrm/ckrm_tc.c:410:
+^I^I^Iif ((thread = find_task_by_pid(i)) == NULL) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#474: FILE: kernel/ckrm/ckrm_tc.c:410:
+			if ((thread = find_task_by_pid(i)) == NULL) 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#490: FILE: kernel/ckrm/ckrm_tc.c:426:
+
+

CHECK:SPACING: No space is necessary after a cast
#491: FILE: kernel/ckrm/ckrm_tc.c:427:
+		bitmap = (unsigned long*) __get_free_pages(GFP_KERNEL,order);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#491: FILE: kernel/ckrm/ckrm_tc.c:427:
+		bitmap = (unsigned long*) __get_free_pages(GFP_KERNEL,order);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: kernel/ckrm/ckrm_tc.c:427:
+		bitmap = (unsigned long*) __get_free_pages(GFP_KERNEL,order);
 		                                                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bitmap"
#492: FILE: kernel/ckrm/ckrm_tc.c:428:
+		if (bitmap == NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#501: FILE: kernel/ckrm/ckrm_tc.c:437:
+		for ( i=0 ; i < num_loops && do_next; i++) {
 		       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#501: FILE: kernel/ckrm/ckrm_tc.c:437:
+		for ( i=0 ; i < num_loops && do_next; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: kernel/ckrm/ckrm_tc.c:438:
+^I^I^Iint pid_start = i*bitmapsize; $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#502: FILE: kernel/ckrm/ckrm_tc.c:438:
+			int pid_start = i*bitmapsize; 
 			                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#507: FILE: kernel/ckrm/ckrm_tc.c:443:
+			memset(bitmap, 0, bitmapsize/8); // start afresh
 			                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid < pid_start'
#513: FILE: kernel/ckrm/ckrm_tc.c:449:
+				if ((pid < pid_start) || (pid >= pid_end)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pid >= pid_end'
#513: FILE: kernel/ckrm/ckrm_tc.c:449:
+				if ((pid < pid_start) || (pid >= pid_end)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#514: FILE: kernel/ckrm/ckrm_tc.c:450:
+					if (pid >= pid_end) {
+						do_next = 1;
+					}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: kernel/ckrm/ckrm_tc.c:460:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: kernel/ckrm/ckrm_tc.c:461:
+^I^I^Iif (num_found == 0) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#534: FILE: kernel/ckrm/ckrm_tc.c:470:
+				if ((thread = find_task_by_pid(pid)) != NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#545: FILE: kernel/ckrm/ckrm_tc.c:481:
+
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#556: FILE: kernel/ckrm/ckrm_tc.c:492:
+	if (pid < 0) {
[...]
+		 rc = -EINVAL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#565: FILE: kernel/ckrm/ckrm_tc.c:501:
+		if ((tsk = find_task_by_pid(pid)) != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#595: FILE: kernel/ckrm/ckrm_tc.c:531:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#596: FILE: kernel/ckrm/ckrm_tc.c:532:
+	printk("\t%s: start %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#596: FILE: kernel/ckrm/ckrm_tc.c:532:
+	printk("\t%s: start %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#596: FILE: kernel/ckrm/ckrm_tc.c:532:
+	printk("\t%s: start %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#596: FILE: kernel/ckrm/ckrm_tc.c:532:
+	printk("\t%s: start %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);
 	                                                ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#596: FILE: kernel/ckrm/ckrm_tc.c:532:
+	printk("\t%s: start %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: kernel/ckrm/ckrm_tc.c:542:
+^I^Istruct task_struct *tsk = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: kernel/ckrm/ckrm_tc.c:545:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: kernel/ckrm/ckrm_tc.c:550:
+^I^I^ICE_CLASSIFY_RET(newcls,&CT_taskclass,CKRM_EVENT_RECLASSIFY,tsk); $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#614: FILE: kernel/ckrm/ckrm_tc.c:550:
+			CE_CLASSIFY_RET(newcls,&CT_taskclass,CKRM_EVENT_RECLASSIFY,tsk); 
 			                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#614: FILE: kernel/ckrm/ckrm_tc.c:550:
+			CE_CLASSIFY_RET(newcls,&CT_taskclass,CKRM_EVENT_RECLASSIFY,tsk); 
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: kernel/ckrm/ckrm_tc.c:550:
+			CE_CLASSIFY_RET(newcls,&CT_taskclass,CKRM_EVENT_RECLASSIFY,tsk); 
 			                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: kernel/ckrm/ckrm_tc.c:550:
+			CE_CLASSIFY_RET(newcls,&CT_taskclass,CKRM_EVENT_RECLASSIFY,tsk); 
 			                                                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#630: FILE: kernel/ckrm/ckrm_tc.c:566:
+	printk("\t%s: stop  %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#630: FILE: kernel/ckrm/ckrm_tc.c:566:
+	printk("\t%s: stop  %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#630: FILE: kernel/ckrm/ckrm_tc.c:566:
+	printk("\t%s: stop  %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);
 	                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#630: FILE: kernel/ckrm/ckrm_tc.c:566:
+	printk("\t%s: stop  %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);
 	                                                ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#630: FILE: kernel/ckrm/ckrm_tc.c:566:
+	printk("\t%s: stop  %p:%s:%d\n",__FUNCTION__,cls,cls->core.name, cls->core.refcnt);

WARNING:SPACING: space prohibited before semicolon
#636: FILE: kernel/ckrm/ckrm_tc.c:572:
+	return ;

WARNING:RETURN_VOID: void function return statements are not generally useful
#637: FILE: kernel/ckrm/ckrm_tc.c:573:
+	return ;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: kernel/ckrm/ckrm_tc.c:579:
+int $

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#649: FILE: kernel/ckrm/ckrm_tc.c:585:
+		return - EINVAL;
 		       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#652: FILE: kernel/ckrm/ckrm_tc.c:588:
+	if ((tsk = find_task_by_pid(pid)) == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#658: FILE: kernel/ckrm/ckrm_tc.c:594:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: kernel/ckrm/ckrm_tc.c:596:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: kernel/ckrm/ckrm_tc.c:601:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#674: FILE: kernel/ckrm/ckrm_tc.c:610:
+	struct ckrm_task_class *taskcls;
+	taskcls = kmalloc(sizeof(struct ckrm_task_class), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*taskcls)...) over kmalloc(sizeof(struct ckrm_task_class)...)
#674: FILE: kernel/ckrm/ckrm_tc.c:610:
+	taskcls = kmalloc(sizeof(struct ckrm_task_class), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: kernel/ckrm/ckrm_tc.c:611:
+^Iif (taskcls == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!taskcls"
#675: FILE: kernel/ckrm/ckrm_tc.c:611:
+	if (taskcls == NULL) 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#679: FILE: kernel/ckrm/ckrm_tc.c:615:
+			     class_core(taskcls),parent,name);
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#679: FILE: kernel/ckrm/ckrm_tc.c:615:
+			     class_core(taskcls),parent,name);
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#683: FILE: kernel/ckrm/ckrm_tc.c:619:
+		(*CT_taskclass.ce_callbacks.class_add)(name,taskcls);
 		                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#701: FILE: kernel/ckrm/ckrm_tc.c:637:
+ ^I^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#701: FILE: kernel/ckrm/ckrm_tc.c:637:
+ ^I^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: kernel/ckrm/ckrm_tc.c:637:
+ ^I^Ireturn 0;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#704: FILE: kernel/ckrm/ckrm_tc.c:640:
+	printk("%s: stop  %p:%s:%d\n",__FUNCTION__,core,core->name, core->refcnt);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: kernel/ckrm/ckrm_tc.c:640:
+	printk("%s: stop  %p:%s:%d\n",__FUNCTION__,core,core->name, core->refcnt);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: kernel/ckrm/ckrm_tc.c:640:
+	printk("%s: stop  %p:%s:%d\n",__FUNCTION__,core,core->name, core->refcnt);
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#704: FILE: kernel/ckrm/ckrm_tc.c:640:
+	printk("%s: stop  %p:%s:%d\n",__FUNCTION__,core,core->name, core->refcnt);
 	                                               ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#704: FILE: kernel/ckrm/ckrm_tc.c:640:
+	printk("%s: stop  %p:%s:%d\n",__FUNCTION__,core,core->name, core->refcnt);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: kernel/ckrm/ckrm_tc.c:646:
+		(*CT_taskclass.ce_callbacks.class_delete)(core->name,taskcls);
 		                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#711: FILE: kernel/ckrm/ckrm_tc.c:647:
+	ckrm_reclassify_class_tasks( taskcls );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#711: FILE: kernel/ckrm/ckrm_tc.c:647:
+	ckrm_reclassify_class_tasks( taskcls );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#719: FILE: kernel/ckrm/ckrm_tc.c:655:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#723: FILE: kernel/ckrm/ckrm_tc.c:659:
+	printk("...... Initializing ClassType<%s> ........\n",CT_taskclass.name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#723: FILE: kernel/ckrm/ckrm_tc.c:659:
+	printk("...... Initializing ClassType<%s> ........\n",CT_taskclass.name);
 	                                                     ^

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#724: FILE: kernel/ckrm/ckrm_tc.c:660:
+	// intialize the default class
 	   ^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#726: FILE: kernel/ckrm/ckrm_tc.c:662:
+			     NULL,dflt_taskclass_name);
 			         ^

WARNING:TYPO_SPELLING: 'registeration' may be misspelled - perhaps 'registration'?
#732: FILE: kernel/ckrm/ckrm_tc.c:668:
+	// note registeration of all resource controllers will be done later dynamically 
 	        ^^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#732: FILE: kernel/ckrm/ckrm_tc.c:668:
+^I// note registeration of all resource controllers will be done later dynamically $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#736: FILE: kernel/ckrm/ckrm_tc.c:672:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#738: FILE: kernel/ckrm/ckrm_tc.c:674:
+static int                      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: kernel/ckrm/ckrm_tc.c:675:
+tc_show_members(struct ckrm_core_class *core, struct seq_file *seq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: kernel/ckrm/ckrm_tc.c:681:
+^Ilist_for_each(lh, &core->objlist) {^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: kernel/ckrm/ckrm_tc.c:683:
+		seq_printf(seq,"%ld\n", (long)tsk->pid);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#755: FILE: kernel/ckrm/ckrm_tc.c:691:
+tc_forced_reclassify(struct ckrm_core_class *target,const char *obj)
                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: kernel/ckrm/ckrm_tc.c:692:
+{^I$

CHECK:SPACING: No space is necessary after a cast
#760: FILE: kernel/ckrm/ckrm_tc.c:696:
+	pid = (pid_t) simple_strtoul(obj,NULL,10);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#760: FILE: kernel/ckrm/ckrm_tc.c:696:
+	pid = (pid_t) simple_strtoul(obj,NULL,10);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#760: FILE: kernel/ckrm/ckrm_tc.c:696:
+	pid = (pid_t) simple_strtoul(obj,NULL,10);
 	                                     ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#760: FILE: kernel/ckrm/ckrm_tc.c:696:
+	pid = (pid_t) simple_strtoul(obj,NULL,10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: kernel/ckrm/ckrm_tc.c:699:
+		rc = ckrm_forced_reclassify_pid(pid,
+				class_type(ckrm_task_class_t,target));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#763: FILE: kernel/ckrm/ckrm_tc.c:699:
+				class_type(ckrm_task_class_t,target));
 				                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: kernel/ckrm/ckrm_tc.c:702:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: kernel/ckrm/ckrm_tc.c:703:
+^I$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#768: FILE: kernel/ckrm/ckrm_tc.c:704:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#785: FILE: kernel/ckrm/ckrm_tc.c:721:
+			printk("check_tasklist_sanity: class %s empty list\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_tasklist_sanity', this function's name, in a string
#785: FILE: kernel/ckrm/ckrm_tc.c:721:
+			printk("check_tasklist_sanity: class %s empty list\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: kernel/ckrm/ckrm_tc.c:722:
+			printk("check_tasklist_sanity: class %s empty list\n",
+					core->name);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#790: FILE: kernel/ckrm/ckrm_tc.c:726:
+			struct task_struct *tsk = container_of(lh1, struct task_struct, taskclass_link);

WARNING:LINE_SPACING: Missing a blank line after declarations
#791: FILE: kernel/ckrm/ckrm_tc.c:727:
+			struct task_struct *tsk = container_of(lh1, struct task_struct, taskclass_link);
+			if (count++ > 20000) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: kernel/ckrm/ckrm_tc.c:728:
+				printk("list is CORRUPTED\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: kernel/ckrm/ckrm_tc.c:733:
+^I^I^I^Itclsname = (tsk->taskclass) ? class_core(tsk->taskclass)->name $

WARNING:LINE_SPACING: Missing a blank line after declarations
#797: FILE: kernel/ckrm/ckrm_tc.c:733:
+				const char *tclsname;
+				tclsname = (tsk->taskclass) ? class_core(tsk->taskclass)->name 

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: kernel/ckrm/ckrm_tc.c:734:
+^I^I^I^I^I                    : "NULL";$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#799: FILE: kernel/ckrm/ckrm_tc.c:735:
+				printk("sanity: task %s:%d has ckrm_core |%s| but in list |%s|\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#800: FILE: kernel/ckrm/ckrm_tc.c:736:
+				       tsk->comm,tsk->pid,tclsname,core->name);
 				                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#800: FILE: kernel/ckrm/ckrm_tc.c:736:
+				       tsk->comm,tsk->pid,tclsname,core->name);
 				                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#800: FILE: kernel/ckrm/ckrm_tc.c:736:
+				       tsk->comm,tsk->pid,tclsname,core->name);
 				                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: kernel/ckrm/ckrm_tc.c:743:
+void $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#813: FILE: kernel/ckrm/ckrm_tc.c:749:
+	printk("Analyze Error <%s> %d\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#814: FILE: kernel/ckrm/ckrm_tc.c:750:
+	       class_core(tskcls)->name,atomic_read(&(class_core(tskcls)->refcnt)));
 	                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'thread->taskclass == tskcls'
#820: FILE: kernel/ckrm/ckrm_tc.c:756:
+		if ((thread->taskclass == tskcls) || (tskcls == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tskcls == NULL'
#820: FILE: kernel/ckrm/ckrm_tc.c:756:
+		if ((thread->taskclass == tskcls) || (tskcls == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tskcls"
#820: FILE: kernel/ckrm/ckrm_tc.c:756:
+		if ((thread->taskclass == tskcls) || (tskcls == NULL)) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#822: FILE: kernel/ckrm/ckrm_tc.c:758:
+			tclsname = (thread->taskclass) ? class_core(thread->taskclass)->name : "NULL";

WARNING:LINE_SPACING: Missing a blank line after declarations
#822: FILE: kernel/ckrm/ckrm_tc.c:758:
+			const char *tclsname;
+			tclsname = (thread->taskclass) ? class_core(thread->taskclass)->name : "NULL";

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#823: FILE: kernel/ckrm/ckrm_tc.c:759:
+			printk("%d thread=<%s:%d>  -> <%s> <%lx>\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#824: FILE: kernel/ckrm/ckrm_tc.c:760:
+			       count,thread->comm,thread->pid,tclsname, thread->flags & PF_EXITING);
 			            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#824: FILE: kernel/ckrm/ckrm_tc.c:760:
+			       count,thread->comm,thread->pid,tclsname, thread->flags & PF_EXITING);
 			                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#824: FILE: kernel/ckrm/ckrm_tc.c:760:
+			       count,thread->comm,thread->pid,tclsname, thread->flags & PF_EXITING);
 			                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#830: FILE: kernel/ckrm/ckrm_tc.c:766:
+	printk("End Analyze Error <%s> %d\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#831: FILE: kernel/ckrm/ckrm_tc.c:767:
+	       class_core(tskcls)->name,atomic_read(&(class_core(tskcls)->refcnt)));
 	                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#832: FILE: kernel/ckrm/ckrm_tc.c:768:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#839: FILE: fs/rcfs/tc_magic.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#839: FILE: fs/rcfs/tc_magic.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#840: FILE: fs/rcfs/tc_magic.c:2:
+ * fs/rcfs/tc_magic.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#840: FILE: fs/rcfs/tc_magic.c:2:
+ * fs/rcfs/tc_magic.c 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#846: FILE: fs/rcfs/tc_magic.c:8:
+ *           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: fs/rcfs/tc_magic.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: fs/rcfs/tc_magic.c:13:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#869: FILE: fs/rcfs/tc_magic.c:31:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: fs/rcfs/tc_magic.c:35:
+ * Define structures for taskclass root directory and its magic files $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: fs/rcfs/tc_magic.c:37:
+ * the taskclass root (upon classtype registration) and each directory (class) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#876: FILE: fs/rcfs/tc_magic.c:38:
+ * created subsequently. However, classtypes can also choose to have different $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#878: FILE: fs/rcfs/tc_magic.c:40:
+ * using their mkdir function. RCFS only provides helper functions for creating $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#880: FILE: fs/rcfs/tc_magic.c:42:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: fs/rcfs/tc_magic.c:45:
+#define TC_FILE_MODE (S_IFREG | S_IRUGO | S_IWUSR) $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#883: FILE: fs/rcfs/tc_magic.c:45:
+#define TC_FILE_MODE (S_IFREG | S_IRUGO | S_IWUSR) 

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: fs/rcfs/tc_magic.c:46:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: fs/rcfs/tc_magic.c:50:
+^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#895: FILE: fs/rcfs/tc_magic.c:57:
+^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: fs/rcfs/tc_magic.c:58:
+^I^I.name    =  "target", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: fs/rcfs/tc_magic.c:59:
+^I^I.mode    = TC_FILE_MODE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#901: FILE: fs/rcfs/tc_magic.c:63:
+^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#902: FILE: fs/rcfs/tc_magic.c:64:
+^I^I.name    =  "config", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: fs/rcfs/tc_magic.c:65:
+^I^I.mode    = TC_FILE_MODE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: fs/rcfs/tc_magic.c:66:
+^I^I.i_fop   = &config_fileops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#907: FILE: fs/rcfs/tc_magic.c:69:
+^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: fs/rcfs/tc_magic.c:70:
+^I^I.name    =  "members", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#909: FILE: fs/rcfs/tc_magic.c:71:
+^I^I.mode    = TC_FILE_MODE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#913: FILE: fs/rcfs/tc_magic.c:75:
+^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#914: FILE: fs/rcfs/tc_magic.c:76:
+^I^I.name    =  "stats", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: fs/rcfs/tc_magic.c:77:
+^I^I.mode    = TC_FILE_MODE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#916: FILE: fs/rcfs/tc_magic.c:78:
+^I^I.i_fop   = &stats_fileops, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: fs/rcfs/tc_magic.c:81:
+^I{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: fs/rcfs/tc_magic.c:82:
+^I^I.name    =  "shares", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: fs/rcfs/tc_magic.c:84:
+^I^I.i_fop   = &shares_fileops, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: fs/rcfs/tc_magic.c:94:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285277.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 190 errors, 57 warnings, 45 checks, 882 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285277.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
