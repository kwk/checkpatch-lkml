WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -urpN linux-2.5.36/arch/sh/config.in linux-2.5.36-ltt/arch/sh/config.in

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: arch/sh/kernel/entry.S:529:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: arch/sh/kernel/irq.c:133:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: arch/sh/kernel/irq.c:133:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: arch/sh/kernel/irq.c:133:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: arch/sh/kernel/irq.c:155:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: arch/sh/kernel/irq.c:155:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: arch/sh/kernel/irq.c:155:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#196: FILE: arch/sh/kernel/process.c:145:
+		volatile unsigned long retval = __sc0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: arch/sh/kernel/process.c:146:
+		volatile unsigned long retval = __sc0;
+		if (retval > 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#198: FILE: arch/sh/kernel/process.c:147:
+			TRACE_PROCESS(TRACE_EV_PROCESS_KTHREAD, retval, (int) fn);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: arch/sh/kernel/process.c:151:
+ ^Ireturn __sc0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: arch/sh/kernel/process.c:151:
+ ^Ireturn __sc0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: arch/sh/kernel/process.c:151:
+ ^Ireturn __sc0;$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#265: FILE: arch/sh/kernel/traps.c:496:
+		if (tmp==0) {
 		       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: arch/sh/kernel/traps.c:498:
+ ^I^I^Ireturn; /* sorted */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: arch/sh/kernel/traps.c:498:
+ ^I^I^Ireturn; /* sorted */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: arch/sh/kernel/traps.c:498:
+ ^I^I^Ireturn; /* sorted */$

CHECK:SPACING: No space is necessary after a cast
#300: FILE: arch/sh/kernel/traps.c:614:
+	trace_syscall_event.syscall_id = (uint8_t) regs->regs[REG_REG0 + 3];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: arch/sh/kernel/traps.c:626:
+	if (trace_get_config(&use_depth, &use_bounds, &seek_depth,
+		       (void *) &lower_bound, (void *) &upper_bound) < 0)

CHECK:SPACING: No space is necessary after a cast
#312: FILE: arch/sh/kernel/traps.c:626:
+		       (void *) &lower_bound, (void *) &upper_bound) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#316: FILE: arch/sh/kernel/traps.c:630:
+	if ((use_depth == 1) || (use_bounds == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#316: FILE: arch/sh/kernel/traps.c:630:
+	if ((use_depth == 1) || (use_bounds == 1)) {

CHECK:SPACING: No space is necessary after a cast
#318: FILE: arch/sh/kernel/traps.c:632:
+		stack = (unsigned long *) regs->regs[REG_REG15];

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#320: FILE: arch/sh/kernel/traps.c:634:
+		/* Keep on going until we reach the end of the process' stack limit (wherever it may be) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > current->mm->start_code'
#324: FILE: arch/sh/kernel/traps.c:638:
+			if ((addr > current->mm->start_code) && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < current->mm->end_code'
#324: FILE: arch/sh/kernel/traps.c:638:
+			if ((addr > current->mm->start_code) && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#326: FILE: arch/sh/kernel/traps.c:640:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth == seek_depth'
#326: FILE: arch/sh/kernel/traps.c:640:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#326: FILE: arch/sh/kernel/traps.c:640:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > lower_bound'
#326: FILE: arch/sh/kernel/traps.c:640:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < upper_bound'
#326: FILE: arch/sh/kernel/traps.c:640:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#327: FILE: arch/sh/kernel/traps.c:641:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#328: FILE: arch/sh/kernel/traps.c:642:
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:BRACES: Unbalanced braces around else statement
#334: FILE: arch/sh/kernel/traps.c:648:
+				} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: arch/sh/mm/fault.c:106:
+		unsigned long trapnr;
+		asm volatile("stc       r2_bank,%0": "=r" (trapnr));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#372: FILE: arch/sh/mm/fault.c:106:
+		asm volatile("stc       r2_bank,%0": "=r" (trapnr));
 		                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#417: FILE: include/asm-sh/trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#418: FILE: include/asm-sh/trace.h:2:
+ * linux/include/asm-sh/trace.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 15 warnings, 17 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
