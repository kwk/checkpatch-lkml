WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#54: FILE: Documentation/spi.txt:1:
+Documentation/spi.txt

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: Documentation/spi.txt:111:
+* set CVSROOT environment variable to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#233: FILE: drivers/spi/Kconfig:6:
+config SPI
+	tristate "SPI (Serial Peripheral Interface) bus support"
+        default false
+	help
+	  Say Y if you need to enable SPI support on your kernel.
+ 	  Say M if you want to create the spi loadable module.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#249: FILE: drivers/spi/Kconfig:22:
+config SPI_CUSTOM_ALLOC
+	bool "Custom (faster) SPI message allocation"
+	default false
+	help
+	  Say Y here to use faster SPI message allocation.
+	  If unsure, say N.
+

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#295: FILE: drivers/spi/Makefile:17:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#303: FILE: drivers/spi/spi-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#304: FILE: drivers/spi/spi-core.c:2:
+ *  drivers/spi/spi-core.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#326: FILE: drivers/spi/spi-core.c:24:
+#include <asm/atomic.h>

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#339: FILE: drivers/spi/spi-core.c:37:
+void spimsg_set_clock (struct spi_msg* message, u32 clock)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#339: FILE: drivers/spi/spi-core.c:37:
+void spimsg_set_clock (struct spi_msg* message, u32 clock)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#348: FILE: drivers/spi/spi-core.c:46:
+u32 spimsg_get_clock (struct spi_msg* message)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: drivers/spi/spi-core.c:46:
+u32 spimsg_get_clock (struct spi_msg* message)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#357: FILE: drivers/spi/spi-core.c:55:
+u32 spimsg_get_flags (struct spi_msg* message)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#357: FILE: drivers/spi/spi-core.c:55:
+u32 spimsg_get_flags (struct spi_msg* message)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#367: FILE: drivers/spi/spi-core.c:65:
+u32 spimsg_get_buffer (struct spi_msg *message, void **buffer)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#374: FILE: drivers/spi/spi-core.c:72:
+	if (message->flags & SPI_M_DMAUNSAFE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#375: FILE: drivers/spi/spi-core.c:73:
+		*buffer = kmalloc (message->len+sizeof(void*), SLAB_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#375: FILE: drivers/spi/spi-core.c:73:
+		*buffer = kmalloc (message->len+sizeof(void*), SLAB_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#375: FILE: drivers/spi/spi-core.c:73:
+		*buffer = kmalloc (message->len+sizeof(void*), SLAB_KERNEL);
 		                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#379: FILE: drivers/spi/spi-core.c:77:
+			memcpy( *buffer, message->buf_ptr, message->len );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#379: FILE: drivers/spi/spi-core.c:77:
+			memcpy( *buffer, message->buf_ptr, message->len );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: drivers/spi/spi-core.c:87:
+void spimsg_put_buffer (struct spi_msg *message, void *buffer)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#393: FILE: drivers/spi/spi-core.c:91:
+			memcpy (message->buf_ptr, buffer, message->len);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#402: FILE: drivers/spi/spi-core.c:100:
+struct spi_device *spimsg_get_spidev (struct spi_msg* message)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#402: FILE: drivers/spi/spi-core.c:100:
+struct spi_device *spimsg_get_spidev (struct spi_msg* message)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/spi/spi-core.c:123:
+static inline struct spi_msg *__spimsg_alloc(struct spi_device *device,
+					   struct spi_msg *link,

WARNING:SPACING: Unnecessary space before function pointer arguments
#429: FILE: drivers/spi/spi-core.c:127:
+					   void (*status) (struct spi_msg *,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#434: FILE: drivers/spi/spi-core.c:132:
+	if ((flags & (SPI_M_RD|SPI_M_WR)) == (SPI_M_RD|SPI_M_WR))
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#434: FILE: drivers/spi/spi-core.c:132:
+	if ((flags & (SPI_M_RD|SPI_M_WR)) == (SPI_M_RD|SPI_M_WR))
 	                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/spi/spi-core.c:160:
+struct spi_msg *spimsg_alloc(struct spi_device *device,
+					   u32 flags,

WARNING:SPACING: Unnecessary space before function pointer arguments
#465: FILE: drivers/spi/spi-core.c:163:
+					   void (*status) (struct spi_msg *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: drivers/spi/spi-core.c:178:
+struct spi_msg *spimsg_chain(struct spi_msg *msg,
+					   u32 flags,

WARNING:SPACING: Unnecessary space before function pointer arguments
#483: FILE: drivers/spi/spi-core.c:181:
+					   void (*status) (struct spi_msg *,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#516: FILE: drivers/spi/spi-core.c:214:
+ * ^Imatch the device to driver.Drivers and devices on SPI bus$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: drivers/spi/spi-core.c:215:
+ * ^Iare matched by name, just like the platform devices$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: drivers/spi/spi-core.c:227:
+ * ^Ithis function set device on SPI bus to suspended state, just$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#530: FILE: drivers/spi/spi-core.c:228:
+ * ^Ilike platform_bus does$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#532: FILE: drivers/spi/spi-core.c:230:
+static int spi_bus_suspend(struct device * dev, pm_message_t message)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#536: FILE: drivers/spi/spi-core.c:234:
+	if (dev && dev->driver && TO_SPI_DRIVER(dev->driver)->suspend ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#537: FILE: drivers/spi/spi-core.c:235:
+		ret = TO_SPI_DRIVER(dev->driver)->suspend( TO_SPI_DEV(dev), message);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#538: FILE: drivers/spi/spi-core.c:236:
+		if (ret == 0 )

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#548: FILE: drivers/spi/spi-core.c:246:
+ * ^IThis function resumes device on SPI bus, just like platform_bus does$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#550: FILE: drivers/spi/spi-core.c:248:
+static int spi_bus_resume(struct device * dev)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#554: FILE: drivers/spi/spi-core.c:252:
+	if (dev && dev->driver && TO_SPI_DRIVER(dev->driver)->suspend ) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: drivers/spi/spi-core.c:272:
+ * ^IOnce registered by spi_bus_register, the bus driver needs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#575: FILE: drivers/spi/spi-core.c:273:
+ * ^Iinitialization, that includes starting thread, initializing$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#576: FILE: drivers/spi/spi-core.c:274:
+ * ^Iinternal structures.. The best place where the spi_bus_driver_init$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#577: FILE: drivers/spi/spi-core.c:275:
+ * ^Iis in the `probe' function, when we already sure that passed$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#578: FILE: drivers/spi/spi-core.c:276:
+ * ^Idevice object is SPI master controller.$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#622: FILE: drivers/spi/spi-core.c:320:
+int spi_bus_driver_cleanup (struct spi_bus_driver *bus_drv, struct device *dev)

ERROR:SPACING: space required before the open parenthesis '('
#627: FILE: drivers/spi/spi-core.c:325:
+		if(bus_drv->stop_async)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#629: FILE: drivers/spi/spi-core.c:327:
+		kfree (pd);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#635: FILE: drivers/spi/spi-core.c:333:
+}
+/**

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#640: FILE: drivers/spi/spi-core.c:338:
+ * ^IThis is an internal function that is called when unregistering$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#641: FILE: drivers/spi/spi-core.c:339:
+ * ^Ibus driver. Responsibility of this function is freeing the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#642: FILE: drivers/spi/spi-core.c:340:
+ * ^Iresources that were requested by spi_bus_driver_init$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#653: FILE: drivers/spi/spi-core.c:351:
+ * ^IThis routine unregisters the SPI bus from the system. Before$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#654: FILE: drivers/spi/spi-core.c:352:
+ * ^Iunregistering, it deletes each SPI device on the bus using call$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#655: FILE: drivers/spi/spi-core.c:353:
+ * ^Ito __spi_device_free$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#669: FILE: drivers/spi/spi-core.c:367:
+ * ^IPointer to this function will be put to dev->release place$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#670: FILE: drivers/spi/spi-core.c:368:
+ * ^IThis fus called as a part of device removing$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#674: FILE: drivers/spi/spi-core.c:372:
+	struct spi_device* sdev = TO_SPI_DEV(dev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#685: FILE: drivers/spi/spi-core.c:383:
+ * ^ISPI device usually cannot be discovered by SPI bus driver, so it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#686: FILE: drivers/spi/spi-core.c:384:
+ * ^Ineeds to take the configuration somewhere from hardcoded structures,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#687: FILE: drivers/spi/spi-core.c:385:
+ * ^Iand prepare bus_data for its devices$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#689: FILE: drivers/spi/spi-core.c:387:
+struct spi_device* spi_device_add(struct device *parent, char *name, void *bus_data)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#691: FILE: drivers/spi/spi-core.c:389:
+	struct spi_device* dev;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#692: FILE: drivers/spi/spi-core.c:390:
+	static int minor = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev)...) over kzalloc(sizeof(struct spi_device)...)
#697: FILE: drivers/spi/spi-core.c:395:
+	dev = kzalloc(sizeof(struct spi_device), SLAB_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#698: FILE: drivers/spi/spi-core.c:396:
+	if(!dev)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#708: FILE: drivers/spi/spi-core.c:406:
+	if (device_register(&dev->dev)<0) {
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: drivers/spi/spi-core.c:428:
+	struct spi_device *spidev = TO_SPI_DEV(dev);
+	if (spidev->cdev) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#737: FILE: drivers/spi/spi-core.c:435:
+}
+/**

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#742: FILE: drivers/spi/spi-core.c:440:
+ * ^Icallback for synchronously processed message. If spi_transfer$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#743: FILE: drivers/spi/spi-core.c:441:
+ * ^Idetermines that there is no callback provided neither by$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#744: FILE: drivers/spi/spi-core.c:442:
+ * ^Imsg->status nor callback parameter, the __spi_transfer_callback$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#745: FILE: drivers/spi/spi-core.c:443:
+ * ^Iwill be used, and spi_transfer does not return until transfer$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#746: FILE: drivers/spi/spi-core.c:444:
+ * ^Iis finished$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#758: FILE: drivers/spi/spi-core.c:456:
+ * ^Iif both msg->status and callback are set, the error code of -EINVAL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#759: FILE: drivers/spi/spi-core.c:457:
+ * ^Iwill be returned$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#766: FILE: drivers/spi/spi-core.c:464:
+	if (msg && TO_SPI_BUS_DRIVER(bus->driver)->queue)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#775: FILE: drivers/spi/spi-core.c:473:
+				init_completion (&msg->sync);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#829: FILE: drivers/spi/spi-core.c:527:
+ * ^IThis function is intended to populate the SPI bus corresponding to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#830: FILE: drivers/spi/spi-core.c:528:
+ * ^Idevice passed as 1st parameter. If some device cannot be added$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#831: FILE: drivers/spi/spi-core.c:529:
+ * ^Ibecause of spi_device_add fail, the function will not try to parse$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#832: FILE: drivers/spi/spi-core.c:530:
+ * ^Ithe rest of list$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: drivers/spi/spi-core.c:533:
+int spi_bus_populate(struct device *parent,
+			struct spi_device_desc* devices_s,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#835: FILE: drivers/spi/spi-core.c:533:
+			struct spi_device_desc* devices_s,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#836: FILE: drivers/spi/spi-core.c:534:
+			void (*callback) (struct device* bus,

WARNING:SPACING: Unnecessary space before function pointer arguments
#836: FILE: drivers/spi/spi-core.c:534:
+			void (*callback) (struct device* bus,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#838: FILE: drivers/spi/spi-core.c:536:
+					  void* params))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/spi/spi-core.c:543:
+		dev_dbg(parent, " discovered new SPI device, name '%s'\n",
+				devices_s->name);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#846: FILE: drivers/spi/spi-core.c:544:
+		if ((new_device = spi_device_add(parent, devices_s->name, devices_s->params)) == NULL)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#846: FILE: drivers/spi/spi-core.c:544:
+		if ((new_device = spi_device_add(parent, devices_s->name, devices_s->params)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#861: FILE: drivers/spi/spi-core.c:559:
+ * ^IThis is simple wrapper for bus' `reset' method$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#863: FILE: drivers/spi/spi-core.c:561:
+void spi_bus_reset (struct device *bus, u32 context)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#872: FILE: drivers/spi/spi-core.c:570:
+static int spi_driver_probe (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#880: FILE: drivers/spi/spi-core.c:578:
+static int spi_driver_remove (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#888: FILE: drivers/spi/spi-core.c:586:
+static void spi_driver_shutdown (struct device *dev)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#936: FILE: drivers/spi/spi-core.c:634:
+EXPORT_SYMBOL_GPL(spi_bus_reset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#937: FILE: drivers/spi/spi-core.c:635:
+EXPORT_SYMBOL_GPL(spi_device_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#938: FILE: drivers/spi/spi-core.c:636:
+EXPORT_SYMBOL_GPL(spi_driver_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#939: FILE: drivers/spi/spi-core.c:637:
+EXPORT_SYMBOL_GPL(spi_bus_driver_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#940: FILE: drivers/spi/spi-core.c:638:
+EXPORT_SYMBOL_GPL(spi_bus_populate);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#941: FILE: drivers/spi/spi-core.c:639:
+EXPORT_SYMBOL_GPL(spi_transfer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#942: FILE: drivers/spi/spi-core.c:640:
+EXPORT_SYMBOL_GPL(spi_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#943: FILE: drivers/spi/spi-core.c:641:
+EXPORT_SYMBOL_GPL(spi_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#944: FILE: drivers/spi/spi-core.c:642:
+EXPORT_SYMBOL_GPL(spi_bus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#945: FILE: drivers/spi/spi-core.c:643:
+EXPORT_SYMBOL_GPL(spi_bus_driver_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#946: FILE: drivers/spi/spi-core.c:644:
+EXPORT_SYMBOL_GPL(spi_bus_driver_cleanup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#948: FILE: drivers/spi/spi-core.c:646:
+EXPORT_SYMBOL_GPL(spimsg_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#949: FILE: drivers/spi/spi-core.c:647:
+EXPORT_SYMBOL_GPL(spimsg_chain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#950: FILE: drivers/spi/spi-core.c:648:
+EXPORT_SYMBOL_GPL(spimsg_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#951: FILE: drivers/spi/spi-core.c:649:
+EXPORT_SYMBOL_GPL(spimsg_put_buffer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#952: FILE: drivers/spi/spi-core.c:650:
+EXPORT_SYMBOL_GPL(spimsg_get_flags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#953: FILE: drivers/spi/spi-core.c:651:
+EXPORT_SYMBOL_GPL(spimsg_get_buffer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#954: FILE: drivers/spi/spi-core.c:652:
+EXPORT_SYMBOL_GPL(spimsg_get_clock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#955: FILE: drivers/spi/spi-core.c:653:
+EXPORT_SYMBOL_GPL(spimsg_set_clock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#956: FILE: drivers/spi/spi-core.c:654:
+EXPORT_SYMBOL_GPL(spimsg_getnext);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#957: FILE: drivers/spi/spi-core.c:655:
+EXPORT_SYMBOL_GPL(spimsg_get_spidev);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#958: FILE: drivers/spi/spi-core.c:656:
+EXPORT_SYMBOL_GPL(spimsg_set_ctx);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#959: FILE: drivers/spi/spi-core.c:657:
+EXPORT_SYMBOL_GPL(spimsg_get_ctx);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#960: FILE: drivers/spi/spi-core.c:658:
+EXPORT_SYMBOL_GPL(spimsg_complete);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#967: FILE: drivers/spi/spi-core.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#968: FILE: drivers/spi/spi-core.h:2:
+ *  linux/drivers/spi/spi-core.h

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#985: FILE: drivers/spi/spi-core.h:19:
+#define SPI_M_CS	0x00000008	/**< CS active level at begining of frame  */
                 	          	                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#988: FILE: drivers/spi/spi-core.h:22:
+#define SPI_M_EXTBUF^I0x80000000    ^I/** externally allocated buffers */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1004: FILE: drivers/spi/spi-core.h:38:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1004: FILE: drivers/spi/spi-core.h:38:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1015: FILE: drivers/spi/spi-dev.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1016: FILE: drivers/spi/spi-dev.c:2:
+ *  drivers/spi/spi-dev.c

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1038: FILE: drivers/spi/spi-dev.c:24:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1046: FILE: drivers/spi/spi-dev.c:32:
+			   loff_t * offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1048: FILE: drivers/spi/spi-dev.c:34:
+			    loff_t * offset);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1060: FILE: drivers/spi/spi-dev.c:46:
+	return class_device_create(spidev_class, NULL, MKDEV(SPI_MAJOR, minor), device, "spi%d", minor);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1072: FILE: drivers/spi/spi-dev.c:58:
+static struct file_operations spidev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1089: FILE: drivers/spi/spi-dev.c:75:
+			   loff_t * offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1095: FILE: drivers/spi/spi-dev.c:81:
+	if (!kbuf)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1097: FILE: drivers/spi/spi-dev.c:83:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1114: FILE: drivers/spi/spi-dev.c:100:
+			    loff_t * offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1120: FILE: drivers/spi/spi-dev.c:106:
+	if (!kbuf)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1122: FILE: drivers/spi/spi-dev.c:108:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1170: FILE: drivers/spi/spi-dev.c:156:
+	if (status == 0) {
+		status = -ENODEV;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1196: FILE: drivers/spi/spi-dev.c:182:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1196: FILE: drivers/spi/spi-dev.c:182:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {
+		goto out;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1202: FILE: drivers/spi/spi-dev.c:188:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1202: FILE: drivers/spi/spi-dev.c:188:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1229: FILE: drivers/spi/spi-thread.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1230: FILE: drivers/spi/spi-thread.c:2:
+ *  drivers/spi/spi-thread.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1251: FILE: drivers/spi/spi-thread.c:23:
+#include <asm/atomic.h>

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1268: FILE: drivers/spi/spi-thread.c:40:
+void *__spi_start_async (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1270: FILE: drivers/spi/spi-thread.c:42:
+	struct threaded_async_data *td = kmalloc (sizeof (struct threaded_async_data), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1270: FILE: drivers/spi/spi-thread.c:42:
+	struct threaded_async_data *td = kmalloc (sizeof (struct threaded_async_data), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*td)...) over kmalloc(sizeof (struct threaded_async_data)...)
#1270: FILE: drivers/spi/spi-thread.c:42:
+	struct threaded_async_data *td = kmalloc (sizeof (struct threaded_async_data), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1287: FILE: drivers/spi/spi-thread.c:59:
+void __spi_stop_async (struct device *dev, void *ctx)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1292: FILE: drivers/spi/spi-thread.c:64:
+		atomic_inc (&td->exiting);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1302: FILE: drivers/spi/spi-thread.c:74:
+ * ^IThread wakes up if there is signal to exit (bd->exiting is set)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1303: FILE: drivers/spi/spi-thread.c:75:
+ * ^Ior there are any messages in bus' queue.$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1310: FILE: drivers/spi/spi-thread.c:82:
+	if (atomic_read(&td->exiting)) {
+		return 1;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1336: FILE: drivers/spi/spi-thread.c:108:
+ * ^IThis function is started as separate thread to perform actual$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1337: FILE: drivers/spi/spi-thread.c:109:
+ * ^Itransfers on SPI bus$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1347: FILE: drivers/spi/spi-thread.c:119:
+	while (!kthread_should_stop()) {
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1360: FILE: drivers/spi/spi-thread.c:132:
+			list_del (&cmsg->link);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1399: FILE: drivers/spi/spi-thread.c:171:
+ * ^IThis function queues the message to spi bus driver's queue.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1415: FILE: drivers/spi/spi-thread.c:187:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1421: FILE: drivers/spi/spi-thread.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1422: FILE: drivers/spi/spi-thread.h:2:
+ *  linux/drivers/spi/spi-thread.h

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1434: FILE: drivers/spi/spi-thread.h:14:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1435: FILE: drivers/spi/spi-thread.h:15:
+static inline void *spi_start_async (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1438: FILE: drivers/spi/spi-thread.h:18:
+	extern void *__spi_start_async (struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1438: FILE: drivers/spi/spi-thread.h:18:
+	extern void *__spi_start_async (struct device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1445: FILE: drivers/spi/spi-thread.h:25:
+static inline void spi_stop_async (struct device *dev, void *t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1448: FILE: drivers/spi/spi-thread.h:28:
+	extern void __spi_stop_async (struct device *dev, void *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1448: FILE: drivers/spi/spi-thread.h:28:
+	extern void __spi_stop_async (struct device *dev, void *t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1449: FILE: drivers/spi/spi-thread.h:29:
+	__spi_stop_async (dev, t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1453: FILE: drivers/spi/spi-thread.h:33:
+static inline int spi_queue (struct spi_msg *msg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1456: FILE: drivers/spi/spi-thread.h:36:
+	extern int __spi_queue (struct spi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1456: FILE: drivers/spi/spi-thread.h:36:
+	extern int __spi_queue (struct spi_msg *msg);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1468: FILE: include/linux/spi.h:1:
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1504: FILE: include/linux/spi.h:37:
+struct spi_bus_driver {
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1505: FILE: include/linux/spi.h:38:
+^Iint ^I(*xfer) (struct spi_msg * msg);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1505: FILE: include/linux/spi.h:38:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1505: FILE: include/linux/spi.h:38:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1506: FILE: include/linux/spi.h:39:
+^Ivoid ^I(*set_clock) (struct device * bus_device, u32 clock_hz);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1506: FILE: include/linux/spi.h:39:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1506: FILE: include/linux/spi.h:39:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1507: FILE: include/linux/spi.h:40:
+^Ivoid ^I(*reset) (struct device *bus_device, u32 context);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1507: FILE: include/linux/spi.h:40:
+	void 	(*reset) (struct device *bus_device, u32 context);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1509: FILE: include/linux/spi.h:42:
+	int	(*queue) (struct spi_msg *msg);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1510: FILE: include/linux/spi.h:43:
+	void   *(*start_async)( struct device *bus);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1511: FILE: include/linux/spi.h:44:
+^Ivoid ^I(*stop_async)( struct device *bus, void *async);$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1511: FILE: include/linux/spi.h:44:
+	void 	(*stop_async)( struct device *bus, void *async);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1531: FILE: include/linux/spi.h:64:
+struct spi_driver {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1532: FILE: include/linux/spi.h:65:
+	int     (*probe)        (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1532: FILE: include/linux/spi.h:65:
+	int     (*probe)        (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1533: FILE: include/linux/spi.h:66:
+	int     (*remove)       (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1533: FILE: include/linux/spi.h:66:
+	int     (*remove)       (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1534: FILE: include/linux/spi.h:67:
+	void    (*shutdown)     (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1534: FILE: include/linux/spi.h:67:
+	void    (*shutdown)     (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1535: FILE: include/linux/spi.h:68:
+	int	(*suspend)	(struct spi_device * dev, pm_message_t pm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1535: FILE: include/linux/spi.h:68:
+	int	(*suspend)	(struct spi_device * dev, pm_message_t pm);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1536: FILE: include/linux/spi.h:69:
+^Iint ^I(*resume)^I(struct spi_device * dev);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1536: FILE: include/linux/spi.h:69:
+	int 	(*resume)	(struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1536: FILE: include/linux/spi.h:69:
+	int 	(*resume)	(struct spi_device * dev);

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1549: FILE: include/linux/spi.h:82:
+#define SPI_M_CS	0x00000008	/**< CS active level at begining of frame  */
                 	          	                        ^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1555: FILE: include/linux/spi.h:88:
+void spimsg_set_ctx (struct spi_msg *message, void *ctx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1556: FILE: include/linux/spi.h:89:
+void *spimsg_get_ctx (struct spi_msg *message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1557: FILE: include/linux/spi.h:90:
+int spimsg_complete (struct spi_msg *message, int code);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1558: FILE: include/linux/spi.h:91:
+void spimsg_set_clock (struct spi_msg* message, u32 clock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1558: FILE: include/linux/spi.h:91:
+void spimsg_set_clock (struct spi_msg* message, u32 clock);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1559: FILE: include/linux/spi.h:92:
+u32 spimsg_get_clock (struct spi_msg* message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1559: FILE: include/linux/spi.h:92:
+u32 spimsg_get_clock (struct spi_msg* message);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1560: FILE: include/linux/spi.h:93:
+struct spi_device *spimsg_get_spidev (struct spi_msg* message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1560: FILE: include/linux/spi.h:93:
+struct spi_device *spimsg_get_spidev (struct spi_msg* message);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1561: FILE: include/linux/spi.h:94:
+u32 spimsg_get_flags (struct spi_msg* message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1561: FILE: include/linux/spi.h:94:
+u32 spimsg_get_flags (struct spi_msg* message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1562: FILE: include/linux/spi.h:95:
+u32 spimsg_get_buffer (struct spi_msg *message, void **buffer);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1563: FILE: include/linux/spi.h:96:
+void spimsg_put_buffer (struct spi_msg *message, void *buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1565: FILE: include/linux/spi.h:98:
+struct spi_msg *spimsg_alloc(struct spi_device *device,
+			   u32 flags,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1568: FILE: include/linux/spi.h:101:
+			   void (*status) (struct spi_msg *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1571: FILE: include/linux/spi.h:104:
+struct spi_msg *spimsg_chain(struct spi_msg *msg,
+			   u32 flags,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1574: FILE: include/linux/spi.h:107:
+			   void (*status) (struct spi_msg *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1577: FILE: include/linux/spi.h:110:
+void spimsg_free (struct spi_msg *message);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1580: FILE: include/linux/spi.h:113:
+#if defined (CONFIG_SPI_CHARDEV)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1581: FILE: include/linux/spi.h:114:
+extern struct class_device *spi_class_device_create(int minor, struct device *device);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1582: FILE: include/linux/spi.h:115:
+extern void spi_class_device_destroy(struct class_device *cdev);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1588: FILE: include/linux/spi.h:121:
+}
+static inline void  spi_class_device_destroy(struct class_device *cdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1603: FILE: include/linux/spi.h:136:
+#if defined (CONFIG_SPI_CHARDEV)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1604: FILE: include/linux/spi.h:137:
+extern int __init spidev_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1605: FILE: include/linux/spi.h:138:
+extern void __exit spidev_cleanup(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1611: FILE: include/linux/spi.h:144:
+}
+static inline void spidev_cleanup(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1616: FILE: include/linux/spi.h:149:
+static inline int spi_bus_driver_register (struct spi_bus_driver *bus_driver)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1618: FILE: include/linux/spi.h:151:
+	return driver_register (&bus_driver->driver);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1624: FILE: include/linux/spi.h:157:
+struct spi_device* spi_device_add(struct device *parent, char *name, void *private);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1626: FILE: include/linux/spi.h:159:
+extern int spi_driver_add(struct spi_driver *drv);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1633: FILE: include/linux/spi.h:166:
+extern void spi_bus_reset(struct device* bus, u32 context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1633: FILE: include/linux/spi.h:166:
+extern void spi_bus_reset(struct device* bus, u32 context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1634: FILE: include/linux/spi.h:167:
+extern int spi_write(struct spi_device *dev, u32 flags, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1635: FILE: include/linux/spi.h:168:
+extern int spi_read(struct spi_device *dev, u32 flags, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1637: FILE: include/linux/spi.h:170:
+extern int spi_transfer(struct spi_msg *message,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1638: FILE: include/linux/spi.h:171:
+			void (*status) (struct spi_msg *, int));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1640: FILE: include/linux/spi.h:173:
+	char* name;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1641: FILE: include/linux/spi.h:174:
+	void* params;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1643: FILE: include/linux/spi.h:176:
+};
+extern int spi_bus_populate(struct device *parent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1643: FILE: include/linux/spi.h:176:
+extern int spi_bus_populate(struct device *parent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1644: FILE: include/linux/spi.h:177:
+extern int spi_bus_populate(struct device *parent,
+			     struct spi_device_desc *devices,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1645: FILE: include/linux/spi.h:178:
+			     void (*assign) (struct device *parent,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1646: FILE: include/linux/spi.h:179:
+^I^I^I^I             struct spi_device *,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1646: FILE: include/linux/spi.h:179:
+			     void (*assign) (struct device *parent,
+				             struct spi_device *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1649: FILE: include/linux/spi.h:182:
+static inline int spi_w8r8 (struct spi_device *dev, u8 wr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1656: FILE: include/linux/spi.h:189:
+	msg = spimsg_alloc(dev,
+			SPI_M_WR | SPI_M_CS | SPI_M_DMAUNSAFE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1663: FILE: include/linux/spi.h:196:
+	msg = spimsg_chain(msg,
+			SPI_M_RD | SPI_M_CSREL | SPI_M_DMAUNSAFE,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1678: FILE: include/linux/spi.h:211:
+static inline int spi_w8r16 (struct spi_device *dev, u8 wr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1685: FILE: include/linux/spi.h:218:
+	msg = spimsg_alloc(dev,
+			SPI_M_WR | SPI_M_CS | SPI_M_DMAUNSAFE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1692: FILE: include/linux/spi.h:225:
+	msg = spimsg_chain(msg,
+			SPI_M_RD | SPI_M_CSREL | SPI_M_DMAUNSAFE,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1723: FILE: drivers/spi/spi-alloc.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1724: FILE: drivers/spi/spi-alloc.c:2:
+ *  linux/drivers/spi/spi-alloc.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1743: FILE: drivers/spi/spi-alloc.c:21:
+#include <asm/atomic.h>

CHECK:SPACING: No space is necessary after a cast
#1763: FILE: drivers/spi/spi-alloc.c:41:
+		msg = *(struct spi_msg **) spimsg_pool.cur;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1780: FILE: drivers/spi/spi-alloc.c:58:
+			printk(KERN_ERR "Trying to free entry not from the SPI pool\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1781: FILE: drivers/spi/spi-alloc.c:59:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1798: FILE: drivers/spi/spi-alloc.c:76:
+	spimsg_pool.cur = spimsg_pool.vaddr =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1802: FILE: drivers/spi/spi-alloc.c:80:
+		printk(KERN_ERR "Couldn't allocate large buffer for SPI\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1809: FILE: drivers/spi/spi-alloc.c:87:
+		void **addr = spimsg_pool.vaddr + i*size;
 		                                   ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1822: FILE: drivers/spi/spi-alloc.c:100:
+	if (spimsg_pool.vaddr)
+		kfree(spimsg_pool.vaddr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1829: FILE: drivers/spi/spi-alloc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1830: FILE: drivers/spi/spi-alloc.h:2:
+ *  linux/linux/drivers/spi/spi-alloc.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1847: FILE: drivers/spi/spi-alloc.h:19:
+	extern struct spi_msg *__spimsg_kzalloc(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1857: FILE: drivers/spi/spi-alloc.h:29:
+	extern void __spimsg_kfree (struct spi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1857: FILE: drivers/spi/spi-alloc.h:29:
+	extern void __spimsg_kfree (struct spi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1867: FILE: drivers/spi/spi-alloc.h:39:
+	extern int __spimsg_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1877: FILE: drivers/spi/spi-alloc.h:49:
+	extern void __spimsg_exit(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 170 warnings, 53 checks, 1764 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000126433.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
