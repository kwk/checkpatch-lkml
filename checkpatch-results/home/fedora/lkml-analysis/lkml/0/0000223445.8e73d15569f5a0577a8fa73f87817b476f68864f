CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#39: FILE: include/linux/sched.h:743:
+extern int sched_setscheduler(struct task_struct *, int, struct sched_param *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#39: FILE: include/linux/sched.h:743:
+extern int sched_setscheduler(struct task_struct *, int, struct sched_param *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#39: FILE: include/linux/sched.h:743:
+extern int sched_setscheduler(struct task_struct *, int, struct sched_param *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sched_param *' should also have an identifier name
#39: FILE: include/linux/sched.h:743:
+extern int sched_setscheduler(struct task_struct *, int, struct sched_param *);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#105: FILE: kernel/sched.c:3109:
+	else if (policy != SCHED_FIFO && policy != SCHED_RR &&
[...]
+			return -EINVAL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: kernel/sched.c:3110:
+	else if (policy != SCHED_FIFO && policy != SCHED_RR &&
 				policy != SCHED_NORMAL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#120: FILE: kernel/sched.c:3117:
+	    param->sched_priority > MAX_USER_RT_PRIO-1)
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'policy == SCHED_NORMAL'
#122: FILE: kernel/sched.c:3119:
+	if ((policy == SCHED_NORMAL) != (param->sched_priority == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param->sched_priority == 0'
#122: FILE: kernel/sched.c:3119:
+	if ((policy == SCHED_NORMAL) != (param->sched_priority == 0))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 5 checks, 164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
