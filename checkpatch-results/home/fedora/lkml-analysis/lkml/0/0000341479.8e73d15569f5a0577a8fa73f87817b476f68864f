WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
------------------------------------------------------------------------------------

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/arch/i386/Kconfig	Fri Aug 29 14:08:14 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#46: FILE: arch/i386/Kconfig:464:
+config CKRM
+	bool "Class Based Kernel Resource Management"
+	depends on EXPERIMENTAL
+	help
+	  This option adds CKRM support to the Kernel. Say N if you are

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#51: FILE: arch/i386/Kconfig:468:
unsure.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#72: FILE: fs/exec.c:1103:
+		ckrm_cb_exec(current,filename);
 		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: include/linux/ckrm.h:1:
+/* ckrm.h - Class-based Kernel Resource Management (CKRM)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: include/linux/ckrm.h:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: include/linux/ckrm.h:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: include/linux/ckrm.h:7:
+ * Provides kernel API of CKRM for in-kernel,per-resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: include/linux/ckrm.h:8:
+ * (one each for cpu, memory, io, network) and callbacks for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: include/linux/ckrm.h:12:
+ * $

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#112: FILE: include/linux/ckrm.h:32:
+	struct ckrm_##res##_class *ckrm_alloc_##res##_class(void *obj);			\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#116: FILE: include/linux/ckrm.h:35:
+	ulong ckrm_##res##_get_usage(struct ckrm_##res##_class *cls);			\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#117: FILE: include/linux/ckrm.h:36:
+	struct ckrm_##res##_class

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: include/linux/ckrm.h:37:
+        void ckrm_##res##_change_class(struct task_struct *tsk, struct$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: include/linux/ckrm.h:37:
+        void ckrm_##res##_change_class(struct task_struct *tsk, struct$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#127: FILE: include/linux/ckrm.h:44:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#133: FILE: include/linux/ckrm.h:50:
+	void (*fork)(struct task_struct *); /* on fork */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#134: FILE: include/linux/ckrm.h:51:
+	void (*exit)(struct task_struct *); /* on exit */

ERROR:SPACING: space required after that ',' (ctx:OxV)
#135: FILE: include/linux/ckrm.h:52:
+	void (*exec)(struct task_struct *,char *filename); /* on exec*/
 	                                 ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#135: FILE: include/linux/ckrm.h:52:
+	void (*exec)(struct task_struct *,char *filename); /* on exec*/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#147: FILE: include/linux/ckrm.h:64:
+#define CKRM_CB(fct)  if (ckrm_callbacks.fct) (*ckrm_callbacks.fct)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fct' - possible side-effects?
#147: FILE: include/linux/ckrm.h:64:
+#define CKRM_CB(fct)  if (ckrm_callbacks.fct) (*ckrm_callbacks.fct)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: include/linux/ckrm.h:65:
+#define CKRM_CBVAL(fct,args,val) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/linux/ckrm.h:65:
+#define CKRM_CBVAL(fct,args,val) 
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/linux/ckrm.h:65:
+#define CKRM_CBVAL(fct,args,val) 
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: include/linux/ckrm.h:70:
+#define CKRM_CBVAL(fct,args,val)  (val)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: include/linux/ckrm.h:70:
+#define CKRM_CBVAL(fct,args,val)  (val)
                            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#158: FILE: include/linux/ckrm.h:74:
+static inline void ckrm_cb_fork(struct task_struct* tsk)   {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#158: FILE: include/linux/ckrm.h:74:
+static inline void ckrm_cb_fork(struct task_struct* tsk)   {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#160: FILE: include/linux/ckrm.h:75:
+static inline void ckrm_cb_exit(struct task_struct* tsk)   {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#160: FILE: include/linux/ckrm.h:75:
+static inline void ckrm_cb_exit(struct task_struct* tsk)   {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#162: FILE: include/linux/ckrm.h:76:
+static inline void ckrm_cb_exec( struct task_struct* tsk,char

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: include/linux/ckrm.h:76:
+static inline void ckrm_cb_exec( struct task_struct* tsk,char
                                                         ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#162: FILE: include/linux/ckrm.h:76:
+static inline void ckrm_cb_exec( struct task_struct* tsk,char

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: include/linux/ckrm.h:77:
+						   { CKRM_CB(exec)(tsk,filename); }
 						                      ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#165: FILE: include/linux/ckrm.h:78:
+static inline void ckrm_cb_login(void)                     {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#167: FILE: include/linux/ckrm.h:79:
+static inline void ckrm_cb_id(void)                        {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#169: FILE: include/linux/ckrm.h:80:
+static inline void ckrm_cb_useradd(struct user_struct *up) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#171: FILE: include/linux/ckrm.h:81:
+static inline void ckrm_cb_userdel(struct user_struct *up) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#173: FILE: include/linux/ckrm.h:82:
+static inline void ckrm_cb_userdel(struct user_struct *up) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#174: FILE: include/linux/ckrm.h:83:
+static inline char* ckrm_cb_classname(void *obj) { return

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#174: FILE: include/linux/ckrm.h:83:
+static inline char* ckrm_cb_classname(void *obj) { return

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: include/linux/sched.h:465:
+^Ivoid *ckrm_client_data;              $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#213: FILE: kernel/ckrm.c:1:
+/* ckrm.c - Class-based Kernel Resource Management (CKRM)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: kernel/ckrm.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: kernel/ckrm.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: kernel/ckrm.c:7:
+ * Provides kernel API of CKRM for in-kernel,per-resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: kernel/ckrm.c:8:
+ * (one each for cpu, memory, io, network) and callbacks for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: kernel/ckrm.c:12:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#243: FILE: kernel/ckrm.c:31:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'definitons' may be misspelled - perhaps 'definitions'?
#252: FILE: kernel/ckrm.c:40:
+#define CKRM_DEFINE_RESOURCE_CLASSES    /* provide definitons for now
                                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#254: FILE: kernel/ckrm.c:41:
+#define CKRM_DEFINE_RESOURCE_CLASSES    /* provide definitons for now
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: kernel/ckrm.c:42:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#258: FILE: kernel/ckrm.c:44:
+struct ckrm_callbacks  ckrm_callbacks;  /* nulled initially by default
+EXPORT_SYMBOL(ckrm_callbacks);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: kernel/ckrm.c:46:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: kernel/ckrm.c:49:
+/* define some dummy classes that can be used for testing $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#272: FILE: kernel/ckrm.c:57:
+struct ckrm_##res##_class *ckrm_alloc_##res##_class(void *obj) {		\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#272: FILE: kernel/ckrm.c:57:
+struct ckrm_##res##_class *ckrm_alloc_##res##_class(void *obj) {		\

WARNING:TABSTOP: Statements should start on a tabstop
#273: FILE: kernel/ckrm.c:58:
+	   return kmalloc(sizeof(struct ckrm_##res##_class),GFP_KERNEL);	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: kernel/ckrm.c:58:
+	   return kmalloc(sizeof(struct ckrm_##res##_class),GFP_KERNEL);	\
 	                                                   ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#275: FILE: kernel/ckrm.c:60:
+int ckrm_free_##res##_class(struct ckrm_##res##_class *cls) {			\

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: kernel/ckrm.c:62:
+        return 0;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: kernel/ckrm.c:62:
+        return 0;^I^I^I^I^I^I^I^I\$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#281: FILE: kernel/ckrm.c:65:
+	cls->share = share;							\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#284: FILE: kernel/ckrm.c:68:
+ulong ckrm_##res##_get_usage(struct ckrm_##res##_class *cls) {			\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#287: FILE: kernel/ckrm.c:71:
+struct ckrm_##res##_class *ckrm_dflt_##res##_class(void *obj) {			\

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#290: FILE: kernel/ckrm.c:74:
+void ckrm_##res##_change_class(struct task_struct *tsk,				\
+                               struct ckrm_##res##_class *cls) {		\

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: kernel/ckrm.c:75:
+                               struct ckrm_##res##_class *cls) {^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: kernel/ckrm.c:75:
+                               struct ckrm_##res##_class *cls) {^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: kernel/ckrm.c:76:
+        tsk->res##_class = cls;^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: kernel/ckrm.c:76:
+        tsk->res##_class = cls;^I^I^I^I^I^I^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: kernel/ckrm.c:77:
+}^I^I^I                                                        \^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#294: FILE: kernel/ckrm.c:78:
+EXPORT_SYMBOL(ckrm_##res##_change_class);					\

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#294: FILE: kernel/ckrm.c:78:
+EXPORT_SYMBOL(ckrm_##res##_change_class);					\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#295: FILE: kernel/ckrm.c:79:
+EXPORT_SYMBOL(ckrm_alloc_##res##_class);					\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#296: FILE: kernel/ckrm.c:80:
+EXPORT_SYMBOL(ckrm_free_##res##_class);						\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#297: FILE: kernel/ckrm.c:81:
+EXPORT_SYMBOL(ckrm_##res##_set_share);						\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#298: FILE: kernel/ckrm.c:82:
+EXPORT_SYMBOL(ckrm_##res##_get_usage);						\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: kernel/ckrm.c:83:
+EXPORT_SYMBOL(ckrm_dflt_##res##_class)                                        $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#301: FILE: kernel/ckrm.c:85:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: kernel/ckrm.c:92:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#326: FILE: kernel/ckrm.c:110:
+EXPORT_SYMBOL(ckrm_register_engine);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#327: FILE: kernel/ckrm.c:111:
+EXPORT_SYMBOL(ckrm_unregister_engine);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: kernel/ckrm.c:113:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#332: FILE: kernel/ckrm.c:116:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 29 warnings, 9 checks, 393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
