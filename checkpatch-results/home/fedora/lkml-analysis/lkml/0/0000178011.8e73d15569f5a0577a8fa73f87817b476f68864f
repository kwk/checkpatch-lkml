WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: fs/9p/vfs_inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#41: FILE: fs/9p/vfs_inode.c:2:
+ *  linux/fs/9p/vfs_inode.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'contians' may be misspelled - perhaps 'contains'?
#43: FILE: fs/9p/vfs_inode.c:4:
+ * This file contians vfs inode ops for the 9P2000 protocol.
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/9p/vfs_inode.c:20:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#60: FILE: fs/9p/vfs_inode.c:21:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#83: FILE: fs/9p/vfs_inode.c:44:
+static struct inode_operations v9fs_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#84: FILE: fs/9p/vfs_inode.c:45:
+static struct inode_operations v9fs_file_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#85: FILE: fs/9p/vfs_inode.c:46:
+static struct inode_operations v9fs_symlink_inode_operations;

WARNING:LINE_SPACING: Missing a blank line after declarations
#97: FILE: fs/9p/vfs_inode.c:58:
+	int res;
+	res = mode & 0777;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#143: FILE: fs/9p/vfs_inode.c:104:
+	else if ((mode & V9FS_DMSOCKET) && (v9ses->extended)
+		 && (v9ses->nodev == 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#146: FILE: fs/9p/vfs_inode.c:107:
+	else if ((mode & V9FS_DMNAMEDPIPE) && (v9ses->extended)
+		 && (v9ses->nodev == 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#149: FILE: fs/9p/vfs_inode.c:110:
+	else if ((mode & V9FS_DMDEVICE) && (v9ses->extended)
+		 && (v9ses->nodev == 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: fs/9p/vfs_inode.c:161:
+ * @stat: unix metadata (stat) structure to populate $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NAKED_SSCANF: unchecked sscanf return value
#222: FILE: fs/9p/vfs_inode.c:183:
+		sscanf(mistat->uid, "%x", (unsigned int *)&buf->st_uid);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#222: FILE: fs/9p/vfs_inode.c:183:
+		sscanf(mistat->uid, "%x", (unsigned int *)&buf->st_uid);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#223: FILE: fs/9p/vfs_inode.c:184:
+		sscanf(mistat->gid, "%x", (unsigned int *)&buf->st_gid);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#223: FILE: fs/9p/vfs_inode.c:184:
+		sscanf(mistat->gid, "%x", (unsigned int *)&buf->st_gid);

CHECK:BRACES: braces {} should be used on all arms of this statement
#246: FILE: fs/9p/vfs_inode.c:207:
+	if ((S_ISBLK(buf->st_mode)) || (S_ISCHR(buf->st_mode))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: fs/9p/vfs_inode.c:211:
+		int minor = -1;
+		sscanf(mistat->extension, "%c %u %u", &type, &major, &minor);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#250: FILE: fs/9p/vfs_inode.c:211:
+		sscanf(mistat->extension, "%c %u %u", &type, &major, &minor);

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: fs/9p/vfs_inode.c:224:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#294: FILE: fs/9p/vfs_inode.c:255:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: fs/9p/vfs_inode.c:290:
+ * @file_dentry: dentry file is being created in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: fs/9p/vfs_inode.c:293:
+ * $

CHECK:CAMELCASE: Avoid CamelCase: <CleanUpFid>
#387: FILE: fs/9p/vfs_inode.c:348:
+		goto CleanUpFid;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!file_inode'
#435: FILE: fs/9p/vfs_inode.c:396:
+	if ((!file_inode) || IS_ERR(file_inode)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INDENTED_LABEL: labels should not be indented
#459: FILE: fs/9p/vfs_inode.c:420:
+      CleanUpFid:

CHECK:BRACES: Unbalanced braces around else statement
#540: FILE: fs/9p/vfs_inode.c:501:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#555: FILE: fs/9p/vfs_inode.c:516:
+ * @nd: path information
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#561: FILE: fs/9p/vfs_inode.c:522:
+		struct nameidata *nd)
 		                  ^^

CHECK:CAMELCASE: Avoid CamelCase: <FreeFcall>
#645: FILE: fs/9p/vfs_inode.c:606:
+		goto FreeFcall;

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#658: FILE: fs/9p/vfs_inode.c:619:
+		eprintk(KERN_WARNING, "inode alloc failes, returns %ld\n",
 		                                   ^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fid"
#668: FILE: fs/9p/vfs_inode.c:629:
+	if (fid == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:INDENTED_LABEL: labels should not be indented
#687: FILE: fs/9p/vfs_inode.c:648:
+      FreeFcall:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: fs/9p/vfs_inode.c:683:
+ * $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!oldfid'
#745: FILE: fs/9p/vfs_inode.c:706:
+	if ((!oldfid) || (!olddirfid) || (!newdirfid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!olddirfid'
#745: FILE: fs/9p/vfs_inode.c:706:
+	if ((!oldfid) || (!olddirfid) || (!newdirfid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!newdirfid'
#745: FILE: fs/9p/vfs_inode.c:706:
+	if ((!oldfid) || (!olddirfid) || (!newdirfid)) {

CHECK:CAMELCASE: Avoid CamelCase: <FreeFcallnBail>
#754: FILE: fs/9p/vfs_inode.c:715:
+		goto FreeFcallnBail;

WARNING:INDENTED_LABEL: labels should not be indented
#782: FILE: fs/9p/vfs_inode.c:743:
+      FreeFcallnBail:

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#794: FILE: fs/9p/vfs_inode.c:755:
+ * v9fs_vfs_getattr - retreive file metadata
                       ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#819: FILE: fs/9p/vfs_inode.c:780:
+	if (err < 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#821: FILE: fs/9p/vfs_inode.c:782:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!uid'
#877: FILE: fs/9p/vfs_inode.c:838:
+		if ((!uid) || (!gid) || (!muid) || (!name) || (!extension)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!gid'
#877: FILE: fs/9p/vfs_inode.c:838:
+		if ((!uid) || (!gid) || (!muid) || (!name) || (!extension)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!muid'
#877: FILE: fs/9p/vfs_inode.c:838:
+		if ((!uid) || (!gid) || (!muid) || (!name) || (!extension)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!name'
#877: FILE: fs/9p/vfs_inode.c:838:
+		if ((!uid) || (!gid) || (!muid) || (!name) || (!extension)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!extension'
#877: FILE: fs/9p/vfs_inode.c:838:
+		if ((!uid) || (!gid) || (!muid) || (!name) || (!extension)) {

CHECK:BRACES: Unbalanced braces around else statement
#911: FILE: fs/9p/vfs_inode.c:872:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#993: FILE: fs/9p/vfs_inode.c:954:
+	if ((S_ISBLK(inode->i_mode)) || (S_ISCHR(inode->i_mode))) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#997: FILE: fs/9p/vfs_inode.c:958:
+		int minor = -1;
+		sscanf(mistat->extension, "%c %u %u", &type, &major, &minor);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#997: FILE: fs/9p/vfs_inode.c:958:
+		sscanf(mistat->extension, "%c %u %u", &type, &major, &minor);

CHECK:BRACES: Unbalanced braces around else statement
#1010: FILE: fs/9p/vfs_inode.c:971:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1035: FILE: fs/9p/vfs_inode.c:996:
+		i = (ino_t) (path ^ (path >> 32));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1045: FILE: fs/9p/vfs_inode.c:1006:
+ * $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dentry'
#1063: FILE: fs/9p/vfs_inode.c:1024:
+	if ((!dentry) || (!sb) || (!v9ses)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sb'
#1063: FILE: fs/9p/vfs_inode.c:1024:
+	if ((!dentry) || (!sb) || (!v9ses)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!v9ses'
#1063: FILE: fs/9p/vfs_inode.c:1024:
+	if ((!dentry) || (!sb) || (!v9ses)) {

WARNING:INDENTED_LABEL: labels should not be indented
#1103: FILE: fs/9p/vfs_inode.c:1064:
+      FreeFcall:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: fs/9p/vfs_inode.c:1076:
+ * $

WARNING:INDENTED_LABEL: labels should not be indented
#1162: FILE: fs/9p/vfs_inode.c:1123:
+      FreeFcall:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: fs/9p/vfs_inode.c:1134:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1176: FILE: fs/9p/vfs_inode.c:1137:
+static int v9fs_vfs_readlink(struct dentry *dentry, char __user * buffer,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1191: FILE: fs/9p/vfs_inode.c:1152:
+		if ((ret = copy_to_user(buffer, link, retval)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1205: FILE: fs/9p/vfs_inode.c:1166:
+ * @nd: nameidata
     ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1206: FILE: fs/9p/vfs_inode.c:1167:
+ * $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1209: FILE: fs/9p/vfs_inode.c:1170:
+static int v9fs_vfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                          ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1216: FILE: fs/9p/vfs_inode.c:1177:
+	if (!link)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1218: FILE: fs/9p/vfs_inode.c:1179:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1221: FILE: fs/9p/vfs_inode.c:1182:
+		if (len < 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1224: FILE: fs/9p/vfs_inode.c:1185:
+		} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1227: FILE: fs/9p/vfs_inode.c:1188:
+	nd_set_link(nd, link);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1235: FILE: fs/9p/vfs_inode.c:1196:
+ * @nd: nameidata
     ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1236: FILE: fs/9p/vfs_inode.c:1197:
+ * $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1239: FILE: fs/9p/vfs_inode.c:1200:
+static void v9fs_vfs_put_link(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1241: FILE: fs/9p/vfs_inode.c:1202:
+	char *s = nd_get_link(nd);
 	                      ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1253: FILE: fs/9p/vfs_inode.c:1214:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1256: FILE: fs/9p/vfs_inode.c:1217:
+/* XXX - lots of code dup'd from symlink and creates, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1257: FILE: fs/9p/vfs_inode.c:1218:
+ * figure out a better reuse strategy $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dentry'
#1276: FILE: fs/9p/vfs_inode.c:1237:
+	if ((!dentry) || (!sb) || (!v9ses) || (!oldfid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sb'
#1276: FILE: fs/9p/vfs_inode.c:1237:
+	if ((!dentry) || (!sb) || (!v9ses) || (!oldfid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!v9ses'
#1276: FILE: fs/9p/vfs_inode.c:1237:
+	if ((!dentry) || (!sb) || (!v9ses) || (!oldfid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!oldfid'
#1276: FILE: fs/9p/vfs_inode.c:1237:
+	if ((!dentry) || (!sb) || (!v9ses) || (!oldfid)) {

CHECK:CAMELCASE: Avoid CamelCase: <FreeMem>
#1279: FILE: fs/9p/vfs_inode.c:1240:
+		goto FreeMem;

WARNING:INDENTED_LABEL: labels should not be indented
#1327: FILE: fs/9p/vfs_inode.c:1288:
+      FreeMem:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1340: FILE: fs/9p/vfs_inode.c:1301:
+ * $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!dentry'
#1362: FILE: fs/9p/vfs_inode.c:1323:
+	if ((!dentry) || (!sb) || (!v9ses)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sb'
#1362: FILE: fs/9p/vfs_inode.c:1323:
+	if ((!dentry) || (!sb) || (!v9ses)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!v9ses'
#1362: FILE: fs/9p/vfs_inode.c:1323:
+	if ((!dentry) || (!sb) || (!v9ses)) {

WARNING:TYPO_SPELLING: 'coudn't' may be misspelled - perhaps 'couldn't'?
#1381: FILE: fs/9p/vfs_inode.c:1342:
+		dprintk(DEBUG_ERROR, "coudn't resove fid from dentry\n");
 		                      ^^^^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1391: FILE: fs/9p/vfs_inode.c:1352:
+	else if (S_ISFIFO(mode)) ;	/* DO NOTHING */

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: Unbalanced braces around else statement
#1392: FILE: fs/9p/vfs_inode.c:1353:
+	else {

WARNING:INDENTED_LABEL: labels should not be indented
#1423: FILE: fs/9p/vfs_inode.c:1384:
+      FreeMem:

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1431: FILE: fs/9p/vfs_inode.c:1392:
+static struct inode_operations v9fs_dir_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1446: FILE: fs/9p/vfs_inode.c:1407:
+static struct inode_operations v9fs_file_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1451: FILE: fs/9p/vfs_inode.c:1412:
+static struct inode_operations v9fs_symlink_inode_operations = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178011.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 36 warnings, 42 checks, 1418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178011.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
