WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH 2.6.11] aoe [6/12]: Alexey Dobriyan sparse cleanup

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be16 should be cpu_to_be16
#73: FILE: drivers/block/aoe/aoecmd.c:97:
+	h->type = __constant_cpu_to_be16(ETH_P_AOE);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#107: FILE: drivers/block/aoe/aoecmd.c:306:
+	n = le16_to_cpup((__le16 *) &id[83<<1]);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#107: FILE: drivers/block/aoe/aoecmd.c:306:
+	n = le16_to_cpup((__le16 *) &id[83<<1]);
 	                                  ^

CHECK:SPACING: No space is necessary after a cast
#111: FILE: drivers/block/aoe/aoecmd.c:309:
+	n |= le16_to_cpup((__le16 *) &id[86<<1]);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#111: FILE: drivers/block/aoe/aoecmd.c:309:
+	n |= le16_to_cpup((__le16 *) &id[86<<1]);
 	                                   ^

CHECK:SPACING: No space is necessary after a cast
#118: FILE: drivers/block/aoe/aoecmd.c:315:
+		ssize = le64_to_cpup((__le64 *) &id[100<<1]);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#118: FILE: drivers/block/aoe/aoecmd.c:315:
+		ssize = le64_to_cpup((__le64 *) &id[100<<1]);
 		                                       ^

CHECK:SPACING: No space is necessary after a cast
#127: FILE: drivers/block/aoe/aoecmd.c:326:
+		ssize = le32_to_cpup((__le32 *) &id[60<<1]);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#127: FILE: drivers/block/aoe/aoecmd.c:326:
+		ssize = le32_to_cpup((__le32 *) &id[60<<1]);
 		                                      ^

CHECK:SPACING: No space is necessary after a cast
#133: FILE: drivers/block/aoe/aoecmd.c:329:
+		d->geo.cylinders = le16_to_cpup((__le16 *) &id[54<<1]);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#133: FILE: drivers/block/aoe/aoecmd.c:329:
+		d->geo.cylinders = le16_to_cpup((__le16 *) &id[54<<1]);
 		                                                 ^

CHECK:SPACING: No space is necessary after a cast
#134: FILE: drivers/block/aoe/aoecmd.c:330:
+		d->geo.heads = le16_to_cpup((__le16 *) &id[55<<1]);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#134: FILE: drivers/block/aoe/aoecmd.c:330:
+		d->geo.heads = le16_to_cpup((__le16 *) &id[55<<1]);
 		                                             ^

CHECK:SPACING: No space is necessary after a cast
#135: FILE: drivers/block/aoe/aoecmd.c:331:
+		d->geo.sectors = le16_to_cpup((__le16 *) &id[56<<1]);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#135: FILE: drivers/block/aoe/aoecmd.c:331:
+		d->geo.sectors = le16_to_cpup((__le16 *) &id[56<<1]);
 		                                               ^

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be16 should be cpu_to_be16
#190: FILE: drivers/block/aoe/aoecmd.c:504:
+		h->type = __constant_cpu_to_be16(ETH_P_AOE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: drivers/block/aoe/aoenet.c:135:
+^I^I^I       be16_to_cpu(h->major), h->minor, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196155.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 3 warnings, 14 checks, 217 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196155.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
