WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
there will be some significant userbase capable of running the Cpushare client

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#265: FILE: fs/proc/base.c:133:
+	E(PROC_TGID_SECCOMP,   "seccomp", S_IFREG|S_IRUSR|S_IWUSR),
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#265: FILE: fs/proc/base.c:133:
+	E(PROC_TGID_SECCOMP,   "seccomp", S_IFREG|S_IRUSR|S_IWUSR),
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#265: FILE: fs/proc/base.c:133:
+	E(PROC_TGID_SECCOMP,   "seccomp", S_IFREG|S_IRUSR|S_IWUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#275: FILE: fs/proc/base.c:161:
+	E(PROC_TID_SECCOMP,    "seccomp", S_IFREG|S_IRUSR|S_IWUSR),
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#275: FILE: fs/proc/base.c:161:
+	E(PROC_TID_SECCOMP,    "seccomp", S_IFREG|S_IRUSR|S_IWUSR),
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#275: FILE: fs/proc/base.c:161:
+	E(PROC_TID_SECCOMP,    "seccomp", S_IFREG|S_IRUSR|S_IWUSR),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: fs/proc/base.c:680:
+static ssize_t seccomp_read(struct file * file, char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: fs/proc/base.c:680:
+static ssize_t seccomp_read(struct file * file, char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: fs/proc/base.c:683:
+	struct task_struct * tsk = proc_task(file->f_dentry->d_inode);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#296: FILE: fs/proc/base.c:691:
+	if (count > len-__ppos)
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#297: FILE: fs/proc/base.c:692:
+		count = len-__ppos;
 		           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: fs/proc/base.c:699:
+static ssize_t seccomp_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: fs/proc/base.c:699:
+static ssize_t seccomp_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#307: FILE: fs/proc/base.c:702:
+	struct task_struct * tsk = proc_task(file->f_dentry->d_inode);

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#308: FILE: fs/proc/base.c:703:
+	char __buf[20], * end;
 	                ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#320: FILE: fs/proc/base.c:715:
+	seccomp_mode = simple_strtoul(__buf, &end, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#332: FILE: fs/proc/base.c:727:
+static struct file_operations proc_seccomp_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#368: FILE: include/asm-i386/thread_info.h:153:
+#define _TIF_SECCOMP		(1<<TIF_SECCOMP)
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#368: FILE: include/asm-i386/thread_info.h:153:
+#define _TIF_SECCOMP		(1<<TIF_SECCOMP)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: include/asm-i386/thread_info.h:158:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#375: FILE: include/asm-i386/thread_info.h:158:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))
                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#375: FILE: include/asm-i386/thread_info.h:158:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))
                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#375: FILE: include/asm-i386/thread_info.h:158:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))
                                                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#395: FILE: include/asm-x86_64/thread_info.h:118:
+#define _TIF_SECCOMP		(1<<TIF_SECCOMP)
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#395: FILE: include/asm-x86_64/thread_info.h:118:
+#define _TIF_SECCOMP		(1<<TIF_SECCOMP)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: include/asm-x86_64/thread_info.h:126:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#404: FILE: include/asm-x86_64/thread_info.h:126:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))
                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#404: FILE: include/asm-x86_64/thread_info.h:126:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))
                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#404: FILE: include/asm-x86_64/thread_info.h:126:
+  (0x0000FFFF & ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP|_TIF_SECCOMP))
                                                                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#424: FILE: include/linux/seccomp.h:1:
+#ifndef _LINUX_SECCOMP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#429: FILE: include/linux/seccomp.h:6:
+extern void secure_computing(int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#429: FILE: include/linux/seccomp.h:6:
+extern void secure_computing(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#446: FILE: kernel/seccomp.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#447: FILE: kernel/seccomp.c:2:
+ * linux/kernel/seccomp.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#497: FILE: kernel/seccomp.c:52:
+	int * syscall;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#512: FILE: kernel/seccomp.c:67:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 12 warnings, 17 checks, 366 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
