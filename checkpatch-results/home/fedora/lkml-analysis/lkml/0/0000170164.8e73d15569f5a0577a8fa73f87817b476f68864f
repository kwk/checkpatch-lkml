WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
audit subsystem is currently incapable of auditing a file system object based 

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#120: 
Signed-off-by:  Timothy R. Chavez <tinytim@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: fs/attr.c:73:
+^Iaudit_notify_watch(inode, MAY_WRITE);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: fs/open.c:612:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: fs/open.c:646:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#452: FILE: include/linux/audit.h:226:
+^Istruct hlist_node ^Iw_node;^I^I/* per-directory list^I      */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#467: FILE: include/linux/audit.h:241:
+^Istruct hlist_head ^Iwatchlist;^I/* Watches for children       */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: include/linux/audit.h:301:
+#define audit_receive_filter(t,p,u,s,d,l) ({ -EOPNOTSUPP; })
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: include/linux/audit.h:301:
+#define audit_receive_filter(t,p,u,s,d,l) ({ -EOPNOTSUPP; })
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: include/linux/audit.h:301:
+#define audit_receive_filter(t,p,u,s,d,l) ({ -EOPNOTSUPP; })
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: include/linux/audit.h:301:
+#define audit_receive_filter(t,p,u,s,d,l) ({ -EOPNOTSUPP; })
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: include/linux/audit.h:301:
+#define audit_receive_filter(t,p,u,s,d,l) ({ -EOPNOTSUPP; })
                                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#497: FILE: include/linux/audit.h:312:
+extern int audit_filesystem_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: include/linux/audit.h:313:
+extern int audit_list_watches(int pid, int seq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#499: FILE: include/linux/audit.h:314:
+extern int audit_receive_watch(int type, int pid, int uid, int seq,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#501: FILE: include/linux/audit.h:316:
+extern void audit_inode_free(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#502: FILE: include/linux/audit.h:317:
+extern void audit_update_watch(struct dentry *dentry, int remove);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: include/linux/audit.h:318:
+extern void audit_watch_put(struct audit_watch *watch);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#504: FILE: include/linux/audit.h:319:
+extern struct audit_watch *audit_watch_get(struct audit_watch *watch);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: include/linux/audit.h:320:
+extern void audit_notify_watch(struct inode *inode, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#506: FILE: include/linux/audit.h:321:
+extern void auditfs_attach_wdata(struct inode *inode, struct hlist_head *watches,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#510: FILE: include/linux/audit.h:325:
+#define audit_list_watches(p,s) ({ -EOPNOTSUPP; })
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#511: FILE: include/linux/audit.h:326:
+#define audit_receive_watch(t,p,u,s,r,l) ({ -EOPNOTSUPP; })
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#511: FILE: include/linux/audit.h:326:
+#define audit_receive_watch(t,p,u,s,r,l) ({ -EOPNOTSUPP; })
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#511: FILE: include/linux/audit.h:326:
+#define audit_receive_watch(t,p,u,s,r,l) ({ -EOPNOTSUPP; })
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#511: FILE: include/linux/audit.h:326:
+#define audit_receive_watch(t,p,u,s,r,l) ({ -EOPNOTSUPP; })
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#511: FILE: include/linux/audit.h:326:
+#define audit_receive_watch(t,p,u,s,r,l) ({ -EOPNOTSUPP; })
                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#512: FILE: include/linux/audit.h:327:
+#define audit_inode_free(i) do { ; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#512: FILE: include/linux/audit.h:327:
+#define audit_inode_free(i) do { ; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: include/linux/audit.h:328:
+#define audit_update_watch(d,r) do { ; } while (0)
                             ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#513: FILE: include/linux/audit.h:328:
+#define audit_update_watch(d,r) do { ; } while (0)

ERROR:SPACING: space required before the open parenthesis '('
#514: FILE: include/linux/audit.h:329:
+#define audit_watch_put(w) do { ; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#514: FILE: include/linux/audit.h:329:
+#define audit_watch_put(w) do { ; } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#516: FILE: include/linux/audit.h:331:
+#define audit_notify_watch(i,m) do { ; } while(0)
                             ^

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: include/linux/audit.h:331:
+#define audit_notify_watch(i,m) do { ; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#516: FILE: include/linux/audit.h:331:
+#define audit_notify_watch(i,m) do { ; } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#613: FILE: kernel/auditfs.c:1:
+/* auditfs.c -- Filesystem auditing support

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#632: FILE: kernel/auditfs.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#633: FILE: kernel/auditfs.c:21:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#652: FILE: kernel/auditfs.c:40:
+#include <asm/uaccess.h>

WARNING:IF_1: Consider removing the #if 1 and its #endif
#654: FILE: kernel/auditfs.c:42:
+#if 1

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: kernel/auditfs.c:43:
+#define dprintk(...) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#656: FILE: kernel/auditfs.c:44:
+#define __print_symbol(x, y) do { } while(0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#658: FILE: kernel/auditfs.c:46:
+#define dprintk(...) printk(KERN_DEBUG  __VA_ARGS__);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#658: FILE: kernel/auditfs.c:46:
+#define dprintk(...) printk(KERN_DEBUG  __VA_ARGS__);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#663: FILE: kernel/auditfs.c:51:
+extern int audit_enabled;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#676: FILE: kernel/auditfs.c:64:
+extern spinlock_t inode_lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: kernel/auditfs.c:90:
+^I^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#711: FILE: kernel/auditfs.c:99:
+}
+static void audit_data_pool_shrink(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#718: FILE: kernel/auditfs.c:106:
+		struct audit_inode_data *old = audit_data_pool;
+		audit_data_pool = old->next_hash;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#734: FILE: kernel/auditfs.c:122:
+	/* I_AUDIT bit can only be changed under auditfs_hash_lock, so no need
+	   to lock inode_lock (on all known hardware) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#734: FILE: kernel/auditfs.c:122:
+	   to lock inode_lock (on all known hardware) */

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#769: FILE: kernel/auditfs.c:157:
+			ret, ret->inode, ret->inode->i_ino, ret->count, __builtin_return_address(0));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#829: FILE: kernel/auditfs.c:217:
+		BUG_ON(!hlist_unhashed(&watch->w_node));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: kernel/auditfs.c:218:
+		BUG_ON(!hlist_unhashed(&watch->w_master));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#831: FILE: kernel/auditfs.c:219:
+		BUG_ON(!hlist_unhashed(&watch->w_watched));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#836: FILE: kernel/auditfs.c:224:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#853: FILE: kernel/auditfs.c:241:
+	watch->w_filterkey = kmalloc(t->fklen+1, GFP_KERNEL);
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#860: FILE: kernel/auditfs.c:248:
+	watch->w_path = kmalloc(t->pathlen+1, GFP_KERNEL);
 	                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: kernel/auditfs.c:270:
+        t = kmalloc(size, GFP_KERNEL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: kernel/auditfs.c:270:
+        t = kmalloc(size, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#883: FILE: kernel/auditfs.c:271:
+        if (!t)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: kernel/auditfs.c:271:
+        if (!t)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#884: FILE: kernel/auditfs.c:272:
+                goto audit_to_transport_exit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: kernel/auditfs.c:272:
+                goto audit_to_transport_exit;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#913: FILE: kernel/auditfs.c:301:
+^I$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#935: FILE: kernel/auditfs.c:323:
+		audit_log(NULL, GFP_KERNEL, AUDIT_CONFIG_CHANGE, "auid=%u removed watch implicitly", -1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#948: FILE: kernel/auditfs.c:336:
+	BUG_ON(*list != data);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#965: FILE: kernel/auditfs.c:353:
+	       data->inode, data->inode?data->inode->i_ino:0, data->count, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: kernel/auditfs.c:353:
+	dprintk("Put audit_data %p for inode %p (%lu), count-- now %d. From %p:", data,
+	       data->inode, data->inode?data->inode->i_ino:0, data->count, __builtin_return_address(0));

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#965: FILE: kernel/auditfs.c:353:
+	       data->inode, data->inode?data->inode->i_ino:0, data->count, __builtin_return_address(0));
 	                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#965: FILE: kernel/auditfs.c:353:
+	       data->inode, data->inode?data->inode->i_ino:0, data->count, __builtin_return_address(0));
 	                                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#976: FILE: kernel/auditfs.c:364:
+		/* We are last user. Remove it from the hash table to
+		   disassociate it from its inode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#976: FILE: kernel/auditfs.c:364:
+		   disassociate it from its inode */

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#986: FILE: kernel/auditfs.c:374:
+			dprintk("Back to pool. %d watches, %d in pool\n", audit_nr_watches, audit_pool_size);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#991: FILE: kernel/auditfs.c:379:
+			dprintk("Freed. %d watches, %d in pool\n", audit_nr_watches, audit_pool_size);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1001: FILE: kernel/auditfs.c:389:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1006: FILE: kernel/auditfs.c:394:
+	/* Grow the pool by two -- one for the watch itself, and
+	   one for the parent directory */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1006: FILE: kernel/auditfs.c:394:
+	   one for the parent directory */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1010: FILE: kernel/auditfs.c:398:
+	ret = path_lookup(watch->w_path, LOOKUP_PARENT, &nd);
 	                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1015: FILE: kernel/auditfs.c:403:
+	if (nd.last_type != LAST_NORM || !nd.last.name)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1015: FILE: kernel/auditfs.c:403:
+	if (nd.last_type != LAST_NORM || !nd.last.name)
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1018: FILE: kernel/auditfs.c:406:
+	pdata = audit_data_get(nd.dentry->d_inode, 1);
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1023: FILE: kernel/auditfs.c:411:
+	lookup = audit_fetch_watch_lock(nd.last.name, pdata);
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1030: FILE: kernel/auditfs.c:418:
+	watch->w_name = kmalloc(strlen(nd.last.name)+1, GFP_KERNEL);
 	                               ^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1030: FILE: kernel/auditfs.c:418:
+	watch->w_name = kmalloc(strlen(nd.last.name)+1, GFP_KERNEL);
 	                                            ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1033: FILE: kernel/auditfs.c:421:
+	strcpy(watch->w_name, nd.last.name);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1035: FILE: kernel/auditfs.c:423:
+	watch->w_dev = nd.dentry->d_inode->i_sb->s_dev;
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1046: FILE: kernel/auditfs.c:434:
+	/* __d_lookup will attach the audit data, if nd.last exists. */
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1047: FILE: kernel/auditfs.c:435:
+	dput(d_lookup(nd.dentry, &nd.last));
 	              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1047: FILE: kernel/auditfs.c:435:
+	dput(d_lookup(nd.dentry, &nd.last));
 	                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1052: FILE: kernel/auditfs.c:440:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1063: FILE: kernel/auditfs.c:451:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1078: FILE: kernel/auditfs.c:466:
+	ret = path_lookup(watch->w_path, LOOKUP_PARENT, &nd);
 	                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1083: FILE: kernel/auditfs.c:471:
+	if (nd.last_type != LAST_NORM || !nd.last.name)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1083: FILE: kernel/auditfs.c:471:
+	if (nd.last_type != LAST_NORM || !nd.last.name)
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1086: FILE: kernel/auditfs.c:474:
+	data = audit_data_get(nd.dentry->d_inode, 0);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1091: FILE: kernel/auditfs.c:479:
+	real = audit_fetch_watch(nd.last.name, data);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1102: FILE: kernel/auditfs.c:490:
+	path_release(&nd);
 	              ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1119: FILE: kernel/auditfs.c:507:
+		BUG_ON(new == 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1121: FILE: kernel/auditfs.c:509:
+		dprintk("Increase count on watch %p to %d\n",
+		       watch, new);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: kernel/auditfs.c:524:
+		dprintk("Reduce count on watch %p to %d\n",
+		       watch, new);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1148: FILE: kernel/auditfs.c:536:
+ * ^Identry_iput(),$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1169: FILE: kernel/auditfs.c:557:
+	/* If there's no audit data on the parent inode, then there can
+	   be no watches to add or remove */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1169: FILE: kernel/auditfs.c:557:
+	   be no watches to add or remove */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1177: FILE: kernel/auditfs.c:565:
+	/* Fetch audit data, using the preallocated one from the watch if
+	   there is actually a relevant watch and the inode didn't already

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1178: FILE: kernel/auditfs.c:566:
+	   have any audit data */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1182: FILE: kernel/auditfs.c:570:
+	/* If there's no data, then there wasn't a watch either.
+	   Nothing to see here; move along */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1182: FILE: kernel/auditfs.c:570:
+	   Nothing to see here; move along */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1281: FILE: kernel/auditfs.c:669:
+			/* This watch was removed from the list while we
+			   pondered it. We could play tricks to find how far

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1286: FILE: kernel/auditfs.c:674:
+			   from being added while we're looping */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1308: FILE: kernel/auditfs.c:696:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: kernel/auditfs.c:714:
+	int *dest = kmalloc(2 * sizeof(int), GFP_KERNEL);
+	if (!dest)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1352: FILE: kernel/auditfs.c:740:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1360: FILE: kernel/auditfs.c:748:
+	if (req->perms > (MAY_READ|MAY_WRITE|MAY_EXEC|MAY_APPEND))
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1360: FILE: kernel/auditfs.c:748:
+	if (req->perms > (MAY_READ|MAY_WRITE|MAY_EXEC|MAY_APPEND))
 	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1360: FILE: kernel/auditfs.c:748:
+	if (req->perms > (MAY_READ|MAY_WRITE|MAY_EXEC|MAY_APPEND))
 	                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1402: FILE: kernel/auditfs.c:790:
+                ^Iaudit_watch_put(watch);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1402: FILE: kernel/auditfs.c:790:
+                ^Iaudit_watch_put(watch);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1402: FILE: kernel/auditfs.c:790:
+                ^Iaudit_watch_put(watch);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1403: FILE: kernel/auditfs.c:791:
+        ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1403: FILE: kernel/auditfs.c:791:
+        ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1403: FILE: kernel/auditfs.c:791:
+        ^I}$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1411: FILE: kernel/auditfs.c:799:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1423: FILE: kernel/auditfs.c:811:
+		printk(KERN_NOTICE

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1425: FILE: kernel/auditfs.c:813:
+		       __FUNCTION__, auditfs_cache_buckets, auditfs_hash_bits);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1431: FILE: kernel/auditfs.c:819:
+		printk(KERN_NOTICE "No memory to initialize auditfs cache.\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1431: FILE: kernel/auditfs.c:819:
+	if (!auditfs_hash_table) {
+		printk(KERN_NOTICE "No memory to initialize auditfs cache.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1444: FILE: kernel/auditfs.c:832:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#1498: FILE: kernel/auditsc.c:682:
+		switch(aux->type) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1506: FILE: kernel/auditsc.c:690:
+			struct audit_aux_data_watched *axi = (void *)aux;
+			hlist_for_each_entry_safe(winfo, pos, tmp, &axi->watches, node) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1510: FILE: kernel/auditsc.c:694:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1510: FILE: kernel/auditsc.c:694:
+                        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1513: FILE: kernel/auditsc.c:697:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1533: FILE: kernel/auditsc.c:880:
+			struct audit_buffer *sub_ab;
+			audit_log_format(ab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1534: FILE: kernel/auditsc.c:881:
+			audit_log_format(ab,
+					"inode=%lu inode_uid=%u inode_gid=%u"

WARNING:SPLIT_STRING: quoted string split across lines
#1535: FILE: kernel/auditsc.c:882:
+					"inode=%lu inode_uid=%u inode_gid=%u"
+					" inode_dev=%02x:%02x inode_rdev=%02x:%02x",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1547: FILE: kernel/auditsc.c:894:
+				audit_log_format(sub_ab,
+						" filterkey=%s perm=%u perm_mask=%u",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1564: FILE: kernel/auditsc.c:1323:
+/* This has to be here instead of in auditfs.c, because it needs to
+   see the audit context */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1564: FILE: kernel/auditsc.c:1323:
+   see the audit context */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1566: FILE: kernel/auditsc.c:1325:
+void auditfs_attach_wdata(struct inode *inode, struct hlist_head *watches,
+			 int mask)

WARNING:INDENTED_LABEL: labels should not be indented
#1585: FILE: kernel/auditsc.c:1344:
+	restart:

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*winfo)...) over kmalloc(sizeof(struct audit_watch_info)...)
#1588: FILE: kernel/auditsc.c:1347:
+		winfo = kmalloc(sizeof(struct audit_watch_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#1591: FILE: kernel/auditsc.c:1350:
+ ^I^Iif (mask && (watch->w_perms && !(watch->w_perms&mask))) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1591: FILE: kernel/auditsc.c:1350:
+ ^I^Iif (mask && (watch->w_perms && !(watch->w_perms&mask))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1591: FILE: kernel/auditsc.c:1350:
+ ^I^Iif (mask && (watch->w_perms && !(watch->w_perms&mask))) {$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1591: FILE: kernel/auditsc.c:1350:
+ 		if (mask && (watch->w_perms && !(watch->w_perms&mask))) {
  		                                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1601: FILE: kernel/auditsc.c:1360:
+			/* Someone took it off the list while we didn't have it locked.
+			   Go through the list of watches again until we find one which

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1602: FILE: kernel/auditsc.c:1361:
+			   we haven't already dealt with... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1609: FILE: kernel/auditsc.c:1368:
+				/* This watch wasn't found on ax's list, so
+				   pick up where we left off. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1609: FILE: kernel/auditsc.c:1368:
+				   pick up where we left off. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1619: FILE: kernel/auditsc.c:1378:
+	if (context->in_syscall && !context->auditable &&
[...]
+		 context->auditable = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1620: FILE: kernel/auditsc.c:1379:
+	if (context->in_syscall && !context->auditable &&
+		 AUDIT_DISABLED != audit_filter_syscall(current, context,

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1620: FILE: kernel/auditsc.c:1379:
+		 AUDIT_DISABLED != audit_filter_syscall(current, context,

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1624: FILE: kernel/auditsc.c:1383:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1624: FILE: kernel/auditsc.c:1383:
+
+	

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170164.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 88 warnings, 31 checks, 1446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170164.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
