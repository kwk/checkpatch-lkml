WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: drivers/acpi/sony_acpi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: drivers/acpi/sony_acpi.c:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: drivers/acpi/sony_acpi.c:6:
+ * Parts of this driver inspired from asus_acpi.c, which is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: drivers/acpi/sony_acpi.c:13:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: drivers/acpi/sony_acpi.c:18:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: drivers/acpi/sony_acpi.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#95: FILE: drivers/acpi/sony_acpi.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#105: FILE: drivers/acpi/sony_acpi.c:31:
+#include <asm/uaccess.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#115: FILE: drivers/acpi/sony_acpi.c:41:
+static int debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: drivers/acpi/sony_acpi.c:43:
+MODULE_PARM_DESC(debug,"set this to 1 (and RTFM) if you want to help the development of this driver");
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#119: FILE: drivers/acpi/sony_acpi.c:45:
+static int sony_acpi_add (struct acpi_device *device);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: drivers/acpi/sony_acpi.c:46:
+static int sony_acpi_remove (struct acpi_device *device, int type);

WARNING:INDENTED_LABEL: labels should not be indented
#123: FILE: drivers/acpi/sony_acpi.c:49:
+	name:	ACPI_SNC_DRIVER_NAME,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#124: FILE: drivers/acpi/sony_acpi.c:50:
+	class:	ACPI_SNC_CLASS,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#124: FILE: drivers/acpi/sony_acpi.c:50:
+	class:	ACPI_SNC_CLASS,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#125: FILE: drivers/acpi/sony_acpi.c:51:
+	ids:	ACPI_SNC_HID,
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#125: FILE: drivers/acpi/sony_acpi.c:51:
+	ids:	ACPI_SNC_HID,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#126: FILE: drivers/acpi/sony_acpi.c:52:
+	ops:	{
 	   ^

WARNING:INDENTED_LABEL: labels should not be indented
#126: FILE: drivers/acpi/sony_acpi.c:52:
+	ops:	{

WARNING:INDENTED_LABEL: labels should not be indented
#127: FILE: drivers/acpi/sony_acpi.c:53:
+			add:	sony_acpi_add,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#128: FILE: drivers/acpi/sony_acpi.c:54:
+			remove:	sony_acpi_remove,
 			      ^

WARNING:INDENTED_LABEL: labels should not be indented
#128: FILE: drivers/acpi/sony_acpi.c:54:
+			remove:	sony_acpi_remove,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status == AE_OK'
#158: FILE: drivers/acpi/sony_acpi.c:84:
+	if ((status == AE_OK) && (out_obj.type == ACPI_TYPE_INTEGER)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'out_obj.type == ACPI_TYPE_INTEGER'
#158: FILE: drivers/acpi/sony_acpi.c:84:
+	if ((status == AE_OK) && (out_obj.type == ACPI_TYPE_INTEGER)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#163: FILE: drivers/acpi/sony_acpi.c:89:
+	printk(KERN_WARNING "acpi_callreadfunc failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "result"
#186: FILE: drivers/acpi/sony_acpi.c:112:
+		if (result != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#188: FILE: drivers/acpi/sony_acpi.c:114:
+				printk(KERN_WARNING "acpi_evaluate_object bad return type\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: drivers/acpi/sony_acpi.c:121:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#196: FILE: drivers/acpi/sony_acpi.c:122:
+	printk(KERN_WARNING "acpi_evaluate_object failed\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#201: FILE: drivers/acpi/sony_acpi.c:127:
+static int parse_buffer(const char __user *buffer, unsigned long count, int *val) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: drivers/acpi/sony_acpi.c:129:
+^I$

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#209: FILE: drivers/acpi/sony_acpi.c:135:
+	if (sscanf(s, "%i", val) != 1)
+		return -EINVAL;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#214: FILE: drivers/acpi/sony_acpi.c:140:
+static int sony_acpi_write_brt(struct file *file, const char __user *buffer, unsigned long count, void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#216: FILE: drivers/acpi/sony_acpi.c:142:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: drivers/acpi/sony_acpi.c:145:
+	if ((result = parse_buffer(buffer, count, &snc->brt)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: drivers/acpi/sony_acpi.c:147:
+^I$

CHECK:SPACING: No space is necessary after a cast
#230: FILE: drivers/acpi/sony_acpi.c:156:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: drivers/acpi/sony_acpi.c:160:
+^I$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#238: FILE: drivers/acpi/sony_acpi.c:164:
+static int sony_acpi_write_cmi(struct file *file, const char __user *buffer, unsigned long count, void *data)

CHECK:SPACING: No space is necessary after a cast
#240: FILE: drivers/acpi/sony_acpi.c:166:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#243: FILE: drivers/acpi/sony_acpi.c:169:
+	if ((result = parse_buffer(buffer, count, &snc->cmi)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: drivers/acpi/sony_acpi.c:171:
+^I$

CHECK:SPACING: No space is necessary after a cast
#254: FILE: drivers/acpi/sony_acpi.c:180:
+	struct sony_snc *snc = (struct sony_snc *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: drivers/acpi/sony_acpi.c:181:
+	struct sony_snc *snc = (struct sony_snc *) data;
+	return sprintf(page, "%d\n", snc->cmi);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#258: FILE: drivers/acpi/sony_acpi.c:184:
+static int sony_acpi_write_csxb(struct file *file, const char __user *buffer, unsigned long count, void *data)

CHECK:SPACING: No space is necessary after a cast
#260: FILE: drivers/acpi/sony_acpi.c:186:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#263: FILE: drivers/acpi/sony_acpi.c:189:
+	if ((result = parse_buffer(buffer, count, &snc->csxb)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: drivers/acpi/sony_acpi.c:191:
+^I$

CHECK:SPACING: No space is necessary after a cast
#274: FILE: drivers/acpi/sony_acpi.c:200:
+	struct sony_snc *snc = (struct sony_snc *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: drivers/acpi/sony_acpi.c:201:
+	struct sony_snc *snc = (struct sony_snc *) data;
+	return sprintf(page, "%d\n", snc->csxb);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#278: FILE: drivers/acpi/sony_acpi.c:204:
+static int sony_acpi_write_ctr(struct file *file, const char __user *buffer, unsigned long count, void *data)

CHECK:SPACING: No space is necessary after a cast
#280: FILE: drivers/acpi/sony_acpi.c:206:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#283: FILE: drivers/acpi/sony_acpi.c:209:
+	if ((result = parse_buffer(buffer, count, &snc->ctr)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: drivers/acpi/sony_acpi.c:211:
+^I$

CHECK:SPACING: No space is necessary after a cast
#294: FILE: drivers/acpi/sony_acpi.c:220:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: drivers/acpi/sony_acpi.c:224:
+^I$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#302: FILE: drivers/acpi/sony_acpi.c:228:
+static int sony_acpi_write_pbr(struct file *file, const char __user *buffer, unsigned long count, void *data)

CHECK:SPACING: No space is necessary after a cast
#304: FILE: drivers/acpi/sony_acpi.c:230:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#307: FILE: drivers/acpi/sony_acpi.c:233:
+	if ((result = parse_buffer(buffer, count, &snc->pbr)) < 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: drivers/acpi/sony_acpi.c:235:
+^I$

CHECK:SPACING: No space is necessary after a cast
#318: FILE: drivers/acpi/sony_acpi.c:244:
+	struct sony_snc *snc = (struct sony_snc *) data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: drivers/acpi/sony_acpi.c:248:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: drivers/acpi/sony_acpi.c:251:
+^I^I $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: drivers/acpi/sony_acpi.c:256:
+	printk("sony_snc_notify\n");

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#333: FILE: drivers/acpi/sony_acpi.c:259:
+static acpi_status sony_walk_callback(acpi_handle handle, u32 level, void *context, void **return_value)

CHECK:SPACING: No space is necessary after a cast
#335: FILE: drivers/acpi/sony_acpi.c:261:
+	struct acpi_namespace_node *node = (struct acpi_namespace_node *) handle;

CHECK:SPACING: No space is necessary after a cast
#336: FILE: drivers/acpi/sony_acpi.c:262:
+	union acpi_operand_object *operand = (union acpi_operand_object *) node->object;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: drivers/acpi/sony_acpi.c:264:
+^Iprintk("sony_acpi method: name: %4.4s, args %X\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#338: FILE: drivers/acpi/sony_acpi.c:264:
+	printk("sony_acpi method: name: %4.4s, args %X\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: drivers/acpi/sony_acpi.c:265:
+	printk("sony_acpi method: name: %4.4s, args %X\n", 
+		node->name.ascii,

CHECK:SPACING: No space is necessary after a cast
#340: FILE: drivers/acpi/sony_acpi.c:266:
+		(u32) operand->method.param_count);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*snc)...) over kmalloc(sizeof(struct sony_snc)...)
#351: FILE: drivers/acpi/sony_acpi.c:277:
+	snc = kmalloc(sizeof(struct sony_snc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#362: FILE: drivers/acpi/sony_acpi.c:288:
+		status = acpi_walk_namespace(ACPI_TYPE_METHOD, snc->handle, 1, sony_walk_callback, NULL, NULL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#363: FILE: drivers/acpi/sony_acpi.c:289:
+		if (ACPI_FAILURE(status)) {
+			printk(KERN_WARNING "Unable to walk acpi resources\n");
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#364: FILE: drivers/acpi/sony_acpi.c:290:
+			printk(KERN_WARNING "Unable to walk acpi resources\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#370: FILE: drivers/acpi/sony_acpi.c:296:
+		printk(KERN_WARNING "Unable to create proc entry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#383: FILE: drivers/acpi/sony_acpi.c:309:
+			printk(KERN_WARNING "Unable to create proc entry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#395: FILE: drivers/acpi/sony_acpi.c:321:
+			printk(KERN_WARNING "Unable to create proc entry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#407: FILE: drivers/acpi/sony_acpi.c:333:
+			printk(KERN_WARNING "Unable to create proc entry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#419: FILE: drivers/acpi/sony_acpi.c:345:
+			printk(KERN_WARNING "Unable to create proc entry\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: drivers/acpi/sony_acpi.c:356:
+		status = acpi_install_notify_handler(snc->handle,
+			ACPI_DEVICE_NOTIFY, sony_acpi_notify, snc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#432: FILE: drivers/acpi/sony_acpi.c:358:
+				printk(KERN_WARNING "Unable to install notify handler\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#438: FILE: drivers/acpi/sony_acpi.c:364:
+	printk(KERN_INFO ACPI_SNC_DRIVER_NAME " successfully installed\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#457: FILE: drivers/acpi/sony_acpi.c:383:
+
+

CHECK:SPACING: No space is necessary after a cast
#463: FILE: drivers/acpi/sony_acpi.c:389:
+	snc = (struct sony_snc *) acpi_driver_data(device);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#466: FILE: drivers/acpi/sony_acpi.c:392:
+		status = acpi_remove_notify_handler(snc->handle, ACPI_DEVICE_NOTIFY, sony_acpi_notify);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#468: FILE: drivers/acpi/sony_acpi.c:394:
+			printk(KERN_WARNING "Unable to remove notify handler\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#479: FILE: drivers/acpi/sony_acpi.c:405:
+	printk(KERN_INFO ACPI_SNC_DRIVER_NAME " successfully removed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#490: FILE: drivers/acpi/sony_acpi.c:416:
+		printk(KERN_WARNING "Unable to create /proc entry\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: drivers/acpi/sony_acpi.c:429:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: Documentation/sony_acpi.txt:5:
+This mini-driver drives the ACPI SNC device present in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: Documentation/sony_acpi.txt:8:
+It gives access to some extra laptop functionalities. In $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: Documentation/sony_acpi.txt:14:
+not work on all sonypi laptops, whereas sony_acpi should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#565: FILE: Documentation/sony_acpi.txt:51:
+The sony_acpi driver creates, for some of those methods (the most $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: Documentation/sony_acpi.txt:55:
+Your mission, should you accept it, is to try finding out what $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: Documentation/sony_acpi.txt:73:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: Documentation/sony_acpi.txt:78:
+  sonypi driver (through /dev/sonypi) does not try to use the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: Documentation/sony_acpi.txt:79:
+  sony_acpi driver. In the future, spicctrl could try sonypi first, $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#604: FILE: drivers/acpi/Kconfig:179:
+config ACPI_SONY
+        tristate "Sony Laptop Extras"
+	depends on X86
+	depends on ACPI_INTERPRETER
+	default m
+        ---help---
+	  This mini-driver drives the ACPI SNC device present in the
+	  ACPI BIOS of the Sony Vaio laptops.
+
+	  It gives access to some extra laptop functionalities. In
+	  its current form, the only thing this driver does is letting
+	  the user set or query the screen brightness.
+
+	  Read <Documentation/sony_acpi.txt> for more information.
           

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266838.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 39 warnings, 22 checks, 545 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266838.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
