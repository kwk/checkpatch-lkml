WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#64: FILE: net/irda/iriap.c:187:
+	 * we connect, so this must have a sane value... Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#79: FILE: net/irda/irias_object.c:88:
+			__FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!obj->attribs"
#88: FILE: net/irda/irias_object.c:102:
+	if (obj->attribs == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#89: FILE: net/irda/irias_object.c:103:
+		WARNING("%s(), Unable to allocate attribs!\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->discovery_log"
#106: FILE: net/irda/irlap.c:545:
+	if (self->discovery_log == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#108: FILE: net/irda/irlap.c:547:
+			__FUNCTION__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irlmp->clients == NULL'
#122: FILE: net/irda/irlmp.c:93:
+	if ((irlmp->clients == NULL) ||
+	    (irlmp->services == NULL) ||
+	    (irlmp->links == NULL) ||
+	    (irlmp->unconnected_lsaps == NULL) ||
+	    (irlmp->cachelog == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irlmp->services == NULL'
#122: FILE: net/irda/irlmp.c:93:
+	if ((irlmp->clients == NULL) ||
+	    (irlmp->services == NULL) ||
+	    (irlmp->links == NULL) ||
+	    (irlmp->unconnected_lsaps == NULL) ||
+	    (irlmp->cachelog == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irlmp->links == NULL'
#122: FILE: net/irda/irlmp.c:93:
+	if ((irlmp->clients == NULL) ||
+	    (irlmp->services == NULL) ||
+	    (irlmp->links == NULL) ||
+	    (irlmp->unconnected_lsaps == NULL) ||
+	    (irlmp->cachelog == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irlmp->unconnected_lsaps == NULL'
#122: FILE: net/irda/irlmp.c:93:
+	if ((irlmp->clients == NULL) ||
+	    (irlmp->services == NULL) ||
+	    (irlmp->links == NULL) ||
+	    (irlmp->unconnected_lsaps == NULL) ||
+	    (irlmp->cachelog == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irlmp->cachelog == NULL'
#122: FILE: net/irda/irlmp.c:93:
+	if ((irlmp->clients == NULL) ||
+	    (irlmp->services == NULL) ||
+	    (irlmp->links == NULL) ||
+	    (irlmp->unconnected_lsaps == NULL) ||
+	    (irlmp->cachelog == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irlmp->clients"
#122: FILE: net/irda/irlmp.c:93:
+	if ((irlmp->clients == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irlmp->services"
#123: FILE: net/irda/irlmp.c:94:
+	    (irlmp->services == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irlmp->links"
#124: FILE: net/irda/irlmp.c:95:
+	    (irlmp->links == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irlmp->unconnected_lsaps"
#125: FILE: net/irda/irlmp.c:96:
+	    (irlmp->unconnected_lsaps == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irlmp->cachelog"
#126: FILE: net/irda/irlmp.c:97:
+	    (irlmp->cachelog == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lap->lsaps"
#142: FILE: net/irda/irlmp.c:303:
+	if (lap->lsaps == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#143: FILE: net/irda/irlmp.c:304:
+		WARNING("%s(), unable to kmalloc lsaps\n", __FUNCTION__);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#158: FILE: net/irda/irttp.c:1098:
+		       { dev_kfree_skb(userdata); return -1; } );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#168: FILE: net/irda/irttp.c:1345:
+		       { dev_kfree_skb(userdata); return -1; } );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#179: FILE: net/irda/irttp.c:1368:
+		       { dev_kfree_skb(tx_skb); return -1; } );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: net/irda/irnet/irnet_irda.c:323:
+  if(self->iriap == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#190: FILE: net/irda/irnet/irnet_irda.c:323:
+  if(self->iriap == NULL)
+    return -ENOMEM;

ERROR:SPACING: space required before the open parenthesis '('
#190: FILE: net/irda/irnet/irnet_irda.c:323:
+  if(self->iriap == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self->iriap"
#190: FILE: net/irda/irnet/irnet_irda.c:323:
+  if(self->iriap == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: net/irda/irnet/irnet_irda.c:324:
+    return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: net/irda/irnet/irnet_irda.c:399:
+      if(self->iriap)$

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: net/irda/irnet/irnet_irda.c:399:
+      if(self->iriap)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000339273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 9 warnings, 14 checks, 135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000339273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
