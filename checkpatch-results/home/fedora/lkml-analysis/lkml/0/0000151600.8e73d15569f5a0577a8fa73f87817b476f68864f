CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsec)...) over kzalloc(sizeof(struct task_security_struct)...)
#61: FILE: security/selinux/hooks.c:125:
+	tsec = kzalloc(sizeof(struct task_security_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isec)...) over kzalloc(sizeof(struct inode_security_struct)...)
#74: FILE: security/selinux/hooks.c:153:
+	isec = kzalloc(sizeof(struct inode_security_struct), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fsec)...) over kzalloc(sizeof(struct file_security_struct)...)
#87: FILE: security/selinux/hooks.c:194:
+	fsec = kzalloc(sizeof(struct file_security_struct), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbsec)...) over kzalloc(sizeof(struct superblock_security_struct)...)
#100: FILE: security/selinux/hooks.c:227:
+	sbsec = kzalloc(sizeof(struct superblock_security_struct), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bsec)...) over kzalloc(sizeof(struct bprm_security_struct)...)
#126: FILE: security/selinux/hooks.c:1465:
+	bsec = kzalloc(sizeof(struct bprm_security_struct), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isec)...) over kzalloc(sizeof(struct ipc_security_struct)...)
#139: FILE: security/selinux/hooks.c:3578:
+	isec = kzalloc(sizeof(struct ipc_security_struct), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*msec)...) over kzalloc(sizeof(struct msg_security_struct)...)
#152: FILE: security/selinux/hooks.c:3609:
+	msec = kzalloc(sizeof(struct msg_security_struct), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: security/selinux/selinuxfs.c:427:
+	scon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#192: FILE: security/selinux/selinuxfs.c:431:
+	tcon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#204: FILE: security/selinux/selinuxfs.c:476:
+	scon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: security/selinux/selinuxfs.c:480:
+	tcon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: security/selinux/selinuxfs.c:535:
+	scon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: security/selinux/selinuxfs.c:539:
+	tcon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#240: FILE: security/selinux/selinuxfs.c:592:
+	con = kzalloc(size+1, GFP_KERNEL);
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: security/selinux/selinuxfs.c:596:
+	user = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#258: FILE: security/selinux/selinuxfs.c:653:
+	scon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: security/selinux/selinuxfs.c:657:
+	tcon = kzalloc(size+1, GFP_KERNEL);
 	                   ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*booldatum)...) over kzalloc(sizeof(struct cond_bool_datum)...)
#279: FILE: security/selinux/ss/conditional.c:223:
+	booldatum = kzalloc(sizeof(struct cond_bool_datum), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*list)...) over kzalloc(sizeof(struct cond_av_list)...)
#291: FILE: security/selinux/ss/conditional.c:323:
+	list = kzalloc(sizeof(struct cond_av_list), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*expr)...) over kzalloc(sizeof(struct cond_expr)...)
#303: FILE: security/selinux/ss/conditional.c:415:
+		expr = kzalloc(sizeof(struct cond_expr), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*node)...) over kzalloc(sizeof(struct cond_node)...)
#316: FILE: security/selinux/ss/conditional.c:460:
+		node = kzalloc(sizeof(struct cond_node), GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#497: FILE: security/selinux/ss/policydb.c:1182:
+	typdatum = kzalloc(sizeof(*typdatum),GFP_KERNEL);
 	                                    ^

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#669: FILE: security/selinux/ss/services.c:1715:
+	*names = (char**)kcalloc(*len, sizeof(char*), GFP_ATOMIC);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#669: FILE: security/selinux/ss/services.c:1715:
+	*names = (char**)kcalloc(*len, sizeof(char*), GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#669: FILE: security/selinux/ss/services.c:1715:
+	*names = (char**)kcalloc(*len, sizeof(char*), GFP_ATOMIC);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#675: FILE: security/selinux/ss/services.c:1719:
+	*values = (int*)kcalloc(*len, sizeof(int), GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#675: FILE: security/selinux/ss/services.c:1719:
+	*values = (int*)kcalloc(*len, sizeof(int), GFP_ATOMIC);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 2 warnings, 21 checks, 559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
