WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
--- 2.6.5.bitmap.v4.orig/include/linux/cpumask.h	2004-04-21 06:50:41.000000000 -0700

WARNING:NEW_TYPEDEFS: do not add new typedefs
#124: FILE: include/linux/cpumask.h:67:
+typedef struct { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#124: FILE: include/linux/cpumask.h:67:
+typedef struct { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#130: FILE: include/linux/cpumask.h:71:
+static inline void __cpu_set(int cpu, volatile cpumask_t *dstp)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#132: FILE: include/linux/cpumask.h:73:
+	if (cpu < NR_CPUS)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#137: FILE: include/linux/cpumask.h:78:
+static inline void __cpu_clear(int cpu, volatile cpumask_t *dstp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#155: FILE: include/linux/cpumask.h:96:
+static inline int __cpu_isset(int cpu, const volatile cpumask_t *addr)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#163: FILE: include/linux/cpumask.h:104:
+	if (cpu < NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: include/linux/cpumask.h:112:
+static inline void __cpus_and(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: include/linux/cpumask.h:119:
+static inline void __cpus_or(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: include/linux/cpumask.h:126:
+static inline void __cpus_xor(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#191: FILE: include/linux/cpumask.h:132:
+				__cpus_andnot(&(dst), &(src1), &(src2), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: include/linux/cpumask.h:134:
+static inline void __cpus_andnot(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: include/linux/cpumask.h:141:
+static inline void __cpus_complement(cpumask_t *dstp,
+					cpumask_t *srcp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: include/linux/cpumask.h:148:
+static inline int __cpus_equal(cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: include/linux/cpumask.h:155:
+static inline int __cpus_intersects(cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: include/linux/cpumask.h:162:
+static inline int __cpus_subset(cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#245: FILE: include/linux/cpumask.h:186:
+			__cpus_shift_right(&(dst), &(src), (n), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: include/linux/cpumask.h:188:
+static inline void __cpus_shift_right(cpumask_t *dstp,
+					cpumask_t *srcp, int n, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#253: FILE: include/linux/cpumask.h:194:
+			__cpus_shift_left(&(dst), &(src), (n), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: include/linux/cpumask.h:196:
+static inline void __cpus_shift_left(cpumask_t *dstp,
+					cpumask_t *srcp, int n, int nbits)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#278: FILE: include/linux/cpumask.h:210:
+	return find_next_bit(srcp->bits, nbits, n+1);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#286: FILE: include/linux/cpumask.h:218:
+		if (c < NR_CPUS)					\

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#287: FILE: include/linux/cpumask.h:219:
+			m.bits[0] = 1UL<<c;				\
 			               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#301: FILE: include/linux/cpumask.h:233:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\
 	                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#301: FILE: include/linux/cpumask.h:233:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#318: FILE: include/linux/cpumask.h:240:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL,			\
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#319: FILE: include/linux/cpumask.h:241:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\
 	                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#319: FILE: include/linux/cpumask.h:241:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#328: FILE: include/linux/cpumask.h:248:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-1] =  0UL				\
 	                             ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#334: FILE: include/linux/cpumask.h:254:
+			__cpumask_scnprintf((buf), (len), &(src), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: include/linux/cpumask.h:256:
+static inline int __cpumask_scnprintf(char *buf, int len,
+					cpumask_t *srcp, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#342: FILE: include/linux/cpumask.h:262:
+			__cpumask_parse((ubuf), (ulen), &(src), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: include/linux/cpumask.h:264:
+static inline int __cpumask_parse(const char __user *buf, int len,
+					cpumask_t *srcp, int nbits)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#373: FILE: include/linux/cpumask.h:293:
+#define for_each_cpu_mask(cpu, mask)		\
+	for (cpu = first_cpu(mask);		\
+		cpu < NR_CPUS;			\
+		cpu = next_cpu(cpu, mask))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#373: FILE: include/linux/cpumask.h:293:
+#define for_each_cpu_mask(cpu, mask)		\
+	for (cpu = first_cpu(mask);		\
+		cpu < NR_CPUS;			\
+		cpu = next_cpu(cpu, mask))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#375: FILE: include/linux/cpumask.h:295:
+		cpu < NR_CPUS;			\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: include/linux/cpumask.h:302:
+#define cpu_online(cpu)		     ({ BUG_ON((cpu) != 0); 1; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#383: FILE: include/linux/cpumask.h:303:
+#define cpu_possible(cpu)	     ({ BUG_ON((cpu) != 0); 1; })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#384: FILE: include/linux/cpumask.h:304:
+#define cpu_set_online(cpu)	     ({ BUG_ON((cpu) != 0); })

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: include/linux/cpumask.h:305:
+#define cpu_set_offline(cpu)	     ({ BUG(); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#389: FILE: include/linux/cpumask.h:309:
+#define for_each_cpu_mask(cpu, mask) for (cpu = 0; cpu < 1; cpu++)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: include/linux/cpumask.h:319:
+#define cpu_isset_const(a,b) cpu_isset(a,b)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#401: FILE: include/linux/cpumask.h:319:
+#define cpu_isset_const(a,b) cpu_isset(a,b)
                                         ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000286862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 21 warnings, 21 checks, 368 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000286862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
