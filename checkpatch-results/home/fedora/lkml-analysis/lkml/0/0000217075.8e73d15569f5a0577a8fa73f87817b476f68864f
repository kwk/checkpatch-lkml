WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#86: FILE: fs/fuse/dir.c:168:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#108: FILE: fs/fuse/dir.c:190:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#124: FILE: fs/fuse/dir.c:206:
+		       struct nameidata *nd)
 		                         ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/fuse/dir.c:216:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#152: FILE: fs/fuse/dir.c:234:
+	unsigned len = strlen(link) + 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: fs/fuse/dir.c:258:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

CHECK:BRACES: braces {} should be used on all arms of this statement
#188: FILE: fs/fuse/dir.c:270:
+	if (!err) {
[...]
+	} else if (err == -EINTR)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: fs/fuse/dir.c:274:
+                   the inode does have more links this will be$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#192: FILE: fs/fuse/dir.c:274:
+		/* Set nlink to zero so the inode can be cleared, if
+                   the inode does have more links this will be

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/fuse/dir.c:275:
+                   discovered at the next lookup/getattr */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#193: FILE: fs/fuse/dir.c:275:
+                   discovered at the next lookup/getattr */

WARNING:LINE_SPACING: Missing a blank line after declarations
#207: FILE: fs/fuse/dir.c:289:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

CHECK:BRACES: braces {} should be used on all arms of this statement
#219: FILE: fs/fuse/dir.c:301:
+	if (!err) {
[...]
+	} else if (err == -EINTR)
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: fs/fuse/dir.c:316:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#259: FILE: fs/fuse/dir.c:341:
+		/* If request was interrupted, DEITY only knows if the
+		   rename actually took place.  If the invalidation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: fs/fuse/dir.c:344:
+		   the dcache and the real filesystem.  Tough luck. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: fs/fuse/dir.c:349:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: fs/fuse/dir.c:361:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#293: FILE: fs/fuse/dir.c:375:
+	/* Contrary to "normal" filesystems it can happen that link
+	   makes two "logical" inodes point to the same "physical"

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#310: FILE: fs/fuse/dir.c:618:
+static unsigned iattr_to_fattr(struct iattr *iattr, struct fuse_attr *fattr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#312: FILE: fs/fuse/dir.c:620:
+	unsigned ivalid = iattr->ia_valid;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: fs/fuse/dir.c:621:
+	unsigned fvalid = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#348: FILE: fs/fuse/dir.c:656:
+		unsigned long limit;
+		is_truncate = 1;

CHECK:SPACING: No space is necessary after a cast
#350: FILE: fs/fuse/dir.c:658:
+		if (limit != RLIM_INFINITY && attr->ia_size > (loff_t) limit) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#374: FILE: fs/fuse/dir.c:682:
+	if (!err) {
[...]
+	} else if (err == -EINTR)
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#381: FILE: fs/fuse/dir.c:689:
+				loff_t origsize = i_size_read(inode);
+				i_size_write(inode, outarg.attr.size);

CHECK:BIT_MACRO: Prefer using the BIT macro
#435: FILE: include/linux/fuse.h:55:
+#define FATTR_MODE	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#436: FILE: include/linux/fuse.h:56:
+#define FATTR_UID	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#437: FILE: include/linux/fuse.h:57:
+#define FATTR_GID	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#438: FILE: include/linux/fuse.h:58:
+#define FATTR_SIZE	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#439: FILE: include/linux/fuse.h:59:
+#define FATTR_ATIME	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#440: FILE: include/linux/fuse.h:60:
+#define FATTR_MTIME	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#441: FILE: include/linux/fuse.h:61:
+#define FATTR_CTIME	(1 << 6)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 19 warnings, 11 checks, 448 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
