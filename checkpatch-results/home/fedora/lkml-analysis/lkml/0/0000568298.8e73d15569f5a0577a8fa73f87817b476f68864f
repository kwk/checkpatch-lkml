WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#71: 
> Unable to handle kernel NULL pointer dereferenceNMI watchdog detected LOCKUP on CPU1.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: include/linux/wait.h:75:
+	struct task_struct * task;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#234: FILE: include/linux/wait.h:82:
+typedef struct __wait_queue wait_queue_t;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: include/linux/wait.h:100:
+#define WQ_BUG()	BUG()

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#259: FILE: include/linux/wait.h:101:
+#define CHECK_MAGIC(x)								\
+	do {									\
+		if ((x) != (long)&(x)) {					\
+			printk("bad magic %lx (should be %lx), ",		\
+				(long)x, (long)&(x));				\
+			WQ_BUG();						\
+		}								\
+	} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: include/linux/wait.h:104:
+			printk("bad magic %lx (should be %lx), ",		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#267: FILE: include/linux/wait.h:109:
+#define CHECK_MAGIC_WQHEAD(x)							\
+	do {									\
+		if ((x)->__magic != (long)&((x)->__magic)) {			\
+			printk("bad magic %lx (should be %lx, creator %lx), ",	\
+			(x)->__magic, (long)&((x)->__magic), (x)->__creator);	\
+			WQ_BUG();						\
+		}								\
+	} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#270: FILE: include/linux/wait.h:112:
+			printk("bad magic %lx (should be %lx, creator %lx), ",	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: include/linux/wait.h:117:
+#define WQ_CHECK_LIST_HEAD(list) ^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'list' - possible side-effects?
#275: FILE: include/linux/wait.h:117:
+#define WQ_CHECK_LIST_HEAD(list) 						\
+	do {									\
+		if (!list->next || !list->prev)					\
+			WQ_BUG();						\
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'list' may be better as '(list)' to avoid precedence issues
#275: FILE: include/linux/wait.h:117:
+#define WQ_CHECK_LIST_HEAD(list) 						\
+	do {									\
+		if (!list->next || !list->prev)					\
+			WQ_BUG();						\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#279: FILE: include/linux/wait.h:121:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#280: FILE: include/linux/wait.h:122:
+#define WQ_NOTE_WAKER(tsk)							\
+	do {									\
+		tsk->__waker = (long)__builtin_return_address(0);		\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#280: FILE: include/linux/wait.h:122:
+#define WQ_NOTE_WAKER(tsk)							\
+	do {									\
+		tsk->__waker = (long)__builtin_return_address(0);		\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#298: FILE: include/linux/wait.h:140:
+# define __WAITQUEUE_DEBUG_INIT(name) (long)&(name).__magic, 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#299: FILE: include/linux/wait.h:141:
+# define __WAITQUEUE_HEAD_DEBUG_INIT(name) (long)&(name).__magic, (long)&(name).__magic

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#299: FILE: include/linux/wait.h:141:
+# define __WAITQUEUE_HEAD_DEBUG_INIT(name) (long)&(name).__magic, (long)&(name).__magic

WARNING:INDENTED_LABEL: labels should not be indented
#314: FILE: include/linux/wait.h:148:
+	task:		tsk,						\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#315: FILE: include/linux/wait.h:149:
+	tasklist:	{ NULL, NULL },					\
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#315: FILE: include/linux/wait.h:149:
+	tasklist:	{ NULL, NULL },					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#318: FILE: include/linux/wait.h:152:
+#define DECLARE_WAITQUEUE(name, tsk)					\
+	wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#321: FILE: include/linux/wait.h:155:
+#define __WAIT_QUEUE_HEAD_INITIALIZER(name) {				\
+	lock:		WAITQUEUE_RW_LOCK_UNLOCKED,			\
+	tasklist:	{ &(name).separator, &(name).separator },	\
+	separator:	{ &(name).tasklist, &(name).tasklist },		\
+			__WAITQUEUE_HEAD_DEBUG_INIT(name)}

WARNING:INDENTED_LABEL: labels should not be indented
#322: FILE: include/linux/wait.h:156:
+	lock:		WAITQUEUE_RW_LOCK_UNLOCKED,			\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#323: FILE: include/linux/wait.h:157:
+	tasklist:	{ &(name).separator, &(name).separator },	\
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#323: FILE: include/linux/wait.h:157:
+	tasklist:	{ &(name).separator, &(name).separator },	\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#324: FILE: include/linux/wait.h:158:
+	separator:	{ &(name).tasklist, &(name).tasklist },		\
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#324: FILE: include/linux/wait.h:158:
+	separator:	{ &(name).tasklist, &(name).tasklist },		\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: include/linux/wait.h:164:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#416: FILE: kernel/sched.c:711:
+			printk("%d: separator\n", i);

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: kernel/sched.c:715:
+			struct task_struct *tsk = curr->task;
+			printk("%d: pid=%d, state=0x%lx\n", i, tsk->pid, tsk->state);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#420: FILE: kernel/sched.c:715:
+			printk("%d: pid=%d, state=0x%lx\n", i, tsk->pid, tsk->state);

WARNING:LINE_SPACING: Missing a blank line after declarations
#445: FILE: kernel/sched.c:740:
+			wait_queue_t *curr = list_entry(probe, wait_queue_t, tasklist);
+			if (curr->task->state & TASK_EXCLUSIVE)

WARNING:LINE_SPACING: Missing a blank line after declarations
#453: FILE: kernel/sched.c:748:
+			wait_queue_t *curr = list_entry(probe, wait_queue_t, tasklist);
+			if (!(curr->task->state & TASK_EXCLUSIVE)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#454: FILE: kernel/sched.c:749:
+				printk("check_wq_sanity: mangled wait queue\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'check_wq_sanity', this function's name, in a string
#454: FILE: kernel/sched.c:749:
+				printk("check_wq_sanity: mangled wait queue\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: kernel/sched.c:760:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: kernel/sched.c:803:
+^I * Wake all the !TASK_EXCLUSIVE tasks $

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: kernel/sched.c:807:
+                wait_queue_t *curr = list_entry(tmp, wait_queue_t, tasklist);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: kernel/sched.c:807:
+                wait_queue_t *curr = list_entry(tmp, wait_queue_t, tasklist);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: kernel/sched.c:832:
+                wait_queue_t *curr = list_entry(tmp, wait_queue_t, tasklist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: kernel/sched.c:832:
+                wait_queue_t *curr = list_entry(tmp, wait_queue_t, tasklist);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000568298.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 21 warnings, 9 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000568298.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
