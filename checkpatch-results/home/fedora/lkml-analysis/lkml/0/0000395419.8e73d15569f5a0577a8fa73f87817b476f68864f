WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
ChangeSet 1.947.23.10, 2003/02/06 10:03:53+11:00, stekloff@w-stekloff.beaverton.ibm.com

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#34: 
--- a/drivers/pci/Makefile	Thu Feb  6 14:51:34 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: drivers/pci/pci-sysfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#63: FILE: drivers/pci/pci-sysfs.c:2:
+ * drivers/pci/pci-sysfs.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: drivers/pci/pci-sysfs.c:9:
+ * Modeled after usb's driverfs.c $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#74: FILE: drivers/pci/pci-sysfs.c:13:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#88: FILE: drivers/pci/pci-sysfs.c:27:
+#define pci_config_attr(field, format_string)				\
+static ssize_t								\
+show_##field (struct device *dev, char *buf)				\
+{									\
+	struct pci_dev *pdev;						\
+									\
+	pdev = to_pci_dev (dev);					\
+	return sprintf (buf, format_string, pdev->field);		\
+}									\
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#88: FILE: drivers/pci/pci-sysfs.c:27:
+#define pci_config_attr(field, format_string)				\
+static ssize_t								\
+show_##field (struct device *dev, char *buf)				\
+{									\
+	struct pci_dev *pdev;						\
+									\
+	pdev = to_pci_dev (dev);					\
+	return sprintf (buf, format_string, pdev->field);		\
+}									\
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#88: FILE: drivers/pci/pci-sysfs.c:27:
+#define pci_config_attr(field, format_string)				\
+static ssize_t								\
+show_##field (struct device *dev, char *buf)				\
+{									\
+	struct pci_dev *pdev;						\
+									\
+	pdev = to_pci_dev (dev);					\
+	return sprintf (buf, format_string, pdev->field);		\
+}									\
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#90: FILE: drivers/pci/pci-sysfs.c:29:
+show_##field (struct device *dev, char *buf)				\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#94: FILE: drivers/pci/pci-sysfs.c:33:
+	pdev = to_pci_dev (dev);					\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#95: FILE: drivers/pci/pci-sysfs.c:34:
+	return sprintf (buf, format_string, pdev->field);		\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#97: FILE: drivers/pci/pci-sysfs.c:36:
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: drivers/pci/pci-sysfs.c:46:
+pci_show_resources(struct device * dev, char * buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: drivers/pci/pci-sysfs.c:46:
+pci_show_resources(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: drivers/pci/pci-sysfs.c:48:
+	struct pci_dev * pci_dev = to_pci_dev(dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: drivers/pci/pci-sysfs.c:49:
+	char * str = buf;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: drivers/pci/pci-sysfs.c:52:
+	for (i = 0; i < DEVICE_COUNT_RESOURCE && pci_resource_start(pci_dev,i); i++) {
 	                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#114: FILE: drivers/pci/pci-sysfs.c:53:
+		str += sprintf(str,LONG_FORMAT LONG_FORMAT LONG_FORMAT "\n",
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: drivers/pci/pci-sysfs.c:54:
+			       pci_resource_start(pci_dev,i),
 			                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: drivers/pci/pci-sysfs.c:55:
+			       pci_resource_end(pci_dev,i),
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: drivers/pci/pci-sysfs.c:56:
+			       pci_resource_flags(pci_dev,i));
 			                                 ^

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pci_show_resources' to 'resource_show'
#120: FILE: drivers/pci/pci-sysfs.c:59:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: drivers/pci/pci-sysfs.c:61:
+static DEVICE_ATTR(resource,S_IRUGO,pci_show_resources,NULL);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: drivers/pci/pci-sysfs.c:61:
+static DEVICE_ATTR(resource,S_IRUGO,pci_show_resources,NULL);
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#122: FILE: drivers/pci/pci-sysfs.c:61:
+static DEVICE_ATTR(resource,S_IRUGO,pci_show_resources,NULL);
                                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#122: FILE: drivers/pci/pci-sysfs.c:61:
+static DEVICE_ATTR(resource,S_IRUGO,pci_show_resources,NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#124: FILE: drivers/pci/pci-sysfs.c:63:
+void pci_create_sysfs_dev_files (struct pci_dev *pdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: drivers/pci/pci-sysfs.c:68:
+	device_create_file (dev, &dev_attr_vendor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#130: FILE: drivers/pci/pci-sysfs.c:69:
+	device_create_file (dev, &dev_attr_device);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#131: FILE: drivers/pci/pci-sysfs.c:70:
+	device_create_file (dev, &dev_attr_subsystem_vendor);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#132: FILE: drivers/pci/pci-sysfs.c:71:
+	device_create_file (dev, &dev_attr_subsystem_device);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: drivers/pci/pci-sysfs.c:72:
+	device_create_file (dev, &dev_attr_irq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#134: FILE: drivers/pci/pci-sysfs.c:73:
+	device_create_file (dev, &dev_attr_resource);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: drivers/pci/pci.h:5:
+extern void pci_create_sysfs_dev_files(struct pci_dev *pdev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000395419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 17 warnings, 4 checks, 136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000395419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
