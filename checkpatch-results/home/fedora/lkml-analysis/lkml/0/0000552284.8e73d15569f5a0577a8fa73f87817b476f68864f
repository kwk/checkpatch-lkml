ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: Documentation/Configure.help:10920:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: Documentation/Configure.help:10934:
+  $

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#112: FILE: Documentation/Configure.help:10943:
+  It is more of an programming example than a useable filesystem. If
                                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#158: FILE: include/linux/fs.h:1216:
 }
+extern void remove_suid(struct inode *inode);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/fs.h:1216:
+extern void remove_suid(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#166: FILE: include/linux/fs.h:1264:
+extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: include/linux/fs.h:1264:
+extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/fs.h:1264:
+extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/kernel.h:65:
+extern unsigned long long memparse(char *ptr, char **retptr);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#191: FILE: include/linux/mm.h:203:
+					if (waitqueue_active(&(page)->wait)) \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: lib/cmdline.c:96:
+unsigned long long memparse (char *ptr, char **retptr)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: lib/cmdline.c:98:
+	unsigned long long ret = simple_strtoul (ptr, retptr, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#218: FILE: lib/cmdline.c:98:
+	unsigned long long ret = simple_strtoul (ptr, retptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#230: FILE: mm/filemap.c:1212:
+int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#230: FILE: mm/filemap.c:1212:
+int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#288: FILE: mm/shmem.c:44:
+static struct inode_operations shmem_symlink_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#289: FILE: mm/shmem.c:45:
+static struct vm_operations_struct shmem_vm_ops;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: mm/shmem.c:61:
+ * So the mm freed $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: mm/shmem.c:67:
+static void shmem_recalc_inode(struct inode * inode)

ERROR:SPACING: space required before the open brace '{'
#317: FILE: mm/shmem.c:73:
+	if (freed){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: mm/shmem.c:74:
+		struct shmem_sb_info * info = &inode->i_sb->u.shmem_sb;

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: mm/shmem.c:75:
+		struct shmem_sb_info * info = &inode->i_sb->u.shmem_sb;
+		inode->i_blocks -= freed;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: mm/shmem.c:76:
+		spin_lock (&info->stat_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#322: FILE: mm/shmem.c:78:
+		spin_unlock (&info->stat_lock);

ERROR:SPACING: space required before the open parenthesis '('
#352: FILE: mm/shmem.c:101:
+	if(!(info->i_indirect[index])) {

CHECK:SPACING: No space is necessary after a cast
#353: FILE: mm/shmem.c:102:
+		info->i_indirect[index] = (swp_entry_t *) get_zeroed_page(GFP_USER);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#359: FILE: mm/shmem.c:107:
+	return info->i_indirect[index]+offset;
 	                              ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#433: FILE: mm/shmem.c:168:
+	start = shmem_truncate_part (info->i_direct, SHMEM_NR_DIRECT, index, &freed);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#441: FILE: mm/shmem.c:174:
+	last = base + ((info->max_index - SHMEM_NR_DIRECT + ENTRIES_PER_PAGE - 1) / ENTRIES_PER_PAGE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#451: FILE: mm/shmem.c:185:
+		start = shmem_truncate_part (*ptr, ENTRIES_PER_PAGE, start, &freed);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#460: FILE: mm/shmem.c:189:
+		free_page ((unsigned long)base);

WARNING:TYPO_SPELLING: 'allocted' may be misspelled - perhaps 'allocated'?
#476: FILE: mm/shmem.c:235:
+	if (IS_ERR(entry))	/* this had been allocted on page allocation */
 	                  	                 ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#503: FILE: mm/shmem.c:267:
+static struct page * shmem_getpage_locked(struct inode * inode, unsigned long idx)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#503: FILE: mm/shmem.c:267:
+static struct page * shmem_getpage_locked(struct inode * inode, unsigned long idx)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#512: FILE: mm/shmem.c:271:
+	struct page * page;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#526: FILE: mm/shmem.c:274:
+	page = find_lock_page(mapping, idx);;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#580: FILE: mm/shmem.c:327:
+	spin_unlock (&inode->i_sb->u.shmem_sb.stat_lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#587: FILE: mm/shmem.c:331:
+static int shmem_getpage(struct inode * inode, unsigned long idx, struct page **ptr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#589: FILE: mm/shmem.c:333:
+	struct address_space * mapping = inode->i_mapping;

CHECK:SPACING: No space is necessary after a cast
#593: FILE: mm/shmem.c:337:
+	if (inode->i_size <= (loff_t) idx * PAGE_CACHE_SIZE)

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#598: FILE: mm/shmem.c:342:
+		if (Page_Uptodate(*ptr))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#603: FILE: mm/shmem.c:347:
+	down (&inode->i_sem);

CHECK:SPACING: No space is necessary after a cast
#605: FILE: mm/shmem.c:349:
+	if (inode->i_size < (loff_t) idx * PAGE_CACHE_SIZE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#608: FILE: mm/shmem.c:352:
+	if (IS_ERR (*ptr))

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#610: FILE: mm/shmem.c:354:
+	UnlockPage(*ptr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#611: FILE: mm/shmem.c:355:
+	up (&inode->i_sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#614: FILE: mm/shmem.c:358:
+	up (&inode->i_sem);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#625: FILE: mm/shmem.c:369:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#625: FILE: mm/shmem.c:369:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#627: FILE: mm/shmem.c:371:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: mm/shmem.c:373:
+	struct inode * inode = vma->vm_file->f_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#650: FILE: mm/shmem.c:397:
+void shmem_lock(struct file * file, int lock)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: mm/shmem.c:399:
+	struct inode * inode = file->f_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#653: FILE: mm/shmem.c:400:
+	struct shmem_inode_info * info = &inode->u.shmem_i;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#654: FILE: mm/shmem.c:401:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#677: FILE: mm/shmem.c:423:
+static int shmem_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#677: FILE: mm/shmem.c:423:
+static int shmem_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#679: FILE: mm/shmem.c:425:
+	struct vm_operations_struct * ops;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#679: FILE: mm/shmem.c:425:
+	struct vm_operations_struct * ops;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#707: FILE: mm/shmem.c:484:
+shmem_file_write(struct file *file,const char *buf,size_t count,loff_t *ppos)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#707: FILE: mm/shmem.c:484:
+shmem_file_write(struct file *file,const char *buf,size_t count,loff_t *ppos)
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#707: FILE: mm/shmem.c:484:
+shmem_file_write(struct file *file,const char *buf,size_t count,loff_t *ppos)
                                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: mm/shmem.c:486:
+^Istruct inode^I*inode = file->f_dentry->d_inode; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#717: FILE: mm/shmem.c:494:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#754: FILE: mm/shmem.c:531:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#766: FILE: mm/shmem.c:543:
+		offset = (pos & (PAGE_CACHE_SIZE -1)); /* Within page */
 		                                 ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#780: FILE: mm/shmem.c:557:
+		{ volatile unsigned char dummy;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#782: FILE: mm/shmem.c:559:
+			__get_user(dummy, buf+bytes-1);
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#782: FILE: mm/shmem.c:559:
+			__get_user(dummy, buf+bytes-1);
 			                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#791: FILE: mm/shmem.c:568:
+		if (!PageLocked(page)) {
+			PAGE_BUG(page);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#797: FILE: mm/shmem.c:574:
+		status = copy_from_user(kaddr+offset, buf, bytes);
 		                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: mm/shmem.c:586:
+^I^I^Iif (pos > inode->i_size) $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#814: FILE: mm/shmem.c:591:
+
+		}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#838: FILE: mm/shmem.c:615:
+static void do_shmem_file_read(struct file * filp, loff_t *ppos, read_descriptor_t * desc)
                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#838: FILE: mm/shmem.c:615:
+static void do_shmem_file_read(struct file * filp, loff_t *ppos, read_descriptor_t * desc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#838: FILE: mm/shmem.c:615:
+static void do_shmem_file_read(struct file * filp, loff_t *ppos, read_descriptor_t * desc)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#864: FILE: mm/shmem.c:641:
+		if ((desc->error = shmem_getpage(inode, index, &page)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping->i_mmap_shared"
#867: FILE: mm/shmem.c:644:
+		if (mapping->i_mmap_shared != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: mm/shmem.c:661:
+^I$

CHECK:SPACING: No space is necessary after a cast
#888: FILE: mm/shmem.c:665:
+	*ppos = ((loff_t) index << PAGE_CACHE_SHIFT) + offset;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#892: FILE: mm/shmem.c:669:
+static ssize_t shmem_file_read(struct file * filp, char * buf, size_t count, loff_t *ppos)
                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#892: FILE: mm/shmem.c:669:
+static ssize_t shmem_file_read(struct file * filp, char * buf, size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#892: FILE: mm/shmem.c:669:
+static ssize_t shmem_file_read(struct file * filp, char * buf, size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#907: FILE: mm/shmem.c:684:
+			do_shmem_file_read(filp, ppos, &desc);
 			                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#962: FILE: mm/shmem.c:838:
+static int shmem_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#962: FILE: mm/shmem.c:838:
+static int shmem_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#979: FILE: mm/shmem.c:846:
+	error = shmem_mknod(dir, dentry, S_IFLNK | S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#986: FILE: mm/shmem.c:853:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1008: FILE: mm/shmem.c:875:
+	struct page * page;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1014: FILE: mm/shmem.c:881:
+	res = vfs_readlink(dentry,buffer,buflen, kmap(page));
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1014: FILE: mm/shmem.c:881:
+	res = vfs_readlink(dentry,buffer,buflen, kmap(page));
 	                                ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1020: FILE: mm/shmem.c:887:
+static int shmem_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                       ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1022: FILE: mm/shmem.c:889:
+	struct page * page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1024: FILE: mm/shmem.c:891:
+	int res = shmem_getpage(dentry->d_inode, 0, &page);
+	if (res)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1027: FILE: mm/shmem.c:894:
+	res = vfs_follow_link(nd, kmap(page));
 	                      ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1039: FILE: mm/shmem.c:910:
+		if (!strcmp(this_char,"size")) {
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1044: FILE: mm/shmem.c:914:
+			size = memparse(value,&value);
 			                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1044: FILE: mm/shmem.c:914:
+			size = memparse(value,&value);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1048: FILE: mm/shmem.c:918:
+		} else if (!strcmp(this_char,"nr_blocks")) {
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1051: FILE: mm/shmem.c:921:
+			*blocks = memparse(value,&value);
 			                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1051: FILE: mm/shmem.c:921:
+			*blocks = memparse(value,&value);
 			                         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1058: FILE: mm/shmem.c:927:
+			*inodes = memparse(value,&value);
 			                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1058: FILE: mm/shmem.c:927:
+			*inodes = memparse(value,&value);
 			                         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1070: FILE: mm/shmem.c:943:
+static int shmem_remount_fs (struct super_block *sb, int *flags, char *data)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1077: FILE: mm/shmem.c:950:
+	if (shmem_parse_options (data, NULL, &max_blocks, &max_inodes))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1109: FILE: mm/shmem.c:982:
+		printk(KERN_ERR "tmpfs invalid option\n");

WARNING:INDENTED_LABEL: labels should not be indented
#1163: FILE: mm/shmem.c:1014:
+	mmap:	shmem_mmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1165: FILE: mm/shmem.c:1016:
+	read:	shmem_file_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1165: FILE: mm/shmem.c:1016:
+	read:	shmem_file_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1166: FILE: mm/shmem.c:1017:
+	write:	shmem_file_write
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1166: FILE: mm/shmem.c:1017:
+	write:	shmem_file_write

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1174: FILE: mm/shmem.c:1025:
+static struct inode_operations shmem_symlink_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#1175: FILE: mm/shmem.c:1026:
+	truncate:	shmem_truncate,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1177: FILE: mm/shmem.c:1028:
+	readlink:	shmem_readlink,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#1177: FILE: mm/shmem.c:1028:
+	readlink:	shmem_readlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1178: FILE: mm/shmem.c:1029:
+	follow_link:	shmem_follow_link,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1178: FILE: mm/shmem.c:1029:
+	follow_link:	shmem_follow_link,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1193: FILE: mm/shmem.c:1044:
+	symlink:	shmem_symlink,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1193: FILE: mm/shmem.c:1044:
+	symlink:	shmem_symlink,

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1215: FILE: mm/shmem.c:1061:
+static struct vm_operations_struct shmem_vm_ops = {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1224: FILE: mm/shmem.c:1070:
+static DECLARE_FSTYPE(tmpfs_fs_type, "tmpfs", shmem_read_super, FS_LITTER|FS_NOMOUNT);
                                                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1232: FILE: mm/shmem.c:1078:
+	if ((error = register_filesystem(&tmpfs_fs_type))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1233: FILE: mm/shmem.c:1079:
+		printk (KERN_ERR "Could not register tmpfs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1233: FILE: mm/shmem.c:1079:
+		printk (KERN_ERR "Could not register tmpfs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1239: FILE: mm/shmem.c:1084:
+		printk (KERN_ERR "Could not register shm fs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1239: FILE: mm/shmem.c:1084:
+		printk (KERN_ERR "Could not register shm fs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1244: FILE: mm/shmem.c:1087:
+	devfs_mk_dir (NULL, "shm", NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1250: FILE: mm/shmem.c:1091:
+		printk (KERN_ERR "could not kern_mount tmpfs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1250: FILE: mm/shmem.c:1091:
+		printk (KERN_ERR "could not kern_mount tmpfs\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1296: FILE: mm/shmem.c:1253:
+EXPORT_SYMBOL(shmem_file_setup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000552284.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 53 warnings, 20 checks, 1196 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000552284.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
