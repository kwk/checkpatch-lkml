WARNING:TYPO_SPELLING: 'funtions' may be misspelled - perhaps 'functions'?
#31: 
only wraps long lines and removes spaces before opening braces of funtions.
                                                                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#50: FILE: drivers/pci/hotplug/ibmphp_core.c:63:
+			 * tables don't provide default info for empty slots */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: drivers/pci/hotplug/ibmphp_core.c:75:
+static inline int get_cur_bus_info(struct slot **sl) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#67: FILE: drivers/pci/hotplug/ibmphp_core.c:81:
+^Idebug("revision = %x\n", slot_cur->ctrl->revision);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: drivers/pci/hotplug/ibmphp_core.c:83:
+^Iif (READ_BUS_STATUS(slot_cur->ctrl)) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: drivers/pci/hotplug/ibmphp_core.c:97:
+	debug("busstatus = %x, bus_speed = %x, bus_mode = %x\n",
+			slot_cur->busstatus,

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: drivers/pci/hotplug/ibmphp_core.c:108:
+ ^Irc = ibmphp_hpc_readslot(*sl, READ_ALLSTAT, NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: drivers/pci/hotplug/ibmphp_core.c:108:
+ ^Irc = ibmphp_hpc_readslot(*sl, READ_ALLSTAT, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: drivers/pci/hotplug/ibmphp_core.c:108:
+ ^Irc = ibmphp_hpc_readslot(*sl, READ_ALLSTAT, NULL);$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#153: FILE: drivers/pci/hotplug/ibmphp_core.c:159:
+				(*cur_slot)->irq[i] = IO_APIC_get_PCI_irq_vector((int) (*cur_slot)->bus,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#153: FILE: drivers/pci/hotplug/ibmphp_core.c:159:
+				(*cur_slot)->irq[i] = IO_APIC_get_PCI_irq_vector((int) (*cur_slot)->bus,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/pci/hotplug/ibmphp_core.c:160:
+						(int) (*cur_slot)->device, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: drivers/pci/hotplug/ibmphp_core.c:163:
+				debug("(*cur_slot)->irq[0] = %x\n",
+						(*cur_slot)->irq[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: drivers/pci/hotplug/ibmphp_core.c:165:
+				debug("(*cur_slot)->irq[1] = %x\n",
+						(*cur_slot)->irq[1]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: drivers/pci/hotplug/ibmphp_core.c:167:
+				debug("(*cur_slot)->irq[2] = %x\n",
+						(*cur_slot)->irq[2]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/pci/hotplug/ibmphp_core.c:169:
+				debug("(*cur_slot)->irq[3] = %x\n",
+						(*cur_slot)->irq[3]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: drivers/pci/hotplug/ibmphp_core.c:172:
+				debug("rtable->exlusive_irqs = %x\n",
+					rtable->exclusive_irqs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/pci/hotplug/ibmphp_core.c:174:
+				debug("rtable->slots[loop].irq[0].bitmap = %x\n",
+					rtable->slots[loop].irq[0].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: drivers/pci/hotplug/ibmphp_core.c:176:
+				debug("rtable->slots[loop].irq[1].bitmap = %x\n",
+					rtable->slots[loop].irq[1].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: drivers/pci/hotplug/ibmphp_core.c:178:
+				debug("rtable->slots[loop].irq[2].bitmap = %x\n",
+					rtable->slots[loop].irq[2].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: drivers/pci/hotplug/ibmphp_core.c:180:
+				debug("rtable->slots[loop].irq[3].bitmap = %x\n",
+					rtable->slots[loop].irq[3].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/pci/hotplug/ibmphp_core.c:183:
+				debug("rtable->slots[loop].irq[0].link = %x\n",
+					rtable->slots[loop].irq[0].link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: drivers/pci/hotplug/ibmphp_core.c:185:
+				debug("rtable->slots[loop].irq[1].link = %x\n",
+					rtable->slots[loop].irq[1].link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: drivers/pci/hotplug/ibmphp_core.c:187:
+				debug("rtable->slots[loop].irq[2].link = %x\n",
+					rtable->slots[loop].irq[2].link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: drivers/pci/hotplug/ibmphp_core.c:189:
+				debug("rtable->slots[loop].irq[3].link = %x\n",
+					rtable->slots[loop].irq[3].link);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_attention_status', this function's name, in a string
#262: FILE: drivers/pci/hotplug/ibmphp_core.c:240:
+	debug("set_attention_status - Entry hotplug_slot[%lx] value[%x]\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: drivers/pci/hotplug/ibmphp_core.c:241:
+	debug("set_attention_status - Entry hotplug_slot[%lx] value[%x]\n",
+			(ulong) hotplug_slot, value);

CHECK:SPACING: No space is necessary after a cast
#263: FILE: drivers/pci/hotplug/ibmphp_core.c:241:
+			(ulong) hotplug_slot, value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: drivers/pci/hotplug/ibmphp_core.c:259:
+			err("set_attention_status - Error : invalid input [%x]\n",
+					value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: drivers/pci/hotplug/ibmphp_core.c:278:
+static int get_attention_status(struct hotplug_slot *hotplug_slot, u8 * value)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_attention_status', this function's name, in a string
#298: FILE: drivers/pci/hotplug/ibmphp_core.c:284:
+	debug("get_attention_status - Entry hotplug_slot[%lx] pvalue[%lx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: drivers/pci/hotplug/ibmphp_core.c:285:
+	debug("get_attention_status - Entry hotplug_slot[%lx] pvalue[%lx]\n",
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#299: FILE: drivers/pci/hotplug/ibmphp_core.c:285:
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#308: FILE: drivers/pci/hotplug/ibmphp_core.c:291:
+			memcpy((void *) &myslot, (void *) pslot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: drivers/pci/hotplug/ibmphp_core.c:292:
+			memcpy((void *) &myslot, (void *) pslot,
+						sizeof(struct slot));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/pci/hotplug/ibmphp_core.c:294:
+			rc = ibmphp_hpc_readslot(pslot, READ_SLOTSTATUS,
+						&(myslot.status));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around myslot.status
#311: FILE: drivers/pci/hotplug/ibmphp_core.c:294:
+						&(myslot.status));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/pci/hotplug/ibmphp_core.c:297:
+				rc = ibmphp_hpc_readslot(pslot,
+						READ_EXTSLOTSTATUS,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around myslot.ext_status
#316: FILE: drivers/pci/hotplug/ibmphp_core.c:298:
+						&(myslot.ext_status));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: drivers/pci/hotplug/ibmphp_core.c:301:
+				*value = SLOT_ATTN(myslot.status,
+						myslot.ext_status);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: drivers/pci/hotplug/ibmphp_core.c:310:
+static int get_latch_status(struct hotplug_slot *hotplug_slot, u8 * value)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_latch_status', this function's name, in a string
#339: FILE: drivers/pci/hotplug/ibmphp_core.c:316:
+	debug("get_latch_status - Entry hotplug_slot[%lx] pvalue[%lx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: drivers/pci/hotplug/ibmphp_core.c:317:
+	debug("get_latch_status - Entry hotplug_slot[%lx] pvalue[%lx]\n",
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#340: FILE: drivers/pci/hotplug/ibmphp_core.c:317:
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#347: FILE: drivers/pci/hotplug/ibmphp_core.c:322:
+			memcpy((void *) &myslot, (void *) pslot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/pci/hotplug/ibmphp_core.c:323:
+			memcpy((void *) &myslot, (void *) pslot,
+						sizeof(struct slot));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: drivers/pci/hotplug/ibmphp_core.c:325:
+			rc = ibmphp_hpc_readslot(pslot, READ_SLOTSTATUS,
+						&(myslot.status));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around myslot.status
#350: FILE: drivers/pci/hotplug/ibmphp_core.c:325:
+						&(myslot.status));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_latch_status', this function's name, in a string
#360: FILE: drivers/pci/hotplug/ibmphp_core.c:332:
+	debug("get_latch_status - Exit rc[%d] rc[%x] value[%x]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: drivers/pci/hotplug/ibmphp_core.c:333:
+	debug("get_latch_status - Exit rc[%d] rc[%x] value[%x]\n",
+			rc, rc, *value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#367: FILE: drivers/pci/hotplug/ibmphp_core.c:338:
+static int get_power_status(struct hotplug_slot *hotplug_slot, u8 * value)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_power_status', this function's name, in a string
#375: FILE: drivers/pci/hotplug/ibmphp_core.c:344:
+	debug("get_power_status - Entry hotplug_slot[%lx] pvalue[%lx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/pci/hotplug/ibmphp_core.c:345:
+	debug("get_power_status - Entry hotplug_slot[%lx] pvalue[%lx]\n",
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#376: FILE: drivers/pci/hotplug/ibmphp_core.c:345:
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#383: FILE: drivers/pci/hotplug/ibmphp_core.c:350:
+			memcpy((void *) &myslot, (void *) pslot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: drivers/pci/hotplug/ibmphp_core.c:351:
+			memcpy((void *) &myslot, (void *) pslot,
+						sizeof(struct slot));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: drivers/pci/hotplug/ibmphp_core.c:353:
+			rc = ibmphp_hpc_readslot(pslot, READ_SLOTSTATUS,
+						&(myslot.status));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around myslot.status
#386: FILE: drivers/pci/hotplug/ibmphp_core.c:353:
+						&(myslot.status));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_power_status', this function's name, in a string
#396: FILE: drivers/pci/hotplug/ibmphp_core.c:360:
+	debug("get_power_status - Exit rc[%d] rc[%x] value[%x]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: drivers/pci/hotplug/ibmphp_core.c:361:
+	debug("get_power_status - Exit rc[%d] rc[%x] value[%x]\n",
+			rc, rc, *value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: drivers/pci/hotplug/ibmphp_core.c:365:
+static int get_adapter_present(struct hotplug_slot *hotplug_slot, u8 * value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: drivers/pci/hotplug/ibmphp_core.c:373:
+	debug("get_adapter_status - Entry hotplug_slot[%lx] pvalue[%lx]\n",
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#412: FILE: drivers/pci/hotplug/ibmphp_core.c:373:
+					(ulong) hotplug_slot, (ulong) value);

CHECK:SPACING: No space is necessary after a cast
#419: FILE: drivers/pci/hotplug/ibmphp_core.c:378:
+			memcpy((void *) &myslot, (void *) pslot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: drivers/pci/hotplug/ibmphp_core.c:379:
+			memcpy((void *) &myslot, (void *) pslot,
+						sizeof(struct slot));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: drivers/pci/hotplug/ibmphp_core.c:381:
+			rc = ibmphp_hpc_readslot(pslot, READ_SLOTSTATUS,
+						&(myslot.status));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around myslot.status
#422: FILE: drivers/pci/hotplug/ibmphp_core.c:381:
+						&(myslot.status));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#447: FILE: drivers/pci/hotplug/ibmphp_core.c:403:
+	debug("%s - Entry hotplug_slot[%p] pvalue[%p]\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: drivers/pci/hotplug/ibmphp_core.c:404:
+	debug("%s - Entry hotplug_slot[%p] pvalue[%p]\n", __FUNCTION__,
 		hotplug_slot, value);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#462: FILE: drivers/pci/hotplug/ibmphp_core.c:433:
+	debug("%s - Exit rc[%d] value[%x]\n", __FUNCTION__, rc, *value);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#474: FILE: drivers/pci/hotplug/ibmphp_core.c:443:
+	debug("%s - Entry hotplug_slot[%p] pvalue[%p]\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: drivers/pci/hotplug/ibmphp_core.c:444:
+	debug("%s - Entry hotplug_slot[%p] pvalue[%p]\n", __FUNCTION__,
 		hotplug_slot, value);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#495: FILE: drivers/pci/hotplug/ibmphp_core.c:479:
+	debug("%s - Exit rc[%d] value[%x]\n", __FUNCTION__, rc, *value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: drivers/pci/hotplug/ibmphp_core.c:566:
+		debug("BEFORE GETTING SLOT STATUS, slot # %x\n",
+							slot_cur->number);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: drivers/pci/hotplug/ibmphp_core.c:569:
+			if (get_ctrl_revision(slot_cur,
+						&slot_cur->ctrl->revision))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: drivers/pci/hotplug/ibmphp_core.c:573:
+^I^I^Iif (get_cur_bus_info(&slot_cur)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: drivers/pci/hotplug/ibmphp_core.c:590:
+^I^Iif ((SLOT_PWRGD(slot_cur->status)) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: drivers/pci/hotplug/ibmphp_core.c:591:
+^I^I    !(SLOT_PRESENT(slot_cur->status)) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#686: FILE: drivers/pci/hotplug/ibmphp_core.c:632:
+^I^I^Iif (!(SLOT_PWRGD(slot_cur->status)) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#687: FILE: drivers/pci/hotplug/ibmphp_core.c:633:
+^I^I^I     (SLOT_PRESENT(slot_cur->status)) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: drivers/pci/hotplug/ibmphp_core.c:633:
+			if (!(SLOT_PWRGD(slot_cur->status)) && 
+			     (SLOT_PRESENT(slot_cur->status)) && 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#695: FILE: drivers/pci/hotplug/ibmphp_core.c:638:
+^I^I^Iif ((SLOT_PWRGD(slot_cur->status)) && $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*info)...) over kmalloc(sizeof(struct hotplug_slot_info)...)
#724: FILE: drivers/pci/hotplug/ibmphp_core.c:662:
+	info = kmalloc(sizeof(struct hotplug_slot_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: drivers/pci/hotplug/ibmphp_core.c:670:
+	info->attention_status = SLOT_ATTN(slot_cur->status,
+						slot_cur->ext_status);

ERROR:CODE_INDENT: code indent should use tabs where possible
#739: FILE: drivers/pci/hotplug/ibmphp_core.c:672:
+        if (!SLOT_PRESENT(slot_cur->status)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: drivers/pci/hotplug/ibmphp_core.c:672:
+        if (!SLOT_PRESENT(slot_cur->status)) {$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#747: FILE: drivers/pci/hotplug/ibmphp_core.c:678:
+/*		get_max_adapter_speed_1(slot_cur->hotplug_slot,
+					&info->max_adapter_speed_status, 0); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#747: FILE: drivers/pci/hotplug/ibmphp_core.c:678:
+					&info->max_adapter_speed_status, 0); */

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#753: FILE: drivers/pci/hotplug/ibmphp_core.c:684:
 	switch (bus_speed) {
+		case BUS_SPEED_33:
[...]
+		case BUS_SPEED_66:
[...]
+		case BUS_SPEED_100:
+		case BUS_SPEED_133:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: drivers/pci/hotplug/ibmphp_core.c:688:
+^I^I^Iif (mode == BUS_MODE_PCIX) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'func_cur->busno == busno'
#815: FILE: drivers/pci/hotplug/ibmphp_core.c:728:
+				if ((func_cur->busno == busno) &&
+						(func_cur->device == device) &&
+						(func_cur->function == function))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'func_cur->device == device'
#815: FILE: drivers/pci/hotplug/ibmphp_core.c:728:
+				if ((func_cur->busno == busno) &&
+						(func_cur->device == device) &&
+						(func_cur->function == function))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'func_cur->function == function'
#815: FILE: drivers/pci/hotplug/ibmphp_core.c:728:
+				if ((func_cur->busno == busno) &&
+						(func_cur->device == device) &&
+						(func_cur->function == function))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/pci/hotplug/ibmphp_core.c:729:
+				if ((func_cur->busno == busno) &&
+						(func_cur->device == device) &&

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#833: FILE: drivers/pci/hotplug/ibmphp_core.c:750:
+	debug("%s -- enter\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#843: FILE: drivers/pci/hotplug/ibmphp_core.c:756:
+	debug("%s -- exit\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: drivers/pci/hotplug/ibmphp_core.c:766:
+	debug("func->device = %x, func->function = %x\n",
+					func->device, func->function);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#877: FILE: drivers/pci/hotplug/ibmphp_core.c:792:
+		err("%s - out of memory\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#886: FILE: drivers/pci/hotplug/ibmphp_core.c:798:
+		err("%s - out of memory\n", __FUNCTION__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l != 0x0000'
#897: FILE: drivers/pci/hotplug/ibmphp_core.c:806:
+		if (!pci_read_config_word(dev, PCI_VENDOR_ID, &l) &&
+					(l != 0x0000) && (l != 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'l != 0xffff'
#897: FILE: drivers/pci/hotplug/ibmphp_core.c:806:
+		if (!pci_read_config_word(dev, PCI_VENDOR_ID, &l) &&
+					(l != 0x0000) && (l != 0xffff)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: drivers/pci/hotplug/ibmphp_core.c:807:
+		if (!pci_read_config_word(dev, PCI_VENDOR_ID, &l) &&
+					(l != 0x0000) && (l != 0xffff)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#900: FILE: drivers/pci/hotplug/ibmphp_core.c:809:
+			debug("%s - Inside bus_struture_fixup()\n",
+							__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#900: FILE: drivers/pci/hotplug/ibmphp_core.c:809:
+							__FUNCTION__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#922: FILE: drivers/pci/hotplug/ibmphp_core.c:827:
+	int flag = 0;	/* this is to make sure we don't double scan the bus,
+					for bridged devices primarily */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#922: FILE: drivers/pci/hotplug/ibmphp_core.c:827:
+					for bridged devices primarily */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: drivers/pci/hotplug/ibmphp_core.c:833:
+		func->dev = pci_find_slot(func->busno,
+				PCI_DEVFN(func->device, func->function));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/pci/hotplug/ibmphp_core.c:841:
+		num = pci_scan_slot(bus,
+				PCI_DEVFN(func->device, func->function));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: drivers/pci/hotplug/ibmphp_core.c:846:
+		func->dev = pci_find_slot(func->busno,
+				PCI_DEVFN(func->device, func->function));

CHECK:SPACING: No space is necessary after a cast
#957: FILE: drivers/pci/hotplug/ibmphp_core.c:854:
+		child = (struct pci_bus *) pci_add_new_bus(func->dev->bus,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#968: FILE: drivers/pci/hotplug/ibmphp_core.c:865:
+static int is_bus_empty(struct slot * slot_cur)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#986: FILE: drivers/pci/hotplug/ibmphp_core.c:883:
+		if (SLOT_PRESENT(tmp_slot->status) &&
+					SLOT_PWRGD(tmp_slot->status))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#995: FILE: drivers/pci/hotplug/ibmphp_core.c:896:
+static int set_bus(struct slot * slot_cur)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1006: FILE: drivers/pci/hotplug/ibmphp_core.c:907:
+	debug("%s - entry slot # %d\n", __FUNCTION__, slot_cur->number);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slot_cur->supported_speed >= BUS_SPEED_66'
#1023: FILE: drivers/pci/hotplug/ibmphp_core.c:920:
+				if ((slot_cur->supported_speed >= BUS_SPEED_66) &&
+						(slot_cur->supported_bus_mode == BUS_MODE_PCIX))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'slot_cur->supported_bus_mode == BUS_MODE_PCIX'
#1023: FILE: drivers/pci/hotplug/ibmphp_core.c:920:
+				if ((slot_cur->supported_speed >= BUS_SPEED_66) &&
+						(slot_cur->supported_bus_mode == BUS_MODE_PCIX))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: drivers/pci/hotplug/ibmphp_core.c:921:
+				if ((slot_cur->supported_speed >= BUS_SPEED_66) &&
+						(slot_cur->supported_bus_mode == BUS_MODE_PCIX))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1037: FILE: drivers/pci/hotplug/ibmphp_core.c:955:
+					ibmphp_hpc_writeslot(slot_cur,
+							HPC_BUS_100PCIXMODE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1054: FILE: drivers/pci/hotplug/ibmphp_core.c:968:
+		debug("setting bus speed for slot %d, cmd %x\n",
+						slot_cur->number, cmd);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1072: FILE: drivers/pci/hotplug/ibmphp_core.c:982:
+	debug("%s -Exit\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: drivers/pci/hotplug/ibmphp_core.c:1005:
+		if ((SLOT_PWRGD(tmp_slot->status)) &&
+					!(SLOT_CONNECT(tmp_slot->status)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1148: FILE: drivers/pci/hotplug/ibmphp_core.c:1063:
+	if ((rc = validate(slot_cur, ENABLE))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: drivers/pci/hotplug/ibmphp_core.c:1079:
+	debug("the current bus speed right after set_bus = %x\n",
+					slot_cur->bus_on->current_speed);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: drivers/pci/hotplug/ibmphp_core.c:1107:
+		if ((SLOT_POWER(slot_cur->status)) &&
+					!(SLOT_PWRGD(slot_cur->status)))

WARNING:SPLIT_STRING: quoted string split across lines
#1219: FILE: drivers/pci/hotplug/ibmphp_core.c:1111:
+			err("bus speed mismatch occurred.  please check "
+				"current bus speed and card capability\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1223: FILE: drivers/pci/hotplug/ibmphp_core.c:1115:
+			err("bus mode mismatch occurred.  please check "
+				"current bus mode and card capability\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: drivers/pci/hotplug/ibmphp_core.c:1125:
+	debug("the current bus speed right after power_on = %x\n",
+					slot_cur->bus_on->current_speed);

WARNING:SPLIT_STRING: quoted string split across lines
#1257: FILE: drivers/pci/hotplug/ibmphp_core.c:1139:
+		err("bus speed mismatch occurred.  please check current bus "
+					"speed and card capability\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1265: FILE: drivers/pci/hotplug/ibmphp_core.c:1144:
+	 * but just in case, for paranoia sake */

CHECK:SPACING: No space is necessary after a cast
#1272: FILE: drivers/pci/hotplug/ibmphp_core.c:1150:
+	slot_cur->func = (struct pci_func *) kmalloc(sizeof(struct pci_func), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1272: FILE: drivers/pci/hotplug/ibmphp_core.c:1150:
+	slot_cur->func = (struct pci_func *) kmalloc(sizeof(struct pci_func), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*slot_cur->func)...) over kmalloc(sizeof(struct pci_func)...)
#1272: FILE: drivers/pci/hotplug/ibmphp_core.c:1150:
+	slot_cur->func = (struct pci_func *) kmalloc(sizeof(struct pci_func), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: drivers/pci/hotplug/ibmphp_core.c:1165:
+	debug("b4 configure_card, slot_cur->bus = %x, slot_cur->device = %x\n",
+					slot_cur->bus, slot_cur->device);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1299: FILE: drivers/pci/hotplug/ibmphp_core.c:1170:
+		 * just remove references */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1311: FILE: drivers/pci/hotplug/ibmphp_core.c:1181:
+		tmp_func = ibm_slot_find(slot_cur->bus, slot_cur->func->device,
+							function++);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1378: FILE: drivers/pci/hotplug/ibmphp_core.c:1242:
+^Idebug("DISABLING SLOT...\n"); $

CHECK:SPACING: No space is necessary after a cast
#1398: FILE: drivers/pci/hotplug/ibmphp_core.c:1261:
+		slot_cur->func = (struct pci_func *) kmalloc(sizeof(struct pci_func), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1398: FILE: drivers/pci/hotplug/ibmphp_core.c:1261:
+		slot_cur->func = (struct pci_func *) kmalloc(sizeof(struct pci_func), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*slot_cur->func)...) over kmalloc(sizeof(struct pci_func)...)
#1398: FILE: drivers/pci/hotplug/ibmphp_core.c:1261:
+		slot_cur->func = (struct pci_func *) kmalloc(sizeof(struct pci_func), GFP_KERNEL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1537: FILE: drivers/pci/hotplug/ibmphp_core.c:1384:
+	if ((rc = ibmphp_access_ebda()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1543: FILE: drivers/pci/hotplug/ibmphp_core.c:1388:
+	if ((rc = ibmphp_rsrc_init()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1552: FILE: drivers/pci/hotplug/ibmphp_core.c:1394:
+	if ((rc = ibmphp_register_pci()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1564: FILE: drivers/pci/hotplug/ibmphp_core.c:1403:
+	if ((rc = ibmphp_hpc_start_poll_thread())) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1564: FILE: drivers/pci/hotplug/ibmphp_core.c:1403:
+	if ((rc = ibmphp_hpc_start_poll_thread())) {
 		goto error;
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 35 warnings, 84 checks, 1516 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217118.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
