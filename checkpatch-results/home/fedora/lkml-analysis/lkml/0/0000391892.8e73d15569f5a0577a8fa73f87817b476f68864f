WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> function to check stack depth" patch? The CONFIG_DEBUG_STACKOVERFLOW thing 

WARNING:TYPO_SPELLING: 'rigth' may be misspelled - perhaps 'right'?
#37: 
> make it a bit more aggressive (rigth now it does:
                                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'attatched' may be misspelled - perhaps 'attached'?
#51: 
scaling to large numbers of tasks). I've split them out attatched, should 
                                                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'attatchments' may be misspelled - perhaps 'attachments'?
#56: 
PS. Linus, I think the attatchments will work for you as they're text/plain,
                       ^^^^^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#105: FILE: include/asm-i386/page.h:7:
+#define PAGE_SIZE      (1UL << PAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#107: FILE: include/asm-i386/page.h:9:
+#define PAGE_SIZE      (1 << PAGE_SHIFT)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/asm-i386/thread_info.h:61:
+#define THREAD_ORDER 1 $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: include/asm-i386/thread_info.h:68:
+^I.task^I^I= &tsk,         ^I\$

CHECK:SPACING: No space is necessary after a cast
#145: FILE: include/asm-i386/thread_info.h:84:
+#define alloc_thread_info() ((struct thread_info *) __get_free_pages(GFP_KERNEL,THREAD_ORDER))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: include/asm-i386/thread_info.h:84:
+#define alloc_thread_info() ((struct thread_info *) __get_free_pages(GFP_KERNEL,THREAD_ORDER))
                                                                                ^

CHECK:SPACING: No space is necessary after a cast
#146: FILE: include/asm-i386/thread_info.h:85:
+#define free_thread_info(ti) free_pages((unsigned long) (ti), THREAD_ORDER)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#155: FILE: include/asm-i386/thread_info.h:93:
+	__asm__("andl %%esp,%0; ":"=r" (ti) : "0" (~(THREAD_SIZE - 1)));
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#173: FILE: include/asm-i386/thread_info.h:103:
+	movl $-THREAD_SIZE, reg; \
 	      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#178: FILE: include/asm-i386/thread_info.h:107:
+#define GET_THREAD_INFO_WITH_ESP(reg) \
+	andl $-THREAD_SIZE, reg

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#179: FILE: include/asm-i386/thread_info.h:108:
+	andl $-THREAD_SIZE, reg
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: include/asm-i386/thread_info.h:111:
+^I $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: arch/i386/kernel/apic.c:1043:
+struct pt_regs * IRQHANDLER(smp_apic_timer_interrupt(struct pt_regs* regs));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#215: FILE: arch/i386/kernel/apic.c:1043:
+struct pt_regs * IRQHANDLER(smp_apic_timer_interrupt(struct pt_regs* regs));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#215: FILE: arch/i386/kernel/apic.c:1043:
+struct pt_regs * IRQHANDLER(smp_apic_timer_interrupt(struct pt_regs* regs));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#216: FILE: arch/i386/kernel/apic.c:1044:
+struct pt_regs * smp_apic_timer_interrupt(struct pt_regs* regs)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#216: FILE: arch/i386/kernel/apic.c:1044:
+struct pt_regs * smp_apic_timer_interrupt(struct pt_regs* regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: arch/i386/kernel/apic.c:1072:
+struct pt_regs * IRQHANDLER(smp_spurious_interrupt(struct pt_regs* regs));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#234: FILE: arch/i386/kernel/apic.c:1072:
+struct pt_regs * IRQHANDLER(smp_spurious_interrupt(struct pt_regs* regs));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: arch/i386/kernel/apic.c:1073:
+struct pt_regs * smp_spurious_interrupt(struct pt_regs* regs)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#235: FILE: arch/i386/kernel/apic.c:1073:
+struct pt_regs * smp_spurious_interrupt(struct pt_regs* regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: arch/i386/kernel/apic.c:1098:
+struct pt_regs * IRQHANDLER(smp_error_interrupt(struct pt_regs* regs));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#251: FILE: arch/i386/kernel/apic.c:1098:
+struct pt_regs * IRQHANDLER(smp_error_interrupt(struct pt_regs* regs));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: arch/i386/kernel/apic.c:1099:
+struct pt_regs * smp_error_interrupt(struct pt_regs* regs)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#252: FILE: arch/i386/kernel/apic.c:1099:
+struct pt_regs * smp_error_interrupt(struct pt_regs* regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#272: FILE: arch/i386/kernel/cpu/mcheck/p4.c:64:
+struct pt_regs * IRQHANDLER(smp_thermal_interrupt(struct pt_regs* regs));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#272: FILE: arch/i386/kernel/cpu/mcheck/p4.c:64:
+struct pt_regs * IRQHANDLER(smp_thermal_interrupt(struct pt_regs* regs));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#272: FILE: arch/i386/kernel/cpu/mcheck/p4.c:64:
+struct pt_regs * IRQHANDLER(smp_thermal_interrupt(struct pt_regs* regs));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: arch/i386/kernel/cpu/mcheck/p4.c:65:
+struct pt_regs * smp_thermal_interrupt(struct pt_regs* regs)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#273: FILE: arch/i386/kernel/cpu/mcheck/p4.c:65:
+struct pt_regs * smp_thermal_interrupt(struct pt_regs* regs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: arch/i386/kernel/entry.S:403:
+# They take the pt_regs arg and move it from the normal place on the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: arch/i386/kernel/entry.S:404:
+# stack to %eax.  Any handler function can retrieve it using regparm(1). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: arch/i386/kernel/entry.S:405:
+# The handlers are expected to return the stack to switch back to in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: arch/i386/kernel/entry.S:406:
+# the same register. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: arch/i386/kernel/entry.S:413:
+.macro SWITCH_TO_IRQSTACK $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: arch/i386/kernel/entry.S:420:
+^Ileal (THREAD_SIZE-4)(%ecx),%esi; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: arch/i386/kernel/entry.S:441:
+.macro RESTORE_FROM_IRQSTACK $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#372: FILE: arch/i386/kernel/init_task.c:17:
+union thread_union init_irq_union

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init_task") over __attribute__((__section__(".data.init_task")))
#373: FILE: arch/i386/kernel/init_task.c:18:
+	__attribute__((__section__(".data.init_task")));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#375: FILE: arch/i386/kernel/init_task.c:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#387: FILE: arch/i386/kernel/irq.c:314:
+struct pt_regs * IRQHANDLER(do_IRQ(struct pt_regs *regs));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#387: FILE: arch/i386/kernel/irq.c:314:
+struct pt_regs * IRQHANDLER(do_IRQ(struct pt_regs *regs));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: arch/i386/kernel/irq.c:315:
+struct pt_regs * do_IRQ(struct pt_regs *regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#438: FILE: arch/i386/kernel/smp.c:308:
+struct pt_regs * IRQHANDLER(smp_invalidate_interrupt(struct pt_regs *regs));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#438: FILE: arch/i386/kernel/smp.c:308:
+struct pt_regs * IRQHANDLER(smp_invalidate_interrupt(struct pt_regs *regs));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#439: FILE: arch/i386/kernel/smp.c:309:
+struct pt_regs * smp_invalidate_interrupt(struct pt_regs *regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#456: FILE: arch/i386/kernel/smp.c:603:
+struct pt_regs * IRQHANDLER(smp_reschedule_interrupt(struct pt_regs *regs));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#456: FILE: arch/i386/kernel/smp.c:603:
+struct pt_regs * IRQHANDLER(smp_reschedule_interrupt(struct pt_regs *regs));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#457: FILE: arch/i386/kernel/smp.c:604:
+struct pt_regs * smp_reschedule_interrupt(struct pt_regs *regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#464: FILE: arch/i386/kernel/smp.c:610:
+struct pt_regs * IRQHANDLER(smp_call_function_interrupt(struct pt_regs *regs));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#465: FILE: arch/i386/kernel/smp.c:611:
+struct pt_regs * smp_call_function_interrupt(struct pt_regs *regs)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#484: FILE: arch/i386/kernel/smpboot.c:75:
+extern union thread_union init_irq_union;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#486: FILE: arch/i386/kernel/smpboot.c:77:
+union thread_union *irq_stacks[NR_CPUS] __cacheline_aligned =
+	{ &init_irq_union, };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#507: FILE: arch/i386/kernel/smpboot.c:790:
+					/* interrupts are not preemptable */
 					                      ^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#516: FILE: arch/i386/kernel/smpboot.c:799:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#536: FILE: include/asm-i386/linkage.h:6:
+#define IRQHANDLER(x)	x __attribute__((regparm(1)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#580: FILE: include/asm-i386/thread_info.h:69:
+#define INIT_THREAD_INFO(tsk)				\
+{							\
+	.task		= &tsk,         		\
+	.exec_domain	= &default_exec_domain,		\
+	.flags		= 0,				\
+	.cpu		= 0,				\
+	.preempt_count	= 1,				\
+	.addr_limit	= KERNEL_DS,			\
+	.irq_stack	= &init_irq_union.thread_info,	\
+	.restart_block = {				\
+		.fn = do_no_restart_syscall,		\
+	}						\
 }

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#582: FILE: include/asm-i386/thread_info.h:71:
+^I.task^I^I= &tsk,         ^I^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: arch/i386/Kconfig:1775:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: arch/i386/Kconfig:1776:
+^I  Some older versions of gcc don't handle the -p option correctly.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: arch/i386/Kconfig:1779:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: arch/i386/Kconfig:1781:
+^I  you have this turned on, you need to fix gcc.  The Redhat 2.96 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: arch/i386/Kconfig:1782:
+^I  version and gcc-3.x seem to work.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: arch/i386/Kconfig:1783:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: arch/i386/kernel/entry.S:660:
+1:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: arch/i386/kernel/entry.S:663:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: arch/i386/kernel/entry.S:686:
+^Iaddl^I$8,%esp $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init_task") over __attribute__((__section__(".data.init_task")))
#741: FILE: arch/i386/kernel/init_task.c:22:
+	__attribute__((__section__(".data.init_task")));

WARNING:TYPO_SPELLING: 'panicing' may be misspelled - perhaps 'panicking'?
#756: FILE: arch/i386/kernel/process.c:164:
+	int panicing = ((esp&(THREAD_SIZE-1)) <= STACK_PANIC);
 	    ^^^^^^^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#756: FILE: arch/i386/kernel/process.c:164:
+	int panicing = ((esp&(THREAD_SIZE-1)) <= STACK_PANIC);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#756: FILE: arch/i386/kernel/process.c:164:
+	int panicing = ((esp&(THREAD_SIZE-1)) <= STACK_PANIC);
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: arch/i386/kernel/process.c:166:
+^Iprintk( "esp: 0x%lx masked: 0x%lx STACK_PANIC:0x%x %d %d\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#758: FILE: arch/i386/kernel/process.c:166:
+	printk( "esp: 0x%lx masked: 0x%lx STACK_PANIC:0x%x %d %d\n", 

ERROR:SPACING: space prohibited after that open parenthesis '('
#758: FILE: arch/i386/kernel/process.c:166:
+	printk( "esp: 0x%lx masked: 0x%lx STACK_PANIC:0x%x %d %d\n", 

WARNING:TYPO_SPELLING: 'panicing' may be misspelled - perhaps 'panicking'?
#759: FILE: arch/i386/kernel/process.c:167:
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );
 		                                                                                   ^^^^^^^^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#759: FILE: arch/i386/kernel/process.c:167:
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: arch/i386/kernel/process.c:167:
+	printk( "esp: 0x%lx masked: 0x%lx STACK_PANIC:0x%x %d %d\n", 
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#759: FILE: arch/i386/kernel/process.c:167:
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );
 		         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#759: FILE: arch/i386/kernel/process.c:167:
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );
 		                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#759: FILE: arch/i386/kernel/process.c:167:
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );
 		                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#759: FILE: arch/i386/kernel/process.c:167:
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );
 		                                                            ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#759: FILE: arch/i386/kernel/process.c:167:
+		esp, (esp&(THREAD_SIZE-1)), STACK_PANIC, (((esp&(THREAD_SIZE-1)) <= STACK_PANIC)), panicing );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: arch/i386/kernel/process.c:168:
+^I$

WARNING:TYPO_SPELLING: 'panicing' may be misspelled - perhaps 'panicking'?
#761: FILE: arch/i386/kernel/process.c:169:
+	if (panicing)
 	    ^^^^^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#765: FILE: arch/i386/kernel/process.c:173:
+	printk("esp: %p\n", (void*)esp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#765: FILE: arch/i386/kernel/process.c:173:
+	printk("esp: %p\n", (void*)esp);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#766: FILE: arch/i386/kernel/process.c:174:
+	show_trace((void*)esp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: arch/i386/kernel/process.c:175:
+^I$

WARNING:TYPO_SPELLING: 'panicing' may be misspelled - perhaps 'panicking'?
#768: FILE: arch/i386/kernel/process.c:176:
+	if (panicing)
 	    ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#772: FILE: arch/i386/kernel/process.c:180:
+asmlinkage void show_regs(struct pt_regs * regs)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#784: FILE: include/asm-i386/thread_info.h:67:
+#define STACK_WARN		((THREAD_SIZE)>>1)
                   		              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#828: FILE: include/asm-i386/thread_info.h:70:
+#define STACK_WARN              ((THREAD_SIZE)>>1)
                                               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000391892.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 23 warnings, 19 checks, 639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000391892.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
