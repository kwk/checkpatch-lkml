WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: drivers/char/dcdbas.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#85: FILE: drivers/char/dcdbas.c:38:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#87: FILE: drivers/char/dcdbas.c:40:
+#include <asm/uaccess.h>

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#129: FILE: drivers/char/dcdbas.c:82:
+	if (tvm_dma_buf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#133: FILE: drivers/char/dcdbas.c:86:
+		__FUNCTION__, tvm_dma_buf_phys_addr, tvm_dma_buf_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: drivers/char/dcdbas.c:89:
+	dma_free_coherent(&dcdbas_pdev.dev, tvm_dma_buf_size, tvm_dma_buf,
+		tvm_dma_buf_handle);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size != 0'
#156: FILE: drivers/char/dcdbas.c:109:
+		if ((size != 0) && (tvm_dma_buf == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tvm_dma_buf == NULL'
#156: FILE: drivers/char/dcdbas.c:109:
+		if ((size != 0) && (tvm_dma_buf == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#156: FILE: drivers/char/dcdbas.c:109:
+		if ((size != 0) && (tvm_dma_buf == NULL)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#158: FILE: drivers/char/dcdbas.c:111:
+				"%s: corruption detected\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#168: FILE: drivers/char/dcdbas.c:121:
+	if (buf == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#169: FILE: drivers/char/dcdbas.c:122:
+	if (buf == NULL) {
+		dev_info(&dcdbas_pdev.dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: drivers/char/dcdbas.c:123:
+		dev_info(&dcdbas_pdev.dev,
+			"failed to allocate memory of size %u for TVM\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#185: FILE: drivers/char/dcdbas.c:138:
+		__FUNCTION__, tvm_dma_buf_phys_addr, tvm_dma_buf_size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#205: FILE: drivers/char/dcdbas.c:158:
+	dev_dbg(&dcdbas_pdev.dev, "%s: size: %u\n", __FUNCTION__, tmr->size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#216: FILE: drivers/char/dcdbas.c:169:
+	if (tvm_dma_buf == NULL ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/char/dcdbas.c:192:
+			memcpy(tmr->buffer + ESM_APM_CMD_HEADER_SIZE,
+				tvm_dma_buf + sizeof(struct apm_cmd),

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#267: FILE: drivers/char/dcdbas.c:220:
+	dev_dbg(&dcdbas_pdev.dev, "%s: size: %u\n", __FUNCTION__, tmw->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: drivers/char/dcdbas.c:247:
+			memcpy(tvm_dma_buf + sizeof(struct apm_cmd),
+				tmw->buffer + ESM_APM_CMD_HEADER_SIZE,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#329: FILE: drivers/char/dcdbas.c:282:
+	dev_dbg(&dcdbas_pdev.dev, "%s: size: %u\n", __FUNCTION__, tma->size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#360: FILE: drivers/char/dcdbas.c:313:
+		__FUNCTION__, thca->action_bitmap, thca->smi_type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: drivers/char/dcdbas.c:351:
+			outb(index,
+				(CMOS_BASE_PORT + CMOS_PAGE2_INDEX_PORT_PIIX4));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: drivers/char/dcdbas.c:353:
+			outb(*data++,
+				(CMOS_BASE_PORT + CMOS_PAGE2_DATA_PORT_PIIX4));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#481: FILE: drivers/char/dcdbas.c:434:
+	if (tvm_dma_buf == NULL ||

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#484: FILE: drivers/char/dcdbas.c:437:
+			__FUNCTION__);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#496: FILE: drivers/char/dcdbas.c:449:
+		*((s16 *)&apm_cmd->parameters.shortreq.parm[0]) = (s16)0;
 		                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#505: FILE: drivers/char/dcdbas.c:458:
+		*((s16 *)&apm_cmd->parameters.shortreq.parm[0]) = (s16)20;
 		                                       ^^^^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#521: FILE: drivers/char/dcdbas.c:474:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#533: FILE: drivers/char/dcdbas.c:486:
+		__FUNCTION__, ci_cmd->command_address, ci_cmd->command_code,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#541: FILE: drivers/char/dcdbas.c:494:
+			__FUNCTION__);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#561: FILE: drivers/char/dcdbas.c:514:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#583: FILE: drivers/char/dcdbas.c:536:
+		__FUNCTION__, ireq->hdr.req_type);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#631: FILE: drivers/char/dcdbas.c:584:
+			__FUNCTION__);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#641: FILE: drivers/char/dcdbas.c:594:
+ * @filp: file object for device
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#645: FILE: drivers/char/dcdbas.c:598:
+static int dcdbas_do_ioctl(struct file *filp, unsigned int cmd,
                                         ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#671: FILE: drivers/char/dcdbas.c:624:
+	if ((kbuf = kmalloc(size, GFP_KERNEL)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: drivers/char/dcdbas.c:626:
+		dev_info(&dcdbas_pdev.dev,
+			"failed to allocate ioctl memory size %lu\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#684: FILE: drivers/char/dcdbas.c:637:
+	if ((ret = dcdbas_dispatch_ioctl(kbuf)) != 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#699: FILE: drivers/char/dcdbas.c:652:
+ * @filp: file object for device
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#703: FILE: drivers/char/dcdbas.c:656:
+static int dcdbas_ioctl(struct inode *inode, struct file *filp,
                                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#706: FILE: drivers/char/dcdbas.c:659:
+	return dcdbas_do_ioctl(filp, cmd, arg);
 	                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#711: FILE: drivers/char/dcdbas.c:664:
+ * @filp: file object for device
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#715: FILE: drivers/char/dcdbas.c:668:
+static long dcdbas_compat_ioctl(struct file *filp, unsigned int cmd,
                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#718: FILE: drivers/char/dcdbas.c:671:
+	return dcdbas_do_ioctl(filp, cmd, arg);
 	                       ^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#730: FILE: drivers/char/dcdbas.c:683:
+	static unsigned int notify_cnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#739: FILE: drivers/char/dcdbas.c:692:
+				printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#741: FILE: drivers/char/dcdbas.c:694:
+					"Please wait for shutdown "
+					"action to complete...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#757: FILE: drivers/char/dcdbas.c:710:
+static struct file_operations dcdbas_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: drivers/char/dcdbas.c:740:
+		dev_warn(&dcdbas_pdev.dev,
+			"register_chrdev failed with error %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: drivers/char/dcdbas.c:749:
+	dev_info(&dcdbas_pdev.dev, "%s (version %s)\n",
+		DRIVER_DESCRIPTION, DRIVER_VERSION);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#820: FILE: drivers/char/dcdbas.c:773:
+MODULE_DESCRIPTION(DRIVER_DESCRIPTION" (version "DRIVER_VERSION")");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#829: FILE: drivers/char/dcdbas.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#927: FILE: drivers/char/dcdbas.h:99:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#932: FILE: drivers/char/dcdbas.h:104:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#937: FILE: drivers/char/dcdbas.h:109:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#943: FILE: drivers/char/dcdbas.h:115:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#948: FILE: drivers/char/dcdbas.h:120:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#957: FILE: drivers/char/dcdbas.h:129:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#967: FILE: drivers/char/dcdbas.h:139:
+	} __attribute__ ((packed)) data;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#968: FILE: drivers/char/dcdbas.h:140:
+} __attribute__ ((packed));

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#976: FILE: drivers/char/dcdbas.h:148:
+			u8 parm[MAX_SYSMGMT_SHORTCMD_PARMBUF_LEN];
 			   ^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#977: FILE: drivers/char/dcdbas.h:149:
+		} __attribute__ ((packed)) shortreq;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#984: FILE: drivers/char/dcdbas.h:156:
+			} __attribute__ ((packed))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#986: FILE: drivers/char/dcdbas.h:158:
+		} __attribute__ ((packed)) longreq;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#987: FILE: drivers/char/dcdbas.h:159:
+	} __attribute__ ((packed)) parameters;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#988: FILE: drivers/char/dcdbas.h:160:
+} __attribute__ ((packed));

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1039: FILE: MAINTAINERS:697:
+P:	Doug Warzecha
+M:	Douglas_Warzecha@dell.com

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 46 warnings, 18 checks, 981 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
