WARNING:TYPO_SPELLING: 'unconditionnally' may be misspelled - perhaps 'unconditionally'?
#30: 
unconditionnally as soon as the count drops to zero, forcefully
^^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#59: FILE: drivers/block/floppy.c:3907:
+ * broken */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#62: FILE: drivers/block/floppy.c:3910:
+	int drive=DRIVE(dev);
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#63: FILE: drivers/block/floppy.c:3911:
+	int drive=DRIVE(dev);
+	return (UTESTF(FD_DCL_SEEN) &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#73: FILE: drivers/block/floppy.c:3921:
+	can_trust_media_change: floppy_can_trust_media_change
 	                      ^

WARNING:INDENTED_LABEL: labels should not be indented
#73: FILE: drivers/block/floppy.c:3921:
+	can_trust_media_change: floppy_can_trust_media_change

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#90: FILE: fs/block_dev.c:355:
+static void __bdput(struct block_device *bdev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: fs/block_dev.c:356:
+    int shouldDrop =$

CHECK:CAMELCASE: Avoid CamelCase: <shouldDrop>
#91: FILE: fs/block_dev.c:356:
+    int shouldDrop =

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: fs/block_dev.c:359:
+    if(shouldDrop) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#94: FILE: fs/block_dev.c:359:
+    if(shouldDrop) {
+	    if (bdev->bd_openers)

ERROR:SPACING: space required before the open parenthesis '('
#94: FILE: fs/block_dev.c:359:
+    if(shouldDrop) {

WARNING:TABSTOP: Statements should start on a tabstop
#95: FILE: fs/block_dev.c:360:
+	    if (bdev->bd_openers)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#95: FILE: fs/block_dev.c:360:
+	    if (bdev->bd_openers)
+		    BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: fs/block_dev.c:361:
+		    BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: fs/block_dev.c:363:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: fs/block_dev.c:364:
+    spin_unlock(&bdev_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: fs/block_dev.c:365:
+    if(shouldDrop) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#100: FILE: fs/block_dev.c:365:
+    if(shouldDrop) {
+	    if (bdev->bd_openers)

ERROR:SPACING: space required before the open parenthesis '('
#100: FILE: fs/block_dev.c:365:
+    if(shouldDrop) {

WARNING:TABSTOP: Statements should start on a tabstop
#101: FILE: fs/block_dev.c:366:
+	    if (bdev->bd_openers)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#101: FILE: fs/block_dev.c:366:
+	    if (bdev->bd_openers)
+		    BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#102: FILE: fs/block_dev.c:367:
+		    BUG();

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#103: FILE: fs/block_dev.c:368:
+	    iput(bdev->bd_inode);
 	    ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: fs/block_dev.c:370:
+    }$

ERROR:SPACING: space required before the open parenthesis '('
#135: FILE: fs/block_dev.c:415:
+		if(inode != bdev->bd_inode) {

ERROR:SPACING: space required before the open parenthesis '('
#151: FILE: fs/block_dev.c:630:
+		if(!bdev->bd_op->can_trust_media_change ||

CHECK:BIT_MACRO: Prefer using the BIT macro
#176: FILE: include/linux/fd.h:200:
+#define FD_DCL_SEEN (1 << FD_DCL_SEEN)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACING: Unnecessary space before function pointer arguments
#187: FILE: include/linux/fs.h:796:
+	int (*can_trust_media_change) (kdev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#187: FILE: include/linux/fs.h:796:
+	int (*can_trust_media_change) (kdev_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000504048.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 21 warnings, 2 checks, 129 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000504048.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
