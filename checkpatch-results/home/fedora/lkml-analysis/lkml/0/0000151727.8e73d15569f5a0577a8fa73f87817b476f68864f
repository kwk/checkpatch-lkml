WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
map_vm_area work early, but just for a few calls so that the dynamic per-cpu

ERROR:SPACING: space required after that ';' (ctx:VxV)
#55: FILE: include/linux/slab.h:79:
+#define SLAB_READY ({malloc_sizes[0].cs_cachep != NULL;})
                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "malloc_sizes[0].cs_cachep"
#55: FILE: include/linux/slab.h:79:
+#define SLAB_READY ({malloc_sizes[0].cs_cachep != NULL;})

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: mm/vmalloc.c:163:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#87: FILE: mm/vmalloc.c:170:
+static int early_vmareas_idx = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: mm/vmalloc.c:199:
+ ^Iif (likely(SLAB_READY)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: mm/vmalloc.c:199:
+ ^Iif (likely(SLAB_READY)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: mm/vmalloc.c:199:
+ ^Iif (likely(SLAB_READY)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: mm/vmalloc.c:200:
+ ^I^Iarea = kmalloc(sizeof(*area), GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#111: FILE: mm/vmalloc.c:200:
+ ^I^Iarea = kmalloc(sizeof(*area), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: mm/vmalloc.c:200:
+ ^I^Iarea = kmalloc(sizeof(*area), GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: mm/vmalloc.c:201:
+ ^I^Iif (unlikely(!area))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: mm/vmalloc.c:201:
+ ^I^Iif (unlikely(!area))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: mm/vmalloc.c:201:
+ ^I^Iif (unlikely(!area))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: mm/vmalloc.c:202:
+ ^I^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: mm/vmalloc.c:202:
+ ^I^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: mm/vmalloc.c:202:
+ ^I^I^Ireturn NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: mm/vmalloc.c:203:
+ ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#114: FILE: mm/vmalloc.c:203:
+ ^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: mm/vmalloc.c:203:
+ ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: mm/vmalloc.c:204:
+ ^I^Iif (early_vmareas_idx < NR_EARLY_VMAREAS) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#115: FILE: mm/vmalloc.c:204:
+ ^I^Iif (early_vmareas_idx < NR_EARLY_VMAREAS) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: mm/vmalloc.c:204:
+ ^I^Iif (early_vmareas_idx < NR_EARLY_VMAREAS) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#115: FILE: mm/vmalloc.c:204:
+ 		if (early_vmareas_idx < NR_EARLY_VMAREAS) {
[...]
+ 		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: mm/vmalloc.c:205:
+ ^I^I^Iarea = &early_vmareas[early_vmareas_idx++];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: mm/vmalloc.c:205:
+ ^I^I^Iarea = &early_vmareas[early_vmareas_idx++];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: mm/vmalloc.c:205:
+ ^I^I^Iarea = &early_vmareas[early_vmareas_idx++];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: mm/vmalloc.c:206:
+ ^I^I^Iflags |= VM_EARLY;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#117: FILE: mm/vmalloc.c:206:
+ ^I^I^Iflags |= VM_EARLY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: mm/vmalloc.c:206:
+ ^I^I^Iflags |= VM_EARLY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: mm/vmalloc.c:207:
+ ^I^I} else$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#118: FILE: mm/vmalloc.c:207:
+ ^I^I} else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: mm/vmalloc.c:207:
+ ^I^I} else$

CHECK:BRACES: Unbalanced braces around else statement
#118: FILE: mm/vmalloc.c:207:
+ 		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: mm/vmalloc.c:208:
+ ^I^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: mm/vmalloc.c:208:
+ ^I^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: mm/vmalloc.c:208:
+ ^I^I^Ireturn NULL;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151727.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 21 warnings, 3 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151727.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
