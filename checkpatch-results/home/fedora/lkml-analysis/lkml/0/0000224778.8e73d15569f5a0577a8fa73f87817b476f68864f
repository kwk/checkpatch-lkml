WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#53: FILE: arch/ppc/Kconfig:512:
+config CPCI690
+	bool "Force-CPCI690"
+	help
+	  Select CPCI690 if configuring a Force CPCI690 cPCI board.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: arch/ppc/boot/simple/misc-cpci690.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#91: FILE: arch/ppc/boot/simple/misc-cpci690.c:2:
+ * arch/ppc/boot/simple/misc-cpci690.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: arch/ppc/boot/simple/misc-cpci690.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: arch/ppc/platforms/cpci690.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#811: FILE: arch/ppc/platforms/cpci690.c:2:
+ * arch/ppc/platforms/cpci690.c

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#864: FILE: arch/ppc/platforms/cpci690.c:55:
+^I^I * ^I   A   B   C   D$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#873: FILE: arch/ppc/platforms/cpci690.c:64:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#873: FILE: arch/ppc/platforms/cpci690.c:64:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#877: FILE: arch/ppc/platforms/cpci690.c:68:
+^I^I * ^I   A   B   C   D$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#902: FILE: arch/ppc/platforms/cpci690.c:93:
+	return cpci690_get_bus_speed() * cpu_7xx[hid1]/2;
 	                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#918: FILE: arch/ppc/platforms/cpci690.c:109:
+		switch (in_8((u8 *) (cpci690_br_base +

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#921: FILE: arch/ppc/platforms/cpci690.c:112:
+			board_size = 256*MB;
 			                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#924: FILE: arch/ppc/platforms/cpci690.c:115:
+			board_size = 512*MB;
 			                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#927: FILE: arch/ppc/platforms/cpci690.c:118:
+			board_size = 768*MB;
 			                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#930: FILE: arch/ppc/platforms/cpci690.c:121:
+			board_size = 1*GB;
 			              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#933: FILE: arch/ppc/platforms/cpci690.c:124:
+			board_size = 1*GB + 512*MB;
 			              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#933: FILE: arch/ppc/platforms/cpci690.c:124:
+			board_size = 1*GB + 512*MB;
 			                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#936: FILE: arch/ppc/platforms/cpci690.c:127:
+			board_size = 2*GB;
 			              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: arch/ppc/platforms/cpci690.c:134:
+		mem_ctlr_size =  mv64x60_get_mem_size(CONFIG_MV64X60_NEW_BASE,
+			MV64x60_TYPE_GT64260A);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#947: FILE: arch/ppc/platforms/cpci690.c:138:
+			printk(KERN_WARNING "Board register & memory controller"

WARNING:SPLIT_STRING: quoted string split across lines
#948: FILE: arch/ppc/platforms/cpci690.c:139:
+			printk(KERN_WARNING "Board register & memory controller"
+				"mem size disagree (board reg: 0x%lx, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#948: FILE: arch/ppc/platforms/cpci690.c:139:
+			printk(KERN_WARNING "Board register & memory controller"
+				"mem size disagree (board reg: 0x%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#949: FILE: arch/ppc/platforms/cpci690.c:140:
+				"mem size disagree (board reg: 0x%lx, "
+				"mem ctlr: 0x%lx)\n",

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#998: FILE: arch/ppc/platforms/cpci690.c:189:
+	for (i=0; i<MV64x60_CPU2MEM_WINDOWS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#998: FILE: arch/ppc/platforms/cpci690.c:189:
+	for (i=0; i<MV64x60_CPU2MEM_WINDOWS; i++) {
 	           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1019: FILE: arch/ppc/platforms/cpci690.c:210:
+        /* Lookup PCI host bridges */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1020: FILE: arch/ppc/platforms/cpci690.c:211:
+        if (mv64x60_init(&bh, &si))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: arch/ppc/platforms/cpci690.c:211:
+        if (mv64x60_init(&bh, &si))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1021: FILE: arch/ppc/platforms/cpci690.c:212:
+                printk(KERN_ERR "Bridge initialization failed.\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1021: FILE: arch/ppc/platforms/cpci690.c:212:
+                printk(KERN_ERR "Bridge initialization failed.\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1021: FILE: arch/ppc/platforms/cpci690.c:212:
+                printk(KERN_ERR "Bridge initialization failed.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1037: FILE: arch/ppc/platforms/cpci690.c:228:
+	bh.hose_b->last_busno = pciauto_bus_scan(bh.hose_b,
+		bh.hose_b->first_busno);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1040: FILE: arch/ppc/platforms/cpci690.c:231:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: arch/ppc/platforms/cpci690.c:238:
+	mv64x60_set_32bit_window(&bh, MV64x60_CPU2DEV_0_WIN, CPCI690_BR_BASE,
+		CPCI690_BR_SIZE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: arch/ppc/platforms/cpci690.c:243:
+	mv64x60_set_32bit_window(&bh, MV64x60_CPU2DEV_1_WIN, CPCI690_TODC_BASE,
+		CPCI690_TODC_SIZE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: arch/ppc/platforms/cpci690.c:246:
+	TODC_INIT(TODC_TYPE_MK48T35, 0, 0,
+			ioremap(CPCI690_TODC_BASE, CPCI690_TODC_SIZE), 8);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1058: FILE: arch/ppc/platforms/cpci690.c:249:
+	mv64x60_set_32bit_window(&bh, MV64x60_CPU2DEV_2_WIN, CPCI690_IPMI_BASE,
+		CPCI690_IPMI_SIZE, 0);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1061: FILE: arch/ppc/platforms/cpci690.c:252:
+	mv64x60_set_bits(&bh, MV64x60_PCI0_ARBITER_CNTL, (1<<31));
 	                                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1062: FILE: arch/ppc/platforms/cpci690.c:253:
+	mv64x60_set_bits(&bh, MV64x60_PCI1_ARBITER_CNTL, (1<<31));
 	                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1064: FILE: arch/ppc/platforms/cpci690.c:255:
+        mv64x60_set_bits(&bh, MV64x60_CPU_MASTER_CNTL, (1<<9)); /* Only 1 cpu */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: arch/ppc/platforms/cpci690.c:255:
+        mv64x60_set_bits(&bh, MV64x60_CPU_MASTER_CNTL, (1<<9)); /* Only 1 cpu */$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1064: FILE: arch/ppc/platforms/cpci690.c:255:
+        mv64x60_set_bits(&bh, MV64x60_CPU_MASTER_CNTL, (1<<9)); /* Only 1 cpu */
                                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: arch/ppc/platforms/cpci690.c:263:
+	mv64x60_clr_bits(&bh, MV64x60_TIMR_CNTR_0_3_CNTL,
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1072: FILE: arch/ppc/platforms/cpci690.c:263:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1072: FILE: arch/ppc/platforms/cpci690.c:263:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1072: FILE: arch/ppc/platforms/cpci690.c:263:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1072: FILE: arch/ppc/platforms/cpci690.c:263:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: arch/ppc/platforms/cpci690.c:265:
+	mv64x60_clr_bits(&bh, GT64260_TIMR_CNTR_4_7_CNTL,
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1074: FILE: arch/ppc/platforms/cpci690.c:265:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1074: FILE: arch/ppc/platforms/cpci690.c:265:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1074: FILE: arch/ppc/platforms/cpci690.c:265:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1074: FILE: arch/ppc/platforms/cpci690.c:265:
+			((1<<0) | (1<<8) | (1<<16) | (1<<24)));
 			                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1083: FILE: arch/ppc/platforms/cpci690.c:274:
+		((1<<24) | (1<<25) | (1<<26) | (1<<27) | \
 		   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1083: FILE: arch/ppc/platforms/cpci690.c:274:
+		((1<<24) | (1<<25) | (1<<26) | (1<<27) | \
 		             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1083: FILE: arch/ppc/platforms/cpci690.c:274:
+		((1<<24) | (1<<25) | (1<<26) | (1<<27) | \
 		                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1083: FILE: arch/ppc/platforms/cpci690.c:274:
+		((1<<24) | (1<<25) | (1<<26) | (1<<27) | \
 		                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1084: FILE: arch/ppc/platforms/cpci690.c:275:
+		 (1<<28) | (1<<29) | (1<<30) | (1<<31))
 		   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1084: FILE: arch/ppc/platforms/cpci690.c:275:
+		 (1<<28) | (1<<29) | (1<<30) | (1<<31))
 		             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1084: FILE: arch/ppc/platforms/cpci690.c:275:
+		 (1<<28) | (1<<29) | (1<<30) | (1<<31))
 		                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1084: FILE: arch/ppc/platforms/cpci690.c:275:
+		 (1<<28) | (1<<29) | (1<<30) | (1<<31))
 		                                 ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#1099: FILE: arch/ppc/platforms/cpci690.c:290:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#1115: FILE: arch/ppc/platforms/cpci690.c:306:
+			dd = (struct mpsc_pd_dd *) dev_get_drvdata(&pd->dev);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpci690_setup_arch', this function's name, in a string
#1134: FILE: arch/ppc/platforms/cpci690.c:325:
+		ppc_md.progress("cpci690_setup_arch: enter", 0);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <Root_RAM0>
#1137: FILE: arch/ppc/platforms/cpci690.c:328:
+		ROOT_DEV = Root_RAM0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: exactly one space required after that #ifdef
#1140: FILE: arch/ppc/platforms/cpci690.c:331:
+#ifdef   CONFIG_ROOT_NFS

CHECK:CAMELCASE: Avoid CamelCase: <Root_NFS>
#1141: FILE: arch/ppc/platforms/cpci690.c:332:
+		ROOT_DEV = Root_NFS;

CHECK:CAMELCASE: Avoid CamelCase: <Root_SDA2>
#1143: FILE: arch/ppc/platforms/cpci690.c:334:
+		ROOT_DEV = Root_SDA2;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpci690_setup_arch', this function's name, in a string
#1147: FILE: arch/ppc/platforms/cpci690.c:338:
+		ppc_md.progress("cpci690_setup_arch: Enabling L2 cache", 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpci690_setup_arch', this function's name, in a string
#1154: FILE: arch/ppc/platforms/cpci690.c:345:
+		ppc_md.progress("cpci690_setup_arch: Initializing bridge", 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpci690_setup_arch', this function's name, in a string
#1160: FILE: arch/ppc/platforms/cpci690.c:351:
+		ppc_md.progress("cpci690_setup_arch: bridge init complete", 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1162: FILE: arch/ppc/platforms/cpci690.c:353:
+	printk(KERN_INFO "%s %s port (C) 2003 MontaVista Software, Inc. "

WARNING:SPLIT_STRING: quoted string split across lines
#1163: FILE: arch/ppc/platforms/cpci690.c:354:
+	printk(KERN_INFO "%s %s port (C) 2003 MontaVista Software, Inc. "
+		"(source@mvista.com)\n", BOARD_VENDOR, BOARD_MACHINE);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpci690_setup_arch', this function's name, in a string
#1166: FILE: arch/ppc/platforms/cpci690.c:357:
+		ppc_md.progress("cpci690_setup_arch: exit", 0);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1169: FILE: arch/ppc/platforms/cpci690.c:360:
+	return;
+}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1179: FILE: arch/ppc/platforms/cpci690.c:370:
+	while (i != 0) i++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1192: FILE: arch/ppc/platforms/cpci690.c:383:
+	while (1);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1206: FILE: arch/ppc/platforms/cpci690.c:397:
+	seq_printf(m, "vendor\t\t: " BOARD_VENDOR "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1207: FILE: arch/ppc/platforms/cpci690.c:398:
+	seq_printf(m, "machine\t\t: " BOARD_MACHINE "\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1208: FILE: arch/ppc/platforms/cpci690.c:399:
+	seq_printf(m, "cpu MHz\t\t: %d\n", cpci690_get_cpu_speed()/1000/1000);
 	                                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1208: FILE: arch/ppc/platforms/cpci690.c:399:
+	seq_printf(m, "cpu MHz\t\t: %d\n", cpci690_get_cpu_speed()/1000/1000);
 	                                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1209: FILE: arch/ppc/platforms/cpci690.c:400:
+	seq_printf(m, "bus MHz\t\t: %d\n", cpci690_get_bus_speed()/1000/1000);
 	                                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1209: FILE: arch/ppc/platforms/cpci690.c:400:
+	seq_printf(m, "bus MHz\t\t: %d\n", cpci690_get_bus_speed()/1000/1000);
 	                                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1219: FILE: arch/ppc/platforms/cpci690.c:410:
+	freq = cpci690_get_bus_speed()/4;
 	                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1221: FILE: arch/ppc/platforms/cpci690.c:412:
+	printk(KERN_INFO "time_init: decrementer frequency = %lu.%.6lu MHz\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1222: FILE: arch/ppc/platforms/cpci690.c:413:
+	       freq/1000000, freq%1000000);
 	           ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1222: FILE: arch/ppc/platforms/cpci690.c:413:
+	       freq/1000000, freq%1000000);
 	                         ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#1228: FILE: arch/ppc/platforms/cpci690.c:419:
+	return;
+}

WARNING:INLINE: plain inline is preferred over __inline__
#1230: FILE: arch/ppc/platforms/cpci690.c:421:
+static __inline__ void

WARNING:MEMORY_BARRIER: memory barrier without comment
#1237: FILE: arch/ppc/platforms/cpci690.c:428:
+	mb();

WARNING:RETURN_VOID: void function return statements are not generally useful
#1243: FILE: arch/ppc/platforms/cpci690.c:434:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1250: FILE: arch/ppc/platforms/cpci690.c:441:
+	io_block_mapping(CONFIG_MV64X60_NEW_BASE, CONFIG_MV64X60_NEW_BASE,
+		128 * KB, _PAGE_IO);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1259: FILE: arch/ppc/platforms/cpci690.c:450:
+	initrd_start=initrd_end=0;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1259: FILE: arch/ppc/platforms/cpci690.c:450:
+	initrd_start=initrd_end=0;
 	                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1259: FILE: arch/ppc/platforms/cpci690.c:450:
+	initrd_start=initrd_end=0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1260: FILE: arch/ppc/platforms/cpci690.c:451:
+	initrd_below_start_ok=0;
 	                     ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#1302: FILE: arch/ppc/platforms/cpci690.c:493:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1307: FILE: arch/ppc/platforms/cpci690.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1308: FILE: arch/ppc/platforms/cpci690.h:2:
+ * arch/ppc/platforms/cpci690.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1333: FILE: arch/ppc/platforms/cpci690.h:27:
+typedef struct board_info {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 36 warnings, 50 checks, 1321 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
