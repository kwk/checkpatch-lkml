WARNING:TYPO_SPELLING: 'architechtures' may be misspelled - perhaps 'architectures'?
#33: 
This patch breaks all architechtures, but it's a good break and trivial
                      ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
to fix.  It removes the `RW_LOCK_BIAS' arg in include/linux/sched.h:INIT_MM().

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#107: FILE: include/linux/sched.h:244:
+	mmap_sem:	__RWSEM_INITIALIZER(name.mmap_sem), \
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#107: FILE: include/linux/sched.h:244:
+	mmap_sem:	__RWSEM_INITIALIZER(name.mmap_sem), \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: include/linux/rw_semaphore.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#115: FILE: include/linux/rw_semaphore.h:2:
+ * include/linux/rw_semaphore.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#151: FILE: include/linux/rw_semaphore.h:38:
+#define __RWSEM_INITIALIZER(_name)						\
+{										\
+	lock:		SPIN_LOCK_UNLOCKED,					\
+	nr_holders:	0,							\
+	writers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).writers_wait),	\
+	readers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).readers_wait),	\
+}

WARNING:INDENTED_LABEL: labels should not be indented
#153: FILE: include/linux/rw_semaphore.h:40:
+	lock:		SPIN_LOCK_UNLOCKED,					\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#155: FILE: include/linux/rw_semaphore.h:42:
+	writers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).writers_wait),	\
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#155: FILE: include/linux/rw_semaphore.h:42:
+	writers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).writers_wait),	\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#156: FILE: include/linux/rw_semaphore.h:43:
+	readers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).readers_wait),	\
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#156: FILE: include/linux/rw_semaphore.h:43:
+	readers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).readers_wait),	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#159: FILE: include/linux/rw_semaphore.h:46:
+#define DECLARE_RWSEM(name) \
+	struct rw_semaphore name = __RWSEM_INITIALIZER(name)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/rw_semaphore.h:49:
+extern void down_write_wait(struct rw_semaphore *sem);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/rw_semaphore.h:50:
+extern void down_read_wait(struct rw_semaphore *sem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/rw_semaphore.h:51:
+extern void rwsem_wake_up(wait_queue_head_t *wq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/rw_semaphore.h:55:
+extern void dump_rwsem(const char *msg, struct rw_semaphore *sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#187: FILE: include/linux/rw_semaphore.h:74:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#191: FILE: include/linux/rw_semaphore.h:78:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#202: FILE: include/linux/rw_semaphore.h:89:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#203: FILE: include/linux/rw_semaphore.h:90:
+	if (sem->nr_holders < 0 || waitqueue_active(&sem->writers_wait))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#206: FILE: include/linux/rw_semaphore.h:93:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#217: FILE: include/linux/rw_semaphore.h:104:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#219: FILE: include/linux/rw_semaphore.h:106:
+	if (waitqueue_active(&sem->writers_wait)) {
[...]
+	} else if (waitqueue_active(&sem->readers_wait)) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#219: FILE: include/linux/rw_semaphore.h:106:
+	if (waitqueue_active(&sem->writers_wait)) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#221: FILE: include/linux/rw_semaphore.h:108:
+	} else if (waitqueue_active(&sem->readers_wait)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#224: FILE: include/linux/rw_semaphore.h:111:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#236: FILE: include/linux/rw_semaphore.h:123:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#239: FILE: include/linux/rw_semaphore.h:126:
+		if (waitqueue_active(&sem->writers_wait))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#242: FILE: include/linux/rw_semaphore.h:129:
+	dump_rwsem(__FUNCTION__ " out", sem);

ERROR:SPACING: space prohibited after that open parenthesis '('
#461: FILE: arch/i386/kernel/semaphore.c:239:
+extern void FASTCALL( __write_lock_failed(rwlock_t *rw));

ERROR:SPACING: space prohibited after that open parenthesis '('
#462: FILE: arch/i386/kernel/semaphore.c:240:
+extern void FASTCALL( __read_lock_failed(rwlock_t *rw));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#462: FILE: arch/i386/kernel/semaphore.c:240:
+extern void FASTCALL( __read_lock_failed(rwlock_t *rw));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: arch/i386/kernel/semaphore.c:272:
+ * It's nicer to put these EXPORT statements near the site of definition,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: arch/i386/kernel/semaphore.c:273:
+ * but when gcc compiles an EXPORT_SYMBOL it leaves code generation in$

WARNING:TYPO_SPELLING: 'statments' may be misspelled - perhaps 'statements'?
#478: FILE: arch/i386/kernel/semaphore.c:274:
+ * the __ksymtab section.  So if one of the above global asm statments
                                                              ^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: arch/i386/kernel/semaphore.c:274:
+ * the __ksymtab section.  So if one of the above global asm statments$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: arch/i386/kernel/semaphore.c:275:
+ * comes next, it gets assembled into __ksymtab and things die horridly.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: arch/i386/kernel/semaphore.c:276:
+ * It's safer to put these here, unless we're sure that an EXPORT_SYMBOL$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: arch/i386/kernel/semaphore.c:277:
+ * is to be followed by a C function.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: arch/i386/kernel/semaphore.c:278:
+ */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#738: FILE: lib/rw_semaphore.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#739: FILE: lib/rw_semaphore.c:2:
+ * lib/rw_semaphore.c

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#805: FILE: lib/rw_semaphore.c:68:
+		printk("%d: %s\n", current->pid, msg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#806: FILE: lib/rw_semaphore.c:69:
+		printk("  nr_h:%d wqa_w:%d wqa_r:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: lib/rw_semaphore.c:70:
+		printk("  nr_h:%d wqa_w:%d wqa_r:%d\n",
+			sem->nr_holders,

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#808: FILE: lib/rw_semaphore.c:71:
+			waitqueue_active(&sem->writers_wait),

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#809: FILE: lib/rw_semaphore.c:72:
+			waitqueue_active(&sem->readers_wait));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#813: FILE: lib/rw_semaphore.c:76:
+EXPORT_SYMBOL(dump_rwsem);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#825: FILE: lib/rw_semaphore.c:88:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#835: FILE: lib/rw_semaphore.c:98:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#849: FILE: lib/rw_semaphore.c:112:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#856: FILE: lib/rw_semaphore.c:119:
+	} while (sem->nr_holders < 0 || waitqueue_active(&sem->writers_wait));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#858: FILE: lib/rw_semaphore.c:121:
+	dump_rwsem(__FUNCTION__ " out", sem);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: lib/Makefile:15:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#905: FILE: include/linux/sched.h:242:
+	mmap_sem:	__RWSEM_INITIALIZER(name.mmap_sem), \
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#905: FILE: include/linux/sched.h:242:
+	mmap_sem:	__RWSEM_INITIALIZER(name.mmap_sem), \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#912: FILE: include/linux/rw_semaphore.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#913: FILE: include/linux/rw_semaphore.h:2:
+ * include/linux/rw_semaphore.h

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#949: FILE: include/linux/rw_semaphore.h:38:
+#define __RWSEM_INITIALIZER(_name)						\
+{										\
+	lock:		SPIN_LOCK_UNLOCKED,					\
+	nr_holders:	0,							\
+	writers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).writers_wait),	\
+	readers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).readers_wait),	\
+}

WARNING:INDENTED_LABEL: labels should not be indented
#951: FILE: include/linux/rw_semaphore.h:40:
+	lock:		SPIN_LOCK_UNLOCKED,					\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#953: FILE: include/linux/rw_semaphore.h:42:
+	writers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).writers_wait),	\
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#953: FILE: include/linux/rw_semaphore.h:42:
+	writers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).writers_wait),	\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#954: FILE: include/linux/rw_semaphore.h:43:
+	readers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).readers_wait),	\
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#954: FILE: include/linux/rw_semaphore.h:43:
+	readers_wait:	__WAIT_QUEUE_HEAD_INITIALIZER((_name).readers_wait),	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#957: FILE: include/linux/rw_semaphore.h:46:
+#define DECLARE_RWSEM(name) \
+	struct rw_semaphore name = __RWSEM_INITIALIZER(name)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#960: FILE: include/linux/rw_semaphore.h:49:
+extern void down_write_wait(struct rw_semaphore *sem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#961: FILE: include/linux/rw_semaphore.h:50:
+extern void down_read_wait(struct rw_semaphore *sem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#962: FILE: include/linux/rw_semaphore.h:51:
+extern void rwsem_wake_up(wait_queue_head_t *wq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#966: FILE: include/linux/rw_semaphore.h:55:
+extern void dump_rwsem(const char *msg, struct rw_semaphore *sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#985: FILE: include/linux/rw_semaphore.h:74:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#989: FILE: include/linux/rw_semaphore.h:78:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1000: FILE: include/linux/rw_semaphore.h:89:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1001: FILE: include/linux/rw_semaphore.h:90:
+	if (sem->nr_holders < 0 || waitqueue_active(&sem->writers_wait))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1004: FILE: include/linux/rw_semaphore.h:93:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1015: FILE: include/linux/rw_semaphore.h:104:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1017: FILE: include/linux/rw_semaphore.h:106:
+	if (waitqueue_active(&sem->writers_wait)) {
[...]
+	} else if (waitqueue_active(&sem->readers_wait)) {
[...]

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1017: FILE: include/linux/rw_semaphore.h:106:
+	if (waitqueue_active(&sem->writers_wait)) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1019: FILE: include/linux/rw_semaphore.h:108:
+	} else if (waitqueue_active(&sem->readers_wait)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1022: FILE: include/linux/rw_semaphore.h:111:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1034: FILE: include/linux/rw_semaphore.h:123:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1037: FILE: include/linux/rw_semaphore.h:126:
+		if (waitqueue_active(&sem->writers_wait))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1040: FILE: include/linux/rw_semaphore.h:129:
+	dump_rwsem(__FUNCTION__ " out", sem);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1259: FILE: arch/i386/kernel/semaphore.c:239:
+extern void FASTCALL( __write_lock_failed(rwlock_t *rw));

ERROR:SPACING: space prohibited after that open parenthesis '('
#1260: FILE: arch/i386/kernel/semaphore.c:240:
+extern void FASTCALL( __read_lock_failed(rwlock_t *rw));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1260: FILE: arch/i386/kernel/semaphore.c:240:
+extern void FASTCALL( __read_lock_failed(rwlock_t *rw));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1274: FILE: arch/i386/kernel/semaphore.c:272:
+ * It's nicer to put these EXPORT statements near the site of definition,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: arch/i386/kernel/semaphore.c:273:
+ * but when gcc compiles an EXPORT_SYMBOL it leaves code generation in$

WARNING:TYPO_SPELLING: 'statments' may be misspelled - perhaps 'statements'?
#1276: FILE: arch/i386/kernel/semaphore.c:274:
+ * the __ksymtab section.  So if one of the above global asm statments
                                                              ^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: arch/i386/kernel/semaphore.c:274:
+ * the __ksymtab section.  So if one of the above global asm statments$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1277: FILE: arch/i386/kernel/semaphore.c:275:
+ * comes next, it gets assembled into __ksymtab and things die horridly.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: arch/i386/kernel/semaphore.c:276:
+ * It's safer to put these here, unless we're sure that an EXPORT_SYMBOL$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1279: FILE: arch/i386/kernel/semaphore.c:277:
+ * is to be followed by a C function.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1280: FILE: arch/i386/kernel/semaphore.c:278:
+ */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1536: FILE: lib/rw_semaphore.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1537: FILE: lib/rw_semaphore.c:2:
+ * lib/rw_semaphore.c

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1603: FILE: lib/rw_semaphore.c:68:
+		printk("%d: %s\n", current->pid, msg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1604: FILE: lib/rw_semaphore.c:69:
+		printk("  nr_h:%d wqa_w:%d wqa_r:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1605: FILE: lib/rw_semaphore.c:70:
+		printk("  nr_h:%d wqa_w:%d wqa_r:%d\n",
+			sem->nr_holders,

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1606: FILE: lib/rw_semaphore.c:71:
+			waitqueue_active(&sem->writers_wait),

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1607: FILE: lib/rw_semaphore.c:72:
+			waitqueue_active(&sem->readers_wait));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1611: FILE: lib/rw_semaphore.c:76:
+EXPORT_SYMBOL(dump_rwsem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1623: FILE: lib/rw_semaphore.c:88:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1633: FILE: lib/rw_semaphore.c:98:
+	dump_rwsem(__FUNCTION__ " out", sem);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1647: FILE: lib/rw_semaphore.c:112:
+	dump_rwsem(__FUNCTION__ " in", sem);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1654: FILE: lib/rw_semaphore.c:119:
+	} while (sem->nr_holders < 0 || waitqueue_active(&sem->writers_wait));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1656: FILE: lib/rw_semaphore.c:121:
+	dump_rwsem(__FUNCTION__ " out", sem);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000541655.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 82 warnings, 14 checks, 1518 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000541655.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
