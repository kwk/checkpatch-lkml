WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
anti-fragmentation code. The information is exported via /proc/buddyinfo. This

CHECK:LINE_SPACING: Please don't use multiple blank lines
#52: FILE: include/linux/mmzone.h:191:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#61: FILE: include/linux/mmzone.h:282:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#61: FILE: include/linux/mmzone.h:282:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#62: FILE: include/linux/mmzone.h:283:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#62: FILE: include/linux/mmzone.h:283:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#63: FILE: include/linux/mmzone.h:284:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#63: FILE: include/linux/mmzone.h:284:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#64: FILE: include/linux/mmzone.h:285:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#64: FILE: include/linux/mmzone.h:285:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: mm/page_alloc.c:2344:
+		memset((unsigned long *)zone->fallback_count, 0,
+				sizeof(zone->fallback_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: mm/page_alloc.c:2346:
+		memset((unsigned long *)zone->alloc_count, 0,
+				sizeof(zone->alloc_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: mm/page_alloc.c:2348:
+		memset((unsigned long *)zone->alloc_count, 0,
+				sizeof(zone->alloc_count));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#157: FILE: mm/page_alloc.c:2349:
+		zone->kernnorclm_partial_steal=0;
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#158: FILE: mm/page_alloc.c:2350:
+		zone->kernnorclm_full_steal=0;
 		                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: mm/page_alloc.c:2352:
+				realsize >> (MAX_ORDER-1);
 				                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#172: FILE: mm/page_alloc.c:2453:
+	unsigned long kernnorclm_full_steal=0;
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#173: FILE: mm/page_alloc.c:2454:
+	unsigned long kernnorclm_partial_steal=0;
 	                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: mm/page_alloc.c:2485:
+ ^I/* Show statistics for each allocation type */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: mm/page_alloc.c:2485:
+ ^I/* Show statistics for each allocation type */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: mm/page_alloc.c:2485:
+ ^I/* Show statistics for each allocation type */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: mm/page_alloc.c:2486:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: mm/page_alloc.c:2486:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: mm/page_alloc.c:2486:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#192: FILE: mm/page_alloc.c:2486:
+ 	seq_printf(m, "\nPer-allocation-type statistics");

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: mm/page_alloc.c:2487:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: mm/page_alloc.c:2487:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: mm/page_alloc.c:2487:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: mm/page_alloc.c:2488:
+ ^I^Iif (!zone->present_pages)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: mm/page_alloc.c:2488:
+ ^I^Iif (!zone->present_pages)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: mm/page_alloc.c:2488:
+ ^I^Iif (!zone->present_pages)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: mm/page_alloc.c:2489:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: mm/page_alloc.c:2489:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: mm/page_alloc.c:2489:
+ ^I^I^Icontinue;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: mm/page_alloc.c:2490:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: mm/page_alloc.c:2490:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: mm/page_alloc.c:2491:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: mm/page_alloc.c:2491:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: mm/page_alloc.c:2491:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: mm/page_alloc.c:2492:
+ ^I^Ifor (type=0; type < RCLM_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#198: FILE: mm/page_alloc.c:2492:
+ ^I^Ifor (type=0; type < RCLM_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: mm/page_alloc.c:2492:
+ ^I^Ifor (type=0; type < RCLM_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#198: FILE: mm/page_alloc.c:2492:
+ 		for (type=0; type < RCLM_TYPES; type++) {
  		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: mm/page_alloc.c:2494:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: mm/page_alloc.c:2494:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: mm/page_alloc.c:2494:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: mm/page_alloc.c:2494:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: mm/page_alloc.c:2495:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: mm/page_alloc.c:2495:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: mm/page_alloc.c:2495:
+ 			seq_printf(m, "\nNode %d, zone %8s, type %10s ", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: mm/page_alloc.c:2495:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: mm/page_alloc.c:2496:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: mm/page_alloc.c:2496:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: mm/page_alloc.c:2496:
+ ^I^I^I^I^Itype_names[type]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: mm/page_alloc.c:2497:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: mm/page_alloc.c:2497:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: mm/page_alloc.c:2497:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: mm/page_alloc.c:2498:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: mm/page_alloc.c:2498:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: mm/page_alloc.c:2498:
+ ^I^I^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: mm/page_alloc.c:2500:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#206: FILE: mm/page_alloc.c:2500:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: mm/page_alloc.c:2500:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#206: FILE: mm/page_alloc.c:2500:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: mm/page_alloc.c:2501:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: mm/page_alloc.c:2501:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: mm/page_alloc.c:2501:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: mm/page_alloc.c:2502:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: mm/page_alloc.c:2502:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: mm/page_alloc.c:2502:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: mm/page_alloc.c:2503:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#209: FILE: mm/page_alloc.c:2503:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: mm/page_alloc.c:2503:
+ ^I^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: mm/page_alloc.c:2505:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: mm/page_alloc.c:2505:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: mm/page_alloc.c:2506:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: mm/page_alloc.c:2506:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: mm/page_alloc.c:2506:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: mm/page_alloc.c:2507:
+ ^I^Iseq_printf(m, "\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: mm/page_alloc.c:2507:
+ ^I^Iseq_printf(m, "\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: mm/page_alloc.c:2507:
+ ^I^Iseq_printf(m, "\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#213: FILE: mm/page_alloc.c:2507:
+ 		seq_printf(m, "\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: mm/page_alloc.c:2508:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: mm/page_alloc.c:2508:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: mm/page_alloc.c:2508:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: mm/page_alloc.c:2508:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: mm/page_alloc.c:2509:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: mm/page_alloc.c:2509:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: mm/page_alloc.c:2509:
+ 		seq_printf(m, "Node %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: mm/page_alloc.c:2509:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: mm/page_alloc.c:2510:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: mm/page_alloc.c:2510:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: mm/page_alloc.c:2510:
+ ^I^I^I^I^I"MAX_ORDER");$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#218: FILE: mm/page_alloc.c:2512:
+		for (type=0; type < RCLM_TYPES; type++) {
 		         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#218: FILE: mm/page_alloc.c:2512:
+		for (type=0; type < RCLM_TYPES; type++) {
+			nr_bufs += zone->free_area_lists[type][MAX_ORDER-1].nr_free;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#219: FILE: mm/page_alloc.c:2513:
+			nr_bufs += zone->free_area_lists[type][MAX_ORDER-1].nr_free;
 			                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: mm/page_alloc.c:2515:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: mm/page_alloc.c:2515:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: mm/page_alloc.c:2515:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#222: FILE: mm/page_alloc.c:2516:
+		seq_printf(m, "\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: mm/page_alloc.c:2518:
+ ^I^Iseq_printf(m, "%s Zone beancounters\n", zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: mm/page_alloc.c:2518:
+ ^I^Iseq_printf(m, "%s Zone beancounters\n", zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: mm/page_alloc.c:2518:
+ ^I^Iseq_printf(m, "%s Zone beancounters\n", zone->name);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#234: FILE: mm/page_alloc.c:2528:
+		for (i=0; i< RCLM_TYPES; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#234: FILE: mm/page_alloc.c:2528:
+		for (i=0; i< RCLM_TYPES; i++) {
 		           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: mm/page_alloc.c:2530:
+			seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n",
+					type_names[i],

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: mm/page_alloc.c:2542:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: mm/page_alloc.c:2543:
+ ^I/* Show bean counters */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: mm/page_alloc.c:2543:
+ ^I/* Show bean counters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: mm/page_alloc.c:2543:
+ ^I/* Show bean counters */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: mm/page_alloc.c:2544:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#250: FILE: mm/page_alloc.c:2544:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: mm/page_alloc.c:2544:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#250: FILE: mm/page_alloc.c:2544:
+ 	seq_printf(m, "\nGlobal beancounters\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#254: FILE: mm/page_alloc.c:2548:
+	for (i=0; i< RCLM_TYPES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#254: FILE: mm/page_alloc.c:2548:
+	for (i=0; i< RCLM_TYPES; i++) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: mm/page_alloc.c:2549:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: mm/page_alloc.c:2549:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: mm/page_alloc.c:2549:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: mm/page_alloc.c:2549:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: mm/page_alloc.c:2550:
+^I^I^I^Itype_names[i], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/page_alloc.c:2550:
+ 		seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", 
+				type_names[i], 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145617.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 60 warnings, 16 checks, 213 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145617.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
