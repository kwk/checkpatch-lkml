WARNING:TYPO_SPELLING: 'possiblity' may be misspelled - perhaps 'possibility'?
#33: 
didn't eliminate the possiblity of free_irq being called from an
                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: arch/um/drivers/chan_kern.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required before the open brace '{'
#74: FILE: arch/um/drivers/chan_kern.c:248:
+	list_for_each(ele, &line->chan_list){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#77: FILE: arch/um/drivers/chan_kern.c:250:
+		if(open_one_chan(chan))

ERROR:SPACING: space required before the open parenthesis '('
#80: FILE: arch/um/drivers/chan_kern.c:253:
+		if(chan->enabled)

ERROR:SPACING: space required before the open brace '{'
#94: FILE: arch/um/drivers/chan_kern.c:267:
+	while(!list_empty(&irqs_to_free)){

ERROR:SPACING: space required before the open parenthesis '('
#94: FILE: arch/um/drivers/chan_kern.c:267:
+	while(!list_empty(&irqs_to_free)){

ERROR:SPACING: space required before the open parenthesis '('
#98: FILE: arch/um/drivers/chan_kern.c:271:
+		if(chan->input)

ERROR:SPACING: space required before the open parenthesis '('
#100: FILE: arch/um/drivers/chan_kern.c:273:
+		if(chan->output)

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: arch/um/drivers/chan_kern.c:281:
+	if(!chan->opened)

ERROR:SPACING: space required before the open brace '{'
#112: FILE: arch/um/drivers/chan_kern.c:284:
+	if(delay_free_irq){

ERROR:SPACING: space required before the open parenthesis '('
#112: FILE: arch/um/drivers/chan_kern.c:284:
+	if(delay_free_irq){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#115: FILE: arch/um/drivers/chan_kern.c:287:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#115: FILE: arch/um/drivers/chan_kern.c:287:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#116: FILE: arch/um/drivers/chan_kern.c:288:
+		if(chan->input)

ERROR:SPACING: space required before the open parenthesis '('
#118: FILE: arch/um/drivers/chan_kern.c:290:
+		if(chan->output)

ERROR:SPACING: space required before the open parenthesis '('
#122: FILE: arch/um/drivers/chan_kern.c:294:
+	if(chan->ops->close != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "chan->ops->close"
#122: FILE: arch/um/drivers/chan_kern.c:294:
+	if(chan->ops->close != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: arch/um/drivers/chan_kern.c:547:
+^I^I^I^I .free_list ^I=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: arch/um/drivers/chan_kern.c:548:
+^I^I^I^I ^ILIST_HEAD_INIT(chan->free_list),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: arch/um/drivers/chan_kern.c:548:
+^I^I^I^I ^ILIST_HEAD_INIT(chan->free_list),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: arch/um/drivers/chan_kern.c:554:
+^I^I^I^I .enabled  ^I= 0,$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#261: FILE: arch/um/drivers/chan_kern.c:648:
+			else close_one_chan(chan, 1);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#261: FILE: arch/um/drivers/chan_kern.c:648:
 			}
+			else close_one_chan(chan, 1);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#284: FILE: arch/um/drivers/line.c:1:
+/*

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: arch/um/drivers/line.c:415:
+	if(!line->valid)

ERROR:SPACING: space required before the open brace '{'
#414: FILE: arch/um/drivers/line.c:418:
+	if(tty->count == 1){

ERROR:SPACING: space required before the open parenthesis '('
#414: FILE: arch/um/drivers/line.c:418:
+	if(tty->count == 1){

ERROR:SPACING: space required before the open brace '{'
#421: FILE: arch/um/drivers/line.c:425:
+		if(!line->sigio){

ERROR:SPACING: space required before the open parenthesis '('
#421: FILE: arch/um/drivers/line.c:425:
+		if(!line->sigio){

ERROR:SPACING: space required before the open brace '{'
#448: FILE: arch/um/drivers/line.c:454:
+	if(tty->count == 1){

ERROR:SPACING: space required before the open parenthesis '('
#448: FILE: arch/um/drivers/line.c:454:
+	if(tty->count == 1){

ERROR:SPACING: space required before the open brace '{'
#456: FILE: arch/um/drivers/line.c:458:
+		if(line->sigio){

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: arch/um/drivers/line.c:458:
+		if(line->sigio){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lines[n].tty"
#477: FILE: arch/um/drivers/line.c:507:
+		if (lines[n].tty != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#504: FILE: arch/um/drivers/line.c:585:
+	else if(line->tty == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!line->tty"
#504: FILE: arch/um/drivers/line.c:585:
+	else if(line->tty == NULL)

ERROR:SPACING: space required before the open brace '{'
#513: FILE: arch/um/drivers/line.c:677:
+		if(parse_chan_pair(line->init_str, line, i, opts)){

ERROR:SPACING: space required before the open parenthesis '('
#513: FILE: arch/um/drivers/line.c:677:
+		if(parse_chan_pair(line->init_str, line, i, opts)){

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#569: FILE: arch/um/include/line.h:93:
+extern int line_setup_irq(int fd, int input, int output, struct line *line,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#592: FILE: arch/um/kernel/irq_user.c:43:
+extern void free_irqs(void);

ERROR:SPACING: space required before the open brace '{'
#607: FILE: arch/um/kernel/irq_user.c:70:
+		for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

ERROR:SPACING: space required before the open parenthesis '('
#607: FILE: arch/um/kernel/irq_user.c:70:
+		for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_fd"
#607: FILE: arch/um/kernel/irq_user.c:70:
+		for(irq_fd = active_fds; irq_fd != NULL; irq_fd = irq_fd->next){

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#640: FILE: arch/um/kernel/irq_user.c:126:
+^I^I^I^I     .current_events ^I= 0 } );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#640: FILE: arch/um/kernel/irq_user.c:126:
+				     .current_events 	= 0 } );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#695: FILE: arch/um/include/chan_kern.h:32:
+extern int parse_chan_pair(char *str, struct line *line, int device,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#706: FILE: arch/um/include/chan_kern.h:42:
+extern void enable_chan(struct line *line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#707: FILE: arch/um/include/chan_kern.h:43:
+extern void close_chan(struct list_head *chans, int delay_free_irq);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120404.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 8 warnings, 9 checks, 588 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120404.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
