WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: kernel/ltt-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#110: FILE: kernel/ltt-core.c:64:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#112: FILE: kernel/ltt-core.c:66:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#113: FILE: kernel/ltt-core.c:67:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#114: FILE: kernel/ltt-core.c:68:
+#include <asm/pgtable.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#122: FILE: kernel/ltt-core.c:76:
+unsigned int		syscall_entry_trace_active = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#123: FILE: kernel/ltt-core.c:77:
+unsigned int		syscall_exit_trace_active = 0;

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#127: FILE: kernel/ltt-core.c:81:
+static void*		lower_eip_bound;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#128: FILE: kernel/ltt-core.c:82:
+static void*		upper_eip_bound;

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#131: FILE: kernel/ltt-core.c:85:
+static void*		syscall_lower_eip_bound;

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#132: FILE: kernel/ltt-core.c:86:
+static void*		syscall_upper_eip_bound;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#143: FILE: kernel/ltt-core.c:97:
+static char *			user_event_data = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#143: FILE: kernel/ltt-core.c:97:
+static char *			user_event_data = NULL;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#154: FILE: kernel/ltt-core.c:108:
+static struct proc_dir_entry *	ltt_proc_root_entry; /* proc/ltt */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: kernel/ltt-core.c:114:
+static struct proc_dir_entry *create_handle_proc_dir(unsigned trace_handle);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#162: FILE: kernel/ltt-core.c:116:
+				   unsigned trace_handle);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#166: FILE: kernel/ltt-core.c:120:
+int event_struct_size[LTT_EV_MAX + 1] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#207: FILE: kernel/ltt-core.c:161:
+static struct custom_event_desc	*custom_events = NULL;

WARNING:SPACING: missing space after struct definition
#210: FILE: kernel/ltt-core.c:164:
+struct trace_handle_struct{

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#213: FILE: kernel/ltt-core.c:167:
+};
+static struct trace_handle_struct trace_handle_table[LTT_MAX_HANDLES];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'hearbeat' may be misspelled - perhaps 'heartbeat'?
#246: FILE: kernel/ltt-core.c:200:
+ *	write_heartbeat_event: - Timer function generating hearbeat event.
   	                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#253: FILE: kernel/ltt-core.c:207:
+	unsigned long int flags;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: kernel/ltt-core.c:209:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#266: FILE: kernel/ltt-core.c:220:
+	heartbeat_timer.expires = jiffies + 0xffffffffUL/loops_per_jiffy - 1;
 	                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: kernel/ltt-core.c:236:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#285: FILE: kernel/ltt-core.c:239:
+		if(trace->active && trace->using_tsc)

WARNING:TYPO_SPELLING: 'hearbeat' may be misspelled - perhaps 'heartbeat'?
#293: FILE: kernel/ltt-core.c:247:
+ *	init_heartbeat_timer: - Start timer generating hearbeat events.
   	                                               ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: kernel/ltt-core.c:251:
+	if (loops_per_jiffy > 0) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#301: FILE: kernel/ltt-core.c:255:
+			+ 0xffffffffUL/loops_per_jiffy - 1;
 			              ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#304: FILE: kernel/ltt-core.c:258:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#305: FILE: kernel/ltt-core.c:259:
+		printk(KERN_ALERT "LTT: No TSC for heartbeat timer - continuing without one \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#305: FILE: kernel/ltt-core.c:259:
+		printk(KERN_ALERT "LTT: No TSC for heartbeat timer - continuing without one \n");

WARNING:TYPO_SPELLING: 'hearbeat' may be misspelled - perhaps 'heartbeat'?
#309: FILE: kernel/ltt-core.c:263:
+ *	delete_heartbeat_timer: - Stop timer generating hearbeat events.
   	                                                ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: kernel/ltt-core.c:284:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: kernel/ltt-core.c:341:
+^I$

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#401: FILE: kernel/ltt-core.c:355:
+	unsigned long int flags;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: kernel/ltt-core.c:358:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: kernel/ltt-core.c:370:
+                clear_waiting_for_cpu_async(trace_handle, cpu_id, LTT_TRACE_HEARTBEAT);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: kernel/ltt-core.c:370:
+                clear_waiting_for_cpu_async(trace_handle, cpu_id, LTT_TRACE_HEARTBEAT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: kernel/ltt-core.c:375:
+                clear_waiting_for_cpu_async(trace_handle, cpu_id, LTT_FINALIZE_TRACE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: kernel/ltt-core.c:375:
+                clear_waiting_for_cpu_async(trace_handle, cpu_id, LTT_FINALIZE_TRACE);$

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#423: FILE: kernel/ltt-core.c:377:
+			printk(KERN_ALERT "LTT: Couldn't close trace channel %d\n", trace_channel_handle(trace_handle, cpu_id));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#423: FILE: kernel/ltt-core.c:377:
+			printk(KERN_ALERT "LTT: Couldn't close trace channel %d\n", trace_channel_handle(trace_handle, cpu_id));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#460: FILE: kernel/ltt-core.c:414:
+void _init_percpu_timer(void * dummy)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#475: FILE: kernel/ltt-core.c:429:
+		printk(KERN_ALERT "LTT: Couldn't initialize all per-CPU timers\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: kernel/ltt-core.c:446:
+^I$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#499: FILE: kernel/ltt-core.c:453:
+	shared_buf_ctl.buffer_switches_pending =	trace->buffer_switches_pending & ~(1UL << cpu_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: kernel/ltt-core.c:481:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: kernel/ltt-core.c:497:
+^I$

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#569: FILE: kernel/ltt-core.c:523:
+	unsigned long int flags;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#585: FILE: kernel/ltt-core.c:539:
+	if (copy_from_user(&command_arg, (void*)(arg + sizeof(tracer_handle)), sizeof(unsigned long)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#585: FILE: kernel/ltt-core.c:539:
+	if (copy_from_user(&command_arg, (void*)(arg + sizeof(tracer_handle)), sizeof(unsigned long)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#594: FILE: kernel/ltt-core.c:548:
+	if (tracer_handle < NR_TRACES)
[...]
+	else if (tracer_handle >= NR_TRACES) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#599: FILE: kernel/ltt-core.c:553:
+		if (trace == NULL && tracer_command != LTT_TRACER_GET_STATUS)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_handle < NR_TRACES'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracer_started == 1'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_STOP'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_PAUSE'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_UNPAUSE'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_DATA_COMITTED'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_GET_ARCH_INFO'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_GET_BUFFER_CONTROL'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_GET_START_INFO'
#603: FILE: kernel/ltt-core.c:557:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#604: FILE: kernel/ltt-core.c:558:
+	if ((tracer_handle < NR_TRACES)
+	    && (trace->tracer_started == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#605: FILE: kernel/ltt-core.c:559:
+	    && (trace->tracer_started == 1)
+	    && (tracer_command != LTT_TRACER_STOP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#606: FILE: kernel/ltt-core.c:560:
+	    && (tracer_command != LTT_TRACER_STOP)
+	    && (tracer_command != LTT_TRACER_PAUSE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#607: FILE: kernel/ltt-core.c:561:
+	    && (tracer_command != LTT_TRACER_PAUSE)
+	    && (tracer_command != LTT_TRACER_UNPAUSE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#608: FILE: kernel/ltt-core.c:562:
+	    && (tracer_command != LTT_TRACER_UNPAUSE)
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#609: FILE: kernel/ltt-core.c:563:
+	    && (tracer_command != LTT_TRACER_DATA_COMITTED)
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#610: FILE: kernel/ltt-core.c:564:
+	    && (tracer_command != LTT_TRACER_GET_ARCH_INFO)
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#611: FILE: kernel/ltt-core.c:565:
+	    && (tracer_command != LTT_TRACER_GET_BUFFER_CONTROL)
+	    && (tracer_command != LTT_TRACER_GET_START_INFO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_handle >= NR_TRACES'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_CREATE_USER_EVENT'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_DESTROY_USER_EVENT'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_TRACE_USER_EVENT'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_FREE_HANDLE'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_GET_STATUS'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_SET_EVENT_MASK'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_command != LTT_TRACER_GET_EVENT_MASK'
#614: FILE: kernel/ltt-core.c:568:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#615: FILE: kernel/ltt-core.c:569:
+	if ((tracer_handle >= NR_TRACES)
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#616: FILE: kernel/ltt-core.c:570:
+	    && (tracer_command != LTT_TRACER_CREATE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#617: FILE: kernel/ltt-core.c:571:
+	    && (tracer_command != LTT_TRACER_DESTROY_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#618: FILE: kernel/ltt-core.c:572:
+	    && (tracer_command != LTT_TRACER_TRACE_USER_EVENT)
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#619: FILE: kernel/ltt-core.c:573:
+	    && (tracer_command != LTT_TRACER_FREE_HANDLE)
+	    && (tracer_command != LTT_TRACER_GET_STATUS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#620: FILE: kernel/ltt-core.c:574:
+	    && (tracer_command != LTT_TRACER_GET_STATUS)
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#621: FILE: kernel/ltt-core.c:575:
+	    && (tracer_command != LTT_TRACER_SET_EVENT_MASK)
+	    && (tracer_command != LTT_TRACER_GET_EVENT_MASK))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#622: FILE: kernel/ltt-core.c:576:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_syscall_eip_bounds == 1'
#631: FILE: kernel/ltt-core.c:585:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall_eip_depth_set == 1'
#631: FILE: kernel/ltt-core.c:585:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_syscall_eip_bounds == 1'
#631: FILE: kernel/ltt-core.c:585:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lower_eip_bound_set != 1'
#631: FILE: kernel/ltt-core.c:585:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'upper_eip_bound_set != 1'
#631: FILE: kernel/ltt-core.c:585:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracing_pid == 1'
#631: FILE: kernel/ltt-core.c:585:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracing_pgrp == 1'
#631: FILE: kernel/ltt-core.c:585:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#632: FILE: kernel/ltt-core.c:586:
+		if (((use_syscall_eip_bounds == 1)
+		     && (syscall_eip_depth_set == 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#633: FILE: kernel/ltt-core.c:587:
+		     && (syscall_eip_depth_set == 1))
+		    || ((use_syscall_eip_bounds == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#634: FILE: kernel/ltt-core.c:588:
+		    || ((use_syscall_eip_bounds == 1)
+			&& ((lower_eip_bound_set != 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#635: FILE: kernel/ltt-core.c:589:
+			&& ((lower_eip_bound_set != 1)
+			    || (upper_eip_bound_set != 1)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#636: FILE: kernel/ltt-core.c:590:
+			    || (upper_eip_bound_set != 1)))
+		    || ((trace->tracing_pid == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#637: FILE: kernel/ltt-core.c:591:
+		    || ((trace->tracing_pid == 1)
+			&& (trace->tracing_pgrp == 1)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: kernel/ltt-core.c:603:
+^I^I$

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#682: FILE: kernel/ltt-core.c:636:
+					printk(KERN_ALERT "LTT: Couldn't close trace channel %d\n", trace_channel_handle(tracer_handle, i));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#682: FILE: kernel/ltt-core.c:636:
+					printk(KERN_ALERT "LTT: Couldn't close trace channel %d\n", trace_channel_handle(tracer_handle, i));

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#708: FILE: kernel/ltt-core.c:662:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#708: FILE: kernel/ltt-core.c:662:
+		else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'command_arg < LTT_TRACER_LOCKLESS_MIN_BUF_SIZE'
#709: FILE: kernel/ltt-core.c:663:
+			if ((command_arg < LTT_TRACER_LOCKLESS_MIN_BUF_SIZE) ||
+			    (command_arg > LTT_TRACER_LOCKLESS_MAX_BUF_SIZE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'command_arg > LTT_TRACER_LOCKLESS_MAX_BUF_SIZE'
#709: FILE: kernel/ltt-core.c:663:
+			if ((command_arg < LTT_TRACER_LOCKLESS_MIN_BUF_SIZE) ||
+			    (command_arg > LTT_TRACER_LOCKLESS_MAX_BUF_SIZE))

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#715: FILE: kernel/ltt-core.c:669:
+		return ltt_set_buffer_size(trace, command_arg, relayfs_path);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#723: FILE: kernel/ltt-core.c:677:
+		return ltt_set_n_buffers(trace, command_arg);
+		break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->use_locking == 0'
#728: FILE: kernel/ltt-core.c:682:
+		if ((trace->use_locking == 0) && (have_cmpxchg() == 0))

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#733: FILE: kernel/ltt-core.c:687:
+		if (copy_from_user(&trace->traced_events, (void *) command_arg, sizeof(trace->traced_events)))

CHECK:SPACING: No space is necessary after a cast
#733: FILE: kernel/ltt-core.c:687:
+		if (copy_from_user(&trace->traced_events, (void *) command_arg, sizeof(trace->traced_events)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->using_tsc == 1'
#740: FILE: kernel/ltt-core.c:694:
+		if ((trace->using_tsc == 1) && (have_tsc() == 0)) {

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#748: FILE: kernel/ltt-core.c:702:
+		if (copy_from_user(&trace->log_event_details_mask, (void *) command_arg, sizeof(trace->log_event_details_mask)))

CHECK:SPACING: No space is necessary after a cast
#748: FILE: kernel/ltt-core.c:702:
+		if (copy_from_user(&trace->log_event_details_mask, (void *) command_arg, sizeof(trace->log_event_details_mask)))

CHECK:SPACING: No space is necessary after a cast
#783: FILE: kernel/ltt-core.c:737:
+		lower_eip_bound = (void *) command_arg;

CHECK:SPACING: No space is necessary after a cast
#789: FILE: kernel/ltt-core.c:743:
+		upper_eip_bound = (void *) command_arg;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#811: FILE: kernel/ltt-core.c:765:
+		return events_lost(tracer_handle, command_arg);
+		break;

CHECK:SPACING: No space is necessary after a cast
#814: FILE: kernel/ltt-core.c:768:
+		if (copy_from_user(&new_user_event, (void *) command_arg, sizeof(new_user_event)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#818: FILE: kernel/ltt-core.c:772:
+		new_user_event_id = ltt_create_owned_event(new_user_event.type,
+							     new_user_event.desc,

CHECK:BRACES: braces {} should be used on all arms of this statement
#822: FILE: kernel/ltt-core.c:776:
+		if (new_user_event_id >= 0) {
[...]
+		else
[...]

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#824: FILE: kernel/ltt-core.c:778:
+			if (copy_to_user((void *) command_arg, &new_user_event, sizeof(new_user_event))) {

CHECK:SPACING: No space is necessary after a cast
#824: FILE: kernel/ltt-core.c:778:
+			if (copy_to_user((void *) command_arg, &new_user_event, sizeof(new_user_event))) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#829: FILE: kernel/ltt-core.c:783:
+		}
+		else

CHECK:SPACING: No space is necessary after a cast
#834: FILE: kernel/ltt-core.c:788:
+		ltt_destroy_event((int) command_arg);

CHECK:SPACING: No space is necessary after a cast
#838: FILE: kernel/ltt-core.c:792:
+		if (copy_from_user(&user_event, (void *) command_arg, sizeof(user_event)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'user_event_data == NULL'
#841: FILE: kernel/ltt-core.c:795:
+		if ((user_event_data == NULL)
+		    && (user_event_data = vmalloc(LTT_CUSTOM_EV_MAX_SIZE)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#841: FILE: kernel/ltt-core.c:795:
+		if ((user_event_data == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!user_event_data"
#841: FILE: kernel/ltt-core.c:795:
+		if ((user_event_data == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#842: FILE: kernel/ltt-core.c:796:
+		if ((user_event_data == NULL)
+		    && (user_event_data = vmalloc(LTT_CUSTOM_EV_MAX_SIZE)) < 0)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#857: FILE: kernel/ltt-core.c:811:
+		if (copy_from_user(&(trace_mask.mask), (void *) command_arg, sizeof(trace_mask.mask)))

CHECK:SPACING: No space is necessary after a cast
#857: FILE: kernel/ltt-core.c:811:
+		if (copy_from_user(&(trace_mask.mask), (void *) command_arg, sizeof(trace_mask.mask)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around trace_mask.mask
#857: FILE: kernel/ltt-core.c:811:
+		if (copy_from_user(&(trace_mask.mask), (void *) command_arg, sizeof(trace_mask.mask)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around trace_mask.mask
#865: FILE: kernel/ltt-core.c:819:
+		memcpy(&trace->traced_events, &(trace_mask.mask), sizeof(trace_mask.mask));

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#875: FILE: kernel/ltt-core.c:829:
+		return retval;
+		break;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#878: FILE: kernel/ltt-core.c:832:
+		if (copy_to_user((void *) command_arg, &trace->traced_events, sizeof(trace->traced_events)))

CHECK:SPACING: No space is necessary after a cast
#878: FILE: kernel/ltt-core.c:832:
+		if (copy_to_user((void *) command_arg, &trace->traced_events, sizeof(trace->traced_events)))

CHECK:SPACING: No space is necessary after a cast
#886: FILE: kernel/ltt-core.c:840:
+		if (copy_to_user((void *) command_arg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: kernel/ltt-core.c:841:
+		if (copy_to_user((void *) command_arg,
+				&ltt_arch_info,

CHECK:BRACES: braces {} should be used on all arms of this statement
#893: FILE: kernel/ltt-core.c:847:
+		if (trace->trace_start_data) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#898: FILE: kernel/ltt-core.c:852:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#905: FILE: kernel/ltt-core.c:859:
+^I^I$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#928: FILE: kernel/ltt-core.c:882:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#928: FILE: kernel/ltt-core.c:882:
+		else {

CHECK:SPACING: No space is necessary after a cast
#940: FILE: kernel/ltt-core.c:894:
+		if (copy_to_user((void *) command_arg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: kernel/ltt-core.c:895:
+		if (copy_to_user((void *) command_arg,
+				&shared_buf_ctl,

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#948: FILE: kernel/ltt-core.c:902:
+		return ltt_free_trace_handle(tracer_handle);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#952: FILE: kernel/ltt-core.c:906:
+		return ltt_free_daemon_handle(trace);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#960: FILE: kernel/ltt-core.c:914:
+		return -EFAULT;
+		break;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#963: FILE: kernel/ltt-core.c:917:
+		return -ENOSYS;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#964: FILE: kernel/ltt-core.c:918:
+		return -ENOSYS;
+		break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#989: FILE: kernel/ltt-core.c:943:
+		if (!trace->active)
[...]
+		else if (!trace->flight_recorder) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#994: FILE: kernel/ltt-core.c:948:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: kernel/ltt-core.c:976:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#1025: FILE: kernel/ltt-core.c:979:
+		if (trace == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace_handle_table[i].owner"
#1034: FILE: kernel/ltt-core.c:988:
+			if (trace_handle_table[i].owner == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1044: FILE: kernel/ltt-core.c:998:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1044: FILE: kernel/ltt-core.c:998:
+	else {

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#1052: FILE: kernel/ltt-core.c:1006:
+			if ((trace->trace_start_data = (struct _ltt_trace_start *) kmalloc(sizeof(struct _ltt_trace_start), GFP_ATOMIC)) == NULL)

CHECK:SPACING: No space is necessary after a cast
#1052: FILE: kernel/ltt-core.c:1006:
+			if ((trace->trace_start_data = (struct _ltt_trace_start *) kmalloc(sizeof(struct _ltt_trace_start), GFP_ATOMIC)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1052: FILE: kernel/ltt-core.c:1006:
+			if ((trace->trace_start_data = (struct _ltt_trace_start *) kmalloc(sizeof(struct _ltt_trace_start), GFP_ATOMIC)) == NULL)

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1052: FILE: kernel/ltt-core.c:1006:
+			if ((trace->trace_start_data = (struct _ltt_trace_start *) kmalloc(sizeof(struct _ltt_trace_start), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trace->trace_start_data)...) over kmalloc(sizeof(struct _ltt_trace_start)...)
#1052: FILE: kernel/ltt-core.c:1006:
+			if ((trace->trace_start_data = (struct _ltt_trace_start *) kmalloc(sizeof(struct _ltt_trace_start), GFP_ATOMIC)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1058: FILE: kernel/ltt-core.c:1012:
+		retval = trace->trace_handle = tracer_handle;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_handle < NR_TRACES'
#1077: FILE: kernel/ltt-core.c:1031:
+	if ((tracer_handle < NR_TRACES) || (tracer_handle >= LTT_MAX_HANDLES))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_handle >= LTT_MAX_HANDLES'
#1077: FILE: kernel/ltt-core.c:1031:
+	if ((tracer_handle < NR_TRACES) || (tracer_handle >= LTT_MAX_HANDLES))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1082: FILE: kernel/ltt-core.c:1036:
+	if (trace_handle_table[tracer_handle - NR_TRACES].owner == current) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1086: FILE: kernel/ltt-core.c:1040:
+	}
+	else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1114: FILE: kernel/ltt-core.c:1068:
+				printk(KERN_ALERT "LTT: Lost %d events on cpu %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1119: FILE: kernel/ltt-core.c:1073:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1125: FILE: kernel/ltt-core.c:1079:
+	if(trace->using_tsc && !need_heartbeat())

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1129: FILE: kernel/ltt-core.c:1083:
+		if (trace_channel_handle(trace->trace_handle, i) != -1) {
+				trace_channel_handle(trace->trace_handle, i) = -1;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1142: FILE: kernel/ltt-core.c:1096:
+	if (trace->trace_start_data)
+		kfree(trace->trace_start_data);

WARNING:TYPO_SPELLING: 'agains' may be misspelled - perhaps 'against'?
#1152: FILE: kernel/ltt-core.c:1106:
+ *	it means there is no daemon, i.e. free all handles taken agains the
   	                                                         ^^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1155: FILE: kernel/ltt-core.c:1109:
+void ltt_free_all_handles(struct task_struct* task_ptr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task_ptr"
#1160: FILE: kernel/ltt-core.c:1114:
+	if (task_ptr == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1166: FILE: kernel/ltt-core.c:1120:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1166: FILE: kernel/ltt-core.c:1120:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1192: FILE: kernel/ltt-core.c:1146:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1198: FILE: kernel/ltt-core.c:1152:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1235: FILE: kernel/ltt-core.c:1189:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1240: FILE: kernel/ltt-core.c:1194:
+		if(ltt_test_bit(syscall_type, &trace->traced_events))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1253: FILE: kernel/ltt-core.c:1207:
+	unsigned i;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: kernel/ltt-core.c:1208:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1300: FILE: kernel/ltt-core.c:1254:
+int ltt_set_buffer_size(struct ltt_trace_struct *trace, int buffer_size, char * dirname)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dirname == NULL'
#1310: FILE: kernel/ltt-core.c:1264:
+	if ((dirname == NULL) || (strlen(dirname) == 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dirname"
#1310: FILE: kernel/ltt-core.c:1264:
+	if ((dirname == NULL) || (strlen(dirname) == 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1317: FILE: kernel/ltt-core.c:1271:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1322: FILE: kernel/ltt-core.c:1276:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: kernel/ltt-core.c:1286:
+		trace_channel_handle(trace->trace_handle, i) = relay_open(relay_file_name,
+							  buffer_size,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1347: FILE: kernel/ltt-core.c:1301:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1386: FILE: kernel/ltt-core.c:1340:
+	ltt_set_trace_config(syscall_eip_depth_set,
+			 use_syscall_eip_bounds,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1409: FILE: kernel/ltt-core.c:1363:
+int ltt_set_trace_config(int do_syscall_depth,
+		     int do_syscall_bounds,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'eip_lower_bound > eip_upper_bound'
#1414: FILE: kernel/ltt-core.c:1368:
+	if ((do_syscall_depth && do_syscall_bounds)
+	    || (eip_lower_bound > eip_upper_bound)
+	    || (eip_depth < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'eip_depth < 0'
#1414: FILE: kernel/ltt-core.c:1368:
+	if ((do_syscall_depth && do_syscall_bounds)
+	    || (eip_lower_bound > eip_upper_bound)
+	    || (eip_depth < 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1415: FILE: kernel/ltt-core.c:1369:
+	if ((do_syscall_depth && do_syscall_bounds)
+	    || (eip_lower_bound > eip_upper_bound)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1416: FILE: kernel/ltt-core.c:1370:
+	    || (eip_lower_bound > eip_upper_bound)
+	    || (eip_depth < 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1442: FILE: kernel/ltt-core.c:1396:
+int ltt_get_trace_config(int *do_syscall_depth,
+		     int *do_syscall_bounds,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: kernel/ltt-core.c:1418:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1505: FILE: kernel/ltt-core.c:1459:
+^I$

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1570: FILE: kernel/ltt-core.c:1524:
+	if ((new_event_desc = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

CHECK:SPACING: No space is necessary after a cast
#1570: FILE: kernel/ltt-core.c:1524:
+	if ((new_event_desc = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1570: FILE: kernel/ltt-core.c:1524:
+	if ((new_event_desc = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)
+		 return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1570: FILE: kernel/ltt-core.c:1524:
+	if ((new_event_desc = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1570: FILE: kernel/ltt-core.c:1524:
+	if ((new_event_desc = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_event_desc)...) over kmalloc(sizeof(struct custom_event_desc)...)
#1570: FILE: kernel/ltt-core.c:1524:
+	if ((new_event_desc = (struct custom_event_desc *) kmalloc(sizeof(struct custom_event_desc), GFP_ATOMIC)) == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#1571: FILE: kernel/ltt-core.c:1525:
+		 return -ENOMEM;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_event_desc->event
#1573: FILE: kernel/ltt-core.c:1527:
+	new_event = &(new_event_desc->event);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "event_type"
#1578: FILE: kernel/ltt-core.c:1532:
+	if (event_type != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "event_desc"
#1580: FILE: kernel/ltt-core.c:1534:
+	if (event_desc != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "format_data"
#1582: FILE: kernel/ltt-core.c:1536:
+	if (format_data != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!custom_events"
#1598: FILE: kernel/ltt-core.c:1552:
+	if (custom_events == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_event_desc->event
#1607: FILE: kernel/ltt-core.c:1561:
+	ltt_log_event(LTT_EV_NEW_EVENT, &(new_event_desc->event));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!custom_events"
#1639: FILE: kernel/ltt-core.c:1593:
+	if (custom_events == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!custom_events"
#1668: FILE: kernel/ltt-core.c:1622:
+	if (custom_events == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!custom_events"
#1695: FILE: kernel/ltt-core.c:1649:
+	if (custom_events == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around event_desc->event
#1701: FILE: kernel/ltt-core.c:1655:
+		ltt_log_event(LTT_EV_NEW_EVENT, &(event_desc->event));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1730: FILE: kernel/ltt-core.c:1684:
+	uint16_t data_size;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1733: FILE: kernel/ltt-core.c:1687:
+	char * reserved;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1741: FILE: kernel/ltt-core.c:1695:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1749: FILE: kernel/ltt-core.c:1703:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->daemon_task_struct == NULL'
#1750: FILE: kernel/ltt-core.c:1704:
+	if (!trace->flight_recorder && (trace->daemon_task_struct == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace->daemon_task_struct"
#1750: FILE: kernel/ltt-core.c:1704:
+	if (!trace->flight_recorder && (trace->daemon_task_struct == NULL))

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1755: FILE: kernel/ltt-core.c:1709:
+	if ((trace->tracer_started == 1) || (event_id == LTT_EV_START) || (event_id == LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracer_started == 1'
#1755: FILE: kernel/ltt-core.c:1709:
+	if ((trace->tracer_started == 1) || (event_id == LTT_EV_START) || (event_id == LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id == LTT_EV_START'
#1755: FILE: kernel/ltt-core.c:1709:
+	if ((trace->tracer_started == 1) || (event_id == LTT_EV_START) || (event_id == LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id == LTT_EV_BUFFER_START'
#1755: FILE: kernel/ltt-core.c:1709:
+	if ((trace->tracer_started == 1) || (event_id == LTT_EV_START) || (event_id == LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != LTT_EV_START'
#1764: FILE: kernel/ltt-core.c:1718:
+	if ((event_id != LTT_EV_START) && (event_id != LTT_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != LTT_EV_BUFFER_START'
#1764: FILE: kernel/ltt-core.c:1718:
+	if ((event_id != LTT_EV_START) && (event_id != LTT_EV_BUFFER_START)) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1766: FILE: kernel/ltt-core.c:1720:
+			incoming_process = (struct task_struct *) (((ltt_schedchange *) event_struct)->in);

CHECK:SPACING: No space is necessary after a cast
#1766: FILE: kernel/ltt-core.c:1720:
+			incoming_process = (struct task_struct *) (((ltt_schedchange *) event_struct)->in);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracing_pid == 1'
#1767: FILE: kernel/ltt-core.c:1721:
+		if ((trace->tracing_pid == 1) && (current->pid != trace->traced_pid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pid != trace->traced_pid'
#1767: FILE: kernel/ltt-core.c:1721:
+		if ((trace->tracing_pid == 1) && (current->pid != trace->traced_pid)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!incoming_process"
#1768: FILE: kernel/ltt-core.c:1722:
+			if (incoming_process == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracing_pgrp == 1'
#1773: FILE: kernel/ltt-core.c:1727:
+		if ((trace->tracing_pgrp == 1) && (process_group(current) != trace->traced_pgrp)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!incoming_process"
#1774: FILE: kernel/ltt-core.c:1728:
+			if (incoming_process == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracing_gid == 1'
#1779: FILE: kernel/ltt-core.c:1733:
+		if ((trace->tracing_gid == 1) && (current->egid != trace->traced_gid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->egid != trace->traced_gid'
#1779: FILE: kernel/ltt-core.c:1733:
+		if ((trace->tracing_gid == 1) && (current->egid != trace->traced_gid)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!incoming_process"
#1780: FILE: kernel/ltt-core.c:1734:
+			if (incoming_process == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->tracing_uid == 1'
#1785: FILE: kernel/ltt-core.c:1739:
+		if ((trace->tracing_uid == 1) && (current->euid != trace->traced_uid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != trace->traced_uid'
#1785: FILE: kernel/ltt-core.c:1739:
+		if ((trace->tracing_uid == 1) && (current->euid != trace->traced_uid)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!incoming_process"
#1786: FILE: kernel/ltt-core.c:1740:
+			if (incoming_process == NULL)

CHECK:SPACING: No space is necessary after a cast
#1792: FILE: kernel/ltt-core.c:1746:
+			(((ltt_schedchange *) event_struct)->in) = incoming_process->pid;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1801: FILE: kernel/ltt-core.c:1755:
+			if ((((ltt_file_system *) event_struct)->event_sub_id == LTT_EV_FILE_SYSTEM_EXEC)

CHECK:SPACING: No space is necessary after a cast
#1801: FILE: kernel/ltt-core.c:1755:
+			if ((((ltt_file_system *) event_struct)->event_sub_id == LTT_EV_FILE_SYSTEM_EXEC)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1802: FILE: kernel/ltt-core.c:1756:
+			    || (((ltt_file_system *) event_struct)->event_sub_id == LTT_EV_FILE_SYSTEM_OPEN)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1802: FILE: kernel/ltt-core.c:1756:
+			if ((((ltt_file_system *) event_struct)->event_sub_id == LTT_EV_FILE_SYSTEM_EXEC)
+			    || (((ltt_file_system *) event_struct)->event_sub_id == LTT_EV_FILE_SYSTEM_OPEN)) {

CHECK:SPACING: No space is necessary after a cast
#1802: FILE: kernel/ltt-core.c:1756:
+			    || (((ltt_file_system *) event_struct)->event_sub_id == LTT_EV_FILE_SYSTEM_OPEN)) {

CHECK:SPACING: No space is necessary after a cast
#1803: FILE: kernel/ltt-core.c:1757:
+				var_data_beg = ((ltt_file_system *) event_struct)->file_name;

CHECK:SPACING: No space is necessary after a cast
#1804: FILE: kernel/ltt-core.c:1758:
+				var_data_len = ((ltt_file_system *) event_struct)->event_data2 + 1;

CHECK:SPACING: No space is necessary after a cast
#1805: FILE: kernel/ltt-core.c:1759:
+				data_size += (uint16_t) var_data_len;

CHECK:SPACING: No space is necessary after a cast
#1809: FILE: kernel/ltt-core.c:1763:
+			var_data_beg = ((ltt_custom *) event_struct)->data;

CHECK:SPACING: No space is necessary after a cast
#1810: FILE: kernel/ltt-core.c:1764:
+			var_data_len = ((ltt_custom *) event_struct)->data_size;

CHECK:SPACING: No space is necessary after a cast
#1811: FILE: kernel/ltt-core.c:1765:
+			data_size += (uint16_t) var_data_len;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1816: FILE: kernel/ltt-core.c:1770:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START) && (event_id != LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->log_cpuid == 1'
#1816: FILE: kernel/ltt-core.c:1770:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START) && (event_id != LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != LTT_EV_START'
#1816: FILE: kernel/ltt-core.c:1770:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START) && (event_id != LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != LTT_EV_BUFFER_START'
#1816: FILE: kernel/ltt-core.c:1770:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START) && (event_id != LTT_EV_BUFFER_START))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rchan"
#1820: FILE: kernel/ltt-core.c:1774:
+	if (rchan == NULL)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1824: FILE: kernel/ltt-core.c:1778:
+	reserved = relay_reserve(rchan, data_size, &time_stamp, &time_delta, &reserve_code, &interrupting);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1825: FILE: kernel/ltt-core.c:1779:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->log_cpuid == 1'
#1832: FILE: kernel/ltt-core.c:1786:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START)
+	    && (event_id != LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != LTT_EV_START'
#1832: FILE: kernel/ltt-core.c:1786:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START)
+	    && (event_id != LTT_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id != LTT_EV_BUFFER_START'
#1832: FILE: kernel/ltt-core.c:1786:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START)
+	    && (event_id != LTT_EV_BUFFER_START))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1833: FILE: kernel/ltt-core.c:1787:
+	if ((trace->log_cpuid == 1) && (event_id != LTT_EV_START)
+	    && (event_id != LTT_EV_BUFFER_START))

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1863: FILE: kernel/ltt-core.c:1817:
+	if ((event_id == LTT_EV_SCHEDCHANGE) && (tracer_handle == TRACE_HANDLE) && current_traces[FLIGHT_HANDLE].active)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event_id == LTT_EV_SCHEDCHANGE'
#1863: FILE: kernel/ltt-core.c:1817:
+	if ((event_id == LTT_EV_SCHEDCHANGE) && (tracer_handle == TRACE_HANDLE) && current_traces[FLIGHT_HANDLE].active)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer_handle == TRACE_HANDLE'
#1863: FILE: kernel/ltt-core.c:1817:
+	if ((event_id == LTT_EV_SCHEDCHANGE) && (tracer_handle == TRACE_HANDLE) && current_traces[FLIGHT_HANDLE].active)

CHECK:SPACING: No space is necessary after a cast
#1864: FILE: kernel/ltt-core.c:1818:
+		(((ltt_schedchange *) event_struct)->in) = (u32)incoming_process;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1865: FILE: kernel/ltt-core.c:1819:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1867: FILE: kernel/ltt-core.c:1821:
+	/* We need to commit even if we didn't write anything because
+	   that's how the deliver callback is invoked. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1867: FILE: kernel/ltt-core.c:1821:
+	   that's how the deliver callback is invoked. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1887: FILE: kernel/ltt-core.c:1841:
+int ltt_log_event(u8 event_id,
+		void *event_struct)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1897: FILE: kernel/ltt-core.c:1851:
+		err[i] = _ltt_log_event(trace,
+				     event_id,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1914: FILE: kernel/ltt-core.c:1868:
+int ltt_log_std_formatted_event(int event_id,...)
                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1919: FILE: kernel/ltt-core.c:1873:
+        ltt_custom custom_event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1919: FILE: kernel/ltt-core.c:1873:
+        ltt_custom custom_event;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!custom_events"
#1924: FILE: kernel/ltt-core.c:1878:
+	if (custom_events == NULL)

CHECK:SPACING: No space is necessary after a cast
#1945: FILE: kernel/ltt-core.c:1899:
+	custom_event.data_size = (u32) (string_size + 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!custom_events"
#1968: FILE: kernel/ltt-core.c:1922:
+	if (custom_events == NULL)

CHECK:SPACING: No space is necessary after a cast
#1985: FILE: kernel/ltt-core.c:1939:
+		custom_event.data_size = (u32) event_size;

CHECK:SPACING: No space is necessary after a cast
#1987: FILE: kernel/ltt-core.c:1941:
+		custom_event.data_size = (u32) LTT_CUSTOM_EV_MAX_SIZE;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2011: FILE: kernel/ltt-core.c:1965:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2015: FILE: kernel/ltt-core.c:1969:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2031: FILE: kernel/ltt-core.c:1985:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2037: FILE: kernel/ltt-core.c:1991:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2053: FILE: kernel/ltt-core.c:2007:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2058: FILE: kernel/ltt-core.c:2012:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2074: FILE: kernel/ltt-core.c:2028:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2078: FILE: kernel/ltt-core.c:2032:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2088: FILE: kernel/ltt-core.c:2042:
+				    char * current_write_pos,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2094: FILE: kernel/ltt-core.c:2048:
+        ltt_trace_start start_event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2094: FILE: kernel/ltt-core.c:2048:
+        ltt_trace_start start_event;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2096: FILE: kernel/ltt-core.c:2050:
+	uint16_t data_size;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2107: FILE: kernel/ltt-core.c:2061:
+^Istart_event.event_mask = ^Itrace->traced_events;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2159: FILE: kernel/ltt-core.c:2113:
+				 char * current_write_pos,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2168: FILE: kernel/ltt-core.c:2122:
+	uint16_t data_size;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2173: FILE: kernel/ltt-core.c:2127:
+^I$

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#2202: FILE: kernel/ltt-core.c:2156:
+		data_size += write_start_event(trace, channel_handle, current_write_pos, start_tsc, using_tsc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2203: FILE: kernel/ltt-core.c:2157:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2226: FILE: kernel/ltt-core.c:2180:
+			       char * current_write_pos,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2227: FILE: kernel/ltt-core.c:2181:
+			       char * end_of_buffer,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2232: FILE: kernel/ltt-core.c:2186:
+ ^Iltt_buffer_end end_buffer_event;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2232: FILE: kernel/ltt-core.c:2186:
+ ^Iltt_buffer_end end_buffer_event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2232: FILE: kernel/ltt-core.c:2186:
+ ^Iltt_buffer_end end_buffer_event;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2235: FILE: kernel/ltt-core.c:2189:
+	char* init_write_pos = current_write_pos;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2236: FILE: kernel/ltt-core.c:2190:
+	uint16_t data_size;

CHECK:SPACING: No space is necessary after a cast
#2279: FILE: kernel/ltt-core.c:2233:
+	*((u32 *) (end_of_buffer - sizeof(size_lost))) = size_lost;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2296: FILE: kernel/ltt-core.c:2250:
+		      char * from,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2305: FILE: kernel/ltt-core.c:2259:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2316: FILE: kernel/ltt-core.c:2270:
+ *	@filp: the file
   	 ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2323: FILE: kernel/ltt-core.c:2277:
+static int fileop_notify (int rchan_id,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2324: FILE: kernel/ltt-core.c:2278:
+			  struct file *filp,
 			               ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2336: FILE: kernel/ltt-core.c:2290:
+^I$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2346: FILE: kernel/ltt-core.c:2300:
+	}
+	else if (fileop == RELAY_FILE_UNMAP) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2381: FILE: kernel/ltt-core.c:2335:
+static int proc_write_relayfs_path(struct file *filp, const char *buffer,
                                                 ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2390: FILE: kernel/ltt-core.c:2344:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2412: FILE: kernel/ltt-core.c:2366:
+	struct proc_dir_entry * file_entry;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file_entry"
#2417: FILE: kernel/ltt-core.c:2371:
+	if (file_entry == NULL) {

WARNING:TYPO_SPELLING: 'Retruns' may be misspelled - perhaps 'Returns'?
#2438: FILE: kernel/ltt-core.c:2392:
+ *	Retruns the proc dir entry if successful, NULL otherwise.
   	^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!handle_dir"
#2449: FILE: kernel/ltt-core.c:2403:
+	if (handle_dir == NULL)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2451: FILE: kernel/ltt-core.c:2405:
+		return NULL;
+	else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2458: FILE: kernel/ltt-core.c:2412:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2487: FILE: kernel/ltt-core.c:2441:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2492: FILE: kernel/ltt-core.c:2446:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2549: FILE: kernel/ltt-core.c:2503:
+static int proc_write_init_ltt(struct file *filp, const char *buffer,
                                             ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2554: FILE: kernel/ltt-core.c:2508:
+^I$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2556: FILE: kernel/ltt-core.c:2510:
+			printk("LTT control channel creation failed, errcode: %d\n", control_channel);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2556: FILE: kernel/ltt-core.c:2510:
+			printk("LTT control channel creation failed, errcode: %d\n", control_channel);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2558: FILE: kernel/ltt-core.c:2512:
+			printk("LTT control channel created\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ltt_proc_root_entry"
#2585: FILE: kernel/ltt-core.c:2539:
+	if (ltt_proc_root_entry == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2591: FILE: kernel/ltt-core.c:2545:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!init_entry"
#2593: FILE: kernel/ltt-core.c:2547:
+	if (init_entry == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2604: FILE: kernel/ltt-core.c:2558:
+^I^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2619: FILE: kernel/ltt-core.c:2573:
+EXPORT_SYMBOL(ltt_set_trace_config);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2620: FILE: kernel/ltt-core.c:2574:
+EXPORT_SYMBOL(ltt_get_trace_config);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2621: FILE: kernel/ltt-core.c:2575:
+EXPORT_SYMBOL(ltt_create_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2622: FILE: kernel/ltt-core.c:2576:
+EXPORT_SYMBOL(ltt_create_owned_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2623: FILE: kernel/ltt-core.c:2577:
+EXPORT_SYMBOL(ltt_destroy_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2624: FILE: kernel/ltt-core.c:2578:
+EXPORT_SYMBOL(ltt_destroy_owners_events);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2625: FILE: kernel/ltt-core.c:2579:
+EXPORT_SYMBOL(ltt_log_std_formatted_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2626: FILE: kernel/ltt-core.c:2580:
+EXPORT_SYMBOL(ltt_log_raw_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2627: FILE: kernel/ltt-core.c:2581:
+EXPORT_SYMBOL(ltt_log_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2628: FILE: kernel/ltt-core.c:2582:
+EXPORT_SYMBOL(syscall_entry_trace_active);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2629: FILE: kernel/ltt-core.c:2583:
+EXPORT_SYMBOL(syscall_exit_trace_active);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2630: FILE: kernel/ltt-core.c:2584:
+EXPORT_SYMBOL(ltt_flight_pause);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2631: FILE: kernel/ltt-core.c:2585:
+EXPORT_SYMBOL(ltt_flight_unpause);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223021.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 86 errors, 89 warnings, 172 checks, 2589 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000223021.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
