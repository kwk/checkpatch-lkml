CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!direntry"
#45: FILE: fs/cifs/dir.c:50:
+	if (direntry == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#57: FILE: fs/cifs/dir.c:59:
+		if (temp == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#58: FILE: fs/cifs/dir.c:60:
+			cERROR(1, ("corrupt dentry"));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#66: FILE: fs/cifs/dir.c:66:
+	if (full_path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#81: FILE: fs/cifs/dir.c:81:
+		if (temp == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#92: FILE: fs/cifs/dir.c:89:
+		cERROR(1, ("We did not end path lookup where we expected "
+			   "namelen is %d", namelen));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!direntry"
#102: FILE: fs/cifs/dir.c:108:
+	if (direntry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#114: FILE: fs/cifs/dir.c:117:
+		if (temp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#123: FILE: fs/cifs/dir.c:124:
+	if (full_path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#143: FILE: fs/cifs/dir.c:142:
+		if (temp == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#154: FILE: fs/cifs/dir.c:150:
+		cERROR(1, ("We did not end path lookup where we expected "
+			   "namelen is %d", namelen));

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#167: FILE: fs/cifs/dir.c:176:
+	struct cifsFileInfo *pCifsFile = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#167: FILE: fs/cifs/dir.c:176:
+	struct cifsFileInfo *pCifsFile = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#168: FILE: fs/cifs/dir.c:177:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#168: FILE: fs/cifs/dir.c:177:
+	struct cifsInodeInfo *pCifsInode;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#177: FILE: fs/cifs/dir.c:189:
+	if (full_path == NULL) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#183: FILE: fs/cifs/dir.c:194:
+	if (nd) {
 	    ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#192: FILE: fs/cifs/dir.c:207:
+		if ((nd->intent.open.flags & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL))
[...]
-		else if((nd->intent.open.flags & (O_CREAT | O_TRUNC)) == (O_CREAT | O_TRUNC))
[...]
 			disposition = FILE_OVERWRITE_IF;
[...]
+		else if ((nd->intent.open.flags & O_CREAT) == O_CREAT)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#202: FILE: fs/cifs/dir.c:214:
+			cFYI(1, ("Create flag not set in create function"));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#213: FILE: fs/cifs/dir.c:223:
+	if (buf == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBOpen>
#222: FILE: fs/cifs/dir.c:229:
+	rc = CIFSSMBOpen(xid, pTcon, full_path, disposition, desiredAccess,

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#222: FILE: fs/cifs/dir.c:229:
+	rc = CIFSSMBOpen(xid, pTcon, full_path, disposition, desiredAccess,

CHECK:CAMELCASE: Avoid CamelCase: <desiredAccess>
#222: FILE: fs/cifs/dir.c:229:
+	rc = CIFSSMBOpen(xid, pTcon, full_path, disposition, desiredAccess,

CHECK:CAMELCASE: Avoid CamelCase: <fileHandle>
#223: FILE: fs/cifs/dir.c:230:
+			 CREATE_NOT_DIR, &fileHandle, &oplock, buf,

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBUnixSetPerms>
#240: FILE: fs/cifs/dir.c:240:
+				CIFSSMBUnixSetPerms(xid, pTcon, full_path,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: fs/cifs/dir.c:260:
+						      inode->i_sb,xid);
 						                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#283: FILE: fs/cifs/dir.c:270:
+			cFYI(1, ("Create worked but get_inode_info failed with"
+				 " rc = %d", rc));

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#307: FILE: fs/cifs/dir.c:289:
+				pCifsFile->closePend = FALSE;

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#314: FILE: fs/cifs/dir.c:295:
+					 &pTcon->openFileList);

CHECK:BRACES: braces {} should be used on all arms of this statement
#326: FILE: fs/cifs/dir.c:306:
+					if ((oplock & 0xF) == OPLOCK_EXCLUSIVE) {
[...]
 							newinode));
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/cifs/dir.c:310:
+						cFYI(1, ("Exclusive Oplock granted on inode %p",
 							newinode));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#366: FILE: fs/cifs/dir.c:349:
+	if (full_path == NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: fs/cifs/dir.c:368:
+						      inode->i_sb,xid);
 						                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#419: FILE: fs/cifs/dir.c:408:
+	if (full_path == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_d_revalidate', this function's name, in a string
#459: FILE: fs/cifs/dir.c:494:
+		cFYI(1, ("In cifs_d_revalidate with no inode but name = %s "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#460: FILE: fs/cifs/dir.c:495:
+		cFYI(1, ("In cifs_d_revalidate with no inode but name = %s "
+			 "and dentry 0x%p", direntry->d_name.name, direntry));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 7 warnings, 27 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193535.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
