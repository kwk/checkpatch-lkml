CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: arch/ppc64/kernel/vio.c:145:
+		if ((strncmp(dev->type, ids->type, strlen(ids->type)) == 0) &&
 			device_is_compatible(dev->dev.platform_data, ids->compat))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node_vroot == NULL'
#134: FILE: arch/ppc64/kernel/vio.c:200:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node_vroot->child == NULL'
#134: FILE: arch/ppc64/kernel/vio.c:200:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node_vroot"
#134: FILE: arch/ppc64/kernel/vio.c:200:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node_vroot->child"
#134: FILE: arch/ppc64/kernel/vio.c:200:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "of_node"
#144: FILE: arch/ppc64/kernel/vio.c:210:
+	for (of_node = node_vroot->child; of_node != NULL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#146: FILE: arch/ppc64/kernel/vio.c:212:
+		printk(KERN_DEBUG "%s: processing %p\n", __FUNCTION__, of_node);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#146: FILE: arch/ppc64/kernel/vio.c:212:
+		printk(KERN_DEBUG "%s: processing %p\n", __FUNCTION__, of_node);

CHECK:CAMELCASE: Avoid CamelCase: <HvLpIndexMap>
#155: FILE: arch/ppc64/kernel/vio.c:221:
+	HvLpIndexMap vlan_map = HvLpConfig_getVirtualLanIndexMap();

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <HvLpConfig_getVirtualLanIndexMap>
#155: FILE: arch/ppc64/kernel/vio.c:221:
+	HvLpIndexMap vlan_map = HvLpConfig_getVirtualLanIndexMap();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#228: FILE: arch/ppc64/kernel/vio.c:288:
 static void __devinit vio_dev_release(struct device *dev)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#262: FILE: arch/ppc64/kernel/vio.c:315:
+static struct vio_dev * __devinit vio_register_device_common(

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#262: FILE: arch/ppc64/kernel/vio.c:315:
+static struct vio_dev * __devinit vio_register_device_common(

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#264: FILE: arch/ppc64/kernel/vio.c:317:
+		uint32_t unit_address, struct iommu_table *iommu_table)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#279: FILE: arch/ppc64/kernel/vio.c:332:
+		printk(KERN_ERR "%s: failed to register device %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: arch/ppc64/kernel/vio.c:333:
+		printk(KERN_ERR "%s: failed to register device %s\n",
+				__FUNCTION__, viodev->dev.bus_id);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#280: FILE: arch/ppc64/kernel/vio.c:333:
+				__FUNCTION__, viodev->dev.bus_id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: arch/ppc64/kernel/vio.c:398:
+	if (vio_register_device_common(viodev, of_node->name, of_node->type,
+				*unit_address, vio_build_iommu_table(viodev))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#335: FILE: arch/ppc64/kernel/vio.c:415:
+struct vio_dev *__devinit vio_register_device(char *type, uint32_t unit_num)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*viodev)...) over kmalloc(sizeof(struct vio_dev)...)
#342: FILE: arch/ppc64/kernel/vio.c:422:
+	viodev = kmalloc(sizeof(struct vio_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#355: FILE: arch/ppc64/kernel/vio.c:435:
 void __devinit vio_unregister_device(struct vio_dev *viodev)

CHECK:CAMELCASE: Avoid CamelCase: <xCorrelationToken>
#430: FILE: drivers/block/viodasd.c:638:
+	req = (struct request *)bevent->event.xCorrelationToken;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!d->disk"
#466: FILE: drivers/block/viodasd.c:755:
+	if (d->disk == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: drivers/block/viodasd.c:776:
+ * viodasd_device_table: Used by vio.c to match devices that we $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#490: FILE: drivers/block/viodasd.c:779:
+static struct vio_device_id viodasd_device_table[] __devinitdata = {

CHECK:CAMELCASE: Avoid CamelCase: <iSeries_vio_dev>
#592: FILE: drivers/cdrom/viocd.c:267:
+		dma_free_coherent(iSeries_vio_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: drivers/cdrom/viocd.c:268:
+		dma_free_coherent(iSeries_vio_dev,
+				sizeof(*viocd_unitinfo) * VIOCD_MAX_CD,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: drivers/cdrom/viocd.c:521:
+		dma_unmap_single(di->dev, bevent->token, bevent->len,
 				DMA_FROM_DEVICE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#650: FILE: drivers/cdrom/viocd.c:595:
+		printk(VIOCD_KERN_WARNING "Cannot register viocd CD-ROM %s!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#651: FILE: drivers/cdrom/viocd.c:596:
+		printk(VIOCD_KERN_WARNING "Cannot register viocd CD-ROM %s!\n",
+				c->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#654: FILE: drivers/cdrom/viocd.c:599:
+	printk(VIOCD_KERN_INFO "cd %s is iSeries resource %10.10s "

WARNING:SPLIT_STRING: quoted string split across lines
#655: FILE: drivers/cdrom/viocd.c:600:
+	printk(VIOCD_KERN_INFO "cd %s is iSeries resource %10.10s "
+			"type %4.4s, model %3.3s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gendisk"
#658: FILE: drivers/cdrom/viocd.c:603:
+	if (gendisk == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#659: FILE: drivers/cdrom/viocd.c:604:
+		printk(VIOCD_KERN_WARNING "Cannot create gendisk for %s!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/cdrom/viocd.c:605:
+		printk(VIOCD_KERN_WARNING "Cannot create gendisk for %s!\n",
+				c->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: drivers/cdrom/viocd.c:612:
+	strncpy(gendisk->disk_name, c->name,
+			sizeof(gendisk->disk_name));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: drivers/cdrom/viocd.c:614:
+	snprintf(gendisk->devfs_name, sizeof(gendisk->devfs_name),
+			VIOCD_DEVICE_DEVFS "%d", deviceno);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#672: FILE: drivers/cdrom/viocd.c:617:
+	gendisk->flags = GENHD_FL_CD|GENHD_FL_REMOVABLE;
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: drivers/cdrom/viocd.c:624:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#688: FILE: drivers/cdrom/viocd.c:633:
+		printk(VIOCD_KERN_WARNING

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: drivers/cdrom/viocd.c:642:
+ * viocd_device_table: Used by vio.c to match devices that we $

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#700: FILE: drivers/cdrom/viocd.c:645:
+static struct vio_device_id viocd_device_table[] __devinitdata = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#726: FILE: drivers/cdrom/viocd.c:674:
+		printk(VIOCD_KERN_WARNING "Unable to get major %d for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: drivers/cdrom/viocd.c:675:
+		printk(VIOCD_KERN_WARNING "Unable to get major %d for %s\n",
 				VIOCD_MAJOR, VIOCD_DEVICE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!viocd_queue"
#739: FILE: drivers/cdrom/viocd.c:697:
+	if (viocd_queue == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: drivers/cdrom/viocd.c:721:
+	dma_free_coherent(iSeries_vio_dev,
+			sizeof(*viocd_unitinfo) * VIOCD_MAX_CD,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: drivers/char/viotape.c:468:
+	op->buffer = dma_alloc_coherent(op->dev, count, &op->dmaaddr,
 			GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: drivers/char/viotape.c:560:
+	op->buffer = dma_alloc_coherent(op->dev, count, &op->dmaaddr,
 			GFP_ATOMIC);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: drivers/char/viotape.c:920:
+			dma_free_coherent(op->dev, op->count,
 					op->buffer, op->dmaaddr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#933: FILE: drivers/char/viotape.c:960:
+	class_simple_device_add(tape_class, MKDEV(VIOTAPE_MAJOR, i), NULL,
+			"iseries!vt%d", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: drivers/char/viotape.c:962:
+	class_simple_device_add(tape_class, MKDEV(VIOTAPE_MAJOR, i | 0x80),
+			NULL, "iseries!nvt%d", i);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#936: FILE: drivers/char/viotape.c:963:
+	devfs_mk_cdev(MKDEV(VIOTAPE_MAJOR, i), S_IFCHR | S_IRUSR | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#937: FILE: drivers/char/viotape.c:964:
+	devfs_mk_cdev(MKDEV(VIOTAPE_MAJOR, i), S_IFCHR | S_IRUSR | S_IWUSR,
+			"iseries/vt%d", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/char/viotape.c:966:
+	devfs_mk_cdev(MKDEV(VIOTAPE_MAJOR, i | 0x80),
+			S_IFCHR | S_IRUSR | S_IWUSR, "iseries/nvt%d", i);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#939: FILE: drivers/char/viotape.c:966:
+			S_IFCHR | S_IRUSR | S_IWUSR, "iseries/nvt%d", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#942: FILE: drivers/char/viotape.c:969:
+	printk(VIOTAPE_KERN_INFO "tape %s is iSeries "

WARNING:SPLIT_STRING: quoted string split across lines
#943: FILE: drivers/char/viotape.c:970:
+	printk(VIOTAPE_KERN_INFO "tape %s is iSeries "
+			"resource %10.10s type %4.4s, model %3.3s\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#962: FILE: drivers/char/viotape.c:989:
+ * viotape_device_table: Used by vio.c to match devices that we $

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#965: FILE: drivers/char/viotape.c:992:
+static struct vio_device_id viotape_device_table[] __devinitdata = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dev"
#1132: FILE: drivers/net/iseries_veth.c:1340:
+	if (dev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#1146: FILE: drivers/net/iseries_veth.c:1354:
+	if (dev == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1153: FILE: drivers/net/iseries_veth.c:1361:
+	 * link negotiation */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1162: FILE: drivers/net/iseries_veth.c:1370:
+ * veth_device_table: Used by vio.c to match devices that we $

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1165: FILE: drivers/net/iseries_veth.c:1373:
+static struct vio_device_id veth_device_table[] __devinitdata = {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1284: FILE: include/asm-ppc64/vio.h:49:
 struct vio_dev * __devinit vio_register_device(struct device_node *node_vdev);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1287: FILE: include/asm-ppc64/vio.h:52:
+struct vio_dev * __devinit vio_register_device(char *type, uint32_t unit_num);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1289: FILE: include/asm-ppc64/vio.h:54:
 void __devinit vio_unregister_device(struct vio_dev *dev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000273173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 26 warnings, 36 checks, 1156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000273173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
