WARNING:TYPO_SPELLING: 'filesytem' may be misspelled - perhaps 'filesystem'?
#25: 
until it finds one with a valid filesytem.  This is handy for people that
                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff --recursive --unified --ignore-all-space linux/Documentation/kernel-parameters.txt linux-2.4.0.8/Documentation/kernel-parameters.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: Documentation/kernel-parameters.txt:477:
+^I^I^Ito eight /dev/ entries will be tried in order $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'suceeds' may be misspelled - perhaps 'succeeds'?
#49: FILE: Documentation/kernel-parameters.txt:478:
+			presented until kernel suceeds in mounting a 
 			                       ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#49: FILE: Documentation/kernel-parameters.txt:478:
+^I^I^Ipresented until kernel suceeds in mounting a $

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#50: FILE: Documentation/kernel-parameters.txt:479:
+			filesystem, multiple independant 'root=' entries
 			                     ^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#63: FILE: fs/super.c:22:
+ * ^I^I^ITracy Camp <campt@openmars.com> 11/22/00$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#79: FILE: fs/super.c:1459:
+	if (MAJOR(ROOT_DEV) != UNNAMED_MAJOR) {
 		goto skip_nfs;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#84: FILE: fs/super.c:1463:
+	if (!fs_type) {
 		goto no_nfs;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#98: FILE: fs/super.c:1476:
+	if (!data) {
 		goto no_server;
+		}

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#119: FILE: fs/super.c:1510:
+		if(rd_doload==2) {
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#119: FILE: fs/super.c:1510:
+		if(rd_doload==2) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#129: FILE: fs/super.c:1521:
+printk("VFS: trying to find root device\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#131: FILE: fs/super.c:1523:
+	for(root_device_index = 0; root_device_index < number_root_devs; root_device_index++) {
[...]
+printk("VFS: trying %s at index %d\n",&root_device_name[root_device_index][0], root_device_index);

ERROR:SPACING: space required before the open parenthesis '('
#131: FILE: fs/super.c:1523:
+	for(root_device_index = 0; root_device_index < number_root_devs; root_device_index++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: fs/super.c:1525:
+printk("VFS: trying %s at index %d\n",&root_device_name[root_device_index][0], root_device_index);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#138: FILE: fs/super.c:1525:
+printk("VFS: trying %s at index %d\n",&root_device_name[root_device_index][0], root_device_index);
                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#138: FILE: fs/super.c:1525:
+printk("VFS: trying %s at index %d\n",&root_device_name[root_device_index][0], root_device_index);
                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#139: FILE: fs/super.c:1526:
+		if(root_device_name[root_device_index][0] != '\0')

WARNING:BRACES: braces {} are not necessary for single statement blocks
#139: FILE: fs/super.c:1526:
+		if(root_device_name[root_device_index][0] != '\0')
 	{
+			ROOT_DEV = name_to_kdev_t(&root_device_name[root_device_index][0]); /* translate */
+			}

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#141: FILE: fs/super.c:1528:
+			ROOT_DEV = name_to_kdev_t(&root_device_name[root_device_index][0]); /* translate */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#143: FILE: fs/super.c:1530:
+		devfs_make_root (&root_device_name[root_device_index][0]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: fs/super.c:1531:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: fs/super.c:1531:
+ $

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#145: FILE: fs/super.c:1532:
+		handle = devfs_find_handle (NULL, &root_device_name[root_device_index][0], MAJOR (ROOT_DEV), MINOR (ROOT_DEV), DEVFS_SPECIAL_BLK, 1);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#145: FILE: fs/super.c:1532:
+		handle = devfs_find_handle (NULL, &root_device_name[root_device_index][0], MAJOR (ROOT_DEV), MINOR (ROOT_DEV), DEVFS_SPECIAL_BLK, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#145: FILE: fs/super.c:1532:
+		handle = devfs_find_handle (NULL, &root_device_name[root_device_index][0], MAJOR (ROOT_DEV), MINOR (ROOT_DEV), DEVFS_SPECIAL_BLK, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#145: FILE: fs/super.c:1532:
+		handle = devfs_find_handle (NULL, &root_device_name[root_device_index][0], MAJOR (ROOT_DEV), MINOR (ROOT_DEV), DEVFS_SPECIAL_BLK, 1);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 12)
#148: FILE: fs/super.c:1535:
+		if (handle)  {
 	    unsigned major, minor;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#157: FILE: fs/super.c:1546:
+		if (!ROOT_DEV) {
 		panic("I have no root and I want to scream");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#157: FILE: fs/super.c:1546:
+		if (!ROOT_DEV) {
 		panic("I have no root and I want to scream");
+			}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#163: FILE: fs/super.c:1551:
+		if (!bdev) {
 		panic(__FUNCTION__ ": unable to allocate root device");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#163: FILE: fs/super.c:1551:
+		if (!bdev) {
 		panic(__FUNCTION__ ": unable to allocate root device");
+			}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#170: FILE: fs/super.c:1557:
+		if (!(root_mountflags & MS_RDONLY)) {
 		mode |= FMODE_WRITE;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#170: FILE: fs/super.c:1557:
+		if (!(root_mountflags & MS_RDONLY)) {
 		mode |= FMODE_WRITE;
+			}

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#185: FILE: fs/super.c:1570:
+			printk ("VFS: Cannot open root device \"%s\" or %s\n", &root_device_name[root_device_index][0], kdevname (ROOT_DEV));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: fs/super.c:1570:
+			printk ("VFS: Cannot open root device \"%s\" or %s\n", &root_device_name[root_device_index][0], kdevname (ROOT_DEV));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#185: FILE: fs/super.c:1570:
+			printk ("VFS: Cannot open root device \"%s\" or %s\n", &root_device_name[root_device_index][0], kdevname (ROOT_DEV));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#185: FILE: fs/super.c:1570:
+			printk ("VFS: Cannot open root device \"%s\" or %s\n", &root_device_name[root_device_index][0], kdevname (ROOT_DEV));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: fs/super.c:1571:
+			printk("VFS: Unable to mount root fs on %s\n", kdevname(ROOT_DEV));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: fs/super.c:1583:
+^I^Ifor (fs_type = file_systems ; fs_type ; fs_type = fs_type->next) $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#197: FILE: fs/super.c:1583:
+		for (fs_type = file_systems ; fs_type ; fs_type = fs_type->next) 
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: fs/super.c:1585:
+  ^I^I^Iif (!(fs_type->fs_flags & FS_REQUIRES_DEV)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: fs/super.c:1585:
+  ^I^I^Iif (!(fs_type->fs_flags & FS_REQUIRES_DEV)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: fs/super.c:1585:
+  ^I^I^Iif (!(fs_type->fs_flags & FS_REQUIRES_DEV)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#199: FILE: fs/super.c:1585:
+  			if (!(fs_type->fs_flags & FS_REQUIRES_DEV)) {
   			continue;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#199: FILE: fs/super.c:1585:
+  			if (!(fs_type->fs_flags & FS_REQUIRES_DEV)) {
   			continue;
+				}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#203: FILE: fs/super.c:1588:
+			if (!try_inc_mod_count(fs_type->owner)) {
 			continue;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#203: FILE: fs/super.c:1588:
+			if (!try_inc_mod_count(fs_type->owner)) {
 			continue;
+				}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#209: FILE: fs/super.c:1593:
+			if (sb) {
 			goto mount_it;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#209: FILE: fs/super.c:1593:
+			if (sb) {
 			goto mount_it;
+				}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: fs/super.c:1600:
+		printk("VFS: Unable to mount root fs on %s\n", kdevname(ROOT_DEV));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#219: FILE: fs/super.c:1602:
+	printk("VFS: Please append a correct \"root=\" boot option\n");

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#226: FILE: fs/super.c:1606:
+	printk ("VFS: Mounted root (%s filesystem)%s.\n", fs_type->name, (sb->s_flags & MS_RDONLY) ? " readonly" : "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: fs/super.c:1606:
+	printk ("VFS: Mounted root (%s filesystem)%s.\n", fs_type->name, (sb->s_flags & MS_RDONLY) ? " readonly" : "");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#226: FILE: fs/super.c:1606:
+	printk ("VFS: Mounted root (%s filesystem)%s.\n", fs_type->name, (sb->s_flags & MS_RDONLY) ? " readonly" : "");

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#230: FILE: fs/super.c:1608:
+		devfs_mk_symlink (NULL, "root", DEVFS_FL_DEFAULT, path + 5 + path_start, NULL, NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#230: FILE: fs/super.c:1608:
+		devfs_mk_symlink (NULL, "root", DEVFS_FL_DEFAULT, path + 5 + path_start, NULL, NULL);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#235: FILE: fs/super.c:1612:
 	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#235: FILE: fs/super.c:1612:
+	else {
 		vfsmnt = add_vfsmnt(NULL, sb->s_root, "/dev/root");
+		}

CHECK:BRACES: Unbalanced braces around else statement
#235: FILE: fs/super.c:1612:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#243: FILE: fs/super.c:1619:
+		if (bdev) {
 			bdput(bdev); /* sb holds a reference */
+			}

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#253: FILE: fs/super.c:1764:
+printk("fs/super.c:change_root() called\n");

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#253: FILE: fs/super.c:1764:
+printk("fs/super.c:change_root() called\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#263: FILE: fs/super.c:1784:
+/* this function seems to only be used when after an initrd usage,
+* so the actual value of ROOT_DEV hasn't been determined until mount_root

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: fs/super.c:1787:
+* a call to mount_root because mount_root ignores the ROOT_DEV value $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: fs/super.c:1788:
+* except for nfs and ram mount attempts going in, but will realise $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: fs/super.c:1789:
+* to not mount RAM again so it should be okay to leave this be. $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: include/linux/fs.h:1206:
+extern kdev_t name_to_kdev_t(char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#285: FILE: include/linux/fs.h:1206:
+extern kdev_t name_to_kdev_t(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: init/main.c:11:
+ *  11/22/00 - added support for up to 8 comma separated and multiple root= $

WARNING:TYPO_SPELLING: 'arguements' may be misspelled - perhaps 'arguments'?
#298: FILE: init/main.c:12:
+ *  arguements. Modified root_dev_setup, and name_to_kdev_t, other changes in
     ^^^^^^^^^^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#310: FILE: init/main.c:138:
+int number_root_devs = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#320: FILE: init/main.c:266:
+kdev_t __init name_to_kdev_t(char *line) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#337: FILE: init/main.c:282:
+	while (dev->name);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#337: FILE: init/main.c:282:
 	}
+	while (dev->name);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#343: FILE: init/main.c:286:
+static int __init root_dev_setup(char *line) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: init/main.c:290:
+/* number_root_devs is initially 0 and not touched except for $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#353: FILE: init/main.c:291:
+/* number_root_devs is initially 0 and not touched except for 
+incrementing, so this function should be re-callable with the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#354: FILE: init/main.c:292:
+desired results */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#355: FILE: init/main.c:293:
+	if (strncmp (line, "/dev/", 5) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: init/main.c:293:
+	if (strncmp (line, "/dev/", 5) == 0) {
+		line += 5;
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#358: FILE: init/main.c:296:
+	memset (root_device_name, 0, sizeof root_device_name[number_root_devs]);

WARNING:SIZEOF_PARENTHESIS: sizeof root_device_name[number_root_devs] should be sizeof(root_device_name[number_root_devs])
#358: FILE: init/main.c:296:
+	memset (root_device_name, 0, sizeof root_device_name[number_root_devs]);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#359: FILE: init/main.c:297:
+	for (i = 0; i < sizeof root_device_name[number_root_devs] - 1; ++i) {
 	    ch = line[i];

WARNING:SIZEOF_PARENTHESIS: sizeof root_device_name[number_root_devs] should be sizeof(root_device_name[number_root_devs])
#359: FILE: init/main.c:297:
+	for (i = 0; i < sizeof root_device_name[number_root_devs] - 1; ++i) {

WARNING:TABSTOP: Statements should start on a tabstop
#363: FILE: init/main.c:299:
+	    if ( ch == ',') {

ERROR:SPACING: space prohibited after that open parenthesis '('
#363: FILE: init/main.c:299:
+	    if ( ch == ',') {

ERROR:SPACING: space required before the open parenthesis '('
#364: FILE: init/main.c:300:
+		if(number_root_devs == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#364: FILE: init/main.c:300:
+		if(number_root_devs == 0) {
+			ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]); 
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: init/main.c:301:
+^I^I^IROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]); $

ERROR:SPACING: space required before the open parenthesis '('
#368: FILE: init/main.c:304:
+		if(number_root_devs >= 8) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#368: FILE: init/main.c:304:
+		if(number_root_devs >= 8) {
+			break;
 	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#374: FILE: init/main.c:310:
+		if (strncmp (line, "/dev/", 5) == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#374: FILE: init/main.c:310:
+		if (strncmp (line, "/dev/", 5) == 0) {
+			line += 5;
+			}

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: init/main.c:313:
+^I        ch = line[i];$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#378: FILE: init/main.c:314:
+		memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#378: FILE: init/main.c:314:
+		memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);

WARNING:SIZEOF_PARENTHESIS: sizeof root_device_name[number_root_devs] should be sizeof(root_device_name[number_root_devs])
#378: FILE: init/main.c:314:
+		memset (root_device_name[number_root_devs], 0, sizeof root_device_name[number_root_devs]);

WARNING:TABSTOP: Statements should start on a tabstop
#380: FILE: init/main.c:316:
+	    if ( isspace (ch) || (ch == '\0') ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#380: FILE: init/main.c:316:
+	    if ( isspace (ch) || (ch == '\0') ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#380: FILE: init/main.c:316:
+	    if ( isspace (ch) || (ch == '\0') ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#380: FILE: init/main.c:316:
+	    if ( isspace (ch) || (ch == '\0') ) {

ERROR:SPACING: space required before the open parenthesis '('
#381: FILE: init/main.c:317:
+		if(number_root_devs == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#381: FILE: init/main.c:317:
+		if(number_root_devs == 0) {
+			ROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]); 
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: init/main.c:318:
+^I^I^IROOT_DEV = name_to_kdev_t(&root_device_name[number_root_devs][0]); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#389: FILE: init/main.c:325:
+printk("root_dev_setup number_root_devs: %d\n",number_root_devs);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: init/main.c:325:
+printk("root_dev_setup number_root_devs: %d\n",number_root_devs);
                                               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'root_dev_setup', this function's name, in a string
#389: FILE: init/main.c:325:
+printk("root_dev_setup number_root_devs: %d\n",number_root_devs);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#402: FILE: init/main.c:579:
+		printk(KERN_CRIT "initrd overwritten (0x%08lx < 0x%08lx) - " "disabling it.\n",initrd_start,min_low_pfn << PAGE_SHIFT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#402: FILE: init/main.c:579:
+		printk(KERN_CRIT "initrd overwritten (0x%08lx < 0x%08lx) - " "disabling it.\n",initrd_start,min_low_pfn << PAGE_SHIFT);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: init/main.c:579:
+		printk(KERN_CRIT "initrd overwritten (0x%08lx < 0x%08lx) - " "disabling it.\n",initrd_start,min_low_pfn << PAGE_SHIFT);
 		                                                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: init/main.c:579:
+		printk(KERN_CRIT "initrd overwritten (0x%08lx < 0x%08lx) - " "disabling it.\n",initrd_start,min_low_pfn << PAGE_SHIFT);
 		                                                                                           ^

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#402: FILE: init/main.c:579:
+		printk(KERN_CRIT "initrd overwritten (0x%08lx < 0x%08lx) - " "disabling it.\n",initrd_start,min_low_pfn << PAGE_SHIFT);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#415: FILE: init/main.c:728:
+	if (initrd_start && mount_initrd) { root_mountflags &= ~MS_RDONLY; }

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#415: FILE: init/main.c:728:
+	if (initrd_start && mount_initrd) { root_mountflags &= ~MS_RDONLY; }
[...]
+	else { mount_initrd =0; }
[...]

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#416: FILE: init/main.c:729:
+	else { mount_initrd =0; }
 	                    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#416: FILE: init/main.c:729:
+	else { mount_initrd =0; }

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#416: FILE: init/main.c:729:
+	if (initrd_start && mount_initrd) { root_mountflags &= ~MS_RDONLY; }
+	else { mount_initrd =0; }

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#426: FILE: init/main.c:750:
+	if (mount_initrd && ROOT_DEV != real_root_dev && MAJOR(ROOT_DEV) == RAMDISK_MAJOR && MINOR(ROOT_DEV) == 0) {

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#432: FILE: init/main.c:755:
+		if (pid>0) {
 		       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#445: FILE: init/main.c:763:
+			if (error) {
+				printk(KERN_ERR "Change root to /initrd: error %d\n",error);
+				}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#446: FILE: init/main.c:764:
+				printk(KERN_ERR "Change root to /initrd: error %d\n",error);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: init/main.c:764:
+				printk(KERN_ERR "Change root to /initrd: error %d\n",error);
 				                                                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564244.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 81 warnings, 2 checks, 381 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564244.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
