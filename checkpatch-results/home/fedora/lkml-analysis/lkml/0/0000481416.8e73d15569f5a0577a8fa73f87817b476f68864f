WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
kdb.  It's set up to build a kernel with the -finstrument-functions compiler

WARNING:TYPO_SPELLING: 'tre' may be misspelled - perhaps 'tree'?
#67: 
   tre <function list>  Add functions which should be traced.
   ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'tre' may be misspelled - perhaps 'tree'?
#69: 
   tre			Default to trace everything
   ^^^

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#75: 
   trc			Clear list of functions with tracing explictly
      			                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'defintions' may be misspelled - perhaps 'definitions'?
#92: 
   defintions for the same symbol.
   ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'benifit' may be misspelled - perhaps 'benefit'?
#114: 
   don't get much performance benifit out of inlining anyway.
                              ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: arch/i386/boot/compressed/misc.c:387:
+        __attribute__ ((no_instrument_function));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: arch/i386/boot/compressed/misc.c:387:
+        __attribute__ ((no_instrument_function));$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#180: FILE: arch/i386/boot/compressed/misc.c:388:
+void __cyg_profile_func_exit(void *, void *)

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#180: FILE: arch/i386/boot/compressed/misc.c:388:
+void __cyg_profile_func_exit(void *, void *)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: arch/i386/boot/compressed/misc.c:389:
+        __attribute__ ((no_instrument_function));                               $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: arch/i386/boot/compressed/misc.c:389:
+        __attribute__ ((no_instrument_function));                               $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: arch/i386/boot/compressed/misc.c:389:
+        __attribute__ ((no_instrument_function));                               $

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#209: FILE: arch/i386/kdb/kdbasupport.c:1033:
+int kdba_setjmp(kdb_jmp_buf *jb)
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#234: FILE: drivers/parport/parport_pc.c:263:
+#if 0

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#254: FILE: include/asm-i386/current.h:8:
+static inline struct task_struct * get_current(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#275: FILE: kdb/kdb_tr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: kdb/kdb_tr.c:11:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: kdb/kdb_tr.c:14:
+ * ^Itr <trace buffer offset>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: kdb/kdb_tr.c:15:
+ * ^I^IDisplay content of trace buffer.$

WARNING:TYPO_SPELLING: 'tre' may be misspelled - perhaps 'tree'?
#290: FILE: kdb/kdb_tr.c:16:
+ *	tre
   	^^^

WARNING:TYPO_SPELLING: 'tre' may be misspelled - perhaps 'tree'?
#291: FILE: kdb/kdb_tr.c:17:
+ *	tre <functions>
   	^^^

WARNING:REPEATED_WORD: Possible repeated word: 'tre'
#291: FILE: kdb/kdb_tr.c:17:
+ *	tre
+ *	tre <functions>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: kdb/kdb_tr.c:18:
+ * ^I^IEnable tracing of all function calls, or the$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: kdb/kdb_tr.c:19:
+ *^I^Ispecified functions.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: kdb/kdb_tr.c:20:
+ *^Itrd $

WARNING:TYPO_SPELLING: 'tre' may be misspelled - perhaps 'tree'?
#295: FILE: kdb/kdb_tr.c:21:
+ *	tre <functions>
   	^^^

WARNING:TYPO_SPELLING: 'specifed' may be misspelled - perhaps 'specified'?
#296: FILE: kdb/kdb_tr.c:22:
+ * 		Disable tracing all functions, or the specifed
    		                                      ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: kdb/kdb_tr.c:22:
+ * ^I^IDisable tracing all functions, or the specifed$

WARNING:REPEATED_WORD: Possible repeated word: 'trc'
#299: FILE: kdb/kdb_tr.c:25:
+ *	trc
+ *	trc <function>

WARNING:TYPO_SPELLING: 'explicity' may be misspelled - perhaps 'explicitly'?
#303: FILE: kdb/kdb_tr.c:29:
+ *		Print list of functions which have been explicity
   		                                        ^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: kdb/kdb_tr.c:30:
+ * ^I^Ienabled or disabled for tracing.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: kdb/kdb_tr.c:33:
+ *^I^IGlobal control to disable/re-enable tracing.  You $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: kdb/kdb_tr.c:36:
+ * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#327: FILE: kdb/kdb_tr.c:53:
+struct trc trc = { TRC_ENABLE, TRC_ENABLE, trc_buf, TRC_SZ-1, 0, 0 };
                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: kdb/kdb_tr.c:59:
+^Ikdb_register_repeat("tr", kdb_tr, "<range>",^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: kdb/kdb_tr.c:60:
+	kdb_register_repeat("tr", kdb_tr, "<range>",	
+		"Display kernel trace", 0, KDB_REPEAT_NONE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: kdb/kdb_tr.c:61:
+^Ikdb_register_repeat("trp", kdb_trp, "",^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: kdb/kdb_tr.c:62:
+	kdb_register_repeat("trp", kdb_trp, "",	
+		"Display trace enable/disable status", 0, KDB_REPEAT_NONE);

WARNING:TYPO_SPELLING: 'tre' may be misspelled - perhaps 'tree'?
#337: FILE: kdb/kdb_tr.c:63:
+	kdb_register_repeat("tre", kdb_tre, "<func>",
 	                     ^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: kdb/kdb_tr.c:64:
+	kdb_register_repeat("tre", kdb_tre, "<func>",
+		"Enable trace for function", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: kdb/kdb_tr.c:66:
+	kdb_register_repeat("trd", kdb_trd, "<func>",
+		"Disable trace for function", 0, KDB_REPEAT_NONE);

WARNING:TYPO_SPELLING: 'disble' may be misspelled - perhaps 'disable'?
#342: FILE: kdb/kdb_tr.c:68:
+		"Clear per function trace enable/disble", 0, KDB_REPEAT_NONE);
 		                                 ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: kdb/kdb_tr.c:68:
+	kdb_register_repeat("trc", kdb_trc, "<func>",
+		"Clear per function trace enable/disble", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: kdb/kdb_tr.c:70:
+	kdb_register_repeat("trstop", kdb_trstop, "",
+		"Disable kernel trace", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: kdb/kdb_tr.c:72:
+	kdb_register_repeat("trstart", kdb_trstart, "",
+		"Enable kernel trace", 0, KDB_REPEAT_NONE);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#348: FILE: kdb/kdb_tr.c:74:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#354: FILE: kdb/kdb_tr.c:80:
+int trc_hash_cnt = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:SPACING: No space is necessary after a cast
#358: FILE: kdb/kdb_tr.c:84:
+	unsigned int i = (unsigned int) addr;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: kdb/kdb_tr.c:89:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#369: FILE: kdb/kdb_tr.c:95:
+	for ( ; (flags = trc_hash[i].flags) ; i = (i+1) % TRC_HASH_SZ)
 	                                            ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#372: FILE: kdb/kdb_tr.c:98:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#375: FILE: kdb/kdb_tr.c:101:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#388: FILE: kdb/kdb_tr.c:114:
+	for ( ; trc_hash[i].flags ; i = (i+1) % TRC_HASH_SZ)
 	                                  ^

WARNING:TYPO_SPELLING: 'Seaches' may be misspelled - perhaps 'Searches'?
#394: FILE: kdb/kdb_tr.c:120:
+	 * Seaches take literally forever if the table is completly full.
 	   ^^^^^^^

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#394: FILE: kdb/kdb_tr.c:120:
+	 * Seaches take literally forever if the table is completly full.
 	                                                  ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#397: FILE: kdb/kdb_tr.c:123:
+	if (trc_hash_cnt >= TRC_HASH_SZ/2) {
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#412: FILE: kdb/kdb_tr.c:138:
+	for ( ; ; i = (i+1) % TRC_HASH_SZ) {
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#413: FILE: kdb/kdb_tr.c:139:
+		if (!(flags = trc_hash[i].flags))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#428: FILE: kdb/kdb_tr.c:154:
+	i = (i+1) % TRC_HASH_SZ;
 	      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#429: FILE: kdb/kdb_tr.c:155:
+	for ( ; (flags  = trc_hash[i].flags); i = (i+1) % TRC_HASH_SZ) {
 	                                            ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#444: FILE: kdb/kdb_tr.c:170:
+trc_clr_all_flags( void )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#444: FILE: kdb/kdb_tr.c:170:
+trc_clr_all_flags( void )

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#454: FILE: kdb/kdb_tr.c:180:
+}
+void

ERROR:SPACING: space prohibited after that open parenthesis '('
#456: FILE: kdb/kdb_tr.c:182:
+trc_print_hash( void )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#456: FILE: kdb/kdb_tr.c:182:
+trc_print_hash( void )

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#470: FILE: kdb/kdb_tr.c:196:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: kdb/kdb_tr.c:200:
+ * Functions to disable/re-enable the trace on entry to kdb.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: kdb/kdb_tr.c:201:
+ */ $

ERROR:SPACING: space prohibited after that open parenthesis '('
#476: FILE: kdb/kdb_tr.c:202:
+void kdb_trc_disable( void )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#476: FILE: kdb/kdb_tr.c:202:
+void kdb_trc_disable( void )

ERROR:SPACING: space prohibited after that open parenthesis '('
#487: FILE: kdb/kdb_tr.c:213:
+void kdb_trc_continue( void )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#487: FILE: kdb/kdb_tr.c:213:
+void kdb_trc_continue( void )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#497: FILE: kdb/kdb_tr.c:223:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#503: FILE: kdb/kdb_tr.c:229:
+	if ((i = tp->offset++) == ~0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tp->buf[i & tp->mask]
#505: FILE: kdb/kdb_tr.c:231:
+	return(&(tp->buf[i & tp->mask]));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: kdb/kdb_tr.c:247:
+	rdtsc(t1,t2);
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#549: FILE: kdb/kdb_tr.c:275:
+	rdtsc(t1,t2);
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#567: FILE: kdb/kdb_tr.c:293:
+	rdtsc(t1,t2);
 	        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#576: FILE: kdb/kdb_tr.c:302:
+
+

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __trace_stop() should probably be void __trace_stop(void)
#577: FILE: kdb/kdb_tr.c:303:
+void __trace_stop()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#598: FILE: kdb/kdb_tr.c:324:
+	if ((s = kdbgetenv("TIME_FORMAT")))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: kdb/kdb_tr.c:326:
+^I^I^Iif (tfname[i] && strcmp(tfname[i], s) == 0) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#606: FILE: kdb/kdb_tr.c:332:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#625: FILE: kdb/kdb_tr.c:351:
+^I$

WARNING:SPACING: space prohibited before semicolon
#628: FILE: kdb/kdb_tr.c:354:
+	for (n = 0; n < 63 && dt > (1LL << n);  n++) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#628: FILE: kdb/kdb_tr.c:354:
+	for (n = 0; n < 63 && dt > (1LL << n);  n++) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#632: FILE: kdb/kdb_tr.c:358:
+	if (dt < 1000*cycles) {
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#636: FILE: kdb/kdb_tr.c:362:
+	} else if (dt < 1000000*cycles) {
 	                       ^

WARNING:SPACING: space prohibited before semicolon
#646: FILE: kdb/kdb_tr.c:372:
+	for (n = 0; n < 63 && dt > (1LL << n);  n++) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#646: FILE: kdb/kdb_tr.c:372:
+	for (n = 0; n < 63 && dt > (1LL << n);  n++) ;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#657: FILE: kdb/kdb_tr.c:383:
+	dt += de/2;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#681: FILE: kdb/kdb_tr.c:407:
+	tf =get_time_format();
 	   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#684: FILE: kdb/kdb_tr.c:410:
+		t = &(tp->buf[(tp->offset-1) & tp->mask]);
 		                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tp->buf[(tp->offset-1) & tp->mask]
#684: FILE: kdb/kdb_tr.c:410:
+		t = &(tp->buf[(tp->offset-1) & tp->mask]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#686: FILE: kdb/kdb_tr.c:412:
+		t = &(tp->buf[(tp->offset-from-1) & tp->mask]);
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#686: FILE: kdb/kdb_tr.c:412:
+		t = &(tp->buf[(tp->offset-from-1) & tp->mask]);
 		                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tp->buf[(tp->offset-from-1) & tp->mask]
#686: FILE: kdb/kdb_tr.c:412:
+		t = &(tp->buf[(tp->offset-from-1) & tp->mask]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#690: FILE: kdb/kdb_tr.c:416:
+		t = &(tp->buf[(tp->offset-i-1) & tp->mask]);
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#690: FILE: kdb/kdb_tr.c:416:
+		t = &(tp->buf[(tp->offset-i-1) & tp->mask]);
 		                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tp->buf[(tp->offset-i-1) & tp->mask]
#690: FILE: kdb/kdb_tr.c:416:
+		t = &(tp->buf[(tp->offset-i-1) & tp->mask]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#692: FILE: kdb/kdb_tr.c:418:
+		if (tf == absolute)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#694: FILE: kdb/kdb_tr.c:420:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: kdb/kdb_tr.c:433:
+			kdb_printf("         fp=%08lx args = %08lx %08lx %08lx\n",
+				t->a3, t->a4, t->a5, t->a6);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#712: FILE: kdb/kdb_tr.c:438:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#715: FILE: kdb/kdb_tr.c:441:
+{                                                                               $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#726: FILE: kdb/kdb_tr.c:452:
+		from = simple_strtoul(argv[1], NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#728: FILE: kdb/kdb_tr.c:454:
+		to = simple_strtoul(argv[2], NULL, 10);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#730: FILE: kdb/kdb_tr.c:456:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: kdb/kdb_tr.c:461:
+{                                                                               $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#740: FILE: kdb/kdb_tr.c:466:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: kdb/kdb_tr.c:471:
+{                                                                               $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#750: FILE: kdb/kdb_tr.c:476:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: kdb/kdb_tr.c:481:
+{                                                                               $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: kdb/kdb_tr.c:494:
+^I^I^I^I &addr, &offset, NULL, regs); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: kdb/kdb_tr.c:494:
+			diag = kdbgetaddrarg(argc, argv, &nextarg,
+				 &addr, &offset, NULL, regs); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#779: FILE: kdb/kdb_tr.c:505:
+{                                                                               $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: kdb/kdb_tr.c:518:
+^I^I^I^I &addr, &offset, NULL, regs); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: kdb/kdb_tr.c:518:
+			diag = kdbgetaddrarg(argc, argv, &nextarg,
+				 &addr, &offset, NULL, regs); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#799: FILE: kdb/kdb_tr.c:525:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: kdb/kdb_tr.c:529:
+{                                                                               $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: kdb/kdb_tr.c:542:
+^I^I^I^I &addr, &offset, NULL, regs); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: kdb/kdb_tr.c:542:
+			diag = kdbgetaddrarg(argc, argv, &nextarg,
+				 &addr, &offset, NULL, regs); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: kdb/kdb_tr.c:549:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: kdb/kdb_tr.c:553:
+{                                                                               $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: kdb/kdb_tr.c:558:
+	kdb_printf("Tracing %s by default.\n",
+		tp->enable_save&TRC_ENABLE?"enabled":"disabled");

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#832: FILE: kdb/kdb_tr.c:558:
+		tp->enable_save&TRC_ENABLE?"enabled":"disabled");
 		               ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#832: FILE: kdb/kdb_tr.c:558:
+		tp->enable_save&TRC_ENABLE?"enabled":"disabled");
 		                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#832: FILE: kdb/kdb_tr.c:558:
+		tp->enable_save&TRC_ENABLE?"enabled":"disabled");
 		                                    ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#834: FILE: kdb/kdb_tr.c:560:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: kdb/kdb_tr.c:564:
+ * The calls for these functions are normally not generated because $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#846: FILE: kdb/kdb_tr.c:572:
+	printk(KERN_WARNING "__br_lock_usage_bug called\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__br_lock_usage_bug', this function's name, in a string
#846: FILE: kdb/kdb_tr.c:572:
+	printk(KERN_WARNING "__br_lock_usage_bug called\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#851: FILE: kdb/kdb_tr.c:577:
+	printk(KERN_WARNING "__this_fixmap_does_not_exist called\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__this_fixmap_does_not_exist', this function's name, in a string
#851: FILE: kdb/kdb_tr.c:577:
+	printk(KERN_WARNING "__this_fixmap_does_not_exist called\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#857: FILE: kdb/kdb_tr.c:583:
+{
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#868: FILE: kdb/kdb_tr.c:594:
+		t = &(tp->buf[(tp->offset-i-1) & tp->mask]);
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#868: FILE: kdb/kdb_tr.c:594:
+		t = &(tp->buf[(tp->offset-i-1) & tp->mask]);
 		                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tp->buf[(tp->offset-i-1) & tp->mask]
#868: FILE: kdb/kdb_tr.c:594:
+		t = &(tp->buf[(tp->offset-i-1) & tp->mask]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#869: FILE: kdb/kdb_tr.c:595:
+		printk("%s %08x ", trc_tname[t->type],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: kdb/kdb_tr.c:596:
+		printk("%s %08x ", trc_tname[t->type],
+			t->time);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#871: FILE: kdb/kdb_tr.c:597:
+		printk("%08lx ", (kdb_machreg_t)t->a1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#872: FILE: kdb/kdb_tr.c:598:
+		printk("%08lx ", (kdb_machreg_t)t->a2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#873: FILE: kdb/kdb_tr.c:599:
+		printk("\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#880: FILE: kdb/kdb_tr.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: kdb/kdb_tr.h:4:
+ * $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#890: FILE: kdb/kdb_tr.h:11:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#891: FILE: kdb/kdb_tr.h:12:
+#define rdtsc(low,high) \
                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#891: FILE: kdb/kdb_tr.h:12:
+#define rdtsc(low,high) \
+     __asm__ __volatile__("rdtsc" : "=a" (low), "=d" (high))                    

ERROR:TRAILING_WHITESPACE: trailing whitespace
#892: FILE: kdb/kdb_tr.h:13:
+     __asm__ __volatile__("rdtsc" : "=a" (low), "=d" (high))                    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: kdb/kdb_tr.h:13:
+     __asm__ __volatile__("rdtsc" : "=a" (low), "=d" (high))                    $

WARNING:SPACING: space prohibited before semicolon
#906: FILE: kdb/kdb_tr.h:27:
+	unsigned int	type: 8 ;

WARNING:SPACING: space prohibited before semicolon
#907: FILE: kdb/kdb_tr.h:28:
+	unsigned int	timeu : 24 ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: kdb/kdb_tr.h:46:
+ * tracing on a per function basis.  $

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#938: FILE: kdb/kdb_tr.h:59:
+void __cyg_profile_func_enter(kdb_machreg_t , kdb_machreg_t )
                                             ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#938: FILE: kdb/kdb_tr.h:59:
+void __cyg_profile_func_enter(kdb_machreg_t , kdb_machreg_t )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#938: FILE: kdb/kdb_tr.h:59:
+void __cyg_profile_func_enter(kdb_machreg_t , kdb_machreg_t )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#938: FILE: kdb/kdb_tr.h:59:
+void __cyg_profile_func_enter(kdb_machreg_t , kdb_machreg_t )

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#941: FILE: kdb/kdb_tr.h:62:
+void __cyg_profile_func_exit(kdb_machreg_t , kdb_machreg_t )
                                            ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#941: FILE: kdb/kdb_tr.h:62:
+void __cyg_profile_func_exit(kdb_machreg_t , kdb_machreg_t )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#941: FILE: kdb/kdb_tr.h:62:
+void __cyg_profile_func_exit(kdb_machreg_t , kdb_machreg_t )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#941: FILE: kdb/kdb_tr.h:62:
+void __cyg_profile_func_exit(kdb_machreg_t , kdb_machreg_t )

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#944: FILE: kdb/kdb_tr.h:65:
+void __trace_user(kdb_machreg_t , kdb_machreg_t )
                                 ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#944: FILE: kdb/kdb_tr.h:65:
+void __trace_user(kdb_machreg_t , kdb_machreg_t )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#944: FILE: kdb/kdb_tr.h:65:
+void __trace_user(kdb_machreg_t , kdb_machreg_t )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#944: FILE: kdb/kdb_tr.h:65:
+void __trace_user(kdb_machreg_t , kdb_machreg_t )

ERROR:SPACING: space prohibited after that open parenthesis '('
#947: FILE: kdb/kdb_tr.h:68:
+void __trace_stop( void )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#947: FILE: kdb/kdb_tr.h:68:
+void __trace_stop( void )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#947: FILE: kdb/kdb_tr.h:68:
+void __trace_stop( void )

ERROR:SPACING: space prohibited after that open parenthesis '('
#950: FILE: kdb/kdb_tr.h:71:
+void kdb_trc_disable( void )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#950: FILE: kdb/kdb_tr.h:71:
+void kdb_trc_disable( void )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#950: FILE: kdb/kdb_tr.h:71:
+void kdb_trc_disable( void )

ERROR:SPACING: space prohibited after that open parenthesis '('
#953: FILE: kdb/kdb_tr.h:74:
+void kdb_trc_continue( void )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#953: FILE: kdb/kdb_tr.h:74:
+void kdb_trc_continue( void )

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#953: FILE: kdb/kdb_tr.h:74:
+void kdb_trc_continue( void )

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#962: FILE: kdb/kdb_tr.h:83:
+int kdb_tr(int , const char **, const char **, struct pt_regs *);
                ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#962: FILE: kdb/kdb_tr.h:83:
+int kdb_tr(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#962: FILE: kdb/kdb_tr.h:83:
+int kdb_tr(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#962: FILE: kdb/kdb_tr.h:83:
+int kdb_tr(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#962: FILE: kdb/kdb_tr.h:83:
+int kdb_tr(int , const char **, const char **, struct pt_regs *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#963: FILE: kdb/kdb_tr.h:84:
+int kdb_trstop(int , const char **, const char **, struct pt_regs *);
                    ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#963: FILE: kdb/kdb_tr.h:84:
+int kdb_trstop(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#963: FILE: kdb/kdb_tr.h:84:
+int kdb_trstop(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#963: FILE: kdb/kdb_tr.h:84:
+int kdb_trstop(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#963: FILE: kdb/kdb_tr.h:84:
+int kdb_trstop(int , const char **, const char **, struct pt_regs *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#964: FILE: kdb/kdb_tr.h:85:
+int kdb_trstart(int , const char **, const char **, struct pt_regs *);
                     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#964: FILE: kdb/kdb_tr.h:85:
+int kdb_trstart(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#964: FILE: kdb/kdb_tr.h:85:
+int kdb_trstart(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#964: FILE: kdb/kdb_tr.h:85:
+int kdb_trstart(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#964: FILE: kdb/kdb_tr.h:85:
+int kdb_trstart(int , const char **, const char **, struct pt_regs *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#965: FILE: kdb/kdb_tr.h:86:
+int kdb_trd(int , const char **, const char **, struct pt_regs *);
                 ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#965: FILE: kdb/kdb_tr.h:86:
+int kdb_trd(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#965: FILE: kdb/kdb_tr.h:86:
+int kdb_trd(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#965: FILE: kdb/kdb_tr.h:86:
+int kdb_trd(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#965: FILE: kdb/kdb_tr.h:86:
+int kdb_trd(int , const char **, const char **, struct pt_regs *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#966: FILE: kdb/kdb_tr.h:87:
+int kdb_tre(int , const char **, const char **, struct pt_regs *);
                 ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#966: FILE: kdb/kdb_tr.h:87:
+int kdb_tre(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#966: FILE: kdb/kdb_tr.h:87:
+int kdb_tre(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#966: FILE: kdb/kdb_tr.h:87:
+int kdb_tre(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#966: FILE: kdb/kdb_tr.h:87:
+int kdb_tre(int , const char **, const char **, struct pt_regs *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#967: FILE: kdb/kdb_tr.h:88:
+int kdb_trc(int , const char **, const char **, struct pt_regs *);
                 ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#967: FILE: kdb/kdb_tr.h:88:
+int kdb_trc(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#967: FILE: kdb/kdb_tr.h:88:
+int kdb_trc(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#967: FILE: kdb/kdb_tr.h:88:
+int kdb_trc(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#967: FILE: kdb/kdb_tr.h:88:
+int kdb_trc(int , const char **, const char **, struct pt_regs *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#968: FILE: kdb/kdb_tr.h:89:
+int kdb_trp(int , const char **, const char **, struct pt_regs *);
                 ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#968: FILE: kdb/kdb_tr.h:89:
+int kdb_trp(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#968: FILE: kdb/kdb_tr.h:89:
+int kdb_trp(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#968: FILE: kdb/kdb_tr.h:89:
+int kdb_trp(int , const char **, const char **, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#968: FILE: kdb/kdb_tr.h:89:
+int kdb_trp(int , const char **, const char **, struct pt_regs *);

WARNING:TYPO_SPELLING: 'automaticly' may be misspelled - perhaps 'automatically'?
#977: FILE: kdb/kdbmain.c:95:
+/* Hooks to automaticly disable kernel trace on entry to kdb */
             ^^^^^^^^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#979: FILE: kdb/kdbmain.c:97:
+extern void kdb_trc_continue(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#980: FILE: kdb/kdbmain.c:98:
+extern void kdb_trc_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1060: FILE: kernel/ksyms.c:577:
+extern void __this_fixmap_does_not_exist(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1061: FILE: kernel/ksyms.c:578:
+extern void __cyg_profile_func_enter(void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1061: FILE: kernel/ksyms.c:578:
+extern void __cyg_profile_func_enter(void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1061: FILE: kernel/ksyms.c:578:
+extern void __cyg_profile_func_enter(void *, void *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1062: FILE: kernel/ksyms.c:579:
+extern void __cyg_profile_func_exit(void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1062: FILE: kernel/ksyms.c:579:
+extern void __cyg_profile_func_exit(void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1062: FILE: kernel/ksyms.c:579:
+extern void __cyg_profile_func_exit(void *, void *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1063: FILE: kernel/ksyms.c:580:
+extern void __trace_user(void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1063: FILE: kernel/ksyms.c:580:
+extern void __trace_user(void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1063: FILE: kernel/ksyms.c:580:
+extern void __trace_user(void *, void *);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __trace_stop() should probably be void __trace_stop(void)
#1064: FILE: kernel/ksyms.c:581:
+extern void __trace_stop();

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1064: FILE: kernel/ksyms.c:581:
+extern void __trace_stop();

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1065: FILE: kernel/ksyms.c:582:
+extern void *trcp;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1067: FILE: kernel/ksyms.c:584:
+EXPORT_SYMBOL(__br_lock_usage_bug);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1068: FILE: kernel/ksyms.c:585:
+EXPORT_SYMBOL(__this_fixmap_does_not_exist);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1069: FILE: kernel/ksyms.c:586:
+EXPORT_SYMBOL_NOVERS(__cyg_profile_func_enter);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1070: FILE: kernel/ksyms.c:587:
+EXPORT_SYMBOL_NOVERS(__cyg_profile_func_exit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1071: FILE: kernel/ksyms.c:588:
+EXPORT_SYMBOL(__trace_user);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1072: FILE: kernel/ksyms.c:589:
+EXPORT_SYMBOL(__trace_stop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1073: FILE: kernel/ksyms.c:590:
+EXPORT_SYMBOL(trcp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1113: FILE: patch_kallsyms:35:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#1119: FILE: scripts/inline-fix.pl:2:
+#

WARNING:TYPO_SPELLING: 'togther' may be misspelled - perhaps 'together'?
#1123: FILE: scripts/inline-fix.pl:6:
+# extern and inline togther its likely to make a change.  It removes
                     ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1140: FILE: scripts/inline-fix.pl:23:
+^I^I# check for comment, ignore lines that start with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1150: FILE: scripts/inline-fix.pl:33:
+^I^I^I^Iif ($line =~ /\*\//) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1155: FILE: scripts/inline-fix.pl:38:
+^I^I^I$

WARNING:TYPO_SPELLING: 'prinf' may be misspelled - perhaps 'print'?
#1202: FILE: scripts/inline-fix.pl:85:
+			prinf STDERR "Can't open $f for output\n";
 			^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000481416.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 81 errors, 106 warnings, 53 checks, 1005 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000481416.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
