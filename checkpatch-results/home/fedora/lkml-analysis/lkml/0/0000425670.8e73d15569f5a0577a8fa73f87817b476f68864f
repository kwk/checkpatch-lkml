WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
  init_kfs_fs() is now a core_initcall and happens implicitly, instead of being explicitly

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#32: 
--- a/drivers/base/core.c	Mon Oct  7 15:40:24 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: fs/kfs/inode.c:17:
  *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#65: FILE: fs/kfs/inode.c:18:
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#89: FILE: fs/kfs/inode.c:52:
+static struct file_operations kfs_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#90: FILE: fs/kfs/inode.c:53:
+static struct inode_operations kfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#91: FILE: fs/kfs/inode.c:54:
+static struct address_space_operations kfs_aops;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: fs/kfs/inode.c:65:
+static int kfs_readpage(struct file *file, struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: fs/kfs/inode.c:79:
+static int kfs_prepare_write(struct file *file, struct page *page, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: fs/kfs/inode.c:79:
+static int kfs_prepare_write(struct file *file, struct page *page, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: fs/kfs/inode.c:92:
+static int kfs_commit_write(struct file *file, struct page *page, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: fs/kfs/inode.c:92:
+static int kfs_commit_write(struct file *file, struct page *page, unsigned offset, unsigned to)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#173: FILE: fs/kfs/inode.c:149:
+	 * comes from the kfs API below. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: fs/kfs/inode.c:162:
+ ^Ires = kfs_mknod(dir, dentry, mode, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: fs/kfs/inode.c:162:
+ ^Ires = kfs_mknod(dir, dentry, mode, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/kfs/inode.c:162:
+ ^Ires = kfs_mknod(dir, dentry, mode, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: fs/kfs/inode.c:172:
+ ^Ires = kfs_mknod(dir, dentry, mode, 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: fs/kfs/inode.c:172:
+ ^Ires = kfs_mknod(dir, dentry, mode, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/kfs/inode.c:172:
+ ^Ires = kfs_mknod(dir, dentry, mode, 0);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: fs/kfs/inode.c:176:
+static int kfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: fs/kfs/inode.c:176:
+static int kfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#214: FILE: fs/kfs/inode.c:184:
+	inode = kfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#214: FILE: fs/kfs/inode.c:184:
+	inode = kfs_get_inode(dir->i_sb, S_IFLNK|S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#307: FILE: fs/kfs/inode.c:370:
+static int kfs_open_file(struct inode * inode, struct file * filp)
                                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#307: FILE: fs/kfs/inode.c:370:
+static int kfs_open_file(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#307: FILE: fs/kfs/inode.c:370:
+static int kfs_open_file(struct inode * inode, struct file * filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#316: FILE: fs/kfs/inode.c:389:
+static int kfs_release(struct inode * inode, struct file * filp)
                                                            ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: fs/kfs/inode.c:389:
+static int kfs_release(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: fs/kfs/inode.c:389:
+static int kfs_release(struct inode * inode, struct file * filp)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#330: FILE: fs/kfs/inode.c:398:
+static struct file_operations kfs_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#339: FILE: fs/kfs/inode.c:406:
+static struct inode_operations kfs_dir_inode_operations = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#345: FILE: fs/kfs/inode.c:410:
+static struct address_space_operations kfs_aops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: fs/kfs/inode.c:449:
+static struct super_block *kfs_get_sb(struct file_system_type *fs_type,
 	int flags, char *dev_name, void *data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#417: FILE: fs/kfs/inode.c:477:
+		printk(KERN_ERR "kfs: could not mount!\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: fs/kfs/inode.c:494:
+	DBG("kfs: mount_count = %d\n",mount_count);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: fs/kfs/inode.c:509:
+	DBG("kfs: mount_count = %d\n",mount_count);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: fs/kfs/inode.c:563:
+		error = kfs_mkdir(parent_dentry->d_inode,dentry,entry->mode);
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: fs/kfs/inode.c:563:
+		error = kfs_mkdir(parent_dentry->d_inode,dentry,entry->mode);
 		                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#495: FILE: fs/kfs/inode.c:597:
+		error = kfs_create(parent->dentry->d_inode,dentry,entry->mode);
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#495: FILE: fs/kfs/inode.c:597:
+		error = kfs_create(parent->dentry->d_inode,dentry,entry->mode);
 		                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: fs/kfs/inode.c:627:
+		error = kfs_symlink(parent->dentry->d_inode,dentry,target);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#504: FILE: fs/kfs/inode.c:627:
+		error = kfs_symlink(parent->dentry->d_inode,dentry,target);
 		                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: fs/kfs/inode.c:655:
+			kfs_unlink(dir->dentry->d_inode,dentry);
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#522: FILE: fs/kfs/inode.c:685:
+			kfs_unlink(dentry->d_inode,d);
 			                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425670.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 20 warnings, 2 checks, 463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425670.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
