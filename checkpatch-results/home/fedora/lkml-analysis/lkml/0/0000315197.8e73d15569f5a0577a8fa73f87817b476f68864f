CHECK:CAMELCASE: Avoid CamelCase: <cd_Rom>
#64: FILE: drivers/zorro/proc.c:65:
+	cd.cd_Rom = z->rom;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cd_SlotAddr>
#65: FILE: drivers/zorro/proc.c:66:
+	cd.cd_SlotAddr = z->slotaddr;

CHECK:CAMELCASE: Avoid CamelCase: <cd_SlotSize>
#66: FILE: drivers/zorro/proc.c:67:
+	cd.cd_SlotSize = z->slotsize;

CHECK:CAMELCASE: Avoid CamelCase: <cd_BoardAddr>
#67: FILE: drivers/zorro/proc.c:68:
+	cd.cd_BoardAddr = (void *)zorro_resource_start(z);

CHECK:CAMELCASE: Avoid CamelCase: <cd_BoardSize>
#68: FILE: drivers/zorro/proc.c:69:
+	cd.cd_BoardSize = zorro_resource_len(z);

CHECK:CAMELCASE: Avoid CamelCase: <er_Type>
#83: FILE: drivers/zorro/proc.c:94:
+			      zorro_resource_len(z), z->rom.er_Type);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#123: FILE: drivers/zorro/zorro.c:37:
+struct zorro_bus zorro_bus = {\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: drivers/zorro/zorro.c:38:
+    .resources = {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: drivers/zorro/zorro.c:45:
+    },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/zorro/zorro.c:46:
+    .name = "Zorro bus"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: drivers/zorro/zorro.c:56:
+    struct zorro_dev *z;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/zorro/zorro.c:61:
+    for (z = from ? from+1 : &zorro_autocon[0];$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: drivers/zorro/zorro.c:61:
+    for (z = from ? from+1 : &zorro_autocon[0];
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#156: FILE: drivers/zorro/zorro.c:62:
+	 z < zorro_autocon+zorro_num_autocon;
 	                  ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#158: FILE: drivers/zorro/zorro.c:64:
+	if (id == ZORRO_WILDCARD || id == z->id)
+	    return z;

WARNING:TABSTOP: Statements should start on a tabstop
#159: FILE: drivers/zorro/zorro.c:65:
+	    return z;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/zorro/zorro.c:117:
+    for (i = 0; i < zorro_bus.num_resources; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/zorro/zorro.c:131:
+    struct zorro_dev *z;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: drivers/zorro/zorro.c:132:
+    unsigned int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/zorro/zorro.c:141:
+    INIT_LIST_HEAD(&zorro_bus.devices);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/zorro/zorro.c:142:
+    strcpy(zorro_bus.dev.bus_id, "zorro");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/zorro/zorro.c:143:
+    device_register(&zorro_bus.dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/zorro/zorro.c:146:
+    zorro_bus.num_resources = AMIGAHW_PRESENT(ZORRO3) ? 4 : 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/zorro/zorro.c:147:
+    for (i = 0; i < zorro_bus.num_resources; i++)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#212: FILE: drivers/zorro/zorro.c:153:
+	z->id = (z->rom.er_Manufacturer<<16) | (z->rom.er_Product<<8);
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#212: FILE: drivers/zorro/zorro.c:153:
+	z->id = (z->rom.er_Manufacturer<<16) | (z->rom.er_Product<<8);
 	                                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <er_Manufacturer>
#212: FILE: drivers/zorro/zorro.c:153:
+	z->id = (z->rom.er_Manufacturer<<16) | (z->rom.er_Product<<8);

CHECK:CAMELCASE: Avoid CamelCase: <er_Product>
#212: FILE: drivers/zorro/zorro.c:153:
+	z->id = (z->rom.er_Manufacturer<<16) | (z->rom.er_Product<<8);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#213: FILE: drivers/zorro/zorro.c:154:
+	if (z->id == ZORRO_PROD_GVP_EPC_BASE) {
[...]
+	    unsigned long magic = zorro_resource_start(z)+0x8000;

WARNING:TABSTOP: Statements should start on a tabstop
#217: FILE: drivers/zorro/zorro.c:156:
+	    unsigned long magic = zorro_resource_start(z)+0x8000;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#217: FILE: drivers/zorro/zorro.c:156:
+	    unsigned long magic = zorro_resource_start(z)+0x8000;
 	                                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#218: FILE: drivers/zorro/zorro.c:157:
+	    unsigned long magic = zorro_resource_start(z)+0x8000;
+	    z->id |= *(u16 *)ZTWO_VADDR(magic) & GVP_PRODMASK;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#227: FILE: drivers/zorro/zorro.c:162:
+	if (request_resource(zorro_find_parent_resource(z), &z->resource))
 	    printk(KERN_ERR "Zorro: Address space collision on device %s "

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/zorro/zorro.c:174:
+    zorro_for_each_dev(z) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#245: FILE: drivers/zorro/zorro.c:175:
+	if (z->rom.er_Type & ERTF_MEMLIST)
+	    mark_region(zorro_resource_start(z), zorro_resource_end(z)+1, 1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#246: FILE: drivers/zorro/zorro.c:176:
+	    mark_region(zorro_resource_start(z), zorro_resource_end(z)+1, 1);
 	                                                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#267: FILE: include/linux/zorro.h:18:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: include/linux/zorro.h:102:
+    struct Node^I^Icd_Node;$

CHECK:CAMELCASE: Avoid CamelCase: <Node>
#279: FILE: include/linux/zorro.h:102:
+    struct Node		cd_Node;

CHECK:CAMELCASE: Avoid CamelCase: <cd_Node>
#279: FILE: include/linux/zorro.h:102:
+    struct Node		cd_Node;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: include/linux/zorro.h:103:
+    __u8^I^Icd_Flags;^I/* (read/write) */$

CHECK:CAMELCASE: Avoid CamelCase: <cd_Flags>
#280: FILE: include/linux/zorro.h:103:
+    __u8		cd_Flags;	/* (read/write) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: include/linux/zorro.h:104:
+    __u8^I^Icd_Pad;^I^I/* reserved */$

CHECK:CAMELCASE: Avoid CamelCase: <cd_Pad>
#281: FILE: include/linux/zorro.h:104:
+    __u8		cd_Pad;		/* reserved */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: include/linux/zorro.h:105:
+    struct ExpansionRom cd_Rom;^I^I/* copy of board's expansion ROM */$

CHECK:CAMELCASE: Avoid CamelCase: <ExpansionRom>
#282: FILE: include/linux/zorro.h:105:
+    struct ExpansionRom cd_Rom;		/* copy of board's expansion ROM */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/linux/zorro.h:107:
+    __u32^I^Icd_BoardSize;^I/* size of board in bytes */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: include/linux/zorro.h:108:
+    __u16^I^Icd_SlotAddr;^I/* which slot number (PRIVATE) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: include/linux/zorro.h:109:
+    __u16^I^Icd_SlotSize;^I/* number of slots (PRIVATE) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: include/linux/zorro.h:112:
+    __u32^I^Icd_Unused[4];^I/* for whatever the driver wants */$

CHECK:CAMELCASE: Avoid CamelCase: <cd_Unused>
#293: FILE: include/linux/zorro.h:112:
+    __u32		cd_Unused[4];	/* for whatever the driver wants */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#301: FILE: include/linux/zorro.h:163:
 
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: include/linux/zorro.h:171:
+    struct zorro_driver *driver;^I/* which driver has allocated this device */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: include/linux/zorro.h:172:
+    struct device dev;^I^I^I/* Generic device interface */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: include/linux/zorro.h:181:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: include/linux/zorro.h:187:
+    struct list_head devices;^I^I/* list of devices on this bus */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: include/linux/zorro.h:188:
+    unsigned int num_resources;^I^I/* number of resources */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: include/linux/zorro.h:189:
+    struct resource resources[4];^I/* address space routed to this bus */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: include/linux/zorro.h:190:
+    struct device dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: include/linux/zorro.h:191:
+    char name[10];$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#335: FILE: include/linux/zorro.h:197:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#345: FILE: include/linux/zorro.h:207:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: include/linux/zorro.h:213:
+    struct list_head node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: include/linux/zorro.h:214:
+    char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: include/linux/zorro.h:215:
+    const struct zorro_device_id *id_table;^I/* NULL if wants all devices */$

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#354: FILE: include/linux/zorro.h:216:
+    int (*probe)(struct zorro_dev *z, const struct zorro_device_id *id);	/* New device inserted */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: include/linux/zorro.h:216:
+    int (*probe)(struct zorro_dev *z, const struct zorro_device_id *id);^I/* New device inserted */$

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#355: FILE: include/linux/zorro.h:217:
+    void (*remove)(struct zorro_dev *z);	/* Device removed (NULL if not a hot-plug capable driver) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: include/linux/zorro.h:217:
+    void (*remove)(struct zorro_dev *z);^I/* Device removed (NULL if not a hot-plug capable driver) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: include/linux/zorro.h:218:
+    struct device_driver driver;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#361: FILE: include/linux/zorro.h:223:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#362: FILE: include/linux/zorro.h:224:
+#define zorro_for_each_dev(dev)	\
+	for (dev = &zorro_autocon[0]; dev < zorro_autocon+zorro_num_autocon; dev++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#363: FILE: include/linux/zorro.h:225:
+	for (dev = &zorro_autocon[0]; dev < zorro_autocon+zorro_num_autocon; dev++)
 	                                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#365: FILE: include/linux/zorro.h:227:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: include/linux/zorro.h:229:
+extern int zorro_register_driver(struct zorro_driver *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zorro_driver *' should also have an identifier name
#367: FILE: include/linux/zorro.h:229:
+extern int zorro_register_driver(struct zorro_driver *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#368: FILE: include/linux/zorro.h:230:
+extern void zorro_unregister_driver(struct zorro_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zorro_driver *' should also have an identifier name
#368: FILE: include/linux/zorro.h:230:
+extern void zorro_unregister_driver(struct zorro_driver *);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#369: FILE: include/linux/zorro.h:231:
+extern const struct zorro_device_id *zorro_match_device(const struct zorro_device_id *ids, const struct zorro_dev *z);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: include/linux/zorro.h:231:
+extern const struct zorro_device_id *zorro_match_device(const struct zorro_device_id *ids, const struct zorro_dev *z);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: include/linux/zorro.h:234:
+    return z->driver;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#375: FILE: include/linux/zorro.h:237:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#390: FILE: include/linux/zorro.h:251:
+#define zorro_resource_len(z)	((z)->resource.end-(z)->resource.start+1)
                              	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: include/linux/zorro.h:251:
+#define zorro_resource_len(z)	((z)->resource.end-(z)->resource.start+1)
                              	                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#390: FILE: include/linux/zorro.h:251:
+#define zorro_resource_len(z)	((z)->resource.end-(z)->resource.start+1)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: include/linux/zorro.h:255:
+    request_mem_region(zorro_resource_start(z), zorro_resource_len(z), name)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: include/linux/zorro.h:257:
+    release_mem_region(zorro_resource_start(z), zorro_resource_len(z))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: include/linux/zorro.h:263:
+static inline void *zorro_get_drvdata (struct zorro_dev *z)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: include/linux/zorro.h:268:
+static inline void zorro_set_drvdata (struct zorro_dev *z, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#416: FILE: include/linux/zorro.h:273:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#433: FILE: include/linux/zorro.h:290:
+	 * should load a module in response to an insert event. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#443: FILE: include/linux/zorro.h:300:
+	 * and return some sort of error */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#454: FILE: drivers/zorro/zorro-driver.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#470: FILE: drivers/zorro/zorro-driver.c:17:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#494: FILE: drivers/zorro/zorro-driver.c:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#515: FILE: drivers/zorro/zorro-driver.c:62:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#540: FILE: drivers/zorro/zorro-driver.c:87:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#556: FILE: drivers/zorro/zorro-driver.c:103:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#585: FILE: drivers/zorro/zorro-driver.c:132:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#591: FILE: drivers/zorro/zorro-driver.c:138:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#599: FILE: drivers/zorro/zorro-driver.c:146:
+EXPORT_SYMBOL(zorro_match_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#600: FILE: drivers/zorro/zorro-driver.c:147:
+EXPORT_SYMBOL(zorro_register_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#601: FILE: drivers/zorro/zorro-driver.c:148:
+EXPORT_SYMBOL(zorro_unregister_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#602: FILE: drivers/zorro/zorro-driver.c:149:
+EXPORT_SYMBOL(zorro_dev_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#603: FILE: drivers/zorro/zorro-driver.c:150:
+EXPORT_SYMBOL(zorro_bus_type);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#607: FILE: drivers/zorro/zorro-sysfs.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#619: FILE: drivers/zorro/zorro-sysfs.c:13:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#626: FILE: drivers/zorro/zorro-sysfs.c:20:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#628: FILE: drivers/zorro/zorro-sysfs.c:22:
+#define zorro_config_attr(name, field, format_string)			\
+static ssize_t								\
+show_##name(struct device *dev, char *buf)				\
+{									\
+	struct zorro_dev *z;						\
+									\
+	z = to_zorro_dev(dev);						\
+	return sprintf(buf, format_string, z->field);			\
+}									\
+static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#628: FILE: drivers/zorro/zorro-sysfs.c:22:
+#define zorro_config_attr(name, field, format_string)			\
+static ssize_t								\
+show_##name(struct device *dev, char *buf)				\
+{									\
+	struct zorro_dev *z;						\
+									\
+	z = to_zorro_dev(dev);						\
+	return sprintf(buf, format_string, z->field);			\
+}									\
+static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#637: FILE: drivers/zorro/zorro-sysfs.c:31:
+static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <er_SerialNumber>
#641: FILE: drivers/zorro/zorro-sysfs.c:35:
+zorro_config_attr(serial, rom.er_SerialNumber, "0x%08x\n");

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'zorro_show_resource' to 'resource_show'
#652: FILE: drivers/zorro/zorro-sysfs.c:46:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#654: FILE: drivers/zorro/zorro-sysfs.c:48:
+static DEVICE_ATTR(resource, S_IRUGO, zorro_show_resource, NULL);

CHECK:CAMELCASE: Avoid CamelCase: <ConfigDev>
#661: FILE: drivers/zorro/zorro-sysfs.c:55:
+	struct ConfigDev cd;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#666: FILE: drivers/zorro/zorro-sysfs.c:60:
+	if (off+count > size)
 	       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#667: FILE: drivers/zorro/zorro-sysfs.c:61:
+		count = size-off;
 		            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#677: FILE: drivers/zorro/zorro-sysfs.c:71:
+	memcpy(buf, (void *)&cd+off, count);
 	                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#684: FILE: drivers/zorro/zorro-sysfs.c:78:
+		.mode = S_IRUGO | S_IWUSR,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#707: FILE: drivers/zorro/zorro.h:1:
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#708: FILE: drivers/zorro/zorro.h:2:
+extern void zorro_name_device(struct zorro_dev *z);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#709: FILE: drivers/zorro/zorro.h:3:
+extern void zorro_create_sysfs_dev_files(struct zorro_dev *z);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 68 warnings, 54 checks, 653 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000315197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
