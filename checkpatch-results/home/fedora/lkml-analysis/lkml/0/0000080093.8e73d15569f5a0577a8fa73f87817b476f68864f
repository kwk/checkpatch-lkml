WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
- separate out taskstats interface from delay accounting completely including

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#241: FILE: include/linux/taskstats.h:1:
+/* taskstats.h - exporting per-task statistics

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#275: FILE: include/linux/taskstats.h:35:
+struct taskstats {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: include/linux/taskstats.h:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: include/linux/taskstats_kern.h:1:
+/* taskstats_kern.h - kernel header for per-task statistics interface

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: include/linux/taskstats_kern.h:29:
+static inline void taskstats_exit_free(struct taskstats *tidstats,
+					struct taskstats *tgidstats)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: include/linux/taskstats_kern.h:37:
+extern void taskstats_exit_send(struct task_struct *, struct taskstats *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: include/linux/taskstats_kern.h:39:
+extern void taskstats_init_early(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: include/linux/taskstats_kern.h:46:
+static inline void taskstats_exit_free(struct taskstats *ptidstats,
+					struct taskstats *ptgidstats)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: include/linux/taskstats_kern.h:49:
+static inline void taskstats_exit_send(struct task_struct *tsk,
+					struct taskstats *tidstats,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#481: FILE: kernel/taskstats.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#502: FILE: kernel/taskstats.c:22:
+#include <asm/atomic.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#505: FILE: kernel/taskstats.c:25:
+static int family_registered = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#516: FILE: kernel/taskstats.c:36:
+static struct nla_policy taskstats_cmd_get_policy[TASKSTATS_CMD_ATTR_MAX+1]
                                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#522: FILE: kernel/taskstats.c:42:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: kernel/taskstats.c:44:
+static int prepare_reply(struct genl_info *info, u8 cmd, struct sk_buff **skbp,
+			void **replyp, size_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#538: FILE: kernel/taskstats.c:58:
+		int seq = get_cpu_var(taskstats_seqnum)++;
+		put_cpu_var(taskstats_seqnum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: kernel/taskstats.c:61:
+		reply = genlmsg_put(skb, 0, seq,
+				family.id, 0, 0,

CHECK:BRACES: Unbalanced braces around else statement
#543: FILE: kernel/taskstats.c:63:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: kernel/taskstats.c:65:
+		reply = genlmsg_put(skb, info->snd_pid, info->snd_seq,
+				family.id, 0, 0,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reply"
#547: FILE: kernel/taskstats.c:67:
+	if (reply == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: kernel/taskstats.c:97:
+static int fill_pid(pid_t pid, struct task_struct *pidtsk,
+		struct taskstats *stats)

CHECK:BRACES: braces {} should be used on all arms of this statement
#582: FILE: kernel/taskstats.c:102:
+	if (!pidtsk) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#591: FILE: kernel/taskstats.c:111:
+	} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#607: FILE: kernel/taskstats.c:127:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: kernel/taskstats.c:130:
+static int fill_tgid(pid_t tgid, struct task_struct *tgidtsk,
+		struct taskstats *stats)

WARNING:TYPO_SPELLING: 'subsytems' may be misspelled - perhaps 'subsystems'?
#639: FILE: kernel/taskstats.c:159:
+	 * Accounting subsytems can also add calls here if they don't
 	              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#668: FILE: kernel/taskstats.c:188:
+		u32 pid = nla_get_u32(info->attrs[TASKSTATS_CMD_ATTR_PID]);
+		rc = fill_pid(pid, NULL, &stats);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: kernel/taskstats.c:195:
+		NLA_PUT_TYPE(rep_skb, struct taskstats, TASKSTATS_TYPE_STATS,
+				stats);

WARNING:LINE_SPACING: Missing a blank line after declarations
#678: FILE: kernel/taskstats.c:198:
+		u32 tgid = nla_get_u32(info->attrs[TASKSTATS_CMD_ATTR_TGID]);
+		rc = fill_tgid(tgid, NULL, &stats);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: kernel/taskstats.c:205:
+		NLA_PUT_TYPE(rep_skb, struct taskstats, TASKSTATS_TYPE_STATS,
+				stats);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: kernel/taskstats.c:224:
+void taskstats_exit_send(struct task_struct *tsk, struct taskstats *tidstats,
+			struct taskstats *tgidstats)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: kernel/taskstats.c:261:
+	NLA_PUT_TYPE(rep_skb, struct taskstats, TASKSTATS_TYPE_STATS,
+			*tidstats);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: kernel/taskstats.c:276:
+	NLA_PUT_TYPE(rep_skb, struct taskstats, TASKSTATS_TYPE_STATS,
+			*tgidstats);

WARNING:RETURN_VOID: void function return statements are not generally useful
#770: FILE: kernel/taskstats.c:290:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: kernel/taskstats.c:302:
+	taskstats_cache = kmem_cache_create("taskstats_cache",
+						sizeof(struct taskstats),

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#795: FILE: kernel/taskstats.c:315:
+	if ((rc = genl_register_ops(&family, &taskstats_ops)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000080093.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 10 warnings, 25 checks, 687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000080093.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
