WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
The executive summary is 'Houston, we have a bug'.  The long version of this 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
#!/bin/sh

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

CHECK:SPACING: No space is necessary after a cast
#253: FILE: fs/proc/proc_misc.c:558:
+	unsigned *stats = (unsigned *) &mmstats, len = 0;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#253: FILE: fs/proc/proc_misc.c:558:
+	unsigned *stats = (unsigned *) &mmstats, len = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#253: FILE: fs/proc/proc_misc.c:558:
+	unsigned *stats = (unsigned *) &mmstats, len = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: fs/proc/proc_misc.c:559:
+^Ifor (; *names; *names++, *stats++) if (strlen(*names)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: fs/proc/proc_misc.c:559:
+	unsigned *stats = (unsigned *) &mmstats, len = 0;
+	for (; *names; *names++, *stats++) if (strlen(*names)) 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#254: FILE: fs/proc/proc_misc.c:559:
+	for (; *names; *names++, *stats++) if (strlen(*names)) 

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: include/linux/mm.h:39:
+	unsigned release;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#278: FILE: include/linux/mm.h:40:
+	unsigned release_test_page;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: include/linux/mm.h:41:
+	unsigned release_free_page;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: include/linux/mm.h:42:
+	unsigned vmscan_free_page;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#281: FILE: include/linux/mm.h:43:
+	unsigned testzero;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#282: FILE: include/linux/mm.h:44:
+	unsigned lru_cache_del;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#283: FILE: include/linux/mm.h:45:
+	unsigned truncate_lru_cache_del;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#288: FILE: include/linux/mm.h:50:
+#define mmstat(field) mmstats.field++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#288: FILE: include/linux/mm.h:50:
+#define mmstat(field) mmstats.field++

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: include/linux/mm.h:199:
+extern void FASTCALL(__free_pages(struct page *page, unsigned int order));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: include/linux/mm.h:200:
+extern void FASTCALL(free_pages(unsigned long addr, unsigned int order));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: include/linux/mm.h:203:
+#define free_page(addr) free_pages((addr),0)
                                          ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/mm.h:220:
+extern void FASTCALL(__free_pages(struct page *page, unsigned int order));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#328: FILE: include/linux/mm.h:229:
+	BUG_ON(!page_count(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#335: FILE: include/linux/mm.h:236:
+	BUG_ON(!page_count(page));

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#390: FILE: include/linux/pagemap.h:38:
+#if LRU_PLUS_CACHE==2
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#427: FILE: mm/filemap.c:204:
+#if LRU_PLUS_CACHE==1
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#460: FILE: mm/page_alloc.c:85:
+#if LRU_PLUS_CACHE==2
                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#461: FILE: mm/page_alloc.c:86:
+	BUG_ON(PageLRU(page));

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#476: FILE: mm/swap.c:63:
+#if LRU_PLUS_CACHE==2
                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#487: FILE: mm/swap.c:86:
+#if LRU_PLUS_CACHE==2^I^I$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#487: FILE: mm/swap.c:86:
+#if LRU_PLUS_CACHE==2		
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#579: FILE: mm/vmscan.c:359:
+#if LRU_PLUS_CACHE==2
                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#580: FILE: mm/vmscan.c:360:
+		BUG_ON(!page_count(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: mm/vmscan.c:363:
+			BUG_ON(!TestClearPageLRU(page)); // side effect abuse!!

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#590: FILE: mm/vmscan.c:370:
+#if LRU_PLUS_CACHE==1
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#612: FILE: mm/vmscan.c:447:
+#if LRU_PLUS_CACHE==1
                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#624: FILE: mm/vmscan.c:518:
+#if LRU_PLUS_CACHE==1
                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 17 warnings, 5 checks, 362 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436107.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
