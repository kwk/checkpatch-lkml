WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
bad_range() is modified to use zone->memmap_start_pfn/memmap_end_pfn instead of

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#101: FILE: mm/page_alloc.c:67:
+static int bad_range_pfn(struct zone *zone, unsigned long pfn)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < zone->memmap_start_pfn'
#104: FILE: mm/page_alloc.c:69:
+	if((pfn < zone->memmap_start_pfn) || (pfn > zone->memmap_end_pfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn > zone->memmap_end_pfn'
#104: FILE: mm/page_alloc.c:69:
+	if((pfn < zone->memmap_start_pfn) || (pfn > zone->memmap_end_pfn))

ERROR:SPACING: space required before the open parenthesis '('
#104: FILE: mm/page_alloc.c:69:
+	if((pfn < zone->memmap_start_pfn) || (pfn > zone->memmap_end_pfn))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#142: FILE: mm/page_alloc.c:941:
+	for( page = base,nr_freed_pages = 0; page != base + nr_pages; page++) {
 	                ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#142: FILE: mm/page_alloc.c:941:
+	for( page = base,nr_freed_pages = 0; page != base + nr_pages; page++) {

ERROR:SPACING: space required before the open parenthesis '('
#142: FILE: mm/page_alloc.c:941:
+	for( page = base,nr_freed_pages = 0; page != base + nr_pages; page++) {

WARNING:TYPO_SPELLING: 'catched' may be misspelled - perhaps 'caught'?
#167: FILE: mm/page_alloc.c:1541:
+ * (b) access to its invalid buddy cannot be catched by bad_range_pfn().
                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#178: FILE: mm/page_alloc.c:1552:
+ * (4) If the mem_map is not aligned in its end addres and the first
                                                 ^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'zone->zone_start_pfn == start_pfn'
#195: FILE: mm/page_alloc.c:1569:
+	if((zone->zone_start_pfn == start_pfn) &&
+	   (zone->spanned_pages == nr_pages))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'zone->spanned_pages == nr_pages'
#195: FILE: mm/page_alloc.c:1569:
+	if((zone->zone_start_pfn == start_pfn) &&
+	   (zone->spanned_pages == nr_pages))

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: mm/page_alloc.c:1569:
+	if((zone->zone_start_pfn == start_pfn) &&

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#206: FILE: mm/page_alloc.c:1580:
+	printk("calculate_buddy_range() %lx %d\n",start_pfn, nr_pages);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: mm/page_alloc.c:1580:
+	printk("calculate_buddy_range() %lx %d\n",start_pfn, nr_pages);
 	                                         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'calculate_buddy_range', this function's name, in a string
#206: FILE: mm/page_alloc.c:1580:
+	printk("calculate_buddy_range() %lx %d\n",start_pfn, nr_pages);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start_pfn != zone->memmap_start_pfn'
#208: FILE: mm/page_alloc.c:1582:
+	if ((start_pfn != zone->memmap_start_pfn) &&
+	    (start_idx & alignment_mask)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: mm/page_alloc.c:1588:
+		for (edge_idx = start_idx,order = 0;
 		                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#230: FILE: mm/page_alloc.c:1604:
+				printk("victim top page %lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#244: FILE: mm/page_alloc.c:1618:
+		printk("victim end page %lx\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#249: FILE: mm/page_alloc.c:1623:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: mm/page_alloc.c:1630:
+ ^I * bad_range_pfn() can catch invalid access exceeding end of zone.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: mm/page_alloc.c:1630:
+ ^I * bad_range_pfn() can catch invalid access exceeding end of zone.$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxW)
#259: FILE: mm/page_alloc.c:1633:
+	page = zone->zone_mem_map + zone->memmap_end_pfn- zone->zone_start_pfn;
 	                                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: mm/page_alloc.c:1636:
+		printk("saved end victim page %lx\n",zone->memmap_end_pfn);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#262: FILE: mm/page_alloc.c:1636:
+		printk("saved end victim page %lx\n",zone->memmap_end_pfn);
 		                                    ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#265: FILE: mm/page_alloc.c:1639:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: mm/page_alloc.c:1654:
+	struct zone *zonep;
+	zonep = zone_table[zoneid];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#279: FILE: mm/page_alloc.c:1656:
+	if (zonep->memmap_start_pfn == ~0UL) {
[...]
+	} else if (start_pfn < zonep->memmap_start_pfn) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: mm/page_alloc.c:1659:
+		printk("BUG: memmap is not sorted. \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#282: FILE: mm/page_alloc.c:1659:
+		printk("BUG: memmap is not sorted. \n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#338: FILE: mm/page_alloc.c:1687:
+	for (order = 0 ; order < MAX_ORDER ; order++) {
  		INIT_LIST_HEAD(&zone->free_area[order].free_list);
  	}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#377: FILE: include/linux/gfp.h:128:
+extern long __init free_pages_at_init(struct page *base, int order);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#397: FILE: mm/bootmem.c:287:
+			count += free_pages_at_init(page,ffs(BITS_PER_LONG)-1);
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#397: FILE: mm/bootmem.c:287:
+			count += free_pages_at_init(page,ffs(BITS_PER_LONG)-1);
 			                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: mm/bootmem.c:296:
+					count += free_pages_at_init(page,0);
 					                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#420: FILE: mm/bootmem.c:315:
+		count += free_pages_at_init(page,0);
 		                                ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#432: FILE: arch/ia64/mm/init.c:407:
+unsigned long max_initialized_memmap = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252029.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 16 warnings, 8 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252029.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
