WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This introduce ktime_t to allow operations in nanosecond resolution.  The main

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#41: 
counter and at every timer tick xtime is updated by the the resolution (let's

WARNING:TYPO_SPELLING: 'inbetween' may be misspelled - perhaps 'between'?
#49: 
If we have now a time value inbetween these timer values, we can either round
                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: include/linux/ktime.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'choosen' may be misspelled - perhaps 'chosen'?
#127: FILE: include/linux/ktime.h:32:
+ * endian-aware order of the tv struct members is choosen to allow
                                                   ^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#139: FILE: include/linux/ktime.h:44:
+typedef union {

WARNING:TYPO_SPELLING: 'substraction' may be misspelled - perhaps 'subtraction'?
#198: FILE: include/linux/ktime.h:103:
+ * Returns the remainder of the substraction
                                 ^^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#279: FILE: include/linux/ktime.h:184:
+	return (struct timespec) { .tv_sec = (time_t) kt.tv.sec,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#280: FILE: include/linux/ktime.h:185:
+				   .tv_nsec = (long) kt.tv.nsec };

CHECK:SPACING: No space is necessary after a cast
#292: FILE: include/linux/ktime.h:197:
+		{ .tv_sec = (time_t) kt.tv.sec,

CHECK:SPACING: No space is necessary after a cast
#293: FILE: include/linux/ktime.h:198:
+		  .tv_usec = (long) (kt.tv.nsec / NSEC_PER_USEC) };

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: include/linux/ktime.h:204:
+       ^I^I^I   .tv.nsec = tv.tv_usec * NSEC_PER_USEC };$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: include/linux/ktime.h:204:
+       ^I^I^I   .tv.nsec = tv.tv_usec * NSEC_PER_USEC };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/linux/ktime.h:204:
+       ^I^I^I   .tv.nsec = tv.tv_usec * NSEC_PER_USEC };$

CHECK:SPACING: No space is necessary after a cast
#321: FILE: include/linux/ktime.h:226:
+	return (u64) kt.tv.sec * NSEC_PER_SEC + kt.tv.nsec;

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: include/linux/ktime.h:232:
+	ktime_t kt;
+	kt.tv.nsec = do_div(nsec, NSEC_PER_SEC);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#420: FILE: include/linux/ptimer.h:41:
+extern void ptimer_modify(struct ptimer *timer, ktime_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ktime_t' should also have an identifier name
#420: FILE: include/linux/ptimer.h:41:
+extern void ptimer_modify(struct ptimer *timer, ktime_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: include/linux/time.h:140:
+extern struct timespec nsec_to_timespec(s64 nsec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: include/linux/time.h:141:
+extern struct timeval nsec_to_timeval(s64 nsec);

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#620: FILE: kernel/posix-timers.c:47:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#1062: FILE: kernel/posix-timers.c:1194:
+	struct nsleep_timer *timer = container_of(ptimer, struct nsleep_timer, timer);
+	timer->done = 1;

WARNING:TYPO_SPELLING: 'remaing' may be misspelled - perhaps 'remaining'?
#1209: FILE: kernel/posix-timers.c:1402:
+	 * Restart works by saving the time remaing in
 	                                    ^^^^^^^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1338: FILE: kernel/ptimer.c:291:
 static void __devinit init_ptimers_cpu(int cpu)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1382: FILE: kernel/time.c:577:
+	if (nsec) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1385: FILE: kernel/time.c:580:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1386: FILE: kernel/time.c:581:
+		ts.tv_sec = ts.tv_nsec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1403: FILE: kernel/time.c:598:
+	if (nsec) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1406: FILE: kernel/time.c:601:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1407: FILE: kernel/time.c:602:
+		tv.tv_sec = tv.tv_usec = 0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 15 warnings, 14 checks, 1238 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
