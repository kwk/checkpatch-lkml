WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: drivers/scsi/sata_mv.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#47: FILE: drivers/scsi/sata_mv.c:4:
+ * Copyright 2005: EMC Corporation, all rights reserved. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#61: FILE: drivers/scsi/sata_mv.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#62: FILE: drivers/scsi/sata_mv.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#78: FILE: drivers/scsi/sata_mv.c:35:
+#include <asm/io.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: drivers/scsi/sata_mv.c:106:
+^IHC_MAIN_MASKED_IRQS^I= (TRAN_LO_DONE | TRAN_HI_DONE | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/scsi/sata_mv.c:156:
+^IEDMA_ERR_FATAL^I^I= (EDMA_ERR_D_PAR | EDMA_ERR_PRD_PAR | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: drivers/scsi/sata_mv.c:159:
+^I^I^I^I   EDMA_ERR_IORDY | EDMA_ERR_LNK_CTRL_RX_2 | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: drivers/scsi/sata_mv.c:161:
+^I^I^I^I   EDMA_ERR_LNK_DATA_TX | $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#220: FILE: drivers/scsi/sata_mv.c:177:
+struct mv_port_priv {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#224: FILE: drivers/scsi/sata_mv.c:181:
+struct mv_host_priv {
+

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#236: FILE: drivers/scsi/sata_mv.c:193:
+static Scsi_Host_Template mv_sht = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: drivers/scsi/sata_mv.c:252:
+^I^I^I^I   ATA_FLAG_SATA_RESET | ATA_FLAG_MMIO | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/scsi/sata_mv.c:261:
+^I^I^I^I   ATA_FLAG_SATA_RESET | ATA_FLAG_MMIO | $

CHECK:SPACING: No space is necessary after a cast
#349: FILE: drivers/scsi/sata_mv.c:306:
+	(void) readl(addr);	/* flush */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: drivers/scsi/sata_mv.c:311:
+^Ireturn ((void __iomem *)((unsigned long)port_mmio & $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: drivers/scsi/sata_mv.c:323:
+^I^IMV_SATAHC_ARBTR_REG_SZ + $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#372: FILE: drivers/scsi/sata_mv.c:329:
+	return (mv_port_base(ap->host_set->mmio_base, ap->port_no));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: drivers/scsi/sata_mv.c:340:
+	void __iomem *port_mmio = mv_ap_base(ap);
+	return (EDMA_EN & readl(port_mmio + EDMA_CMD_OFS));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#394: FILE: drivers/scsi/sata_mv.c:351:
+	return;
+}

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#420: FILE: drivers/scsi/sata_mv.c:377:
+	if (0xffffffffU != ofs) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#420: FILE: drivers/scsi/sata_mv.c:377:
+	if (0xffffffffU != ofs) {
[...]
+	} else {
[...]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#421: FILE: drivers/scsi/sata_mv.c:378:
+		return (readl(mv_ap_base(ap) + ofs));

CHECK:SPACING: No space is necessary after a cast
#423: FILE: drivers/scsi/sata_mv.c:380:
+		return ((u32) ofs);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#423: FILE: drivers/scsi/sata_mv.c:380:
+		return ((u32) ofs);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#431: FILE: drivers/scsi/sata_mv.c:388:
+	if (0xffffffffU != ofs) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#431: FILE: drivers/scsi/sata_mv.c:388:
+	if (0xffffffffU != ofs) {
+		writelfl(val, mv_ap_base(ap) + ofs);
+	}

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#451: FILE: drivers/scsi/sata_mv.c:408:
+		msleep(10);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#453: FILE: drivers/scsi/sata_mv.c:410:
+		if (PCI_MASTER_EMPTY & t) {
+			break;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: drivers/scsi/sata_mv.c:415:
+		printk(KERN_ERR DRV_NAME "PCI master won't flush\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#472: FILE: drivers/scsi/sata_mv.c:429:
+		printk(KERN_ERR DRV_NAME "can't set global reset\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#486: FILE: drivers/scsi/sata_mv.c:443:
+		printk(KERN_ERR DRV_NAME "can't clear global reset\n");

WARNING:INDENTED_LABEL: labels should not be indented
#490: FILE: drivers/scsi/sata_mv.c:447:
+      done:

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#492: FILE: drivers/scsi/sata_mv.c:449:
+	return (rc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: drivers/scsi/sata_mv.c:460:
+	BUG_ON(NULL == ap);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#503: FILE: drivers/scsi/sata_mv.c:460:
+	BUG_ON(NULL == ap);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: drivers/scsi/sata_mv.c:469:
+^IDPRINTK("port %u error; EDMA err cause: 0x%08x SERR: 0x%08x\n", $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#519: FILE: drivers/scsi/sata_mv.c:476:
+	if (EDMA_ERR_FATAL & edma_err_cause) {
+		mv_phy_reset(ap);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: drivers/scsi/sata_mv.c:481:
+/* Handle any outstanding interrupts in a single SATAHC $

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#537: FILE: drivers/scsi/sata_mv.c:494:
+	if (hc == 0) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#545: FILE: drivers/scsi/sata_mv.c:502:
+	if (hc_irq_cause) {
+		writelfl(0, hc_mmio + HC_IRQ_CAUSE_OFS);
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#550: FILE: drivers/scsi/sata_mv.c:507:
+		hc,relevant,hc_irq_cause);
 		  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#550: FILE: drivers/scsi/sata_mv.c:507:
+		hc,relevant,hc_irq_cause);
 		           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#558: FILE: drivers/scsi/sata_mv.c:515:
+			BUG_ON(NULL == ap);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#558: FILE: drivers/scsi/sata_mv.c:515:
+			BUG_ON(NULL == ap);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#568: FILE: drivers/scsi/sata_mv.c:525:
+		if (port >= MV_PORTS_PER_HC) {
+			shift++;	/* skip bit 8 in the HC Main IRQ reg */
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: drivers/scsi/sata_mv.c:534:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: drivers/scsi/sata_mv.c:535:
+^I^Iif (ap && $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#578: FILE: drivers/scsi/sata_mv.c:535:
+		if (ap && 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: drivers/scsi/sata_mv.c:538:
+				port,ata_status);
 				    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: drivers/scsi/sata_mv.c:539:
+			BUG_ON(0xffU == ata_status);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#582: FILE: drivers/scsi/sata_mv.c:539:
+			BUG_ON(0xffU == ata_status);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#605: FILE: drivers/scsi/sata_mv.c:562:
+	if (!irq_stat || (0xffffffffU == irq_stat)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#605: FILE: drivers/scsi/sata_mv.c:562:
+	if (!irq_stat || (0xffffffffU == irq_stat)) {
+		return IRQ_NONE;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#613: FILE: drivers/scsi/sata_mv.c:570:
+		u32 relevant = irq_stat & (HC0_IRQ_PEND << (hc * HC_SHIFT));
+		if (relevant) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#626: FILE: drivers/scsi/sata_mv.c:583:
+	return (IRQ_RETVAL(handled));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#644: FILE: drivers/scsi/sata_mv.c:601:
+	} else if (mv_port_bdma_capable(ap) &&

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#651: FILE: drivers/scsi/sata_mv.c:608:
+	udelay(25);		/* allow reset propagation */

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: No space is necessary after a cast
#668: FILE: drivers/scsi/sata_mv.c:625:
+	tf.lbah = readb((void __iomem *) ap->ioaddr.lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#669: FILE: drivers/scsi/sata_mv.c:626:
+	tf.lbam = readb((void __iomem *) ap->ioaddr.lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#670: FILE: drivers/scsi/sata_mv.c:627:
+	tf.lbal = readb((void __iomem *) ap->ioaddr.lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#671: FILE: drivers/scsi/sata_mv.c:628:
+	tf.nsect = readb((void __iomem *) ap->ioaddr.nsect_addr);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#685: FILE: drivers/scsi/sata_mv.c:642:
+	port->error_addr = port->feature_addr = base + SHD_FEA_ERR_OFS;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#691: FILE: drivers/scsi/sata_mv.c:648:
+	port->status_addr = port->command_addr = base + SHD_CMD_STA_OFS;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#692: FILE: drivers/scsi/sata_mv.c:649:
+	port->altstatus_addr = port->ctl_addr = base + SHD_CTL_AST_OFS;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#694: FILE: drivers/scsi/sata_mv.c:651:
+	port->cmd_addr = port->bmdma_addr = port->scr_addr = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: drivers/scsi/sata_mv.c:656:
+^IVPRINTK("EDMA cfg=0x%08x EDMA IRQ err cause/mask=0x%08x/0x%08x\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: drivers/scsi/sata_mv.c:691:
+^I^I"PCI int cause/mask=0x%08x/0x%08x\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#734: FILE: drivers/scsi/sata_mv.c:691:
+	VPRINTK("HC MAIN IRQ cause/mask=0x%08x/0x%08x "
+		"PCI int cause/mask=0x%08x/0x%08x\n", 

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:INDENTED_LABEL: labels should not be indented
#740: FILE: drivers/scsi/sata_mv.c:697:
+      done:

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#746: FILE: drivers/scsi/sata_mv.c:703:
+	static int printed_version = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#754: FILE: drivers/scsi/sata_mv.c:711:
+	if (!printed_version++) {
+		printk(KERN_DEBUG DRV_NAME " version " DRV_VERSION "\n");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#755: FILE: drivers/scsi/sata_mv.c:712:
+		printk(KERN_DEBUG DRV_NAME " version " DRV_VERSION "\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#762: FILE: drivers/scsi/sata_mv.c:719:
+	if (rc) {
+		return (rc);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#763: FILE: drivers/scsi/sata_mv.c:720:
+		return (rc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!probe_ent"
#775: FILE: drivers/scsi/sata_mv.c:732:
+	if (probe_ent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mmio_base"
#786: FILE: drivers/scsi/sata_mv.c:743:
+	if (mmio_base == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#811: FILE: drivers/scsi/sata_mv.c:768:
+	if (rc) {
+		goto err_out_hpriv;
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#814: FILE: drivers/scsi/sata_mv.c:771:
+/* ^Imv_print_info(probe_ent); */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#819: FILE: drivers/scsi/sata_mv.c:776:
+		u32 dw[4];	/* hold a line of 16b */
+		VPRINTK("PCI config space:\n");

CHECK:SPACING: No space is necessary after a cast
#822: FILE: drivers/scsi/sata_mv.c:779:
+				(void) pci_read_config_dword(pdev,b,&dw[w]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#822: FILE: drivers/scsi/sata_mv.c:779:
+				(void) pci_read_config_dword(pdev,b,&dw[w]);
 				                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#822: FILE: drivers/scsi/sata_mv.c:779:
+				(void) pci_read_config_dword(pdev,b,&dw[w]);
 				                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#822: FILE: drivers/scsi/sata_mv.c:779:
+				(void) pci_read_config_dword(pdev,b,&dw[w]);
 				                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#826: FILE: drivers/scsi/sata_mv.c:783:
+				dw[0],dw[1],dw[2],dw[3]);
 				     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#826: FILE: drivers/scsi/sata_mv.c:783:
+				dw[0],dw[1],dw[2],dw[3]);
 				           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#826: FILE: drivers/scsi/sata_mv.c:783:
+				dw[0],dw[1],dw[2],dw[3]);
 				                 ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#834: FILE: drivers/scsi/sata_mv.c:791:
+	return (0);

WARNING:INDENTED_LABEL: labels should not be indented
#836: FILE: drivers/scsi/sata_mv.c:793:
+      err_out_hpriv:

WARNING:INDENTED_LABEL: labels should not be indented
#838: FILE: drivers/scsi/sata_mv.c:795:
+      err_out_iounmap:

WARNING:INDENTED_LABEL: labels should not be indented
#840: FILE: drivers/scsi/sata_mv.c:797:
+      err_out_free_ent:

WARNING:INDENTED_LABEL: labels should not be indented
#842: FILE: drivers/scsi/sata_mv.c:799:
+      err_out_regions:

WARNING:INDENTED_LABEL: labels should not be indented
#844: FILE: drivers/scsi/sata_mv.c:801:
+      err_out:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#845: FILE: drivers/scsi/sata_mv.c:802:
+	if (!pci_dev_busy) {
+		pci_disable_device(pdev);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#854: FILE: drivers/scsi/sata_mv.c:811:
+	return (pci_module_init(&mv_pci_driver));

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#878: FILE: drivers/scsi/Kconfig:462:
+config SCSI_SATA_MV
+	tristate "Marvell SATA support"
+	depends on SCSI_SATA && PCI && EXPERIMENTAL
+	help
+	  This option enables support for the Marvell Serial ATA family.
+	  Currently supports 88SX[56]0[48][01] chips.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 42 warnings, 17 checks, 848 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
