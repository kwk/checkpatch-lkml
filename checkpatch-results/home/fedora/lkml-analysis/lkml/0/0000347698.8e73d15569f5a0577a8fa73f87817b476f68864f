CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#52: 
; (C) 2003 Herbert Pötzl <herbert@13thfloor.at>
                    ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#71: 
diff -NurP --minimal linux-2.6.0-test2/fs/namei.c linux-2.6.0-test2-bme0.02/fs/namei.c

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#83: FILE: fs/namei.c:215:
+	if (nd && (mask & MAY_WRITE) && MNT_IS_RDONLY(nd->mnt) &&
 	    ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: fs/namei.c:216:
+	if (nd && (mask & MAY_WRITE) && MNT_IS_RDONLY(nd->mnt) &&
+		(S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#93: FILE: fs/namei.c:1046:
+static inline int mnt_may_create(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: fs/namei.c:1047:
+       if (child->d_inode)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#94: FILE: fs/namei.c:1047:
+       if (child->d_inode)
+               return -EEXIST;

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: fs/namei.c:1048:
+               return -EEXIST;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: fs/namei.c:1048:
+               return -EEXIST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: fs/namei.c:1049:
+       if (IS_DEADDIR(dir))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#96: FILE: fs/namei.c:1049:
+       if (IS_DEADDIR(dir))
+               return -ENOENT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: fs/namei.c:1050:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: fs/namei.c:1050:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: fs/namei.c:1051:
+       if (mnt->mnt_flags & MNT_RDONLY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#98: FILE: fs/namei.c:1051:
+       if (mnt->mnt_flags & MNT_RDONLY)
+               return -EROFS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: fs/namei.c:1052:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: fs/namei.c:1052:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: fs/namei.c:1053:
+       return 0;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#103: FILE: fs/namei.c:1056:
+static inline int mnt_may_unlink(struct vfsmount *mnt, struct inode *dir, struct dentry *child) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: fs/namei.c:1057:
+       if (!child->d_inode)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#104: FILE: fs/namei.c:1057:
+       if (!child->d_inode)
+               return -ENOENT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: fs/namei.c:1058:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: fs/namei.c:1058:
+               return -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: fs/namei.c:1059:
+       if (mnt->mnt_flags & MNT_RDONLY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#106: FILE: fs/namei.c:1059:
+       if (mnt->mnt_flags & MNT_RDONLY)
+               return -EROFS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: fs/namei.c:1060:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: fs/namei.c:1060:
+               return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: fs/namei.c:1061:
+       return 0;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#164: FILE: fs/namei.c:1651:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#164: FILE: fs/namei.c:1651:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

WARNING:INDENTED_LABEL: labels should not be indented
#168: FILE: fs/namei.c:1655:
+	exit2:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#176: FILE: fs/namei.c:1727:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#176: FILE: fs/namei.c:1727:
+		error = mnt_may_unlink(nd.mnt, nd.dentry->d_inode, dentry);
 		                               ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: fs/namespace.c:229:
+	seq_puts(m, (MNT_IS_RDONLY(mnt) ||
+		(mnt->mnt_sb->s_flags & MS_RDONLY)) ? " ro" : " rw");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#210: FILE: fs/namespace.c:520:
+static int do_loopback(struct nameidata *nd, char *old_name, unsigned long flags, int mnt_flags)
                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/namespace.c:780:
+		retval = do_loopback(&nd, dev_name, flags, mnt_flags);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/open.c:227:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#263: FILE: fs/open.c:351:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/open.c:400:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#290: FILE: fs/open.c:612:
+	if (IS_RDONLY(inode) || MNT_IS_RDONLY(nd.mnt))
 	                                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: fs/open.c:633:
+static int chown_common(struct vfsmount *mnt, struct dentry * dentry, uid_t user, gid_t group)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#317: FILE: fs/open.c:675:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#317: FILE: fs/open.c:675:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#326: FILE: fs/open.c:688:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#326: FILE: fs/open.c:688:
+		error = chown_common(nd.mnt, nd.dentry, user, group);
 		                             ^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347698.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 34 warnings, 3 checks, 258 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347698.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
