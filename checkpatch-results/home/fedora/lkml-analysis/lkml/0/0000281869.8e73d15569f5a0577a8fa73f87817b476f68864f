WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -ruN linux-2.6.6-mm2/drivers/perfctr/global.c linux-2.6.6-mm2.perfctr-2.7.2.global/drivers/perfctr/global.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#33: FILE: drivers/perfctr/global.c:1:
+/* $Id: global.c,v 1.40 2004/05/13 23:32:49 mikpe Exp $

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#33: FILE: drivers/perfctr/global.c:1:
+/* $Id: global.c,v 1.40 2004/05/13 23:32:49 mikpe Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#44: FILE: drivers/perfctr/global.c:12:
+#include <asm/uaccess.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#51: FILE: drivers/perfctr/global.c:19:
+static int hardware_is_ours = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#54: FILE: drivers/perfctr/global.c:22:
+static unsigned int nr_active_cpus = 0;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#58: FILE: drivers/perfctr/global.c:26:
+	spinlock_t lock;

ERROR:SPACING: space prohibited after that open parenthesis '('
#67: FILE: drivers/perfctr/global.c:35:
+	if( hardware_is_ours )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#67: FILE: drivers/perfctr/global.c:35:
+	if( hardware_is_ours )

ERROR:SPACING: space required before the open parenthesis '('
#67: FILE: drivers/perfctr/global.c:35:
+	if( hardware_is_ours )

ERROR:SPACING: space prohibited after that open parenthesis '('
#70: FILE: drivers/perfctr/global.c:38:
+	if( other ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#70: FILE: drivers/perfctr/global.c:38:
+	if( other ) {

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: drivers/perfctr/global.c:38:
+	if( other ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#71: FILE: drivers/perfctr/global.c:39:
+		printk(KERN_ERR __FILE__ ":%s: failed because hardware is taken by '%s'\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#72: FILE: drivers/perfctr/global.c:40:
+		       __FUNCTION__, other);

ERROR:SPACING: space prohibited after that open parenthesis '('
#84: FILE: drivers/perfctr/global.c:52:
+	if( hardware_is_ours ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#84: FILE: drivers/perfctr/global.c:52:
+	if( hardware_is_ours ) {

ERROR:SPACING: space required before the open parenthesis '('
#84: FILE: drivers/perfctr/global.c:52:
+	if( hardware_is_ours ) {

ERROR:SPACING: space required before the open parenthesis '('
#89: FILE: drivers/perfctr/global.c:57:
+		for(i = 0; i < NR_CPUS; ++i)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#89: FILE: drivers/perfctr/global.c:57:
+		for(i = 0; i < NR_CPUS; ++i)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#97: FILE: drivers/perfctr/global.c:65:
+	/* PREEMPT note: when called via smp_call_function(),
+	   this is in IRQ context with preemption disabled. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#97: FILE: drivers/perfctr/global.c:65:
+	   this is in IRQ context with preemption disabled. */

ERROR:SPACING: space prohibited after that open parenthesis '('
#101: FILE: drivers/perfctr/global.c:69:
+	if( !perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#101: FILE: drivers/perfctr/global.c:69:
+	if( !perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space required before the open parenthesis '('
#101: FILE: drivers/perfctr/global.c:69:
+	if( !perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: drivers/perfctr/global.c:82:
+{^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#129: FILE: drivers/perfctr/global.c:97:
+	if( interval_usec > 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#129: FILE: drivers/perfctr/global.c:97:
+	if( interval_usec > 0 ) {

ERROR:SPACING: space required before the open parenthesis '('
#129: FILE: drivers/perfctr/global.c:97:
+	if( interval_usec > 0 ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: drivers/perfctr/global.c:99:
+		unsigned long interval = usectojiffies(interval_usec);
+		init_timer(&sampling_timer);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#142: FILE: drivers/perfctr/global.c:110:
+	/* PREEMPT note: when called via smp_call_function(),
+	   this is in IRQ context with preemption disabled. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#142: FILE: drivers/perfctr/global.c:110:
+	   this is in IRQ context with preemption disabled. */

ERROR:SPACING: space prohibited after that open parenthesis '('
#146: FILE: drivers/perfctr/global.c:114:
+	if( perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#146: FILE: drivers/perfctr/global.c:114:
+	if( perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: drivers/perfctr/global.c:114:
+	if( perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#162: FILE: drivers/perfctr/global.c:130:
+	if( ret )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#162: FILE: drivers/perfctr/global.c:130:
+	if( ret )

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: drivers/perfctr/global.c:130:
+	if( ret )

ERROR:SPACING: space prohibited after that open parenthesis '('
#164: FILE: drivers/perfctr/global.c:132:
+	if( cpu_control.cpu >= NR_CPUS ||

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: drivers/perfctr/global.c:132:
+	if( cpu_control.cpu >= NR_CPUS ||

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#164: FILE: drivers/perfctr/global.c:132:
+	if( cpu_control.cpu >= NR_CPUS ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: drivers/perfctr/global.c:133:
+	if( cpu_control.cpu >= NR_CPUS ||
+	    !cpu_online(cpu_control.cpu) ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#166: FILE: drivers/perfctr/global.c:134:
+	    perfctr_cpu_is_forbidden(cpu_control.cpu) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#169: FILE: drivers/perfctr/global.c:137:
+	if( cpu_control.cpu_control.nrictrs != 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#169: FILE: drivers/perfctr/global.c:137:
+	if( cpu_control.cpu_control.nrictrs != 0 )

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: drivers/perfctr/global.c:137:
+	if( cpu_control.cpu_control.nrictrs != 0 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#173: FILE: drivers/perfctr/global.c:141:
+	if( hardware_is_ours )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#173: FILE: drivers/perfctr/global.c:141:
+	if( hardware_is_ours )

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: drivers/perfctr/global.c:141:
+	if( hardware_is_ours )

WARNING:SIZEOF_PARENTHESIS: sizeof perfctr->cpu_state.pmc should be sizeof(perfctr->cpu_state.pmc)
#179: FILE: drivers/perfctr/global.c:147:
+	memset(&perfctr->cpu_state.pmc, 0, sizeof perfctr->cpu_state.pmc);

ERROR:SPACING: space prohibited after that open parenthesis '('
#183: FILE: drivers/perfctr/global.c:151:
+	if( ret < 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#183: FILE: drivers/perfctr/global.c:151:
+	if( ret < 0 )

ERROR:SPACING: space required before the open parenthesis '('
#183: FILE: drivers/perfctr/global.c:151:
+	if( ret < 0 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#185: FILE: drivers/perfctr/global.c:153:
+	if( perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#185: FILE: drivers/perfctr/global.c:153:
+	if( perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: drivers/perfctr/global.c:153:
+	if( perfctr_cstatus_enabled(perfctr->cpu_state.cstatus) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#197: FILE: drivers/perfctr/global.c:165:
+	if( interval_usec < 10000 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#197: FILE: drivers/perfctr/global.c:165:
+	if( interval_usec < 10000 )

ERROR:SPACING: space required before the open parenthesis '('
#197: FILE: drivers/perfctr/global.c:165:
+	if( interval_usec < 10000 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#201: FILE: drivers/perfctr/global.c:169:
+	if( ret > 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#201: FILE: drivers/perfctr/global.c:169:
+	if( ret > 0 ) {

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: drivers/perfctr/global.c:169:
+	if( ret > 0 ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#202: FILE: drivers/perfctr/global.c:170:
+		if( reserve_hardware() < 0 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#202: FILE: drivers/perfctr/global.c:170:
+		if( reserve_hardware() < 0 ) {

ERROR:SPACING: space required before the open parenthesis '('
#202: FILE: drivers/perfctr/global.c:170:
+		if( reserve_hardware() < 0 ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#229: FILE: drivers/perfctr/global.c:197:
+	if( err )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#229: FILE: drivers/perfctr/global.c:197:
+	if( err )

ERROR:SPACING: space required before the open parenthesis '('
#229: FILE: drivers/perfctr/global.c:197:
+	if( err )

ERROR:SPACING: space prohibited after that open parenthesis '('
#231: FILE: drivers/perfctr/global.c:199:
+	if( state.cpu >= NR_CPUS || !cpu_online(state.cpu) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#231: FILE: drivers/perfctr/global.c:199:
+	if( state.cpu >= NR_CPUS || !cpu_online(state.cpu) )

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: drivers/perfctr/global.c:199:
+	if( state.cpu >= NR_CPUS || !cpu_online(state.cpu) )

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#231: FILE: drivers/perfctr/global.c:199:
+	if( state.cpu >= NR_CPUS || !cpu_online(state.cpu) )

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: drivers/perfctr/global.c:207:
+		int j;
+		state.sum.tsc = perfctr->cpu_state.tsc_sum;

ERROR:SPACING: space required before the open parenthesis '('
#240: FILE: drivers/perfctr/global.c:208:
+		for(j = 0; j < ARRAY_SIZE(state.sum.pmc); ++j)

ERROR:SPACING: space prohibited after that open parenthesis '('
#249: FILE: drivers/perfctr/global.c:217:
+	if( !capable(CAP_SYS_PTRACE) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#249: FILE: drivers/perfctr/global.c:217:
+	if( !capable(CAP_SYS_PTRACE) )

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: drivers/perfctr/global.c:217:
+	if( !capable(CAP_SYS_PTRACE) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#251: FILE: drivers/perfctr/global.c:219:
+	switch( cmd ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#251: FILE: drivers/perfctr/global.c:219:
+	switch( cmd ) {

ERROR:SPACING: space required before the open parenthesis '('
#251: FILE: drivers/perfctr/global.c:219:
+	switch( cmd ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#253: FILE: drivers/perfctr/global.c:221:
+		return gperfctr_control((struct perfctr_struct_buf*)arg);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#255: FILE: drivers/perfctr/global.c:223:
+		return gperfctr_read((struct perfctr_struct_buf*)arg);

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: drivers/perfctr/global.c:236:
+	for(i = 0; i < NR_CPUS; ++i)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#268: FILE: drivers/perfctr/global.c:236:
+	for(i = 0; i < NR_CPUS; ++i)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#275: FILE: drivers/perfctr/global.h:1:
+/* $Id: global.h,v 1.8 2004/05/13 23:32:49 mikpe Exp $

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#275: FILE: drivers/perfctr/global.h:1:
+/* $Id: global.h,v 1.8 2004/05/13 23:32:49 mikpe Exp $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: drivers/perfctr/global.h:8:
+extern int sys_gperfctr(unsigned int cmd, unsigned long arg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: drivers/perfctr/global.h:9:
+extern void gperfctr_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: drivers/perfctr/global.h:11:
+extern int sys_gperfctr(unsigned int cmd, unsigned long arg)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#289: FILE: drivers/perfctr/global.h:15:
+}
+static inline void gperfctr_init(void) { }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 65 errors, 19 warnings, 6 checks, 254 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
