WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
converting numbers to strings and making the user program convert them back...

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#68: 
Zoltán Menyhárt
    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#499: FILE: include/asm-ia64/page_migrate.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: include/asm-ia64/page_migrate.h:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#516: FILE: include/asm-ia64/page_migrate.h:18:
+typedef	long long	return_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#521: FILE: include/asm-ia64/page_migrate.h:23:
+typedef	long long	phaddr_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: include/asm-ia64/page_migrate.h:25:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: include/asm-ia64/page_migrate.h:31:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#535: FILE: include/asm-ia64/page_migrate.h:37:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: include/asm-ia64/page_migrate.h:89:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#590: FILE: include/asm-ia64/page_migrate.h:92:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#598: FILE: include/asm-ia64/page_migrate.h:100:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: include/asm-ia64/page_migrate.h:117:
+migrate_ph_pages(const phaddr_t				* const table,
+			const size_t			length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: include/asm-ia64/page_migrate.h:128:
+	u.ll = syscall(__NR_page_migrate, _PHADDR_BATCH_MIGRATE_,
+						table, length, node, pid);

ERROR:SPACING: space required before the open brace '{'
#629: FILE: include/asm-ia64/page_migrate.h:131:
+	if (p != NULL){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#629: FILE: include/asm-ia64/page_migrate.h:131:
+	if (p != NULL){

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: include/asm-ia64/page_migrate.h:135:
+^Ireturn 0; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#636: FILE: include/asm-ia64/page_migrate.h:138:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: include/asm-ia64/page_migrate.h:166:
+	u.ll = syscall(__NR_page_migrate, _VA_RANGE_MIGRATE_,
+						addr, length, node, pid);

ERROR:SPACING: space required before the open brace '{'
#667: FILE: include/asm-ia64/page_migrate.h:169:
+	if (p != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#667: FILE: include/asm-ia64/page_migrate.h:169:
+	if (p != NULL){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: include/asm-ia64/page_migrate.h:173:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#674: FILE: include/asm-ia64/page_migrate.h:176:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#689: FILE: include/asm-ia64/page_migrate.h:191:
+	if (p != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: include/asm-ia64/page_migrate.h:193:
+^Ireturn 0; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#694: FILE: include/asm-ia64/page_migrate.h:196:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#704: FILE: include/asm-ia64/page_migrate.h:206:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#714: FILE: include/asm-ia64/page_migrate.h:216:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'address' - possible side-effects?
#735: FILE: include/asm-ia64/pgtable.h:126:
+#define	__IS_VADDR_ALIAS(address, length)					\
+			((~__VADDR_ALIAS_MASK & (address)) !=			\
+			(~__VADDR_ALIAS_MASK & ((address) + (length) - 1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgdi' - possible side-effects?
#742: FILE: include/asm-ia64/pgtable.h:133:
+#define	__VA(pgdi, pmdi, ptei)							\
+			(((pgdi) >> (PAGE_SHIFT - 6)) << 61 |			\
+			((pgdi) & ((PTRS_PER_PGD >> 3) - 1)) << PGDIR_SHIFT |	\
+			(pmdi) << PMD_SHIFT | (ptei) << PAGE_SHIFT)

CHECK:SPACING: No space is necessary after a cast
#760: FILE: include/asm-ia64/pgtable.h:355:
+	((pmd_t *) pgd_page(*(dir)) + pmd_index(addr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#779: FILE: include/linux/page_migrate.h:1:
+#define	_TEST_

CHECK:LINE_SPACING: Please don't use multiple blank lines
#785: FILE: include/linux/page_migrate.h:7:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#885: FILE: mm/migrate.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#896: FILE: mm/migrate.c:12:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#908: FILE: mm/migrate.c:24:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#913: FILE: mm/migrate.c:29:
+typedef	unsigned long	vaddr_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#915: FILE: mm/migrate.c:31:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#929: FILE: mm/migrate.c:45:
+						printk(args);			\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#933: FILE: mm/migrate.c:49:
+						printk(args);			\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#937: FILE: mm/migrate.c:53:
+						printk(args);			\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#941: FILE: mm/migrate.c:57:
+						printk(args);			\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#947: FILE: mm/migrate.c:63:
+static const char inv_n_addresses[] = ^I"Invalid number of addresses";$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#952: FILE: mm/migrate.c:68:
+phaddr_t	gimme_an_address(const caddr_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const caddr_t' should also have an identifier name
#952: FILE: mm/migrate.c:68:
+phaddr_t	gimme_an_address(const caddr_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#969: FILE: mm/migrate.c:85:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#972: FILE: mm/migrate.c:88:
+common_page_migrate(const int, const caddr_t, const size_t, const int,
+								const pid_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#974: FILE: mm/migrate.c:90:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#974: FILE: mm/migrate.c:90:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const vaddr_t' should also have an identifier name
#974: FILE: mm/migrate.c:90:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const vaddr_t' should also have an identifier name
#974: FILE: mm/migrate.c:90:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#974: FILE: mm/migrate.c:90:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct * const' should also have an identifier name
#974: FILE: mm/migrate.c:90:
+STATIC INLINE return_t

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#976: FILE: mm/migrate.c:92:
+validate_migrate_pages(const int, const vaddr_t, const vaddr_t, const int,
+						struct mm_struct * const);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#978: FILE: mm/migrate.c:94:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#978: FILE: mm/migrate.c:94:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const phaddr_t * const' should also have an identifier name
#978: FILE: mm/migrate.c:94:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#978: FILE: mm/migrate.c:94:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#978: FILE: mm/migrate.c:94:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct * const' should also have an identifier name
#978: FILE: mm/migrate.c:94:
+STATIC INLINE int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t * const' should also have an identifier name
#978: FILE: mm/migrate.c:94:
+STATIC INLINE int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: mm/migrate.c:96:
+migr_1_page_by_pte(const int, const phaddr_t * const, const size_t, const int,
+				struct mm_struct * const, pte_t * const);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#982: FILE: mm/migrate.c:98:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const caddr_t' should also have an identifier name
#982: FILE: mm/migrate.c:98:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#982: FILE: mm/migrate.c:98:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#982: FILE: mm/migrate.c:98:
+STATIC INLINE return_t

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const pid_t' should also have an identifier name
#982: FILE: mm/migrate.c:98:
+STATIC INLINE return_t

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#985: FILE: mm/migrate.c:101:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page * const' should also have an identifier name
#985: FILE: mm/migrate.c:101:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page * const' should also have an identifier name
#985: FILE: mm/migrate.c:101:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct * const' should also have an identifier name
#985: FILE: mm/migrate.c:101:
+int

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t * const' should also have an identifier name
#985: FILE: mm/migrate.c:101:
+int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: mm/migrate.c:103:
+check_migr_1_page(struct page * const, struct page * const,
+					struct mm_struct * const, pte_t * const);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#989: FILE: mm/migrate.c:105:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#997: FILE: mm/migrate.c:113:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1005: FILE: mm/migrate.c:121:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1013: FILE: mm/migrate.c:129:
+STATIC struct _statistics_size_	_statistics_sizes =
+					{sizeof _statistics, MAX_NUMNODES};

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SIZEOF_PARENTHESIS: sizeof _statistics should be sizeof(_statistics)
#1013: FILE: mm/migrate.c:129:
+					{sizeof _statistics, MAX_NUMNODES};

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1016: FILE: mm/migrate.c:132:
+#define	SAVE_ITC(var)			var = GET_TIMER()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1017: FILE: mm/migrate.c:133:
+#define	STORE_DELAY(var, dest)		_statistics.t.dest += GET_TIMER() - var

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#1017: FILE: mm/migrate.c:133:
+#define	STORE_DELAY(var, dest)		_statistics.t.dest += GET_TIMER() - var

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dest' may be better as '(dest)' to avoid precedence issues
#1017: FILE: mm/migrate.c:133:
+#define	STORE_DELAY(var, dest)		_statistics.t.dest += GET_TIMER() - var

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1018: FILE: mm/migrate.c:134:
+#define	COUNT(what)			_statistics.c.what++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'what' may be better as '(what)' to avoid precedence issues
#1018: FILE: mm/migrate.c:134:
+#define	COUNT(what)			_statistics.c.what++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1019: FILE: mm/migrate.c:135:
+#define	ERROR_CNT(what)			_statistics.e.what++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'what' may be better as '(what)' to avoid precedence issues
#1019: FILE: mm/migrate.c:135:
+#define	ERROR_CNT(what)			_statistics.e.what++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1020: FILE: mm/migrate.c:136:
+#define	ERROR_CNT_ADD(var, delta)	_statistics.e.var += delta

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#1020: FILE: mm/migrate.c:136:
+#define	ERROR_CNT_ADD(var, delta)	_statistics.e.var += delta

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1021: FILE: mm/migrate.c:137:
+#define	MOVED(from, to)			_statistics.count[from][to]++

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1023: FILE: mm/migrate.c:139:
+STATIC INLINE int	page_migrate_statistics(const caddr_t, const int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const caddr_t' should also have an identifier name
#1023: FILE: mm/migrate.c:139:
+STATIC INLINE int	page_migrate_statistics(const caddr_t, const int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#1023: FILE: mm/migrate.c:139:
+STATIC INLINE int	page_migrate_statistics(const caddr_t, const int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1037: FILE: mm/migrate.c:153:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1046: FILE: mm/migrate.c:162:
+sys_page_migrate(const int cmd, const caddr_t address, const size_t length,
+						const int node, const pid_t pid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1053: FILE: mm/migrate.c:169:
+	PRINT("\nsys_page_migrate(%d, 0x%p, 0x%lx, %d, %d): pid = %d\n",
+				cmd, address, length, node, pid, current->pid);

ERROR:SPACING: space required before the open brace '{'
#1054: FILE: mm/migrate.c:170:
+	switch (cmd){

ERROR:SPACING: space required before the open brace '{'
#1059: FILE: mm/migrate.c:175:
+		if (length > PAGE_SIZE / sizeof(phaddr_t)){

CHECK:SPACING: No space is necessary after a cast
#1078: FILE: mm/migrate.c:194:
+		if (__IS_VADDR_ALIAS((vaddr_t) address, length)){

ERROR:SPACING: space required before the open brace '{'
#1078: FILE: mm/migrate.c:194:
+		if (__IS_VADDR_ALIAS((vaddr_t) address, length)){

CHECK:SPACING: No space is necessary after a cast
#1092: FILE: mm/migrate.c:208:
+		rc =  *(return_t *) &_statistics_sizes; /* Yeh, I know... */

CHECK:SPACING: No space is necessary after a cast
#1097: FILE: mm/migrate.c:213:
+		rc = (return_t) gimme_an_address(address);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1109: FILE: mm/migrate.c:225:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1127: FILE: mm/migrate.c:243:
+batch_migrate(const caddr_t table, const size_t n, const int node,
+								const pid_t pid)

ERROR:SPACING: space required before the open brace '{'
#1139: FILE: mm/migrate.c:255:
+	if (bp == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bp"
#1139: FILE: mm/migrate.c:255:
+	if (bp == NULL){

ERROR:SPACING: space required before the open brace '{'
#1144: FILE: mm/migrate.c:260:
+	if (copy_from_user(bp, table, n * sizeof(phaddr_t)) != 0){

CHECK:SPACING: No space is necessary after a cast
#1150: FILE: mm/migrate.c:266:
+	rc = common_page_migrate(_PHADDR_MIG, (caddr_t) bp, n, node, pid);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1155: FILE: mm/migrate.c:271:
+
+

ERROR:SPACING: space required before the open brace '{'
#1181: FILE: mm/migrate.c:297:
+	if ((p = find_task_by_pid(pid)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1181: FILE: mm/migrate.c:297:
+	if ((p = find_task_by_pid(pid)) == NULL){

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1188: FILE: mm/migrate.c:304:
+	if (current->session != p->session && current->euid != p->suid &&
+			current->euid != p->uid && current->uid != p->suid &&

ERROR:SPACING: space required before the open brace '{'
#1189: FILE: mm/migrate.c:305:
+				current->uid != p->uid && !capable(CAP_KILL)){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1199: FILE: mm/migrate.c:315:
+	if ((mm = get_task_mm(p)) == NULL)	/* If kernel thread... */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1206: FILE: mm/migrate.c:322:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1230: FILE: mm/migrate.c:346:
+common_page_migrate(const int type, const caddr_t addr, const size_t ln,
+						const int node, const pid_t pid)

ERROR:SPACING: space required before the open brace '{'
#1240: FILE: mm/migrate.c:356:
+	if (!node_online(node)){

ERROR:SPACING: space required before the open brace '{'
#1245: FILE: mm/migrate.c:361:
+	if (pid != 0 && pid != current->pid){

ERROR:SPACING: space required before the open brace '{'
#1246: FILE: mm/migrate.c:362:
+		if ((mm = look_up_mm(pid, &rc)) == NULL){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1246: FILE: mm/migrate.c:362:
+		if ((mm = look_up_mm(pid, &rc)) == NULL){

ERROR:SPACING: space required before the open brace '{'
#1263: FILE: mm/migrate.c:379:
+	if (type == _VADDR_MIG){

CHECK:SPACING: No space is necessary after a cast
#1273: FILE: mm/migrate.c:389:
+		beg_vma = find_vma(mm, (vaddr_t) addr);

CHECK:SPACING: No space is necessary after a cast
#1275: FILE: mm/migrate.c:391:
+		if (beg_vma == NULL || beg_vma->vm_start > (vaddr_t) addr){

ERROR:SPACING: space required before the open brace '{'
#1275: FILE: mm/migrate.c:391:
+		if (beg_vma == NULL || beg_vma->vm_start > (vaddr_t) addr){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!beg_vma"
#1275: FILE: mm/migrate.c:391:
+		if (beg_vma == NULL || beg_vma->vm_start > (vaddr_t) addr){

CHECK:SPACING: No space is necessary after a cast
#1278: FILE: mm/migrate.c:394:
+			PRINT_ERR(no_vma, (vaddr_t) addr);

CHECK:SPACING: No space is necessary after a cast
#1295: FILE: mm/migrate.c:411:
+	rc = validate_migrate_pages(type, (vaddr_t) addr & PAGE_MASK,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1296: FILE: mm/migrate.c:412:
+	rc = validate_migrate_pages(type, (vaddr_t) addr & PAGE_MASK,
+								ln, node, mm);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1309: FILE: mm/migrate.c:425:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1342: FILE: mm/migrate.c:458:
+validate_migrate_pages(const int type, const vaddr_t addr, const vaddr_t ln,
+				const int node, struct mm_struct * const mm)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1345: FILE: mm/migrate.c:461:
+^Ivaddr_t^I^I^Iulimit; $

ERROR:SPACING: space required before the open brace '{'
#1354: FILE: mm/migrate.c:470:
+	if (type == _PHADDR_MIG){

CHECK:SPACING: No space is necessary after a cast
#1359: FILE: mm/migrate.c:475:
+		ulimit = PAGE_ALIGN((vaddr_t) addr + ln);	/* Round up */

ERROR:SPACING: space required before the open brace '{'
#1374: FILE: mm/migrate.c:490:
+		if (pgd_none(*pgd) || pgd_bad(*pgd)){

ERROR:SPACING: space required before the open brace '{'
#1383: FILE: mm/migrate.c:499:
+			if (pmd_none(*pmd) || pmd_bad(*pmd)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: mm/migrate.c:510:
+				PRINT("\nVirtual addr:\t0x%016lx\n",
+								__VA(g, m, e));

CHECK:SPACING: No space is necessary after a cast
#1396: FILE: mm/migrate.c:512:
+				rc = migr_1_page_by_pte(type, (phaddr_t *) addr,

ERROR:SPACING: space required before the open brace '{'
#1398: FILE: mm/migrate.c:514:
+				if (rc < 0){

ERROR:SPACING: space required before the open brace '{'
#1403: FILE: mm/migrate.c:519:
+				switch (rc){

CHECK:SPACING: No space is necessary after a cast
#1418: FILE: mm/migrate.c:534:
+	return *(return_t *) &count;		/* Yeh, I know... */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1421: FILE: mm/migrate.c:537:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1444: FILE: mm/migrate.c:560:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1473: FILE: mm/migrate.c:589:
+migr_1_page_by_pte(const int type, const phaddr_t * const addr, const size_t ln,
+		const int node, struct mm_struct * const mm, pte_t * const pte)

ERROR:SPACING: space required before the open brace '{'
#1488: FILE: mm/migrate.c:604:
+	if (node == src_node){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1490: FILE: mm/migrate.c:606:
+		PRINT_ETC("Old ph addr:\t0x%016llx old node: %d new node: %d\n",
+						old_addr, src_node, node);

ERROR:SPACING: space required before the open brace '{'
#1496: FILE: mm/migrate.c:612:
+	if (new_p == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_p"
#1496: FILE: mm/migrate.c:612:
+	if (new_p == NULL){

CHECK:BRACES: braces {} should be used on all arms of this statement
#1518: FILE: mm/migrate.c:634:
+	if (rc == 0)
[...]
+	else{
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#1520: FILE: mm/migrate.c:636:
+	else{

CHECK:BRACES: Unbalanced braces around else statement
#1520: FILE: mm/migrate.c:636:
+	else{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1531: FILE: mm/migrate.c:647:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1548: FILE: mm/migrate.c:664:
+page_migrate(struct page * const old, struct page * const new,
+				struct mm_struct * const mm, pte_t * const pte_p)

ERROR:SPACING: space required before the open brace '{'
#1559: FILE: mm/migrate.c:675:
+	if (!PageDirect(old)){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#1569: FILE: mm/migrate.c:685:
+	if (vma == NULL || vma->vm_start > vaddress)

WARNING:TYPO_SPELLING: 'beacause' may be misspelled - perhaps 'because'?
#1582: FILE: mm/migrate.c:698:
+	 * They pass easily "->mmap_sem" beacause they take it for read, too.
 	                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1612: FILE: mm/migrate.c:728:
+	PRINT("New ph addr:\t0x%016lx\nNew PTE:\t0x%016lx\n\n",
+						page_to_phys(new), pte_val(pte));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1625: FILE: mm/migrate.c:741:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1641: FILE: mm/migrate.c:757:
+check_migr_1_page(struct page * const old, struct page * const new,
+				struct mm_struct * const mm, pte_t * const pte)

ERROR:SPACING: space required before the open brace '{'
#1647: FILE: mm/migrate.c:763:
+	if (PageReserved(old)){

ERROR:SPACING: space required before the open brace '{'
#1652: FILE: mm/migrate.c:768:
+	if (PageError(old)){

ERROR:SPACING: space required before the open brace '{'
#1657: FILE: mm/migrate.c:773:
+	if (!PageUptodate(old)){

ERROR:SPACING: space required before the open brace '{'
#1662: FILE: mm/migrate.c:778:
+	if (PageCompound(old)){

ERROR:SPACING: space required before the open brace '{'
#1667: FILE: mm/migrate.c:783:
+	if (old->mapping != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old->mapping"
#1667: FILE: mm/migrate.c:783:
+	if (old->mapping != NULL){

ERROR:SPACING: space required before the open brace '{'
#1672: FILE: mm/migrate.c:788:
+	if (PageSwapCache(old)){

ERROR:SPACING: space required before the open brace '{'
#1677: FILE: mm/migrate.c:793:
+	if (PageHighMem(page)){

ERROR:SPACING: space required before the open brace '{'
#1685: FILE: mm/migrate.c:801:
+	if (!page_mapped(old)){			/* Actually means "r-mapped" */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1704: FILE: mm/migrate.c:820:
+
+

WARNING:SIZEOF_PARENTHESIS: sizeof _statistics should be sizeof(_statistics)
#1718: FILE: mm/migrate.c:834:
+	if (copy_to_user(vaddress, &_statistics, sizeof _statistics) != 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1721: FILE: mm/migrate.c:837:
+		memset(&_statistics, 0,sizeof _statistics);
 		                      ^

WARNING:SIZEOF_PARENTHESIS: sizeof _statistics should be sizeof(_statistics)
#1721: FILE: mm/migrate.c:837:
+		memset(&_statistics, 0,sizeof _statistics);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1727: FILE: mm/migrate.c:843:
+
+

CHECK:SPACING: No space is necessary after a cast
#1742: FILE: mm/migrate.c:858:
+	PRINT("Virtual addr:\t0x%016lx\n", (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1744: FILE: mm/migrate.c:860:
+	vma = find_vma(current->mm, (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1745: FILE: mm/migrate.c:861:
+	if (vma == NULL || vma->vm_start > (vaddr_t) vaddress){

ERROR:SPACING: space required before the open brace '{'
#1745: FILE: mm/migrate.c:861:
+	if (vma == NULL || vma->vm_start > (vaddr_t) vaddress){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#1745: FILE: mm/migrate.c:861:
+	if (vma == NULL || vma->vm_start > (vaddr_t) vaddress){

CHECK:SPACING: No space is necessary after a cast
#1751: FILE: mm/migrate.c:867:
+		pgd = pgd_offset(current->mm, (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1754: FILE: mm/migrate.c:870:
+		pmd = pmd_offset(pgd, (vaddr_t) vaddress);

CHECK:SPACING: No space is necessary after a cast
#1757: FILE: mm/migrate.c:873:
+		pte = pte_offset_map(pmd, (vaddr_t) vaddress);

ERROR:SPACING: space required before the open brace '{'
#1758: FILE: mm/migrate.c:874:
+		if (!pte_present(*pte)){

CHECK:SPACING: No space is necessary after a cast
#1767: FILE: mm/migrate.c:883:
+	PRINT("Physical addr:\t0x%016llx\n", (long long) phaddress);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000291094.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 44 warnings, 89 checks, 1645 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000291094.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
