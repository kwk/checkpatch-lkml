WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: drivers/char/raw.c:257:
+^I.aio_write = ^Igeneric_file_aio_write_nolock,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: fs/block_dev.c:1089:
+  ^I.aio_write^I= generic_file_aio_write_nolock,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: fs/block_dev.c:1089:
+  ^I.aio_write^I= generic_file_aio_write_nolock,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/block_dev.c:1089:
+  ^I.aio_write^I= generic_file_aio_write_nolock,$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#377: FILE: fs/xfs/linux-2.6/xfs_file.c:88:
+	return __xfs_file_read(iocb, iov, nr_segs, IO_ISAIO|IO_INVIS, pos);
 	                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#429: FILE: fs/xfs/linux-2.6/xfs_file.c:129:
+	return __xfs_file_write(iocb, iov, nr_segs, IO_ISAIO|IO_INVIS, pos);
 	                                                    ^

WARNING:SPACING: Unnecessary space before function pointer arguments
#444: FILE: include/linux/fs.h:1020:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#444: FILE: include/linux/fs.h:1020:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#444: FILE: include/linux/fs.h:1020:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#444: FILE: include/linux/fs.h:1020:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#444: FILE: include/linux/fs.h:1020:
+	ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#445: FILE: include/linux/fs.h:1021:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#445: FILE: include/linux/fs.h:1021:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#445: FILE: include/linux/fs.h:1021:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#445: FILE: include/linux/fs.h:1021:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#445: FILE: include/linux/fs.h:1021:
+	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#454: FILE: include/linux/fs.h:1598:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#454: FILE: include/linux/fs.h:1598:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#454: FILE: include/linux/fs.h:1598:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#454: FILE: include/linux/fs.h:1598:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#454: FILE: include/linux/fs.h:1598:
+extern ssize_t generic_file_aio_read(struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: include/linux/fs.h:1600:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#457: FILE: include/linux/fs.h:1600:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#457: FILE: include/linux/fs.h:1600:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#457: FILE: include/linux/fs.h:1600:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#457: FILE: include/linux/fs.h:1600:
+extern ssize_t generic_file_aio_write(struct kiocb *, const struct iovec *, unsigned long, loff_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: mm/filemap.c:1132:
+generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: mm/filemap.c:2198:
+ssize_t generic_file_aio_write_nolock(struct kiocb *iocb,
+		const struct iovec *iov, unsigned long nr_segs, loff_t pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: mm/filemap.c:2205:
+	BUG_ON(iocb->ki_pos != pos);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: mm/filemap.c:2208:
+	ret = __generic_file_aio_write_nolock(iocb, iov, nr_segs,
+			&iocb->ki_pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: mm/filemap.c:2254:
+ssize_t generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: mm/filemap.c:2265:
+	ret = __generic_file_aio_write_nolock(iocb, iov, nr_segs,
+			&iocb->ki_pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: net/socket.c:100:
+static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
+			 unsigned long nr_segs, loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: net/socket.c:102:
+static ssize_t sock_aio_write(struct kiocb *iocb, const struct iovec *iov,
+			  unsigned long nr_segs, loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: net/socket.c:759:
+static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
+			 unsigned long nr_segs, loff_t pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#655: FILE: net/socket.c:769:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: net/socket.c:818:
+static ssize_t sock_aio_write(struct kiocb *iocb, const struct iovec *iov,
+			  unsigned long nr_segs, loff_t pos)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: drivers/usb/gadget/inode.c:531:
+^Iconst struct iovec ^I*iv;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#717: FILE: drivers/usb/gadget/inode.c:532:
+^Iunsigned long ^I^Inr_segs;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#739: FILE: drivers/usb/gadget/inode.c:568:
+	for (i=0; i < priv->nr_segs; i++) {
 	      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#768: FILE: drivers/usb/gadget/inode.c:635:
+^Iunsigned long ^Inr_segs$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: drivers/usb/gadget/inode.c:697:
+ep_aio_read(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t o)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: drivers/usb/gadget/inode.c:715:
+ep_aio_write(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t o)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#827: FILE: drivers/usb/gadget/inode.c:729:
+	for (i=0; i < nr_segs; i++) {
 	      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#829: FILE: drivers/usb/gadget/inode.c:731:
+		if (unlikely(copy_from_user(&buf[len], iov[i].iov_base,
+				iov[i].iov_len) != 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: fs/nfs/direct.c:767:
+ssize_t nfs_file_direct_read(struct kiocb *iocb, const struct iovec *iov,
+				unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: fs/nfs/direct.c:840:
+ssize_t nfs_file_direct_write(struct kiocb *iocb, const struct iovec *iov,
+				unsigned long nr_segs, loff_t pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: fs/nfs/file.c:45:
+static ssize_t nfs_file_read(struct kiocb *iocb, const struct iovec *iov,
+				unsigned long nr_segs, loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: fs/nfs/file.c:47:
+static ssize_t nfs_file_write(struct kiocb *iocb, const struct iovec *iov,
+				unsigned long nr_segs, loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#977: FILE: fs/nfs/file.c:218:
+static ssize_t nfs_file_read(struct kiocb *iocb, const struct iovec *iov,
+				unsigned long nr_segs, loff_t pos)

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#991: FILE: fs/nfs/file.c:230:
+	dfprintk(VFS, "nfs: read(%s/%s, %lu@%Ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#992: FILE: fs/nfs/file.c:231:
+	dfprintk(VFS, "nfs: read(%s/%s, %lu@%Ld)\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name,

CHECK:SPACING: No space is necessary after a cast
#994: FILE: fs/nfs/file.c:232:
+		(unsigned long) count, (long long) pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: fs/nfs/file.c:350:
+static ssize_t nfs_file_write(struct kiocb *iocb, const struct iovec *iov,
+				unsigned long nr_segs, loff_t pos)

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1028: FILE: fs/nfs/file.c:362:
+	dfprintk(VFS, "nfs: write(%s/%s(%ld), %lu@%Ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1029: FILE: fs/nfs/file.c:363:
+	dfprintk(VFS, "nfs: write(%s/%s(%ld), %lu@%Ld)\n",
 		dentry->d_parent->d_name.name, dentry->d_name.name,

CHECK:SPACING: No space is necessary after a cast
#1031: FILE: fs/nfs/file.c:364:
+		inode->i_ino, (unsigned long) count, (long long) pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1056: FILE: include/linux/nfs_fs.h:362:
+extern ssize_t nfs_file_direct_read(struct kiocb *iocb, const struct iovec *iov,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: include/linux/nfs_fs.h:363:
+extern ssize_t nfs_file_direct_read(struct kiocb *iocb, const struct iovec *iov,
+			unsigned long nr_segs, loff_t pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1058: FILE: include/linux/nfs_fs.h:364:
+extern ssize_t nfs_file_direct_write(struct kiocb *iocb, const struct iovec *iov,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: include/linux/nfs_fs.h:365:
+extern ssize_t nfs_file_direct_write(struct kiocb *iocb, const struct iovec *iov,
+			unsigned long nr_segs, loff_t pos);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1087: FILE: fs/ocfs2/file.c:973:
+	mlog_entry("(0x%p, %u, '%.*s')\n", filp,
 	                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1141: FILE: fs/ocfs2/file.c:1140:
+	mlog_entry("(0x%p, %u, '%.*s')\n", filp,
 	                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: fs/ntfs/file.c:2178:
+static ssize_t ntfs_file_aio_write(struct kiocb *iocb, const struct iovec *iov,
+		unsigned long nr_segs, loff_t pos)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 29 warnings, 32 checks, 981 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000066571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
