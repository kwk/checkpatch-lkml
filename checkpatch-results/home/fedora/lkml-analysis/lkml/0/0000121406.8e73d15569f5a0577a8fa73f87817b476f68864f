WARNING:TYPO_SPELLING: 'prority' may be misspelled - perhaps 'priority'?
#37: 
> WAS: [SCHED] Totally WRONG prority calculation with specific test-case
                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
>>The issue is that the scheduler interactivity estimator is a state machine and 

WARNING:TYPO_SPELLING: 'does't' may be misspelled - perhaps 'doesn't'?
#135: 
> This does't surprise me anymore, since DD gets priority 18 and these
       ^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#144: 
targetted at the problem you are experiencing I believe that they may 
^^^^^^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#273: FILE: init/main.c:606:
+extern void sched_sysfs_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: kernel/exit.c:247:
+	if ((current->policy == SCHED_NORMAL ||
+			current->policy == SCHED_BATCH)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#297: FILE: kernel/exit.c:248:
+			current->policy == SCHED_BATCH)
+				&& (task_nice(current) < 0))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: kernel/sched.c:100:
+#define STARVATION_LIMIT       ^I(DEF_TIMESLICE * MAX_BONUS)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#347: FILE: kernel/sched.c:130:
+#define CURRENT_BONUS(p) (just_woken_from_ia_sleep(p) ? \
+			  (p)->latency_bonus + 1 : (p)->latency_bonus)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#449: FILE: kernel/sched.c:345:
+	p->flags &= ~(PF_IA_WAKE_UP|PF_JUST_WOKEN);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#473: FILE: kernel/sched.c:747:
+	if (rt_task(p)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#483: FILE: kernel/sched.c:757:
+	} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#677: FILE: kernel/sched.c:1009:
+	return min(rq->cpu_load[type-1], load_now);
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#707: FILE: kernel/sched.c:1023:
+	return max(rq->cpu_load[type-1], load_now);
 	                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#951: FILE: kernel/sched.c:2123:
+#define minus_1_or_zero(n) ((n) > 0 ? (n) - 1 : 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: kernel/sched.c:2372:
+	if (move_tasks(target_rq, target_cpu, busiest_rq, 1,
+			RTPRIO_TO_BIAS_PRIO(100), sd, SCHED_IDLE, NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param->sched_priority == 0'
#1167: FILE: kernel/sched.c:3669:
+	if ((policy == SCHED_NORMAL || policy == SCHED_BATCH)
+					!= (param->sched_priority == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: kernel/sched.c:3682:
+		if (((policy != SCHED_NORMAL && p->policy != SCHED_BATCH) &&
+			(policy != SCHED_BATCH && p->policy != SCHED_NORMAL)) &&

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#1248: FILE: kernel/sched.c:5715:
+	val = simple_strtoull(page, &end, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end == page'
#1249: FILE: kernel/sched.c:5716:
+	if ((end == page) || ((*end != '\0') && (*end != '\n')))

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#1269: FILE: kernel/sched.c:5736:
+	val = simple_strtoull(page, &end, 10);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end == page'
#1270: FILE: kernel/sched.c:5737:
+	if ((end == page) || ((*end != '\0') && (*end != '\n')))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1282: FILE: kernel/sched.c:5749:
+	ssize_t (*show)(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1283: FILE: kernel/sched.c:5750:
+	ssize_t (*store)(const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1283: FILE: kernel/sched.c:5750:
+	ssize_t (*store)(const char *, size_t);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1311: FILE: kernel/sched.c:5778:
+struct sysfs_ops sched_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1318: FILE: kernel/sched.c:5785:
+		  .mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1325: FILE: kernel/sched.c:5792:
+		  .mode = S_IRUGO | S_IWUSR },

ERROR:CODE_INDENT: code indent should use tabs where possible
#1354: FILE: kernel/sched.c:5821:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1354: FILE: kernel/sched.c:5821:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: kernel/sched.c:5821:
+ ^I}$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 16 warnings, 14 checks, 1114 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000121406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
