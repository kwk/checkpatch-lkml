WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
diff -ruN -X../cludes linux-2.6.0-test6-moo/mm/memory.c linux-2.6.0-test6-moo-v850-20031006/mm/memory.c

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#40: FILE: mm/memory.c:1693:
+	printk("Dumping data about address %p.\n", (void*)addr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#40: FILE: mm/memory.c:1693:
+	printk("Dumping data about address %p.\n", (void*)addr);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#41: FILE: mm/memory.c:1694:
+	if (!virt_addr_valid((void*)addr)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#42: FILE: mm/memory.c:1695:
+		printk("virt addr invalid.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#48: FILE: mm/memory.c:1701:
+		pmd_t *pmd;
+		if (pgd_none(*pgd)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#49: FILE: mm/memory.c:1702:
+			printk("No pgd.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#54: FILE: mm/memory.c:1707:
+			printk("No pmd.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#59: FILE: mm/memory.c:1712:
+			printk("Large page.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#63: FILE: mm/memory.c:1716:
+		printk("normal page, pte_val 0x%llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: mm/memory.c:1717:
+		printk("normal page, pte_val 0x%llx\n",
+		  (unsigned long long)pte_val(*pte_offset_kernel(pmd, addr)));

ERROR:SPACING: space required before the open parenthesis '('
#65: FILE: mm/memory.c:1718:
+	} while(0);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#67: FILE: mm/memory.c:1720:
+	page = virt_to_page((void*)addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#68: FILE: mm/memory.c:1721:
+	printk("struct page at %p, flags %lxh.\n", page, page->flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#77: FILE: mm/memory.c:1730:
+		printk("belongs to cache %s.\n",c->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: mm/memory.c:1730:
+		printk("belongs to cache %s.\n",c->name);
 		                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#81: FILE: mm/memory.c:1734:
+		printk("slabp %p with %d inuse objects (from %d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: mm/memory.c:1735:
+		printk("slabp %p with %d inuse objects (from %d).\n",
+			s, s->inuse, c->num);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: mm/memory.c:1736:
+		check_slabp(c,s);
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#85: FILE: mm/memory.c:1738:
+		objnr = (addr-(unsigned long)s->s_mem)/c->objsize;
 		             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#85: FILE: mm/memory.c:1738:
+		objnr = (addr-(unsigned long)s->s_mem)/c->objsize;
 		                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#86: FILE: mm/memory.c:1739:
+		objp = s->s_mem+c->objsize*objnr;
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#86: FILE: mm/memory.c:1739:
+		objp = s->s_mem+c->objsize*objnr;
 		                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#87: FILE: mm/memory.c:1740:
+		printk("points into object no %d, starting at %p, len %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: mm/memory.c:1741:
+		printk("points into object no %d, starting at %p, len %d.\n",
+			objnr, objp, c->objsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#90: FILE: mm/memory.c:1743:
+			printk("Bad obj number.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: mm/memory.c:1746:
+			kernel_map_pages(virt_to_page(objp),
+					c->objsize/PAGE_SIZE, 1);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#93: FILE: mm/memory.c:1746:
+					c->objsize/PAGE_SIZE, 1);
 					          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#96: FILE: mm/memory.c:1749:
+				printk("redzone: 0x%lx/0x%lx.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: mm/memory.c:1750:
+				printk("redzone: 0x%lx/0x%lx.\n",
+					*dbg_redzone1(c, objp),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#101: FILE: mm/memory.c:1754:
+				printk("Last user: %p.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: mm/memory.c:1755:
+				printk("Last user: %p.\n",
+					*dbg_userword(c, objp));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#106: FILE: mm/memory.c:1759:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332125.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 15 warnings, 12 checks, 79 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332125.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
