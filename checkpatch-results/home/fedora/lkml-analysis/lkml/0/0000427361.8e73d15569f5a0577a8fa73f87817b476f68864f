WARNING:TYPO_SPELLING: 'lengh' may be misspelled - perhaps 'length'?
#57: 
- Add a dynamic limit to the lengh of the free list
                             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#85: FILE: mm/slab.c:12:
+ * ^I(c) 2002 Manfred Spraul$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: mm/slab.c:49:
+ * The c_cpuarray may not be read with enabled local interrupts - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: mm/slab.c:108:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: mm/slab.c:200:
+	void * entries[BOOT_CPUCACHE_ENTRIES];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: mm/slab.c:209:
+ * ^Iuse the alternate cpudata cache if wrong$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: mm/slab.c:216:
+ * They provide some aging, and hopefully reduce the $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#228: FILE: mm/slab.c:230:
+#define LIST3_INIT(parent) \
+	{ \
+		.slabs_full	= LIST_HEAD_INIT(parent.slabs_full), \
+		.slabs_partial	= LIST_HEAD_INIT(parent.slabs_partial), \
+		.slabs_free	= LIST_HEAD_INIT(parent.slabs_free) \
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: mm/slab.c:248:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: mm/slab.c:309:
+/* Optimization question: fewer reaps means less $

WARNING:TYPO_SPELLING: 'OTHO' may be misspelled - perhaps 'OTOH'?
#332: FILE: mm/slab.c:312:
+ * OTHO the cpuarrays can contain lots of objects,
    ^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#335: FILE: mm/slab.c:315:
+#define REAPTIMEOUT_CPUC	(2*HZ)
                         	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#336: FILE: mm/slab.c:316:
+#define REAPTIMEOUT_LIST3	(4*HZ)
                          	  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#344: FILE: mm/slab.c:328:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#344: FILE: mm/slab.c:328:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#344: FILE: mm/slab.c:328:
+#define	STATS_SET_FREEABLE(x, i) \
+				do { if ((x)->max_freeable < i) \
+					(x)->max_freeable = i; \
+				} while (0)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#405: FILE: mm/slab.c:468:
+static kmem_cache_t *clock_searchp[NR_CPUS] = { [0 ... NR_CPUS -1] = &cache_cache};
                                                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#431: FILE: mm/slab.c:489:
+static void cache_estimate (unsigned long gfporder, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: mm/slab.c:490:
+static void cache_estimate (unsigned long gfporder, size_t size,
 		 int flags, size_t *left_over, unsigned int *num)

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: mm/slab.c:520:
+	int cpu = smp_processor_id();
+	if (reap_timer[cpu].expires == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#444: FILE: mm/slab.c:521:
+		printk(KERN_INFO "slab: reap timer started for cpu %d.\n", cpu);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#446: FILE: mm/slab.c:523:
+		reap_timer[cpu].expires = jiffies + HZ + 3*cpu;
 		                                          ^

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#455: FILE: mm/slab.c:532:
+	void (*fnc)(void*arg);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#466: FILE: mm/slab.c:543:
+	BUG_ON(smp_processor_id() != info->cpu);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#476: FILE: mm/slab.c:553:
+	struct cpucall_info *info;
+	info = kmalloc(sizeof(*info), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#478: FILE: mm/slab.c:555:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cpucall', this function's name, in a string
#478: FILE: mm/slab.c:555:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: mm/slab.c:556:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kmalloc.\n",
+				cpu, fnc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#486: FILE: mm/slab.c:563:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_cpucall', this function's name, in a string
#486: FILE: mm/slab.c:563:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: mm/slab.c:564:
+		printk(KERN_INFO "do_cpucall for cpu %d, callback %p failed at kernel_thread.\n",
+				cpu, fnc);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#492: FILE: mm/slab.c:569:
+}
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#493: FILE: mm/slab.c:570:
+ * CPU HOTPLUG: $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#499: FILE: mm/slab.c:576:
+static int __devinit cpuup_callback(struct notifier_block *nfb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: mm/slab.c:577:
+static int __devinit cpuup_callback(struct notifier_block *nfb,
+				  unsigned long action,

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: mm/slab.c:581:
+	int cpu = (int)hcpu;
+	if (action == CPU_ONLINE) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#514: FILE: mm/slab.c:591:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: mm/slab.c:592:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#515: FILE: mm/slab.c:592:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#515: FILE: mm/slab.c:592:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#515: FILE: mm/slab.c:592:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: mm/slab.c:629:
+	cache_estimate(0, cache_cache.objsize, 0,
 			&left_over, &cache_cache.num);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: mm/slab.c:644:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: mm/slab.c:645:
+^I/* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#596: FILE: mm/slab.c:700:
+		void * ptr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: mm/slab.c:701:
+^I^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#598: FILE: mm/slab.c:702:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: mm/slab.c:704:
+		BUG_ON(cc_data(&cache_cache) != &cpuarray_cache.cache);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#604: FILE: mm/slab.c:708:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#605: FILE: mm/slab.c:709:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#607: FILE: mm/slab.c:711:
+		BUG_ON(cc_data(cache_sizes[0].cs_cachep) != &cpuarray_generic.cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: mm/slab.c:713:
+		memcpy(ptr, cc_data(cache_sizes[0].cs_cachep),
+				sizeof(struct cpucache_int));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#621: FILE: mm/slab.c:721:
+	struct list_head* p;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#629: FILE: mm/slab.c:729:
+		kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#630: FILE: mm/slab.c:730:
+		kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);
+		enable_cpucache(cachep);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#634: FILE: mm/slab.c:734:
+	for (i=0;i<NR_CPUS;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#634: FILE: mm/slab.c:734:
+	for (i=0;i<NR_CPUS;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#634: FILE: mm/slab.c:734:
+	for (i=0;i<NR_CPUS;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#634: FILE: mm/slab.c:734:
+	for (i=0;i<NR_CPUS;i++) {
 	                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#634: FILE: mm/slab.c:734:
+	for (i=0;i<NR_CPUS;i++) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#648: FILE: mm/slab.c:787:
+static void poison_obj (kmem_cache_t *cachep, void *addr)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#657: FILE: mm/slab.c:798:
+static int check_poison_obj (kmem_cache_t *cachep, void *addr)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#666: FILE: mm/slab.c:817:
+static void slab_destroy (kmem_cache_t *cachep, slab_t *slabp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#674: FILE: mm/slab.c:821:
+	int i;
+	for (i = 0; i < cachep->num; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#675: FILE: mm/slab.c:822:
+		void* objp = slabp->s_mem+cachep->objsize*i;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#675: FILE: mm/slab.c:822:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#675: FILE: mm/slab.c:822:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#676: FILE: mm/slab.c:823:
+		void* objp = slabp->s_mem+cachep->objsize*i;
+		if (cachep->flags & SLAB_POISON)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#680: FILE: mm/slab.c:827:
+			if (*((unsigned long*)(objp)) != RED_MAGIC1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#681: FILE: mm/slab.c:828:
+				BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#682: FILE: mm/slab.c:829:
+			if (*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: mm/slab.c:831:
+				BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#688: FILE: mm/slab.c:835:
+			(cachep->dtor)(objp, cachep, 0);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#715: FILE: mm/slab.c:842:
+			(cachep->dtor)(objp, cachep, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: mm/slab.c:846:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#730: FILE: mm/slab.c:933:
+	BUG_ON(flags & ~CREATE_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: mm/slab.c:990:
+		cache_estimate(cachep->gfporder, size, flags,
 						&left_over, &cachep->num);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#793: FILE: mm/slab.c:1070:
+			cc_data(cachep) = kmalloc(sizeof(struct cpucache_int),GFP_KERNEL);
 			                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#795: FILE: mm/slab.c:1072:
+		BUG_ON(!cc_data(cachep));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#802: FILE: mm/slab.c:1079:
+		cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#802: FILE: mm/slab.c:1079:
+		cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 		                                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#802: FILE: mm/slab.c:1079:
+		cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: mm/slab.c:1080:
+^I} $

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#806: FILE: mm/slab.c:1083:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 					                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#856: FILE: mm/slab.c:1128:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#914: FILE: mm/slab.c:1135:
+	BUG_ON(irqs_disabled());

ERROR:SPACING: space required before the open parenthesis '('
#936: FILE: mm/slab.c:1151:
+	for(;;) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#951: FILE: mm/slab.c:1159:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#972: FILE: mm/slab.c:1182:
+	BUG_ON(!cachep || in_interrupt());

WARNING:LINE_SPACING: Missing a blank line after declarations
#986: FILE: mm/slab.c:1205:
+	int i;
+	BUG_ON(!cachep || in_interrupt());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#986: FILE: mm/slab.c:1205:
+	BUG_ON(!cachep || in_interrupt());

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#995: FILE: mm/slab.c:1211:
+	for (i=0;i<NR_CPUS;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#995: FILE: mm/slab.c:1211:
+	for (i=0;i<NR_CPUS;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#995: FILE: mm/slab.c:1211:
+	for (i=0;i<NR_CPUS;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#995: FILE: mm/slab.c:1211:
+	for (i=0;i<NR_CPUS;i++) {
 	                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#995: FILE: mm/slab.c:1211:
+	for (i=0;i<NR_CPUS;i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: mm/slab.c:1214:
+			clock_searchp[i] = list_entry(cachep->next.next,
+							kmem_cache_t, next);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1031: FILE: mm/slab.c:1243:
+static inline slab_t * cache_slabmgmt (kmem_cache_t *cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1031: FILE: mm/slab.c:1243:
+static inline slab_t * cache_slabmgmt (kmem_cache_t *cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1032: FILE: mm/slab.c:1244:
+static inline slab_t * cache_slabmgmt (kmem_cache_t *cachep,
 			void *objp, int colour_off, int local_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1051: FILE: mm/slab.c:1265:
+static inline void cache_init_objs (kmem_cache_t * cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1051: FILE: mm/slab.c:1265:
+static inline void cache_init_objs (kmem_cache_t * cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: mm/slab.c:1266:
+static inline void cache_init_objs (kmem_cache_t * cachep,
 			slab_t * slabp, unsigned long ctor_flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1114: FILE: mm/slab.c:1312:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1117: FILE: mm/slab.c:1315:
+			BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1127: FILE: mm/slab.c:1324:
+static int cache_grow (kmem_cache_t * cachep, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1127: FILE: mm/slab.c:1324:
+static int cache_grow (kmem_cache_t * cachep, int flags)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1200: FILE: mm/slab.c:1380:
+	if (!(slabp = cache_slabmgmt(cachep, objp, offset, local_flags)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1260: FILE: mm/slab.c:1425:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1261: FILE: mm/slab.c:1426:
+^I^I^I(unsigned long)objp);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1261: FILE: mm/slab.c:1426:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",
+			(unsigned long)objp);	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1262: FILE: mm/slab.c:1427:
+^I^IBUG();^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1262: FILE: mm/slab.c:1427:
+		BUG();	

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1266: FILE: mm/slab.c:1431:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n", (unsigned long)objp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1275: FILE: mm/slab.c:1434:
+#endif $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1280: FILE: mm/slab.c:1437:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1280: FILE: mm/slab.c:1437:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1280: FILE: mm/slab.c:1437:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1292: FILE: mm/slab.c:1447:
+	BUG_ON(GET_PAGE_CACHE(page) != cachep);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1302: FILE: mm/slab.c:1455:
+		if (xchg((unsigned long *)(objp+cachep->objsize -
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1308: FILE: mm/slab.c:1461:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1308: FILE: mm/slab.c:1461:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1310: FILE: mm/slab.c:1463:
+	BUG_ON(objnr >= cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1311: FILE: mm/slab.c:1464:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1311: FILE: mm/slab.c:1464:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1318: FILE: mm/slab.c:1471:
+		cachep->ctor(objp, cachep, SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_VERIFY);
 		                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1326: FILE: mm/slab.c:1479:
+	if (cachep->flags & SLAB_POISON) {
+		poison_obj(cachep, objp);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1342: FILE: mm/slab.c:1494:
+		BUG_ON(entries > cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1344: FILE: mm/slab.c:1496:
+	BUG_ON(entries != cachep->num - slabp->inuse);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1348: FILE: mm/slab.c:1500:
+static inline void * cache_alloc_one_tail (kmem_cache_t *cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1348: FILE: mm/slab.c:1500:
+static inline void * cache_alloc_one_tail (kmem_cache_t *cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1349: FILE: mm/slab.c:1501:
+static inline void * cache_alloc_one_tail (kmem_cache_t *cachep,
 						slab_t *slabp)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1365: FILE: mm/slab.c:1520:
+	if (slabp->free == BUFCTL_END) {
[...]
+	} else {
[...]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1372: FILE: mm/slab.c:1527:
+static void* cache_alloc_refill(kmem_cache_t* cachep, int flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1372: FILE: mm/slab.c:1527:
+static void* cache_alloc_refill(kmem_cache_t* cachep, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1391: FILE: mm/slab.c:1546:
+	BUG_ON(cc->avail > 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1420: FILE: mm/slab.c:1575:
+		int x;
+		x = cache_grow(cachep, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1421: FILE: mm/slab.c:1576:
+^I^I$

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1422: FILE: mm/slab.c:1577:
+		// cache_grow can reenable interrupts, then cc could change.
 		                  ^^^^^^^^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1441: FILE: mm/slab.c:1596:
+static inline void *cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1441: FILE: mm/slab.c:1596:
+static inline void *cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1444: FILE: mm/slab.c:1599:
+^Iif (!objp)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1463: FILE: mm/slab.c:1620:
+^I^I}^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1531: FILE: mm/slab.c:1627:
+static inline void * __cache_alloc (kmem_cache_t *cachep, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1531: FILE: mm/slab.c:1627:
+static inline void * __cache_alloc (kmem_cache_t *cachep, int flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1600: FILE: mm/slab.c:1650:
+/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1630: FILE: mm/slab.c:1655:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1630: FILE: mm/slab.c:1655:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1630: FILE: mm/slab.c:1655:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1645: FILE: mm/slab.c:1661:
+		slab_t* slabp;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1676: FILE: mm/slab.c:1667:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1676: FILE: mm/slab.c:1667:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1708: FILE: mm/slab.c:1681:
+				list_add(&slabp->list,
+						&list3_data_ptr(cachep, objp)->slabs_free);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1723: FILE: mm/slab.c:1693:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1723: FILE: mm/slab.c:1693:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1731: FILE: mm/slab.c:1698:
+static void cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1731: FILE: mm/slab.c:1698:
+static void cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1737: FILE: mm/slab.c:1704:
+	BUG_ON(!batchcount || batchcount > cc->avail);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1748: FILE: mm/slab.c:1714:
+		struct list_head *p;
+		p = list3_data(cachep)->slabs_free.next;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1753: FILE: mm/slab.c:1719:
+			BUG_ON(slabp->inuse);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1765: FILE: mm/slab.c:1731:
+	memmove(&cc_entry(cc)[0], &cc_entry(cc)[batchcount],
+			sizeof(void*)*cc->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1765: FILE: mm/slab.c:1731:
+			sizeof(void*)*cc->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1765: FILE: mm/slab.c:1731:
+			sizeof(void*)*cc->avail);
 			             ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1779: FILE: mm/slab.c:1741:
+static inline void __cache_free (kmem_cache_t *cachep, void* objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1779: FILE: mm/slab.c:1741:
+static inline void __cache_free (kmem_cache_t *cachep, void* objp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1834: FILE: mm/slab.c:1804:
+		BUG_ON(csizep->cs_cachep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csizep->cs_cachep"
#1834: FILE: mm/slab.c:1804:
+		BUG_ON(csizep->cs_cachep == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1864: FILE: mm/slab.c:1846:
+	__cache_free(c, (void*)objp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1883: FILE: mm/slab.c:1885:
+		BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1892: FILE: mm/slab.c:1890:
+	kmem_cache_t *cachep = (kmem_cache_t*)arg;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1919: FILE: mm/slab.c:1906:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1929: FILE: mm/slab.c:1916:
+	cpucache_t *old;
+	old = cc_data(new->cachep);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1930: FILE: mm/slab.c:1917:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1935: FILE: mm/slab.c:1922:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1936: FILE: mm/slab.c:1923:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1936: FILE: mm/slab.c:1923:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1955: FILE: mm/slab.c:1929:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1956: FILE: mm/slab.c:1930:
+		cpucache_t* ccnew;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1958: FILE: mm/slab.c:1932:
+		ccnew = kmalloc(sizeof(void*)*limit+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1958: FILE: mm/slab.c:1932:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                             ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#1958: FILE: mm/slab.c:1932:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1961: FILE: mm/slab.c:1935:
+			for (i--; i >= 0; i--) kfree(new.new[i]);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1973: FILE: mm/slab.c:1947:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1978: FILE: mm/slab.c:1952:
+	cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1978: FILE: mm/slab.c:1952:
+	cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;
 	                                ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1978: FILE: mm/slab.c:1952:
+	cachep->free_limit = (1+NR_CPUS)*cachep->batchcount + cachep->num;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2000: FILE: mm/slab.c:1967:
 
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2023: FILE: mm/slab.c:1982:
+	err = do_tune_cpucache(cachep, limit, limit/2);
 	                                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2061: FILE: mm/slab.c:1998:
+static void cache_reap (void)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2079: FILE: mm/slab.c:2005:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2079: FILE: mm/slab.c:2005:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2079: FILE: mm/slab.c:2005:
+	todo = (g_cache_count+REAP_SCANLEN-1)/REAP_SCANLEN;
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2110: FILE: mm/slab.c:2023:
+			tofree = (cc->limit+4)/5;
 			                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2110: FILE: mm/slab.c:2023:
+			tofree = (cc->limit+4)/5;
 			                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2111: FILE: mm/slab.c:2024:
+			if (tofree > cc->avail) {
+				tofree = (cc->avail+1)/2;
+			}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2112: FILE: mm/slab.c:2025:
+				tofree = (cc->avail+1)/2;
 				                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2112: FILE: mm/slab.c:2025:
+				tofree = (cc->avail+1)/2;
 				                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2117: FILE: mm/slab.c:2030:
+			memmove(&cc_entry(cc)[0], &cc_entry(cc)[tofree],
+					sizeof(void*)*cc->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2117: FILE: mm/slab.c:2030:
+					sizeof(void*)*cc->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2117: FILE: mm/slab.c:2030:
+					sizeof(void*)*cc->avail);
 					             ^

ERROR:SPACING: space required before the open parenthesis '('
#2119: FILE: mm/slab.c:2032:
+		if(time_after(searchp->lists.next_reap, jiffies))

ERROR:SPACING: space required before the open parenthesis '('
#2123: FILE: mm/slab.c:2036:
+		if(time_after(searchp->lists.next_reap, jiffies)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2123: FILE: mm/slab.c:2036:
+		if(time_after(searchp->lists.next_reap, jiffies)) {
 			goto next_unlock;
 		}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2143: FILE: mm/slab.c:2045:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2143: FILE: mm/slab.c:2045:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2143: FILE: mm/slab.c:2045:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2143: FILE: mm/slab.c:2045:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2143: FILE: mm/slab.c:2045:
+		tofree = (searchp->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2157: FILE: mm/slab.c:2052:
+			BUG_ON(slabp->inuse);

ERROR:SPACING: space required before the open parenthesis '('
#2190: FILE: mm/slab.c:2065:
+		} while(--tofree > 0);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2246: FILE: mm/slab.c:2083:
+	reap_timer[smp_processor_id()].expires = jiffies + REAPTIMEOUT_CPUC/REAP_SCANLEN;
 	                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2272: FILE: mm/slab.c:2149:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2272: FILE: mm/slab.c:2149:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2276: FILE: mm/slab.c:2151:
+		BUG_ON(slabp->inuse != cachep->num);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2281: FILE: mm/slab.c:2155:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2281: FILE: mm/slab.c:2155:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2284: FILE: mm/slab.c:2157:
+		BUG_ON(slabp->inuse == cachep->num || slabp->inuse == 0);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2289: FILE: mm/slab.c:2161:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2289: FILE: mm/slab.c:2161:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2293: FILE: mm/slab.c:2163:
+		BUG_ON(slabp->inuse);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2298: FILE: mm/slab.c:2168:
+	BUG_ON(num_objs - active_objs != cachep->lists.free_objects);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2335: FILE: mm/slab.c:2198:
+^I^I^I^Ihigh, allocs, grown, reaped, errors, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2335: FILE: mm/slab.c:2198:
+		seq_printf(m, " : %6lu %7lu %5lu %4lu %4lu %4lu %4lu",
+				high, allocs, grown, reaped, errors, 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427361.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 75 errors, 80 warnings, 68 checks, 2250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427361.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
