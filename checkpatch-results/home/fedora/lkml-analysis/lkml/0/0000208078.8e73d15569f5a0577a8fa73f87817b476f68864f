WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#80: FILE: arch/i386/kernel/i386_ksyms.c:100:
+EXPORT_SYMBOL(__put_user_1);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#81: FILE: arch/i386/kernel/i386_ksyms.c:101:
+EXPORT_SYMBOL(__put_user_2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#82: FILE: arch/i386/kernel/i386_ksyms.c:102:
+EXPORT_SYMBOL(__put_user_4);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#83: FILE: arch/i386/kernel/i386_ksyms.c:103:
+EXPORT_SYMBOL(__put_user_8);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: arch/i386/lib/putuser.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/asm-i386/uaccess.h:192:
+extern void __put_user_1(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: include/asm-i386/uaccess.h:193:
+extern void __put_user_2(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/asm-i386/uaccess.h:194:
+extern void __put_user_4(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/asm-i386/uaccess.h:195:
+extern void __put_user_8(void);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#207: FILE: include/asm-i386/uaccess.h:197:
+#define __put_user_1(x, ptr) __asm__ __volatile__("call __put_user_1":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#207: FILE: include/asm-i386/uaccess.h:197:
+#define __put_user_1(x, ptr) __asm__ __volatile__("call __put_user_1":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#207: FILE: include/asm-i386/uaccess.h:197:
+#define __put_user_1(x, ptr) __asm__ __volatile__("call __put_user_1":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#207: FILE: include/asm-i386/uaccess.h:197:
+#define __put_user_1(x, ptr) __asm__ __volatile__("call __put_user_1":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#207: FILE: include/asm-i386/uaccess.h:197:
+#define __put_user_1(x, ptr) __asm__ __volatile__("call __put_user_1":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#208: FILE: include/asm-i386/uaccess.h:198:
+#define __put_user_2(x, ptr) __asm__ __volatile__("call __put_user_2":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#208: FILE: include/asm-i386/uaccess.h:198:
+#define __put_user_2(x, ptr) __asm__ __volatile__("call __put_user_2":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#208: FILE: include/asm-i386/uaccess.h:198:
+#define __put_user_2(x, ptr) __asm__ __volatile__("call __put_user_2":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#208: FILE: include/asm-i386/uaccess.h:198:
+#define __put_user_2(x, ptr) __asm__ __volatile__("call __put_user_2":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#208: FILE: include/asm-i386/uaccess.h:198:
+#define __put_user_2(x, ptr) __asm__ __volatile__("call __put_user_2":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#209: FILE: include/asm-i386/uaccess.h:199:
+#define __put_user_4(x, ptr) __asm__ __volatile__("call __put_user_4":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#209: FILE: include/asm-i386/uaccess.h:199:
+#define __put_user_4(x, ptr) __asm__ __volatile__("call __put_user_4":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#209: FILE: include/asm-i386/uaccess.h:199:
+#define __put_user_4(x, ptr) __asm__ __volatile__("call __put_user_4":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#209: FILE: include/asm-i386/uaccess.h:199:
+#define __put_user_4(x, ptr) __asm__ __volatile__("call __put_user_4":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#209: FILE: include/asm-i386/uaccess.h:199:
+#define __put_user_4(x, ptr) __asm__ __volatile__("call __put_user_4":"=a" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#210: FILE: include/asm-i386/uaccess.h:200:
+#define __put_user_8(x, ptr) __asm__ __volatile__("call __put_user_8":"=A" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#210: FILE: include/asm-i386/uaccess.h:200:
+#define __put_user_8(x, ptr) __asm__ __volatile__("call __put_user_8":"=A" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#210: FILE: include/asm-i386/uaccess.h:200:
+#define __put_user_8(x, ptr) __asm__ __volatile__("call __put_user_8":"=A" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))
                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#210: FILE: include/asm-i386/uaccess.h:200:
+#define __put_user_8(x, ptr) __asm__ __volatile__("call __put_user_8":"=A" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#210: FILE: include/asm-i386/uaccess.h:200:
+#define __put_user_8(x, ptr) __asm__ __volatile__("call __put_user_8":"=A" (__ret_pu):"0" ((typeof(*(ptr)))(x)), "c" (ptr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#211: FILE: include/asm-i386/uaccess.h:201:
+#define __put_user_X(x, ptr) __asm__ __volatile__("call __put_user_X":"=a" (__ret_pu):"c" (ptr))
                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#211: FILE: include/asm-i386/uaccess.h:201:
+#define __put_user_X(x, ptr) __asm__ __volatile__("call __put_user_X":"=a" (__ret_pu):"c" (ptr))
                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#211: FILE: include/asm-i386/uaccess.h:201:
+#define __put_user_X(x, ptr) __asm__ __volatile__("call __put_user_X":"=a" (__ret_pu):"c" (ptr))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: include/asm-i386/uaccess.h:219:
+#define put_user(x,ptr)						\
                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#223: FILE: include/asm-i386/uaccess.h:219:
+#define put_user(x,ptr)						\
+({	int __ret_pu;						\
+	__chk_user_ptr(ptr);					\
+	switch(sizeof(*(ptr))) {				\
+	case 1: __put_user_1(x, ptr); break;			\
+	case 2: __put_user_2(x, ptr); break;			\
+	case 4: __put_user_4(x, ptr); break;			\
+	case 8: __put_user_8(x, ptr); break;			\
+	default:__put_user_X(x, ptr); break;			\
+	}							\
+	__ret_pu;						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#223: FILE: include/asm-i386/uaccess.h:219:
+#define put_user(x,ptr)						\
+({	int __ret_pu;						\
+	__chk_user_ptr(ptr);					\
+	switch(sizeof(*(ptr))) {				\
+	case 1: __put_user_1(x, ptr); break;			\
+	case 2: __put_user_2(x, ptr); break;			\
+	case 4: __put_user_4(x, ptr); break;			\
+	case 8: __put_user_8(x, ptr); break;			\
+	default:__put_user_X(x, ptr); break;			\
+	}							\
+	__ret_pu;						\
+})

ERROR:SPACING: space required before the open parenthesis '('
#226: FILE: include/asm-i386/uaccess.h:222:
+	switch(sizeof(*(ptr))) {				\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#227: FILE: include/asm-i386/uaccess.h:223:
+	case 1: __put_user_1(x, ptr); break;			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#228: FILE: include/asm-i386/uaccess.h:224:
+	case 2: __put_user_2(x, ptr); break;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#229: FILE: include/asm-i386/uaccess.h:225:
+	case 4: __put_user_4(x, ptr); break;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#230: FILE: include/asm-i386/uaccess.h:226:
+	case 8: __put_user_8(x, ptr); break;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#231: FILE: include/asm-i386/uaccess.h:227:
+	default:__put_user_X(x, ptr); break;			\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 9 warnings, 20 checks, 164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208078.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
