WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: security/apparmor/apparmorfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#74: FILE: security/apparmor/apparmorfs.c:16:
+#include <asm/uaccess.h>

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#81: FILE: security/apparmor/apparmorfs.c:23:
+static struct dentry *aafs_dentry = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#84: FILE: security/apparmor/apparmorfs.c:26:
+extern struct seq_operations apparmorfs_profiles_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#84: FILE: security/apparmor/apparmorfs.c:26:
+extern struct seq_operations apparmorfs_profiles_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#88: FILE: security/apparmor/apparmorfs.c:30:
+static struct file_operations apparmorfs_profiles_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: security/apparmor/apparmorfs.c:39:
+static ssize_t aa_matching_read(struct file *file, char __user *buf,
+			       size_t size, loff_t *ppos);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#99: FILE: security/apparmor/apparmorfs.c:41:
+static struct file_operations apparmorfs_matching_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: security/apparmor/apparmorfs.c:42:
+^I.read = ^Iaa_matching_read,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#103: FILE: security/apparmor/apparmorfs.c:45:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#112: FILE: security/apparmor/apparmorfs.c:54:
+static struct file_operations apparmorfs_profile_load = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#116: FILE: security/apparmor/apparmorfs.c:58:
+static struct file_operations apparmorfs_profile_replace = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#120: FILE: security/apparmor/apparmorfs.c:62:
+static struct file_operations apparmorfs_profile_remove = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: security/apparmor/apparmorfs.c:66:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#132: FILE: security/apparmor/apparmorfs.c:74:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#140: FILE: security/apparmor/apparmorfs.c:82:
+	struct file_operations *fops;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: security/apparmor/apparmorfs.c:90:
+^I{SECFS_AA, ^IS_IFDIR, 0550},^I/* DO NOT EDIT/MOVE */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: security/apparmor/apparmorfs.c:93:
+^I{"profiles", ^IS_IFREG, 0440, &apparmorfs_profiles_fops,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#155: FILE: security/apparmor/apparmorfs.c:97:
+^I{"matching",  ^IS_IFREG, 0440, &apparmorfs_matching_fops,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: security/apparmor/apparmorfs.c:101:
+^I{".load",    ^IS_IFREG, 0640, &apparmorfs_profile_load,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: security/apparmor/apparmorfs.c:103:
+^I{".replace", ^IS_IFREG, 0640, &apparmorfs_profile_replace,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: security/apparmor/apparmorfs.c:105:
+^I{".remove",  ^IS_IFREG, 0640, &apparmorfs_profile_remove,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: security/apparmor/apparmorfs.c:109:
+^I{"control",  ^IS_IFDIR, 0550},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: security/apparmor/apparmorfs.c:110:
+^I{"complain", ^IS_IFREG, 0640, &apparmorfs_control_fops,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: security/apparmor/apparmorfs.c:112:
+^I{"audit",    ^IS_IFREG, 0640, &apparmorfs_control_fops,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#172: FILE: security/apparmor/apparmorfs.c:114:
+^I{"debug",    ^IS_IFREG, 0640, &apparmorfs_control_fops,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: security/apparmor/apparmorfs.c:116:
+^I{"logsyscall", ^IS_IFREG, 0640, &apparmorfs_control_fops,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: security/apparmor/apparmorfs.c:118:
+^I{NULL,       ^IS_IFDIR, 0},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: security/apparmor/apparmorfs.c:121:
+^I{NULL,       ^IS_IFDIR, 0}$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#187: FILE: security/apparmor/apparmorfs.c:129:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: security/apparmor/apparmorfs.c:136:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: security/apparmor/apparmorfs.c:143:
+static ssize_t aa_matching_read(struct file *file, char __user *buf,
+			       size_t size, loff_t *ppos)

WARNING:SPLIT_STRING: quoted string split across lines
#230: FILE: security/apparmor/apparmorfs.c:172:
+		AA_WARN("REJECTING access to profile %s (%s(%d) "
+			"profile %s active %s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#240: FILE: security/apparmor/apparmorfs.c:182:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: security/apparmor/apparmorfs.c:234:
+static ssize_t aa_profile_remove(struct file *f, const char __user *buf,
+				  size_t size, loff_t *pos)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#300: FILE: security/apparmor/apparmorfs.c:242:
+	data = aa_simple_write_to_buffer(buf, size+1, size, pos, "removal");
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#323: FILE: security/apparmor/apparmorfs.c:265:
+	*(int*)data = (int)val;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#330: FILE: security/apparmor/apparmorfs.c:272:
+	for (i=0; i < num_entries;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#330: FILE: security/apparmor/apparmorfs.c:272:
+	for (i=0; i < num_entries;i++) {
 	                         ^

WARNING:SPLIT_STRING: quoted string split across lines
#348: FILE: security/apparmor/apparmorfs.c:290:
+			AA_DEBUG("%s: deleted apparmorfs entry name=%s "
+				 "dentry=%p\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#349: FILE: security/apparmor/apparmorfs.c:291:
+				__FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: security/apparmor/apparmorfs.c:316:
+		AA_ERROR("%s: root entry 0 is not SECFS_AA/dir\n",
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#374: FILE: security/apparmor/apparmorfs.c:316:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#392: FILE: security/apparmor/apparmorfs.c:334:
+					 __FUNCTION__, i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: security/apparmor/apparmorfs.c:347:
+		AA_ERROR("%s: root_entry table not correctly terminated\n",
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#405: FILE: security/apparmor/apparmorfs.c:347:
+			__FUNCTION__);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#410: FILE: security/apparmor/apparmorfs.c:352:
+	root_entries[0].dentry = securityfs_create_file(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: security/apparmor/apparmorfs.c:362:
+		AA_DEBUG("%s: created securityfs/apparmor [dentry=%p]\n",
+			__FUNCTION__, root_entries[0].dentry);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#420: FILE: security/apparmor/apparmorfs.c:362:
+			__FUNCTION__, root_entries[0].dentry);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: security/apparmor/apparmorfs.c:364:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#427: FILE: security/apparmor/apparmorfs.c:369:
+		struct file_operations *fops = NULL;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#440: FILE: security/apparmor/apparmorfs.c:382:
+		root_entries[i].dentry = securityfs_create_file(

WARNING:SPLIT_STRING: quoted string split across lines
#452: FILE: security/apparmor/apparmorfs.c:394:
+		AA_DEBUG("%s: added apparmorfs entry "
+			 "name=%s mode=%x dentry=%p [parent %p]\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#453: FILE: security/apparmor/apparmorfs.c:395:
+			__FUNCTION__, root_entries[i].name,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#454: FILE: security/apparmor/apparmorfs.c:396:
+			root_entries[i].mode|root_entries[i].access,
 			                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: security/apparmor/apparmorfs.c:416:
+		AA_ERROR("%s: Subdomain securityfs already exists\n",
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#474: FILE: security/apparmor/apparmorfs.c:416:
+			__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: security/apparmor/apparmorfs.c:421:
+			AA_ERROR("%s: Error populating Subdomain securityfs\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#479: FILE: security/apparmor/apparmorfs.c:421:
+				__FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084417.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 36 warnings, 19 checks, 432 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084417.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
