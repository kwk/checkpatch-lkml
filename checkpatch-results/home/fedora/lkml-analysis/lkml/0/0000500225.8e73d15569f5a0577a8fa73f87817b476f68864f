WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
to setup.c in how the processor id is determined which make smp_processor_id() 

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#28: 
and current completely independant of the stack the processor is using at 
                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#29: 
the moment.  This makes it possible to use seperate stacks for irq context 
                                           ^^^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#168: FILE: arch/i386/kernel/init_task.c:18:
+union task_union init_task_union =
+		{ INIT_TASK(init_task_union.task) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#176: FILE: arch/i386/kernel/init_task.c:25:
+unsigned long init_task_stack[THREAD_SIZE/sizeof(unsigned long)]
                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#179: FILE: arch/i386/kernel/init_task.c:27:
 	__attribute__((__section__(".data.init_task"))) =
+	{ (unsigned long)&init_task_union,};

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#237: FILE: arch/i386/kernel/process.c:573:
+struct full_task_struct
+{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: arch/i386/kernel/process.c:578:
+static kmem_cache_t * tsk_cache;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: arch/i386/kernel/process.c:580:
+struct task_struct * alloc_task_struct(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#247: FILE: arch/i386/kernel/process.c:583:
+	struct full_task_struct *f = kmem_cache_alloc(tsk_cache, GFP_KERNEL);
+	if (!f)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#249: FILE: arch/i386/kernel/process.c:585:
+	f->info.kstack = (void*)__get_free_pages(GFP_KERNEL,1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#249: FILE: arch/i386/kernel/process.c:585:
+	f->info.kstack = (void*)__get_free_pages(GFP_KERNEL,1);
 	                                                   ^

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#254: FILE: arch/i386/kernel/process.c:590:
+	*(void**)f->info.kstack = &f->tsk;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: arch/i386/kernel/process.c:591:
+^Iatomic_set(&f->info.users, 1);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#261: FILE: arch/i386/kernel/process.c:597:
+	struct full_task_struct *f = (struct full_task_struct*)tsk;

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: arch/i386/kernel/process.c:598:
+	struct full_task_struct *f = (struct full_task_struct*)tsk;
+	atomic_inc(&f->info.users);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#267: FILE: arch/i386/kernel/process.c:603:
+	struct full_task_struct *f = (struct full_task_struct*)tsk;

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: arch/i386/kernel/process.c:604:
+	struct full_task_struct *f = (struct full_task_struct*)tsk;
+	if(atomic_dec_and_test(&f->info.users)) {

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: arch/i386/kernel/process.c:604:
+	if(atomic_dec_and_test(&f->info.users)) {

CHECK:SPACING: No space is necessary after a cast
#269: FILE: arch/i386/kernel/process.c:605:
+		free_pages((unsigned long) f->info.kstack, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: arch/i386/kernel/process.c:613:
+	tsk_cache = kmem_cache_create("task_cache",
+					 sizeof(struct full_task_struct),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#288: FILE: arch/i386/kernel/process.c:624:
+	struct full_task_struct *f = (struct full_task_struct*)&init_task;

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: arch/i386/kernel/process.c:625:
+	struct full_task_struct *f = (struct full_task_struct*)&init_task;
+	atomic_set(&f->info.users, 1);

CHECK:SPACING: No space is necessary after a cast
#303: FILE: arch/i386/kernel/process.c:642:
+	childregs = ((struct pt_regs *) (THREAD_SIZE + (unsigned long) f->info.kstack)) - 1;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#322: FILE: arch/i386/kernel/setup.c:2810:
+extern int cpucount;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#340: FILE: arch/i386/kernel/setup.c:2828:
+	printk(KERN_INFO "Initializing CPU#%d/%d\n", nr, cpucount);

ERROR:SPACING: space required before the open parenthesis '('
#351: FILE: arch/i386/kernel/setup.c:2854:
+	if(cur->mm)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#363: FILE: arch/i386/kernel/setup.c:2864:
+	printk("cur: %p  processor: %d  smp_processor_id(): %d  current: %p",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: arch/i386/kernel/setup.c:2865:
+	printk("cur: %p  processor: %d  smp_processor_id(): %d  current: %p",
+		cur, cur->processor, smp_processor_id(), current);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#388: FILE: arch/i386/kernel/smpboot.c:479:
+extern struct {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: arch/i386/kernel/smpboot.c:480:
+	void * esp;

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#402: FILE: arch/i386/kernel/smpboot.c:496:
+		:"r" (stack_start.esp),"r" (stack_start.eip));
 		^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: arch/i386/kernel/smpboot.c:496:
+		:"r" (stack_start.esp),"r" (stack_start.eip));
 		                      ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#418: FILE: arch/i386/kernel/smpboot.c:510:
+volatile int physical_apicid_to_cpu[MAX_APICID];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#421: FILE: arch/i386/kernel/smpboot.c:512:
+volatile int cpu_to_physical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#425: FILE: arch/i386/kernel/smpboot.c:515:
+volatile int logical_apicid_to_cpu[MAX_APICID];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#428: FILE: arch/i386/kernel/smpboot.c:517:
+volatile int cpu_to_logical_apicid[NR_CPUS];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: arch/i386/kernel/smpboot.c:541:
+^I^Ilogical_apicid_to_cpu[apicid] = cpu;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: arch/i386/kernel/smpboot.c:544:
+^I^Iphysical_apicid_to_cpu[apicid] = cpu;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: arch/i386/kernel/smpboot.c:556:
+^I^Ilogical_apicid_to_cpu[apicid] = -1;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: arch/i386/kernel/smpboot.c:559:
+^I^Iphysical_apicid_to_cpu[apicid] = -1;^I$

CHECK:SPACING: No space is necessary after a cast
#486: FILE: arch/i386/kernel/smpboot.c:808:
+	stack_start.eip = idle->thread.eip = (unsigned long) start_secondary;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#486: FILE: arch/i386/kernel/smpboot.c:808:
+	stack_start.eip = idle->thread.eip = (unsigned long) start_secondary;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#495: FILE: arch/i386/kernel/smpboot.c:819:
+	stack_start.esp = (void *) (THREAD_SIZE + (char *)TSK_TO_KSTACK(idle));

WARNING:INCLUDE_LINUX: Use #include <linux/smp.h> instead of <asm/smp.h>
#587: FILE: include/asm-i386/current.h:4:
+#include <asm/smp.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __attribute_const__ over __attribute__((const))
#591: FILE: include/asm-i386/current.h:7:
+static inline struct task_struct *get_current(void) __attribute__((const));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#610: FILE: include/asm-i386/current_asm.h:1:
+/* asm/current_asm.h

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_1: Consider removing the #if 1 and its #endif
#619: FILE: include/asm-i386/current_asm.h:10:
+#if 1 /*def CONFIG_SMP*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: include/asm-i386/current_asm.h:14:
+ * opcode we want should actually be generated by strl, but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: include/asm-i386/current_asm.h:15:
+ * unfortunately gas doesn't realize that the operand size $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#625: FILE: include/asm-i386/current_asm.h:16:
+ * prefix applies to str.  Please take a wet noodle and thread $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: include/asm-i386/current_asm.h:17:
+ * it into my eye as that will be less painful than dealing $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#629: FILE: include/asm-i386/current_asm.h:20:
+#define GET_CURRENT(reg,regw)				\
                        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#629: FILE: include/asm-i386/current_asm.h:20:
+#define GET_CURRENT(reg,regw)				\
+	str regw					\
+	; shll $LOG2_PER_CPU_SIZE-5,reg			\
+	; aligned_data_adjusted = aligned_data-(__FIRST_TSS_ENTRY << (LOG2_PER_CPU_SIZE - 2))	\
+	; movl aligned_data_adjusted(reg),reg

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#629: FILE: include/asm-i386/current_asm.h:20:
+#define GET_CURRENT(reg,regw)				\
+	str regw					\
+	; shll $LOG2_PER_CPU_SIZE-5,reg			\
+	; aligned_data_adjusted = aligned_data-(__FIRST_TSS_ENTRY << (LOG2_PER_CPU_SIZE - 2))	\
+	; movl aligned_data_adjusted(reg),reg

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#631: FILE: include/asm-i386/current_asm.h:22:
+	; shll $LOG2_PER_CPU_SIZE-5,reg			\
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#631: FILE: include/asm-i386/current_asm.h:22:
+	; shll $LOG2_PER_CPU_SIZE-5,reg			\
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#632: FILE: include/asm-i386/current_asm.h:23:
+	; aligned_data_adjusted = aligned_data-(__FIRST_TSS_ENTRY << (LOG2_PER_CPU_SIZE - 2))	\
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#633: FILE: include/asm-i386/current_asm.h:24:
+	; movl aligned_data_adjusted(reg),reg
 	                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#636: FILE: include/asm-i386/current_asm.h:27:
+#define GET_CURRENT(reg,regw)	movl (aligned_data),reg

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: include/asm-i386/current_asm.h:27:
+#define GET_CURRENT(reg,regw)	movl (aligned_data),reg
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: include/asm-i386/current_asm.h:27:
+#define GET_CURRENT(reg,regw)	movl (aligned_data),reg
                              	                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#636: FILE: include/asm-i386/current_asm.h:27:
+#define GET_CURRENT(reg,regw)	movl (aligned_data),reg

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#697: FILE: include/asm-i386/descfn.h:1:
+#ifndef __ARCH_DESCFN_H

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#709: FILE: include/asm-i386/descfn.h:13:
+extern void set_intr_gate(unsigned int irq, void * addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#709: FILE: include/asm-i386/descfn.h:13:
+extern void set_intr_gate(unsigned int irq, void * addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#710: FILE: include/asm-i386/descfn.h:14:
+extern void set_ldt_desc(unsigned int n, void *addr, unsigned int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#711: FILE: include/asm-i386/descfn.h:15:
+extern void set_tss_desc(unsigned int n, void *addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#716: FILE: include/asm-i386/descfn.h:20:
+	int cpu = smp_processor_id();
+	set_ldt_desc(cpu, &default_ldt[0], 5);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#723: FILE: include/asm-i386/descfn.h:27:
+static inline void load_LDT (struct mm_struct *mm)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#733: FILE: include/asm-i386/descfn.h:37:
+^I^I$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#757: FILE: include/asm-i386/processor.h:17:
+#include <asm/atomic.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#775: FILE: include/asm-i386/processor.h:388:
+struct task_struct_info
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#792: FILE: include/asm-i386/processor.h:409:
+^I0, /* esp0 */ ^I^I^I^I^I^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#802: FILE: include/asm-i386/processor.h:458:
+#define TSK_TO_KSTACK(tsk) \
+	((unsigned long *) ((struct task_struct_info*)(tsk+1))->kstack)

CHECK:SPACING: No space is necessary after a cast
#803: FILE: include/asm-i386/processor.h:459:
+	((unsigned long *) ((struct task_struct_info*)(tsk+1))->kstack)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#803: FILE: include/asm-i386/processor.h:459:
+	((unsigned long *) ((struct task_struct_info*)(tsk+1))->kstack)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#803: FILE: include/asm-i386/processor.h:459:
+	((unsigned long *) ((struct task_struct_info*)(tsk+1))->kstack)
 	                                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#813: FILE: include/asm-i386/processor.h:466:
+struct task_struct * alloc_task_struct(void);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#849: FILE: include/asm-i386/smp.h:88:
+extern volatile int physical_apicid_to_cpu[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#850: FILE: include/asm-i386/smp.h:89:
+extern volatile int cpu_to_physical_apicid[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#851: FILE: include/asm-i386/smp.h:90:
+extern volatile int cpu_to_logical_apicid[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#852: FILE: include/asm-i386/smp.h:91:
+extern volatile int logical_apicid_to_cpu[];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#863: FILE: include/asm-i386/smp.h:107:
+static inline unsigned get_TR(void) __attribute__ ((pure));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((pure))
#863: FILE: include/asm-i386/smp.h:107:
+static inline unsigned get_TR(void) __attribute__ ((pure));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#864: FILE: include/asm-i386/smp.h:108:
+static inline unsigned get_TR(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#866: FILE: include/asm-i386/smp.h:110:
+	unsigned tr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: include/asm-i386/smp.h:112:
+^I * Technically this is wrong, wrong, wrong, but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#869: FILE: include/asm-i386/smp.h:113:
+^I * gas doesn't know about strl.  *sigh*  Please $

ERROR:SPACING: space prohibited after that open parenthesis '('
#879: FILE: include/asm-i386/smp.h:123:
+#define smp_processor_id()	( (get_TR() >> 5) - (__FIRST_TSS_ENTRY >> 2) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#879: FILE: include/asm-i386/smp.h:123:
+#define smp_processor_id()	( (get_TR() >> 5) - (__FIRST_TSS_ENTRY >> 2) )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: include/asm-i386/smp.h:125:
+/* There is no way to tell gcc that the low bits of get_TR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: include/asm-i386/smp.h:126:
+ * are always 0, hence the following macro to produce $

ERROR:SPACING: space prohibited after that open parenthesis '('
#886: FILE: include/asm-i386/smp.h:130:
+	( (struct per_cpu_data *)					\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#893: FILE: include/asm-i386/smp.h:137:
+			(__FIRST_TSS_ENTRY << (LOG2_PER_CPU_SIZE - 2)); }) )

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#908: FILE: include/asm-i386/smpboot.h:39:
+extern volatile int logical_apicid_to_cpu[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#909: FILE: include/asm-i386/smpboot.h:40:
+extern volatile int cpu_to_logical_apicid[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#910: FILE: include/asm-i386/smpboot.h:41:
+extern volatile int physical_apicid_to_cpu[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#911: FILE: include/asm-i386/smpboot.h:42:
+extern volatile int cpu_to_physical_apicid[];

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#942: FILE: include/asm-i386/uaccess.h:112:
+		:"0" (ptr), "1" (current))
 		^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#950: FILE: include/linux/per_cpu.h:1:
+#ifndef __LINUX__PER_CPU__H

CHECK:BIT_MACRO: Prefer using the BIT macro
#954: FILE: include/linux/per_cpu.h:5:
+#define PER_CPU_SIZE		(1 << LOG2_PER_CPU_SIZE)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: include/linux/per_cpu.h:11:
+^I/* Assembly code relies on curr being the first member of this $

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#969: FILE: include/linux/per_cpu.h:20:
+	char __pad [PER_CPU_SIZE];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#971: FILE: include/linux/per_cpu.h:22:
+^I/* Make sure the padding is large enough by forcing an error $

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#974: FILE: include/linux/per_cpu.h:25:
+	char __pad2 [PER_CPU_SIZE - sizeof(struct per_cpu_data)];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: init/main.c:562:
+^I * needs to perform CPU setup before current is valid.  This $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#999: FILE: init/main.c:563:
+^I * should be okay as we're still running with interrupts disabled $

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1011: FILE: init/main.c:603:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1064: FILE: kernel/sched.c:530:
+	struct per_cpu_data * sched_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1101: FILE: kernel/sched.c:1307:
+	struct per_cpu_data * sched_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1103: FILE: kernel/sched.c:1309:
+	int cpu = smp_processor_id();
+	sched_data = per_data(cpu);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000500225.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 39 warnings, 19 checks, 933 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000500225.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
