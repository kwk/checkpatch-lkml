WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#22: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#23: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#24: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
#   2004/12/30 00:44:50-05:00 dave@thedillows.org 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
#   Add crypto processing for outbound AH and ESP xfrms (IPv4).

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
#   Signed-off-by: David Dillow <dave@thedillows.org>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# net/ipv4/esp4.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#   2004/12/30 00:44:32-05:00 dave@thedillows.org +35 -21

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#   Add crypto offload for outbound ESP (IPv4) xfrms. Note that we always

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#   generate a random IV, as we are not guaranteed to have any state in

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#   the software crypto engine (we may have always been offloaded), and

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#   we cannot rely on secure IV generation by the NIC driver/hw.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#   Signed-off-by: David Dillow <dave@thedillows.org>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
# net/ipv4/ah4.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#   2004/12/30 00:44:32-05:00 dave@thedillows.org +31 -21

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#   Add crypto offload for outbound AH (IPv4) xfrms. Note that the NIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#   driver/hw is responsible for zeroing the mutable IP header fields.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
#   Signed-off-by: David Dillow <dave@thedillows.org>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# 

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#47: 
--- a/net/ipv4/ah4.c	2004-12-30 01:10:14 -05:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#78: FILE: net/ipv4/ah4.c:101:
+			memcpy(iph+1, top_iph+1, top_iph->ihl*4 - sizeof(struct iphdr));
 			          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#78: FILE: net/ipv4/ah4.c:101:
+			memcpy(iph+1, top_iph+1, top_iph->ihl*4 - sizeof(struct iphdr));
 			                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#78: FILE: net/ipv4/ah4.c:101:
+			memcpy(iph+1, top_iph+1, top_iph->ihl*4 - sizeof(struct iphdr));
 			                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#107: FILE: net/ipv4/ah4.c:119:
+			memcpy(top_iph+1, iph+1, top_iph->ihl*4 - sizeof(struct iphdr));
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#107: FILE: net/ipv4/ah4.c:119:
+			memcpy(top_iph+1, iph+1, top_iph->ihl*4 - sizeof(struct iphdr));
 			                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#107: FILE: net/ipv4/ah4.c:119:
+			memcpy(top_iph+1, iph+1, top_iph->ihl*4 - sizeof(struct iphdr));
 			                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#140: FILE: net/ipv4/esp4.c:118:
+				sg = kmalloc(sizeof(struct scatterlist)*nfrags, GFP_ATOMIC);
 				                                       ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sg)...) over kmalloc(sizeof(struct scatterlist)...)
#140: FILE: net/ipv4/esp4.c:118:
+				sg = kmalloc(sizeof(struct scatterlist)*nfrags, GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#140: FILE: net/ipv4/esp4.c:118:
+				sg = kmalloc(sizeof(struct scatterlist)*nfrags, GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#144: FILE: net/ipv4/esp4.c:122:
+			skb_to_sgvec(skb, sg, esph->enc_data+esp->conf.ivlen-skb->data, clen);
 			                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#144: FILE: net/ipv4/esp4.c:122:
+			skb_to_sgvec(skb, sg, esph->enc_data+esp->conf.ivlen-skb->data, clen);
 			                                                    ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#160: FILE: net/ipv4/esp4.c:134:
+			esp->auth.icv(esp, skb, (u8*)esph-skb->data,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: net/ipv4/esp4.c:134:
+			esp->auth.icv(esp, skb, (u8*)esph-skb->data,
 			                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: net/ipv4/esp4.c:135:
+^I^I              ^Isizeof(struct ip_esp_hdr) + esp->conf.ivlen+clen, trailer->tail);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: net/ipv4/esp4.c:135:
+^I^I              ^Isizeof(struct ip_esp_hdr) + esp->conf.ivlen+clen, trailer->tail);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: net/ipv4/esp4.c:135:
+		              	sizeof(struct ip_esp_hdr) + esp->conf.ivlen+clen, trailer->tail);
 		              	                                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000220182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 26 warnings, 12 checks, 130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000220182.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
