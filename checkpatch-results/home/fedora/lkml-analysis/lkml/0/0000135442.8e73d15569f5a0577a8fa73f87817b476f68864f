WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
Do you think it may be an interesting feature to be inserted in the kernel ?

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: kernel/sys.c:1749:
+        if (who != RUSAGE_SELF && who != RUSAGE_CHILDREN) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: kernel/sys.c:1749:
+        if (who != RUSAGE_SELF && who != RUSAGE_CHILDREN) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#65: FILE: kernel/sys.c:1749:
+        if (who != RUSAGE_SELF && who != RUSAGE_CHILDREN) {
[...]
+        } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: kernel/sys.c:1750:
+                struct task_struct* tsk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: kernel/sys.c:1750:
+                struct task_struct* tsk;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#66: FILE: kernel/sys.c:1750:
+                struct task_struct* tsk;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: kernel/sys.c:1751:
+                struct rusage r;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: kernel/sys.c:1751:
+                struct rusage r;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: kernel/sys.c:1752:
+                read_lock(&tasklist_lock);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#68: FILE: kernel/sys.c:1752:
+                struct rusage r;
+                read_lock(&tasklist_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: kernel/sys.c:1752:
+                read_lock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: kernel/sys.c:1753:
+                tsk = find_task_by_pid(who);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: kernel/sys.c:1753:
+                tsk = find_task_by_pid(who);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: kernel/sys.c:1754:
+                if (tsk == NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: kernel/sys.c:1754:
+                if (tsk == NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk"
#70: FILE: kernel/sys.c:1754:
+                if (tsk == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: kernel/sys.c:1755:
+                        read_unlock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: kernel/sys.c:1755:
+                        read_unlock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: kernel/sys.c:1756:
+                        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: kernel/sys.c:1756:
+                        return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: kernel/sys.c:1757:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: kernel/sys.c:1757:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: kernel/sys.c:1758:
+                if ((current->euid != tsk->euid) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: kernel/sys.c:1758:
+                if ((current->euid != tsk->euid) &&$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->euid'
#74: FILE: kernel/sys.c:1758:
+                if ((current->euid != tsk->euid) &&
+                (current->euid != tsk->uid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->uid'
#74: FILE: kernel/sys.c:1758:
+                if ((current->euid != tsk->euid) &&
+                (current->euid != tsk->uid)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: kernel/sys.c:1759:
+                (current->euid != tsk->uid)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: kernel/sys.c:1759:
+                if ((current->euid != tsk->euid) &&
+                (current->euid != tsk->uid)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: kernel/sys.c:1759:
+                (current->euid != tsk->uid)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: kernel/sys.c:1760:
+                        read_unlock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: kernel/sys.c:1760:
+                        read_unlock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: kernel/sys.c:1761:
+                        return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: kernel/sys.c:1761:
+                        return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: kernel/sys.c:1762:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: kernel/sys.c:1762:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: kernel/sys.c:1763:
+                k_getrusage(tsk, RUSAGE_SELF, &r);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: kernel/sys.c:1763:
+                k_getrusage(tsk, RUSAGE_SELF, &r);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: kernel/sys.c:1764:
+                read_unlock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: kernel/sys.c:1764:
+                read_unlock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: kernel/sys.c:1765:
+                return copy_to_user(ru, &r, sizeof(r)) ? -EFAULT : 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: kernel/sys.c:1765:
+                return copy_to_user(ru, &r, sizeof(r)) ? -EFAULT : 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: kernel/sys.c:1766:
+        } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: kernel/sys.c:1766:
+        } else$

CHECK:BRACES: Unbalanced braces around else statement
#82: FILE: kernel/sys.c:1766:
+        } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: kernel/sys.c:1767:
+                return getrusage(current, who, ru);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: kernel/sys.c:1767:
+                return getrusage(current, who, ru);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 21 warnings, 6 checks, 28 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
