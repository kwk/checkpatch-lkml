WARNING:REPEATED_WORD: Possible repeated word: 'the'
#32: 
old_nodes[i] to be moved to new_nodes[i].  Count is the the number of

WARNING:TYPO_SPELLING: 'practially' may be misspelled - perhaps 'practically'?
#51: 
     and memory mapped files, which handles practially all known
                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'som' may be misspelled - perhaps 'some'?
#52: 
     cases, but there are som other cases that are peculiar to
                          ^^^

WARNING:TYPO_SPELLING: 'anonymouse' may be misspelled - perhaps 'anonymous'?
#58: 
     anonymouse storage, and shared segments.
     ^^^^^^^^^^

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#61: 
Signed-off-by:Ray Bryant <raybry@sgi.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#86: FILE: mm/mmigrate.c:594:
+	int pass=0, remains, migrated;
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#89: FILE: mm/mmigrate.c:597:
+	while(pass<10) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#89: FILE: mm/mmigrate.c:597:
+	while(pass<10) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#90: FILE: mm/mmigrate.c:598:
+	while(pass<10) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#100: FILE: mm/mmigrate.c:608:
+		else {

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#110: FILE: mm/mmigrate.c:618:
+		msleep(10);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#112: FILE: mm/mmigrate.c:620:
+
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: mm/mmigrate.c:626:
+^I              struct vm_area_struct *vma, size_t va_start,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: mm/mmigrate.c:626:
+migrate_mapped_file_vma(struct task_struct *task, struct mm_struct *mm,
+	              struct vm_area_struct *vma, size_t va_start,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: mm/mmigrate.c:642:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: mm/mmigrate.c:652:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: mm/mmigrate.c:658:
+^I^I^I^Iif (PageLRU(page) && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#150: FILE: mm/mmigrate.c:658:
+				if (PageLRU(page) && 
[...]
+				} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: mm/mmigrate.c:662:
+^I^I^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#154: FILE: mm/mmigrate.c:662:
+				} else 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: mm/mmigrate.c:663:
+					BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: mm/mmigrate.c:666:
+^I^I} $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#165: FILE: mm/mmigrate.c:673:
+
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: mm/mmigrate.c:677:
+^I              struct vm_area_struct *vma, size_t va_start,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: mm/mmigrate.c:677:
+migrate_anon_private_vma(struct task_struct *task, struct mm_struct *mm,
+	              struct vm_area_struct *vma, size_t va_start,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#181: FILE: mm/mmigrate.c:689:
+	for (vaddr=va_start; vaddr<=va_end; vaddr += PAGE_SIZE) {
 	          ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#181: FILE: mm/mmigrate.c:689:
+	for (vaddr=va_start; vaddr<=va_end; vaddr += PAGE_SIZE) {
 	                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: mm/mmigrate.c:693:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: mm/mmigrate.c:694:
+^I^I * follow_page has been observed to return pages with zero $

CHECK:BRACES: braces {} should be used on all arms of this statement
#194: FILE: mm/mmigrate.c:702:
+				if (PageLRU(page) &&
[...]
+				} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: mm/mmigrate.c:703:
+^I^I^I     ^I    __steal_page_from_lru(zone, page)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: mm/mmigrate.c:703:
+^I^I^I     ^I    __steal_page_from_lru(zone, page)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: mm/mmigrate.c:703:
+				if (PageLRU(page) &&
+			     	    __steal_page_from_lru(zone, page)) {

CHECK:BRACES: Unbalanced braces around else statement
#198: FILE: mm/mmigrate.c:706:
+				} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#199: FILE: mm/mmigrate.c:707:
+					BUG();

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#210: FILE: mm/mmigrate.c:718:
+void lru_add_drain_per_cpu(void *info) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: mm/mmigrate.c:724:
+sys_page_migrate(const pid_t pid, size_t va_start, size_t va_end,
+		const int count, caddr_t old_nodes, caddr_t new_nodes)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#224: FILE: mm/mmigrate.c:732:
+	size_t size = count*sizeof(short);
 	                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: mm/mmigrate.c:735:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#228: FILE: mm/mmigrate.c:736:
+	tmp_old_nodes = (short *) kmalloc(size, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#228: FILE: mm/mmigrate.c:736:
+	tmp_old_nodes = (short *) kmalloc(size, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#229: FILE: mm/mmigrate.c:737:
+	tmp_new_nodes = (short *) kmalloc(size, GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#229: FILE: mm/mmigrate.c:737:
+	tmp_new_nodes = (short *) kmalloc(size, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#230: FILE: mm/mmigrate.c:738:
+	node_map = (short *) kmalloc(MAX_NUMNODES*sizeof(short), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#230: FILE: mm/mmigrate.c:738:
+	node_map = (short *) kmalloc(MAX_NUMNODES*sizeof(short), GFP_KERNEL);
 	                                         ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#230: FILE: mm/mmigrate.c:738:
+	node_map = (short *) kmalloc(MAX_NUMNODES*sizeof(short), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: mm/mmigrate.c:745:
+^Iif (copy_from_user(tmp_old_nodes, old_nodes, size) || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: mm/mmigrate.c:769:
+^I/* $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma != vma2'
#267: FILE: mm/mmigrate.c:775:
+	if (!vma || !vma2 || (vma != vma2)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#273: FILE: mm/mmigrate.c:781:
+	for(i=0; i<MAX_NUMNODES; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#273: FILE: mm/mmigrate.c:781:
+	for(i=0; i<MAX_NUMNODES; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: mm/mmigrate.c:781:
+	for(i=0; i<MAX_NUMNODES; i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#275: FILE: mm/mmigrate.c:783:
+	for(i=0; i<count; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#275: FILE: mm/mmigrate.c:783:
+	for(i=0; i<count; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: mm/mmigrate.c:783:
+	for(i=0; i<count; i++)

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: mm/mmigrate.c:787:
+ ^Ismp_call_function(&lru_add_drain_per_cpu, NULL, 0, 1);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#279: FILE: mm/mmigrate.c:787:
+ ^Ismp_call_function(&lru_add_drain_per_cpu, NULL, 0, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: mm/mmigrate.c:787:
+ ^Ismp_call_function(&lru_add_drain_per_cpu, NULL, 0, 1);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: mm/mmigrate.c:793:
+		ret = migrate_mapped_file_vma(task, mm, vma, va_start, va_end,
+			node_map);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: mm/mmigrate.c:796:
+		ret = migrate_anon_private_vma(task, mm, vma, va_start, va_end,
+			node_map);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#295: FILE: mm/mmigrate.c:803:
+	if (tmp_old_nodes)
+		kfree(tmp_old_nodes);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#297: FILE: mm/mmigrate.c:805:
+	if (tmp_new_nodes)
+		kfree(tmp_new_nodes);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#299: FILE: mm/mmigrate.c:807:
+	if (node_map)
+		kfree(node_map);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#303: FILE: mm/mmigrate.c:811:
+
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 19 warnings, 22 checks, 235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000207421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
