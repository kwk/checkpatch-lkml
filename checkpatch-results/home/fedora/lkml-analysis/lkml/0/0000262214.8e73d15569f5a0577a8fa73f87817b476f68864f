WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#define decl_state(n, s) \

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:TYPO_SPELLING: 'inclding' may be misspelled - perhaps 'including'?
#112: 
inclding 'current' and 'supports'. The latter will display all the
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'hopefuly' may be misspelled - perhaps 'hopefully'?
#120: 
power support, will hopefuly eek out in the next week..
                    ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#190: FILE: drivers/base/power/class.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#191: FILE: drivers/base/power/class.c:2:
+ *	drivers/base/power/class.c - Class-based device power management

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: drivers/base/power/class.c:21:
+ * ^IStart the device. Restart any stopped transactions. Add it back to$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: drivers/base/power/class.c:44:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: drivers/base/power/class.c:47:
+int class_dev_stop(struct class_device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: drivers/base/power/class.c:51:
+	pr_debug("\t\t%s\n",dev->class_id);
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#249: FILE: drivers/base/power/class.c:60:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: drivers/base/power/class.c:61:
+int class_dev_start(struct class_device * dev)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#254: FILE: drivers/base/power/class.c:65:
+	pr_debug("\t\t%s\n",dev->class_id);
 	                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#263: FILE: drivers/base/power/class.c:74:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: drivers/base/power/class.c:75:
+static int __class_start(struct class * cls, struct class_device * cd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: drivers/base/power/class.c:75:
+static int __class_start(struct class * cls, struct class_device * cd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#266: FILE: drivers/base/power/class.c:77:
+	struct list_head * head = &cls->children;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: drivers/base/power/class.c:80:
+	pr_debug("\t%s\n",cls->name);
 	                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: drivers/base/power/class.c:90:
+static int class_start(struct class * cls)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: drivers/base/power/class.c:100:
+static int class_stop(struct class * cls)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: drivers/base/power/class.c:102:
+	struct class_device * cd;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: drivers/base/power/class.c:105:
+	pr_debug("\t%s\n",cls->name);
 	                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: drivers/base/power/class.c:119:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: drivers/base/power/class.c:120:
+static int __device_start(struct class * cls)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: drivers/base/power/class.c:123:
+	struct list_head * head = &class_subsys.kset.list;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#316: FILE: drivers/base/power/class.c:127:
+		if ((error = class_start(cls)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#336: FILE: drivers/base/power/class.c:147:
+	struct class * cls;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#354: FILE: drivers/base/power/power.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#364: FILE: drivers/base/power/power.c:11:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: drivers/base/power/power.c:13:
+int device_power_dev(struct device * dev, struct pm_state * state)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: drivers/base/power/power.c:13:
+int device_power_dev(struct device * dev, struct pm_state * state)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: drivers/base/power/power.c:27:
+int device_power_default(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#385: FILE: drivers/base/power/power.c:32:
+static int __device_power_up(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#387: FILE: drivers/base/power/power.c:34:
+	struct list_head * head = &devices_subsys.kset.list;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: drivers/base/power/power.c:35:
+	struct pm_state * state;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#395: FILE: drivers/base/power/power.c:42:
+		if ((error = device_power_dev(dev, state)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#401: FILE: drivers/base/power/power.c:48:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#405: FILE: drivers/base/power/power.c:52:
+	int error;
+	down_read(&devices_subsys.rwsem);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#413: FILE: drivers/base/power/power.c:60:
+	struct device * dev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: drivers/base/power/power.c:61:
+	struct pm_state * state;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#455: FILE: drivers/base/power/power.h:92:
+extern int class_dev_stop(struct class_device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#456: FILE: drivers/base/power/power.h:93:
+extern int class_dev_start(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#456: FILE: drivers/base/power/power.h:93:
+extern int class_dev_start(struct class_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: drivers/base/power/power.h:95:
+extern int device_save_dev(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#458: FILE: drivers/base/power/power.h:95:
+extern int device_save_dev(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pm_state *' should also have an identifier name
#458: FILE: drivers/base/power/power.h:95:
+extern int device_save_dev(struct device *, struct pm_state *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#459: FILE: drivers/base/power/power.h:96:
+extern int device_restore_dev(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#459: FILE: drivers/base/power/power.h:96:
+extern int device_restore_dev(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pm_state *' should also have an identifier name
#459: FILE: drivers/base/power/power.h:96:
+extern int device_restore_dev(struct device *, struct pm_state *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#461: FILE: drivers/base/power/power.h:98:
+extern int device_power_dev(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#461: FILE: drivers/base/power/power.h:98:
+extern int device_power_dev(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pm_state *' should also have an identifier name
#461: FILE: drivers/base/power/power.h:98:
+extern int device_power_dev(struct device *, struct pm_state *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#462: FILE: drivers/base/power/power.h:99:
+extern int device_power_default(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#462: FILE: drivers/base/power/power.h:99:
+extern int device_power_default(struct device *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#509: FILE: drivers/base/power/state.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#510: FILE: drivers/base/power/state.c:2:
+ *	drivers/base/power/state.c - Device state management

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#546: FILE: drivers/base/power/state.c:38:
+int device_save_dev(struct device * dev, struct pm_state * state)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#546: FILE: drivers/base/power/state.c:38:
+int device_save_dev(struct device * dev, struct pm_state * state)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: drivers/base/power/state.c:43:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#552: FILE: drivers/base/power/state.c:44:
+int device_restore_dev(struct device * dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#557: FILE: drivers/base/power/state.c:49:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#559: FILE: drivers/base/power/state.c:51:
+static int __device_restore(struct device * dev, u32 sys_state)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#561: FILE: drivers/base/power/state.c:53:
+	struct list_head * head = &devices_subsys.kset.list;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#567: FILE: drivers/base/power/state.c:59:
+		if ((error = device_restore_dev(dev)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#583: FILE: drivers/base/power/state.c:75:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#587: FILE: drivers/base/power/state.c:79:
+	struct device * dev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#588: FILE: drivers/base/power/state.c:80:
+	struct pm_state * state;

CHECK:BRACES: braces {} should be used on all arms of this statement
#598: FILE: drivers/base/power/state.c:90:
+			if (!error)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#600: FILE: drivers/base/power/state.c:92:
+			else {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#617: FILE: include/linux/device.h:68:
+	int		(*pm_save)(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pm_state *' should also have an identifier name
#617: FILE: include/linux/device.h:68:
+	int		(*pm_save)(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#618: FILE: include/linux/device.h:69:
+	int		(*pm_restore)(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#619: FILE: include/linux/device.h:70:
+	int		(*pm_power)(struct device *, struct pm_state *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pm_state *' should also have an identifier name
#619: FILE: include/linux/device.h:70:
+	int		(*pm_power)(struct device *, struct pm_state *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#628: FILE: include/linux/device.h:164:
+	int	(*dev_start)(struct class_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#629: FILE: include/linux/device.h:165:
+	int	(*dev_stop)(struct class_device * dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#658: FILE: include/linux/pm.h:235:
+
+

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#660: FILE: include/linux/pm.h:237:
+	char	* name;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#685: FILE: include/linux/pm.h:254:
+	struct pm_state	* pm_current;

ERROR:POINTER_LOCATION: "foo	** bar" should be "foo	**bar"
#686: FILE: include/linux/pm.h:255:
+	struct pm_state	** pm_supports;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#687: FILE: include/linux/pm.h:256:
+	struct pm_state	* pm_default;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#688: FILE: include/linux/pm.h:257:
+	struct pm_state	* pm_resume;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#689: FILE: include/linux/pm.h:258:
+	struct pm_state	* pm_system[pm_sys_NUM];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#700: FILE: include/linux/pm.h:267:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#701: FILE: include/linux/pm.h:268:
+extern int device_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#702: FILE: include/linux/pm.h:269:
+extern int device_start(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#704: FILE: include/linux/pm.h:271:
+extern int device_save(u32 sys_state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#705: FILE: include/linux/pm.h:272:
+extern int device_restore(u32 sys_state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#707: FILE: include/linux/pm.h:274:
+extern int device_power_up(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#708: FILE: include/linux/pm.h:275:
+extern int device_power_down(u32 sys_state);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262214.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 23 warnings, 25 checks, 538 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262214.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
