WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: fs/proc/array.c:288:
+    return buffer + sprintf(buffer, "CapInh:\t%016llx\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: include/linux/capability.h:39:
+        __u64 effective;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/linux/capability.h:39:
+        __u64 effective;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: include/linux/capability.h:40:
+        __u64 permitted;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/linux/capability.h:40:
+        __u64 permitted;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: include/linux/capability.h:41:
+        __u64 inheritable;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/linux/capability.h:41:
+        __u64 inheritable;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: include/linux/capability.h:43:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/linux/capability.h:43:
+ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#93: FILE: include/linux/capability.h:44:
+typedef struct __user_cap_data_old_struct {

ERROR:SPACING: space required before the open parenthesis '('
#142: FILE: include/linux/capability.h:362:
+#define cap_clear(c)         do { cap_t(c) =  0ULL; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#142: FILE: include/linux/capability.h:362:
+#define cap_clear(c)         do { cap_t(c) =  0ULL; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: include/linux/capability.h:363:
+#define cap_set_full(c)      do { cap_t(c) = ~0ULL; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#143: FILE: include/linux/capability.h:363:
+#define cap_set_full(c)      do { cap_t(c) = ~0ULL; } while(0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: kernel/capability.c:55:
+     if (version != _LINUX_CAPABILITY_VERSION$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#156: FILE: kernel/capability.c:55:
+     if (version != _LINUX_CAPABILITY_VERSION
[...]
 	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#157: FILE: kernel/capability.c:56:
+     if (version != _LINUX_CAPABILITY_VERSION
+	 && version != _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: kernel/capability.c:86:
+     if (!ret) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#167: FILE: kernel/capability.c:86:
+     if (!ret) {
+	     if (version == _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:TABSTOP: Statements should start on a tabstop
#168: FILE: kernel/capability.c:87:
+	     if (version == _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#168: FILE: kernel/capability.c:87:
+	     if (version == _LINUX_CAPABILITY_OLD_VERSION) {
+		     struct __user_cap_data_old_struct data_old;

WARNING:TABSTOP: Statements should start on a tabstop
#169: FILE: kernel/capability.c:88:
+		     struct __user_cap_data_old_struct data_old;

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: kernel/capability.c:89:
+		     struct __user_cap_data_old_struct data_old;
+		     data_old.effective = data_old.effective & 0xffffffffULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#173: FILE: kernel/capability.c:92:
+		     if (copy_to_user(dataptr, &data_old, sizeof data_old))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (21, 29)
#173: FILE: kernel/capability.c:92:
+		     if (copy_to_user(dataptr, &data_old, sizeof data_old))
+			     return -EFAULT;

WARNING:SIZEOF_PARENTHESIS: sizeof data_old should be sizeof(data_old)
#173: FILE: kernel/capability.c:92:
+		     if (copy_to_user(dataptr, &data_old, sizeof data_old))

WARNING:TABSTOP: Statements should start on a tabstop
#174: FILE: kernel/capability.c:93:
+			     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#175: FILE: kernel/capability.c:94:
+	     } else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#175: FILE: kernel/capability.c:94:
+	     } else
+		     if (copy_to_user(dataptr, &data, sizeof data))

CHECK:BRACES: Unbalanced braces around else statement
#175: FILE: kernel/capability.c:94:
+	     } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#176: FILE: kernel/capability.c:95:
+		     if (copy_to_user(dataptr, &data, sizeof data))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (21, 29)
#176: FILE: kernel/capability.c:95:
+		     if (copy_to_user(dataptr, &data, sizeof data))
+			     return -EFAULT;

WARNING:SIZEOF_PARENTHESIS: sizeof data should be sizeof(data)
#176: FILE: kernel/capability.c:95:
+		     if (copy_to_user(dataptr, &data, sizeof data))

WARNING:TABSTOP: Statements should start on a tabstop
#177: FILE: kernel/capability.c:96:
+			     return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: kernel/capability.c:97:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: kernel/capability.c:193:
+     if (version != _LINUX_CAPABILITY_VERSION$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#187: FILE: kernel/capability.c:193:
+     if (version != _LINUX_CAPABILITY_VERSION
[...]
 	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#188: FILE: kernel/capability.c:194:
+     if (version != _LINUX_CAPABILITY_VERSION
+	 && version != _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: kernel/capability.c:206:
+     if (version == _LINUX_CAPABILITY_OLD_VERSION) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#200: FILE: kernel/capability.c:206:
+     if (version == _LINUX_CAPABILITY_OLD_VERSION) {
+	     const cap_user_data_old_t data2 = (void *)data;

WARNING:TABSTOP: Statements should start on a tabstop
#201: FILE: kernel/capability.c:207:
+	     const cap_user_data_old_t data2 = (void *)data;

WARNING:TABSTOP: Statements should start on a tabstop
#202: FILE: kernel/capability.c:208:
+	     __u32 w;

WARNING:TABSTOP: Statements should start on a tabstop
#203: FILE: kernel/capability.c:209:
+	     if (copy_from_user(&w, &data2->effective, sizeof(w)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: kernel/capability.c:209:
+	     __u32 w;
+	     if (copy_from_user(&w, &data2->effective, sizeof(w)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#203: FILE: kernel/capability.c:209:
+	     if (copy_from_user(&w, &data2->effective, sizeof(w)))
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#204: FILE: kernel/capability.c:210:
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#206: FILE: kernel/capability.c:212:
+	     if (copy_from_user(&w, &data2->inheritable, sizeof(w)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#206: FILE: kernel/capability.c:212:
+	     if (copy_from_user(&w, &data2->inheritable, sizeof(w)))
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#207: FILE: kernel/capability.c:213:
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#209: FILE: kernel/capability.c:215:
+	     if (copy_from_user(&w, &data2->permitted, sizeof(w)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#209: FILE: kernel/capability.c:215:
+	     if (copy_from_user(&w, &data2->permitted, sizeof(w)))
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#210: FILE: kernel/capability.c:216:
+		     return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: kernel/capability.c:218:
+     } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#212: FILE: kernel/capability.c:218:
+     } else
+	     if (copy_from_user(&effective, &data->effective, sizeof(effective)) ||

CHECK:BRACES: Unbalanced braces around else statement
#212: FILE: kernel/capability.c:218:
+     } else

WARNING:TABSTOP: Statements should start on a tabstop
#213: FILE: kernel/capability.c:219:
+	     if (copy_from_user(&effective, &data->effective, sizeof(effective)) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#213: FILE: kernel/capability.c:219:
+	     if (copy_from_user(&effective, &data->effective, sizeof(effective)) ||
[...]
+		     return -EFAULT; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: kernel/capability.c:222:
+^I^I     return -EFAULT; $

WARNING:TABSTOP: Statements should start on a tabstop
#216: FILE: kernel/capability.c:222:
+		     return -EFAULT; 

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#245: FILE: security/commoncap.c:250:
+			current->cap_permitted
+				= cap_intersect (current->cap_permitted,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: security/commoncap.c:250:
+				= cap_intersect (current->cap_permitted,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#248: FILE: security/commoncap.c:253:
+			current->cap_effective
+				= cap_intersect (current->cap_effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#248: FILE: security/commoncap.c:253:
+				= cap_intersect (current->cap_effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: security/commoncap.c:258:
+		current->cap_effective = cap_intersect (current->cap_effective,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 51 warnings, 6 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040124.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
