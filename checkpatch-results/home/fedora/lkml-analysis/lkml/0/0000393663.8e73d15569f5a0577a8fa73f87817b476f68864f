WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#132: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
#	           ChangeSet	1.1032  -> 1.1036 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
#	drivers/char/watchdog/Makefile	1.5     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
#	include/linux/watchdog.h	1.4     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
#	               (new)	        -> 1.2     drivers/char/watchdog/dummy2.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
#	               (new)	        -> 1.2     drivers/char/watchdog/dummy1.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
#	               (new)	        -> 1.3     drivers/char/watchdog/base.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#143: 
# 03/02/12	rusty@penguin.co.intel.com	1.1033

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
# Adding a common infrastructure for watchdog timers to implement

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#145: 
# a sysfs interface

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#146: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#147: 
# 03/02/13	rusty@penguin.co.intel.com	1.1034

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#148: 
# Moving wdt_device from a platform_device to a sys_device,

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#149: 
# making stop/start/keepalive be write-only, and removing the get_enable

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#150: 
# and set_enable callbacks.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#151: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#152: 
# 03/02/13	rusty@penguin.co.intel.com	1.1035

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#153: 
# Changes that should have been adde to the last changeset

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#154: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#155: 
# 03/02/13	rusty@penguin.co.intel.com	1.1036

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#156: 
# Reworked the watchdog infrastructure implementation to use the sysfs

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#157: 
# class concept.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#158: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#159: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#161: 
--- a/drivers/char/watchdog/Makefile	Thu Feb 13 17:38:25 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: drivers/char/watchdog/base.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: drivers/char/watchdog/base.c:14:
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: drivers/char/watchdog/base.c:15:
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: drivers/char/watchdog/base.c:16:
+ * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: drivers/char/watchdog/base.c:17:
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/char/watchdog/base.c:18:
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: drivers/char/watchdog/base.c:19:
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: drivers/char/watchdog/base.c:20:
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: drivers/char/watchdog/base.c:21:
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#206: FILE: drivers/char/watchdog/base.c:25:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#207: FILE: drivers/char/watchdog/base.c:26:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: drivers/char/watchdog/base.c:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: drivers/char/watchdog/base.c:39:
+        printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## arg)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: drivers/char/watchdog/base.c:39:
+        printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## arg)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#220: FILE: drivers/char/watchdog/base.c:39:
+        printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#220: FILE: drivers/char/watchdog/base.c:39:
+        printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## arg)
                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#220: FILE: drivers/char/watchdog/base.c:39:
+        printk(KERN_INFO "%s(" format ")\n", __FUNCTION__ , ## arg)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#225: FILE: drivers/char/watchdog/base.c:44:
+static int device_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->start)
#235: FILE: drivers/char/watchdog/base.c:54:
+	if ((w->ops->start)(w))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->start'
#235: FILE: drivers/char/watchdog/base.c:54:
+	if ((w->ops->start)(w))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: drivers/char/watchdog/base.c:59:
+DRIVER_ATTR(start,S_IWUSR,NULL,start_store);
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: drivers/char/watchdog/base.c:59:
+DRIVER_ATTR(start,S_IWUSR,NULL,start_store);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: drivers/char/watchdog/base.c:59:
+DRIVER_ATTR(start,S_IWUSR,NULL,start_store);
                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#240: FILE: drivers/char/watchdog/base.c:59:
+DRIVER_ATTR(start,S_IWUSR,NULL,start_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->stop)
#250: FILE: drivers/char/watchdog/base.c:69:
+	if ((w->ops->stop)(w, buf))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->stop'
#250: FILE: drivers/char/watchdog/base.c:69:
+	if ((w->ops->stop)(w, buf))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#255: FILE: drivers/char/watchdog/base.c:74:
+DRIVER_ATTR(stop,S_IWUSR,NULL,stop_store);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#255: FILE: drivers/char/watchdog/base.c:74:
+DRIVER_ATTR(stop,S_IWUSR,NULL,stop_store);
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#255: FILE: drivers/char/watchdog/base.c:74:
+DRIVER_ATTR(stop,S_IWUSR,NULL,stop_store);
                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#255: FILE: drivers/char/watchdog/base.c:74:
+DRIVER_ATTR(stop,S_IWUSR,NULL,stop_store);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->get_timeout)
#266: FILE: drivers/char/watchdog/base.c:85:
+	if((w->ops->get_timeout)(w, &timeout))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->get_timeout'
#266: FILE: drivers/char/watchdog/base.c:85:
+	if((w->ops->get_timeout)(w, &timeout))

ERROR:SPACING: space required before the open parenthesis '('
#266: FILE: drivers/char/watchdog/base.c:85:
+	if((w->ops->get_timeout)(w, &timeout))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#271: FILE: drivers/char/watchdog/base.c:90:
+}
+ssize_t timeout_store(struct device_driver *d, const char *buf, size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: drivers/char/watchdog/base.c:99:
+	if (!sscanf(buf,"%i",&timeout))
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#280: FILE: drivers/char/watchdog/base.c:99:
+	if (!sscanf(buf,"%i",&timeout))
 	                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#280: FILE: drivers/char/watchdog/base.c:99:
+	if (!sscanf(buf,"%i",&timeout))
 	                     ^

WARNING:NAKED_SSCANF: unchecked sscanf return value
#280: FILE: drivers/char/watchdog/base.c:99:
+	if (!sscanf(buf,"%i",&timeout))
+		return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#280: FILE: drivers/char/watchdog/base.c:99:
+	if (!sscanf(buf,"%i",&timeout))
+		return -EINVAL;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->set_timeout)
#283: FILE: drivers/char/watchdog/base.c:102:
+	if ((w->ops->set_timeout)(w, timeout))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->set_timeout'
#283: FILE: drivers/char/watchdog/base.c:102:
+	if ((w->ops->set_timeout)(w, timeout))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: drivers/char/watchdog/base.c:107:
+DRIVER_ATTR(timeout,S_IRUGO|S_IWUSR,timeout_show,timeout_store);
                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#288: FILE: drivers/char/watchdog/base.c:107:
+DRIVER_ATTR(timeout,S_IRUGO|S_IWUSR,timeout_show,timeout_store);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: drivers/char/watchdog/base.c:107:
+DRIVER_ATTR(timeout,S_IRUGO|S_IWUSR,timeout_show,timeout_store);
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: drivers/char/watchdog/base.c:107:
+DRIVER_ATTR(timeout,S_IRUGO|S_IWUSR,timeout_show,timeout_store);
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#288: FILE: drivers/char/watchdog/base.c:107:
+DRIVER_ATTR(timeout,S_IRUGO|S_IWUSR,timeout_show,timeout_store);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->keepalive)
#298: FILE: drivers/char/watchdog/base.c:117:
+	if ((w->ops->keepalive)(w))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->keepalive'
#298: FILE: drivers/char/watchdog/base.c:117:
+	if ((w->ops->keepalive)(w))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: drivers/char/watchdog/base.c:122:
+DRIVER_ATTR(keepalive,S_IWUSR,NULL,keepalive_store);
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: drivers/char/watchdog/base.c:122:
+DRIVER_ATTR(keepalive,S_IWUSR,NULL,keepalive_store);
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#303: FILE: drivers/char/watchdog/base.c:122:
+DRIVER_ATTR(keepalive,S_IWUSR,NULL,keepalive_store);
                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#303: FILE: drivers/char/watchdog/base.c:122:
+DRIVER_ATTR(keepalive,S_IWUSR,NULL,keepalive_store);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->get_nowayout)
#314: FILE: drivers/char/watchdog/base.c:133:
+	if ((w->ops->get_nowayout)(w, &nowayout))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->get_nowayout'
#314: FILE: drivers/char/watchdog/base.c:133:
+	if ((w->ops->get_nowayout)(w, &nowayout))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#319: FILE: drivers/char/watchdog/base.c:138:
+}
+ssize_t nowayout_store(struct device_driver *d, const char *buf, size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: drivers/char/watchdog/base.c:147:
+	if (!sscanf(buf,"%i",&nowayout))
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#328: FILE: drivers/char/watchdog/base.c:147:
+	if (!sscanf(buf,"%i",&nowayout))
 	                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#328: FILE: drivers/char/watchdog/base.c:147:
+	if (!sscanf(buf,"%i",&nowayout))
 	                     ^

WARNING:NAKED_SSCANF: unchecked sscanf return value
#328: FILE: drivers/char/watchdog/base.c:147:
+	if (!sscanf(buf,"%i",&nowayout))
+		return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#328: FILE: drivers/char/watchdog/base.c:147:
+	if (!sscanf(buf,"%i",&nowayout))
+		return -EINVAL;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->set_nowayout)
#331: FILE: drivers/char/watchdog/base.c:150:
+	if ((w->ops->set_nowayout)(w, nowayout))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->set_nowayout'
#331: FILE: drivers/char/watchdog/base.c:150:
+	if ((w->ops->set_nowayout)(w, nowayout))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: drivers/char/watchdog/base.c:155:
+DRIVER_ATTR(nowayout,S_IRUGO|S_IWUSR,nowayout_show,nowayout_store);
                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#336: FILE: drivers/char/watchdog/base.c:155:
+DRIVER_ATTR(nowayout,S_IRUGO|S_IWUSR,nowayout_show,nowayout_store);
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: drivers/char/watchdog/base.c:155:
+DRIVER_ATTR(nowayout,S_IRUGO|S_IWUSR,nowayout_show,nowayout_store);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: drivers/char/watchdog/base.c:155:
+DRIVER_ATTR(nowayout,S_IRUGO|S_IWUSR,nowayout_show,nowayout_store);
                                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#336: FILE: drivers/char/watchdog/base.c:155:
+DRIVER_ATTR(nowayout,S_IRUGO|S_IWUSR,nowayout_show,nowayout_store);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->get_status)
#347: FILE: drivers/char/watchdog/base.c:166:
+	if ((w->ops->get_status)(w, &status))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->get_status'
#347: FILE: drivers/char/watchdog/base.c:166:
+	if ((w->ops->get_status)(w, &status))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#352: FILE: drivers/char/watchdog/base.c:171:
+DRIVER_ATTR(status,S_IRUGO,status_show,NULL);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#352: FILE: drivers/char/watchdog/base.c:171:
+DRIVER_ATTR(status,S_IRUGO,status_show,NULL);
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#352: FILE: drivers/char/watchdog/base.c:171:
+DRIVER_ATTR(status,S_IRUGO,status_show,NULL);
                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#352: FILE: drivers/char/watchdog/base.c:171:
+DRIVER_ATTR(status,S_IRUGO,status_show,NULL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->get_bootstatus)
#363: FILE: drivers/char/watchdog/base.c:182:
+	if ((w->ops->get_bootstatus)(w, &bootstatus))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->get_bootstatus'
#363: FILE: drivers/char/watchdog/base.c:182:
+	if ((w->ops->get_bootstatus)(w, &bootstatus))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#368: FILE: drivers/char/watchdog/base.c:187:
+DRIVER_ATTR(bootstatus,S_IRUGO,bootstatus_show,NULL);
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#368: FILE: drivers/char/watchdog/base.c:187:
+DRIVER_ATTR(bootstatus,S_IRUGO,bootstatus_show,NULL);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#368: FILE: drivers/char/watchdog/base.c:187:
+DRIVER_ATTR(bootstatus,S_IRUGO,bootstatus_show,NULL);
                                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#368: FILE: drivers/char/watchdog/base.c:187:
+DRIVER_ATTR(bootstatus,S_IRUGO,bootstatus_show,NULL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->get_temperature)
#379: FILE: drivers/char/watchdog/base.c:198:
+	if ((w->ops->get_temperature)(w, &temperature))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->get_temperature'
#379: FILE: drivers/char/watchdog/base.c:198:
+	if ((w->ops->get_temperature)(w, &temperature))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: drivers/char/watchdog/base.c:203:
+DRIVER_ATTR(temperature,S_IRUGO,temperature_show,NULL);
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: drivers/char/watchdog/base.c:203:
+DRIVER_ATTR(temperature,S_IRUGO,temperature_show,NULL);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: drivers/char/watchdog/base.c:203:
+DRIVER_ATTR(temperature,S_IRUGO,temperature_show,NULL);
                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#384: FILE: drivers/char/watchdog/base.c:203:
+DRIVER_ATTR(temperature,S_IRUGO,temperature_show,NULL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->get_temppanic)
#395: FILE: drivers/char/watchdog/base.c:214:
+	if ((w->ops->get_temppanic)(w, &temppanic))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->get_temppanic'
#395: FILE: drivers/char/watchdog/base.c:214:
+	if ((w->ops->get_temppanic)(w, &temppanic))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#400: FILE: drivers/char/watchdog/base.c:219:
+}
+ssize_t temppanic_store(struct device_driver *d, const char *buf, size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: drivers/char/watchdog/base.c:228:
+	if (!sscanf(buf,"%i",&temppanic))
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#409: FILE: drivers/char/watchdog/base.c:228:
+	if (!sscanf(buf,"%i",&temppanic))
 	                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#409: FILE: drivers/char/watchdog/base.c:228:
+	if (!sscanf(buf,"%i",&temppanic))
 	                     ^

WARNING:NAKED_SSCANF: unchecked sscanf return value
#409: FILE: drivers/char/watchdog/base.c:228:
+	if (!sscanf(buf,"%i",&temppanic))
+		return -EINVAL;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#409: FILE: drivers/char/watchdog/base.c:228:
+	if (!sscanf(buf,"%i",&temppanic))
+		return -EINVAL;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (w->ops->set_temppanic)
#412: FILE: drivers/char/watchdog/base.c:231:
+	if ((w->ops->set_temppanic)(w, temppanic))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w->ops->set_temppanic'
#412: FILE: drivers/char/watchdog/base.c:231:
+	if ((w->ops->set_temppanic)(w, temppanic))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#417: FILE: drivers/char/watchdog/base.c:236:
+DRIVER_ATTR(temppanic,S_IRUGO|S_IWUSR,temppanic_show,temppanic_store);
                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#417: FILE: drivers/char/watchdog/base.c:236:
+DRIVER_ATTR(temppanic,S_IRUGO|S_IWUSR,temppanic_show,temppanic_store);
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#417: FILE: drivers/char/watchdog/base.c:236:
+DRIVER_ATTR(temppanic,S_IRUGO|S_IWUSR,temppanic_show,temppanic_store);
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#417: FILE: drivers/char/watchdog/base.c:236:
+DRIVER_ATTR(temppanic,S_IRUGO|S_IWUSR,temppanic_show,temppanic_store);
                                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#417: FILE: drivers/char/watchdog/base.c:236:
+DRIVER_ATTR(temppanic,S_IRUGO|S_IWUSR,temppanic_show,temppanic_store);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#421: FILE: drivers/char/watchdog/base.c:240:
+	driver_create_file(&(d->driver), &driver_attr_start);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#422: FILE: drivers/char/watchdog/base.c:241:
+	driver_create_file(&(d->driver), &driver_attr_stop);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#423: FILE: drivers/char/watchdog/base.c:242:
+	driver_create_file(&(d->driver), &driver_attr_timeout);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#424: FILE: drivers/char/watchdog/base.c:243:
+	driver_create_file(&(d->driver), &driver_attr_keepalive);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#425: FILE: drivers/char/watchdog/base.c:244:
+	driver_create_file(&(d->driver), &driver_attr_nowayout);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#426: FILE: drivers/char/watchdog/base.c:245:
+	driver_create_file(&(d->driver), &driver_attr_status);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#427: FILE: drivers/char/watchdog/base.c:246:
+	driver_create_file(&(d->driver), &driver_attr_bootstatus);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#428: FILE: drivers/char/watchdog/base.c:247:
+	driver_create_file(&(d->driver), &driver_attr_temperature);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#429: FILE: drivers/char/watchdog/base.c:248:
+	driver_create_file(&(d->driver), &driver_attr_temppanic);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#436: FILE: drivers/char/watchdog/base.c:255:
+	driver_remove_file(&(d->driver), &driver_attr_start);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#437: FILE: drivers/char/watchdog/base.c:256:
+	driver_remove_file(&(d->driver), &driver_attr_stop);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#438: FILE: drivers/char/watchdog/base.c:257:
+	driver_remove_file(&(d->driver), &driver_attr_timeout);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#439: FILE: drivers/char/watchdog/base.c:258:
+	driver_remove_file(&(d->driver), &driver_attr_keepalive);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#440: FILE: drivers/char/watchdog/base.c:259:
+	driver_remove_file(&(d->driver), &driver_attr_nowayout);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#441: FILE: drivers/char/watchdog/base.c:260:
+	driver_remove_file(&(d->driver), &driver_attr_status);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#442: FILE: drivers/char/watchdog/base.c:261:
+	driver_remove_file(&(d->driver), &driver_attr_bootstatus);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#443: FILE: drivers/char/watchdog/base.c:262:
+	driver_remove_file(&(d->driver), &driver_attr_temperature);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#444: FILE: drivers/char/watchdog/base.c:263:
+	driver_remove_file(&(d->driver), &driver_attr_temppanic);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: drivers/char/watchdog/base.c:266:
+int watchdog_driver_register(struct watchdog_driver *d) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#451: FILE: drivers/char/watchdog/base.c:270:
+	rv = driver_register(&(d->driver));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around d->driver
#460: FILE: drivers/char/watchdog/base.c:279:
+	driver_unregister(&(d->driver));

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: drivers/char/watchdog/base.c:284:
+        .name^I^I= "watchdog",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: drivers/char/watchdog/base.c:284:
+        .name^I^I= "watchdog",$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#488: FILE: drivers/char/watchdog/base.c:307:
+EXPORT_SYMBOL_GPL(watchdog_driver_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#489: FILE: drivers/char/watchdog/base.c:308:
+EXPORT_SYMBOL_GPL(watchdog_driver_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#490: FILE: drivers/char/watchdog/base.c:309:
+EXPORT_SYMBOL_GPL(watchdog_devclass);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#495: FILE: drivers/char/watchdog/dummy1.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: drivers/char/watchdog/dummy1.c:14:
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: drivers/char/watchdog/dummy1.c:15:
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: drivers/char/watchdog/dummy1.c:16:
+ * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: drivers/char/watchdog/dummy1.c:17:
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: drivers/char/watchdog/dummy1.c:18:
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: drivers/char/watchdog/dummy1.c:19:
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: drivers/char/watchdog/dummy1.c:20:
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: drivers/char/watchdog/dummy1.c:21:
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#519: FILE: drivers/char/watchdog/dummy1.c:25:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#520: FILE: drivers/char/watchdog/dummy1.c:26:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#533: FILE: drivers/char/watchdog/dummy1.c:39:
+#include <asm/io.h>

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#535: FILE: drivers/char/watchdog/dummy1.c:41:
+#define dbg(format, arg...)				\
+		 printk (KERN_DEBUG "%s: " format "\n",	\
+			 __FUNCTION__, ## arg);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#535: FILE: drivers/char/watchdog/dummy1.c:41:
+#define dbg(format, arg...)				\
+		 printk (KERN_DEBUG "%s: " format "\n",	\
+			 __FUNCTION__, ## arg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#536: FILE: drivers/char/watchdog/dummy1.c:42:
+		 printk (KERN_DEBUG "%s: " format "\n",	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#536: FILE: drivers/char/watchdog/dummy1.c:42:
+		 printk (KERN_DEBUG "%s: " format "\n",	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#537: FILE: drivers/char/watchdog/dummy1.c:43:
+			 __FUNCTION__, ## arg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#538: FILE: drivers/char/watchdog/dummy1.c:44:
+#define trace(format, arg...)				 \
+                 printk(KERN_INFO "%s(" format ")\n",    \
+		               __FUNCTION__ , ## arg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: drivers/char/watchdog/dummy1.c:45:
+                 printk(KERN_INFO "%s(" format ")\n",    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: drivers/char/watchdog/dummy1.c:45:
+                 printk(KERN_INFO "%s(" format ")\n",    \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#539: FILE: drivers/char/watchdog/dummy1.c:45:
+                 printk(KERN_INFO "%s(" format ")\n",    \

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: drivers/char/watchdog/dummy1.c:46:
+^I^I               __FUNCTION__ , ## arg);$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#540: FILE: drivers/char/watchdog/dummy1.c:46:
+		               __FUNCTION__ , ## arg);
 		                            ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#540: FILE: drivers/char/watchdog/dummy1.c:46:
+		               __FUNCTION__ , ## arg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: drivers/char/watchdog/dummy1.c:48:
+                printk(KERN_ERR "%s: " format "\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: drivers/char/watchdog/dummy1.c:48:
+                printk(KERN_ERR "%s: " format "\n", \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#542: FILE: drivers/char/watchdog/dummy1.c:48:
+                printk(KERN_ERR "%s: " format "\n", \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#543: FILE: drivers/char/watchdog/dummy1.c:49:
+		       __FUNCTION__ , ## arg)
 		                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#543: FILE: drivers/char/watchdog/dummy1.c:49:
+		       __FUNCTION__ , ## arg)

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: drivers/char/watchdog/dummy1.c:51:
+                printk(KERN_INFO "%s: " format "\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: drivers/char/watchdog/dummy1.c:51:
+                printk(KERN_INFO "%s: " format "\n", \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#545: FILE: drivers/char/watchdog/dummy1.c:51:
+                printk(KERN_INFO "%s: " format "\n", \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#546: FILE: drivers/char/watchdog/dummy1.c:52:
+		       __FUNCTION__ , ## arg)
 		                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#546: FILE: drivers/char/watchdog/dummy1.c:52:
+		       __FUNCTION__ , ## arg)

ERROR:CODE_INDENT: code indent should use tabs where possible
#548: FILE: drivers/char/watchdog/dummy1.c:54:
+                printk(KERN_WARNING "%s: " format "\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: drivers/char/watchdog/dummy1.c:54:
+                printk(KERN_WARNING "%s: " format "\n", \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#548: FILE: drivers/char/watchdog/dummy1.c:54:
+                printk(KERN_WARNING "%s: " format "\n", \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#549: FILE: drivers/char/watchdog/dummy1.c:55:
+		       __FUNCTION__ , ## arg)
 		                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#549: FILE: drivers/char/watchdog/dummy1.c:55:
+		       __FUNCTION__ , ## arg)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: drivers/char/watchdog/dummy1.c:57:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: drivers/char/watchdog/dummy1.c:70:
+static int dummy1_keepalive(struct watchdog_driver *d) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: drivers/char/watchdog/dummy1.c:100:
+^Itrace("%s, %i", d->driver.name, n);^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: drivers/char/watchdog/dummy1.c:145:
+static int dummy1_probe(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#644: FILE: drivers/char/watchdog/dummy1.c:150:
+}
+static int dummy1_remove(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#644: FILE: drivers/char/watchdog/dummy1.c:150:
+static int dummy1_remove(struct device * dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#649: FILE: drivers/char/watchdog/dummy1.c:155:
+}
+static int dummy1_suspend(struct device * dev, u32 state, u32 level)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#649: FILE: drivers/char/watchdog/dummy1.c:155:
+static int dummy1_suspend(struct device * dev, u32 state, u32 level)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#654: FILE: drivers/char/watchdog/dummy1.c:160:
+}
+static int dummy1_resume(struct device * dev, u32 level)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#654: FILE: drivers/char/watchdog/dummy1.c:160:
+static int dummy1_resume(struct device * dev, u32 level)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#660: FILE: drivers/char/watchdog/dummy1.c:166:
+static void dummy1_release(struct device_driver * drv)

WARNING:CONST_STRUCT: struct watchdog_ops should normally be const
#665: FILE: drivers/char/watchdog/dummy1.c:171:
+static struct watchdog_ops dummy1_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#721: FILE: drivers/char/watchdog/dummy2.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: drivers/char/watchdog/dummy2.c:14:
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: drivers/char/watchdog/dummy2.c:15:
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#736: FILE: drivers/char/watchdog/dummy2.c:16:
+ * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#737: FILE: drivers/char/watchdog/dummy2.c:17:
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#738: FILE: drivers/char/watchdog/dummy2.c:18:
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: drivers/char/watchdog/dummy2.c:19:
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#740: FILE: drivers/char/watchdog/dummy2.c:20:
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: drivers/char/watchdog/dummy2.c:21:
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#745: FILE: drivers/char/watchdog/dummy2.c:25:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#746: FILE: drivers/char/watchdog/dummy2.c:26:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#759: FILE: drivers/char/watchdog/dummy2.c:39:
+#include <asm/io.h>

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#761: FILE: drivers/char/watchdog/dummy2.c:41:
+#define dbg(format, arg...)				\
+		 printk (KERN_DEBUG "%s: " format "\n",	\
+			 __FUNCTION__, ## arg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#761: FILE: drivers/char/watchdog/dummy2.c:41:
+#define dbg(format, arg...)				\
+		 printk (KERN_DEBUG "%s: " format "\n",	\
+			 __FUNCTION__, ## arg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#762: FILE: drivers/char/watchdog/dummy2.c:42:
+		 printk (KERN_DEBUG "%s: " format "\n",	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#762: FILE: drivers/char/watchdog/dummy2.c:42:
+		 printk (KERN_DEBUG "%s: " format "\n",	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#763: FILE: drivers/char/watchdog/dummy2.c:43:
+			 __FUNCTION__, ## arg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#764: FILE: drivers/char/watchdog/dummy2.c:44:
+#define trace(format, arg...)				 \
+                 printk(KERN_INFO "%s(" format ")\n",    \
+		               __FUNCTION__ , ## arg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#765: FILE: drivers/char/watchdog/dummy2.c:45:
+                 printk(KERN_INFO "%s(" format ")\n",    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: drivers/char/watchdog/dummy2.c:45:
+                 printk(KERN_INFO "%s(" format ")\n",    \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#765: FILE: drivers/char/watchdog/dummy2.c:45:
+                 printk(KERN_INFO "%s(" format ")\n",    \

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: drivers/char/watchdog/dummy2.c:46:
+^I^I               __FUNCTION__ , ## arg);$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#766: FILE: drivers/char/watchdog/dummy2.c:46:
+		               __FUNCTION__ , ## arg);
 		                            ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#766: FILE: drivers/char/watchdog/dummy2.c:46:
+		               __FUNCTION__ , ## arg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: drivers/char/watchdog/dummy2.c:48:
+                printk(KERN_ERR "%s: " format "\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: drivers/char/watchdog/dummy2.c:48:
+                printk(KERN_ERR "%s: " format "\n", \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#768: FILE: drivers/char/watchdog/dummy2.c:48:
+                printk(KERN_ERR "%s: " format "\n", \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#769: FILE: drivers/char/watchdog/dummy2.c:49:
+		       __FUNCTION__ , ## arg)
 		                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#769: FILE: drivers/char/watchdog/dummy2.c:49:
+		       __FUNCTION__ , ## arg)

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: drivers/char/watchdog/dummy2.c:51:
+                printk(KERN_INFO "%s: " format "\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: drivers/char/watchdog/dummy2.c:51:
+                printk(KERN_INFO "%s: " format "\n", \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#771: FILE: drivers/char/watchdog/dummy2.c:51:
+                printk(KERN_INFO "%s: " format "\n", \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#772: FILE: drivers/char/watchdog/dummy2.c:52:
+		       __FUNCTION__ , ## arg)
 		                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#772: FILE: drivers/char/watchdog/dummy2.c:52:
+		       __FUNCTION__ , ## arg)

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: drivers/char/watchdog/dummy2.c:54:
+                printk(KERN_WARNING "%s: " format "\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: drivers/char/watchdog/dummy2.c:54:
+                printk(KERN_WARNING "%s: " format "\n", \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#774: FILE: drivers/char/watchdog/dummy2.c:54:
+                printk(KERN_WARNING "%s: " format "\n", \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#775: FILE: drivers/char/watchdog/dummy2.c:55:
+		       __FUNCTION__ , ## arg)
 		                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#775: FILE: drivers/char/watchdog/dummy2.c:55:
+		       __FUNCTION__ , ## arg)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#777: FILE: drivers/char/watchdog/dummy2.c:57:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: drivers/char/watchdog/dummy2.c:70:
+static int dummy2_keepalive(struct watchdog_driver *d) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: drivers/char/watchdog/dummy2.c:100:
+^Itrace("%s, %i", d->driver.name, n);^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#865: FILE: drivers/char/watchdog/dummy2.c:145:
+static int dummy2_probe(struct device * dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#870: FILE: drivers/char/watchdog/dummy2.c:150:
+}
+static int dummy2_remove(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#870: FILE: drivers/char/watchdog/dummy2.c:150:
+static int dummy2_remove(struct device * dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#875: FILE: drivers/char/watchdog/dummy2.c:155:
+}
+static int dummy2_suspend(struct device * dev, u32 state, u32 level)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#875: FILE: drivers/char/watchdog/dummy2.c:155:
+static int dummy2_suspend(struct device * dev, u32 state, u32 level)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#880: FILE: drivers/char/watchdog/dummy2.c:160:
+}
+static int dummy2_resume(struct device * dev, u32 level)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#880: FILE: drivers/char/watchdog/dummy2.c:160:
+static int dummy2_resume(struct device * dev, u32 level)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#886: FILE: drivers/char/watchdog/dummy2.c:166:
+static void dummy2_release(struct device_driver * drv)

WARNING:CONST_STRUCT: struct watchdog_ops should normally be const
#891: FILE: drivers/char/watchdog/dummy2.c:171:
+static struct watchdog_ops dummy2_ops = {

WARNING:CONST_STRUCT: struct watchdog_ops should normally be const
#957: FILE: include/linux/watchdog.h:20:
+struct watchdog_ops;

WARNING:CONST_STRUCT: struct watchdog_ops should normally be const
#970: FILE: include/linux/watchdog.h:58:
+	struct watchdog_ops *ops;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#975: FILE: include/linux/watchdog.h:63:
+	int (*start)(struct watchdog_driver *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#976: FILE: include/linux/watchdog.h:64:
+	int (*stop)(struct watchdog_driver *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#976: FILE: include/linux/watchdog.h:64:
+	int (*stop)(struct watchdog_driver *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#977: FILE: include/linux/watchdog.h:65:
+	int (*keepalive)(struct watchdog_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#978: FILE: include/linux/watchdog.h:66:
+	int (*get_timeout)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#978: FILE: include/linux/watchdog.h:66:
+	int (*get_timeout)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#979: FILE: include/linux/watchdog.h:67:
+	int (*set_timeout)(struct watchdog_driver *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#979: FILE: include/linux/watchdog.h:67:
+	int (*set_timeout)(struct watchdog_driver *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#980: FILE: include/linux/watchdog.h:68:
+	int (*get_nowayout)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#980: FILE: include/linux/watchdog.h:68:
+	int (*get_nowayout)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#981: FILE: include/linux/watchdog.h:69:
+	int (*set_nowayout)(struct watchdog_driver *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#981: FILE: include/linux/watchdog.h:69:
+	int (*set_nowayout)(struct watchdog_driver *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#982: FILE: include/linux/watchdog.h:70:
+	int (*get_status)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#982: FILE: include/linux/watchdog.h:70:
+	int (*get_status)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#983: FILE: include/linux/watchdog.h:71:
+	int (*get_caps)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#983: FILE: include/linux/watchdog.h:71:
+	int (*get_caps)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#984: FILE: include/linux/watchdog.h:72:
+	int (*get_bootstatus)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#984: FILE: include/linux/watchdog.h:72:
+	int (*get_bootstatus)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#985: FILE: include/linux/watchdog.h:73:
+	int (*get_temperature)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#985: FILE: include/linux/watchdog.h:73:
+	int (*get_temperature)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#986: FILE: include/linux/watchdog.h:74:
+	int (*get_temppanic)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#986: FILE: include/linux/watchdog.h:74:
+	int (*get_temppanic)(struct watchdog_driver *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#987: FILE: include/linux/watchdog.h:75:
+	int (*set_temppanic)(struct watchdog_driver *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#987: FILE: include/linux/watchdog.h:75:
+	int (*set_temppanic)(struct watchdog_driver *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#990: FILE: include/linux/watchdog.h:78:
+int  watchdog_driver_register(struct watchdog_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct watchdog_driver *' should also have an identifier name
#991: FILE: include/linux/watchdog.h:79:
+void watchdog_driver_unregister(struct watchdog_driver *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393663.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 107 errors, 122 warnings, 59 checks, 812 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000393663.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
