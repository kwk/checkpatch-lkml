WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#26: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: arch/frv/kernel/head-uc-fr401.S:1:
+/* head-uc-fr401.S: FR401/3/5 uc-linux specific bits of initialisation

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: arch/frv/kernel/head-uc-fr401.S:277:
+^Imovgs^I^Igr0,iampr6^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#365: FILE: arch/frv/kernel/head-uc-fr451.S:1:
+/* head-uc-fr451.S: FR451 uc-linux specific bits of initialisation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: arch/frv/kernel/head-uc-fr451.S:162:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: arch/frv/kernel/head-uc-fr451.S:172:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#543: FILE: arch/frv/kernel/head-uc-fr555.S:1:
+/* head-uc-fr555.S: FR555 uc-linux specific bits of initialisation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: arch/frv/kernel/head-uc-fr555.S:211:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: arch/frv/kernel/head-uc-fr555.S:230:
+^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#894: FILE: arch/frv/kernel/init_task.c:1:
+#include <linux/mm.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#902: FILE: arch/frv/kernel/init_task.c:9:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#903: FILE: arch/frv/kernel/init_task.c:10:
+#include <asm/pgtable.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#905: FILE: arch/frv/kernel/init_task.c:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#912: FILE: arch/frv/kernel/init_task.c:19:
+EXPORT_SYMBOL(init_mm);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#921: FILE: arch/frv/kernel/init_task.c:28:
+union thread_union init_thread_union $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init_task") over __attribute__((__section__(".data.init_task")))
#922: FILE: arch/frv/kernel/init_task.c:29:
+	__attribute__((__section__(".data.init_task"))) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#923: FILE: arch/frv/kernel/init_task.c:30:
+	__attribute__((__section__(".data.init_task"))) =
+		{ INIT_THREAD_INFO(init_task) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#932: FILE: arch/frv/kernel/init_task.c:39:
+EXPORT_SYMBOL(init_task);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#937: FILE: arch/frv/kernel/irq.c:1:
+/* irq.c: FRV IRQ handling

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#972: FILE: arch/frv/kernel/irq.c:36:
+#include <asm/atomic.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#973: FILE: arch/frv/kernel/irq.c:37:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#974: FILE: arch/frv/kernel/irq.c:38:
+#include <asm/smp.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#976: FILE: arch/frv/kernel/irq.c:40:
+#include <asm/bitops.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#977: FILE: arch/frv/kernel/irq.c:41:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/delay.h> instead of <asm/delay.h>
#979: FILE: arch/frv/kernel/irq.c:43:
+#include <asm/delay.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#986: FILE: arch/frv/kernel/irq.c:50:
+extern void __init route_mb93493_irqs(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#988: FILE: arch/frv/kernel/irq.c:52:
+static void register_irq_proc (unsigned int irq);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1008: FILE: arch/frv/kernel/irq.c:72:
+	i = *(loff_t *) v;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1012: FILE: arch/frv/kernel/irq.c:76:
+		seq_printf(p, "           ");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1013: FILE: arch/frv/kernel/irq.c:77:
+		for (j = 0; j < NR_CPUS; j++)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1015: FILE: arch/frv/kernel/irq.c:79:
+				seq_printf(p, "CPU%d       ",j);
 				                            ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1038: FILE: arch/frv/kernel/irq.c:102:
+		for (j = 0; j < NR_CPUS; j++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1067: FILE: arch/frv/kernel/irq.c:131:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1097: FILE: arch/frv/kernel/irq.c:161:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1101: FILE: arch/frv/kernel/irq.c:165:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1165: FILE: arch/frv/kernel/irq.c:229:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1169: FILE: arch/frv/kernel/irq.c:233:
+		BUG();

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1189: FILE: arch/frv/kernel/irq.c:253:
+		/* fall-through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1196: FILE: arch/frv/kernel/irq.c:260:
+		printk("enable_irq(%u) unbalanced from %p\n", irq, __builtin_return_address(0));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'enable_irq', this function's name, in a string
#1196: FILE: arch/frv/kernel/irq.c:260:
+		printk("enable_irq(%u) unbalanced from %p\n", irq, __builtin_return_address(0));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1222: FILE: arch/frv/kernel/irq.c:286:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#1225: FILE: arch/frv/kernel/irq.c:289:
+		*(volatile u32 *) 0xe1200004 = ~((irqcount++ << 8) | level);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1225: FILE: arch/frv/kernel/irq.c:289:
+		*(volatile u32 *) 0xe1200004 = ~((irqcount++ << 8) | level);

CHECK:SPACING: No space is necessary after a cast
#1226: FILE: arch/frv/kernel/irq.c:290:
+		*(volatile u16 *) 0xffc00100 = (u16) ~0x9999;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1226: FILE: arch/frv/kernel/irq.c:290:
+		*(volatile u16 *) 0xffc00100 = (u16) ~0x9999;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1227: FILE: arch/frv/kernel/irq.c:291:
+		mb();

CHECK:SPACING: No space is necessary after a cast
#1231: FILE: arch/frv/kernel/irq.c:295:
+	if ((unsigned long) __frame - (unsigned long) (current + 1) < 512)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1232: FILE: arch/frv/kernel/irq.c:296:
+		BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->need_resched == 0'
#1257: FILE: arch/frv/kernel/irq.c:321:
+		if (!(__frame->psr & PSR_S)
+		    || (current->need_resched == 0)
+		    || in_interrupt())

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1258: FILE: arch/frv/kernel/irq.c:322:
+		if (!(__frame->psr & PSR_S)
+		    || (current->need_resched == 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1259: FILE: arch/frv/kernel/irq.c:323:
+		    || (current->need_resched == 0)
+		    || in_interrupt())

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1268: FILE: arch/frv/kernel/irq.c:332:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#1270: FILE: arch/frv/kernel/irq.c:334:
+		*(volatile u16 *) 0xffc00100 = (u16) ~0x6666;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1270: FILE: arch/frv/kernel/irq.c:334:
+		*(volatile u16 *) 0xffc00100 = (u16) ~0x6666;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1271: FILE: arch/frv/kernel/irq.c:335:
+		mb();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1322: FILE: arch/frv/kernel/irq.c:386:
+		const char * devname,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1328: FILE: arch/frv/kernel/irq.c:392:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1337: FILE: arch/frv/kernel/irq.c:401:
+			printk("Bad boy: %s (at 0x%x) called us without a dev_id!\n",

CHECK:SPACING: No space is necessary after a cast
#1347: FILE: arch/frv/kernel/irq.c:411:
+	action = (struct irqaction *) kmalloc(sizeof(struct irqaction), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1347: FILE: arch/frv/kernel/irq.c:411:
+	action = (struct irqaction *) kmalloc(sizeof(struct irqaction), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*action)...) over kmalloc(sizeof(struct irqaction)...)
#1347: FILE: arch/frv/kernel/irq.c:411:
+	action = (struct irqaction *) kmalloc(sizeof(struct irqaction), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1395: FILE: arch/frv/kernel/irq.c:459:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1399: FILE: arch/frv/kernel/irq.c:463:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1423: FILE: arch/frv/kernel/irq.c:487:
+		spin_unlock_irqrestore(&level->lock,flags);
 		                                   ^

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#1499: FILE: arch/frv/kernel/irq.c:563:
+ *	BUGS: When used in a module (which arguably shouldnt happen)
   	                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1521: FILE: arch/frv/kernel/irq.c:585:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1525: FILE: arch/frv/kernel/irq.c:589:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1553: FILE: arch/frv/kernel/irq.c:617:
+		spin_unlock_irqrestore(&level->lock,flags);
 		                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1579: FILE: arch/frv/kernel/irq.c:643:
+static struct proc_dir_entry * root_irq_dir;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1580: FILE: arch/frv/kernel/irq.c:644:
+static struct proc_dir_entry * irq_dir [NR_IRQS];

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1580: FILE: arch/frv/kernel/irq.c:644:
+static struct proc_dir_entry * irq_dir [NR_IRQS];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1584: FILE: arch/frv/kernel/irq.c:648:
+static unsigned int parse_hex_value (const char *buffer,

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1587: FILE: arch/frv/kernel/irq.c:651:
+	unsigned char hexnum [HEX_DIGITS];

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1607: FILE: arch/frv/kernel/irq.c:671:
+		switch (c) {
+			case '0' ... '9': c -= '0'; break;
+			case 'a' ... 'f': c -= 'a'-10; break;
+			case 'A' ... 'F': c -= 'A'-10; break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1608: FILE: arch/frv/kernel/irq.c:672:
+			case '0' ... '9': c -= '0'; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1609: FILE: arch/frv/kernel/irq.c:673:
+			case 'a' ... 'f': c -= 'a'-10; break;
 			                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1609: FILE: arch/frv/kernel/irq.c:673:
+			case 'a' ... 'f': c -= 'a'-10; break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1610: FILE: arch/frv/kernel/irq.c:674:
+			case 'A' ... 'F': c -= 'A'-10; break;
 			                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1610: FILE: arch/frv/kernel/irq.c:674:
+			case 'A' ... 'F': c -= 'A'-10; break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1621: FILE: arch/frv/kernel/irq.c:685:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1622: FILE: arch/frv/kernel/irq.c:686:
+static int prof_cpu_mask_read_proc (char *page, char **start, off_t off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1623: FILE: arch/frv/kernel/irq.c:687:
+static int prof_cpu_mask_read_proc (char *page, char **start, off_t off,
+			int count, int *eof, void *data)

CHECK:SPACING: No space is necessary after a cast
#1625: FILE: arch/frv/kernel/irq.c:689:
+	unsigned long *mask = (unsigned long *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1626: FILE: arch/frv/kernel/irq.c:690:
+	unsigned long *mask = (unsigned long *) data;
+	if (count < HEX_DIGITS+1)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1626: FILE: arch/frv/kernel/irq.c:690:
+	if (count < HEX_DIGITS+1)
 	                      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1628: FILE: arch/frv/kernel/irq.c:692:
+	return sprintf (page, "%08lx\n", *mask);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1631: FILE: arch/frv/kernel/irq.c:695:
+static int prof_cpu_mask_write_proc (struct file *file, const char *buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1632: FILE: arch/frv/kernel/irq.c:696:
+static int prof_cpu_mask_write_proc (struct file *file, const char *buffer,
+					unsigned long count, void *data)

CHECK:SPACING: No space is necessary after a cast
#1634: FILE: arch/frv/kernel/irq.c:698:
+	unsigned long *mask = (unsigned long *) data, full_count = count, err;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1648: FILE: arch/frv/kernel/irq.c:712:
+static void register_irq_proc (unsigned int irq)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1650: FILE: arch/frv/kernel/irq.c:714:
+	char name [MAX_NAMELEN];

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1664: FILE: arch/frv/kernel/irq.c:728:
+void init_irq_proc (void)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1674: FILE: arch/frv/kernel/irq.c:738:
+	if (!entry)
+	    return;

WARNING:TABSTOP: Statements should start on a tabstop
#1675: FILE: arch/frv/kernel/irq.c:739:
+	    return;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1705: FILE: arch/frv/kernel/irq-mb93091.c:1:
+/* irq-mb93091.c: MB93091 FPGA interrupt handling

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1726: FILE: arch/frv/kernel/irq-mb93091.c:22:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#1728: FILE: arch/frv/kernel/irq-mb93091.c:24:
+#include <asm/bitops.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/delay.h> instead of <asm/delay.h>
#1729: FILE: arch/frv/kernel/irq-mb93091.c:25:
+#include <asm/delay.h>

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1734: FILE: arch/frv/kernel/irq-mb93091.c:30:
+#define __reg16(ADDR) (*(volatile unsigned short *)(ADDR))

ERROR:SPACING: space required before the open parenthesis '('
#1737: FILE: arch/frv/kernel/irq-mb93091.c:33:
+#define __set_IMR(M)	do { __reg16(0xffc00004) = (M); wmb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1737: FILE: arch/frv/kernel/irq-mb93091.c:33:
+#define __set_IMR(M)	do { __reg16(0xffc00004) = (M); wmb(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1739: FILE: arch/frv/kernel/irq-mb93091.c:35:
+#define __clr_IFR(M)	do { __reg16(0xffc0000c) = ~(M); wmb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1739: FILE: arch/frv/kernel/irq-mb93091.c:35:
+#define __clr_IFR(M)	do { __reg16(0xffc0000c) = ~(M); wmb(); } while(0)

ERROR:SPACING: space prohibited after that open square bracket '['
#1766: FILE: arch/frv/kernel/irq-mb93091.c:62:
+		[ 1] = &frv_fpga[3],

ERROR:SPACING: space prohibited after that open square bracket '['
#1767: FILE: arch/frv/kernel/irq-mb93091.c:63:
+		[ 2] = &frv_fpga[3],

ERROR:SPACING: space prohibited after that open square bracket '['
#1768: FILE: arch/frv/kernel/irq-mb93091.c:64:
+		[ 3] = &frv_fpga[0],

ERROR:SPACING: space prohibited after that open square bracket '['
#1769: FILE: arch/frv/kernel/irq-mb93091.c:65:
+		[ 4] = &frv_fpga[1],

ERROR:SPACING: space prohibited after that open square bracket '['
#1770: FILE: arch/frv/kernel/irq-mb93091.c:66:
+		[ 5] = &frv_fpga[0],

ERROR:SPACING: space prohibited after that open square bracket '['
#1771: FILE: arch/frv/kernel/irq-mb93091.c:67:
+		[ 6] = &frv_fpga[1],

ERROR:SPACING: space prohibited after that open square bracket '['
#1772: FILE: arch/frv/kernel/irq-mb93091.c:68:
+		[ 7] = &frv_fpga[3],

ERROR:SPACING: space prohibited after that open square bracket '['
#1773: FILE: arch/frv/kernel/irq-mb93091.c:69:
+		[ 8] = &frv_fpga[3],

ERROR:SPACING: space prohibited after that open square bracket '['
#1774: FILE: arch/frv/kernel/irq-mb93091.c:70:
+		[ 9] = &frv_fpga[3],

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1783: FILE: arch/frv/kernel/irq-mb93091.c:79:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1786: FILE: arch/frv/kernel/irq-mb93091.c:82:
+	uint16_t imr = __get_IMR();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1798: FILE: arch/frv/kernel/irq-mb93091.c:94:
+	uint16_t mask, imr;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1825: FILE: arch/frv/kernel/irq-mb93093.c:1:
+/* irq-mb93093.c: MB93093 FPGA interrupt handling

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1846: FILE: arch/frv/kernel/irq-mb93093.c:22:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#1848: FILE: arch/frv/kernel/irq-mb93093.c:24:
+#include <asm/bitops.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/delay.h> instead of <asm/delay.h>
#1849: FILE: arch/frv/kernel/irq-mb93093.c:25:
+#include <asm/delay.h>

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1854: FILE: arch/frv/kernel/irq-mb93093.c:30:
+#define __reg16(ADDR) (*(volatile unsigned short *)(__region_CS2 + (ADDR)))

ERROR:SPACING: space required before the open parenthesis '('
#1857: FILE: arch/frv/kernel/irq-mb93093.c:33:
+#define __set_IMR(M)	do { __reg16(0x0a) = (M);  wmb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1857: FILE: arch/frv/kernel/irq-mb93093.c:33:
+#define __set_IMR(M)	do { __reg16(0x0a) = (M);  wmb(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1859: FILE: arch/frv/kernel/irq-mb93093.c:35:
+#define __clr_IFR(M)	do { __reg16(0x02) = ~(M); wmb(); } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1859: FILE: arch/frv/kernel/irq-mb93093.c:35:
+#define __clr_IFR(M)	do { __reg16(0x02) = ~(M); wmb(); } while(0)

ERROR:SPACING: space prohibited after that open square bracket '['
#1883: FILE: arch/frv/kernel/irq-mb93093.c:59:
+		[ 8] = &frv_fpga[0],

ERROR:SPACING: space prohibited after that open square bracket '['
#1884: FILE: arch/frv/kernel/irq-mb93093.c:60:
+		[ 9] = &frv_fpga[0],

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1889: FILE: arch/frv/kernel/irq-mb93093.c:65:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1892: FILE: arch/frv/kernel/irq-mb93093.c:68:
+	uint16_t imr = __get_IMR();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1904: FILE: arch/frv/kernel/irq-mb93093.c:80:
+	uint16_t mask, imr;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1928: FILE: arch/frv/kernel/irq-mb93493.c:1:
+/* irq-mb93493.c: MB93493 companion chip interrupt handler

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1949: FILE: arch/frv/kernel/irq-mb93493.c:22:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#1951: FILE: arch/frv/kernel/irq-mb93493.c:24:
+#include <asm/bitops.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/delay.h> instead of <asm/delay.h>
#1952: FILE: arch/frv/kernel/irq-mb93493.c:25:
+#include <asm/delay.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1982: FILE: arch/frv/kernel/irq-mb93493.c:55:
+	uint32_t iqsr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2005: FILE: arch/frv/kernel/irq-mb93493.c:78:
+	uint32_t mask = readl(source->muxdata);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2006: FILE: arch/frv/kernel/irq-mb93493.c:79:
+	uint32_t mask = readl(source->muxdata);
+	mask = mask & (mask >> 16) & 0xffff;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2040: FILE: arch/frv/kernel/irq-routing.c:1:
+/* irq-routing.c: IRQ routing

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#2055: FILE: arch/frv/kernel/irq-routing.c:16:
+#include <asm/io.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2069: FILE: arch/frv/kernel/irq-routing.c:30:
+extern struct irq_group frv_cpu_irqs;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2083: FILE: arch/frv/kernel/irq-routing.c:44:
+	case IRQ_CPU_EXTERNAL0:	irqlevel = IRQ_XIRQ0_LEVEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2084: FILE: arch/frv/kernel/irq-routing.c:45:
+	case IRQ_CPU_EXTERNAL1:	irqlevel = IRQ_XIRQ1_LEVEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2085: FILE: arch/frv/kernel/irq-routing.c:46:
+	case IRQ_CPU_EXTERNAL2:	irqlevel = IRQ_XIRQ2_LEVEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2086: FILE: arch/frv/kernel/irq-routing.c:47:
+	case IRQ_CPU_EXTERNAL3:	irqlevel = IRQ_XIRQ3_LEVEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2087: FILE: arch/frv/kernel/irq-routing.c:48:
+	case IRQ_CPU_EXTERNAL4:	irqlevel = IRQ_XIRQ4_LEVEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2088: FILE: arch/frv/kernel/irq-routing.c:49:
+	case IRQ_CPU_EXTERNAL5:	irqlevel = IRQ_XIRQ5_LEVEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2089: FILE: arch/frv/kernel/irq-routing.c:50:
+	case IRQ_CPU_EXTERNAL6:	irqlevel = IRQ_XIRQ6_LEVEL; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2090: FILE: arch/frv/kernel/irq-routing.c:51:
+	case IRQ_CPU_EXTERNAL7:	irqlevel = IRQ_XIRQ7_LEVEL; break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2091: FILE: arch/frv/kernel/irq-routing.c:52:
+	default: BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2091: FILE: arch/frv/kernel/irq-routing.c:52:
+	default: BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2101: FILE: arch/frv/kernel/irq-routing.c:62:
+^Iirq_groups[group->first_irq >> NR_IRQ_LOG2_ACTIONS_PER_GROUP] = group; $

CHECK:SPACING: No space is necessary after a cast
#2154: FILE: arch/frv/kernel/irq-routing.c:115:
+		.muxdata	= (volatile void __iomem *) A,	\

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2154: FILE: arch/frv/kernel/irq-routing.c:115:
+		.muxdata	= (volatile void __iomem *) A,	\

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CSTRx>
#2169: FILE: arch/frv/kernel/irq-routing.c:130:
+	uint32_t cstr = readl(source->muxdata + DMAC_CSTRx);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2169: FILE: arch/frv/kernel/irq-routing.c:130:
+	uint32_t cstr = readl(source->muxdata + DMAC_CSTRx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2170: FILE: arch/frv/kernel/irq-routing.c:131:
+	uint32_t cstr = readl(source->muxdata + DMAC_CSTRx);
+	if (cstr & DMAC_CSTRx_INT)

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CSTRx_INT>
#2170: FILE: arch/frv/kernel/irq-routing.c:131:
+	if (cstr & DMAC_CSTRx_INT)

CHECK:SPACING: No space is necessary after a cast
#2178: FILE: arch/frv/kernel/irq-routing.c:139:
+		.muxdata	= (volatile void __iomem *) A,	\

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2178: FILE: arch/frv/kernel/irq-routing.c:139:
+		.muxdata	= (volatile void __iomem *) A,	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))
                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'A' may be better as '(A)' to avoid precedence issues
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'B' may be better as '(B)' to avoid precedence issues
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'C' may be better as '(C)' to avoid precedence issues
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'D' may be better as '(D)' to avoid precedence issues
#2244: FILE: arch/frv/kernel/irq-routing.c:205:
+#define set_IRR(N,A,B,C,D) __set_IRR(N, (A << 28) | (B << 24) | (C << 20) | (D << 16))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2335: FILE: arch/frv/kernel/kernel_thread.S:1:
+/* kernel_thread.S: kernel thread creation

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2416: FILE: arch/frv/kernel/local.h:1:
+/* local.h: local definitions

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2437: FILE: arch/frv/kernel/local.h:22:
+extern void frv_dma_pause_all(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2438: FILE: arch/frv/kernel/local.h:23:
+extern void frv_dma_resume_all(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2446: FILE: arch/frv/kernel/local.h:31:
+extern void determine_clocks(int verbose);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2467: FILE: arch/frv/kernel/local.h:52:
+extern void time_divisor_init(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2469: FILE: arch/frv/kernel/local.h:54:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2502: FILE: arch/frv/kernel/pm.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2523: FILE: arch/frv/kernel/pm.c:22:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2531: FILE: arch/frv/kernel/pm.c:30:
+extern void frv_change_cmode(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2531: FILE: arch/frv/kernel/pm.c:30:
+extern void frv_change_cmode(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CODE_INDENT: code indent should use tabs where possible
#2591: FILE: arch/frv/kernel/pm.c:90:
+         * Here is where we need some platform-dependent setup$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#2612: FILE: arch/frv/kernel/pm.c:111:
+         * Here is where we need some platform-dependent restore$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2650: FILE: arch/frv/kernel/pm.c:149:
+	ret = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2659: FILE: arch/frv/kernel/pm.c:158:
+static int sysctl_pm_do_suspend(ctl_table *ctl, int write, struct file *filp,
                                                                         ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mode != 1'
#2668: FILE: arch/frv/kernel/pm.c:167:
+	if ((mode != 1) && (mode != 5))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mode != 5'
#2668: FILE: arch/frv/kernel/pm.c:167:
+	if ((mode != 1) && (mode != 5))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2674: FILE: arch/frv/kernel/pm.c:173:
+		if (mode == 5)
+		    retval = pm_do_bus_sleep();

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2676: FILE: arch/frv/kernel/pm.c:175:
+		else
+		    retval = pm_do_suspend();

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2688: FILE: arch/frv/kernel/pm.c:187:
+	if (!(clock_cmodes_permitted & (1<<new_cmode)))
 	                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2714: FILE: arch/frv/kernel/pm.c:213:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2715: FILE: arch/frv/kernel/pm.c:214:
+static int cmode_procctl(ctl_table *ctl, int write, struct file *filp,
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2721: FILE: arch/frv/kernel/pm.c:220:
+		return proc_dointvec(ctl, write, filp, buffer, lenp, fpos);
 		                                 ^^^^

ERROR:SPACING: spaces required around that '?:' (ctx:VxO)
#2725: FILE: arch/frv/kernel/pm.c:224:
+	return try_set_cmode(new_cmode)?:*lenp;
 	                               ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#2725: FILE: arch/frv/kernel/pm.c:224:
+	return try_set_cmode(new_cmode)?:*lenp;
 	                                 ^

CHECK:SPACING: spaces required around that '?:' (ctx:VxV)
#2754: FILE: arch/frv/kernel/pm.c:253:
+		return try_set_cmode(new_cmode)?:1;
 		                               ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#2809: FILE: arch/frv/kernel/pm.c:308:
+#if 1 //def DEBUG

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2818: FILE: arch/frv/kernel/pm.c:317:
+static int p0_procctl(ctl_table *ctl, int write, struct file *filp,
                                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2824: FILE: arch/frv/kernel/pm.c:323:
+		return proc_dointvec(ctl, write, filp, buffer, lenp, fpos);
 		                                 ^^^^

ERROR:SPACING: spaces required around that '?:' (ctx:VxO)
#2828: FILE: arch/frv/kernel/pm.c:327:
+	return try_set_p0(new_p0)?:*lenp;
 	                         ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#2828: FILE: arch/frv/kernel/pm.c:327:
+	return try_set_p0(new_p0)?:*lenp;
 	                           ^

CHECK:SPACING: spaces required around that '?:' (ctx:VxV)
#2857: FILE: arch/frv/kernel/pm.c:356:
+		return try_set_p0(new_p0)?:1;
 		                         ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2862: FILE: arch/frv/kernel/pm.c:361:
+static int cm_procctl(ctl_table *ctl, int write, struct file *filp,
                                                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2868: FILE: arch/frv/kernel/pm.c:367:
+		return proc_dointvec(ctl, write, filp, buffer, lenp, fpos);
 		                                 ^^^^

ERROR:SPACING: spaces required around that '?:' (ctx:VxO)
#2872: FILE: arch/frv/kernel/pm.c:371:
+	return try_set_cm(new_cm)?:*lenp;
 	                         ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#2872: FILE: arch/frv/kernel/pm.c:371:
+	return try_set_cm(new_cm)?:*lenp;
 	                           ^

CHECK:SPACING: spaces required around that '?:' (ctx:VxV)
#2901: FILE: arch/frv/kernel/pm.c:400:
+		return try_set_cm(new_cm)?:1;
 		                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2906: FILE: arch/frv/kernel/pm.c:405:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2908: FILE: arch/frv/kernel/pm.c:407:
+static struct ctl_table pm_table[] =
+{

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#2910: FILE: arch/frv/kernel/pm.c:409:
+	{CTL_PM_CMODE, "cmode", &clock_cmode_current, sizeof(int), 0644, NULL, &cmode_procctl, &cmode_sysctl, NULL},

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2911: FILE: arch/frv/kernel/pm.c:410:
+	{CTL_PM_P0, "p0", &clock_p0_current, sizeof(int), 0644, NULL, &p0_procctl, &p0_sysctl, NULL},

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2912: FILE: arch/frv/kernel/pm.c:411:
+	{CTL_PM_CM, "cm", &clock_cm_current, sizeof(int), 0644, NULL, &cm_procctl, &cm_sysctl, NULL},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2917: FILE: arch/frv/kernel/pm.c:416:
+static struct ctl_table pm_dir_table[] =
+{

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2931: FILE: arch/frv/kernel/pm.c:430:
+__initcall(pm_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2938: FILE: arch/frv/kernel/pm-mb93093.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2958: FILE: arch/frv/kernel/pm-mb93093.c:21:
+#include <asm/uaccess.h>

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2971: FILE: arch/frv/kernel/pm-mb93093.c:34:
+	imask = *(volatile unsigned long *)0xfeff9820;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2972: FILE: arch/frv/kernel/pm-mb93093.c:35:
+	*(volatile unsigned long *)0xfeff9820 = ~(1 << (IRQ_XIRQ2_LEVEL + 16)) & 0xfffe0000;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2980: FILE: arch/frv/kernel/pm-mb93093.c:43:
+	*(volatile unsigned long *)0xfeff9820 = imask;

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#3002: FILE: arch/frv/kernel/pm-mb93093.c:65:
+__initcall(mb93093_pm_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3008: FILE: arch/frv/kernel/process.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#3038: FILE: arch/frv/kernel/process.c:31:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#3041: FILE: arch/frv/kernel/process.c:34:
+#include <asm/pgtable.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#3054: FILE: arch/frv/kernel/process.c:47:
+	struct task_struct *p = kmalloc(THREAD_SIZE, GFP_KERNEL);
+	if (p)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3055: FILE: arch/frv/kernel/process.c:48:
+		atomic_set((atomic_t *)(p+1), 1);
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3061: FILE: arch/frv/kernel/process.c:54:
+	if (atomic_dec_and_test((atomic_t *)(p+1)))
 	                                      ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#3076: FILE: arch/frv/kernel/process.c:69:
+	mb();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3102: FILE: arch/frv/kernel/process.c:95:
+void machine_restart(char * __unused)

WARNING:SPLIT_STRING: quoted string split across lines
#3110: FILE: arch/frv/kernel/process.c:103:
+	asm volatile("      dcef @(gr0,gr0),1 ! membar !"
+		     "      sti     %1,@(%0,0) !"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#3111: FILE: arch/frv/kernel/process.c:104:
+		     "      sti     %1,@(%0,0) !"
+		     "      nop ! nop ! nop ! nop ! nop ! "

WARNING:SPLIT_STRING: quoted string split across lines
#3112: FILE: arch/frv/kernel/process.c:105:
+		     "      nop ! nop ! nop ! nop ! nop ! "
+		     "      nop ! nop ! nop ! nop ! nop ! "

WARNING:SPLIT_STRING: quoted string split across lines
#3113: FILE: arch/frv/kernel/process.c:106:
+		     "      nop ! nop ! nop ! nop ! nop ! "
+		     "      nop ! nop ! nop ! nop ! nop ! "

WARNING:SPLIT_STRING: quoted string split across lines
#3114: FILE: arch/frv/kernel/process.c:107:
+		     "      nop ! nop ! nop ! nop ! nop ! "
+		     "      nop ! nop ! nop ! nop ! nop ! "

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3115: FILE: arch/frv/kernel/process.c:108:
+		     : : "r" (0xfeff0500), "r" (1) );

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3127: FILE: arch/frv/kernel/process.c:120:
+	for (;;);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#3136: FILE: arch/frv/kernel/process.c:129:
+	for (;;);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3141: FILE: arch/frv/kernel/process.c:134:
+#if 0 //ndef NO_FPU

CHECK:SPACING: No space is necessary after a cast
#3206: FILE: arch/frv/kernel/process.c:199:
+		((unsigned long) p->thread_info + THREAD_SIZE - USER_CONTEXT_SIZE);

CHECK:SPACING: No space is necessary after a cast
#3220: FILE: arch/frv/kernel/process.c:213:
+		childregs->sp = (unsigned long) childregs0;

CHECK:SPACING: No space is necessary after a cast
#3222: FILE: arch/frv/kernel/process.c:215:
+		childregs->gr15 = (unsigned long) p->thread_info;

CHECK:SPACING: No space is necessary after a cast
#3223: FILE: arch/frv/kernel/process.c:216:
+		childregs->gr29 = (unsigned long) p;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3226: FILE: arch/frv/kernel/process.c:219:
+	p->set_child_tid = p->clear_child_tid = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#3230: FILE: arch/frv/kernel/process.c:223:
+	p->thread.sp	 = (unsigned long) childregs;

CHECK:SPACING: No space is necessary after a cast
#3233: FILE: arch/frv/kernel/process.c:226:
+	p->thread.pc	 = (unsigned long) ret_from_fork;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3250: FILE: arch/frv/kernel/process.c:243:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#3255: FILE: arch/frv/kernel/process.c:248:
+	dump->u_tsize = ((unsigned long) current->mm->end_code) >> PAGE_SHIFT;

CHECK:SPACING: No space is necessary after a cast
#3256: FILE: arch/frv/kernel/process.c:249:
+	dump->u_dsize = ((unsigned long) (current->mm->brk + (PAGE_SIZE-1))) >> PAGE_SHIFT;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3256: FILE: arch/frv/kernel/process.c:249:
+	dump->u_dsize = ((unsigned long) (current->mm->brk + (PAGE_SIZE-1))) >> PAGE_SHIFT;
 	                                                               ^

CHECK:SPACING: No space is necessary after a cast
#3261: FILE: arch/frv/kernel/process.c:254:
+		dump->u_ssize = ((unsigned long) (TASK_SIZE - dump->start_stack)) >> PAGE_SHIFT;

CHECK:SPACING: No space is necessary after a cast
#3263: FILE: arch/frv/kernel/process.c:256:
+	dump->regs = *(struct user_context *) regs;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3273: FILE: arch/frv/kernel/process.c:266:
+	char * filename;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3293: FILE: arch/frv/kernel/process.c:286:
+	int count = 0;
+	if (!p || p == current || p->state == TASK_RUNNING)

CHECK:SPACING: No space is necessary after a cast
#3296: FILE: arch/frv/kernel/process.c:289:
+	stack_limit = (unsigned long) (p + 1);

CHECK:SPACING: No space is necessary after a cast
#3301: FILE: arch/frv/kernel/process.c:294:
+		if (fp < stack_limit || fp >= (unsigned long) regs0 || fp & 3)

CHECK:SPACING: No space is necessary after a cast
#3304: FILE: arch/frv/kernel/process.c:297:
+		pc = ((unsigned long *) fp)[2];

CHECK:SPACING: No space is necessary after a cast
#3310: FILE: arch/frv/kernel/process.c:303:
+		fp = *(unsigned long *) fp;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 64 errors, 98 warnings, 90 checks, 3286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
