WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
The attached patch adds support for using cpuid(4) instead of cpuid(2), to get 

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: include/asm-i386/processor.h:152:
+^I       ^Iint *edx)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#61: FILE: include/asm-i386/processor.h:152:
+^I       ^Iint *edx)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: include/asm-i386/processor.h:152:
+static inline void cpuid_count(int op, int count, int *eax, int *ebx, int *ecx,
+	       	int *edx)

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: include/asm-x86_64/msr.h:83:
+^I       ^Iint *edx)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#82: FILE: include/asm-x86_64/msr.h:83:
+^I       ^Iint *edx)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: include/asm-x86_64/msr.h:83:
+static inline void cpuid_count(int op, int count, int *eax, int *ebx, int *ecx,
+	       	int *edx)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'indentify' may be misspelled - perhaps 'identify'?
#99: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:2:
+ *      Routines to indentify caches on Intel CPU.
                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#111: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:14:
+#include <asm/smp.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:73:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#121: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:75:
+enum _cache_type
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:146:
+^Iint ^I^I^Ii;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:147:
+^Iint ^I^I^Iretval;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:178:
+^I^I * Whenever possible use cpuid(4), deterministic cache $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#234: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:188:
+				switch(this_leaf.eax.split.level) {
+				    case 1:
[...]
+				    case 2:
[...]
+				    case 3:
[...]
+				    default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#234: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:188:
+				switch(this_leaf.eax.split.level) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#235: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:189:
+				    case 1:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:190:
+^I^I^I^I^Iif (this_leaf.eax.split.type == $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#238: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:192:
+						new_l1d = this_leaf.size/1024;
 						                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:193:
+^I^I^I^I^Ielse if (this_leaf.eax.split.type == $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#241: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:195:
+						new_l1i = this_leaf.size/1024;
 						                        ^

WARNING:TABSTOP: Statements should start on a tabstop
#243: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:197:
+				    case 2:

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#244: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:198:
+					new_l2 = this_leaf.size/1024;
 					                       ^

WARNING:TABSTOP: Statements should start on a tabstop
#246: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:200:
+				    case 3:

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#247: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:201:
+					new_l3 = this_leaf.size/1024;
 					                       ^

WARNING:TABSTOP: Statements should start on a tabstop
#249: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:203:
+				    default:

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:308:
+#define CPUID4_INFO_IDX(x,y)    (&((cpuid4_info[x])[y]))
                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:310:
+/* pointer to kobject for cpuX/cache */ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:311:
+static struct kobject * cache_kobject[NR_CPUS];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:319:
+/* pointer to array of kobjects for cpuX/cache/indexY */ $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:321:
+#define INDEX_KOBJECT_PTR(x,y)    (&((index_kobject[x])[y]))
                            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'object' may be better as '(object)' to avoid precedence issues
#307: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:323:
+#define show_one_plus(file_name, object, val)				\
+static ssize_t show_##file_name						\
+			(struct _cpuid4_info *this_leaf, char *buf)	\
+{									\
+	return sprintf (buf, "%lu\n", (unsigned long)this_leaf->object + val); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#307: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:323:
+#define show_one_plus(file_name, object, val)				\
+static ssize_t show_##file_name						\
+			(struct _cpuid4_info *this_leaf, char *buf)	\
+{									\
+	return sprintf (buf, "%lu\n", (unsigned long)this_leaf->object + val); \
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:327:
+	return sprintf (buf, "%lu\n", (unsigned long)this_leaf->object + val); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:336:
+static ssize_t show_size (struct _cpuid4_info *this_leaf, char *buf)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#322: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:338:
+	return sprintf (buf, "%luK\n", this_leaf->size / 1024);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#325: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:341:
+static ssize_t show_shared_cpu_map (struct _cpuid4_info *this_leaf, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:344:
+	char mask_str[NR_CPUS];
+	cpumask_scnprintf(mask_str, NR_CPUS, this_leaf->shared_cpu_map);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#328: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:344:
+	cpumask_scnprintf(mask_str, NR_CPUS, this_leaf->shared_cpu_map);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#329: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:345:
+	return sprintf (buf, "%s\n", mask_str);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#332: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:348:
+static ssize_t show_type (struct _cpuid4_info *this_leaf, char *buf) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#332: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:348:
+static ssize_t show_type (struct _cpuid4_info *this_leaf, char *buf) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#333: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:349:
+	switch(this_leaf->eax.split.type) {
+	    case CACHE_TYPE_DATA:
[...]
+	    case CACHE_TYPE_INST:
[...]
+	    case CACHE_TYPE_UNIFIED:
[...]
+	    default:

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:349:
+	switch(this_leaf->eax.split.type) {

WARNING:TABSTOP: Statements should start on a tabstop
#334: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:350:
+	    case CACHE_TYPE_DATA:

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#335: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:351:
+		return sprintf (buf, "Data\n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#336: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:352:
+		return sprintf (buf, "Data\n");
+		break;

WARNING:TABSTOP: Statements should start on a tabstop
#337: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:353:
+	    case CACHE_TYPE_INST:

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#338: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:354:
+		return sprintf (buf, "Instruction\n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#339: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:355:
+		return sprintf (buf, "Instruction\n");
+		break;

WARNING:TABSTOP: Statements should start on a tabstop
#340: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:356:
+	    case CACHE_TYPE_UNIFIED:

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#341: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:357:
+		return sprintf (buf, "Unified\n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#342: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:358:
+		return sprintf (buf, "Unified\n");
+		break;

WARNING:TABSTOP: Statements should start on a tabstop
#343: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:359:
+	    default:

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#344: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:360:
+		return sprintf (buf, "Unknown\n");

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#345: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:361:
+		return sprintf (buf, "Unknown\n");
+		break;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct _cpuid4_info *' should also have an identifier name
#351: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:367:
+	ssize_t (*show)(struct _cpuid4_info *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#351: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:367:
+	ssize_t (*show)(struct _cpuid4_info *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct _cpuid4_info *' should also have an identifier name
#352: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:368:
+	ssize_t (*store)(struct _cpuid4_info *, const char *, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#352: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:368:
+	ssize_t (*store)(struct _cpuid4_info *, const char *, size_t count);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#355: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:371:
+#define define_one_ro(_name) \
+static struct _cache_attr _name = \
+	__ATTR(_name, 0444, show_##_name, NULL)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:384:
+static struct attribute * default_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:399:
+static ssize_t show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:399:
+static ssize_t show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:399:
+static ssize_t show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:405:
+^Iret = fattr->show ? $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:406:
+^I^Ifattr->show(CPUID4_INFO_IDX(this_leaf->cpu, this_leaf->index), $

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:408:
+^I       ^I0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#392: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:408:
+^I       ^I0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:412:
+static ssize_t store(struct kobject * kobj, struct attribute * attr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#396: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:412:
+static ssize_t store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#396: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:412:
+static ssize_t store(struct kobject * kobj, struct attribute * attr, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#397: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:413:
+		     const char * buf, size_t count)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#402: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:418:
+static struct sysfs_ops sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#430: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:446:
+		printk(KERN_INFO "Number of CPUs sharing cache didn't match "

WARNING:SPLIT_STRING: quoted string split across lines
#431: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:447:
+		printk(KERN_INFO "Number of CPUs sharing cache didn't match "
+				"any known set of CPUs\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:456:
+^Iunsigned long ^I^Ii, j;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#441: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:457:
+^Iint ^I^I^Iretval;$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#447: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:463:
+	cpuid4_info[cpu] = (struct _cpuid4_info *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#447: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:463:
+	cpuid4_info[cpu] = (struct _cpuid4_info *)kmalloc(

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#447: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:463:
+	cpuid4_info[cpu] = (struct _cpuid4_info *)kmalloc(
+	    sizeof(struct _cpuid4_info) * num_cache_leaves, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpuid4_info[cpu]"
#449: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:465:
+	if (unlikely(cpuid4_info[cpu] == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#453: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:469:
+	cache_kobject[cpu] = (struct kobject *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#453: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:469:
+	cache_kobject[cpu] = (struct kobject *)kmalloc(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cache_kobject[cpu]"
#455: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:471:
+	if (unlikely(cache_kobject[cpu] == NULL))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#459: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:475:
+	index_kobject[cpu] = (struct _index_kobject *)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#459: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:475:
+	index_kobject[cpu] = (struct _index_kobject *)kmalloc(

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#459: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:475:
+	index_kobject[cpu] = (struct _index_kobject *)kmalloc(
+	    sizeof(struct _index_kobject ) * num_cache_leaves, GFP_KERNEL);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#460: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:476:
+	    sizeof(struct _index_kobject ) * num_cache_leaves, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!index_kobject[cpu]"
#461: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:477:
+	if (unlikely(index_kobject[cpu] == NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:479:
+^Imemset(index_kobject[cpu], 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:480:
+	memset(index_kobject[cpu], 0, 
+	    sizeof(struct _index_kobject) * num_cache_leaves);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#477: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:493:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#478: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:494:
+		if(cpuid4_info[i])

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#479: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:495:
+		if(cpuid4_info[i])
+			kfree(cpuid4_info[i]);

ERROR:SPACING: space required before the open parenthesis '('
#480: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:496:
+		if(cache_kobject[i])

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#481: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:497:
+		if(cache_kobject[i])
+			kfree(cache_kobject[i]);

ERROR:SPACING: space required before the open parenthesis '('
#482: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:498:
+		if(index_kobject[i])

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#483: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:499:
+		if(index_kobject[i])
+			kfree(index_kobject[i]);

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:511:
+	if(cpuid4_info[i])

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#496: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:512:
+	if(cpuid4_info[i])
+		kfree(cpuid4_info[i]);

ERROR:SPACING: space required before the open parenthesis '('
#497: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:513:
+	if(cache_kobject[i])

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#498: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:514:
+	if(cache_kobject[i])
+		kfree(cache_kobject[i]);

ERROR:SPACING: space required before the open parenthesis '('
#499: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:515:
+	if(index_kobject[i])

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#500: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:516:
+	if(index_kobject[i])
+		kfree(index_kobject[i]);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#509: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:525:
+static int cache_add_dev(struct sys_device * sys_dev)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:542:
+		this_object = INDEX_KOBJECT_PTR(cpu,i);
 		                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around this_object->kobj
#530: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:546:
+		kobject_set_name(&(this_object->kobj), "index%1lu", i);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around this_object->kobj
#532: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:548:
+		retval = kobject_register(&(this_object->kobj));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#535: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:551:
+				kobject_unregister(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#536: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:552:
+					&(INDEX_KOBJECT_PTR(cpu,j)->kobj));
 					                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#546: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:562:
+static int cache_remove_dev(struct sys_device * sys_dev)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#552: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:568:
+		kobject_unregister(&(INDEX_KOBJECT_PTR(cpu,i)->kobj));
 		                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#569: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:585:
+	return sysdev_driver_register(&cpu_sysdev_class,&cache_sysdev_driver);
 	                                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#569: FILE: arch/i386/kernel/cpu/intel_cacheinfo.c:585:
+	return sysdev_driver_register(&cpu_sysdev_class,&cache_sysdev_driver);
 	                                                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198671.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 53 warnings, 21 checks, 511 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198671.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
