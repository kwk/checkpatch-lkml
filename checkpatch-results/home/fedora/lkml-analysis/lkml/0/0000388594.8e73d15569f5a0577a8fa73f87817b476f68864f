WARNING:TYPO_SPELLING: 'coverting' may be misspelled - perhaps 'converting'?
#23: 
coverting a directory to HTREE while an NFS readdir is in progress
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#	           ChangeSet	1.1059  -> 1.1060 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#	       fs/ext3/dir.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
#	     fs/ext3/namei.c	1.36    -> 1.37   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# 03/03/05	tytso@thank.thunk.org	1.1060

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# If the directory contains only one block and directory indexing is 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# enabled, then use ext3_dx_readdir() so that NFS doesn't get confused

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# if the directory gets converted to htree format during the readdir run.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# We use -1 (or ~0) in f_pos and in next_hash to represent EOF in the

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# readdir stream.  This should fix the NFS readdir looping problem.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#52: 
--- a/fs/ext3/dir.c	Wed Mar  5 00:43:28 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: fs/ext3/namei.c:173:
+^I^I^I^I struct dx_frame *frames, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: fs/ext3/namei.c:242:
+static void dx_show_index (char * label, struct dx_entry *entries)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: fs/ext3/namei.c:242:
+static void dx_show_index (char * label, struct dx_entry *entries)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/ext3/namei.c:244:
+        int i, n = dx_get_count (entries);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/ext3/namei.c:244:
+        int i, n = dx_get_count (entries);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#131: FILE: fs/ext3/namei.c:244:
+        int i, n = dx_get_count (entries);

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/ext3/namei.c:245:
+        printk("%s index ", label);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: fs/ext3/namei.c:245:
+        int i, n = dx_get_count (entries);
+        printk("%s index ", label);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/ext3/namei.c:245:
+        printk("%s index ", label);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#132: FILE: fs/ext3/namei.c:245:
+        printk("%s index ", label);

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: fs/ext3/namei.c:246:
+        for (i = 0; i < n; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/ext3/namei.c:246:
+        for (i = 0; i < n; i++)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#133: FILE: fs/ext3/namei.c:246:
+        for (i = 0; i < n; i++)
+        {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: fs/ext3/namei.c:247:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: fs/ext3/namei.c:247:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: fs/ext3/namei.c:248:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: fs/ext3/namei.c:248:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#135: FILE: fs/ext3/namei.c:248:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#135: FILE: fs/ext3/namei.c:248:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));
                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#135: FILE: fs/ext3/namei.c:248:
+                printk("%x->%u ", i? dx_get_hash(entries + i): 0, dx_get_block(entries + i));
                                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: fs/ext3/namei.c:249:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: fs/ext3/namei.c:249:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: fs/ext3/namei.c:250:
+        printk("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: fs/ext3/namei.c:250:
+        printk("\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#137: FILE: fs/ext3/namei.c:250:
+        printk("\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: fs/ext3/namei.c:468:
+^I^I^I^I struct dx_frame *frames, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#196: FILE: fs/ext3/namei.c:546:
+	dxtrace(printk("In htree dirblock_to_tree: block %d\n", block));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#197: FILE: fs/ext3/namei.c:547:
+	if (!(bh = ext3_bread (NULL, dir, block, 0, &err)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#197: FILE: fs/ext3/namei.c:547:
+	if (!(bh = ext3_bread (NULL, dir, block, 0, &err)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: fs/ext3/namei.c:549:
+^I$

CHECK:SPACING: No space is necessary after a cast
#200: FILE: fs/ext3/namei.c:550:
+	de = (struct ext3_dir_entry_2 *) bh->b_data;

CHECK:SPACING: No space is necessary after a cast
#201: FILE: fs/ext3/namei.c:551:
+	top = (struct ext3_dir_entry_2 *) ((char *) de +

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hinfo->hash < start_hash'
#206: FILE: fs/ext3/namei.c:556:
+		if ((hinfo->hash < start_hash) ||
+		    ((hinfo->hash == start_hash) &&
+		     (hinfo->minor_hash < start_minor_hash)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hinfo->hash == start_hash'
#206: FILE: fs/ext3/namei.c:556:
+		if ((hinfo->hash < start_hash) ||
+		    ((hinfo->hash == start_hash) &&
+		     (hinfo->minor_hash < start_minor_hash)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hinfo->minor_hash < start_minor_hash'
#206: FILE: fs/ext3/namei.c:556:
+		if ((hinfo->hash < start_hash) ||
+		    ((hinfo->hash == start_hash) &&
+		     (hinfo->minor_hash < start_minor_hash)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#210: FILE: fs/ext3/namei.c:560:
+		if ((err = ext3_htree_store_dirent(dir_file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: fs/ext3/namei.c:561:
+		if ((err = ext3_htree_store_dirent(dir_file,
+				   hinfo->hash, hinfo->minor_hash, de)) != 0) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#221: FILE: fs/ext3/namei.c:571:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: fs/ext3/namei.c:595:
+^Iif (!(EXT3_I(dir)->i_flags & EXT3_INDEX_FL)) {^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: fs/ext3/namei.c:647:
+^Idxtrace(printk("Fill tree: returned %d entries, next hash: %x\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: fs/ext3/namei.c:647:
+	dxtrace(printk("Fill tree: returned %d entries, next hash: %x\n", 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000388594.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 37 warnings, 7 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000388594.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
