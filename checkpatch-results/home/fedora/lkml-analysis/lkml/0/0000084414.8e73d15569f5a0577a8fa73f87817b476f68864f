WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
via rcu.   Logical consistency across profile replacement/removal and change

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: security/apparmor/lsm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#85: FILE: security/apparmor/lsm.c:27:
+ * don't want to add special path code. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#93: FILE: security/apparmor/lsm.c:35:
+int apparmor_complain = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#94: FILE: security/apparmor/lsm.c:36:
+module_param_named(complain, apparmor_complain, int, S_IRUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#98: FILE: security/apparmor/lsm.c:40:
+int apparmor_debug = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#99: FILE: security/apparmor/lsm.c:41:
+module_param_named(debug, apparmor_debug, int, S_IRUSR);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#103: FILE: security/apparmor/lsm.c:45:
+int apparmor_audit = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#104: FILE: security/apparmor/lsm.c:46:
+module_param_named(audit, apparmor_audit, int, S_IRUSR);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#108: FILE: security/apparmor/lsm.c:50:
+int apparmor_logsyscall = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#109: FILE: security/apparmor/lsm.c:51:
+module_param_named(logsyscall, apparmor_logsyscall, int, S_IRUSR);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#118: FILE: security/apparmor/lsm.c:60:
+__setup("apparmor_complain=", aa_getopt_complain);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#125: FILE: security/apparmor/lsm.c:67:
+__setup("apparmor_debug=", aa_getopt_debug);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#132: FILE: security/apparmor/lsm.c:74:
+__setup("apparmor_audit=", aa_getopt_audit);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#139: FILE: security/apparmor/lsm.c:81:
+__setup("apparmor_logsyscall=", aa_getopt_logsyscall);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: security/apparmor/lsm.c:85:
+static int apparmor_ptrace(struct task_struct *parent,
+			    struct task_struct *child)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: security/apparmor/lsm.c:105:
+static int apparmor_capget(struct task_struct *target,
+			    kernel_cap_t *effective,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: security/apparmor/lsm.c:113:
+static int apparmor_capset_check(struct task_struct *target,
+				  kernel_cap_t *effective,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: security/apparmor/lsm.c:121:
+static void apparmor_capset_set(struct task_struct *target,
+				 kernel_cap_t *effective,

WARNING:RETURN_VOID: void function return statements are not generally useful
#185: FILE: security/apparmor/lsm.c:127:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#245: FILE: security/apparmor/lsm.c:187:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#257: FILE: security/apparmor/lsm.c:199:
+static int apparmor_sb_mount(char *dev_name, struct nameidata *nd, char *type,
                                                                ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: security/apparmor/lsm.c:200:
+static int apparmor_sb_mount(char *dev_name, struct nameidata *nd, char *type,
+			      unsigned long flags, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: security/apparmor/lsm.c:235:
+static int apparmor_inode_mkdir(struct inode *inode, struct dentry *dentry,
+				 int mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: security/apparmor/lsm.c:266:
+static int apparmor_inode_create(struct inode *inode, struct dentry *dentry,
+				  int mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: security/apparmor/lsm.c:283:
+static int apparmor_inode_link(struct dentry *old_dentry, struct inode *inode,
+				struct dentry *new_dentry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: security/apparmor/lsm.c:314:
+static int apparmor_inode_mknod(struct inode *inode, struct dentry *dentry,
+				 int mode, dev_t dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: security/apparmor/lsm.c:330:
+static int apparmor_inode_rename(struct inode *old_inode,
+				  struct dentry *old_dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#412: FILE: security/apparmor/lsm.c:354:
+				      struct nameidata *nd)
 				                        ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: security/apparmor/lsm.c:354:
+static int apparmor_inode_permission(struct inode *inode, int mask,
+				      struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#424: FILE: security/apparmor/lsm.c:366:
+			error = aa_perm_nameidata(active, nd, mask);
 			                                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: security/apparmor/lsm.c:395:
+static int apparmor_inode_setxattr(struct dentry *dentry, char *name,
+				    void *value, size_t size, int flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#484: FILE: security/apparmor/lsm.c:426:
+}
+static int apparmor_inode_listxattr(struct dentry *dentry)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#552: FILE: security/apparmor/lsm.c:494:
+	struct aaprofile *p = AA_PROFILE(file->f_security);
+	put_aaprofile(p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: security/apparmor/lsm.c:498:
+static int apparmor_file_mmap(struct file *file, unsigned long reqprot,
+			       unsigned long prot, unsigned long flags)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#569: FILE: security/apparmor/lsm.c:511:
+	 * write back to the files */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#575: FILE: security/apparmor/lsm.c:517:
+	AA_DEBUG("%s: 0x%x\n", __FUNCTION__, mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: security/apparmor/lsm.c:538:
+static int apparmor_task_post_setuid(uid_t id0, uid_t id1, uid_t id2,
+				      int flags)

WARNING:RETURN_VOID: void function return statements are not generally useful
#605: FILE: security/apparmor/lsm.c:547:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: security/apparmor/lsm.c:550:
+static int apparmor_getprocattr(struct task_struct *p, char *name, void *value,
+				 size_t size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: security/apparmor/lsm.c:582:
+static int apparmor_setprocattr(struct task_struct *p, char *name, void *value,
+				 size_t size)

WARNING:SPLIT_STRING: quoted string split across lines
#668: FILE: security/apparmor/lsm.c:610:
+			AA_WARN("%s: Attempt by foreign task %s(%d) "
+				"[user %d] to changehat of task %s(%d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#669: FILE: security/apparmor/lsm.c:611:
+				__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#696: FILE: security/apparmor/lsm.c:638:
+			AA_WARN("%s: Unprivileged attempt by task %s(%d) "
+				"[user %d] to assign profile to task %s(%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#697: FILE: security/apparmor/lsm.c:639:
+				__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#720: FILE: security/apparmor/lsm.c:662:
+			AA_WARN("%s: Attempt by confined task %s(%d) "
+				"[user %d] to assign profile to task %s(%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#721: FILE: security/apparmor/lsm.c:663:
+				__FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#734: FILE: security/apparmor/lsm.c:676:
+		AA_WARN("%s: Unknown setprocattr command '%.*s' by task %s(%d) "
+			"[user %d] for task %s(%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#735: FILE: security/apparmor/lsm.c:677:
+			__FUNCTION__,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#801: FILE: security/apparmor/lsm.c:743:
+	if ((error = create_apparmorfs())) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open brace '{'
#806: FILE: security/apparmor/lsm.c:748:
+	if ((error = alloc_null_complain_profile())){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#806: FILE: security/apparmor/lsm.c:748:
+	if ((error = alloc_null_complain_profile())){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#811: FILE: security/apparmor/lsm.c:753:
+	if ((error = register_security(&apparmor_ops))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: security/apparmor/lsm.c:761:
+	aa_audit_message(NULL, GFP_KERNEL, 0,
+		"AppArmor initialized%s\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#833: FILE: security/apparmor/lsm.c:775:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#841: FILE: security/apparmor/lsm.c:783:
+		AA_DEBUG("%s: Dropping profiles %s(%d) "
+			 "profile %s(%p) active %s(%p)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#842: FILE: security/apparmor/lsm.c:784:
+			 __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: security/apparmor/lsm.c:832:
+	aa_audit_message(NULL, GFP_KERNEL, 0,
+		"AppArmor protection removed\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084414.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 26 warnings, 24 checks, 840 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084414.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
