WARNING:TYPO_SPELLING: 'contants' may be misspelled - perhaps 'constants'?
#25: 
This patch adds the ZONE_EASYRCLM zone and updates relevant contants and
                                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
the x86 will be placed in ZONE_EASYRCLM. Memory hot-added on the ppc64 still

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#51: FILE: arch/x86_64/mm/init.c:485:
+	struct zone *zone = pgdat->node_zones + MAX_NR_ZONES-3;
 	                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: fs/ntfs/malloc.h:47:
+^I^Ireturn kmalloc(PAGE_SIZE, gfp_mask & $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/mm.h:952:
+extern void set_required_kernelcore(unsigned long kernelcore_pfn);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: mm/mem_init.c:41:
+  unsigned long __initdata required_kernelcore;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: mm/mem_init.c:42:
+  unsigned long __initdata easyrclm_pfn[MAX_NUMNODES];$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#150: FILE: mm/mem_init.c:55:
+	BUG_ON(zone_type > ZONE_EASYRCLM);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#161: FILE: mm/mem_init.c:65:
+			BUG_ON(zone_type == ZONE_HIGHMEM);

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: mm/mem_init.c:789:
+	int zone_index;
+	for (zone_index = MAX_NR_ZONES - 1; zone_index >= 0; zone_index--) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#188: FILE: mm/mem_init.c:795:
+	BUG_ON(zone_index == -1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: mm/mem_init.c:800:
+void __init adjust_zone_range_for_easyrclm(int nid,
+					unsigned long zone_type,

CHECK:BRACES: braces {} should be used on all arms of this statement
#201: FILE: mm/mem_init.c:808:
+		if (zone_type == ZONE_EASYRCLM) {
[...]
+		} else if (*zone_start_pfn < easyrclm_pfn[nid] &&
[...]
+		} else if (*zone_start_pfn >= easyrclm_pfn[nid])
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/mem_init.c:835:
+	adjust_zone_range_for_easyrclm(nid, zone_type,
+			&zone_start_pfn, &zone_end_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: mm/mem_init.c:846:
+	printk("zone_present_pages_in_node(%d, %lu) = %lu\n", nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: mm/mem_init.c:847:
+	printk("zone_present_pages_in_node(%d, %lu) = %lu\n", nid,
+					zone_type, zone_end_pfn - zone_start_pfn);

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: mm/mem_init.c:899:
+	unsigned long zone_start_pfn, zone_end_pfn;
+	zone_start_pfn = arch_zone_lowest_possible_pfn[zone_type];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: mm/mem_init.c:902:
+	adjust_zone_range_for_easyrclm(nid, zone_type,
+			&zone_start_pfn, &zone_end_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#325: FILE: mm/mem_init.c:1221:
+	printk("num_active_nodes = %lu\n", num_active_nodes);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#326: FILE: mm/mem_init.c:1222:
+	printk("highest_usable_zone = %lu\n", highest_usable_zone());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#329: FILE: mm/mem_init.c:1225:
+	printk("usable_startpfn = %lu\n", arch_zone_lowest_possible_pfn[highest_usable_zone()]);

ERROR:SPACING: space prohibited after that open parenthesis '('
#345: FILE: mm/mem_init.c:1241:
+			required_kernelcore -= min( (end_pfn - start_pfn),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#382: FILE: mm/mem_init.c:1278:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: mm/mem_init.c:1312:
+^Iarch_zone_highest_possible_pfn[ZONE_NORMAL] = $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: mm/mem_init.c:1342:
+	printk("required_kernelcore = %lu\n", size_pfn);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#443: FILE: mm/page_alloc.c:71:
+int sysctl_lowmem_reserve_ratio[MAX_NR_ZONES-1] = { 256, 256, 32, 32 };
                                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 14 warnings, 9 checks, 400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079875.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
