WARNING:TYPO_SPELLING: 'faliures' may be misspelled - perhaps 'failures'?
#24: 
Here it is how I fixed the highmem faliures in 2.4.11pre6aa1. I think
                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'temporarly' may be misspelled - perhaps 'temporarily'?
#25: 
you won't like some of the things I did sorry. Also temporarly removed
                                                    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#32: 
problem completly in the testing I did (and it's certainly much more
        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#37: 
But now the memory balancing seems completly relaible and swap behaviour
                                   ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: include/linux/swap.h:177:
+	pg_data_t * __pgdat;					\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: include/linux/swap.h:178:
+	zone_t * __classzone, * __overflow;			\

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#75: FILE: include/linux/swap.h:178:
+	zone_t * __classzone, * __overflow;			\
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: include/linux/swap.h:193:
+	pg_data_t * __pgdat;					\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: include/linux/swap.h:194:
+	zone_t * __classzone, * __overflow;			\

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#91: FILE: include/linux/swap.h:194:
+	zone_t * __classzone, * __overflow;			\
 	                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: include/linux/swap.h:209:
+	pg_data_t * __pgdat;					\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: include/linux/swap.h:210:
+	zone_t * __classzone, * __overflow;			\

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#107: FILE: include/linux/swap.h:210:
+	zone_t * __classzone, * __overflow;			\
 	                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: include/linux/swap.h:225:
+	pg_data_t * __pgdat;					\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: include/linux/swap.h:226:
+	zone_t * __classzone, * __overflow;			\

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#123: FILE: include/linux/swap.h:226:
+	zone_t * __classzone, * __overflow;			\
 	                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: mm/page_alloc.c:384:
+			zone_t *z = *(zone++);
+			if (!z)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: mm/page_alloc.c:396:
+^I^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: mm/page_alloc.c:402:
+			zone_t *z = *(zone++);
+			if (!z)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#363: FILE: mm/page_alloc.c:413:
+	printk(KERN_NOTICE "__alloc_pages: %u-order allocation failed (gfp=0x%x/%i) from %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: mm/page_alloc.c:530:
+			printk("Zone:%s freepages:%6lukB|%lu min:%6luKB|%lu low:%6lukB|%lu high:%6lukB:%lu active:%6dkB|%d inactive:%6dkB|%d\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#387: FILE: mm/page_alloc.c:532:
+			       zone->free_pages << (PAGE_SHIFT-10),
 			                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#389: FILE: mm/page_alloc.c:534:
+			       zone->pages_min << (PAGE_SHIFT-10),
 			                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#391: FILE: mm/page_alloc.c:536:
+			       zone->pages_low << (PAGE_SHIFT-10),
 			                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#393: FILE: mm/page_alloc.c:538:
+			       zone->pages_high << (PAGE_SHIFT-10),
 			                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#395: FILE: mm/page_alloc.c:540:
+			       zone->nr_active_pages << (PAGE_SHIFT-10),
 			                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#397: FILE: mm/page_alloc.c:542:
+			       zone->nr_inactive_pages << (PAGE_SHIFT-10),
 			                                             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#414: FILE: mm/page_alloc.c:722:
+		zone->nr_active_pages = zone->nr_inactive_pages = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#462: FILE: mm/vmscan.c:64:
+	if (TryLockPage(page))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#482: FILE: mm/vmscan.c:288:
+static int FASTCALL(swap_out(zone_t * classzone, unsigned int gfp_mask, int nr_pages));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#483: FILE: mm/vmscan.c:289:
+static int swap_out(zone_t * classzone, unsigned int gfp_mask, int nr_pages)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#500: FILE: mm/vmscan.c:336:
+	while (max_scan && classzone->nr_inactive_pages && (entry = inactive_list.prev) != &inactive_list) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#539: FILE: mm/vmscan.c:504:
+static void FASTCALL(refill_inactive(int nr_pages, zone_t * classzone));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#540: FILE: mm/vmscan.c:505:
+static void refill_inactive(int nr_pages, zone_t * classzone)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#574: FILE: mm/vmscan.c:536:
+static int FASTCALL(shrink_caches(zone_t * classzone, unsigned int gfp_mask, int nr_pages));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#575: FILE: mm/vmscan.c:537:
+static int shrink_caches(zone_t * classzone, unsigned int gfp_mask, int nr_pages)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#590: FILE: mm/vmscan.c:550:
+	ratio = (unsigned long) nr_pages * classzone->nr_active_pages / ((classzone->nr_inactive_pages * 2) + 1);

CHECK:SPACING: No space is necessary after a cast
#590: FILE: mm/vmscan.c:550:
+	ratio = (unsigned long) nr_pages * classzone->nr_active_pages / ((classzone->nr_inactive_pages * 2) + 1);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#612: FILE: mm/vmscan.c:567:
+static int FASTCALL(check_classzone_need_balance(zone_t * classzone));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#654: FILE: mm/vmscan.c:626:
+			schedule_timeout(HZ*5);
 			                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000508148.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 10 warnings, 10 checks, 512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000508148.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
