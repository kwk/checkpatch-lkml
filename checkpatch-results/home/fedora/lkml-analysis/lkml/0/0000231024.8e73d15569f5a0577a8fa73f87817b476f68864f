WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
Content-Disposition: attachment; filename="quota-2.6.10-linus-pagelock.diff"

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: fs/dquot.c:1350:
+         * disk (and so userspace sees correct data afterwards) */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#137: FILE: fs/dquot.c:1350:
+         * disk (and so userspace sees correct data afterwards) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#145: FILE: fs/dquot.c:1358:
+	 * changes done by userspace on the next quotaon() */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#153: FILE: fs/dquot.c:1366:
+			iput(toput[cnt]);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#200: FILE: fs/dquot.c:1401:
+	 * we see all the changes from userspace... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#215: FILE: fs/dquot.c:1413:
+	 * which ignore the immutable bit. */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#268: FILE: fs/dquot.c:1446:
+	iput(inode);
 	^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#279: FILE: fs/dquot.c:1452:
+		 * on a wrong file we don't want to mess up the flags) */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#294: FILE: fs/dquot.c:1467:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#301: FILE: fs/dquot.c:1470:
+	error = path_lookup(path, LOOKUP_FOLLOW, &nd);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#304: FILE: fs/dquot.c:1473:
+	error = security_quota_on(nd.dentry);
 	                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#314: FILE: fs/dquot.c:1477:
+	if (nd.mnt->mnt_sb != sb)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#317: FILE: fs/dquot.c:1480:
+		error = vfs_quota_on_inode(nd.dentry->d_inode, type, format_id);
 		                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: fs/dquot.c:1482:
+	path_release(&nd);
 	              ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: fs/ext2/ext2.h:122:
+extern int ext2_get_block(struct inode *, sector_t, struct buffer_head *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#363: FILE: fs/ext2/ext2.h:122:
+extern int ext2_get_block(struct inode *, sector_t, struct buffer_head *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#363: FILE: fs/ext2/ext2.h:122:
+extern int ext2_get_block(struct inode *, sector_t, struct buffer_head *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#363: FILE: fs/ext2/ext2.h:122:
+extern int ext2_get_block(struct inode *, sector_t, struct buffer_head *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#363: FILE: fs/ext2/ext2.h:122:
+extern int ext2_get_block(struct inode *, sector_t, struct buffer_head *, int);

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#413: FILE: fs/ext2/super.c:1017:
+ * itself serializes the operations (and noone else should touch the files)
                                          ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#414: FILE: fs/ext2/super.c:1018:
+ * we don't have to be afraid of races */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#427: FILE: fs/ext2/super.c:1031:
+	if (off+len > i_size)
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#428: FILE: fs/ext2/super.c:1032:
+		len = i_size-off;
 		            ^

CHECK:BRACES: Unbalanced braces around else statement
#440: FILE: fs/ext2/super.c:1044:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#444: FILE: fs/ext2/super.c:1048:
+			memcpy(data, bh->b_data+offset, tocopy);
 			                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#482: FILE: fs/ext2/super.c:1086:
+		memcpy(bh->b_data+offset, data, tocopy);
 		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#494: FILE: fs/ext2/super.c:1098:
+	if (inode->i_size < off+len-towrite)
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#494: FILE: fs/ext2/super.c:1098:
+	if (inode->i_size < off+len-towrite)
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#495: FILE: fs/ext2/super.c:1099:
+		i_size_write(inode, off+len-towrite);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#495: FILE: fs/ext2/super.c:1099:
+		i_size_write(inode, off+len-towrite);
 		                           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#497: FILE: fs/ext2/super.c:1101:
+	inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#551: FILE: fs/ext3/super.c:854:
+					"EXT3-fs: not enough memory for "
+					"storing quotafile name.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#562: FILE: fs/ext3/super.c:861:
+					"EXT3-fs: %s quota file already "
+					"specified.\n", QTYPE2NAME(qtype));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: fs/ext3/super.c:2245:
+	handle = ext3_journal_start(inode,
 					EXT3_QUOTA_TRANS_BLOCKS);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#622: FILE: fs/ext3/super.c:2333:
+	 * throw it away */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#631: FILE: fs/ext3/super.c:2356:
+	if (nd.mnt->mnt_sb != sb) {
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#632: FILE: fs/ext3/super.c:2357:
+		path_release(&nd);
 		              ^^

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#649: FILE: fs/ext3/super.c:2371:
+ * itself serializes the operations (and noone else should touch the files)
                                          ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#650: FILE: fs/ext3/super.c:2372:
+ * we don't have to be afraid of races */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#663: FILE: fs/ext3/super.c:2385:
+	if (off+len > i_size)
 	       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#664: FILE: fs/ext3/super.c:2386:
+		len = i_size-off;
 		            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#675: FILE: fs/ext3/super.c:2397:
+			memcpy(data, bh->b_data+offset, tocopy);
 			                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#686: FILE: fs/ext3/super.c:2408:
+ * enough credits) */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#709: FILE: fs/ext3/super.c:2431:
+		memcpy(bh->b_data+offset, data, tocopy);
 		                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#722: FILE: fs/ext3/super.c:2444:
+	if (inode->i_size < off+len-towrite) {
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#722: FILE: fs/ext3/super.c:2444:
+	if (inode->i_size < off+len-towrite) {
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#723: FILE: fs/ext3/super.c:2445:
+		i_size_write(inode, off+len-towrite);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#723: FILE: fs/ext3/super.c:2445:
+		i_size_write(inode, off+len-towrite);
 		                           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#727: FILE: fs/ext3/super.c:2449:
+	inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#770: FILE: fs/quota.c:147:
+	 * them there for userspace to be visible... */

WARNING:TYPO_SPELLING: 'carefull' may be misspelled - perhaps 'careful'?
#777: FILE: fs/quota.c:154:
+	 * not do it inside dqonoff_sem. Moreover we need to be carefull
 	                                                        ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#779: FILE: fs/quota.c:156:
+	 * reference to inode). */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#795: FILE: fs/quota.c:172:
+			iput(discard[cnt]);
 			^^^^

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#851: FILE: fs/quota_v1.c:52:
+	inode->i_sb->s_op->quota_read(inode, (char *)&dqblk, sizeof(struct v1_disk_dqblk), v1_dqoff(dquot->dq_id));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#938: FILE: fs/quota_v1.c:142:
+	if ((ret = sb->s_op->quota_read(inode, (char *)&dqblk, sizeof(struct v1_disk_dqblk), v1_dqoff(0))) != sizeof(struct v1_disk_dqblk)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#938: FILE: fs/quota_v1.c:142:
+	if ((ret = sb->s_op->quota_read(inode, (char *)&dqblk, sizeof(struct v1_disk_dqblk), v1_dqoff(0))) != sizeof(struct v1_disk_dqblk)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#965: FILE: fs/quota_v1.c:162:
+	if ((ret = sb->s_op->quota_read(inode, (char *)&dqblk, sizeof(struct v1_disk_dqblk), v1_dqoff(0))) != sizeof(struct v1_disk_dqblk)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#965: FILE: fs/quota_v1.c:162:
+	if ((ret = sb->s_op->quota_read(inode, (char *)&dqblk, sizeof(struct v1_disk_dqblk), v1_dqoff(0))) != sizeof(struct v1_disk_dqblk)) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#974: FILE: fs/quota_v1.c:169:
+	ret = sb->s_op->quota_write(inode, (char *)&dqblk, sizeof(struct v1_disk_dqblk), v1_dqoff(0));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1014: FILE: fs/quota_v2.c:39:
+		printk("failed read\n");

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1036: FILE: fs/quota_v2.c:56:
+	size = sb->s_op->quota_read(inode, (char *)&dinfo, sizeof(struct v2_disk_dqinfo), V2_DQINFOOFF);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1066: FILE: fs/quota_v2.c:88:
+	size = sb->s_op->quota_write(inode, (char *)&dinfo, sizeof(struct v2_disk_dqinfo), V2_DQINFOOFF);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1091: FILE: fs/quota_v2.c:138:
+	return inode->i_sb->s_op->quota_read(inode, (char *)buf, V2_DQBLKSIZE, blk << V2_DQBLKSIZE_BITS);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1107: FILE: fs/quota_v2.c:143:
+	return inode->i_sb->s_op->quota_write(inode, (char *)buf, V2_DQBLKSIZE, blk << V2_DQBLKSIZE_BITS);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1125: FILE: fs/quota_v2.c:158:
+		if ((ret = read_blk(inode, blk, buf)) < 0)

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1132: FILE: fs/quota_v2.c:164:
+		if ((ret = write_blk(inode, info->u.v2_i.dqi_blocks, buf)) < 0)	/* Assure block allocation... */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1132: FILE: fs/quota_v2.c:164:
+		if ((ret = write_blk(inode, info->u.v2_i.dqi_blocks, buf)) < 0)	/* Assure block allocation... */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1160: FILE: fs/quota_v2.c:187:
+	if ((err = write_blk(inode, blk, buf)) < 0)	/* Some strange block. We had better leave it... */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1160: FILE: fs/quota_v2.c:187:
+	if ((err = write_blk(inode, blk, buf)) < 0)	/* Some strange block. We had better leave it... */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1180: FILE: fs/quota_v2.c:204:
+		if ((err = read_blk(inode, nextblk, tmpbuf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1184: FILE: fs/quota_v2.c:207:
+		if ((err = write_blk(inode, nextblk, tmpbuf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1189: FILE: fs/quota_v2.c:211:
+		if ((err = read_blk(inode, prevblk, tmpbuf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1193: FILE: fs/quota_v2.c:214:
+		if ((err = write_blk(inode, prevblk, tmpbuf)) < 0)

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1204: FILE: fs/quota_v2.c:223:
+	if (write_blk(inode, blk, buf) < 0)	/* No matter whether write succeeds block is out of list */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1226: FILE: fs/quota_v2.c:243:
+	if ((err = write_blk(inode, blk, buf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1230: FILE: fs/quota_v2.c:246:
+		if ((err = read_blk(inode, info->u.v2_i.dqi_free_entry, tmpbuf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1234: FILE: fs/quota_v2.c:249:
+		if ((err = write_blk(inode, info->u.v2_i.dqi_free_entry, tmpbuf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1258: FILE: fs/quota_v2.c:281:
+		if ((*err = read_blk(inode, blk, buf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1272: FILE: fs/quota_v2.c:296:
+		if ((*err = remove_free_dqentry(inode, dquot->dq_type, buf, blk)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1281: FILE: fs/quota_v2.c:311:
+	if ((*err = write_blk(inode, blk, buf)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1308: FILE: fs/quota_v2.c:343:
+		if ((ret = read_blk(inode, *treeblk, buf)) < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1340: FILE: fs/quota_v2.c:395:
+			printk(KERN_ERR "VFS: Error %d occurred while creating quota.\n", ret);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1357: FILE: fs/quota_v2.c:408:
+	ret = inode->i_sb->s_op->quota_write(inode, (char *)&ddquot, sizeof(struct v2_disk_dqblk), dquot->dq_off);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1375: FILE: fs/quota_v2.c:435:
+	if ((ret = read_blk(inode, blk, buf)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1384: FILE: fs/quota_v2.c:442:
+		if ((ret = remove_free_dqentry(inode, dquot->dq_type, buf, blk)) < 0 ||

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1394: FILE: fs/quota_v2.c:452:
+			if ((ret = insert_free_dqentry(inode, dquot->dq_type, buf, blk)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1401: FILE: fs/quota_v2.c:458:
+			if ((ret = write_blk(inode, blk, buf)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1419: FILE: fs/quota_v2.c:480:
+	if ((ret = read_blk(inode, *blk, buf)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1433: FILE: fs/quota_v2.c:500:
+			if ((ret = write_blk(inode, *blk, buf)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1451: FILE: fs/quota_v2.c:529:
+	if ((ret = read_blk(inode, blk, buf)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1468: FILE: fs/quota_v2.c:565:
+	if ((ret = read_blk(inode, blk, buf)) < 0) {

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#1499: FILE: fs/quota_v2.c:615:
+		if ((ret = inode->i_sb->s_op->quota_read(inode, (char *)&ddquot, sizeof(struct v2_disk_dqblk), offset)) != sizeof(struct v2_disk_dqblk)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1499: FILE: fs/quota_v2.c:615:
+		if ((ret = inode->i_sb->s_op->quota_read(inode, (char *)&ddquot, sizeof(struct v2_disk_dqblk), offset)) != sizeof(struct v2_disk_dqblk)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1519: FILE: fs/reiserfs/bitmap.c:233:
+    if (SB_BMAP_NR(s) == 1)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1529: FILE: fs/reiserfs/bitmap.c:619:
+	hint->search_start = hash >= SB_BLOCK_COUNT(sb) ? SB_BLOCK_COUNT(sb)-1 : hash;
 	                                                                    ^

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1538: FILE: fs/reiserfs/bitmap.c:648:
+	hint->search_start = hash >= SB_BLOCK_COUNT(hint->inode->i_sb) ? SB_BLOCK_COUNT(hint->inode->i_sb)-1 : hash;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1538: FILE: fs/reiserfs/bitmap.c:648:
+	hint->search_start = hash >= SB_BLOCK_COUNT(hint->inode->i_sb) ? SB_BLOCK_COUNT(hint->inode->i_sb)-1 : hash;
 	                                                                                                  ^

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1547: FILE: fs/reiserfs/bitmap.c:962:
+	reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: allocating %d blocks id=%u", amount_needed, hint->inode->i_uid);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1547: FILE: fs/reiserfs/bitmap.c:962:
+	reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: allocating %d blocks id=%u", amount_needed, hint->inode->i_uid);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1552: FILE: fs/reiserfs/bitmap.c:967:
 	if (hint->preallocate && hint->prealloc_size ) {
[...]
+	    reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: allocating (prealloc) %d blocks id=%u", hint->prealloc_size, hint->inode->i_uid);

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#1555: FILE: fs/reiserfs/bitmap.c:969:
+	    reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: allocating (prealloc) %d blocks id=%u", hint->prealloc_size, hint->inode->i_uid);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1555: FILE: fs/reiserfs/bitmap.c:969:
+	    reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: allocating (prealloc) %d blocks id=%u", hint->prealloc_size, hint->inode->i_uid);

WARNING:LONG_LINE: line length of 178 exceeds 100 columns
#1564: FILE: fs/reiserfs/bitmap.c:1015:
+		reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: freeing (nospace) %d blocks id=%u", amount_needed + hint->prealloc_size - nr_allocated, hint->inode->i_uid);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1564: FILE: fs/reiserfs/bitmap.c:1015:
+		reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: freeing (nospace) %d blocks id=%u", amount_needed + hint->prealloc_size - nr_allocated, hint->inode->i_uid);

WARNING:LONG_LINE: line length of 222 exceeds 100 columns
#1573: FILE: fs/reiserfs/bitmap.c:1035:
+	reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: freeing (failed prealloc) %d blocks id=%u", amount_needed + hint->prealloc_size - nr_allocated - REISERFS_I(hint->inode)->i_prealloc_count, hint->inode->i_uid);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1573: FILE: fs/reiserfs/bitmap.c:1035:
+	reiserfs_debug (s, REISERFS_DEBUG_CODE, "reiserquota: freeing (failed prealloc) %d blocks id=%u", amount_needed + hint->prealloc_size - nr_allocated - REISERFS_I(hint->inode)->i_prealloc_count, hint->inode->i_uid);

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#1594: FILE: fs/reiserfs/file.c:204:
+    res = journal_begin(th, inode->i_sb, JOURNAL_PER_BALANCE_CNT * 3 + 1 + 2 * REISERFS_QUOTA_TRANS_BLOCKS); // Wish I know if this number enough

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1594: FILE: fs/reiserfs/file.c:204:
+    res = journal_begin(th, inode->i_sb, JOURNAL_PER_BALANCE_CNT * 3 + 1 + 2 * REISERFS_QUOTA_TRANS_BLOCKS); // Wish I know if this number enough$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1603: FILE: fs/reiserfs/file.c:579:
+        err = journal_end(th, inode->i_sb, JOURNAL_PER_BALANCE_CNT * 3 + 1 + 2 * REISERFS_QUOTA_TRANS_BLOCKS);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1603: FILE: fs/reiserfs/file.c:579:
+        err = journal_end(th, inode->i_sb, JOURNAL_PER_BALANCE_CNT * 3 + 1 + 2 * REISERFS_QUOTA_TRANS_BLOCKS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1603: FILE: fs/reiserfs/file.c:579:
+        err = journal_end(th, inode->i_sb, JOURNAL_PER_BALANCE_CNT * 3 + 1 + 2 * REISERFS_QUOTA_TRANS_BLOCKS);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1631: FILE: fs/reiserfs/inode.c:29:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 * REISERFS_QUOTA_INIT_BLOCKS; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1631: FILE: fs/reiserfs/inode.c:29:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 * REISERFS_QUOTA_INIT_BLOCKS; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1646: FILE: fs/reiserfs/inode.c:53:
+	 * stat data deletion */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1659: FILE: fs/reiserfs/inode.c:591:
+       quota update for user, group */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1660: FILE: fs/reiserfs/inode.c:592:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 1 + 2 * REISERFS_QUOTA_TRANS_BLOCKS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1668: FILE: fs/reiserfs/inode.c:1696:
+    if (DQUOT_ALLOC_INODE(inode)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1671: FILE: fs/reiserfs/inode.c:1699:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1685: FILE: fs/reiserfs/inode.c:1871:
+    journal_end(th, th->t_super, th->t_blocks_allocated) ;$

WARNING:SPACING: space prohibited before semicolon
#1685: FILE: fs/reiserfs/inode.c:1871:
+    journal_end(th, th->t_super, th->t_blocks_allocated) ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1695: FILE: fs/reiserfs/inode.c:2800:
+                if (!error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1695: FILE: fs/reiserfs/inode.c:2800:
+                if (!error) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1695: FILE: fs/reiserfs/inode.c:2800:
+                if (!error) {
+		    struct reiserfs_transaction_handle th;

WARNING:TABSTOP: Statements should start on a tabstop
#1696: FILE: fs/reiserfs/inode.c:2801:
+		    struct reiserfs_transaction_handle th;

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1698: FILE: fs/reiserfs/inode.c:2803:
+		    /* (user+group)*(old+new) structure - we count quota info and , inode write (sb, inode) */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1699: FILE: fs/reiserfs/inode.c:2804:
+		    journal_begin(&th, inode->i_sb, 4*REISERFS_QUOTA_INIT_BLOCKS+2);
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1699: FILE: fs/reiserfs/inode.c:2804:
+		    journal_begin(&th, inode->i_sb, 4*REISERFS_QUOTA_INIT_BLOCKS+2);
 		                                                                ^

WARNING:TABSTOP: Statements should start on a tabstop
#1701: FILE: fs/reiserfs/inode.c:2806:
+		    if (error) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1702: FILE: fs/reiserfs/inode.c:2807:
+			journal_end(&th, inode->i_sb, 4*REISERFS_QUOTA_INIT_BLOCKS+2);
 			                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1702: FILE: fs/reiserfs/inode.c:2807:
+			journal_end(&th, inode->i_sb, 4*REISERFS_QUOTA_INIT_BLOCKS+2);
 			                                                          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1704: FILE: fs/reiserfs/inode.c:2809:
+		    }

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1706: FILE: fs/reiserfs/inode.c:2811:
+		     * one transaction */

WARNING:TABSTOP: Statements should start on a tabstop
#1707: FILE: fs/reiserfs/inode.c:2812:
+		    if (attr->ia_valid & ATTR_UID)

WARNING:TABSTOP: Statements should start on a tabstop
#1709: FILE: fs/reiserfs/inode.c:2814:
+		    if (attr->ia_valid & ATTR_GID)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1712: FILE: fs/reiserfs/inode.c:2817:
+		    journal_end(&th, inode->i_sb, 4*REISERFS_QUOTA_INIT_BLOCKS+2);
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1712: FILE: fs/reiserfs/inode.c:2817:
+		    journal_end(&th, inode->i_sb, 4*REISERFS_QUOTA_INIT_BLOCKS+2);
 		                                                              ^

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1724: FILE: fs/reiserfs/journal.c:2650:
+  RFALSE( SB_JOURNAL_MAX_BATCH(p_s_sb) < nblocks+2, "transaction too big (%u < %u)", SB_JOURNAL_MAX_BATCH(p_s_sb), nblocks+2);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1724: FILE: fs/reiserfs/journal.c:2650:
+  RFALSE( SB_JOURNAL_MAX_BATCH(p_s_sb) < nblocks+2, "transaction too big (%u < %u)", SB_JOURNAL_MAX_BATCH(p_s_sb), nblocks+2);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1724: FILE: fs/reiserfs/journal.c:2650:
+  RFALSE( SB_JOURNAL_MAX_BATCH(p_s_sb) < nblocks+2, "transaction too big (%u < %u)", SB_JOURNAL_MAX_BATCH(p_s_sb), nblocks+2);
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1724: FILE: fs/reiserfs/journal.c:2650:
+  RFALSE( SB_JOURNAL_MAX_BATCH(p_s_sb) < nblocks+2, "transaction too big (%u < %u)", SB_JOURNAL_MAX_BATCH(p_s_sb), nblocks+2);
                                                                                                                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1724: FILE: fs/reiserfs/journal.c:2650:
+  RFALSE( SB_JOURNAL_MAX_BATCH(p_s_sb) < nblocks+2, "transaction too big (%u < %u)", SB_JOURNAL_MAX_BATCH(p_s_sb), nblocks+2);

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#1770: FILE: fs/reiserfs/namei.c:588:
+    /* We need blocks for transaction + (user+group)*(quotas for new inode + update of quota for directory owner) */

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1771: FILE: fs/reiserfs/namei.c:589:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1771: FILE: fs/reiserfs/namei.c:589:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1771: FILE: fs/reiserfs/namei.c:589:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);
                                                                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1781: FILE: fs/reiserfs/namei.c:596:
+    new_inode_init(inode, dir, mode);$

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#1790: FILE: fs/reiserfs/namei.c:655:
+    /* We need blocks for transaction + (user+group)*(quotas for new inode + update of quota for directory owner) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1791: FILE: fs/reiserfs/namei.c:656:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); $

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1791: FILE: fs/reiserfs/namei.c:656:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1791: FILE: fs/reiserfs/namei.c:656:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1791: FILE: fs/reiserfs/namei.c:656:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); 
                                                                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1802: FILE: fs/reiserfs/namei.c:665:
+    new_inode_init(inode, dir, mode);$

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#1811: FILE: fs/reiserfs/namei.c:729:
+    /* We need blocks for transaction + (user+group)*(quotas for new inode + update of quota for directory owner) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1812: FILE: fs/reiserfs/namei.c:730:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); $

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1812: FILE: fs/reiserfs/namei.c:730:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1812: FILE: fs/reiserfs/namei.c:730:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1812: FILE: fs/reiserfs/namei.c:730:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); 
                                                                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1823: FILE: fs/reiserfs/namei.c:741:
+    new_inode_init(inode, dir, mode);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1834: FILE: fs/reiserfs/namei.c:832:
+     * of the owner of the directory and of the owner of the parent directory */

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1835: FILE: fs/reiserfs/namei.c:833:
+    jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1835: FILE: fs/reiserfs/namei.c:833:
+    jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1835: FILE: fs/reiserfs/namei.c:833:
+    jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);
                                                                                     ^

WARNING:TYPO_SPELLING: 'datas' may be misspelled - perhaps 'data'?
#1845: FILE: fs/reiserfs/namei.c:916:
+       two stat datas, we change quotas of the owner of the directory and of
                 ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1846: FILE: fs/reiserfs/namei.c:917:
+       the owner of the parent directory */

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1847: FILE: fs/reiserfs/namei.c:918:
+    jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1847: FILE: fs/reiserfs/namei.c:918:
+    jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1847: FILE: fs/reiserfs/namei.c:918:
+    jbegin_count = JOURNAL_PER_BALANCE_CNT * 2 + 2 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS);
                                                                                     ^

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#1856: FILE: fs/reiserfs/namei.c:1002:
+    /* We need blocks for transaction + (user+group)*(quotas for new inode + update of quota for directory owner) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1857: FILE: fs/reiserfs/namei.c:1003:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); $

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1857: FILE: fs/reiserfs/namei.c:1003:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1857: FILE: fs/reiserfs/namei.c:1003:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1857: FILE: fs/reiserfs/namei.c:1003:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * (REISERFS_QUOTA_INIT_BLOCKS+REISERFS_QUOTA_TRANS_BLOCKS); 
                                                                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1866: FILE: fs/reiserfs/namei.c:1008:
+    new_inode_init(inode, parent_dir, mode);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1876: FILE: fs/reiserfs/namei.c:1079:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * REISERFS_QUOTA_TRANS_BLOCKS; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1876: FILE: fs/reiserfs/namei.c:1079:
+    int jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 2 * REISERFS_QUOTA_TRANS_BLOCKS; $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1887: FILE: fs/reiserfs/namei.c:1198:
+       quota updates: two parent directories */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1888: FILE: fs/reiserfs/namei.c:1199:
+    jbegin_count = JOURNAL_PER_BALANCE_CNT * 3 + 5 + 4 * REISERFS_QUOTA_TRANS_BLOCKS;$

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#1900: FILE: fs/reiserfs/stree.c:1391:
+    reiserfs_debug (p_s_sb, REISERFS_DEBUG_CODE, "reiserquota delete_item(): freeing %u, id=%u type=%c", quota_cut_bytes, p_s_inode->i_uid, head2type(&s_ih));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1900: FILE: fs/reiserfs/stree.c:1391:
+    reiserfs_debug (p_s_sb, REISERFS_DEBUG_CODE, "reiserquota delete_item(): freeing %u, id=%u type=%c", quota_cut_bytes, p_s_inode->i_uid, head2type(&s_ih));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1900: FILE: fs/reiserfs/stree.c:1391:
+    reiserfs_debug (p_s_sb, REISERFS_DEBUG_CODE, "reiserquota delete_item(): freeing %u, id=%u type=%c", quota_cut_bytes, p_s_inode->i_uid, head2type(&s_ih));

WARNING:LONG_LINE: line length of 173 exceeds 100 columns
#1909: FILE: fs/reiserfs/stree.c:1468:
+		reiserfs_debug (th->t_super, REISERFS_DEBUG_CODE, "reiserquota delete_solid_item(): freeing %u id=%u type=%c", quota_cut_bytes, inode->i_uid, key2type(key));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1909: FILE: fs/reiserfs/stree.c:1468:
+		reiserfs_debug (th->t_super, REISERFS_DEBUG_CODE, "reiserquota delete_solid_item(): freeing %u id=%u type=%c", quota_cut_bytes, inode->i_uid, key2type(key));

WARNING:LONG_LINE: line length of 155 exceeds 100 columns
#1918: FILE: fs/reiserfs/stree.c:1789:
+    reiserfs_debug (p_s_inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota cut_from_item(): freeing %u id=%u type=%c", quota_cut_bytes, p_s_inode->i_uid, '?');

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1918: FILE: fs/reiserfs/stree.c:1789:
+    reiserfs_debug (p_s_inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota cut_from_item(): freeing %u id=%u type=%c", quota_cut_bytes, p_s_inode->i_uid, '?');$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1918: FILE: fs/reiserfs/stree.c:1789:
+    reiserfs_debug (p_s_inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota cut_from_item(): freeing %u id=%u type=%c", quota_cut_bytes, p_s_inode->i_uid, '?');

WARNING:LONG_LINE: line length of 180 exceeds 100 columns
#1927: FILE: fs/reiserfs/stree.c:2002:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): allocating %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1927: FILE: fs/reiserfs/stree.c:2002:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): allocating %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1927: FILE: fs/reiserfs/stree.c:2002:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): allocating %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p_s_key->on_disk_key
#1927: FILE: fs/reiserfs/stree.c:2002:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): allocating %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 177 exceeds 100 columns
#1936: FILE: fs/reiserfs/stree.c:2051:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): freeing %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1936: FILE: fs/reiserfs/stree.c:2051:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): freeing %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1936: FILE: fs/reiserfs/stree.c:2051:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): freeing %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p_s_key->on_disk_key
#1936: FILE: fs/reiserfs/stree.c:2051:
+    reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota paste_into_item(): freeing %u id=%u type=%c", n_pasted_size, inode->i_uid, key2type(&(p_s_key->on_disk_key)));

WARNING:LONG_LINE: line length of 162 exceeds 100 columns
#1945: FILE: fs/reiserfs/stree.c:2084:
+	reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota insert_item(): allocating %u id=%u type=%c", quota_bytes, inode->i_uid, head2type(p_s_ih));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1945: FILE: fs/reiserfs/stree.c:2084:
+	reiserfs_debug (inode->i_sb, REISERFS_DEBUG_CODE, "reiserquota insert_item(): allocating %u id=%u type=%c", quota_bytes, inode->i_uid, head2type(p_s_ih));

WARNING:LONG_LINE: line length of 155 exceeds 100 columns
#1954: FILE: fs/reiserfs/stree.c:2130:
+    reiserfs_debug (th->t_super, REISERFS_DEBUG_CODE, "reiserquota insert_item(): freeing %u id=%u type=%c", quota_bytes, inode->i_uid, head2type(p_s_ih));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1954: FILE: fs/reiserfs/stree.c:2130:
+    reiserfs_debug (th->t_super, REISERFS_DEBUG_CODE, "reiserquota insert_item(): freeing %u id=%u type=%c", quota_bytes, inode->i_uid, head2type(p_s_ih));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1954: FILE: fs/reiserfs/stree.c:2130:
+    reiserfs_debug (th->t_super, REISERFS_DEBUG_CODE, "reiserquota insert_item(): freeing %u id=%u type=%c", quota_bytes, inode->i_uid, head2type(p_s_ih));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1976: FILE: fs/reiserfs/super.c:68:
+static int reiserfs_sync_fs (struct super_block * s, int wait)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1976: FILE: fs/reiserfs/super.c:68:
+static int reiserfs_sync_fs (struct super_block * s, int wait)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1984: FILE: fs/reiserfs/super.c:82:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1990: FILE: fs/reiserfs/super.c:87:
+    reiserfs_sync_fs(s, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2009: FILE: fs/reiserfs/super.c:160:
+    int i;$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2019: FILE: fs/reiserfs/super.c:170:
+    /* Needed for iput() to work correctly and not trash data */
                   ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2020: FILE: fs/reiserfs/super.c:171:
+    s->s_flags |= MS_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2022: FILE: fs/reiserfs/super.c:173:
+    for (i = 0; i < MAXQUOTAS; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2023: FILE: fs/reiserfs/super.c:174:
+	if (REISERFS_SB(s)->s_qf_names[i]) {
+	    int ret = reiserfs_quota_on_mount(s, i);

WARNING:TABSTOP: Statements should start on a tabstop
#2024: FILE: fs/reiserfs/super.c:175:
+	    int ret = reiserfs_quota_on_mount(s, i);

WARNING:TABSTOP: Statements should start on a tabstop
#2025: FILE: fs/reiserfs/super.c:176:
+	    if (ret < 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2025: FILE: fs/reiserfs/super.c:176:
+	    int ret = reiserfs_quota_on_mount(s, i);
+	    if (ret < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2028: FILE: fs/reiserfs/super.c:179:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2047: FILE: fs/reiserfs/super.c:275:
+    for (i = 0; i < MAXQUOTAS; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#2047: FILE: fs/reiserfs/super.c:275:
+    for (i = 0; i < MAXQUOTAS; i++) {
+            if (sb_dqopt(s)->files[i])

ERROR:CODE_INDENT: code indent should use tabs where possible
#2048: FILE: fs/reiserfs/super.c:276:
+            if (sb_dqopt(s)->files[i])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2048: FILE: fs/reiserfs/super.c:276:
+            if (sb_dqopt(s)->files[i])$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#2048: FILE: fs/reiserfs/super.c:276:
+            if (sb_dqopt(s)->files[i])
+                    vfs_quota_off_mount(s, i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2049: FILE: fs/reiserfs/super.c:277:
+                    vfs_quota_off_mount(s, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2049: FILE: fs/reiserfs/super.c:277:
+                    vfs_quota_off_mount(s, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2050: FILE: fs/reiserfs/super.c:278:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2052: FILE: fs/reiserfs/super.c:280:
+    s->s_flags &= ~MS_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2073: FILE: fs/reiserfs/super.c:567:
+  .sync_fs = reiserfs_sync_fs,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2079: FILE: fs/reiserfs/super.c:573:
+  .quota_read = reiserfs_quota_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2080: FILE: fs/reiserfs/super.c:574:
+  .quota_write = reiserfs_quota_write,$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2085: FILE: fs/reiserfs/super.c:579:
+#define QTYPE2NAME(t) ((t)==USRQUOTA?"user":"group")
                           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2085: FILE: fs/reiserfs/super.c:579:
+#define QTYPE2NAME(t) ((t)==USRQUOTA?"user":"group")
                                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2085: FILE: fs/reiserfs/super.c:579:
+#define QTYPE2NAME(t) ((t)==USRQUOTA?"user":"group")
                                            ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2097: FILE: fs/reiserfs/super.c:591:
+static struct dquot_operations reiserfs_quota_operations =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2098: FILE: fs/reiserfs/super.c:592:
+  .initialize = reiserfs_dquot_initialize,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2099: FILE: fs/reiserfs/super.c:593:
+  .drop = reiserfs_dquot_drop,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2100: FILE: fs/reiserfs/super.c:594:
+  .alloc_space = dquot_alloc_space,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2101: FILE: fs/reiserfs/super.c:595:
+  .alloc_inode = dquot_alloc_inode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2102: FILE: fs/reiserfs/super.c:596:
+  .free_space = dquot_free_space,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2103: FILE: fs/reiserfs/super.c:597:
+  .free_inode = dquot_free_inode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2104: FILE: fs/reiserfs/super.c:598:
+  .transfer = dquot_transfer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2105: FILE: fs/reiserfs/super.c:599:
+  .write_dquot = reiserfs_write_dquot,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2106: FILE: fs/reiserfs/super.c:600:
+  .acquire_dquot = reiserfs_acquire_dquot,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2107: FILE: fs/reiserfs/super.c:601:
+  .release_dquot = reiserfs_release_dquot,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2108: FILE: fs/reiserfs/super.c:602:
+  .mark_dirty = reiserfs_mark_dquot_dirty,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2109: FILE: fs/reiserfs/super.c:603:
+  .write_info = reiserfs_write_info,$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2113: FILE: fs/reiserfs/super.c:607:
+static struct quotactl_ops reiserfs_qctl_operations =
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2114: FILE: fs/reiserfs/super.c:608:
+  .quota_on = reiserfs_quota_on,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2115: FILE: fs/reiserfs/super.c:609:
+  .quota_off = vfs_quota_off,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2116: FILE: fs/reiserfs/super.c:610:
+  .quota_sync = vfs_quota_sync,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2117: FILE: fs/reiserfs/super.c:611:
+  .get_info = vfs_get_dqinfo,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2118: FILE: fs/reiserfs/super.c:612:
+  .set_info = vfs_set_dqinfo,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2119: FILE: fs/reiserfs/super.c:613:
+  .get_dqblk = vfs_get_dqblk,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2120: FILE: fs/reiserfs/super.c:614:
+  .set_dqblk = vfs_set_dqblk,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2142: FILE: fs/reiserfs/super.c:790:
+    if ( opt->arg_required && !(opt->arg_required & (1<<REISERFS_OPT_ALLOWEMPTY)) && !strlen (p) ) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2142: FILE: fs/reiserfs/super.c:790:
+    if ( opt->arg_required && !(opt->arg_required & (1<<REISERFS_OPT_ALLOWEMPTY)) && !strlen (p) ) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2142: FILE: fs/reiserfs/super.c:790:
+    if ( opt->arg_required && !(opt->arg_required & (1<<REISERFS_OPT_ALLOWEMPTY)) && !strlen (p) ) {
                                                       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2142: FILE: fs/reiserfs/super.c:790:
+    if ( opt->arg_required && !(opt->arg_required & (1<<REISERFS_OPT_ALLOWEMPTY)) && !strlen (p) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2142: FILE: fs/reiserfs/super.c:790:
+    if ( opt->arg_required && !(opt->arg_required & (1<<REISERFS_OPT_ALLOWEMPTY)) && !strlen (p) ) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2152: FILE: fs/reiserfs/super.c:799:
+	return opt->arg_required & ~(1<<REISERFS_OPT_ALLOWEMPTY);
 	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2160: FILE: fs/reiserfs/super.c:863:
+	{"usrjquota",	.arg_required = 'u'|(1<<REISERFS_OPT_ALLOWEMPTY), .values = NULL},
 	             	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2160: FILE: fs/reiserfs/super.c:863:
+	{"usrjquota",	.arg_required = 'u'|(1<<REISERFS_OPT_ALLOWEMPTY), .values = NULL},
 	             	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2161: FILE: fs/reiserfs/super.c:864:
+	{"grpjquota",	.arg_required = 'g'|(1<<REISERFS_OPT_ALLOWEMPTY), .values = NULL},
 	             	                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2161: FILE: fs/reiserfs/super.c:864:
+	{"grpjquota",	.arg_required = 'g'|(1<<REISERFS_OPT_ALLOWEMPTY), .values = NULL},
 	             	                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2172: FILE: fs/reiserfs/super.c:929:
+	if (c == 'u' || c == 'g') {
+	    int qtype = c == 'u' ? USRQUOTA : GRPQUOTA;

WARNING:TABSTOP: Statements should start on a tabstop
#2173: FILE: fs/reiserfs/super.c:930:
+	    int qtype = c == 'u' ? USRQUOTA : GRPQUOTA;

WARNING:TABSTOP: Statements should start on a tabstop
#2175: FILE: fs/reiserfs/super.c:932:
+	    if (sb_any_quota_enabled(s)) {

WARNING:TABSTOP: Statements should start on a tabstop
#2178: FILE: fs/reiserfs/super.c:935:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2179: FILE: fs/reiserfs/super.c:936:
+	    if (*arg) {	/* Some filename specified? */

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2180: FILE: fs/reiserfs/super.c:937:
+	        if (REISERFS_SB(s)->s_qf_names[qtype] && strcmp(REISERFS_SB(s)->s_qf_names[qtype], arg)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2180: FILE: fs/reiserfs/super.c:937:
+^I        if (REISERFS_SB(s)->s_qf_names[qtype] && strcmp(REISERFS_SB(s)->s_qf_names[qtype], arg)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2180: FILE: fs/reiserfs/super.c:937:
+	        if (REISERFS_SB(s)->s_qf_names[qtype] && strcmp(REISERFS_SB(s)->s_qf_names[qtype], arg)) {
+		    reiserfs_warning(s, "reiserfs_parse_options: %s quota file already specified.", QTYPE2NAME(qtype));

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#2181: FILE: fs/reiserfs/super.c:938:
+		    reiserfs_warning(s, "reiserfs_parse_options: %s quota file already specified.", QTYPE2NAME(qtype));

WARNING:TABSTOP: Statements should start on a tabstop
#2182: FILE: fs/reiserfs/super.c:939:
+		    return 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2184: FILE: fs/reiserfs/super.c:941:
+		if (strchr(arg, '/')) {
+		    reiserfs_warning(s, "reiserfs_parse_options: quotafile must be on filesystem root.");

WARNING:TABSTOP: Statements should start on a tabstop
#2186: FILE: fs/reiserfs/super.c:943:
+		    return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2188: FILE: fs/reiserfs/super.c:945:
+^I    ^IREISERFS_SB(s)->s_qf_names[qtype] = kmalloc(strlen(arg)+1, GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2188: FILE: fs/reiserfs/super.c:945:
+^I    ^IREISERFS_SB(s)->s_qf_names[qtype] = kmalloc(strlen(arg)+1, GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2188: FILE: fs/reiserfs/super.c:945:
+	    	REISERFS_SB(s)->s_qf_names[qtype] = kmalloc(strlen(arg)+1, GFP_KERNEL);
 	    	                                                       ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2189: FILE: fs/reiserfs/super.c:946:
+		if (!REISERFS_SB(s)->s_qf_names[qtype]) {
+		    reiserfs_warning(s, "reiserfs_parse_options: not enough memory for storing quotafile name.");

WARNING:TABSTOP: Statements should start on a tabstop
#2191: FILE: fs/reiserfs/super.c:948:
+		    return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#2194: FILE: fs/reiserfs/super.c:951:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2195: FILE: fs/reiserfs/super.c:952:
+	    else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2195: FILE: fs/reiserfs/super.c:952:
+	    }
+	    else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2195: FILE: fs/reiserfs/super.c:952:
+	    else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#2196: FILE: fs/reiserfs/super.c:953:
+		if (REISERFS_SB(s)->s_qf_names[qtype]) {
+		    kfree(REISERFS_SB(s)->s_qf_names[qtype]);

WARNING:TABSTOP: Statements should start on a tabstop
#2200: FILE: fs/reiserfs/super.c:957:
+	    }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2202: FILE: fs/reiserfs/super.c:959:
+	if (c == 'f') {
+	    if (!strcmp(arg, "vfsold"))

WARNING:TABSTOP: Statements should start on a tabstop
#2203: FILE: fs/reiserfs/super.c:960:
+	    if (!strcmp(arg, "vfsold"))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2203: FILE: fs/reiserfs/super.c:960:
+	    if (!strcmp(arg, "vfsold"))
[...]
+	    else if (!strcmp(arg, "vfsv0"))
[...]
+	    else {
[...]

WARNING:TABSTOP: Statements should start on a tabstop
#2205: FILE: fs/reiserfs/super.c:962:
+	    else if (!strcmp(arg, "vfsv0"))

WARNING:TABSTOP: Statements should start on a tabstop
#2207: FILE: fs/reiserfs/super.c:964:
+	    else {

CHECK:BRACES: Unbalanced braces around else statement
#2207: FILE: fs/reiserfs/super.c:964:
+	    else {

WARNING:TABSTOP: Statements should start on a tabstop
#2210: FILE: fs/reiserfs/super.c:967:
+	    }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2213: FILE: fs/reiserfs/super.c:970:
+	if (c == 'u' || c == 'g' || c == 'f') {
+	    reiserfs_warning(s, "reiserfs_parse_options: journalled quota options not supported.");

WARNING:TABSTOP: Statements should start on a tabstop
#2215: FILE: fs/reiserfs/super.c:972:
+	    return 0;

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#2221: FILE: fs/reiserfs/super.c:978:
+    if (!REISERFS_SB(s)->s_jquota_fmt && (REISERFS_SB(s)->s_qf_names[USRQUOTA] || REISERFS_SB(s)->s_qf_names[GRPQUOTA])) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2221: FILE: fs/reiserfs/super.c:978:
+    if (!REISERFS_SB(s)->s_jquota_fmt && (REISERFS_SB(s)->s_qf_names[USRQUOTA] || REISERFS_SB(s)->s_qf_names[GRPQUOTA])) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2224: FILE: fs/reiserfs/super.c:981:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2234: FILE: fs/reiserfs/super.c:1059:
+  int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2240: FILE: fs/reiserfs/super.c:1064:
+  if (!reiserfs_parse_options(s, arg, &mount_options, &blocks, NULL, &commit_max_age)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#2240: FILE: fs/reiserfs/super.c:1064:
+  if (!reiserfs_parse_options(s, arg, &mount_options, &blocks, NULL, &commit_max_age)) {
[...]
+    for (i = 0; i < MAXQUOTAS; i++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2242: FILE: fs/reiserfs/super.c:1066:
+    for (i = 0; i < MAXQUOTAS; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2243: FILE: fs/reiserfs/super.c:1067:
+	if (REISERFS_SB(s)->s_qf_names[i]) {
+	    kfree(REISERFS_SB(s)->s_qf_names[i]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2249: FILE: fs/reiserfs/super.c:1073:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2258: FILE: fs/reiserfs/super.c:1379:
+    s->s_qcop = &reiserfs_qctl_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2259: FILE: fs/reiserfs/super.c:1380:
+    s->dq_op = &reiserfs_quota_operations;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2270: FILE: fs/reiserfs/super.c:1814:
+    for (j = 0; j < MAXQUOTAS; j++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2271: FILE: fs/reiserfs/super.c:1815:
+	if (sbi->s_qf_names[j])
+	    kfree(sbi->s_qf_names[j]);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2272: FILE: fs/reiserfs/super.c:1816:
+	if (sbi->s_qf_names[j])
+	    kfree(sbi->s_qf_names[j]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2273: FILE: fs/reiserfs/super.c:1817:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2285: FILE: fs/reiserfs/super.c:1845:
+    struct reiserfs_transaction_handle th;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2286: FILE: fs/reiserfs/super.c:1846:
+    int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2289: FILE: fs/reiserfs/super.c:1849:
+    journal_begin(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2289: FILE: fs/reiserfs/super.c:1849:
+    journal_begin(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2290: FILE: fs/reiserfs/super.c:1850:
+    ret = dquot_initialize(inode, type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2291: FILE: fs/reiserfs/super.c:1851:
+    journal_end(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2291: FILE: fs/reiserfs/super.c:1851:
+    journal_end(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2292: FILE: fs/reiserfs/super.c:1852:
+    return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2297: FILE: fs/reiserfs/super.c:1857:
+    struct reiserfs_transaction_handle th;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2298: FILE: fs/reiserfs/super.c:1858:
+    int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2301: FILE: fs/reiserfs/super.c:1861:
+    journal_begin(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2301: FILE: fs/reiserfs/super.c:1861:
+    journal_begin(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2302: FILE: fs/reiserfs/super.c:1862:
+    ret = dquot_drop(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2303: FILE: fs/reiserfs/super.c:1863:
+    journal_end(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2303: FILE: fs/reiserfs/super.c:1863:
+    journal_end(&th, inode->i_sb, 2*REISERFS_QUOTA_INIT_BLOCKS);
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2304: FILE: fs/reiserfs/super.c:1864:
+    return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2309: FILE: fs/reiserfs/super.c:1869:
+    struct reiserfs_transaction_handle th;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2310: FILE: fs/reiserfs/super.c:1870:
+    int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2312: FILE: fs/reiserfs/super.c:1872:
+    journal_begin(&th, dquot->dq_sb, REISERFS_QUOTA_TRANS_BLOCKS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2313: FILE: fs/reiserfs/super.c:1873:
+    ret = dquot_commit(dquot);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2314: FILE: fs/reiserfs/super.c:1874:
+    journal_end(&th, dquot->dq_sb, REISERFS_QUOTA_TRANS_BLOCKS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2315: FILE: fs/reiserfs/super.c:1875:
+    return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2320: FILE: fs/reiserfs/super.c:1880:
+    struct reiserfs_transaction_handle th;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2321: FILE: fs/reiserfs/super.c:1881:
+    int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2323: FILE: fs/reiserfs/super.c:1883:
+    journal_begin(&th, dquot->dq_sb, REISERFS_QUOTA_INIT_BLOCKS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2324: FILE: fs/reiserfs/super.c:1884:
+    ret = dquot_acquire(dquot);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2325: FILE: fs/reiserfs/super.c:1885:
+    journal_end(&th, dquot->dq_sb, REISERFS_QUOTA_INIT_BLOCKS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2326: FILE: fs/reiserfs/super.c:1886:
+    return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2331: FILE: fs/reiserfs/super.c:1891:
+    struct reiserfs_transaction_handle th;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2332: FILE: fs/reiserfs/super.c:1892:
+    int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2334: FILE: fs/reiserfs/super.c:1894:
+    journal_begin(&th, dquot->dq_sb, REISERFS_QUOTA_INIT_BLOCKS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2335: FILE: fs/reiserfs/super.c:1895:
+    ret = dquot_release(dquot);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2336: FILE: fs/reiserfs/super.c:1896:
+    journal_end(&th, dquot->dq_sb, REISERFS_QUOTA_INIT_BLOCKS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2337: FILE: fs/reiserfs/super.c:1897:
+    return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2343: FILE: fs/reiserfs/super.c:1903:
+    if (REISERFS_SB(dquot->dq_sb)->s_qf_names[USRQUOTA] ||$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2343: FILE: fs/reiserfs/super.c:1903:
+    if (REISERFS_SB(dquot->dq_sb)->s_qf_names[USRQUOTA] ||
[...]
+    else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#2344: FILE: fs/reiserfs/super.c:1904:
+        REISERFS_SB(dquot->dq_sb)->s_qf_names[GRPQUOTA]) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2344: FILE: fs/reiserfs/super.c:1904:
+        REISERFS_SB(dquot->dq_sb)->s_qf_names[GRPQUOTA]) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2347: FILE: fs/reiserfs/super.c:1907:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2348: FILE: fs/reiserfs/super.c:1908:
+    else$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2348: FILE: fs/reiserfs/super.c:1908:
+    }
+    else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2354: FILE: fs/reiserfs/super.c:1914:
+    struct reiserfs_transaction_handle th;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2355: FILE: fs/reiserfs/super.c:1915:
+    int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2358: FILE: fs/reiserfs/super.c:1918:
+    journal_begin(&th, sb, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2359: FILE: fs/reiserfs/super.c:1919:
+    ret = dquot_commit_info(sb, type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2360: FILE: fs/reiserfs/super.c:1920:
+    journal_end(&th, sb, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2361: FILE: fs/reiserfs/super.c:1921:
+    return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2370: FILE: fs/reiserfs/super.c:1930:
+    int err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2371: FILE: fs/reiserfs/super.c:1931:
+    struct dentry *dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2372: FILE: fs/reiserfs/super.c:1932:
+    struct qstr name = { .name = REISERFS_SB(sb)->s_qf_names[type],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2373: FILE: fs/reiserfs/super.c:1933:
+                         .hash = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2373: FILE: fs/reiserfs/super.c:1933:
+                         .hash = 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2374: FILE: fs/reiserfs/super.c:1934:
+                         .len = strlen(REISERFS_SB(sb)->s_qf_names[type])};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2374: FILE: fs/reiserfs/super.c:1934:
+                         .len = strlen(REISERFS_SB(sb)->s_qf_names[type])};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2376: FILE: fs/reiserfs/super.c:1936:
+    dentry = lookup_hash(&name, sb->s_root);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2377: FILE: fs/reiserfs/super.c:1937:
+    if (IS_ERR(dentry))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#2377: FILE: fs/reiserfs/super.c:1937:
+    if (IS_ERR(dentry))
+            return PTR_ERR(dentry);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2378: FILE: fs/reiserfs/super.c:1938:
+            return PTR_ERR(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2378: FILE: fs/reiserfs/super.c:1938:
+            return PTR_ERR(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2379: FILE: fs/reiserfs/super.c:1939:
+    err = vfs_quota_on_mount(type, REISERFS_SB(sb)->s_jquota_fmt, dentry);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2382: FILE: fs/reiserfs/super.c:1942:
+     * throw it away */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2383: FILE: fs/reiserfs/super.c:1943:
+    d_invalidate(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2384: FILE: fs/reiserfs/super.c:1944:
+    dput(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2385: FILE: fs/reiserfs/super.c:1945:
+    return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2393: FILE: fs/reiserfs/super.c:1953:
+    int err;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2394: FILE: fs/reiserfs/super.c:1954:
+    struct nameidata nd;
                      ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2394: FILE: fs/reiserfs/super.c:1954:
+    struct nameidata nd;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2396: FILE: fs/reiserfs/super.c:1956:
+    err = path_lookup(path, LOOKUP_FOLLOW, &nd);
                                             ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2396: FILE: fs/reiserfs/super.c:1956:
+    err = path_lookup(path, LOOKUP_FOLLOW, &nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2397: FILE: fs/reiserfs/super.c:1957:
+    if (err)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2398: FILE: fs/reiserfs/super.c:1958:
+        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2398: FILE: fs/reiserfs/super.c:1958:
+        return err;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2400: FILE: fs/reiserfs/super.c:1960:
+    if (nd.mnt->mnt_sb != sb) {
         ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2400: FILE: fs/reiserfs/super.c:1960:
+    if (nd.mnt->mnt_sb != sb) {$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2401: FILE: fs/reiserfs/super.c:1961:
+	path_release(&nd);
 	              ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2402: FILE: fs/reiserfs/super.c:1962:
+        return -EXDEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2402: FILE: fs/reiserfs/super.c:1962:
+        return -EXDEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2403: FILE: fs/reiserfs/super.c:1963:
+    }$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2405: FILE: fs/reiserfs/super.c:1965:
+    if (!REISERFS_I(nd.dentry->d_inode)->i_flags & i_nopack_mask) {
                     ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2405: FILE: fs/reiserfs/super.c:1965:
+    if (!REISERFS_I(nd.dentry->d_inode)->i_flags & i_nopack_mask) {$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2407: FILE: fs/reiserfs/super.c:1967:
+	path_release(&nd);
 	              ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2409: FILE: fs/reiserfs/super.c:1969:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2411: FILE: fs/reiserfs/super.c:1971:
+    if (!REISERFS_SB(sb)->s_qf_names[USRQUOTA] &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2412: FILE: fs/reiserfs/super.c:1972:
+        !REISERFS_SB(sb)->s_qf_names[GRPQUOTA]) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2412: FILE: fs/reiserfs/super.c:1972:
+        !REISERFS_SB(sb)->s_qf_names[GRPQUOTA]) {$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2413: FILE: fs/reiserfs/super.c:1973:
+	path_release(&nd);
 	              ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2414: FILE: fs/reiserfs/super.c:1974:
+        return vfs_quota_on(sb, type, format_id, path);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2414: FILE: fs/reiserfs/super.c:1974:
+        return vfs_quota_on(sb, type, format_id, path);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2415: FILE: fs/reiserfs/super.c:1975:
+    }$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2417: FILE: fs/reiserfs/super.c:1977:
+    if (nd.dentry->d_parent->d_inode != sb->s_root->d_inode)
         ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2417: FILE: fs/reiserfs/super.c:1977:
+    if (nd.dentry->d_parent->d_inode != sb->s_root->d_inode)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2419: FILE: fs/reiserfs/super.c:1979:
+                             "Journalled quota will not work.");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2419: FILE: fs/reiserfs/super.c:1979:
+                             "Journalled quota will not work.");$

WARNING:SPLIT_STRING: quoted string split across lines
#2419: FILE: fs/reiserfs/super.c:1979:
+	reiserfs_warning(sb, "reiserfs: Quota file not on filesystem root. "
+                             "Journalled quota will not work.");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2420: FILE: fs/reiserfs/super.c:1980:
+    path_release(&nd);
                   ^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2420: FILE: fs/reiserfs/super.c:1980:
+    path_release(&nd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2421: FILE: fs/reiserfs/super.c:1981:
+    return vfs_quota_on(sb, type, format_id, path);$

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#2426: FILE: fs/reiserfs/super.c:1986:
+ * itself serializes the operations (and noone else should touch the files)
                                          ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2427: FILE: fs/reiserfs/super.c:1987:
+ * we don't have to be afraid of races */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2430: FILE: fs/reiserfs/super.c:1990:
+    struct super_block *sb = inode->i_sb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2431: FILE: fs/reiserfs/super.c:1991:
+    unsigned long blk = off >> sb->s_blocksize_bits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2432: FILE: fs/reiserfs/super.c:1992:
+    int err = 0, offset = off & (sb->s_blocksize - 1), tocopy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2433: FILE: fs/reiserfs/super.c:1993:
+    size_t toread;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2434: FILE: fs/reiserfs/super.c:1994:
+    struct buffer_head tmp_bh, *bh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2435: FILE: fs/reiserfs/super.c:1995:
+    loff_t i_size = i_size_read(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2437: FILE: fs/reiserfs/super.c:1997:
+    if (off > i_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2439: FILE: fs/reiserfs/super.c:1999:
+    if (off+len > i_size)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2439: FILE: fs/reiserfs/super.c:1999:
+    if (off+len > i_size)
            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2440: FILE: fs/reiserfs/super.c:2000:
+	len = i_size-off;
 	            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2441: FILE: fs/reiserfs/super.c:2001:
+    toread = len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2442: FILE: fs/reiserfs/super.c:2002:
+    while (toread > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2447: FILE: fs/reiserfs/super.c:2007:
+	if (err)
+	    return err;

WARNING:TABSTOP: Statements should start on a tabstop
#2448: FILE: fs/reiserfs/super.c:2008:
+	    return err;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2449: FILE: fs/reiserfs/super.c:2009:
+	if (!buffer_mapped(&tmp_bh))    /* A hole? */
+	    memset(data, 0, tocopy);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2451: FILE: fs/reiserfs/super.c:2011:
+	else {
+	    bh = sb_bread(sb, tmp_bh.b_blocknr);

CHECK:BRACES: Unbalanced braces around else statement
#2451: FILE: fs/reiserfs/super.c:2011:
+	else {

WARNING:TABSTOP: Statements should start on a tabstop
#2453: FILE: fs/reiserfs/super.c:2013:
+	    if (!bh)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2455: FILE: fs/reiserfs/super.c:2015:
+	    memcpy(data, bh->b_data+offset, tocopy);
 	                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2462: FILE: fs/reiserfs/super.c:2022:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2463: FILE: fs/reiserfs/super.c:2023:
+    return len;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2467: FILE: fs/reiserfs/super.c:2027:
+ * enough credits) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2469: FILE: fs/reiserfs/super.c:2029:
+                                    size_t len, loff_t off)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2469: FILE: fs/reiserfs/super.c:2029:
+                                    size_t len, loff_t off)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2471: FILE: fs/reiserfs/super.c:2031:
+    struct super_block *sb = inode->i_sb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2472: FILE: fs/reiserfs/super.c:2032:
+    unsigned long blk = off >> sb->s_blocksize_bits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2473: FILE: fs/reiserfs/super.c:2033:
+    int err = 0, offset = off & (sb->s_blocksize - 1), tocopy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2474: FILE: fs/reiserfs/super.c:2034:
+    size_t towrite = len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2475: FILE: fs/reiserfs/super.c:2035:
+    struct buffer_head tmp_bh, *bh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2476: FILE: fs/reiserfs/super.c:2036:
+    struct reiserfs_transaction_handle th;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2478: FILE: fs/reiserfs/super.c:2038:
+    down(&inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2479: FILE: fs/reiserfs/super.c:2039:
+    while (towrite > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2481: FILE: fs/reiserfs/super.c:2041:
+^I         sb->s_blocksize - offset : towrite;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2484: FILE: fs/reiserfs/super.c:2044:
+	if (err)
+	    goto out;

WARNING:TABSTOP: Statements should start on a tabstop
#2485: FILE: fs/reiserfs/super.c:2045:
+	    goto out;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2486: FILE: fs/reiserfs/super.c:2046:
+	if (offset || tocopy != sb->s_blocksize)
+	    bh = sb_bread(sb, tmp_bh.b_blocknr);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2488: FILE: fs/reiserfs/super.c:2048:
+	else
+	    bh = sb_getblk(sb, tmp_bh.b_blocknr);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2490: FILE: fs/reiserfs/super.c:2050:
+	if (!bh) {
+	    err = -EIO;

WARNING:TABSTOP: Statements should start on a tabstop
#2492: FILE: fs/reiserfs/super.c:2052:
+	    goto out;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2494: FILE: fs/reiserfs/super.c:2054:
+	memcpy(bh->b_data+offset, data, tocopy);
 	                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2498: FILE: fs/reiserfs/super.c:2058:
+	 * a transaction and the buffer could be removed from the transaction */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2507: FILE: fs/reiserfs/super.c:2067:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2509: FILE: fs/reiserfs/super.c:2069:
+    if (len == towrite)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2511: FILE: fs/reiserfs/super.c:2071:
+    if (inode->i_size < off+len-towrite)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2511: FILE: fs/reiserfs/super.c:2071:
+    if (inode->i_size < off+len-towrite)
                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2511: FILE: fs/reiserfs/super.c:2071:
+    if (inode->i_size < off+len-towrite)
                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2512: FILE: fs/reiserfs/super.c:2072:
+	i_size_write(inode, off+len-towrite);
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2512: FILE: fs/reiserfs/super.c:2072:
+	i_size_write(inode, off+len-towrite);
 	                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2513: FILE: fs/reiserfs/super.c:2073:
+    inode->i_version++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2514: FILE: fs/reiserfs/super.c:2074:
+    inode->i_mtime = inode->i_ctime = CURRENT_TIME;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2514: FILE: fs/reiserfs/super.c:2074:
+    inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2515: FILE: fs/reiserfs/super.c:2075:
+    mark_inode_dirty(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2516: FILE: fs/reiserfs/super.c:2076:
+    up(&inode->i_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2517: FILE: fs/reiserfs/super.c:2077:
+    return len - towrite;$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2533: FILE: include/linux/fs.h:996:
+	ssize_t (*quota_read)(struct inode *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2533: FILE: include/linux/fs.h:996:
+	ssize_t (*quota_read)(struct inode *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2533: FILE: include/linux/fs.h:996:
+	ssize_t (*quota_read)(struct inode *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#2533: FILE: include/linux/fs.h:996:
+	ssize_t (*quota_read)(struct inode *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2534: FILE: include/linux/fs.h:997:
+	ssize_t (*quota_write)(struct inode *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2534: FILE: include/linux/fs.h:997:
+	ssize_t (*quota_write)(struct inode *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2534: FILE: include/linux/fs.h:997:
+	ssize_t (*quota_write)(struct inode *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#2534: FILE: include/linux/fs.h:997:
+	ssize_t (*quota_write)(struct inode *, const char *, size_t, loff_t);

WARNING:LONG_LINE_COMMENT: line length of 152 exceeds 100 columns
#2559: FILE: include/linux/reiserfs_fs.h:1693:
+#define REISERFS_QUOTA_INIT_BLOCKS (DQUOT_MAX_WRITES*(JOURNAL_PER_BALANCE_CNT+2)+1)	/* 1 balancing, 1 bitmap, 1 data per write + stat data update */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2559: FILE: include/linux/reiserfs_fs.h:1693:
+#define REISERFS_QUOTA_INIT_BLOCKS (DQUOT_MAX_WRITES*(JOURNAL_PER_BALANCE_CNT+2)+1)	/* 1 balancing, 1 bitmap, 1 data per write + stat data update */
                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2559: FILE: include/linux/reiserfs_fs.h:1693:
+#define REISERFS_QUOTA_INIT_BLOCKS (DQUOT_MAX_WRITES*(JOURNAL_PER_BALANCE_CNT+2)+1)	/* 1 balancing, 1 bitmap, 1 data per write + stat data update */
                                                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2559: FILE: include/linux/reiserfs_fs.h:1693:
+#define REISERFS_QUOTA_INIT_BLOCKS (DQUOT_MAX_WRITES*(JOURNAL_PER_BALANCE_CNT+2)+1)	/* 1 balancing, 1 bitmap, 1 data per write + stat data update */
                                                                                 ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2585: FILE: include/linux/reiserfs_fs.h:1954:
+int reiserfs_get_block (struct inode * inode, sector_t block, struct buffer_head * bh_result, int create);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2585: FILE: include/linux/reiserfs_fs.h:1954:
+int reiserfs_get_block (struct inode * inode, sector_t block, struct buffer_head * bh_result, int create);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2585: FILE: include/linux/reiserfs_fs.h:1954:
+int reiserfs_get_block (struct inode * inode, sector_t block, struct buffer_head * bh_result, int create);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2585: FILE: include/linux/reiserfs_fs.h:1954:
+int reiserfs_get_block (struct inode * inode, sector_t block, struct buffer_head * bh_result, int create);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2597: FILE: include/linux/reiserfs_fs_sb.h:414:
+    char *s_qf_names[MAXQUOTAS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2598: FILE: include/linux/reiserfs_fs_sb.h:415:
+    int s_jquota_fmt;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2611: FILE: include/linux/security.h:1037:
+	int (*quota_on) (struct dentry * dentry);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2611: FILE: include/linux/security.h:1037:
+	int (*quota_on) (struct dentry * dentry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2620: FILE: include/linux/security.h:1284:
+static inline int security_quota_on (struct dentry * dentry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2620: FILE: include/linux/security.h:1284:
+static inline int security_quota_on (struct dentry * dentry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2623: FILE: include/linux/security.h:1286:
+	return security_ops->quota_on (dentry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2632: FILE: include/linux/security.h:1962:
+static inline int security_quota_on (struct dentry * dentry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2632: FILE: include/linux/security.h:1962:
+static inline int security_quota_on (struct dentry * dentry)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2645: FILE: security/dummy.c:95:
+static int dummy_quota_on (struct dentry *dentry)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231024.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 62 errors, 353 warnings, 69 checks, 2405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231024.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
