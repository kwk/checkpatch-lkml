ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#49: FILE: include/asm-generic/rmap.h:90:
+static inline void __pmd_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#49: FILE: include/asm-generic/rmap.h:90:
+static inline void __pmd_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: include/asm-generic/rmap.h:103:
+static inline void __pmd_remove_rmap(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: include/asm-generic/rmap.h:109:
+static inline void pgd_add_rmap(struct page * page, struct mm_struct * mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#68: FILE: include/asm-generic/rmap.h:109:
+static inline void pgd_add_rmap(struct page * page, struct mm_struct * mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: include/asm-generic/rmap.h:122:
+static inline void pgd_remove_rmap(struct page * page)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: include/asm-generic/rmap.h:136:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#103: FILE: include/linux/hugetlb.h:32:
+int try_to_unmap_hugepage(struct page *, pte_addr_t, struct list_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_addr_t' should also have an identifier name
#103: FILE: include/linux/hugetlb.h:32:
+int try_to_unmap_hugepage(struct page *, pte_addr_t, struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#103: FILE: include/linux/hugetlb.h:32:
+int try_to_unmap_hugepage(struct page *, pte_addr_t, struct list_head *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: mm/rmap.c:304:
+	struct mm_struct * mm;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: mm/rmap.c:322:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: mm/rmap.c:322:
+  $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#223: FILE: arch/i386/mm/pgtable.c:226:
+		__pmd_add_rmap(page, mm, (PTRS_PER_PMD * PTRS_PER_PTE * PAGE_SIZE)*i);
 		                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#232: FILE: arch/i386/mm/pgtable.c:233:
+		pmd_t *pmd = (pmd_t *)__va(pgd_val(pgd[i])-1);
 		                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: arch/i386/mm/pgtable.c:234:
+		pmd_t *pmd = (pmd_t *)__va(pgd_val(pgd[i])-1);
+		page = virt_to_page(pmd);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#252: FILE: arch/i386/mm/pgtable.c:250:
+			pmd_t *pmd = (pmd_t *)__va(pgd_val(pgd[i])-1);
 			                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: arch/i386/mm/pgtable.c:251:
+			pmd_t *pmd = (pmd_t *)__va(pgd_val(pgd[i])-1);
+			page = virt_to_page(pmd);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#284: FILE: arch/i386/mm/hugetlbpage.c:33:
+static inline void hugepgtable_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: arch/i386/mm/hugetlbpage.c:33:
+static inline void hugepgtable_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: arch/i386/mm/hugetlbpage.c:33:
+static inline void hugepgtable_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: arch/i386/mm/hugetlbpage.c:35:
+/* ^Ipage->mapping = (void *)mm; */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#290: FILE: arch/i386/mm/hugetlbpage.c:39:
+static inline void hugepgtable_remove_rmap(struct page * page)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#296: FILE: arch/i386/mm/hugetlbpage.c:45:
+static inline struct pte_chain *hugepage_add_rmap(struct page *page, pte_t *ptep, struct pte_chain *pte_chain)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: arch/i386/mm/hugetlbpage.c:70:
+/* ^Iset_page_count(page, 1); */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#449: FILE: arch/i386/mm/hugetlbpage.c:523:
+	unsigned long low_bits;
+	low_bits = ((unsigned long)ptep & ~PAGE_MASK)/sizeof(pte_t)*HPAGE_SIZE;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#449: FILE: arch/i386/mm/hugetlbpage.c:523:
+	low_bits = ((unsigned long)ptep & ~PAGE_MASK)/sizeof(pte_t)*HPAGE_SIZE;
 	                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#449: FILE: arch/i386/mm/hugetlbpage.c:523:
+	low_bits = ((unsigned long)ptep & ~PAGE_MASK)/sizeof(pte_t)*HPAGE_SIZE;
 	                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#453: FILE: arch/i386/mm/hugetlbpage.c:527:
+int try_to_unmap_hugepage(struct page * page, pte_addr_t paddr, struct list_head *force)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#457: FILE: arch/i386/mm/hugetlbpage.c:531:
+	struct mm_struct * mm = ptep_to_mm(ptep);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#458: FILE: arch/i386/mm/hugetlbpage.c:532:
+	struct vm_area_struct * vma;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: arch/i386/mm/hugetlbpage.c:537:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#474: FILE: arch/i386/mm/hugetlbpage.c:548:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#483: FILE: arch/i386/mm/hugetlbpage.c:557:
+	if (force == NULL && (vma->vm_flags & VM_LOCKED)) {
+		BUG();	/* Never come here */
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!force"
#483: FILE: arch/i386/mm/hugetlbpage.c:557:
+	if (force == NULL && (vma->vm_flags & VM_LOCKED)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#484: FILE: arch/i386/mm/hugetlbpage.c:558:
+		BUG();	/* Never come here */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#493: FILE: arch/i386/mm/hugetlbpage.c:567:
+		BUG();	/* Never come here */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#504: FILE: arch/i386/mm/hugetlbpage.c:578:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: arch/i386/mm/hugetlbpage.c:580:
+			BUG_ON(!pte_file(*ptep));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290286.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 17 warnings, 8 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290286.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
