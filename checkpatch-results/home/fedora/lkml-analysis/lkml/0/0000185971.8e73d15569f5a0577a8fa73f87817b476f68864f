WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#38: 
Here is the Here is the architecture dependant part of ARTiS for IA-64.
                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff -urpN -X /export/src/patches/dontdiff -X /export/src/patches/dontdiff2 2.6.11-pfm/arch/ia64/Kconfig 2.6.11-artis-cvs/arch/ia64/Kconfig

WARNING:TYPO_SPELLING: 'debuging' may be misspelled - perhaps 'debugging'?
#70: FILE: arch/ia64/Kconfig:65:
+		Activate debuging code in ARTiS, you probably don't want this, excepted
 		         ^^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#99: FILE: arch/ia64/kernel/process.c:241:
+	memset(bt, 0, ARTIS_BT_SIZE*sizeof(void *));
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: arch/ia64/kernel/process.c:242:
+^Ir_unw=0; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#100: FILE: arch/ia64/kernel/process.c:242:
+	r_unw=0; 
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#101: FILE: arch/ia64/kernel/process.c:243:
+	artis_skip_bt=0;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#102: FILE: arch/ia64/kernel/process.c:244:
+	for(i=artis_skip_bt-1;
 	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#102: FILE: arch/ia64/kernel/process.c:244:
+	for(i=artis_skip_bt-1;
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: arch/ia64/kernel/process.c:244:
+	for(i=artis_skip_bt-1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: arch/ia64/kernel/process.c:245:
+^I^I^Ii>=0 && r_unw>=0; $

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#103: FILE: arch/ia64/kernel/process.c:245:
+			i>=0 && r_unw>=0; 
 			 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#103: FILE: arch/ia64/kernel/process.c:245:
+			i>=0 && r_unw>=0; 
 			             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#104: FILE: arch/ia64/kernel/process.c:246:
+			i--, r_unw=unw_unwind(info)) {
 			          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#111: FILE: arch/ia64/kernel/process.c:253:
+	for(i=ARTIS_BT_SIZE-1;
 	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#111: FILE: arch/ia64/kernel/process.c:253:
+	for(i=ARTIS_BT_SIZE-1;
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#111: FILE: arch/ia64/kernel/process.c:253:
+	for(i=ARTIS_BT_SIZE-1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: arch/ia64/kernel/process.c:254:
+^I^I^Ii>=0 && r_unw>=0; $

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#112: FILE: arch/ia64/kernel/process.c:254:
+			i>=0 && r_unw>=0; 
 			 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#112: FILE: arch/ia64/kernel/process.c:254:
+			i>=0 && r_unw>=0; 
 			             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#113: FILE: arch/ia64/kernel/process.c:255:
+			i--, r_unw=unw_unwind(info)) {
 			          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#122: FILE: arch/ia64/kernel/process.c:264:
+}
+void

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#122: FILE: arch/ia64/kernel/process.c:264:
+void
+artis_put_trace(void **bt, struct task_struct *task, unsigned long *stack) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#145: FILE: include/asm-ia64/bug.h:11:
+#define _old_BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); ia64_abort(); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#145: FILE: include/asm-ia64/bug.h:11:
+#define _old_BUG() do { printk("kernel BUG at %s:%d!\n", __FILE__, __LINE__); ia64_abort(); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#148: FILE: include/asm-ia64/bug.h:14:
+#define BUG() do { ARTIS_BUG(1,0); } while (0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: include/asm-ia64/bug.h:14:
+#define BUG() do { ARTIS_BUG(1,0); } while (0)
                               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#148: FILE: include/asm-ia64/bug.h:14:
+#define BUG() do { ARTIS_BUG(1,0); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#150: FILE: include/asm-ia64/bug.h:16:
+#define BUG() _old_BUG()

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: include/asm-ia64/system.h:144:
+ * non real-time CPU */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: include/asm-ia64/system.h:146:
+#define __local_irq_save(x) ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: include/asm-ia64/system.h:147:
+do { ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: include/asm-ia64/system.h:148:
+^Iartis_force_migration(); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: include/asm-ia64/system.h:149:
+^I_raw__local_irq_save(x); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: include/asm-ia64/system.h:152:
+#define __local_irq_disable() ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: include/asm-ia64/system.h:153:
+do { ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: include/asm-ia64/system.h:154:
+^Iartis_force_migration(); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: include/asm-ia64/system.h:155:
+^I_raw__local_irq_disable(); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: include/asm-ia64/system.h:158:
+#define __local_irq_restore(x) ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#199: FILE: include/asm-ia64/system.h:158:
+#define __local_irq_restore(x) 			\
+do { 						\
+	if (!((x) & IA64_PSR_I)) 		\
+		artis_force_migration(); 	\
+	_raw__local_irq_restore(x); 		\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: include/asm-ia64/system.h:159:
+do { ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: include/asm-ia64/system.h:160:
+^Iif (!((x) & IA64_PSR_I)) ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: include/asm-ia64/system.h:161:
+^I^Iartis_force_migration(); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: include/asm-ia64/system.h:162:
+^I_raw__local_irq_restore(x); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: include/asm-ia64/system.h:167:
+#define __local_irq_save(x) ^I_raw__local_irq_save(x)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#209: FILE: include/asm-ia64/system.h:168:
+#define __local_irq_disable() ^I_raw__local_irq_disable()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: include/asm-ia64/system.h:169:
+#define __local_irq_restore(x) ^I_raw__local_irq_restore(x)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: include/asm-ia64/system.h:320:
+/* On IA64, the end of scheduler releases the runqueue lock, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: include/asm-ia64/system.h:323:
+ * */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: include/asm-ia64/system.h:324:
+#define artis_complete_arch(rq, task) ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#226: FILE: include/asm-ia64/system.h:324:
+#define artis_complete_arch(rq, task) 		\
+do { 						\
+	spin_lock(&(rq)->lock); 		\
+	if ((task)->array) 			\
+		deactivate_task((task),(rq)); 	\
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'task' - possible side-effects?
#226: FILE: include/asm-ia64/system.h:324:
+#define artis_complete_arch(rq, task) 		\
+do { 						\
+	spin_lock(&(rq)->lock); 		\
+	if ((task)->array) 			\
+		deactivate_task((task),(rq)); 	\
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: include/asm-ia64/system.h:325:
+do { ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: include/asm-ia64/system.h:326:
+^Ispin_lock(&(rq)->lock); ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: include/asm-ia64/system.h:327:
+^Iif ((task)->array) ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: include/asm-ia64/system.h:328:
+^I^Ideactivate_task((task),(rq)); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: include/asm-ia64/system.h:328:
+		deactivate_task((task),(rq)); 	\
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: include/asm-ia64/system.h:329:
+} while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185971.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 31 warnings, 7 checks, 173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185971.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
