WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
This patch adds the capability for suitably privileged user-level processes to 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: drivers/usr/Makefile:1:
+obj-y^I+= sys.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#141: FILE: drivers/usr/sys.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: drivers/usr/sys.c:5:
+ * National ICT Australia, and the Gelato Project, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: drivers/usr/sys.c:7:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#162: FILE: drivers/usr/sys.c:22:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#163: FILE: drivers/usr/sys.c:23:
+#include <asm/io.h> /* virt_to_phys() on alpha */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: drivers/usr/sys.c:33:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#186: FILE: drivers/usr/sys.c:46:
+static struct file_operations usr_pci_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: drivers/usr/sys.c:50:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: drivers/usr/sys.c:61:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#202: FILE: drivers/usr/sys.c:62:
+static struct super_block *usr_pci_getsb(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: drivers/usr/sys.c:66:
+^Ivoid *data) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: drivers/usr/sys.c:71:
+
+

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#212: FILE: drivers/usr/sys.c:72:
+static struct dentry_operations usr_pci_dentry_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: drivers/usr/sys.c:76:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#223: FILE: drivers/usr/sys.c:83:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#247: FILE: drivers/usr/sys.c:107:
+	unsigned nent;		 /* number of entries in sg[] */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#248: FILE: drivers/usr/sys.c:108:
+	unsigned npages;	 /* number of entries in pages[] */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#265: FILE: drivers/usr/sys.c:125:
+
+

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#267: FILE: drivers/usr/sys.c:127:
+static struct vm_operations_struct usr_pci_vmop =  {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#271: FILE: drivers/usr/sys.c:131:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: drivers/usr/sys.c:142:
+ * If the mapping is for fewer than KMALLOC_BREAKPOINT pages, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: drivers/usr/sys.c:160:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip"
#301: FILE: drivers/usr/sys.c:161:
+	if (ip == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/usr/sys.c:164:
+^I^Iip = kmalloc(sizeof (*ip) + $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#304: FILE: drivers/usr/sys.c:164:
+		ip = kmalloc(sizeof (*ip) + 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/usr/sys.c:165:
+^I^I^I     npages * (sizeof (struct page *) + $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#305: FILE: drivers/usr/sys.c:165:
+			     npages * (sizeof (struct page *) + 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: drivers/usr/sys.c:168:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#318: FILE: drivers/usr/sys.c:178:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: drivers/usr/sys.c:183:
+ * If the mapping is for fewer than KMALLOC_BREAKPOINT pages, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: drivers/usr/sys.c:188:
+static void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: drivers/usr/sys.c:212:
+ * As there's no next pointer in a struct usr_pci_sglist, $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#366: FILE: drivers/usr/sys.c:226:
+		if ((p = hw_free))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: drivers/usr/sys.c:232:
+^Ip = kmalloc((sizeof *p) * $

WARNING:SIZEOF_PARENTHESIS: sizeof *p should be sizeof(*p)
#372: FILE: drivers/usr/sys.c:232:
+	p = kmalloc((sizeof *p) * 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: drivers/usr/sys.c:233:
+^I^I    (n >= KMALLOC_BREAKPOINT ? n : KMALLOC_BREAKPOINT), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: drivers/usr/sys.c:243:
+ * If the number of pages covered is small (less than KMALLOC_BREAKPOINT) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: drivers/usr/sys.c:270:
+	struct inode *inode = new_inode(usr_pci_mnt->mnt_sb);
+	if (!inode)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#422: FILE: drivers/usr/sys.c:282:
+	inode->i_mode = S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#425: FILE: drivers/usr/sys.c:285:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: drivers/usr/sys.c:297:
+ * It's used to prevent the device from being released while it $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: drivers/usr/sys.c:298:
+ * is registered as a block device, and to return data needed for the $

WARNING:TYPO_SPELLING: 'hould' may be misspelled - perhaps 'hold'?
#441: FILE: drivers/usr/sys.c:301:
+ * In use, it hould be paired with an (eventual) usr_pci_put_dev() call.
               ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: drivers/usr/sys.c:303:
+int $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#446: FILE: drivers/usr/sys.c:306:
+	struct file *filp = fget(fd);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#449: FILE: drivers/usr/sys.c:309:
+	if (!filp)
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#452: FILE: drivers/usr/sys.c:312:
+		fput(filp);
 		     ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: drivers/usr/sys.c:318:
+		printk(KERN_ERR "usr_pci_fs file has no PCI device???");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#462: FILE: drivers/usr/sys.c:322:
+	*fpp = filp;
 	       ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#476: FILE: drivers/usr/sys.c:336:
+EXPORT_SYMBOL(usr_pci_put_dev);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: drivers/usr/sys.c:343:
+ * Find and attempt to enable the device at (bus, slot, function) as a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: drivers/usr/sys.c:345:
+ * Set up an open-file descriptor, with the device and $

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#488: FILE: drivers/usr/sys.c:348:
+long asmlinkage

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: drivers/usr/sys.c:363:
+
+

WARNING:SIZEOF_PARENTHESIS: sizeof *mp should be sizeof(*mp)
#506: FILE: drivers/usr/sys.c:366:
+	mp = kmalloc(sizeof *mp, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp"
#507: FILE: drivers/usr/sys.c:367:
+	if (mp == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: drivers/usr/sys.c:371:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!devp"
#513: FILE: drivers/usr/sys.c:373:
+	if (devp == NULL) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#520: FILE: drivers/usr/sys.c:380:
+	this.hash = (bus<<8) | fn;
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#547: FILE: drivers/usr/sys.c:407:
+	if ((error = pci_enable_device(devp)) != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#547: FILE: drivers/usr/sys.c:407:
+	if ((error = pci_enable_device(devp)) != 0) {
+		goto out2;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: drivers/usr/sys.c:416:
+        pci_set_master(devp);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: drivers/usr/sys.c:416:
+        pci_set_master(devp);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#558: FILE: drivers/usr/sys.c:418:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#574: FILE: drivers/usr/sys.c:434:
+	fd = error = get_unused_fd();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#575: FILE: drivers/usr/sys.c:435:
+	if (error < 0) {
+		goto out5;
+	}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#593: FILE: drivers/usr/sys.c:453:
+	iput(inode);
 	^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: drivers/usr/sys.c:461:
+^Ikfree(mp);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: drivers/usr/sys.c:466:
+ * Filesystem glue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: drivers/usr/sys.c:468:
+static int __init $

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#625: FILE: drivers/usr/sys.c:485:
+__initcall(usr_pci_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#627: FILE: drivers/usr/sys.c:487:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: drivers/usr/sys.c:493:
+ * This function is called when the reference count on the open $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: drivers/usr/sys.c:494:
+ * file falls to zero. $

WARNING:LINE_SPACING: Missing a blank line after declarations
#655: FILE: drivers/usr/sys.c:515:
+		struct internal_mapping_info *im = mip;
+		mip = mip->next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: drivers/usr/sys.c:521:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#661: FILE: drivers/usr/sys.c:521:
+
+		

CHECK:LINE_SPACING: Please don't use multiple blank lines
#666: FILE: drivers/usr/sys.c:526:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: drivers/usr/sys.c:534:
+ * Find a free area of memory, map the kernel pages into it, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: drivers/usr/sys.c:536:
+ * Returns the user-space virtual address of the mapping, or ENOMEM if $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#681: FILE: drivers/usr/sys.c:541:
+       unsigned long origlen, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: drivers/usr/sys.c:541:
+       unsigned long origlen, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: drivers/usr/sys.c:542:
+       unsigned long dmaaddr, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: drivers/usr/sys.c:542:
+       unsigned long dmaaddr, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: drivers/usr/sys.c:543:
+       struct pci_dev *devp)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#691: FILE: drivers/usr/sys.c:551:
+
+

ERROR:SPACING: space required before the open brace '{'
#697: FILE: drivers/usr/sys.c:557:
+	if (!mp){

WARNING:SIZEOF_PARENTHESIS: sizeof *vma should be sizeof(*vma)
#701: FILE: drivers/usr/sys.c:561:
+	memset(vma, 0, sizeof *vma);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#709: FILE: drivers/usr/sys.c:569:
+	vma->vm_flags = VM_WRITE|VM_MAYWRITE|VM_READ|VM_MAYREAD|VM_RESERVED|VM_DONTCOPY;
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#709: FILE: drivers/usr/sys.c:569:
+	vma->vm_flags = VM_WRITE|VM_MAYWRITE|VM_READ|VM_MAYREAD|VM_RESERVED|VM_DONTCOPY;
 	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#709: FILE: drivers/usr/sys.c:569:
+	vma->vm_flags = VM_WRITE|VM_MAYWRITE|VM_READ|VM_MAYREAD|VM_RESERVED|VM_DONTCOPY;
 	                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#709: FILE: drivers/usr/sys.c:569:
+	vma->vm_flags = VM_WRITE|VM_MAYWRITE|VM_READ|VM_MAYREAD|VM_RESERVED|VM_DONTCOPY;
 	                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#709: FILE: drivers/usr/sys.c:569:
+	vma->vm_flags = VM_WRITE|VM_MAYWRITE|VM_READ|VM_MAYREAD|VM_RESERVED|VM_DONTCOPY;
 	                                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#710: FILE: drivers/usr/sys.c:570:
+	vma->vm_flags |= VM_SHM|VM_LOCKED;
 	                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#712: FILE: drivers/usr/sys.c:572:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#713: FILE: drivers/usr/sys.c:573:
+^I * Should this be marked uncached? $

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: drivers/usr/sys.c:579:
+ ^Ivma->vm_private_data = mp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#719: FILE: drivers/usr/sys.c:579:
+ ^Ivma->vm_private_data = mp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: drivers/usr/sys.c:579:
+ ^Ivma->vm_private_data = mp;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#722: FILE: drivers/usr/sys.c:582:
+	addr = get_unmapped_area(NULL, 0, len, 0, MAP_LOCKED|MAP_SHARED);
 	                                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: drivers/usr/sys.c:599:
+		long page = virt_to_phys(kaddr);
+		if (remap_pfn_range(vma, addr, page >> PAGE_SHIFT, PAGE_SIZE, PAGE_SHARED)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#753: FILE: drivers/usr/sys.c:613:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: drivers/usr/sys.c:618:
+ * This routine will be called from the vma infrastructure's teardown on $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#762: FILE: drivers/usr/sys.c:622:
+static void
+usr_pci_unmapconsistent(struct vm_area_struct *vma) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: drivers/usr/sys.c:625:
+^Ivma->vm_private_data = NULL;^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#765: FILE: drivers/usr/sys.c:625:
+	struct consistent_mem *mp = (struct consistent_mem *)vma->vm_private_data;
+	vma->vm_private_data = NULL;	

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#784: FILE: drivers/usr/sys.c:644:
+long asmlinkage

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#788: FILE: drivers/usr/sys.c:648:
+	struct file *filp = fget(fd);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#797: FILE: drivers/usr/sys.c:657:
+	if (!filp)
 	     ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: drivers/usr/sys.c:661:
+	BUG_ON(filp->f_op != &usr_pci_fops);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#805: FILE: drivers/usr/sys.c:665:
+		printk(KERN_ERR "usr_pci_fs file has no PCI device???");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vaddr"
#817: FILE: drivers/usr/sys.c:677:
+	if (vaddr == NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: drivers/usr/sys.c:692:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#832: FILE: drivers/usr/sys.c:692:
+       } else {
+		udma_addr = dma_handle;

WARNING:SIZEOF_PARENTHESIS: sizeof virtaddr should be sizeof(virtaddr)
#834: FILE: drivers/usr/sys.c:694:
+		if (copy_to_user(vaddrp, &virtaddr, sizeof virtaddr) ||

WARNING:SIZEOF_PARENTHESIS: sizeof udma_addr should be sizeof(udma_addr)
#835: FILE: drivers/usr/sys.c:695:
+		    copy_to_user(dmaaddrp, &udma_addr, sizeof udma_addr)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#841: FILE: drivers/usr/sys.c:701:
+	fput(filp);
 	     ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: drivers/usr/sys.c:711:
+ * then converts the resulting scatterlist into something $

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#855: FILE: drivers/usr/sys.c:715:
+long asmlinkage

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#865: FILE: drivers/usr/sys.c:725:
+	struct file *filp = fget(fd);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#872: FILE: drivers/usr/sys.c:732:
+	if (!filp) {
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#873: FILE: drivers/usr/sys.c:733:
+		printk("!filp\n");
 		         ^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#873: FILE: drivers/usr/sys.c:733:
+		printk("!filp\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#878: FILE: drivers/usr/sys.c:738:
+		printk("Bad fops\n");

WARNING:SIZEOF_PARENTHESIS: sizeof m should be sizeof(m)
#883: FILE: drivers/usr/sys.c:743:
+	if (copy_from_user(&m, mp, sizeof m)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#889: FILE: drivers/usr/sys.c:749:
+	BUG_ON(!p);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#901: FILE: drivers/usr/sys.c:761:
+		printk("bad m.direction %d\n", m.direction);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm.nents < maxpages'
#906: FILE: drivers/usr/sys.c:766:
+	if (unlikely((m.nents < maxpages) || (m.size == 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm.size == 0'
#906: FILE: drivers/usr/sys.c:766:
+	if (unlikely((m.nents < maxpages) || (m.size == 0))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#907: FILE: drivers/usr/sys.c:767:
+		printk("Bad size (%d) or nents (%d) < maxpages (%d)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!imp"
#914: FILE: drivers/usr/sys.c:774:
+	if (unlikely(imp == NULL)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#921: FILE: drivers/usr/sys.c:781:
+^Inpages = get_user_pages(current, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: drivers/usr/sys.c:782:
+^I^I^I^Icurrent->mm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#923: FILE: drivers/usr/sys.c:783:
+^I^I^I^I(unsigned long)m.virtaddr, $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#937: FILE: drivers/usr/sys.c:797:
+	if (unlikely(npages < m.size/PAGE_SIZE)){
 	                            ^

ERROR:SPACING: space required before the open brace '{'
#937: FILE: drivers/usr/sys.c:797:
+	if (unlikely(npages < m.size/PAGE_SIZE)){

WARNING:SPACING: space prohibited before semicolon
#943: FILE: drivers/usr/sys.c:803:
+		ret = -EFAULT ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#959: FILE: drivers/usr/sys.c:819:
+		unsigned long len = m.size - imp->sg[0].length;
+		for (;len >= PAGE_SIZE && i < npages ; i++) {

ERROR:SPACING: space required after that ';' (ctx:BxV)
#959: FILE: drivers/usr/sys.c:819:
+		for (;len >= PAGE_SIZE && i < npages ; i++) {
 		     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#966: FILE: drivers/usr/sys.c:826:
+			BUG_ON(i >= npages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#967: FILE: drivers/usr/sys.c:827:
+			BUG_ON(len >= PAGE_SIZE);

WARNING:SIZEOF_PARENTHESIS: sizeof imp->m should be sizeof(imp->m)
#987: FILE: drivers/usr/sys.c:847:
+	if (copy_to_user(mp, &imp->m, sizeof imp->m) ||

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1003: FILE: drivers/usr/sys.c:863:
+	fput(filp);
 	     ^^^^

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#1015: FILE: drivers/usr/sys.c:875:
+long asmlinkage

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1023: FILE: drivers/usr/sys.c:883:
+	struct file *filp = fget(fd);
 	             ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1027: FILE: drivers/usr/sys.c:887:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1028: FILE: drivers/usr/sys.c:888:
+	if (!filp)
 	     ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1030: FILE: drivers/usr/sys.c:890:
+	BUG_ON(filp->f_op != &usr_pci_fops);

WARNING:SIZEOF_PARENTHESIS: sizeof m should be sizeof(m)
#1032: FILE: drivers/usr/sys.c:892:
+	if (copy_from_user(&m, mp, sizeof m)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1037: FILE: drivers/usr/sys.c:897:
+	BUG_ON(!p);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: drivers/usr/sys.c:901:
+^I * Linear search is adequate for this, as most drivers $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!imp"
#1056: FILE: drivers/usr/sys.c:916:
+	if (imp == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1065: FILE: drivers/usr/sys.c:925:
+	fput(filp);
 	     ^^^^

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#1071: FILE: drivers/usr/sys.c:931:
+long asmlinkage

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1074: FILE: drivers/usr/sys.c:934:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#1077: FILE: drivers/usr/sys.c:937:
+long asmlinkage

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1079: FILE: drivers/usr/sys.c:939:
+	return -ENOSYS;

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#1082: FILE: drivers/usr/sys.c:942:
+long asmlinkage

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1084: FILE: drivers/usr/sys.c:944:
+	return -ENOSYS;

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'long'
#1087: FILE: drivers/usr/sys.c:947:
+long asmlinkage

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1090: FILE: drivers/usr/sys.c:950:
+	return -ENOSYS;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1098: FILE: include/linux/usrdrv.h:1:
+/************************************************************************

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1109: FILE: include/linux/usrdrv.h:12:
+extern void usr_pci_put_dev(struct file *fp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1110: FILE: include/linux/usrdrv.h:13:
+extern int usr_pci_get_dev(int, struct pci_dev **, struct file **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1110: FILE: include/linux/usrdrv.h:13:
+extern int usr_pci_get_dev(int, struct pci_dev **, struct file **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev **' should also have an identifier name
#1110: FILE: include/linux/usrdrv.h:13:
+extern int usr_pci_get_dev(int, struct pci_dev **, struct file **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file **' should also have an identifier name
#1110: FILE: include/linux/usrdrv.h:13:
+extern int usr_pci_get_dev(int, struct pci_dev **, struct file **);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1131: FILE: include/linux/usrdrv.h:34:
+ */ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1137: FILE: include/linux/usrdrv.h:40:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: include/linux/usrdrv.h:44:
+ * nents: As passed into usr_pci_mmap will contain total $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1143: FILE: include/linux/usrdrv.h:46:
+ *^I  as passed out, will contain number of valid entries $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1157: FILE: include/linux/usrdrv.h:60:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1158: FILE: include/linux/usrdrv.h:61:
+		
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1170: FILE: drivers/pci/Kconfig:51:
+config	USRDEV
+	bool "Framework for user-mode PCI drivers"
+	depends on PCI
+	---help---

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200063.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 83 warnings, 41 checks, 1035 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000200063.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
