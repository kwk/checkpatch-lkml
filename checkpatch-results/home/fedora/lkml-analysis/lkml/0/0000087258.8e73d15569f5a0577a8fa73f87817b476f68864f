WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
The following patch against 2.6.17-rc1-mm1 introduces a kernel API for inotify.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#108: FILE: fs/Kconfig:408:
+config INOTIFY_USER
+	bool "Inotify support for userspace"
+	depends on INOTIFY
+	default y
+	---help---
+	  Say Y here to enable inotify support for userspace, including the
+	  associated system calls.  Inotify allows monitoring of both files and
+	  directories via a single open fd.  Events are read from the file
+	  descriptor, which is also select()- and poll()-able.
+
+	  For more information, see Documentation/filesystems/inotify.txt
+
+	  If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: fs/inotify.c:41:
+ * ^I^Iinotify_handle->mutex (protects inotify_handle and watches->h_list)$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#241: FILE: fs/inotify.c:83:
+	void (*callback)(struct inotify_watch *, u32, u32, u32, const char *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#241: FILE: fs/inotify.c:83:
+	void (*callback)(struct inotify_watch *, u32, u32, u32, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#241: FILE: fs/inotify.c:83:
+	void (*callback)(struct inotify_watch *, u32, u32, u32, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#241: FILE: fs/inotify.c:83:
+	void (*callback)(struct inotify_watch *, u32, u32, u32, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#241: FILE: fs/inotify.c:83:
+	void (*callback)(struct inotify_watch *, u32, u32, u32, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#241: FILE: fs/inotify.c:83:
+	void (*callback)(struct inotify_watch *, u32, u32, u32, const char *,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#518: FILE: fs/inotify.c:131:
+		ret = idr_get_new_above(&ih->idr, watch, ih->last_wd+1, &watch->wd);
 		                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#693: FILE: fs/inotify.c:286:
+			struct inotify_handle *ih= watch->ih;
 			                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#694: FILE: fs/inotify.c:287:
+			struct inotify_handle *ih= watch->ih;
+			ih->callback(watch, watch->wd, mask, cookie, name,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#725: FILE: fs/inotify.c:404:
+			struct inotify_handle *ih= watch->ih;
 			                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#726: FILE: fs/inotify.c:405:
+			struct inotify_handle *ih= watch->ih;
+			ih->callback(watch, watch->wd, IN_UNMOUNT, 0, NULL,

WARNING:LINE_SPACING: Missing a blank line after declarations
#743: FILE: fs/inotify.c:430:
+		struct inotify_handle *ih = watch->ih;
+		mutex_lock(&ih->mutex);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ih)...) over kmalloc(sizeof(struct inotify_handle)...)
#845: FILE: fs/inotify.c:450:
+	ih = kmalloc(sizeof(struct inotify_handle), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1351: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1356: FILE: fs/inotify_user.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1405: FILE: fs/inotify_user.c:50:
+ * ^Iinode->inotify_mutex (protects inode's watch list)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1406: FILE: fs/inotify_user.c:51:
+ * ^I^Iinotify_handle->mutex (protects inotify_handle's watch list)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1407: FILE: fs/inotify_user.c:52:
+ * ^I^I^Iinotify_dev->ev_mutex (protects device's event queue)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1427: FILE: fs/inotify_user.c:72:
+^Iwait_queue_head_t ^Iwq;^I^I/* wait queue for i/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1430: FILE: fs/inotify_user.c:75:
+^Istruct list_head ^Ievents;^I^I/* list of queued events */$

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#1477: FILE: fs/inotify_user.c:122:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#1487: FILE: fs/inotify_user.c:132:
+		.extra1		= &zero,

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#1497: FILE: fs/inotify_user.c:142:
+		.extra1		= &zero

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1534: FILE: fs/inotify_user.c:179:
+static struct inotify_kernel_event * kernel_event(s32 wd, u32 mask, u32 cookie,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1626: FILE: fs/inotify_user.c:271:
+	if (last && last->event.mask == mask && last->event.wd == wd &&
+			last->event.cookie == cookie) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1683: FILE: fs/inotify_user.c:328:
+		struct inotify_kernel_event *kevent;
+		kevent = inotify_dev_get_event(dev);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1689: FILE: fs/inotify_user.c:334:
+ * find_inode - resolve a user-given path to a specific inode and return a nd
                                                                            ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1691: FILE: fs/inotify_user.c:336:
+static int find_inode(const char __user *dirname, struct nameidata *nd,
                                                                     ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1692: FILE: fs/inotify_user.c:337:
+		      unsigned flags)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1696: FILE: fs/inotify_user.c:341:
+	error = __user_walk(dirname, flags, nd);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1700: FILE: fs/inotify_user.c:345:
+	error = vfs_permission(nd, MAY_READ);
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1702: FILE: fs/inotify_user.c:347:
+		path_release(nd);
 		             ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1759: FILE: fs/inotify_user.c:404:
+	size_t event_size = sizeof (struct inotify_event);

ERROR:SPACING: space required before the open brace '{'
#1818: FILE: fs/inotify_user.c:463:
+			if (copy_to_user(buf, kevent->name, kevent->event.len)){

CHECK:SPACING: No space is necessary after a cast
#1859: FILE: fs/inotify_user.c:504:
+	p = (void __user *) arg;

CHECK:SPACING: No space is necessary after a cast
#1863: FILE: fs/inotify_user.c:508:
+		ret = put_user(dev->queue_size, (int __user *) p);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1883: FILE: fs/inotify_user.c:528:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1890: FILE: fs/inotify_user.c:535:
+	filp = get_empty_filp();
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1891: FILE: fs/inotify_user.c:536:
+	if (!filp) {
 	     ^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct inotify_device)...)
#1903: FILE: fs/inotify_user.c:548:
+	dev = kmalloc(sizeof(struct inotify_device), GFP_KERNEL);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1910: FILE: fs/inotify_user.c:555:
+	if (unlikely(IS_ERR(ih))) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1936: FILE: fs/inotify_user.c:581:
+	fd_install(fd, filp);
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1943: FILE: fs/inotify_user.c:588:
+	put_filp(filp);
 	         ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1953: FILE: fs/inotify_user.c:598:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1954: FILE: fs/inotify_user.c:599:
+	struct file *filp;
 	             ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1956: FILE: fs/inotify_user.c:601:
+	unsigned flags = 0;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1958: FILE: fs/inotify_user.c:603:
+	filp = fget_light(fd, &fput_needed);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1959: FILE: fs/inotify_user.c:604:
+	if (unlikely(!filp))
 	              ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1973: FILE: fs/inotify_user.c:618:
+	ret = find_inode(path, &nd, flags);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1977: FILE: fs/inotify_user.c:622:
+	/* inode held in place by reference to nd; dev by fget on fd */
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1978: FILE: fs/inotify_user.c:623:
+	inode = nd.dentry->d_inode;
 	        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1987: FILE: fs/inotify_user.c:632:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1989: FILE: fs/inotify_user.c:634:
+	fput_light(filp, fput_needed);
 	           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1995: FILE: fs/inotify_user.c:640:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1999: FILE: fs/inotify_user.c:644:
+	filp = fget_light(fd, &fput_needed);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2000: FILE: fs/inotify_user.c:645:
+	if (unlikely(!filp))
 	              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2015: FILE: fs/inotify_user.c:660:
+	fput_light(filp, fput_needed);
 	           ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2023: FILE: fs/inotify_user.c:668:
+    return get_sb_pseudo(fs_type, "inotify", NULL, 0xBAD1DEA);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2027: FILE: fs/inotify_user.c:672:
+    .name           = "inotifyfs",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2028: FILE: fs/inotify_user.c:673:
+    .get_sb         = inotify_get_sb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2029: FILE: fs/inotify_user.c:674:
+    .kill_sb        = kill_anon_super,$

WARNING:TYPO_SPELLING: 'cannnot' may be misspelled - perhaps 'cannot'?
#2033: FILE: fs/inotify_user.c:678:
+ * inotify_user_setup - Our initialization function.  Note that we cannnot return
                                                                    ^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2074: FILE: include/linux/fsnotify.h:57:
+	inotify_inode_queue_event(old_dir, IN_MOVED_FROM|isdir,cookie,old_name,
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2074: FILE: include/linux/fsnotify.h:57:
+	inotify_inode_queue_event(old_dir, IN_MOVED_FROM|isdir,cookie,old_name,
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2074: FILE: include/linux/fsnotify.h:57:
+	inotify_inode_queue_event(old_dir, IN_MOVED_FROM|isdir,cookie,old_name,
 	                                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2076: FILE: include/linux/fsnotify.h:59:
+	inotify_inode_queue_event(new_dir, IN_MOVED_TO|isdir, cookie, new_name,
 	                                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2224: FILE: include/linux/inotify.h:105:
+extern struct inotify_handle *inotify_init(void (*)(struct inotify_watch *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2228: FILE: include/linux/inotify.h:109:
+extern void inotify_destroy(struct inotify_handle *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_handle *' should also have an identifier name
#2228: FILE: include/linux/inotify.h:109:
+extern void inotify_destroy(struct inotify_handle *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2229: FILE: include/linux/inotify.h:110:
+extern __s32 inotify_find_watch(struct inotify_handle *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_handle *' should also have an identifier name
#2229: FILE: include/linux/inotify.h:110:
+extern __s32 inotify_find_watch(struct inotify_handle *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2229: FILE: include/linux/inotify.h:110:
+extern __s32 inotify_find_watch(struct inotify_handle *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch **' should also have an identifier name
#2229: FILE: include/linux/inotify.h:110:
+extern __s32 inotify_find_watch(struct inotify_handle *, struct inode *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2231: FILE: include/linux/inotify.h:112:
+extern __s32 inotify_find_update_watch(struct inotify_handle *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_handle *' should also have an identifier name
#2231: FILE: include/linux/inotify.h:112:
+extern __s32 inotify_find_update_watch(struct inotify_handle *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2231: FILE: include/linux/inotify.h:112:
+extern __s32 inotify_find_update_watch(struct inotify_handle *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2231: FILE: include/linux/inotify.h:112:
+extern __s32 inotify_find_update_watch(struct inotify_handle *, struct inode *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2233: FILE: include/linux/inotify.h:114:
+extern __s32 inotify_add_watch(struct inotify_handle *, struct inotify_watch *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_handle *' should also have an identifier name
#2233: FILE: include/linux/inotify.h:114:
+extern __s32 inotify_add_watch(struct inotify_handle *, struct inotify_watch *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#2233: FILE: include/linux/inotify.h:114:
+extern __s32 inotify_add_watch(struct inotify_handle *, struct inotify_watch *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2233: FILE: include/linux/inotify.h:114:
+extern __s32 inotify_add_watch(struct inotify_handle *, struct inotify_watch *,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32' should also have an identifier name
#2233: FILE: include/linux/inotify.h:114:
+extern __s32 inotify_add_watch(struct inotify_handle *, struct inotify_watch *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2235: FILE: include/linux/inotify.h:116:
+extern int inotify_rm_watch(struct inotify_handle *, struct inotify_watch *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_handle *' should also have an identifier name
#2235: FILE: include/linux/inotify.h:116:
+extern int inotify_rm_watch(struct inotify_handle *, struct inotify_watch *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#2235: FILE: include/linux/inotify.h:116:
+extern int inotify_rm_watch(struct inotify_handle *, struct inotify_watch *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2236: FILE: include/linux/inotify.h:117:
+extern int inotify_rm_wd(struct inotify_handle *, __u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_handle *' should also have an identifier name
#2236: FILE: include/linux/inotify.h:117:
+extern int inotify_rm_wd(struct inotify_handle *, __u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32' should also have an identifier name
#2236: FILE: include/linux/inotify.h:117:
+extern int inotify_rm_wd(struct inotify_handle *, __u32);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2255: FILE: include/linux/inotify.h:156:
+static inline struct inotify_handle *inotify_init(void (*cb)(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2273: FILE: include/linux/inotify.h:174:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087258.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 70 warnings, 17 checks, 2197 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087258.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
