WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#33: 
> I'm running your patches [1] with sucess for a while now.
                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#93: 
//  EXTRAVERSION = -ac17
    ^^^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#125: FILE: fs/pipe.c:50:
+pio_copy_to_user(struct kiobuf* iobuf, int offset, char* ubuf, int chars)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#125: FILE: fs/pipe.c:50:
+pio_copy_to_user(struct kiobuf* iobuf, int offset, char* ubuf, int chars)

WARNING:LINE_SPACING: Missing a blank line after declarations
#128: FILE: fs/pipe.c:53:
+	int page_nr;
+	offset += iobuf->offset;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#129: FILE: fs/pipe.c:54:
+	page_nr = offset/PAGE_SIZE;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#131: FILE: fs/pipe.c:56:
+	while(chars) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#132: FILE: fs/pipe.c:57:
+		int pcount = PAGE_SIZE-offset;
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/pipe.c:59:
+		void *kaddr;
+		if (pcount > chars)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#137: FILE: fs/pipe.c:62:
+		if (copy_to_user(ubuf, kaddr+offset, pcount))
 		                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: fs/pipe.c:93:
+		int chars = PIPE_LEN(*inode);
+		if (chars) {

ERROR:SPACING: space required before the open parenthesis '('
#188: FILE: fs/pipe.c:100:
+			if(PIPE_IS_PIO(*inode)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#189: FILE: fs/pipe.c:101:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#189: FILE: fs/pipe.c:101:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: fs/pipe.c:102:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);
+				if(pio_copy_to_user(&pio->iobuf, offset, buf, chars))

ERROR:SPACING: space required before the open parenthesis '('
#190: FILE: fs/pipe.c:102:
+				if(pio_copy_to_user(&pio->iobuf, offset, buf, chars))

ERROR:SPACING: space required before the open parenthesis '('
#194: FILE: fs/pipe.c:106:
+				if(!PIPE_LEN(*inode)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#203: FILE: fs/pipe.c:115:
+				if (chars > PIPE_SIZE-offset)
 				                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#204: FILE: fs/pipe.c:116:
+					chars = PIPE_SIZE-offset;
 					                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#205: FILE: fs/pipe.c:117:
+				if (copy_to_user(buf, pipebuf+offset, chars))
 				                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: fs/pipe.c:135:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#232: FILE: fs/pipe.c:144:
+		 * for writing */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#367: FILE: fs/pipe.c:215:
+	for(;;) {

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: fs/pipe.c:221:
+		if(!PIPE_IS_PIO(*inode)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: fs/pipe.c:225:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: fs/pipe.c:239:
+			if (count > PIPE_BUF && chars == PIPE_SIZE &&
+				    (!(filp->f_flags & O_NONBLOCK))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#427: FILE: fs/pipe.c:240:
+				struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#427: FILE: fs/pipe.c:240:
+				struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: fs/pipe.c:241:
+				struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);
+				chars = KIO_MAX_ATOMIC_BYTES;

ERROR:SPACING: space required before the open parenthesis '('
#432: FILE: fs/pipe.c:245:
+				if(map_user_kiobuf(READ, &pio->iobuf, (unsigned long)buf, chars))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/pipe.c:263:
+				if (chars > PIPE_SIZE-offset)
 				                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#451: FILE: fs/pipe.c:264:
+					chars = PIPE_SIZE-offset;
 					                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#452: FILE: fs/pipe.c:265:
+				if (copy_from_user(PIPE_BASE(*inode)+offset, buf, chars))
 				                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: fs/pipe.c:273:
+^I^I^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#461: FILE: fs/pipe.c:274:
+				if(!count)

ERROR:SPACING: space required before the open parenthesis '('
#465: FILE: fs/pipe.c:278:
+				if(PIPE_LEN(*inode) != PIPE_SIZE) {

ERROR:SPACING: space required before the open parenthesis '('
#481: FILE: fs/pipe.c:292:
+		if(do_wakeup) {

ERROR:SPACING: space required before the open parenthesis '('
#523: FILE: fs/pipe.c:313:
+	if(!pio_done) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#524: FILE: fs/pipe.c:314:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#524: FILE: fs/pipe.c:314:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: fs/pipe.c:315:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);
+		PIPE_IS_PIO(*inode) = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#532: FILE: fs/pipe.c:322:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#544: FILE: fs/pipe.c:329:
+	if(do_wakeup)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#658: FILE: fs/select.c:70:
+	struct poll_table_entry * entry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: fs/select.c:71:
+	struct poll_table_entry * entry;
+	entry = pt->internal + pt->nr;

ERROR:SPACING: space required before the open parenthesis '('
#660: FILE: fs/select.c:72:
+	while(pt->nr > 0) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#663: FILE: fs/select.c:75:
+		remove_wait_queue(entry->wait_address,&entry->wait);
 		                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#663: FILE: fs/select.c:75:
+		remove_wait_queue(entry->wait_address,&entry->wait);
 		                                      ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#664: FILE: fs/select.c:76:
+		fput(entry->filp);
 		            ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#686: FILE: fs/select.c:95:
+	struct poll_table_entry * entry;

ERROR:SPACING: space required before the open parenthesis '('
#693: FILE: fs/select.c:97:
+	if(p->nr < POLL_TABLE_INTERNAL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#694: FILE: fs/select.c:98:
+		entry = p->internal+p->nr++;
 		                   ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#730: FILE: fs/select.c:120:
+	get_file(filp);
 	         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#731: FILE: fs/select.c:121:
+	entry->filp = filp;
 	       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#731: FILE: fs/select.c:121:
+	entry->filp = filp;
 	              ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#734: FILE: fs/select.c:124:
+	add_wait_queue(wait_address,&entry->wait);
 	                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#734: FILE: fs/select.c:124:
+	add_wait_queue(wait_address,&entry->wait);
 	                            ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#744: FILE: fs/select.c:259:
+static inline void *select_bits_alloc(int size, void* internal)

ERROR:SPACING: space required before the open parenthesis '('
#746: FILE: fs/select.c:261:
+	if(size <= SELECT_INLINE_BYTES)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#752: FILE: fs/select.c:266:
+static inline void select_bits_free(void *bits, void* internal)

ERROR:SPACING: space required before the open parenthesis '('
#755: FILE: fs/select.c:268:
+	if(bits != internal)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#764: FILE: fs/select.c:283:
 
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#769: FILE: fs/select.c:288:
+	char ibuf[6*SELECT_INLINE_BYTES];
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#799: FILE: fs/select.c:382:
+#define POLLFD_PER_PAGE  ((PAGE_SIZE-sizeof(struct poll_list)) / sizeof(struct pollfd))
                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: fs/select.c:417:
+static int do_poll(int nfds, struct poll_list *list,
+			poll_table *wait, long timeout)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: fs/select.c:421:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: fs/select.c:421:
+ $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#820: FILE: fs/select.c:423:
+		struct poll_list* walk;

ERROR:SPACING: space required before the open parenthesis '('
#828: FILE: fs/select.c:426:
+		while(walk != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "walk"
#828: FILE: fs/select.c:426:
+		while(walk != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited after that open parenthesis '('
#829: FILE: fs/select.c:427:
+			do_pollfd( walk->len, walk->entries, &pt, &count);

ERROR:SPACING: space required before the open parenthesis '('
#876: FILE: fs/select.c:475:
+	if(nfds <= INLINE_POLL_COUNT)

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#888: FILE: fs/select.c:482:
+	while(i!=0) {
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#888: FILE: fs/select.c:482:
+	while(i!=0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: fs/select.c:484:
+		struct poll_list *pp;
+		pp = kmalloc(sizeof(struct poll_list)+

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#890: FILE: fs/select.c:484:
+		pp = kmalloc(sizeof(struct poll_list)+
 		                                     ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pp)...) over kmalloc(sizeof(struct poll_list)...)
#890: FILE: fs/select.c:484:
+		pp = kmalloc(sizeof(struct poll_list)+

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#891: FILE: fs/select.c:485:
+				sizeof(struct pollfd)*
 				                     ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#892: FILE: fs/select.c:486:
+				(i>POLLFD_PER_PAGE?POLLFD_PER_PAGE:i),
 				  ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#892: FILE: fs/select.c:486:
+				(i>POLLFD_PER_PAGE?POLLFD_PER_PAGE:i),
 				                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#892: FILE: fs/select.c:486:
+				(i>POLLFD_PER_PAGE?POLLFD_PER_PAGE:i),
 				                                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#894: FILE: fs/select.c:488:
+		if(pp==NULL)
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#894: FILE: fs/select.c:488:
+		if(pp==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pp"
#894: FILE: fs/select.c:488:
+		if(pp==NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#902: FILE: fs/select.c:490:
+		pp->next=NULL;
 		        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#903: FILE: fs/select.c:491:
+		pp->len = (i>POLLFD_PER_PAGE?POLLFD_PER_PAGE:i);
 		            ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#903: FILE: fs/select.c:491:
+		pp->len = (i>POLLFD_PER_PAGE?POLLFD_PER_PAGE:i);
 		                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#903: FILE: fs/select.c:491:
+		pp->len = (i>POLLFD_PER_PAGE?POLLFD_PER_PAGE:i);
 		                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#907: FILE: fs/select.c:495:
+^I^Iif (copy_from_user(pollwalk+1, ufds + nfds-i, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#907: FILE: fs/select.c:495:
+		if (copy_from_user(pollwalk+1, ufds + nfds-i, 
 		                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#907: FILE: fs/select.c:495:
+		if (copy_from_user(pollwalk+1, ufds + nfds-i, 
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: fs/select.c:496:
+		if (copy_from_user(pollwalk+1, ufds + nfds-i, 
+				sizeof(struct pollfd)*pollwalk->len)) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#908: FILE: fs/select.c:496:
+				sizeof(struct pollfd)*pollwalk->len)) {
 				                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#914: FILE: fs/select.c:502:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: fs/select.c:504:
+	fdcount = do_poll(nfds, &polldata.head,
+			wait, timeout);

ERROR:SPACING: space required before the open parenthesis '('
#929: FILE: fs/select.c:510:
+	while(pollwalk != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pollwalk"
#929: FILE: fs/select.c:510:
+	while(pollwalk != NULL) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#930: FILE: fs/select.c:511:
+		struct pollfd * fds = pollwalk->entries;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#933: FILE: fs/select.c:514:
+		for (j=0; j < pollwalk->len; j++, ufds++) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#934: FILE: fs/select.c:515:
+			if(__put_user(fds[j].revents, &ufds->revents))

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#965: FILE: fs/select.c:527:
+	while(pollwalk!=NULL) {
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#965: FILE: fs/select.c:527:
+	while(pollwalk!=NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pollwalk"
#965: FILE: fs/select.c:527:
+	while(pollwalk!=NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#967: FILE: fs/select.c:529:
+		struct poll_list *pp = pollwalk->next;
+		kfree(pollwalk);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#980: FILE: include/linux/poll.h:16:
+	struct file * filp;
 	              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#980: FILE: include/linux/poll.h:16:
+	struct file * filp;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#982: FILE: include/linux/poll.h:18:
+	wait_queue_head_t * wait_address;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 18 warnings, 32 checks, 867 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
