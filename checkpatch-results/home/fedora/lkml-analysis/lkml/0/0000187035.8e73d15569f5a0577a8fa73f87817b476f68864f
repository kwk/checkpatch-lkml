CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#134: FILE: fs/ext3/balloc.c:720:
+	while (num < *count && goal < end
+		&& ext3_test_allocatable(goal, bitmap_bh)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#135: FILE: fs/ext3/balloc.c:721:
+		&& ext3_test_allocatable(goal, bitmap_bh)
+		&& claim_block(sb_bgl_lock(EXT3_SB(sb), group), goal, bitmap_bh)) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#156: FILE: fs/ext3/balloc.c:1045:
+	int original_goal=goal;
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: fs/ext3/balloc.c:1070:
+		ret = ext3_try_to_allocate(sb, handle, group, bitmap_bh, goal,
+					count, NULL);

WARNING:LONG_LINE: line length of 203 exceeds 100 columns
#187: FILE: fs/ext3/balloc.c:1122:
+		printk("Allocated blocks from %d ,count is %d, goal was %d, group is %d, inode is %, reservation window (%d,%d)\n", ret, *count, original_goal, group, my_rsv->rsv_start, my_rsv->rsv_end);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#187: FILE: fs/ext3/balloc.c:1122:
+		printk("Allocated blocks from %d ,count is %d, goal was %d, group is %d, inode is %, reservation window (%d,%d)\n", ret, *count, original_goal, group, my_rsv->rsv_start, my_rsv->rsv_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: fs/ext3/balloc.c:1178:
+int ext3_new_blocks(handle_t *handle, struct inode *inode,
+			unsigned long goal, unsigned long* count, int *errp)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#198: FILE: fs/ext3/balloc.c:1178:
+			unsigned long goal, unsigned long* count, int *errp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: fs/ext3/balloc.c:1344:
+		    in_range(target_block, le32_to_cpu(gdp->bg_inode_table),
+			      EXT3_SB(sb)->s_itb_per_group)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: fs/ext3/balloc.c:1346:
+			ext3_error(sb, "ext3_new_block",
+				    "Allocating block in system zone - "

WARNING:SPLIT_STRING: quoted string split across lines
#258: FILE: fs/ext3/balloc.c:1347:
+				    "Allocating block in system zone - "
+				    "block = %u", target_block);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: fs/ext3/balloc.c:1370:
+			if (ext3_test_bit(ret_block++,
+					bh2jh(bitmap_bh)->b_committed_data)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: fs/ext3/balloc.c:1371:
+				printk("%s: block was unexpectedly set in "

WARNING:SPLIT_STRING: quoted string split across lines
#277: FILE: fs/ext3/balloc.c:1372:
+				printk("%s: block was unexpectedly set in "
+					"b_committed_data\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#277: FILE: fs/ext3/balloc.c:1372:
+					"b_committed_data\n", __FUNCTION__);

ERROR:SPACING: spaces required around that '>=' (ctx:VxW)
#290: FILE: fs/ext3/balloc.c:1384:
+	if (target_block - 1>= le32_to_cpu(es->s_blocks_count)) {
 	                    ^

WARNING:SPLIT_STRING: quoted string split across lines
#295: FILE: fs/ext3/balloc.c:1387:
+			    "block(%d) >= fs blocks count(%d) - "
+			    "block_group = %d, es == %p ", target_block - 1,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#304: FILE: fs/ext3/balloc.c:1402:
+			cpu_to_le16(le16_to_cpu(gdp->bg_free_blocks_count)-num);
 			                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#315: FILE: fs/ext3/balloc.c:1416:
+	DQUOT_FREE_BLOCK(inode, *count-num);
 	                              ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#369: FILE: fs/ext3/inode.c:569:
 }
+#define GBS_DEBUG	0

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: fs/ext3/inode.c:571:
+static int ext3_alloc_splice_branch(handle_t *handle, struct inode *inode,
+			     unsigned long num, unsigned long first_block,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#372: FILE: fs/ext3/inode.c:572:
+			     int *offsets, Indirect *branch, int depth)
 			                            ^

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#372: FILE: fs/ext3/inode.c:572:
+			     int *offsets, Indirect *branch, int depth)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: fs/ext3/inode.c:585:
+		printk("block %d, branch[0].p :%x\n", current_block, branch[0].p);

CHECK:SPACING: No space is necessary after a cast
#407: FILE: fs/ext3/inode.c:607:
+		branch[n].p = (__le32*) bh->b_data + offsets[n];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#407: FILE: fs/ext3/inode.c:607:
+		branch[n].p = (__le32*) bh->b_data + offsets[n];

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#412: FILE: fs/ext3/inode.c:612:
+		if (n == depth -1 ) {
 		               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#412: FILE: fs/ext3/inode.c:612:
+		if (n == depth -1 ) {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#419: FILE: fs/ext3/inode.c:619:
+		BUFFER_TRACE(bh, "marking uptodate");
 		                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open brace '{'
#430: FILE: fs/ext3/inode.c:630:
+	if (bh){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around branch[0].p
#437: FILE: fs/ext3/inode.c:637:
+	*(branch[0].p) = branch[0].key;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#441: FILE: fs/ext3/inode.c:641:
+	while (current_block - first_block + 1< num) {
 	                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#447: FILE: fs/ext3/inode.c:647:
+		for (i=0; i< n; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#447: FILE: fs/ext3/inode.c:647:
+		for (i=0; i< n; i++)
 		           ^

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#448: FILE: fs/ext3/inode.c:648:
+			printk("inode %x, branch[%d].p:%x, branch[%d].key:%d,\n", inode, i, branch[i].p, i, branch[i].key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#448: FILE: fs/ext3/inode.c:648:
+			printk("inode %x, branch[%d].p:%x, branch[%d].key:%d,\n", inode, i, branch[i].p, i, branch[i].key);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#449: FILE: fs/ext3/inode.c:649:
+		for (i=0; i< num-n; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#449: FILE: fs/ext3/inode.c:649:
+		for (i=0; i< num-n; i++)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#449: FILE: fs/ext3/inode.c:649:
+		for (i=0; i< num-n; i++)
 		                ^

WARNING:LONG_LINE: line length of 204 exceeds 100 columns
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#450: FILE: fs/ext3/inode.c:650:
+			printk("inode %x, branch[%d].p + %d + 1:%x, *(branch[%d].p+%d+1):%d,\n, branch[%d].bh:%x\n", inode, n-1, i, branch[n-1].p + i +1, n-1, i, *(branch[n-1].p+i+1),n-1, branch[n-1].bh);
 			                                                                                                                                                                            ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#453: FILE: fs/ext3/inode.c:653:
+		BUFFER_TRACE(bh, "marking uptodate");
 		                          ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#484: FILE: fs/ext3/inode.c:886:
+ext3_count_blocks_to_allocate(Indirect * branch, int k,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: fs/ext3/inode.c:887:
+ext3_count_blocks_to_allocate(Indirect * branch, int k,
+				unsigned long maxblocks, int blocks_to_boundary)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#489: FILE: fs/ext3/inode.c:891:
+	if (k == 0) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#495: FILE: fs/ext3/inode.c:897:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#495: FILE: fs/ext3/inode.c:897:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,
 		                                               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#495: FILE: fs/ext3/inode.c:897:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: fs/ext3/inode.c:898:
+		printk("maxblocks: %d, k: %d, boundary : %d \n",maxblocks, k,
+			blocks_to_boundary);

WARNING:TYPO_SPELLING: 'hanel' may be misspelled - perhaps 'handle'?
#498: FILE: fs/ext3/inode.c:900:
+		/* right now don't hanel cross boundary allocation */
 		                   ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#509: FILE: fs/ext3/inode.c:911:
+	while (count < maxblocks && count <= blocks_to_boundary
+		&& *(branch[0].p + count) == 0) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#514: FILE: fs/ext3/inode.c:916:
+}
+static int

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: fs/ext3/inode.c:918:
+ext3_get_blocks_handle(handle_t *handle, struct inode *inode, sector_t iblock,
+			unsigned long *maxblocks, struct buffer_head *bh_result,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "handle"
#532: FILE: fs/ext3/inode.c:934:
+	J_ASSERT(handle != NULL || create == 0);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#535: FILE: fs/ext3/inode.c:937:
+		printk("ext3_get_blocks_handle: maxblocks= %d, iblock = %d\n", *maxblocks, iblock);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_get_blocks_handle', this function's name, in a string
#535: FILE: fs/ext3/inode.c:937:
+		printk("ext3_get_blocks_handle: maxblocks= %d, iblock = %d\n", *maxblocks, iblock);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: fs/ext3/inode.c:943:
+	partial = ext3_get_branch(inode, depth,
+				offsets, chain, &err);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#544: FILE: fs/ext3/inode.c:946:
+		first_block = chain[depth-1].key;
 		                         ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#546: FILE: fs/ext3/inode.c:948:
+		count ++;
 		      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#549: FILE: fs/ext3/inode.c:951:
+		while (count < *maxblocks && count <= blocks_to_boundary
+			&& (*(chain[depth-1].p+count) == first_block + count)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#549: FILE: fs/ext3/inode.c:951:
+			&& (*(chain[depth-1].p+count) == first_block + count)) {
 			                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#549: FILE: fs/ext3/inode.c:951:
+			&& (*(chain[depth-1].p+count) == first_block + count)) {
 			                      ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#550: FILE: fs/ext3/inode.c:952:
+			count ++;
 			      ^

ERROR:SPACING: space required before the open brace '{'
#556: FILE: fs/ext3/inode.c:958:
+	if (!create || err == -EIO){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ei->i_block_alloc_info'
#562: FILE: fs/ext3/inode.c:964:
+	if (S_ISREG(inode->i_mode) && (!ei->i_block_alloc_info)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#562: FILE: fs/ext3/inode.c:964:
+	if (S_ISREG(inode->i_mode) && (!ei->i_block_alloc_info)) {
+		ext3_init_block_alloc_info(inode);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: fs/ext3/inode.c:974:
+		printk("blocks to allocate: %d\n", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#576: FILE: fs/ext3/inode.c:978:
+		printk("blocks allocated(%d,%d,%d)\n", (int)iblock, (int)first_block, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: fs/ext3/inode.c:982:
+		err = ext3_alloc_splice_branch(handle, inode, count,
+			first_block, offsets+(partial-chain), partial, left);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#580: FILE: fs/ext3/inode.c:982:
+			first_block, offsets+(partial-chain), partial, left);
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#580: FILE: fs/ext3/inode.c:982:
+			first_block, offsets+(partial-chain), partial, left);
 			                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#587: FILE: fs/ext3/inode.c:989:
+	 * concurrent ext3_get_block() -bzzz */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#610: FILE: fs/ext3/inode.c:1012:
+	map_bh(bh_result, inode->i_sb, le32_to_cpu(chain[depth-1].key));
 	                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#614: FILE: fs/ext3/inode.c:1016:
+	partial = chain+depth-1; /* the whole chain */
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#614: FILE: fs/ext3/inode.c:1016:
+	partial = chain+depth-1; /* the whole chain */
 	                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: fs/ext3/inode.c:1030:
+static int ext3_get_blocks(struct inode *inode, sector_t iblock,
+		unsigned long maxblocks, struct buffer_head *bh_result,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: fs/ext3/inode.c:1041:
+	ret = ext3_get_blocks_handle(handle, inode, iblock, &maxblocks,
 				bh_result, create, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: fs/ext3/inode.c:1043:
+        return ret;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: fs/ext3/inode.c:1043:
+        return ret;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: fs/ext3/inode.c:1047:
+static int ext3_get_block(struct inode *inode, sector_t iblock,
+			struct buffer_head *bh_result, int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: fs/ext3/inode.c:1055:
+static int ext3_direct_io_get_blocks(struct inode *inode, sector_t iblock,
 		unsigned long max_blocks, struct buffer_head *bh_result,

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#664: FILE: fs/ext3/inode.c:1091:
+		printk("Calling ext3_get_blocks_handle from dio: maxblocks= %d, iblock = %d", (int)max_blocks, (int)iblock);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#664: FILE: fs/ext3/inode.c:1091:
+		printk("Calling ext3_get_blocks_handle from dio: maxblocks= %d, iblock = %d", (int)max_blocks, (int)iblock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: fs/ext3/inode.c:1094:
+		ret = ext3_get_blocks_handle(handle, inode, iblock, &max_blocks,
 					bh_result, create, 0);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#672: FILE: fs/ext3/inode.c:1097:
+		printk("ext3_get_blocks_handle returns to dio: maxblocks= %d, iblock = %d", (int)max_blocks, (int)iblock);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#672: FILE: fs/ext3/inode.c:1097:
+		printk("ext3_get_blocks_handle returns to dio: maxblocks= %d, iblock = %d", (int)max_blocks, (int)iblock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#697: FILE: include/linux/ext3_fs.h:717:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#697: FILE: include/linux/ext3_fs.h:717:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#697: FILE: include/linux/ext3_fs.h:717:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#697: FILE: include/linux/ext3_fs.h:717:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#697: FILE: include/linux/ext3_fs.h:717:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long*' should also have an identifier name
#697: FILE: include/linux/ext3_fs.h:717:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#697: FILE: include/linux/ext3_fs.h:717:
+extern int ext3_new_blocks (handle_t *, struct inode *, unsigned long, unsigned long*, int *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000187035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 34 warnings, 50 checks, 554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000187035.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
