CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#50: FILE: arch/i386/kernel/e820.c:26:
+};
+static struct change_member change_point_list[2*E820MAX] __initdata;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#50: FILE: arch/i386/kernel/e820.c:26:
+static struct change_member change_point_list[2*E820MAX] __initdata;
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#51: FILE: arch/i386/kernel/e820.c:27:
+static struct change_member *change_point[2*E820MAX] __initdata;
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: arch/i386/kernel/e820.c:305:
+       ^I^Ix = e820.nr_map;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#68: FILE: arch/i386/kernel/e820.c:305:
+       ^I^Ix = e820.nr_map;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: arch/i386/kernel/e820.c:305:
+       ^I^Ix = e820.nr_map;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#70: FILE: arch/i386/kernel/e820.c:307:
+		if (x == E820MAX) {
+		    printk(KERN_ERR "Ooops! Too many entries in the memory map!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#71: FILE: arch/i386/kernel/e820.c:308:
+		    printk(KERN_ERR "Ooops! Too many entries in the memory map!\n");

WARNING:TABSTOP: Statements should start on a tabstop
#72: FILE: arch/i386/kernel/e820.c:309:
+		    return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: arch/i386/kernel/e820.c:322:
+ * Some e820 responses include overlapping entries.  The following $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: arch/i386/kernel/e820.c:326:
+int __init sanitize_e820_map(struct e820entry * biosmap, char * pnr_map)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: arch/i386/kernel/e820.c:326:
+int __init sanitize_e820_map(struct e820entry * biosmap, char * pnr_map)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#101: FILE: arch/i386/kernel/e820.c:338:
+	/*
+		Visually we're performing the following (1,2,3,4 = memory types)...

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#135: FILE: arch/i386/kernel/e820.c:372:
+	printk("sanitize start\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: arch/i386/kernel/e820.c:375:
+		printk("sanitize bail 0\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#145: FILE: arch/i386/kernel/e820.c:382:
+	for (i=0; i<old_nr; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#145: FILE: arch/i386/kernel/e820.c:382:
+	for (i=0; i<old_nr; i++)
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#147: FILE: arch/i386/kernel/e820.c:384:
+			printk("sanitize bail 1\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#152: FILE: arch/i386/kernel/e820.c:389:
+	for (i=0; i < 2*old_nr; i++)
 	      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#152: FILE: arch/i386/kernel/e820.c:389:
+	for (i=0; i < 2*old_nr; i++)
 	               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#156: FILE: arch/i386/kernel/e820.c:393:
+	/* record all known change-points (starting and ending addresses),
+	   omitting those that are for empty memory regions */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#156: FILE: arch/i386/kernel/e820.c:393:
+	   omitting those that are for empty memory regions */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#158: FILE: arch/i386/kernel/e820.c:395:
+	for (i=0; i < old_nr; i++)	{
 	      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: arch/i386/kernel/e820.c:403:
+^Ichg_nr = chgidx;    ^I/* true number of change-points */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#172: FILE: arch/i386/kernel/e820.c:409:
+		for (i=1; i < chg_nr; i++)  {
 		      ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#175: FILE: arch/i386/kernel/e820.c:412:
+			if ((change_point[i]->addr < change_point[i-1]->addr) ||
+				((change_point[i]->addr == change_point[i-1]->addr) &&
+				 (change_point[i]->addr == change_point[i]->pbios->addr) &&
+				 (change_point[i-1]->addr != change_point[i-1]->pbios->addr))
+			   )
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#175: FILE: arch/i386/kernel/e820.c:412:
+			if ((change_point[i]->addr < change_point[i-1]->addr) ||
 			                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'change_point[i]->addr < change_point[i-1]->addr'
#175: FILE: arch/i386/kernel/e820.c:412:
+			if ((change_point[i]->addr < change_point[i-1]->addr) ||
+				((change_point[i]->addr == change_point[i-1]->addr) &&
+				 (change_point[i]->addr == change_point[i]->pbios->addr) &&
+				 (change_point[i-1]->addr != change_point[i-1]->pbios->addr))
+			   )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'change_point[i]->addr == change_point[i-1]->addr'
#175: FILE: arch/i386/kernel/e820.c:412:
+			if ((change_point[i]->addr < change_point[i-1]->addr) ||
+				((change_point[i]->addr == change_point[i-1]->addr) &&
+				 (change_point[i]->addr == change_point[i]->pbios->addr) &&
+				 (change_point[i-1]->addr != change_point[i-1]->pbios->addr))
+			   )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'change_point[i]->addr == change_point[i]->pbios->addr'
#175: FILE: arch/i386/kernel/e820.c:412:
+			if ((change_point[i]->addr < change_point[i-1]->addr) ||
+				((change_point[i]->addr == change_point[i-1]->addr) &&
+				 (change_point[i]->addr == change_point[i]->pbios->addr) &&
+				 (change_point[i-1]->addr != change_point[i-1]->pbios->addr))
+			   )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'change_point[i-1]->addr != change_point[i-1]->pbios->addr'
#175: FILE: arch/i386/kernel/e820.c:412:
+			if ((change_point[i]->addr < change_point[i-1]->addr) ||
+				((change_point[i]->addr == change_point[i-1]->addr) &&
+				 (change_point[i]->addr == change_point[i]->pbios->addr) &&
+				 (change_point[i-1]->addr != change_point[i-1]->pbios->addr))
+			   )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: arch/i386/kernel/e820.c:413:
+			if ((change_point[i]->addr < change_point[i-1]->addr) ||
+				((change_point[i]->addr == change_point[i-1]->addr) &&

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#176: FILE: arch/i386/kernel/e820.c:413:
+				((change_point[i]->addr == change_point[i-1]->addr) &&
 				                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: arch/i386/kernel/e820.c:415:
+				 (change_point[i-1]->addr != change_point[i-1]->pbios->addr))
 				                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: arch/i386/kernel/e820.c:415:
+				 (change_point[i-1]->addr != change_point[i-1]->pbios->addr))
 				                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#182: FILE: arch/i386/kernel/e820.c:419:
+				change_point[i] = change_point[i-1];
 				                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#183: FILE: arch/i386/kernel/e820.c:420:
+				change_point[i-1] = change_tmp;
 				              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: arch/i386/kernel/e820.c:421:
+				still_changing=1;
 				              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#190: FILE: arch/i386/kernel/e820.c:427:
+	overlap_entries=0;	 /* number of entries in the overlap table */
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#191: FILE: arch/i386/kernel/e820.c:428:
+	new_bios_entry=0;	 /* index for creating new bios map entries */
 	              ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#195: FILE: arch/i386/kernel/e820.c:432:
+	for (chgidx=0; chgidx < chg_nr; chgidx++)
+	{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#195: FILE: arch/i386/kernel/e820.c:432:
+	for (chgidx=0; chgidx < chg_nr; chgidx++)
 	           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#198: FILE: arch/i386/kernel/e820.c:435:
+		if (change_point[chgidx]->addr == change_point[chgidx]->pbios->addr)
+		{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#201: FILE: arch/i386/kernel/e820.c:438:
+			overlap_list[overlap_entries++]=change_point[chgidx]->pbios;
 			                               ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#203: FILE: arch/i386/kernel/e820.c:440:
+		else
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#203: FILE: arch/i386/kernel/e820.c:440:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#206: FILE: arch/i386/kernel/e820.c:443:
+			for (i=0; i<overlap_entries; i++)
+			{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#206: FILE: arch/i386/kernel/e820.c:443:
+			for (i=0; i<overlap_entries; i++)
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#206: FILE: arch/i386/kernel/e820.c:443:
+			for (i=0; i<overlap_entries; i++)
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#209: FILE: arch/i386/kernel/e820.c:446:
+					overlap_list[i] = overlap_list[overlap_entries-1];
 					                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#216: FILE: arch/i386/kernel/e820.c:453:
+		for (i=0; i<overlap_entries; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#216: FILE: arch/i386/kernel/e820.c:453:
+		for (i=0; i<overlap_entries; i++)
 		           ^

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#227: FILE: arch/i386/kernel/e820.c:464:
+						break; 	/* no more space left for new bios entries */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: arch/i386/kernel/e820.c:464:
+^I^I^I^I^I^Ibreak; ^I/* no more space left for new bios entries */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#232: FILE: arch/i386/kernel/e820.c:469:
+				last_addr=change_point[chgidx]->addr;
 				         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#240: FILE: arch/i386/kernel/e820.c:477:
+	memcpy(biosmap, new_bios, new_nr*sizeof(struct e820entry));
 	                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: arch/i386/kernel/e820.c:480:
+	printk("sanitize end\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: arch/i386/kernel/e820.c:500:
+int __init copy_e820_map(struct e820entry * biosmap, int nr_map)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#274: FILE: arch/i386/kernel/e820.c:511:
+		printk("copy_e820_map() start: %016Lx size: %016Lx end: %016Lx type: %ld\n", start, size, end, type);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: arch/i386/kernel/e820.c:511:
+		unsigned long type = biosmap->type;
+		printk("copy_e820_map() start: %016Lx size: %016Lx end: %016Lx type: %ld\n", start, size, end, type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#274: FILE: arch/i386/kernel/e820.c:511:
+		printk("copy_e820_map() start: %016Lx size: %016Lx end: %016Lx type: %ld\n", start, size, end, type);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_e820_map', this function's name, in a string
#274: FILE: arch/i386/kernel/e820.c:511:
+		printk("copy_e820_map() start: %016Lx size: %016Lx end: %016Lx type: %ld\n", start, size, end, type);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#274: FILE: arch/i386/kernel/e820.c:511:
+		printk("copy_e820_map() start: %016Lx size: %016Lx end: %016Lx type: %ld\n", start, size, end, type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#285: FILE: arch/i386/kernel/e820.c:522:
+			printk("copy_e820_map() type is E820_RAM\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_e820_map', this function's name, in a string
#285: FILE: arch/i386/kernel/e820.c:522:
+			printk("copy_e820_map() type is E820_RAM\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#287: FILE: arch/i386/kernel/e820.c:524:
+				printk("copy_e820_map() lies in range...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_e820_map', this function's name, in a string
#287: FILE: arch/i386/kernel/e820.c:524:
+				printk("copy_e820_map() lies in range...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: arch/i386/kernel/e820.c:526:
+					printk("copy_e820_map() start < 0xA0000ULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_e820_map', this function's name, in a string
#289: FILE: arch/i386/kernel/e820.c:526:
+					printk("copy_e820_map() start < 0xA0000ULL\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#290: FILE: arch/i386/kernel/e820.c:527:
+					add_memory_region(start, 0xA0000ULL-start, type);
 					                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#293: FILE: arch/i386/kernel/e820.c:530:
+					printk("copy_e820_map() end <= 0x100000ULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_e820_map', this function's name, in a string
#293: FILE: arch/i386/kernel/e820.c:530:
+					printk("copy_e820_map() end <= 0x100000ULL\n");

ERROR:SPACING: space required after that ',' (ctx:OxO)
#301: FILE: arch/i386/kernel/e820.c:538:
+	} while (biosmap++,--nr_map);
 	                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000024358.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 28 warnings, 18 checks, 524 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000024358.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
