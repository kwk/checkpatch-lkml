WARNING:TYPO_SPELLING: 'preceeded' may be misspelled - perhaps 'preceded'?
#35: 
useful because crashes are almost always preceeded by interesting 
                                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: arch/ppc64/xmon/xmon.c:179:
+  D^Ishow dmesg (printk) buffer\n\$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#90: FILE: arch/ppc64/xmon/xmon.c:2463:
+#define SYSLOG_WRAP(p) if (p < syslog_data[0]) p = syslog_data[1]-1; \
                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#90: FILE: arch/ppc64/xmon/xmon.c:2463:
+#define SYSLOG_WRAP(p) if (p < syslog_data[0]) p = syslog_data[1]-1; \
+	else if (p >= syslog_data[1]) p = syslog_data[0];

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#90: FILE: arch/ppc64/xmon/xmon.c:2463:
+#define SYSLOG_WRAP(p) if (p < syslog_data[0]) p = syslog_data[1]-1; \
+	else if (p >= syslog_data[1]) p = syslog_data[0];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#90: FILE: arch/ppc64/xmon/xmon.c:2463:
+#define SYSLOG_WRAP(p) if (p < syslog_data[0]) p = syslog_data[1]-1; \
+	else if (p >= syslog_data[1]) p = syslog_data[0];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#90: FILE: arch/ppc64/xmon/xmon.c:2463:
+#define SYSLOG_WRAP(p) if (p < syslog_data[0]) p = syslog_data[1]-1; \
+	else if (p >= syslog_data[1]) p = syslog_data[0];

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#91: FILE: arch/ppc64/xmon/xmon.c:2464:
+	else if (p >= syslog_data[1]) p = syslog_data[0];

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: arch/ppc64/xmon/xmon.c:2471:
+^I/* syslog_data[0,1] physical start, end+1.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: arch/ppc64/xmon/xmon.c:2472:
+^I * syslog_data[2,3] logical start, end+1. $

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: arch/ppc64/xmon/xmon.c:2483:
+	while(1) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#113: FILE: arch/ppc64/xmon/xmon.c:2486:
+		int chars = 0;
+		if (!*start) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: exactly one space required after that #ifdef
#149: FILE: kernel/printk.c:379:
+#ifdef   CONFIG_DEBUG_KERNEL

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: kernel/printk.c:380:
+/* Its very handy to be able to view the syslog buffer during debug. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: kernel/printk.c:381:
+ * But do_syslog() uses locks so it cannot be used during debugging.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: kernel/printk.c:382:
+ * Instead, provide the start and end of the physical and logical logs.  $

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#159: FILE: kernel/printk.c:389:
+	syslog_data[2] = log_buf + log_end - (logged_chars < __LOG_BUF_LEN ? logged_chars : __LOG_BUF_LEN);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000248987.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 5 warnings, 3 checks, 102 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000248987.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
