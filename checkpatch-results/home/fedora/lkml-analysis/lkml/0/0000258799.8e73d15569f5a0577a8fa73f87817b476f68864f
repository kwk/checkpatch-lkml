WARNING:TYPO_SPELLING: 'Managment' may be misspelled - perhaps 'Management'?
#36: 
Linux Bus Resource Managment
                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
-------------------------------------------------------------------------------

WARNING:TYPO_SPELLING: 'challanges' may be misspelled - perhaps 'challenges'?
#43: 
written with the specific challanges of the x86 architecture in mind, most
                          ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Challange' may be misspelled - perhaps 'Challenge'?
#86: 
The Resource Management Challange
                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'multipe' may be misspelled - perhaps 'multiple'?
#119: 
allow for multipe bridges even on small desktop boxes.  Also, as hotplugable
          ^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#139: 
is that that the kernel cannot always determine who is producing a resource,

WARNING:TYPO_SPELLING: 'vaild' may be misspelled - perhaps 'valid'?
#184: 
  vaild
  ^^^^^

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#284: 
--- a/drivers/base/Makefile	2004-07-26 10:39:02.000000000 +0000

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#310: FILE: drivers/base/core.c:233:
+	if ((error = device_res_add(dev)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <RESError>
#311: FILE: drivers/base/core.c:234:
+		goto RESError;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#331: FILE: drivers/base/init.c:16:
+extern int resource_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#356: FILE: drivers/base/resource/Makefile:10:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#362: FILE: drivers/base/resource/assign.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#422: FILE: drivers/base/resource/assign.c:61:
+	if ((ret = res->dev->bus->verify(res, &n)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#425: FILE: drivers/base/resource/assign.c:64:
+	if ((ret = __resource_register(res, ordered ? conflict : NULL,

CHECK:BRACES: braces {} should be used on all arms of this statement
#425: FILE: drivers/base/resource/assign.c:64:
+	if ((ret = __resource_register(res, ordered ? conflict : NULL,
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: drivers/base/resource/assign.c:65:
+	if ((ret = __resource_register(res, ordered ? conflict : NULL,
+				      &conflict))) {

CHECK:BRACES: Unbalanced braces around else statement
#433: FILE: drivers/base/resource/assign.c:72:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#442: FILE: drivers/base/resource/assign.c:81:
+EXPORT_SYMBOL(resource_assign);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: drivers/base/resource/assign.c:99:
+	int err = 0, first = 1;
+	next = min;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#464: FILE: drivers/base/resource/assign.c:103:
+	do {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#465: FILE: drivers/base/resource/assign.c:104:
+		if (first)
[...]
+		else if (!next) {
[...]

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#489: FILE: drivers/base/resource/assign.c:128:
+EXPORT_SYMBOL(res_assign_range);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#494: FILE: drivers/base/resource/compat.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#513: FILE: drivers/base/resource/compat.c:20:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#517: FILE: drivers/base/resource/compat.c:24:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#518: FILE: drivers/base/resource/compat.c:25:
+static struct res_type * get_resource_type(struct resource *res)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: drivers/base/resource/compat.c:28:
+	int type = (res->flags & (IORESOURCE_IO | IORESOURCE_MEM));
+	if (type == IORESOURCE_IO)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#528: FILE: drivers/base/resource/compat.c:35:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#541: FILE: drivers/base/resource/compat.c:48:
+EXPORT_SYMBOL(request_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#557: FILE: drivers/base/resource/compat.c:64:
+EXPORT_SYMBOL(____request_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#564: FILE: drivers/base/resource/compat.c:71:
+EXPORT_SYMBOL(release_resource);

ERROR:SPACING: space required before the open parenthesis '('
#588: FILE: drivers/base/resource/compat.c:95:
+	for(;;) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#625: FILE: drivers/base/resource/compat.c:132:
+	struct res_type *type = get_resource_type(root);
+	if (!type)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#639: FILE: drivers/base/resource/compat.c:146:
+EXPORT_SYMBOL(allocate_resource);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#653: FILE: drivers/base/resource/compat.c:160:
+struct resource * __request_region(struct resource *parent, unsigned long start, unsigned long n, const char *name)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#653: FILE: drivers/base/resource/compat.c:160:
+struct resource * __request_region(struct resource *parent, unsigned long start, unsigned long n, const char *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#657: FILE: drivers/base/resource/compat.c:164:
+	struct res_type *type = get_resource_type(parent);
+	if (!type)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#692: FILE: drivers/base/resource/compat.c:199:
+EXPORT_SYMBOL(__request_region);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#696: FILE: drivers/base/resource/compat.c:203:
+	struct resource * res;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#707: FILE: drivers/base/resource/compat.c:214:
+EXPORT_SYMBOL(__check_region);

WARNING:LINE_SPACING: Missing a blank line after declarations
#714: FILE: drivers/base/resource/compat.c:221:
+	struct res_type *type = get_resource_type(parent);
+	if (!type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#744: FILE: drivers/base/resource/compat.c:251:
+	printk(KERN_WARNING "Trying to free nonexistent resource <%08lx-%08lx>\n", start, end);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#747: FILE: drivers/base/resource/compat.c:254:
+EXPORT_SYMBOL(__release_region);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#762: FILE: drivers/base/resource/compat.c:269:
+		if (get_option (&str, &io_start) != 2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#764: FILE: drivers/base/resource/compat.c:271:
+		if (get_option (&str, &io_num)   == 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#768: FILE: drivers/base/resource/compat.c:275:
+			struct resource *res = reserve + x;
+			res->name = "reserved";

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#773: FILE: drivers/base/resource/compat.c:280:
+			if (request_resource(res->start >= 0x10000 ? &iomem_resource : &ioport_resource, res) == 0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#774: FILE: drivers/base/resource/compat.c:281:
+				reserved = x+1;
 				            ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#780: FILE: drivers/base/resource/compat.c:287:
+__setup("reserve=", reserve_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#785: FILE: drivers/base/resource/device.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#809: FILE: drivers/base/resource/device.c:25:
+		printk(KERN_ERR "RES: unable to assign resource for %s:%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/base/resource/device.c:26:
+		printk(KERN_ERR "RES: unable to assign resource for %s:%s\n",
+		 dev->bus ? dev->bus->name : "No Bus", dev->kobj.name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#823: FILE: drivers/base/resource/device.c:39:
+EXPORT_SYMBOL(device_enable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#838: FILE: drivers/base/resource/device.c:54:
+EXPORT_SYMBOL(device_disable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#860: FILE: drivers/base/resource/device.c:76:
+EXPORT_SYMBOL(device_find_resource);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#865: FILE: drivers/base/resource/main.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#866: FILE: drivers/base/resource/main.c:2:
+ * drivers/base/resource/main.c - links the driver model to resource management

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#880: FILE: drivers/base/resource/main.c:16:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#881: FILE: drivers/base/resource/main.c:17:
+int device_res_add(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#891: FILE: drivers/base/resource/main.c:27:
+void device_res_remove(struct device * dev)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#901: FILE: drivers/base/resource/proc.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#923: FILE: drivers/base/resource/proc.c:23:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#926: FILE: drivers/base/resource/proc.c:26:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#945: FILE: drivers/base/resource/proc.c:45:
+	loff_t l = 0;
+	down_read(&type->rwsem);

WARNING:LINE_SPACING: Missing a blank line after declarations
#954: FILE: drivers/base/resource/proc.c:54:
+	struct res_type *type = m->private;
+	up_read(&type->rwsem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: drivers/base/resource/proc.c:69:
+	seq_printf(m, "%*s%0*lx-%0*lx : %s\n",
+			depth * 2, "",

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#976: FILE: drivers/base/resource/proc.c:76:
+struct seq_operations resource_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#986: FILE: drivers/base/resource/proc.c:86:
+	int res = seq_open(file, &resource_op);
+	if (!res) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#988: FILE: drivers/base/resource/proc.c:88:
+		struct seq_file *m = file->private_data;
+		m->private = &ioport_res_type;

WARNING:LINE_SPACING: Missing a blank line after declarations
#996: FILE: drivers/base/resource/proc.c:96:
+	int res = seq_open(file, &resource_op);
+	if (!res) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#998: FILE: drivers/base/resource/proc.c:98:
+		struct seq_file *m = file->private_data;
+		m->private = &iomem_res_type;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1003: FILE: drivers/base/resource/proc.c:103:
+static struct file_operations proc_ioports_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1010: FILE: drivers/base/resource/proc.c:110:
+static struct file_operations proc_iomem_operations = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1033: FILE: drivers/base/resource/resource.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1052: FILE: drivers/base/resource/resource.c:20:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1057: FILE: drivers/base/resource/resource.c:25:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1058: FILE: drivers/base/resource/resource.c:26:
+struct resource * get_resource(struct resource *res)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1064: FILE: drivers/base/resource/resource.c:32:
+EXPORT_SYMBOL(get_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1071: FILE: drivers/base/resource/resource.c:39:
+EXPORT_SYMBOL(put_resource);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new->start != root->start'
#1099: FILE: drivers/base/resource/resource.c:67:
+		if ((root->flags & IORESOURCE_SINGLE) ?
+		     (new->start != root->start) :
+		     (start > root->end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start > root->end'
#1099: FILE: drivers/base/resource/resource.c:67:
+		if ((root->flags & IORESOURCE_SINGLE) ?
+		     (new->start != root->start) :
+		     (start > root->end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->dev->state == DEVICE_ENABLED'
#1187: FILE: drivers/base/resource/resource.c:155:
+	if (res->dev && (res->dev->state == DEVICE_ENABLED))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1190: FILE: drivers/base/resource/resource.c:158:
+	if ((res = resource_checkin(res, from))) {

ERROR:SPACING: space required before the open parenthesis '('
#1198: FILE: drivers/base/resource/resource.c:166:
+	if((ret = kobject_set_name(&res->kobj, "0x%016lx", res->start))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1198: FILE: drivers/base/resource/resource.c:166:
+	if((ret = kobject_set_name(&res->kobj, "0x%016lx", res->start))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1204: FILE: drivers/base/resource/resource.c:172:
+	if ((ret = kobject_register(&res->kobj))) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1261: FILE: drivers/base/resource/resource.c:229:
+EXPORT_SYMBOL(resource_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1275: FILE: drivers/base/resource/resource.c:243:
+	if (res->flags & IORESOURCE_REGISTERED &&
+	   !(res->dev && res->dev->state == DEVICE_ENABLED))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1283: FILE: drivers/base/resource/resource.c:251:
+EXPORT_SYMBOL(resource_unregister);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1289: FILE: drivers/base/resource/resource.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1301: FILE: drivers/base/resource/resource.h:13:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1308: FILE: drivers/base/resource/resource.h:20:
+extern int __resource_register(struct resource *res, struct resource *from,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1310: FILE: drivers/base/resource/resource.h:22:
+extern int __resource_unregister(struct resource *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1313: FILE: drivers/base/resource/resource.h:25:
+extern int res_proc_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1318: FILE: drivers/base/resource/resource.h:30:
+extern int res_sysfs_add(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1319: FILE: drivers/base/resource/resource.h:31:
+extern void res_sysfs_remove(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1321: FILE: drivers/base/resource/resource.h:33:
+extern int device_res_add(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1321: FILE: drivers/base/resource/resource.h:33:
+extern int device_res_add(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1322: FILE: drivers/base/resource/resource.h:34:
+extern void device_res_remove(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#1322: FILE: drivers/base/resource/resource.h:34:
+extern void device_res_remove(struct device *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1327: FILE: drivers/base/resource/slot.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#1352: FILE: drivers/base/resource/slot.c:26:
+	int err;
+	if (!slot->res)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1354: FILE: drivers/base/resource/slot.c:28:
+	if ((err = resource_unregister(slot->res)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1367: FILE: drivers/base/resource/slot.c:41:
+			if ((err = __res_slot_release(slot))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*slot->res)...) over kmalloc(sizeof(struct resource)...)
#1373: FILE: drivers/base/resource/slot.c:47:
+		slot->res = kmalloc(sizeof(struct resource), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1387: FILE: drivers/base/resource/slot.c:61:
+EXPORT_SYMBOL(res_slot_allocate);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1392: FILE: drivers/base/resource/slot.c:66:
+	int ret;
+	down(&slot_mutex);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1398: FILE: drivers/base/resource/slot.c:72:
+EXPORT_SYMBOL(res_slot_release);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1406: FILE: drivers/base/resource/slot.c:80:
+		if ((ret = __res_slot_release(&dev->resource[i])))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1413: FILE: drivers/base/resource/slot.c:87:
+EXPORT_SYMBOL(device_clear_slots);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1422: FILE: drivers/base/resource/slot.c:96:
+		struct resource *res = dev->resource[i].res;
+		if (!res)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1426: FILE: drivers/base/resource/slot.c:100:
+		if ((ret = __res_slot_release(&dev->resource[i])))

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1434: FILE: drivers/base/resource/slot.c:108:
+EXPORT_SYMBOL(device_clean_slots);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1439: FILE: drivers/base/resource/sysfs.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1456: FILE: drivers/base/resource/sysfs.c:18:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1461: FILE: drivers/base/resource/sysfs.c:23:
+#define RESOURCE_ATTR(_name,_show)	\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1462: FILE: drivers/base/resource/sysfs.c:24:
+struct resource_attribute res_attr_##_name = __ATTR(_name,0444,_show,NULL)
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1462: FILE: drivers/base/resource/sysfs.c:24:
+struct resource_attribute res_attr_##_name = __ATTR(_name,0444,_show,NULL)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1462: FILE: drivers/base/resource/sysfs.c:24:
+struct resource_attribute res_attr_##_name = __ATTR(_name,0444,_show,NULL)
                                                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1464: FILE: drivers/base/resource/sysfs.c:26:
+static ssize_t length_show(struct resource *res, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1471: FILE: drivers/base/resource/sysfs.c:33:
+static ssize_t sharable_show(struct resource *res, char * buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1474: FILE: drivers/base/resource/sysfs.c:36:
+	int share_disposition = (res->flags & IORESOURCE_SHARABLE) ? 1 : 0;
+	return sprintf(buf, "%u\n", share_disposition);

WARNING:TYPO_SPELLING: 'sharable' may be misspelled - perhaps 'shareable'?
#1477: FILE: drivers/base/resource/sysfs.c:39:
+static RESOURCE_ATTR(sharable, sharable_show);
                      ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1479: FILE: drivers/base/resource/sysfs.c:41:
+static ssize_t config_show(struct resource *res, char * buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1482: FILE: drivers/base/resource/sysfs.c:44:
+	char *config;
+	if (res->flags & IORESOURCE_BIOS_SET)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1494: FILE: drivers/base/resource/sysfs.c:56:
+static ssize_t flags_show(struct resource *res, char * buf)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1501: FILE: drivers/base/resource/sysfs.c:63:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1502: FILE: drivers/base/resource/sysfs.c:64:
+struct attribute * res_ranged_default_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1509: FILE: drivers/base/resource/sysfs.c:71:
+struct attribute * res_single_default_attrs[] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1516: FILE: drivers/base/resource/sysfs.c:78:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1521: FILE: drivers/base/resource/sysfs.c:83:
+static ssize_t state_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1521: FILE: drivers/base/resource/sysfs.c:83:
+static ssize_t state_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1523: FILE: drivers/base/resource/sysfs.c:85:
+	char * state = dev->state ? "enabled" : "disabled";

WARNING:LINE_SPACING: Missing a blank line after declarations
#1524: FILE: drivers/base/resource/sysfs.c:86:
+	char * state = dev->state ? "enabled" : "disabled";
+	return sprintf(buf, "%s\n", state);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1527: FILE: drivers/base/resource/sysfs.c:89:
+static ssize_t state_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1527: FILE: drivers/base/resource/sysfs.c:89:
+static ssize_t state_store(struct device * dev, const char * buf, size_t n)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1531: FILE: drivers/base/resource/sysfs.c:93:
+	if (!strnicmp(buf,"enable",6)) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1531: FILE: drivers/base/resource/sysfs.c:93:
+	if (!strnicmp(buf,"enable",6)) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1536: FILE: drivers/base/resource/sysfs.c:98:
+	if (!strnicmp(buf,"disable",7))
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1536: FILE: drivers/base/resource/sysfs.c:98:
+	if (!strnicmp(buf,"disable",7))
 	                           ^

WARNING:DEVICE_ATTR_RW: Use DEVICE_ATTR_RW
#1541: FILE: drivers/base/resource/sysfs.c:103:
+}

The DEVICE_ATTR_RW(name) helper macro can be used instead of
DEVICE_ATTR(name, 0644, name_show, name_store);

Note that the macro automatically appends _show and _store to the
named attribute variable of the device for the show and store methods.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1545: FILE: drivers/base/resource/sysfs.c:107:
+static ssize_t resources_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1545: FILE: drivers/base/resource/sysfs.c:107:
+static ssize_t resources_show(struct device * dev, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1547: FILE: drivers/base/resource/sysfs.c:109:
+	char * str = buf;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1552: FILE: drivers/base/resource/sysfs.c:114:
+		struct res_slot *slot = &dev->resource[i];
+		str += sprintf(str, "%u %s ", i+1, slot->type->name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1552: FILE: drivers/base/resource/sysfs.c:114:
+		str += sprintf(str, "%u %s ", i+1, slot->type->name);
 		                               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1553: FILE: drivers/base/resource/sysfs.c:115:
+		if (!slot->res)
[...]
+		else if (slot->res->flags & IORESOURCE_DISABLED)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1557: FILE: drivers/base/resource/sysfs.c:119:
+		else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1568: FILE: drivers/base/resource/sysfs.c:130:
+static ssize_t resources_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1568: FILE: drivers/base/resource/sysfs.c:130:
+static ssize_t resources_store(struct device * dev, const char * buf, size_t n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1571: FILE: drivers/base/resource/sysfs.c:133:
+	char * rest;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1575: FILE: drivers/base/resource/sysfs.c:137:
+	if (!strnicmp(buf,"clear",5)) {
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1575: FILE: drivers/base/resource/sysfs.c:137:
+	if (!strnicmp(buf,"clear",5)) {
 	                         ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1580: FILE: drivers/base/resource/sysfs.c:142:
+	index = simple_strtoul(buf, &rest, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1586: FILE: drivers/base/resource/sysfs.c:148:
+	slot = &dev->resource[index-1];
 	                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1587: FILE: drivers/base/resource/sysfs.c:149:
+	if ((err = res_slot_allocate(slot)))

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1592: FILE: drivers/base/resource/sysfs.c:154:
+	slot->res->start = simple_strtoul(rest, &rest, 0);

ERROR:SPACING: space required before the open parenthesis '('
#1596: FILE: drivers/base/resource/sysfs.c:158:
+	if(*buf == '-') {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1600: FILE: drivers/base/resource/sysfs.c:162:
+		slot->res->end = simple_strtoul(rest, &rest, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1605: FILE: drivers/base/resource/sysfs.c:167:
+	slot->res->flags = simple_strtoul(rest, &rest, 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1607: FILE: drivers/base/resource/sysfs.c:169:
+	if ((err = resource_register(slot->res)))

WARNING:DEVICE_ATTR_RW: Use DEVICE_ATTR_RW
#1612: FILE: drivers/base/resource/sysfs.c:174:
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1616: FILE: drivers/base/resource/sysfs.c:178:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1617: FILE: drivers/base/resource/sysfs.c:179:
+static struct attribute * resource_attrs[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1628: FILE: drivers/base/resource/sysfs.c:190:
+int res_sysfs_add(struct device * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1633: FILE: drivers/base/resource/sysfs.c:195:
+void res_sysfs_remove(struct device * dev)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1641: FILE: drivers/base/resource/types.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1660: FILE: drivers/base/resource/types.c:20:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1666: FILE: drivers/base/resource/types.c:26:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1680: FILE: drivers/base/resource/types.c:40:
+EXPORT_SYMBOL(ioport_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1688: FILE: drivers/base/resource/types.c:48:
+EXPORT_SYMBOL(ioport_res_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1697: FILE: drivers/base/resource/types.c:57:
+EXPORT_SYMBOL(iomem_resource);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1705: FILE: drivers/base/resource/types.c:65:
+EXPORT_SYMBOL(iomem_res_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1720: FILE: drivers/base/resource/types.c:80:
+EXPORT_SYMBOL(irq_res_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1735: FILE: drivers/base/resource/types.c:95:
+EXPORT_SYMBOL(dma_res_type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1737: FILE: drivers/base/resource/types.c:97:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1742: FILE: drivers/base/resource/types.c:102:
+struct res_type * get_res_type(struct res_type *type)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1748: FILE: drivers/base/resource/types.c:108:
+EXPORT_SYMBOL(get_res_type);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1755: FILE: drivers/base/resource/types.c:115:
+EXPORT_SYMBOL(put_res_type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1757: FILE: drivers/base/resource/types.c:117:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1765: FILE: drivers/base/resource/types.c:125:
+extern struct attribute * res_ranged_default_attrs[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1765: FILE: drivers/base/resource/types.c:125:
+extern struct attribute * res_ranged_default_attrs[];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1766: FILE: drivers/base/resource/types.c:126:
+extern struct attribute * res_single_default_attrs[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1766: FILE: drivers/base/resource/types.c:126:
+extern struct attribute * res_single_default_attrs[];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1769: FILE: drivers/base/resource/types.c:129:
+res_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1769: FILE: drivers/base/resource/types.c:129:
+res_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1769: FILE: drivers/base/resource/types.c:129:
+res_attr_show(struct kobject * kobj, struct attribute * attr, char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1781: FILE: drivers/base/resource/types.c:141:
+res_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1781: FILE: drivers/base/resource/types.c:141:
+res_attr_store(struct kobject * kobj, struct attribute * attr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1782: FILE: drivers/base/resource/types.c:142:
+	       const char * buf, size_t count)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1793: FILE: drivers/base/resource/types.c:153:
+static struct sysfs_ops resource_sysfs_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1798: FILE: drivers/base/resource/types.c:158:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1799: FILE: drivers/base/resource/types.c:159:
+static void resource_release(struct kobject * kobj)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1802: FILE: drivers/base/resource/types.c:162:
+	struct resource *res = to_resource(kobj);
+	if (res->dev || (res->flags & IORESOURCE_REQUEST_REGION)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1802: FILE: drivers/base/resource/types.c:162:
+	if (res->dev || (res->flags & IORESOURCE_REQUEST_REGION)) {
+		kfree(res);
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1822: FILE: drivers/base/resource/types.c:182:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1830: FILE: drivers/base/resource/types.c:190:
+	int ret;
+	init_rwsem(&type->rwsem);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1832: FILE: drivers/base/resource/types.c:192:
+	if ((ret = kobject_set_name(&type->subsys.kset.kobj, type->name)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1840: FILE: drivers/base/resource/types.c:200:
+	if ((ret = subsystem_register(&type->subsys)))

ERROR:SPACING: space required before the open parenthesis '('
#1844: FILE: drivers/base/resource/types.c:204:
+	if((ret = kobject_set_name(&type->root->kobj, "0x%016lx",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1844: FILE: drivers/base/resource/types.c:204:
+	if((ret = kobject_set_name(&type->root->kobj, "0x%016lx",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1850: FILE: drivers/base/resource/types.c:210:
+	if ((ret = kobject_register(&type->root->kobj))) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1858: FILE: drivers/base/resource/types.c:218:
+EXPORT_SYMBOL(res_type_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1866: FILE: drivers/base/resource/types.c:226:
+EXPORT_SYMBOL(res_type_unregister);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1868: FILE: drivers/base/resource/types.c:228:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1876: FILE: drivers/base/resource/types.c:236:
+	int ret;
+	ret = subsystem_register(&resource_subsys);

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#1921: FILE: include/linux/device.h:292:
+	struct res_slot	* resource;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1942: FILE: include/linux/ioport.h:14:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2044: FILE: include/linux/ioport.h:110:
+extern int resource_register(struct resource *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2045: FILE: include/linux/ioport.h:111:
+extern int resource_unregister(struct resource *res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2047: FILE: include/linux/ioport.h:113:
+extern struct resource * get_resource(struct resource *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2047: FILE: include/linux/ioport.h:113:
+extern struct resource * get_resource(struct resource *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2048: FILE: include/linux/ioport.h:114:
+extern void put_resource(struct resource *res);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2050: FILE: include/linux/ioport.h:116:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2070: FILE: include/linux/ioport.h:136:
+extern int res_type_register(struct res_type *type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2071: FILE: include/linux/ioport.h:137:
+extern void res_type_unregister(struct res_type *type);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2073: FILE: include/linux/ioport.h:139:
+extern struct res_type * get_res_type(struct res_type *type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2073: FILE: include/linux/ioport.h:139:
+extern struct res_type * get_res_type(struct res_type *type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2074: FILE: include/linux/ioport.h:140:
+extern void put_res_type(struct res_type *type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2076: FILE: include/linux/ioport.h:142:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2087: FILE: include/linux/ioport.h:152:
+extern int res_slot_allocate(struct res_slot *slot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2088: FILE: include/linux/ioport.h:153:
+extern int res_slot_release(struct res_slot *slot);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2090: FILE: include/linux/ioport.h:155:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2099: FILE: include/linux/ioport.h:164:
+extern int res_assign_range(struct resource *res, unsigned long min,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2103: FILE: include/linux/ioport.h:168:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2108: FILE: include/linux/ioport.h:173:
+extern int device_enable(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2109: FILE: include/linux/ioport.h:174:
+extern int device_disable(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2110: FILE: include/linux/ioport.h:175:
+extern int device_clear_slots(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2111: FILE: include/linux/ioport.h:176:
+extern int device_clean_slots(struct device *dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2116: FILE: include/linux/ioport.h:181:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 98 warnings, 63 checks, 1834 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
