WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
diff -urP linux-2.4.17/include/linux/sysctl.h linux.patch/include/linux/sysctl.h

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: include/linux/sysctl.h:127:
+       KERN_CORE_NAME_FORMAT=55, /* string: core file name format string */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#74: FILE: include/linux/sysctl.h:127:
+       KERN_CORE_NAME_FORMAT=55, /* string: core file name format string */
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: kernel/sysctl.c:52:
+extern char core_name_format[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: kernel/sysctl.c:175:
+       {KERN_CORE_NAME_FORMAT, "core_name_format", core_name_format, 64,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: kernel/sysctl.c:176:
+        0644, NULL, &proc_doutsstring, &sysctl_string},$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: kernel/sysctl.c:176:
+        0644, NULL, &proc_doutsstring, &sysctl_string},$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#114: FILE: fs/exec.c:53:
+/* The format string for the core file name...
+   We default to "core" such that past behavior

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#116: FILE: fs/exec.c:55:
+   arbitrary but must match the sysctl table. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#127: FILE: fs/exec.c:944:
+/* This is the maximum expanded core file name.  We use
+   a reasonable number here since we use the stack to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#131: FILE: fs/exec.c:948:
+   is in the core_name_format string. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: fs/exec.c:958:
+       int fmt_i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: fs/exec.c:959:
+       int name_n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: fs/exec.c:960:
+       int addPID;$

CHECK:CAMELCASE: Avoid CamelCase: <addPID>
#144: FILE: fs/exec.c:960:
+       int addPID;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: fs/exec.c:961:
+       char *cname;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: fs/exec.c:964:
+          we do is always check that we are less than MAX$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#148: FILE: fs/exec.c:964:
+       /* The +11 is here to simplify the code path.  What
+          we do is always check that we are less than MAX

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: fs/exec.c:965:
+          but there are times when we also need to append$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: fs/exec.c:966:
+          a number (such as the PID or UID).  Rather than$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: fs/exec.c:967:
+          using another temporary buffer, we provide for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: fs/exec.c:968:
+          enough extra space such that those numbers can$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: fs/exec.c:969:
+          be added in one gulp even if we are just under$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: fs/exec.c:970:
+          the MAX_CORE_NAME.  Reduction in complexity of$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: fs/exec.c:971:
+          the code path means a more reliable implementation. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#155: FILE: fs/exec.c:971:
+          the code path means a more reliable implementation. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/exec.c:972:
+       char corename[MAX_CORE_NAME + 1 + 11];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: fs/exec.c:985:
+          already is added in the format we will end up clearing this.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#170: FILE: fs/exec.c:985:
+       /* Set this to true if we are going to add the PID.  If the PID
+          already is added in the format we will end up clearing this.

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: fs/exec.c:986:
+          The purpose is to provide for the old behavior of adding the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: fs/exec.c:987:
+          PID to the core file name but to not add it if it already$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: fs/exec.c:988:
+          was included via the file name format pattern. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#173: FILE: fs/exec.c:988:
+          was included via the file name format pattern. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: fs/exec.c:989:
+       addPID = (core_uses_pid || atomic_read(&current->mm->mm_users) != 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: fs/exec.c:992:
+       for (fmt_i=0, name_n=0;$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#177: FILE: fs/exec.c:992:
+       for (fmt_i=0, name_n=0;
+            name_n < MAX_CORE_NAME && core_name_format[fmt_i];
+            fmt_i++)
+       {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#177: FILE: fs/exec.c:992:
+       for (fmt_i=0, name_n=0;
[...]
+       {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: fs/exec.c:992:
+       for (fmt_i=0, name_n=0;
                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: fs/exec.c:992:
+       for (fmt_i=0, name_n=0;
                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: fs/exec.c:993:
+            name_n < MAX_CORE_NAME && core_name_format[fmt_i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: fs/exec.c:993:
+            name_n < MAX_CORE_NAME && core_name_format[fmt_i];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: fs/exec.c:994:
+            fmt_i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: fs/exec.c:994:
+            fmt_i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/exec.c:995:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: fs/exec.c:996:
+               switch (core_name_format[fmt_i])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: fs/exec.c:996:
+               switch (core_name_format[fmt_i])$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#181: FILE: fs/exec.c:996:
+               switch (core_name_format[fmt_i])
+               {

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: fs/exec.c:997:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: fs/exec.c:997:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/exec.c:998:
+               case '%':       /* A format character */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/exec.c:998:
+               case '%':       /* A format character */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/exec.c:999:
+                       fmt_i++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/exec.c:999:
+                       fmt_i++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: fs/exec.c:1000:
+                       switch (core_name_format[fmt_i])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: fs/exec.c:1000:
+                       switch (core_name_format[fmt_i])$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#185: FILE: fs/exec.c:1000:
+                       switch (core_name_format[fmt_i])
+                       {

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: fs/exec.c:1001:
+                       {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/exec.c:1001:
+                       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: fs/exec.c:1002:
+                       case '%': /* The way we get this character */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: fs/exec.c:1002:
+                       case '%': /* The way we get this character */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: fs/exec.c:1003:
+                               corename[name_n++] = '%';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/exec.c:1003:
+                               corename[name_n++] = '%';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: fs/exec.c:1004:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: fs/exec.c:1004:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: fs/exec.c:1006:
+                       case 'N': /* Process name */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/exec.c:1006:
+                       case 'N': /* Process name */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: fs/exec.c:1007:
+                               cname=current->comm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: fs/exec.c:1007:
+                               cname=current->comm;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#192: FILE: fs/exec.c:1007:
+                               cname=current->comm;
                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: fs/exec.c:1009:
+                               /* Only copy as much as will fit within the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: fs/exec.c:1010:
+                                  MAX_CORE_NAME */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#195: FILE: fs/exec.c:1010:
+                               /* Only copy as much as will fit within the
+                                  MAX_CORE_NAME */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#195: FILE: fs/exec.c:1010:
+                                  MAX_CORE_NAME */

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/exec.c:1011:
+                               while (*cname && (name_n < MAX_CORE_NAME))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/exec.c:1011:
+                               while (*cname && (name_n < MAX_CORE_NAME))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#196: FILE: fs/exec.c:1011:
+                               while (*cname && (name_n < MAX_CORE_NAME))
+                               {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#196: FILE: fs/exec.c:1011:
+                               while (*cname && (name_n < MAX_CORE_NAME))
+                               {

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/exec.c:1012:
+                               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/exec.c:1012:
+                               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/exec.c:1013:
+                                       if (*cname != '/')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/exec.c:1013:
+                                       if (*cname != '/')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (39, 47)
#198: FILE: fs/exec.c:1013:
+                                       if (*cname != '/')
+                                               corename[name_n++] = *cname;

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: fs/exec.c:1014:
+                                               corename[name_n++] = *cname;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: fs/exec.c:1014:
+                                               corename[name_n++] = *cname;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: fs/exec.c:1015:
+                                       cname++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/exec.c:1015:
+                                       cname++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: fs/exec.c:1016:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: fs/exec.c:1016:
+                               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: fs/exec.c:1017:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: fs/exec.c:1017:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: fs/exec.c:1019:
+                       case 'H': /* Node name */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: fs/exec.c:1019:
+                       case 'H': /* Node name */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: fs/exec.c:1020:
+                               cname=system_utsname.nodename;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/exec.c:1020:
+                               cname=system_utsname.nodename;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#205: FILE: fs/exec.c:1020:
+                               cname=system_utsname.nodename;
                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: fs/exec.c:1022:
+                               /* Only copy as much as will fit within the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: fs/exec.c:1023:
+                                  MAX_CORE_NAME */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#208: FILE: fs/exec.c:1023:
+                               /* Only copy as much as will fit within the
+                                  MAX_CORE_NAME */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#208: FILE: fs/exec.c:1023:
+                                  MAX_CORE_NAME */

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/exec.c:1024:
+                               while (*cname && (name_n < MAX_CORE_NAME))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/exec.c:1024:
+                               while (*cname && (name_n < MAX_CORE_NAME))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#209: FILE: fs/exec.c:1024:
+                               while (*cname && (name_n < MAX_CORE_NAME))
+                               {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#209: FILE: fs/exec.c:1024:
+                               while (*cname && (name_n < MAX_CORE_NAME))
+                               {

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: fs/exec.c:1025:
+                               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: fs/exec.c:1025:
+                               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: fs/exec.c:1026:
+                                       if (*cname != '/')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: fs/exec.c:1026:
+                                       if (*cname != '/')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (39, 47)
#211: FILE: fs/exec.c:1026:
+                                       if (*cname != '/')
+                                               corename[name_n++] = *cname;

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: fs/exec.c:1027:
+                                               corename[name_n++] = *cname;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: fs/exec.c:1027:
+                                               corename[name_n++] = *cname;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: fs/exec.c:1028:
+                                       cname++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: fs/exec.c:1028:
+                                       cname++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: fs/exec.c:1029:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: fs/exec.c:1029:
+                               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: fs/exec.c:1030:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: fs/exec.c:1030:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: fs/exec.c:1032:
+                       case 'P': /* Process PID */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: fs/exec.c:1032:
+                       case 'P': /* Process PID */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: fs/exec.c:1033:
+                               /* Since we are adding it here, don't append */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: fs/exec.c:1034:
+                               addPID=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: fs/exec.c:1034:
+                               addPID=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#219: FILE: fs/exec.c:1034:
+                               addPID=0;
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: fs/exec.c:1036:
+                               /* We don't need to pre-check that the number$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: fs/exec.c:1037:
+                                  fits since we added a padding of 11$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#222: FILE: fs/exec.c:1037:
+                               /* We don't need to pre-check that the number
+                                  fits since we added a padding of 11

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: fs/exec.c:1038:
+                                  characters to the end of the string buffer$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: fs/exec.c:1039:
+                                  just so that we don't need to do an extra$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/exec.c:1040:
+                                  check */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: fs/exec.c:1040:
+                                  check */

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: fs/exec.c:1041:
+                               name_n += sprintf(&corename[name_n],"%d",current->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: fs/exec.c:1041:
+                               name_n += sprintf(&corename[name_n],"%d",current->pid);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: fs/exec.c:1041:
+                               name_n += sprintf(&corename[name_n],"%d",current->pid);
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#226: FILE: fs/exec.c:1041:
+                               name_n += sprintf(&corename[name_n],"%d",current->pid);
                                                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: fs/exec.c:1042:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: fs/exec.c:1042:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: fs/exec.c:1044:
+                       case 'U': /* UID of the process */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: fs/exec.c:1044:
+                       case 'U': /* UID of the process */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/exec.c:1045:
+                               /* We don't need to pre-check that the number$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: fs/exec.c:1046:
+                                  fits since we added a padding of 11$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#231: FILE: fs/exec.c:1046:
+                               /* We don't need to pre-check that the number
+                                  fits since we added a padding of 11

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: fs/exec.c:1047:
+                                  characters to the end of the string buffer$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: fs/exec.c:1048:
+                                  just so that we don't need to do an extra$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: fs/exec.c:1049:
+                                  check */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#234: FILE: fs/exec.c:1049:
+                                  check */

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: fs/exec.c:1050:
+                               name_n += sprintf(&corename[name_n],"%d",current->uid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: fs/exec.c:1050:
+                               name_n += sprintf(&corename[name_n],"%d",current->uid);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: fs/exec.c:1050:
+                               name_n += sprintf(&corename[name_n],"%d",current->uid);
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: fs/exec.c:1050:
+                               name_n += sprintf(&corename[name_n],"%d",current->uid);
                                                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: fs/exec.c:1051:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: fs/exec.c:1051:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: fs/exec.c:1052:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: fs/exec.c:1052:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: fs/exec.c:1053:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: fs/exec.c:1053:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: fs/exec.c:1055:
+               default:        /* Anything else just pass along */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: fs/exec.c:1056:
+                       corename[name_n++] = core_name_format[fmt_i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: fs/exec.c:1056:
+                       corename[name_n++] = core_name_format[fmt_i];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: fs/exec.c:1057:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: fs/exec.c:1057:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: fs/exec.c:1058:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: fs/exec.c:1062:
+       if (addPID && (name_n < MAX_CORE_NAME))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#247: FILE: fs/exec.c:1062:
+       if (addPID && (name_n < MAX_CORE_NAME))
+       {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#247: FILE: fs/exec.c:1062:
+       if (addPID && (name_n < MAX_CORE_NAME))
+       {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'name_n < MAX_CORE_NAME'
#247: FILE: fs/exec.c:1062:
+       if (addPID && (name_n < MAX_CORE_NAME))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: fs/exec.c:1063:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: fs/exec.c:1064:
+               name_n += sprintf(&corename[name_n],".%d",current->pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: fs/exec.c:1064:
+               name_n += sprintf(&corename[name_n],".%d",current->pid);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#249: FILE: fs/exec.c:1064:
+               name_n += sprintf(&corename[name_n],".%d",current->pid);
                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#249: FILE: fs/exec.c:1064:
+               name_n += sprintf(&corename[name_n],".%d",current->pid);
                                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: fs/exec.c:1065:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: fs/exec.c:1068:
+       corename[name_n]='\0';$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#253: FILE: fs/exec.c:1068:
+       corename[name_n]='\0';
                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476713.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 89 errors, 81 warnings, 2 checks, 175 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000476713.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
