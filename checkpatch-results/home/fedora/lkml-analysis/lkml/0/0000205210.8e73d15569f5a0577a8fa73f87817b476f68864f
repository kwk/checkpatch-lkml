WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#111: 
   Signed-off-by: John W. Linville <linville@tuxdriver.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#112: 
   Signed-off-by: Jeff Garzik <jgarzik@pobox.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#136: 
   Signed-off-by: Mark Lord <mlord@pobox.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#137: 
   Signed-off-by: Jeff Garzik <jgarzik@pobox.com>

WARNING:BAD_SIGN_OFF: Duplicate signature
#137: 
   Signed-off-by: Jeff Garzik <jgarzik@pobox.com>

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#170: FILE: drivers/scsi/Kconfig:460:
+config SCSI_SATA_QSTOR
+	tristate "Pacific Digital SATA QStor support"
+	depends on SCSI_SATA && PCI
+	help
+	  This option enables support for Pacific Digital Serial ATA QStor.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:SPACING: No space is necessary after a cast
#218: FILE: drivers/scsi/ahci.c:460:
+	void *mmio = (void *) ap->ioaddr.cmd_addr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#308: FILE: drivers/scsi/libata-core.c:433:
+	if (ap->flags & ATA_FLAG_MMIO) {
+		return readb((void __iomem *) ap->ioaddr.error_addr);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#309: FILE: drivers/scsi/libata-core.c:434:
+		return readb((void __iomem *) ap->ioaddr.error_addr);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qc"
#372: FILE: drivers/scsi/libata-core.c:2787:
+	assert(qc != NULL);	/* ata_qc_from_tag _might_ return NULL */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc->waiting"
#373: FILE: drivers/scsi/libata-core.c:2788:
+	assert(qc->waiting == NULL);	/* nothing should be waiting */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: drivers/scsi/libata-core.c:3084:
+    if (ap->flags & ATA_FLAG_MMIO) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: drivers/scsi/libata-core.c:3085:
+        void __iomem *mmio = ((void __iomem *) ap->ioaddr.bmdma_addr) + ATA_DMA_STATUS;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#388: FILE: drivers/scsi/libata-core.c:3085:
+        void __iomem *mmio = ((void __iomem *) ap->ioaddr.bmdma_addr) + ATA_DMA_STATUS;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: drivers/scsi/libata-core.c:3085:
+        void __iomem *mmio = ((void __iomem *) ap->ioaddr.bmdma_addr) + ATA_DMA_STATUS;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: drivers/scsi/libata-core.c:3086:
+        writeb(readb(mmio), mmio);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: drivers/scsi/libata-core.c:3086:
+        void __iomem *mmio = ((void __iomem *) ap->ioaddr.bmdma_addr) + ATA_DMA_STATUS;
+        writeb(readb(mmio), mmio);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: drivers/scsi/libata-core.c:3086:
+        writeb(readb(mmio), mmio);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: drivers/scsi/libata-core.c:3087:
+    } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: drivers/scsi/libata-core.c:3088:
+        unsigned long addr = ap->ioaddr.bmdma_addr + ATA_DMA_STATUS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: drivers/scsi/libata-core.c:3088:
+        unsigned long addr = ap->ioaddr.bmdma_addr + ATA_DMA_STATUS;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: drivers/scsi/libata-core.c:3089:
+        outb(inb(addr), addr);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: drivers/scsi/libata-core.c:3089:
+        unsigned long addr = ap->ioaddr.bmdma_addr + ATA_DMA_STATUS;
+        outb(inb(addr), addr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: drivers/scsi/libata-core.c:3089:
+        outb(inb(addr), addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: drivers/scsi/libata-core.c:3090:
+    }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#395: FILE: drivers/scsi/libata-core.c:3092:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#400: FILE: drivers/scsi/libata-core.c:3097:
+	u8 host_stat;
+	if (ap->flags & ATA_FLAG_MMIO) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#400: FILE: drivers/scsi/libata-core.c:3097:
+	if (ap->flags & ATA_FLAG_MMIO) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/scsi/libata-core.c:3098:
+		void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: drivers/scsi/libata-core.c:3099:
+		void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;
+		host_stat = readb(mmio + ATA_DMA_STATUS);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#403: FILE: drivers/scsi/libata-core.c:3100:
+	} else
+	host_stat = inb(ap->ioaddr.bmdma_addr + ATA_DMA_STATUS);

CHECK:BRACES: Unbalanced braces around else statement
#403: FILE: drivers/scsi/libata-core.c:3100:
+	} else

CHECK:SPACING: No space is necessary after a cast
#411: FILE: drivers/scsi/libata-core.c:3108:
+		void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: drivers/scsi/libata-core.c:3112:
+		writeb(readb(mmio + ATA_DMA_CMD) & ~ATA_DMA_START,
+			mmio + ATA_DMA_CMD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: drivers/scsi/libata-core.c:3116:
+		outb(inb(ap->ioaddr.bmdma_addr + ATA_DMA_CMD) & ~ATA_DMA_START,
+			ap->ioaddr.bmdma_addr + ATA_DMA_CMD);

CHECK:BRACES: Unbalanced braces around else statement
#479: FILE: drivers/scsi/libata-core.c:3778:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: drivers/scsi/libata-core.c:3792:
+			else {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#513: FILE: drivers/scsi/libata-core.c:3997:
+EXPORT_SYMBOL_GPL(ata_chk_err);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#522: FILE: drivers/scsi/libata-core.c:4007:
+EXPORT_SYMBOL_GPL(ata_bmdma_stop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: drivers/scsi/libata.h:40:
+extern void ata_qc_free(struct ata_queued_cmd *qc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#627: FILE: drivers/scsi/sata_qstor.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#663: FILE: drivers/scsi/sata_qstor.c:37:
+#include <asm/io.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#727: FILE: drivers/scsi/sata_qstor.c:101:
+typedef enum { qs_state_idle, qs_state_pkt, qs_state_mmio } qs_state_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#735: FILE: drivers/scsi/sata_qstor.c:109:
+static u32 qs_scr_read (struct ata_port *ap, unsigned int sc_reg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#736: FILE: drivers/scsi/sata_qstor.c:110:
+static void qs_scr_write (struct ata_port *ap, unsigned int sc_reg, u32 val);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#737: FILE: drivers/scsi/sata_qstor.c:111:
+static int qs_ata_init_one (struct pci_dev *pdev, const struct pci_device_id *ent);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#738: FILE: drivers/scsi/sata_qstor.c:112:
+static irqreturn_t qs_intr (int irq, void *dev_instance, struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#750: FILE: drivers/scsi/sata_qstor.c:124:
+static Scsi_Host_Template qs_ata_sht = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#860: FILE: drivers/scsi/sata_qstor.c:234:
+static u32 qs_scr_read (struct ata_port *ap, unsigned int sc_reg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#867: FILE: drivers/scsi/sata_qstor.c:241:
+static void qs_scr_write (struct ata_port *ap, unsigned int sc_reg, u32 val)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sg"
#882: FILE: drivers/scsi/sata_qstor.c:256:
+	assert(sg != NULL);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#885: FILE: drivers/scsi/sata_qstor.c:259:
+	for (nelem = 0; nelem < qc->n_elem; nelem++,sg++) {
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: drivers/scsi/sata_qstor.c:272:
+		VPRINTK("PRD[%u] = (0x%llX, 0x%X)\n", nelem,
+					(unsigned long long)addr, len);

ERROR:SPACING: space prohibited after that open square bracket '['
#925: FILE: drivers/scsi/sata_qstor.c:299:
+	buf[ 0] = QS_HCB_HDR;

ERROR:SPACING: space prohibited after that open square bracket '['
#926: FILE: drivers/scsi/sata_qstor.c:300:
+	buf[ 1] = hflags;

ERROR:SPACING: space prohibited after that open square bracket '['
#927: FILE: drivers/scsi/sata_qstor.c:301:
+	*(u32 *)(&buf[ 4]) = cpu_to_le32(qc->nsect * ATA_SECT_SIZE);

ERROR:SPACING: space prohibited after that open square bracket '['
#928: FILE: drivers/scsi/sata_qstor.c:302:
+	*(u32 *)(&buf[ 8]) = cpu_to_le32(qc->n_elem);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#965: FILE: drivers/scsi/sata_qstor.c:339:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <sFFE>
#979: FILE: drivers/scsi/sata_qstor.c:353:
+	u8 sFFE;

CHECK:CAMELCASE: Avoid CamelCase: <sEVLD>
#985: FILE: drivers/scsi/sata_qstor.c:359:
+		u8 sEVLD = (sff1 >> 30) & 0x01;	/* valid flag */

WARNING:LINE_SPACING: Missing a blank line after declarations
#986: FILE: drivers/scsi/sata_qstor.c:360:
+		u8 sEVLD = (sff1 >> 30) & 0x01;	/* valid flag */
+		sFFE  = sff1 >> 31;		/* empty flag */

CHECK:CAMELCASE: Avoid CamelCase: <sDST>
#989: FILE: drivers/scsi/sata_qstor.c:363:
+			u8 sDST = sff0 >> 16;	/* dev status */

CHECK:CAMELCASE: Avoid CamelCase: <sHST>
#990: FILE: drivers/scsi/sata_qstor.c:364:
+			u8 sHST = sff1 & 0x3f;	/* host status */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: drivers/scsi/sata_qstor.c:369:
+			DPRINTK("SFF=%08x%08x: sCHAN=%u sHST=%d sDST=%02x\n",
+					sff1, sff0, port_no, sHST, sDST);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1000: FILE: drivers/scsi/sata_qstor.c:374:
+				struct qs_port_priv *pp = ap->private_data;
+				if (!pp || pp->state != qs_state_pkt)

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#1005: FILE: drivers/scsi/sata_qstor.c:379:
+					case 0: /* sucessful CPB */
 					           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1027: FILE: drivers/scsi/sata_qstor.c:401:
+		struct ata_port *ap;
+		ap = host_set->ports[port_no];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1031: FILE: drivers/scsi/sata_qstor.c:405:
+			struct qs_port_priv *pp = ap->private_data;
+			if (!pp || pp->state != qs_state_mmio)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1035: FILE: drivers/scsi/sata_qstor.c:409:
+			if (qc && (!(qc->tf.ctl & ATA_NIEN))) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1038: FILE: drivers/scsi/sata_qstor.c:412:
+				u8 status = ata_chk_status(ap);
+				if ((status & ATA_BUSY))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: drivers/scsi/sata_qstor.c:416:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1106: FILE: drivers/scsi/sata_qstor.c:480:
+	pp->pkt = dma_alloc_coherent(dev, QS_PKT_BYTES, &pp->pkt_dma,
+								GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#1115: FILE: drivers/scsi/sata_qstor.c:489:
+	writel((u32) addr,        chan + QS_CCF_CPBA);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pp"
#1131: FILE: drivers/scsi/sata_qstor.c:505:
+	if (pp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pp->pkt"
#1133: FILE: drivers/scsi/sata_qstor.c:507:
+		if (pp->pkt != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1135: FILE: drivers/scsi/sata_qstor.c:509:
+			dma_free_coherent(dev, QS_PKT_BYTES, pp->pkt,
+								pp->pkt_dma);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1160: FILE: drivers/scsi/sata_qstor.c:534:
+		u8 __iomem *chan = mmio_base + (port_no * 0x4000);
+		writeb(QS_CTR1_RDEV|QS_CTR1_RCHN, chan + QS_CCT_CTR1);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1160: FILE: drivers/scsi/sata_qstor.c:534:
+		writeb(QS_CTR1_RDEV|QS_CTR1_RCHN, chan + QS_CCT_CTR1);
 		                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1172: FILE: drivers/scsi/sata_qstor.c:546:
+		writew( 8, chan + QS_CFC_DDFT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1200: FILE: drivers/scsi/sata_qstor.c:574:
+				printk(KERN_ERR DRV_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1209: FILE: drivers/scsi/sata_qstor.c:583:
+			printk(KERN_ERR DRV_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1216: FILE: drivers/scsi/sata_qstor.c:590:
+			printk(KERN_ERR DRV_NAME

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1226: FILE: drivers/scsi/sata_qstor.c:600:
+static int qs_ata_init_one(struct pci_dev *pdev,
+				const struct pci_device_id *ent)

CHECK:SPACING: No space is necessary after a cast
#1231: FILE: drivers/scsi/sata_qstor.c:605:
+	unsigned int board_idx = (unsigned int) ent->driver_data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1235: FILE: drivers/scsi/sata_qstor.c:609:
+		printk(KERN_DEBUG DRV_NAME " version " DRV_VERSION "\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1251: FILE: drivers/scsi/sata_qstor.c:625:
+^I^I            pci_resource_len(pdev, 4));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1251: FILE: drivers/scsi/sata_qstor.c:625:
+	mmio_base = ioremap(pci_resource_start(pdev, 4),
+		            pci_resource_len(pdev, 4));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mmio_base"
#1252: FILE: drivers/scsi/sata_qstor.c:626:
+	if (mmio_base == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!probe_ent"
#1262: FILE: drivers/scsi/sata_qstor.c:636:
+	if (probe_ent == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1681: FILE: drivers/scsi/sata_via.c:256:
+	printk(KERN_INFO DRV_NAME "(%s): routed to hard irq line %d\n",

CHECK:SPACING: No space is necessary after a cast
#1683: FILE: drivers/scsi/sata_via.c:258:
+	       (int) (tmp8 & 0xf0) == 0xf0 ? 0 : tmp8 & 0x0f);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1688: FILE: drivers/scsi/sata_via.c:263:
+		printk(KERN_DEBUG DRV_NAME "(%s): enabling SATA channels (0x%x)\n",

CHECK:SPACING: No space is necessary after a cast
#1689: FILE: drivers/scsi/sata_via.c:264:
+		       pci_name(pdev), (int) tmp8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1697: FILE: drivers/scsi/sata_via.c:272:
+		printk(KERN_DEBUG DRV_NAME "(%s): enabling SATA channel interrupts (0x%x)\n",

CHECK:SPACING: No space is necessary after a cast
#1698: FILE: drivers/scsi/sata_via.c:273:
+		       pci_name(pdev), (int) tmp8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1706: FILE: drivers/scsi/sata_via.c:281:
+		printk(KERN_DEBUG DRV_NAME "(%s): enabling SATA channel native mode (0x%x)\n",

CHECK:SPACING: No space is necessary after a cast
#1707: FILE: drivers/scsi/sata_via.c:282:
+		       pci_name(pdev), (int) tmp8);

CHECK:SPACING: No space is necessary after a cast
#1720: FILE: drivers/scsi/sata_via.c:294:
+	int board_id = (int) ent->driver_data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1745: FILE: drivers/scsi/sata_via.c:315:
+			printk(KERN_ERR DRV_NAME "(%s): SATA master/slave not supported (0x%x)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1746: FILE: drivers/scsi/sata_via.c:316:
+^I^I       ^Ipci_name(pdev), (int) tmp8);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1746: FILE: drivers/scsi/sata_via.c:316:
+^I^I       ^Ipci_name(pdev), (int) tmp8);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1746: FILE: drivers/scsi/sata_via.c:316:
+			printk(KERN_ERR DRV_NAME "(%s): SATA master/slave not supported (0x%x)\n",
+		       	pci_name(pdev), (int) tmp8);

CHECK:SPACING: No space is necessary after a cast
#1746: FILE: drivers/scsi/sata_via.c:316:
+		       	pci_name(pdev), (int) tmp8);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1773: FILE: drivers/scsi/sata_via.c:348:
+^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1890: FILE: include/linux/libata.h:366:
+	void (*bmdma_stop) (struct ata_port *ap);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1891: FILE: include/linux/libata.h:367:
+	u8   (*bmdma_status) (struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1899: FILE: include/linux/libata.h:408:
+extern u8 ata_altstatus(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1900: FILE: include/linux/libata.h:409:
+extern u8 ata_chk_err(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1908: FILE: include/linux/libata.h:425:
+extern void ata_bmdma_stop(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1909: FILE: include/linux/libata.h:426:
+extern u8   ata_bmdma_status(struct ata_port *ap);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 50 warnings, 46 checks, 1695 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
