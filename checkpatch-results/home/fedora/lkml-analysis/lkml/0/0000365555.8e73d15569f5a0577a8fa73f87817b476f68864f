WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#75: 
These routines do not check if there already is a legacy (non-realtime) signal

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: include/linux/init_task.h:48:
+^I.shared_pending^I= { ^I^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/sched.h:575:
+extern struct sigqueue *sigqueue_alloc(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/sched.h:576:
+extern void sigqueue_free(struct sigqueue *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sigqueue *' should also have an identifier name
#129: FILE: include/linux/sched.h:576:
+extern void sigqueue_free(struct sigqueue *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/sched.h:577:
+extern int send_sigqueue(int, struct sigqueue *,  struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#130: FILE: include/linux/sched.h:577:
+extern int send_sigqueue(int, struct sigqueue *,  struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sigqueue *' should also have an identifier name
#130: FILE: include/linux/sched.h:577:
+extern int send_sigqueue(int, struct sigqueue *,  struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#130: FILE: include/linux/sched.h:577:
+extern int send_sigqueue(int, struct sigqueue *,  struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/sched.h:578:
+extern int send_group_sigqueue(int, struct sigqueue *,  struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#131: FILE: include/linux/sched.h:578:
+extern int send_group_sigqueue(int, struct sigqueue *,  struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sigqueue *' should also have an identifier name
#131: FILE: include/linux/sched.h:578:
+extern int send_group_sigqueue(int, struct sigqueue *,  struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#131: FILE: include/linux/sched.h:578:
+extern int send_group_sigqueue(int, struct sigqueue *,  struct task_struct *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#152: FILE: include/linux/signal.h:15:
+	spinlock_t *lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: kernel/posix-timers.c:306:
+		ret = send_sigqueue(timr->it_sigev_signo, timr->sigq,
+			timr->it_process);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: kernel/posix-timers.c:309:
+		ret = send_group_sigqueue(timr->it_sigev_signo, timr->sigq,
+			timr->it_process);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#245: FILE: kernel/posix-timers.c:369:
+	if (unlikely(!(tmr->sigq = sigqueue_alloc()))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#317: FILE: kernel/signal.c:294:
+		q = list_entry(queue->list.next, struct sigqueue , list);
 		                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#344: FILE: kernel/signal.c:445:
+	 * there is another siginfo for the same signal.
+	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#446: FILE: kernel/signal.c:838:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#534: FILE: kernel/signal.c:940:
+	return;
+}

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#543: FILE: kernel/signal.c:949:
+	if (!spin_is_locked(&p->sighand->siglock))

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: kernel/signal.c:950:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->si_code == SI_TIMER'
#548: FILE: kernel/signal.c:954:
+	if (((unsigned long)info > 2) && (info->si_code == SI_TIMER))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: kernel/signal.c:1218:
+ * expirations or I/O completions".  In the case of Posix Timers $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: kernel/signal.c:1223:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: kernel/signal.c:1223:
+ $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#600: FILE: kernel/signal.c:1228:
+	if ((q = __sigqueue_alloc()))

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#602: FILE: kernel/signal.c:1230:
+	return(q);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: kernel/signal.c:1236:
+	unsigned long flags;
+	BUG_ON(!(q->flags & SIGQUEUE_PREALLOC));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: kernel/signal.c:1236:
+	BUG_ON(!(q->flags & SIGQUEUE_PREALLOC));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: kernel/signal.c:1242:
+^I^Iread_lock(&tasklist_lock);  $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#637: FILE: kernel/signal.c:1265:
+	BUG_ON(!(q->flags & SIGQUEUE_PREALLOC));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: kernel/signal.c:1266:
+^Iread_lock(&tasklist_lock);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#640: FILE: kernel/signal.c:1268:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#647: FILE: kernel/signal.c:1275:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#650: FILE: kernel/signal.c:1278:
+^I} $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#666: FILE: kernel/signal.c:1294:
+	return(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: kernel/signal.c:1304:
+	BUG_ON(!(q->flags & SIGQUEUE_PREALLOC));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#694: FILE: kernel/signal.c:1322:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: kernel/signal.c:1325:
+^I} $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#719: FILE: kernel/signal.c:1347:
+	return(ret);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#731: FILE: kernel/signal.c:1803:
+EXPORT_SYMBOL(sigqueue_free);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#732: FILE: kernel/signal.c:1804:
+EXPORT_SYMBOL(send_sigqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#733: FILE: kernel/signal.c:1805:
+EXPORT_SYMBOL(send_group_sigqueue);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000365555.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 23 warnings, 9 checks, 613 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000365555.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
