WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#113: FILE: include/linux/mm.h:572:
+void vma_prio_tree_insert(struct vm_area_struct *, struct prio_tree_root *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#113: FILE: include/linux/mm.h:572:
+void vma_prio_tree_insert(struct vm_area_struct *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#114: FILE: include/linux/mm.h:573:
+void vma_prio_tree_remove(struct vm_area_struct *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#114: FILE: include/linux/mm.h:573:
+void vma_prio_tree_remove(struct vm_area_struct *, struct prio_tree_root *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: include/linux/prio_tree.h:12:
+^Iunsigned int ^I^Iindex_bits;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#157: FILE: include/linux/prio_tree.h:28:
+#define INIT_PRIO_TREE_NODE(ptr)				\
+do {								\
+	(ptr)->left = (ptr)->right = (ptr)->parent = (ptr);	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#157: FILE: include/linux/prio_tree.h:28:
+#define INIT_PRIO_TREE_NODE(ptr)				\
+do {								\
+	(ptr)->left = (ptr)->right = (ptr)->parent = (ptr);	\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#162: FILE: include/linux/prio_tree.h:33:
+#define INIT_PRIO_TREE_ITER(ptr)	\
+do {					\
+	(ptr)->cur = NULL;		\
+	(ptr)->mask = 0UL;		\
+	(ptr)->value = 0UL;		\
+	(ptr)->size_level = 0;		\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#170: FILE: include/linux/prio_tree.h:41:
+#define prio_tree_entry(ptr, type, member) \
+       ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: include/linux/prio_tree.h:42:
+       ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#171: FILE: include/linux/prio_tree.h:42:
+       ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root->prio_tree_node"
#176: FILE: include/linux/prio_tree.h:46:
+	return root->prio_tree_node == NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#201: FILE: init/main.c:91:
+extern void prio_tree_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: mm/prio_tree.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#265: FILE: mm/prio_tree.c:2:
+ * mm/prio_tree.c - priority search tree for mapping->i_mmap{,_shared}

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#311: FILE: mm/prio_tree.c:48:
+#define VMA_SIZE(vma)	  (((vma)->vm_end - (vma)->vm_start) >> PAGE_SHIFT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#313: FILE: mm/prio_tree.c:50:
+#define HEAP_INDEX(vma)	  ((vma)->vm_pgoff + (VMA_SIZE(vma) - 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#315: FILE: mm/prio_tree.c:52:
+#define GET_INDEX_VMA(vma, radix, heap)		\
+do {						\
+	radix = RADIX_INDEX(vma);		\
+	heap = HEAP_INDEX(vma);			\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: mm/prio_tree.c:59:
+do { ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#323: FILE: mm/prio_tree.c:60:
+^Istruct vm_area_struct *__tmp = ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: mm/prio_tree.c:62:
+^IGET_INDEX_VMA(__tmp, radix, heap); ^I\$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: mm/prio_tree.c:91:
+static struct prio_tree_node *prio_tree_expand(struct prio_tree_root *root,
+		struct prio_tree_node *node, unsigned long max_heap_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: mm/prio_tree.c:94:
+	static void prio_tree_remove(struct prio_tree_root *,
+					struct prio_tree_node *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first"
#369: FILE: mm/prio_tree.c:106:
+		if (first == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#386: FILE: mm/prio_tree.c:123:
+	if (first) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#389: FILE: mm/prio_tree.c:126:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: mm/prio_tree.c:142:
+static struct prio_tree_node *prio_tree_replace(struct prio_tree_root *root,
+		struct prio_tree_node *old, struct prio_tree_node *node)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#410: FILE: mm/prio_tree.c:147:
+		BUG_ON(root->prio_tree_node != old);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: mm/prio_tree.c:186:
+static struct prio_tree_node *prio_tree_insert(struct prio_tree_root *root,
+		struct prio_tree_node *node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: mm/prio_tree.c:196:
+	if (prio_tree_empty(root) ||
+			heap_index > prio_tree_maxindex(root->index_bits))

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: mm/prio_tree.c:208:
+                if (h_index < heap_index ||$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: mm/prio_tree.c:208:
+                if (h_index < heap_index ||$

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: mm/prio_tree.c:211:
+			struct prio_tree_node *tmp = node;
+			node = prio_tree_replace(root, cur, node);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#491: FILE: mm/prio_tree.c:228:
+			if (prio_tree_right_empty(cur)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#496: FILE: mm/prio_tree.c:233:
+				return res;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#496: FILE: mm/prio_tree.c:233:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#499: FILE: mm/prio_tree.c:236:
+			if (prio_tree_left_empty(cur)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#504: FILE: mm/prio_tree.c:241:
+				return res;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#504: FILE: mm/prio_tree.c:241:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: mm/prio_tree.c:253:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: mm/prio_tree.c:263:
+static void prio_tree_remove(struct prio_tree_root *root,
+		struct prio_tree_node *node)

CHECK:BRACES: braces {} should be used on all arms of this statement
#534: FILE: mm/prio_tree.c:271:
+		if (!prio_tree_left_empty(cur))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#536: FILE: mm/prio_tree.c:273:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#541: FILE: mm/prio_tree.c:278:
+		if (!prio_tree_right_empty(cur))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#543: FILE: mm/prio_tree.c:280:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#556: FILE: mm/prio_tree.c:293:
+		BUG_ON(root->prio_tree_node != cur);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#578: FILE: mm/prio_tree.c:315:
+static struct prio_tree_node *prio_tree_left(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#596: FILE: mm/prio_tree.c:333:
+				BUG_ON(!prio_tree_left_empty(iter->cur));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#597: FILE: mm/prio_tree.c:334:
+				BUG_ON(!prio_tree_right_empty(iter->cur));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#611: FILE: mm/prio_tree.c:348:
+static struct prio_tree_node *prio_tree_right(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#640: FILE: mm/prio_tree.c:377:
+				BUG_ON(!prio_tree_left_empty(iter->cur));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#641: FILE: mm/prio_tree.c:378:
+				BUG_ON(!prio_tree_right_empty(iter->cur));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: mm/prio_tree.c:409:
+static inline int overlap(unsigned long radix_index, unsigned long heap_index,
+		unsigned long r_index, unsigned long h_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: mm/prio_tree.c:422:
+static struct prio_tree_node *prio_tree_first(struct prio_tree_root *root,
+		struct prio_tree_iter *iter, unsigned long radix_index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: mm/prio_tree.c:445:
+		if (prio_tree_left(root, iter, radix_index, heap_index,
+					&r_index, &h_index))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: mm/prio_tree.c:449:
+		if (prio_tree_right(root, iter, radix_index, heap_index,
+					&r_index, &h_index))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: mm/prio_tree.c:463:
+static struct prio_tree_node *prio_tree_next(struct prio_tree_root *root,
+		struct prio_tree_iter *iter, unsigned long radix_index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: mm/prio_tree.c:470:
+	while (prio_tree_left(root, iter, radix_index,
+				heap_index, &r_index, &h_index)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#740: FILE: mm/prio_tree.c:477:
+^I    ^Iwhile (!prio_tree_root(iter->cur) &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#740: FILE: mm/prio_tree.c:477:
+^I    ^Iwhile (!prio_tree_root(iter->cur) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: mm/prio_tree.c:478:
+	    	while (!prio_tree_root(iter->cur) &&
+				iter->cur->parent->right == iter->cur)

WARNING:TYPO_SPELLING: 'corresponing' may be misspelled - perhaps 'corresponding'?
#760: FILE: mm/prio_tree.c:497:
+ * heap_index] value, we have a corresponing priority search tree node. If
                                 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: mm/prio_tree.c:523:
+ *      vma->shared.vm_set.head == NULL ==> no others map the same range      $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#789: FILE: mm/prio_tree.c:526:
+ * ^Ivma->shared.vm_set.head != NULL ==> list head of vmas mapping same range$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#790: FILE: mm/prio_tree.c:527:
+ * ^Ivma->shared.vm_set.head == NULL ==> a list node$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#800: FILE: mm/prio_tree.c:537:
+	BUG_ON(RADIX_INDEX(vma) != RADIX_INDEX(old));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: mm/prio_tree.c:538:
+	BUG_ON(HEAP_INDEX(vma) != HEAP_INDEX(old));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#805: FILE: mm/prio_tree.c:542:
+		list_add(&vma->shared.vm_set.list,
+				&old->shared.vm_set.list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: mm/prio_tree.c:545:
+		list_add_tail(&vma->shared.vm_set.list,
+				&old->shared.vm_set.head->shared.vm_set.list);

CHECK:BRACES: Unbalanced braces around else statement
#809: FILE: mm/prio_tree.c:546:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: mm/prio_tree.c:562:
+		old = prio_tree_entry(ptr, struct vm_area_struct,
+					shared.prio_tree_node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#842: FILE: mm/prio_tree.c:579:
+		BUG_ON(vma->shared.vm_set.head->shared.vm_set.head != vma);

CHECK:BRACES: braces {} should be used on all arms of this statement
#845: FILE: mm/prio_tree.c:582:
+			if (!list_empty(&head->shared.vm_set.list)) {
[...]
+			} else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#846: FILE: mm/prio_tree.c:583:
+				new_head = list_entry(

CHECK:BRACES: Unbalanced braces around else statement
#851: FILE: mm/prio_tree.c:588:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: mm/prio_tree.c:592:
+			prio_tree_replace(root, &vma->shared.prio_tree_node,
+					&head->shared.prio_tree_node);

CHECK:BRACES: braces {} should be used on all arms of this statement
#862: FILE: mm/prio_tree.c:599:
+			if (!list_empty(&vma->shared.vm_set.list)) {
[...]
+			} else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#863: FILE: mm/prio_tree.c:600:
+				new_head = list_entry(

CHECK:BRACES: Unbalanced braces around else statement
#870: FILE: mm/prio_tree.c:607:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: mm/prio_tree.c:619:
+struct vm_area_struct *vma_prio_tree_next(struct vm_area_struct *vma,
+		struct prio_tree_root *root, struct prio_tree_iter *iter,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: mm/prio_tree.c:642:
+		next = list_entry(vma->shared.vm_set.list.next,
+				struct vm_area_struct, shared.vm_set.list);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 31 warnings, 47 checks, 835 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
