WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: fs/proc/proc_misc.c:607:
+	int len;
+	extern int rcu_read_proc_data(char *page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#92: FILE: fs/proc/proc_misc.c:607:
+	extern int rcu_read_proc_data(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#102: FILE: fs/proc/proc_misc.c:617:
+	int len;
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: fs/proc/proc_misc.c:617:
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: fs/proc/proc_misc.c:627:
+	int len;
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#112: FILE: fs/proc/proc_misc.c:627:
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#122: FILE: fs/proc/proc_misc.c:637:
+	int len;
+	extern int rcu_read_proc_ctrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#122: FILE: fs/proc/proc_misc.c:637:
+	extern int rcu_read_proc_ctrs_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/proc/proc_misc.c:644:
+^I^I^I         int count, int *eof, void *data)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: fs/proc/proc_misc.c:644:
+int rcu_read_proc_torture_writer(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: fs/proc/proc_misc.c:647:
+	int len;
+	extern int rcu_read_proc_torture_writer_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#132: FILE: fs/proc/proc_misc.c:647:
+	extern int rcu_read_proc_torture_writer_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: fs/proc/proc_misc.c:654:
+^I^I^I         int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: fs/proc/proc_misc.c:654:
+int rcu_read_proc_torture_reader(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#142: FILE: fs/proc/proc_misc.c:657:
+	int len;
+	extern int rcu_read_proc_torture_reader_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#142: FILE: fs/proc/proc_misc.c:657:
+	extern int rcu_read_proc_torture_reader_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: fs/proc/proc_misc.c:664:
+^I^I^I        int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: fs/proc/proc_misc.c:664:
+int rcu_read_proc_torture_stats(char *page, char **start, off_t off,
+			        int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: fs/proc/proc_misc.c:667:
+	int len;
+	extern int rcu_read_proc_torture_stats_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#152: FILE: fs/proc/proc_misc.c:667:
+	extern int rcu_read_proc_torture_stats_data(char *page);

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#197: FILE: include/linux/rcupdate.h:217:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/rcupdate.h:219:
+extern void rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/rcupdate.h:220:
+extern void rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: include/linux/rcupdate.h:221:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/rcupdate.h:313:
+extern void synchronize_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#240: FILE: include/linux/rcupdate.h:313:
+extern void synchronize_sched(void);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#366: FILE: kernel/rcupdate.c:484:
+EXPORT_SYMBOL(call_rcu);  /* WARNING: GPL-only in April 2006. */

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#367: FILE: kernel/rcupdate.c:485:
+EXPORT_SYMBOL(call_rcu_bh);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#369: FILE: kernel/rcupdate.c:487:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: GPL-only in April 2006. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#415: FILE: kernel/rcupdate.c:533:
+};
+struct rcu_ctrlblk {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#419: FILE: kernel/rcupdate.c:537:
 };
+static struct rcu_data rcu_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#424: FILE: kernel/rcupdate.c:542:
+};
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#425: FILE: kernel/rcupdate.c:543:
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =
+	{ ATOMIC_INIT(0), ATOMIC_INIT(0) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#440: FILE: kernel/rcupdate.c:556:
+static struct rcu_torture *rcu_torture_current = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#441: FILE: kernel/rcupdate.c:557:
+static long rcu_torture_current_version = 0;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#446: FILE: kernel/rcupdate.c:562:
+static atomic_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1] =
+	{ ATOMIC_INIT(0) };

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#465: FILE: kernel/rcupdate.c:578:
+	if (current->rcu_read_lock_nesting++ == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#478: FILE: kernel/rcupdate.c:591:
+		if (unlikely(flipctr != (rcu_ctrlblk.batch & 0x1))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#517: FILE: kernel/rcupdate.c:622:
+	if (--current->rcu_read_lock_nesting == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->rcu_flipctr2"
#528: FILE: kernel/rcupdate.c:633:
+		if (unlikely(current->rcu_flipctr2 != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#539: FILE: kernel/rcupdate.c:644:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#541: FILE: kernel/rcupdate.c:646:
+		if (rcu_data.waitlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#550: FILE: kernel/rcupdate.c:655:
+		if (rcu_data.nextlist != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: kernel/rcupdate.c:700:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#602: FILE: kernel/rcupdate.c:700:
+	if (unlikely(flipctr != rcu_data.batch)) {
+	

WARNING:MEMORY_BARRIER: memory barrier without comment
#635: FILE: kernel/rcupdate.c:731:
+	smp_mb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_data.donelist"
#655: FILE: kernel/rcupdate.c:751:
+	if (rcu_data.donelist == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#671: FILE: kernel/rcupdate.c:767:
+	if (list == NULL) {

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#718: FILE: kernel/rcupdate.c:814:
+synchronize_sched(void)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#723: FILE: kernel/rcupdate.c:819:
+	if (sched_getaffinity(0, &oldmask) < 0) {
+		oldmask = cpu_possible_map; 
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#724: FILE: kernel/rcupdate.c:820:
+^I^Ioldmask = cpu_possible_map; $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.donelist"
#736: FILE: kernel/rcupdate.c:832:
+	return (rcu_data.donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#737: FILE: kernel/rcupdate.c:833:
+		rcu_data.waitlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#738: FILE: kernel/rcupdate.c:834:
+		rcu_data.nextlist != NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#751: FILE: kernel/rcupdate.c:847:
+/*&&&&*/printk("WARNING: experimental RCU implementation.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#793: FILE: kernel/rcupdate.c:887:
+^I^I       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: kernel/rcupdate.c:924:
+^I^I^I       cpu, $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#842: FILE: kernel/rcupdate.c:929:
+	return (cnt);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#863: FILE: kernel/rcupdate.c:948:
+		return (NULL);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#871: FILE: kernel/rcupdate.c:956:
+	return (container_of(p, struct rcu_torture, rtort_free));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#896: FILE: kernel/rcupdate.c:981:
+	if (i > RCU_TORTURE_PIPE_LEN) {
+		i = RCU_TORTURE_PIPE_LEN;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#901: FILE: kernel/rcupdate.c:986:
+	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
[...]
+	} else {
[...]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#934: FILE: kernel/rcupdate.c:1019:
+	return (swahw32(rrsp->rrs_state));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#968: FILE: kernel/rcupdate.c:1053:
+		if (rcu_ctrlblk.batch == oldbatch) {
+			continue;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#971: FILE: kernel/rcupdate.c:1056:
+		if ((rp = rcu_torture_alloc()) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#971: FILE: kernel/rcupdate.c:1056:
+		if ((rp = rcu_torture_alloc()) == NULL) {
+			continue;
+		}

WARNING:MEMORY_BARRIER: memory barrier without comment
#978: FILE: kernel/rcupdate.c:1063:
+		smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_rp"
#979: FILE: kernel/rcupdate.c:1064:
+		if (old_rp != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#982: FILE: kernel/rcupdate.c:1067:
+			if (i > RCU_TORTURE_PIPE_LEN) {
+				i = RCU_TORTURE_PIPE_LEN;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1017: FILE: kernel/rcupdate.c:1102:
+		if (p == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1061: FILE: kernel/rcupdate.c:1134:
+		for (i = 0; i < RCU_TORTURE_PIPE_LEN; i++) {
+			summary[i] += per_cpu(rcu_torture_count, cpu)[i];
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1066: FILE: kernel/rcupdate.c:1139:
+		if (summary[i] != 0) {
+			break;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1078: FILE: kernel/rcupdate.c:1151:
+	if (i > 1) {
+		cnt += sprintf(&page[cnt], "!!!");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1082: FILE: kernel/rcupdate.c:1155:
+	for (i = 0; i < RCU_TORTURE_PIPE_LEN; i++) {
+		cnt += sprintf(&page[cnt], " %ld", summary[i]);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1092: FILE: kernel/rcupdate.c:1165:
+	return (cnt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1101: FILE: kernel/rcupdate.c:1172:
+EXPORT_SYMBOL(call_rcu); /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1103: FILE: kernel/rcupdate.c:1174:
+EXPORT_SYMBOL_GPL(synchronize_sched);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1104: FILE: kernel/rcupdate.c:1175:
+EXPORT_SYMBOL(rcu_read_lock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1105: FILE: kernel/rcupdate.c:1176:
+EXPORT_SYMBOL(rcu_read_unlock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1106: FILE: kernel/rcupdate.c:1177:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: Removal in April 2006. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 38 warnings, 25 checks, 1003 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
