WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#74: FILE: include/linux/gfp.h:43:
+extern struct page * FASTCALL(__alloc_pages(unsigned int gfp_mask, unsigned int order, struct zonelist *zonelist));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: include/linux/gfp.h:43:
+extern struct page * FASTCALL(__alloc_pages(unsigned int gfp_mask, unsigned int order, struct zonelist *zonelist));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/gfp.h:43:
+extern struct page * FASTCALL(__alloc_pages(unsigned int gfp_mask, unsigned int order, struct zonelist *zonelist));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#130: FILE: include/linux/mmzone.h:111:
+	struct zone *zones[MAX_NR_ZONES+1]; // NULL delimited
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#150: FILE: include/linux/mmzone.h:130:
+	struct zonelist node_zonelists[GFP_ZONEMASK+1];
 	                                           ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: include/linux/mmzone.h:210:
+ * ^I^Istruct zone * z = pgdat->node_zones + i;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: include/linux/swap.h:169:
+extern int try_to_free_pages(struct zone *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#217: FILE: include/linux/swap.h:169:
+extern int try_to_free_pages(struct zone *, unsigned int, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#217: FILE: include/linux/swap.h:169:
+extern int try_to_free_pages(struct zone *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#217: FILE: include/linux/swap.h:169:
+extern int try_to_free_pages(struct zone *, unsigned int, unsigned int);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#239: FILE: mm/page_alloc.c:38:
+struct zone *zone_table[MAX_NR_ZONES*MAX_NR_NODES];
                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: mm/page_alloc.c:161:
+expand(struct zone *zone, struct page *page,
 	 unsigned long index, int low, int high, free_area_t * area)

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: mm/page_alloc.c:240:
+        struct zone *zone = page_zone(page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: mm/page_alloc.c:240:
+        struct zone *zone = page_zone(page);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: mm/page_alloc.c:271:
+balance_classzone(struct zone *classzone, unsigned int gfp_mask,
 			unsigned int order, int * freed)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: mm/page_alloc.c:327:
+__alloc_pages(unsigned int gfp_mask, unsigned int order,
+		struct zonelist *zonelist)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: mm/vmscan.c:98:
+shrink_list(struct list_head *page_list, int nr_pages,
+		struct zone *classzone, unsigned int gfp_mask,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: mm/vmscan.c:281:
+shrink_cache(int nr_pages, struct zone *classzone,
 		unsigned int gfp_mask, int priority, int max_scan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: mm/vmscan.c:457:
+shrink_caches(struct zone *classzone, int priority,
 		unsigned int gfp_mask, int nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: mm/vmscan.c:507:
+int try_to_free_pages(struct zone *classzone,
+		unsigned int gfp_mask, unsigned int order)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 6 warnings, 12 checks, 375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440380.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
