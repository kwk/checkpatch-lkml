WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
It is possible to name network devices with names like "my/bogus" or "." or ".."

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#37: 
--- a/drivers/base/class.c	Mon Jan 12 15:11:55 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#44: FILE: drivers/base/class.c:91:
+int $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: drivers/base/class.c:95:
+^I^I || (name[0] == '.' $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#48: FILE: drivers/base/class.c:95:
+	return !(name[0] == '\0'
+		 || (name[0] == '.' 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#49: FILE: drivers/base/class.c:96:
+^I^I     && (name[1] == '\0' $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#49: FILE: drivers/base/class.c:96:
+		 || (name[0] == '.' 
+		     && (name[1] == '\0' 

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#50: FILE: drivers/base/class.c:97:
+		     && (name[1] == '\0' 
+			 || (name[1] == '.' && (name[2] == '\0'))))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#51: FILE: drivers/base/class.c:98:
+			 || (name[1] == '.' && (name[2] == '\0'))))
+		 || strchr(name, '/'));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/device.h:160:
+extern int class_name_valid(const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#91: FILE: include/linux/device.h:160:
+extern int class_name_valid(const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312142.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 2 warnings, 5 checks, 49 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000312142.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
