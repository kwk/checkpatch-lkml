WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> Do we get to see the patch, or was it typed in that pesky invisible font? 

WARNING:TYPO_SPELLING: 'attatch' may be misspelled - perhaps 'attach'?
#62: 
seen, from the body of the message, that I meant to attatch that patch, 
                                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: arch/i386/mach-generic/topology.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#152: FILE: arch/i386/mach-generic/topology.c:2:
+ * arch/i386/mach-generic/topology.c - Populate driverfs with topology information

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: arch/i386/mach-generic/topology.c:9:
+ * All rights reserved.          $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#173: FILE: arch/i386/mach-generic/topology.c:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#174: FILE: arch/i386/mach-generic/topology.c:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/topology.h> instead of <asm/topology.h>
#184: FILE: arch/i386/mach-generic/topology.c:34:
+#include <asm/topology.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#228: FILE: drivers/base/cpu.c:2:
+ * drivers/base/cpu.c - basic CPU class support

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#237: FILE: drivers/base/cpu.c:11:
+#include <asm/topology.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: drivers/base/cpu.c:13:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: drivers/base/cpu.c:32:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#295: FILE: drivers/base/memblk.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#296: FILE: drivers/base/memblk.c:2:
+ * drivers/base/memblk.c - basic Memory Block class support

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#305: FILE: drivers/base/memblk.c:11:
+#include <asm/topology.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: drivers/base/memblk.c:13:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: drivers/base/memblk.c:16:
+static int memblk_add_device(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#314: FILE: drivers/base/memblk.c:20:
+}
+struct device_class memblk_devclass = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: drivers/base/memblk.c:25:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#326: FILE: drivers/base/memblk.c:32:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#347: FILE: drivers/base/memblk.c:53:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#358: FILE: drivers/base/node.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#359: FILE: drivers/base/node.c:2:
+ * drivers/base/node.c - basic Node class support

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#368: FILE: drivers/base/node.c:11:
+#include <asm/topology.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: drivers/base/node.c:13:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: drivers/base/node.c:16:
+static int node_add_device(struct device * dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#377: FILE: drivers/base/node.c:20:
+}
+struct device_class node_devclass = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#382: FILE: drivers/base/node.c:25:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: drivers/base/node.c:32:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#390: FILE: drivers/base/node.c:33:
+static ssize_t node_read_cpumap(struct device * dev, char * buf, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#390: FILE: drivers/base/node.c:33:
+static ssize_t node_read_cpumap(struct device * dev, char * buf, size_t count, loff_t off)

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: drivers/base/node.c:36:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: drivers/base/node.c:36:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: drivers/base/node.c:36:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: drivers/base/node.c:36:
+        return off ? 0 : sprintf(buf,"%lx\n",node_dev->cpumap);
                                             ^

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'node_read_cpumap' to 'cpumap_show'
#394: FILE: drivers/base/node.c:37:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: drivers/base/node.c:38:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: drivers/base/node.c:38:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: drivers/base/node.c:38:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);
                                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#395: FILE: drivers/base/node.c:38:
+static DEVICE_ATTR(cpumap,S_IRUGO,node_read_cpumap,NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#398: FILE: drivers/base/node.c:41:
+static ssize_t node_read_meminfo(struct device * dev, char * buf, size_t count, loff_t off)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#398: FILE: drivers/base/node.c:41:
+static ssize_t node_read_meminfo(struct device * dev, char * buf, size_t count, loff_t off)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#418: FILE: drivers/base/node.c:61:
+			nid, K(i.totalram-i.freeram),
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#421: FILE: drivers/base/node.c:64:
+			nid, K(i.totalram-i.totalhigh),
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#422: FILE: drivers/base/node.c:65:
+			nid, K(i.freeram-i.freehigh));
 			                ^

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'node_read_meminfo' to 'meminfo_show'
#425: FILE: drivers/base/node.c:68:
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: drivers/base/node.c:69:
+#undef K $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#426: FILE: drivers/base/node.c:69:
+}
+#undef K 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: drivers/base/node.c:70:
+static DEVICE_ATTR(meminfo,S_IRUGO,node_read_meminfo,NULL);
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: drivers/base/node.c:70:
+static DEVICE_ATTR(meminfo,S_IRUGO,node_read_meminfo,NULL);
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: drivers/base/node.c:70:
+static DEVICE_ATTR(meminfo,S_IRUGO,node_read_meminfo,NULL);
                                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#427: FILE: drivers/base/node.c:70:
+static DEVICE_ATTR(meminfo,S_IRUGO,node_read_meminfo,NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#429: FILE: drivers/base/node.c:72:
+
+

ERROR:SPACING: space required before the open brace '{'
#452: FILE: drivers/base/node.c:95:
+	if (sys_register_root(node)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: drivers/base/node.c:96:
+		printk("ERROR CREATING NODE!!!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#454: FILE: drivers/base/node.c:97:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#460: FILE: drivers/base/node.c:103:
+
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#473: FILE: include/linux/cpu.h:2:
+ * include/linux/cpu.h - generic cpu definition

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: include/linux/cpu.h:5:
+ * basic 'struct cpu' here, which has embedded per-arch $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#497: FILE: include/linux/cpu.h:27:
 };
+extern struct cpu cpu_devices[NR_CPUS];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#499: FILE: include/linux/cpu.h:29:
+extern void register_cpu(int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#499: FILE: include/linux/cpu.h:29:
+extern void register_cpu(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#504: FILE: include/linux/memblk.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#505: FILE: include/linux/memblk.h:2:
+ * include/linux/memblk.h - generic memblk definition

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: include/linux/memblk.h:4:
+ * This is mainly for topological representation. We define the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: include/linux/memblk.h:5:
+ * basic 'struct memblk' here, which has embedded per-arch $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: include/linux/memblk.h:9:
+ * and system devices are handled in drivers/base/sys.c. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: include/linux/memblk.h:12:
+ * directory. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: include/linux/memblk.h:14:
+ * Per-memblk interfaces can be implemented using a struct device_interface. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: include/linux/memblk.h:15:
+ * See the following for how to do this: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: include/linux/memblk.h:16:
+ * - drivers/base/intf.c $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#531: FILE: include/linux/memblk.h:28:
+};
+extern struct memblk memblk_devices[MAX_NR_MEMBLKS];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: include/linux/memblk.h:30:
+extern void register_memblk(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#533: FILE: include/linux/memblk.h:30:
+extern void register_memblk(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: include/linux/mm.h:454:
+extern void si_meminfo_node(struct sysinfo *val, int nid);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: include/linux/mmzone.h:265:
 
+

ERROR:SPACING: space required before the open brace '{'
#567: FILE: include/linux/mmzone.h:278:
+	for(i = 0; i < MAX_NUMNODES; i++){

ERROR:SPACING: space required before the open parenthesis '('
#567: FILE: include/linux/mmzone.h:278:
+	for(i = 0; i < MAX_NUMNODES; i++){

ERROR:SPACING: space required before the open brace '{'
#581: FILE: include/linux/mmzone.h:292:
+	for(i = 0; i < MAX_NR_MEMBLKS; i++){

ERROR:SPACING: space required before the open parenthesis '('
#581: FILE: include/linux/mmzone.h:292:
+	for(i = 0; i < MAX_NR_MEMBLKS; i++){

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#590: FILE: include/linux/mmzone.h:301:
+#define test(num)	BUG_ON((num) != 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#592: FILE: include/linux/mmzone.h:303:
+#define node_online(node) \
+	({ test(node); test_bit(node, node_online_map); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#594: FILE: include/linux/mmzone.h:305:
+#define node_set_online(node) \
+	({ test(node); set_bit(node, node_online_map); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'node' - possible side-effects?
#596: FILE: include/linux/mmzone.h:307:
+#define node_set_offline(node) \
+	({ test(node); clear_bit(node, node_online_map); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'memblk' - possible side-effects?
#600: FILE: include/linux/mmzone.h:311:
+#define memblk_online(memblk) \
+	({ test(memblk); test_bit(memblk, memblk_online_map); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'memblk' - possible side-effects?
#602: FILE: include/linux/mmzone.h:313:
+#define memblk_set_online(memblk) \
+	({ test(memblk); set_bit(memblk, memblk_online_map); })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'memblk' - possible side-effects?
#604: FILE: include/linux/mmzone.h:315:
+#define memblk_set_offline(memblk) \
+	({ test(memblk); clear_bit(memblk, memblk_online_map); })

CHECK:LINE_SPACING: Please don't use multiple blank lines
#612: FILE: include/linux/mmzone.h:323:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#620: FILE: include/linux/node.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#621: FILE: include/linux/node.h:2:
+ * include/linux/node.h - generic node definition

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: include/linux/node.h:4:
+ * This is mainly for topological representation. We define the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: include/linux/node.h:5:
+ * basic 'struct node' here, which has embedded per-arch $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: include/linux/node.h:9:
+ * and system devices are handled in drivers/base/sys.c. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: include/linux/node.h:12:
+ * directory. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: include/linux/node.h:14:
+ * Per-node interfaces can be implemented using a struct device_interface. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: include/linux/node.h:15:
+ * See the following for how to do this: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: include/linux/node.h:16:
+ * - drivers/base/intf.c $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#647: FILE: include/linux/node.h:28:
+};
+extern struct node node_devices[MAX_NUMNODES];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: include/linux/node.h:30:
+extern void register_node(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#649: FILE: include/linux/node.h:30:
+extern void register_node(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#660: FILE: include/linux/swap.h:134:
+extern unsigned int nr_free_pages_pgdat(pg_data_t *pgdat);

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#671: FILE: mm/page_alloc.c:29:
+#include <asm/topology.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 29 warnings, 34 checks, 551 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
