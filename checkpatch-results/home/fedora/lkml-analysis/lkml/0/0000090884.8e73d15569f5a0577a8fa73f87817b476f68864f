WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
 drivers/scsi/libata-core.c  |  469 +++++++++++++++-----------------------------

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#102: FILE: drivers/scsi/ata_piix.c:777:
 static void __devinit piix_init_sata_map(struct pci_dev *pdev,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: drivers/scsi/libata-bmdma.c:429:
+static void ata_bmdma_setup_mmio (struct ata_queued_cmd *qc)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#125: FILE: drivers/scsi/libata-bmdma.c:434:
+	void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#150: FILE: drivers/scsi/libata-bmdma.c:459:
+static void ata_bmdma_start_mmio (struct ata_queued_cmd *qc)

CHECK:SPACING: No space is necessary after a cast
#153: FILE: drivers/scsi/libata-bmdma.c:462:
+	void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#181: FILE: drivers/scsi/libata-bmdma.c:490:
+static void ata_bmdma_setup_pio (struct ata_queued_cmd *qc)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#209: FILE: drivers/scsi/libata-bmdma.c:518:
+static void ata_bmdma_start_pio (struct ata_queued_cmd *qc)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: drivers/scsi/libata-bmdma.c:529:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#240: FILE: drivers/scsi/libata-bmdma.c:549:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#262: FILE: drivers/scsi/libata-bmdma.c:571:
+
+

CHECK:SPACING: No space is necessary after a cast
#282: FILE: drivers/scsi/libata-bmdma.c:591:
+		      ((void __iomem *) ap->ioaddr.bmdma_addr) + ATA_DMA_STATUS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: drivers/scsi/libata-bmdma.c:595:
+		unsigned long addr = ap->ioaddr.bmdma_addr + ATA_DMA_STATUS;
+		outb(inb(addr), addr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#290: FILE: drivers/scsi/libata-bmdma.c:599:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#306: FILE: drivers/scsi/libata-bmdma.c:615:
+	u8 host_stat;
+	if (ap->flags & ATA_FLAG_MMIO) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#306: FILE: drivers/scsi/libata-bmdma.c:615:
+	if (ap->flags & ATA_FLAG_MMIO) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#307: FILE: drivers/scsi/libata-bmdma.c:616:
+		void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: drivers/scsi/libata-bmdma.c:617:
+		void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;
+		host_stat = readb(mmio + ATA_DMA_STATUS);

CHECK:BRACES: Unbalanced braces around else statement
#309: FILE: drivers/scsi/libata-bmdma.c:618:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: drivers/scsi/libata-bmdma.c:623:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#330: FILE: drivers/scsi/libata-bmdma.c:639:
+	struct ata_port *ap = qc->ap;
+	if (ap->flags & ATA_FLAG_MMIO) {

CHECK:SPACING: No space is necessary after a cast
#331: FILE: drivers/scsi/libata-bmdma.c:640:
+		void __iomem *mmio = (void __iomem *) ap->ioaddr.bmdma_addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/scsi/libata-bmdma.c:644:
+		writeb(readb(mmio + ATA_DMA_CMD) & ~ATA_DMA_START,
+			mmio + ATA_DMA_CMD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: drivers/scsi/libata-bmdma.c:648:
+		outb(inb(ap->ioaddr.bmdma_addr + ATA_DMA_CMD) & ~ATA_DMA_START,
+			ap->ioaddr.bmdma_addr + ATA_DMA_CMD);

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#354: FILE: drivers/scsi/libata-bmdma.c:944:
+ *	enter non simplex mode. This implements the neccessary logic to
   	                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#439: FILE: drivers/scsi/libata-core.c:401:
+		printk(KERN_WARNING "ata%u: dev %u disabled\n",

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#454: FILE: drivers/scsi/libata-core.c:1024:
+	 * here, fail the command with AC_ERR_SYSTEM and reenable the
 	                                                 ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#522: FILE: drivers/scsi/libata-core.c:1590:
+	struct ata_device *pair = &ap->device[1 - adev->devno];
+	if (!ata_dev_present(pair))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#590: FILE: drivers/scsi/libata-core.c:1773:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#602: FILE: drivers/scsi/libata-core.c:1781:
+		printk(KERN_ERR

CHECK:LINE_SPACING: Please don't use multiple blank lines
#668: FILE: drivers/scsi/libata-core.c:2081:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: drivers/scsi/libata-core.c:2871:
+			dma_unmap_single(ap->dev,
 				sg_dma_address(&sg[0]), sg_dma_len(&sg[0]),

WARNING:LINE_SPACING: Missing a blank line after declarations
#1125: FILE: drivers/scsi/libata-core.c:4501:
+		struct ata_device *dev = &ap->device[i];
+		dev->devno = i;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1147: FILE: drivers/scsi/libata-core.c:4972:
+EXPORT_SYMBOL_GPL(ata_dev_pair);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1168: FILE: drivers/scsi/libata-scsi.c:259:
+	   from scsi_ioctl_send_command() for default case... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1221: FILE: drivers/scsi/libata-scsi.c:428:
+void ata_to_sense_error(unsigned id, u8 drv_stat, u8 drv_err, u8 *sk, u8 *asc,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1239: FILE: drivers/scsi/libata-scsi.c:508:
+	printk(KERN_WARNING "ata%u: no sense translation for status: 0x%02x\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1252: FILE: drivers/scsi/libata-scsi.c:1142:
+		/* Check whether the converted CHS can fit.
+		   Cylinder: 0-65535

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sect'
#1256: FILE: drivers/scsi/libata-scsi.c:1145:
+		if ((cyl >> 16) || (head >> 4) || (sect >> 8) || (!sect))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1279: FILE: drivers/scsi/libata-scsi.c:1300:
+		/* Check whether the converted CHS can fit.
+		   Cylinder: 0-65535

CHECK:BRACES: braces {} should be used on all arms of this statement
#1310: FILE: drivers/scsi/libata-scsi.c:2590:
+	if (dev->class == ATA_DEV_ATA) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1318: FILE: drivers/scsi/libata-scsi.c:2598:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1330: FILE: drivers/scsi/libata-scsi.c:2636:
+	if (likely(dev))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1332: FILE: drivers/scsi/libata-scsi.c:2638:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1732: FILE: drivers/scsi/sata_uli.c:147:
+	struct uli_priv *hpriv = ap->host_set->private_data;
+	return hpriv->scr_cfg_addr[ap->port_no] + (4 * sc_reg);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1770: FILE: drivers/scsi/sata_uli.c:240:
+		hpriv->scr_cfg_addr[2] = ULI5287_BASE + ULI5287_OFFS*4;
 		                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1778: FILE: drivers/scsi/sata_uli.c:247:
+		hpriv->scr_cfg_addr[3] = ULI5287_BASE + ULI5287_OFFS*5;
 		                                                    ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1862: FILE: include/linux/libata.h:403:
+^Istruct device ^I^I*dev;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1871: FILE: include/linux/libata.h:524:
+extern int ata_scsi_device_suspend(struct scsi_device *, pm_message_t state);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#1871: FILE: include/linux/libata.h:524:
+extern int ata_scsi_device_suspend(struct scsi_device *, pm_message_t state);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1874: FILE: include/linux/libata.h:526:
+extern int ata_device_suspend(struct ata_port *, struct ata_device *, pm_message_t state);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1874: FILE: include/linux/libata.h:526:
+extern int ata_device_suspend(struct ata_port *, struct ata_device *, pm_message_t state);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#1874: FILE: include/linux/libata.h:526:
+extern int ata_device_suspend(struct ata_port *, struct ata_device *, pm_message_t state);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1882: FILE: include/linux/libata.h:577:
+extern struct ata_device *ata_dev_pair(struct ata_port *ap, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1882: FILE: include/linux/libata.h:577:
+extern struct ata_device *ata_dev_pair(struct ata_port *ap, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#1896: FILE: include/scsi/scsi_host.h:289:
+	int (*suspend)(struct scsi_device *, pm_message_t state);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 29 warnings, 26 checks, 1691 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000090884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
