WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
Content-Disposition: attachment; filename=vm-strict-overcommit-rml-2.4.19-pre7-rmap-1.patch

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#75: FILE: Documentation/sysctl/vm.txt:168:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:REPEATED_WORD: Possible repeated word: 'really'
#128: FILE: Documentation/sysctl/vm.txt:36:
+not matter much but its a corner case if you really really care

CHECK:SPACING: No space is necessary after a cast
#181: FILE: fs/exec.c:312:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))=

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#181: FILE: fs/exec.c:312:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))=
 	                                                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#181: FILE: fs/exec.c:312:
+	if (!vm_enough_memory((STACK_TOP - (PAGE_MASK & (unsigned long) bprm->p))=

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#198: FILE: fs/proc/proc_misc.c:133:
 }
+extern atomic_t vm_committed_space;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#214: FILE: fs/proc/proc_misc.c:151:
+	committed =3D atomic_read(&vm_committed_space);
 	          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#259: FILE: include/linux/mm.h:606:
 }
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/linux/mm.h:606:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#259: FILE: include/linux/mm.h:606:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#259: FILE: include/linux/mm.h:606:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#259: FILE: include/linux/mm.h:606:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#259: FILE: include/linux/mm.h:606:
+extern int do_munmap(struct mm_struct *, unsigned long, size_t, int);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#297: FILE: include/linux/mm.h:675:
 =09
+/* Do stack extension */=09

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#297: FILE: include/linux/mm.h:675:
+/* Do stack extension */=09
                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: include/linux/mm.h:676:
+extern int expand_stack(struct vm_area_struct * vma, unsigned long address=

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#298: FILE: include/linux/mm.h:676:
+extern int expand_stack(struct vm_area_struct * vma, unsigned long address=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/mm.h:676:
+extern int expand_stack(struct vm_area_struct * vma, unsigned long address=

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/mman.h:8:
+extern int vm_enough_memory(long pages, int charge);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/mman.h:9:
+extern void vm_unacct_memory(long pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/mman.h:10:
+extern void vm_unacct_vma(struct vm_area_struct *vma);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#345: FILE: kernel/fork.c:136:
+	unsigned long charge =3D 0;
 	                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#358: FILE: kernel/fork.c:169:
+			unsigned int len =3D (mpnt->vm_end - mpnt->vm_start) >> PAGE_SHIFT;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#358: FILE: kernel/fork.c:169:
+			unsigned int len =3D (mpnt->vm_end - mpnt->vm_start) >> PAGE_SHIFT;
 			                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: kernel/fork.c:170:
+			unsigned int len =3D (mpnt->vm_end - mpnt->vm_start) >> PAGE_SHIFT;
+			if (!vm_enough_memory(len, 1))

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#361: FILE: kernel/fork.c:172:
+			charge +=3D len;
 			       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#372: FILE: kernel/fork.c:218:
+out:
    ^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#387: FILE: mm/mmap.c:2:
+ * mm/mmap.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#401: FILE: mm/mmap.c:51:
+atomic_t vm_committed_space =3D ATOMIC_INIT(0);
                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: mm/mmap.c:65:
+	unsigned long free, allowed;
+	if (charge)

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: mm/mmap.c:67:
+        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#451: FILE: mm/mmap.c:70:
+	if (sysctl_overcommit_memory =3D=3D 1)
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#451: FILE: mm/mmap.c:70:
+	if (sysctl_overcommit_memory =3D=3D 1)
 	                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#451: FILE: mm/mmap.c:70:
+	if (sysctl_overcommit_memory =3D=3D 1)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#462: FILE: mm/mmap.c:72:
+	if (sysctl_overcommit_memory =3D=3D 0) {
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#462: FILE: mm/mmap.c:72:
+	if (sysctl_overcommit_memory =3D=3D 0) {
 	                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#462: FILE: mm/mmap.c:72:
+	if (sysctl_overcommit_memory =3D=3D 0) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#463: FILE: mm/mmap.c:73:
+		free =3D atomic_read(&page_cache_size);
 		     ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#464: FILE: mm/mmap.c:74:
+		free +=3D nr_free_pages();
 		     ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#465: FILE: mm/mmap.c:75:
+		free +=3D nr_swap_pages;
 		     ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#473: FILE: mm/mmap.c:83:
+		free +=3D swapper_space.nrpages;
 		     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#482: FILE: mm/mmap.c:92:
+		free +=3D (dentry_stat.nr_unused * sizeof(struct dentry)) >>

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#482: FILE: mm/mmap.c:92:
+		free +=3D (dentry_stat.nr_unused * sizeof(struct dentry)) >>
 		     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#484: FILE: mm/mmap.c:94:
+		free +=3D (inodes_stat.nr_unused * sizeof(struct inode)) >>

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#484: FILE: mm/mmap.c:94:
+		free +=3D (inodes_stat.nr_unused * sizeof(struct inode)) >>
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#495: FILE: mm/mmap.c:103:
+	if (sysctl_overcommit_memory =3D=3D 2) {
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#495: FILE: mm/mmap.c:103:
+	if (sysctl_overcommit_memory =3D=3D 2) {
 	                                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#495: FILE: mm/mmap.c:103:
+	if (sysctl_overcommit_memory =3D=3D 2) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: mm/mmap.c:109:
+		struct sysinfo i;
+		si_meminfo(&i);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#502: FILE: mm/mmap.c:110:
+		allowed =3D i.totalram - (i.totalram / 20);
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#503: FILE: mm/mmap.c:111:
+	} else if (sysctl_overcommit_memory =3D=3D 3) {
 	                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#503: FILE: mm/mmap.c:111:
+	} else if (sysctl_overcommit_memory =3D=3D 3) {
 	                                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#503: FILE: mm/mmap.c:111:
+	} else if (sysctl_overcommit_memory =3D=3D 3) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: mm/mmap.c:113:
+		struct sysinfo i;
+		si_meminfo(&i);=09

ERROR:SPACING: space required after that ';' (ctx:VxO)
#505: FILE: mm/mmap.c:113:
+		si_meminfo(&i);=09
 		              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#505: FILE: mm/mmap.c:113:
+		si_meminfo(&i);=09
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#506: FILE: mm/mmap.c:114:
+		allowed =3D total_swap_pages + (i.totalram >> 1);
 		        ^

CHECK:BRACES: Unbalanced braces around else statement
#507: FILE: mm/mmap.c:115:
+	} else  /* sysctl_overcommit_memory =3D=3D 4 */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#508: FILE: mm/mmap.c:116:
+		allowed =3D total_swap_pages;
 		        ^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#519: FILE: mm/mmap.c:127:
+void inline vm_unacct_memory(long pages)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#520: FILE: mm/mmap.c:128:
+{=09
  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#526: FILE: mm/mmap.c:134:
+	int len =3D vma->vm_end - vma->vm_start;
 	        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#527: FILE: mm/mmap.c:135:
+	int len =3D vma->vm_end - vma->vm_start;
+	if (vma->vm_flags & VM_ACCOUNT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#537: FILE: mm/mmap.c:212:
+		if (!do_munmap(mm, newbrk, oldbrk-newbrk, 1))
 		                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#551: FILE: mm/mmap.c:230:
+	if (!vm_enough_memory((newbrk-oldbrk) >> PAGE_SHIFT, 0))
 	                             ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#562: FILE: mm/mmap.c:444:
 }
+unsigned long do_mmap_pgoff(struct file * file, unsigned long addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#562: FILE: mm/mmap.c:444:
+unsigned long do_mmap_pgoff(struct file * file, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: mm/mmap.c:445:
+unsigned long do_mmap_pgoff(struct file * file, unsigned long addr,
+			unsigned long len, unsigned long prot,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#572: FILE: mm/mmap.c:455:
+	unsigned long charged =3D 0;
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#585: FILE: mm/mmap.c:463:
+	len =3D PAGE_ALIGN(len);
 	    ^

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#604: FILE: mm/mmap.c:552:
+		vm_flags &=3D ~MAP_NORESERVE;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#611: FILE: mm/mmap.c:555:
+	if ((((vm_flags & (VM_SHARED | VM_WRITE)) =3D=3D VM_WRITE) ||
 	                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#611: FILE: mm/mmap.c:555:
+	if ((((vm_flags & (VM_SHARED | VM_WRITE)) =3D=3D VM_WRITE) ||
 	                                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#611: FILE: mm/mmap.c:555:
+	if ((((vm_flags & (VM_SHARED | VM_WRITE)) =3D=3D VM_WRITE) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: mm/mmap.c:556:
+	if ((((vm_flags & (VM_SHARED | VM_WRITE)) =3D=3D VM_WRITE) ||
+			(file =3D=3D NULL)) && !(flags & MAP_NORESERVE)) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#612: FILE: mm/mmap.c:556:
+			(file =3D=3D NULL)) && !(flags & MAP_NORESERVE)) {
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#612: FILE: mm/mmap.c:556:
+			(file =3D=3D NULL)) && !(flags & MAP_NORESERVE)) {
 			         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#613: FILE: mm/mmap.c:557:
+		charged =3D len >> PAGE_SHIFT;
 		        ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#616: FILE: mm/mmap.c:560:
+		vm_flags |=3D VM_ACCOUNT;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#625: FILE: mm/mmap.c:574:
+	error =3D -ENOMEM;
 	      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#625: FILE: mm/mmap.c:574:
+	error =3D -ENOMEM;
 	          ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#662: FILE: mm/mmap.c:807:
 }
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#666: FILE: mm/mmap.c:811:
+int expand_stack(struct vm_area_struct * vma, unsigned long address)

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#675: FILE: mm/mmap.c:820:
+	address &=3D PAGE_MASK;
 	        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: mm/mmap.c:821:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#676: FILE: mm/mmap.c:821:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: mm/mmap.c:821:
+ ^Ispin_lock(&vma->vm_mm->page_table_lock);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#677: FILE: mm/mmap.c:822:
+	grow =3D (vma->vm_start - address) >> PAGE_SHIFT;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#677: FILE: mm/mmap.c:822:
+	grow =3D (vma->vm_start - address) >> PAGE_SHIFT;
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#680: FILE: mm/mmap.c:825:
+	if(!vm_enough_memory(grow, 1)) {

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#684: FILE: mm/mmap.c:829:
+=09
 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: mm/mmap.c:831:
+	if (vma->vm_end - address > current->rlim[RLIMIT_STACK].rlim_cur ||
+			((vma->vm_mm->total_vm + grow) << PAGE_SHIFT) >

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#692: FILE: mm/mmap.c:837:
+	vma->vm_start =3D address;
 	              ^

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#693: FILE: mm/mmap.c:838:
+	vma->vm_pgoff -=3D grow;
 	              ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#694: FILE: mm/mmap.c:839:
+	vma->vm_mm->total_vm +=3D grow;
 	                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#696: FILE: mm/mmap.c:841:
+		vma->vm_mm->locked_vm +=3D grow;
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#735: FILE: mm/mmap.c:1032:
+int do_munmap(struct mm_struct *mm, unsigned long addr, size_t len, int ac=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#749: FILE: mm/mmap.c:1110:
+		extra =3D unmap_fixup(mm, mpnt, st, size, extra, acct);
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#758: FILE: mm/mmap.c:1131:
+	ret =3D do_munmap(mm, addr, len, 1);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#780: FILE: mm/mmap.c:1183:
+	flags =3D VM_DATA_DEFAULT_FLAGS | VM_ACCOUNT | mm->def_flags;
 	      ^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#821: FILE: mm/mprotect.c:2:
+ *  mm/mprotect.c

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#834: FILE: mm/mprotect.c:247:
+	unsigned long charged =3D 0;
 	                      ^

ERROR:SPACING: space required before the open parenthesis '('
#845: FILE: mm/mprotect.c:264:
+		if(newflags & PROT_WRITE)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#900: FILE: mm/mremap.c:219:
 }
+extern int sysctl_overcommit_memory;	/* FIXME!! */

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#910: FILE: mm/mremap.c:235:
+	unsigned long charged =3D 0;
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#930: FILE: mm/mremap.c:273:
+		do_munmap(current->mm, addr+new_len, old_len - new_len, 1);
 		                           ^

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#945: FILE: mm/mremap.c:307:
+		flags &=3D ~MAP_NORESERVE;
 		      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#947: FILE: mm/mremap.c:309:
+		charged =3D (new_len - old_len) >> PAGE_SHIFT;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#947: FILE: mm/mremap.c:309:
+		charged =3D (new_len - old_len) >> PAGE_SHIFT;
 		        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#989: FILE: mm/shmem.c:334:
 }
+static int shmem_notify_change(struct dentry * dentry, struct iattr *attr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#989: FILE: mm/shmem.c:334:
+static int shmem_notify_change(struct dentry * dentry, struct iattr *attr)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#991: FILE: mm/shmem.c:336:
+	struct inode *inode =3D dentry->d_inode;
 	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#996: FILE: mm/shmem.c:341:
+^I ^I * Account swap file usage based on new file size=09$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#996: FILE: mm/shmem.c:341:
+^I ^I * Account swap file usage based on new file size=09$

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: mm/shmem.c:342:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#997: FILE: mm/shmem.c:342:
+^I ^I */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#998: FILE: mm/shmem.c:343:
+		long change =3D (attr->ia_size>>PAGE_SHIFT) - (inode->i_size >> PAGE_SHI=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#998: FILE: mm/shmem.c:343:
+		long change =3D (attr->ia_size>>PAGE_SHIFT) - (inode->i_size >> PAGE_SHI=
 		            ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#998: FILE: mm/shmem.c:343:
+		long change =3D (attr->ia_size>>PAGE_SHIFT) - (inode->i_size >> PAGE_SHI=
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#998: FILE: mm/shmem.c:343:
+		long change =3D (attr->ia_size>>PAGE_SHIFT) - (inode->i_size >> PAGE_SHI=
 		                                                                        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1001: FILE: mm/shmem.c:345:
+		if (attr->ia_size > inode->i_size) {
[...]
+		} else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1002: FILE: mm/shmem.c:346:
+			if (!vm_enough_memory(change,1))
 			                            ^

CHECK:BRACES: Unbalanced braces around else statement
#1004: FILE: mm/shmem.c:348:
+		} else

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1008: FILE: mm/shmem.c:352:
+	error =3D inode_change_ok(inode, attr);
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1010: FILE: mm/shmem.c:354:
+		error =3D inode_setattr(inode, attr);
 		      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1015: FILE: mm/shmem.c:359:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1052: FILE: mm/shmem.c:809:
+	maxpos =3D inode->i_size;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1054: FILE: mm/shmem.c:811:
+		maxpos =3D pos + count;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1056: FILE: mm/shmem.c:813:
+			err =3D -ENOMEM;
 			    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1056: FILE: mm/shmem.c:813:
+			err =3D -ENOMEM;
 			        ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#1069: FILE: mm/shmem.c:908:
+	if (inode->i_size !=3D maxpos)
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1079: FILE: mm/shmem.c:1396:
+	setattr:	shmem_notify_change,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1079: FILE: mm/shmem.c:1396:
+	setattr:	shmem_notify_change,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1088: FILE: mm/shmem.c:1496:
+	int error =3D -ENOMEM;
 	          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1088: FILE: mm/shmem.c:1496:
+	int error =3D -ENOMEM;
 	              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000448023.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 85 errors, 24 warnings, 27 checks, 973 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000448023.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
