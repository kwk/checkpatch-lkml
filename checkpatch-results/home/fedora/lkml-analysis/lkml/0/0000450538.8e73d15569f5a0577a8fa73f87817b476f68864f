CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#29: 
> U¿ytkownik Linus Torvalds napisa³:
   ^

WARNING:TYPO_SPELLING: 'comparision' may be misspelled - perhaps 'comparison'?
#40: 
> and inadequate inlining. Well what have I to say. In comparision
                                                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: fs/dcache.c:74:
+static void dentry_iput(struct dentry * dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: fs/dcache.c:218:
+static struct dentry * __dget_locked(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: fs/dcache.c:294:
+static void prune_one_dentry(struct dentry * dentry)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#180: FILE: fs/namei.c:334:
+static int do_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: fs/namei.c:404:
+static void follow_dotdot(struct nameidata *nd)
                                             ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: fs/namei.c:870:
+static int may_delete(struct inode *dir,struct dentry *victim, int isdir)
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#225: FILE: fs/namei.c:901:
+static int may_create(struct inode *dir, struct dentry *child) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: fs/open.c:92:
+static long do_sys_truncate(const char * path, loff_t length)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#307: FILE: fs/inode.c:194:
+static void __iget(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#374: FILE: kernel/exit.c:299:
+static void __exit_mm(struct task_struct * tsk)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#416: FILE: kernel/sched.c:336:
+static int try_to_wake_up(struct task_struct * p, int synchronous)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#434: FILE: kernel/sched.c:701:
+static void __wake_up_common (wait_queue_head_t *q, unsigned int mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: kernel/sched.c:702:
+static void __wake_up_common (wait_queue_head_t *q, unsigned int mode,
 			 	     int nr_exclusive, const int sync)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: kernel/sys.c:476:
+static void cap_emulate_setxuid(int old_ruid, int old_euid, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: kernel/sys.c:477:
+static void cap_emulate_setxuid(int old_ruid, int old_euid, 
 				       int old_suid)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#479: FILE: mm/filemap.c:673:
+static void __add_to_page_cache(struct page * page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: mm/filemap.c:674:
+static void __add_to_page_cache(struct page * page,
 	struct address_space *mapping, unsigned long offset,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#488: FILE: mm/filemap.c:2223:
+static void setup_read_behavior(struct vm_area_struct * vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: mm/filemap.c:2224:
+static void setup_read_behavior(struct vm_area_struct * vma,
 	int behavior)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#499: FILE: mm/highmem.c:236:
+static void bounce_end_io (struct buffer_head *bh, int uptodate)
                                                        ^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#499: FILE: mm/highmem.c:236:
+static void bounce_end_io (struct buffer_head *bh, int uptodate)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#510: FILE: mm/memory.c:867:
+static void establish_pte(struct vm_area_struct * vma, unsigned long address, pte_t *page_table, pte_t entry)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#510: FILE: mm/memory.c:867:
+static void establish_pte(struct vm_area_struct * vma, unsigned long address, pte_t *page_table, pte_t entry)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#530: FILE: mm/mmap.c:336:
+static void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#530: FILE: mm/mmap.c:336:
+static void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#530: FILE: mm/mmap.c:336:
+static void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#530: FILE: mm/mmap.c:336:
+static void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: mm/mmap.c:337:
+static void vma_link(struct mm_struct * mm, struct vm_area_struct * vma, struct vm_area_struct * prev,
 			    rb_node_t ** rb_link, rb_node_t * rb_parent)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: mm/slab.c:524:
+static void kmem_poison_obj (kmem_cache_t *cachep, void *addr)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#550: FILE: mm/slab.c:535:
+static int kmem_check_poison_obj (kmem_cache_t *cachep, void *addr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#559: FILE: mm/slab.c:1222:
+static void * kmem_cache_alloc_one_tail (kmem_cache_t *cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#559: FILE: mm/slab.c:1222:
+static void * kmem_cache_alloc_one_tail (kmem_cache_t *cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: mm/slab.c:1223:
+static void * kmem_cache_alloc_one_tail (kmem_cache_t *cachep,
 						slab_t *slabp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#568: FILE: mm/slab.c:1319:
+static void * __kmem_cache_alloc (kmem_cache_t *cachep, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#568: FILE: mm/slab.c:1319:
+static void * __kmem_cache_alloc (kmem_cache_t *cachep, int flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#586: FILE: mm/slab.c:1455:
+static void __free_block (kmem_cache_t* cachep,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#586: FILE: mm/slab.c:1455:
+static void __free_block (kmem_cache_t* cachep,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: mm/slab.c:1456:
+static void __free_block (kmem_cache_t* cachep,
 							void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#595: FILE: mm/slab.c:1474:
+static void __kmem_cache_free (kmem_cache_t *cachep, void* objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#595: FILE: mm/slab.c:1474:
+static void __kmem_cache_free (kmem_cache_t *cachep, void* objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#634: FILE: drivers/block/ll_rw_blk.c:488:
+void drive_stat_acct (kdev_t dev, int rw,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: drivers/block/ll_rw_blk.c:489:
+void drive_stat_acct (kdev_t dev, int rw,
 				unsigned long nr_sectors, int new_io)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: lib/rwsem.c:114:
+static struct rw_semaphore *rwsem_down_failed_common(struct rw_semaphore *sem,
 								 struct rwsem_waiter *waiter,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: fs/namespace.c:405:
+void set_fs_root(struct fs_struct *fs, struct vfsmount *mnt,
+			struct dentry *dentry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#743: FILE: fs/namespace.c:409:
+	struct vfsmount *old_rootmnt;
+	write_lock(&fs->lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: fs/namespace.c:426:
+void set_fs_pwd(struct fs_struct *fs, struct vfsmount *mnt,
+			struct dentry *dentry)

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: fs/namespace.c:430:
+	struct vfsmount *old_pwdmnt;
+	write_lock(&fs->lock);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450538.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 17 warnings, 12 checks, 589 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000450538.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
