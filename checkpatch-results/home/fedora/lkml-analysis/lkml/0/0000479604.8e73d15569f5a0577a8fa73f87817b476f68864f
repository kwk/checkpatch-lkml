CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/slab.h:58:
+extern int kmem_cache_shrink_nr(kmem_cache_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#79: FILE: include/linux/slab.h:58:
+extern int kmem_cache_shrink_nr(kmem_cache_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: mm/slab.c:919:
+        slab_t *slabp;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: mm/slab.c:919:
+        slab_t *slabp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: mm/slab.c:920:
+        int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: mm/slab.c:920:
+        int ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: mm/slab.c:922:
+        /* If the cache is growing, stop shrinking. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: mm/slab.c:923:
+        while (!cachep->growing) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: mm/slab.c:923:
+        while (!cachep->growing) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: mm/slab.c:924:
+                struct list_head *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: mm/slab.c:924:
+                struct list_head *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: mm/slab.c:926:
+                p = cachep->slabs_free.prev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: mm/slab.c:926:
+                p = cachep->slabs_free.prev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: mm/slab.c:927:
+                if (p == &cachep->slabs_free)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: mm/slab.c:927:
+                if (p == &cachep->slabs_free)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: mm/slab.c:928:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: mm/slab.c:928:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: mm/slab.c:930:
+                slabp = list_entry(cachep->slabs_free.prev, slab_t, list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: mm/slab.c:930:
+                slabp = list_entry(cachep->slabs_free.prev, slab_t, list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: mm/slab.c:932:
+                if (slabp->inuse)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: mm/slab.c:932:
+                if (slabp->inuse)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: mm/slab.c:933:
+                        BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: mm/slab.c:933:
+                        BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: mm/slab.c:933:
+                        BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: mm/slab.c:935:
+                list_del(&slabp->list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: mm/slab.c:935:
+                list_del(&slabp->list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: mm/slab.c:937:
+                spin_unlock_irq(&cachep->spinlock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: mm/slab.c:937:
+                spin_unlock_irq(&cachep->spinlock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: mm/slab.c:938:
+                kmem_slab_destroy(cachep, slabp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: mm/slab.c:938:
+                kmem_slab_destroy(cachep, slabp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: mm/slab.c:940:
+                spin_lock_irq(&cachep->spinlock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: mm/slab.c:940:
+                spin_lock_irq(&cachep->spinlock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: mm/slab.c:941:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: mm/slab.c:941:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: mm/slab.c:942:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: mm/slab.c:942:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: mm/slab.c:978:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: mm/slab.c:978:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: mm/slab.c:980:
+        if (!cachep || in_interrupt() || !is_chained_kmem_cache(cachep))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: mm/slab.c:980:
+        if (!cachep || in_interrupt() || !is_chained_kmem_cache(cachep))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: mm/slab.c:981:
+                BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: mm/slab.c:981:
+                BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: mm/slab.c:981:
+                BUG();

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#173: FILE: mm/slab.c:988:
+	return ret<<(cachep->gfporder);
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#201: FILE: mm/vmscan.c:584:
+	return (nr_pages<=0 ? 0 : nr_pages);
 	                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000479604.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 22 warnings, 2 checks, 148 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000479604.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
