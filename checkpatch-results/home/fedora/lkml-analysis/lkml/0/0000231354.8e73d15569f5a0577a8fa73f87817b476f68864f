WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
I figured that one of the building blocks missing was a mutex with priority 

WARNING:TYPO_SPELLING: 'machanism' may be misspelled - perhaps 'mechanism'?
#33: 
Ingo have since implemented one a priority inheritance machanism. I have not
                                                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'queus' may be misspelled - perhaps 'queues'?
#66: 
queus can easily made into full scheduler wait-queues such it will be O(1). 
^^^^^

WARNING:TYPO_SPELLING: 'finshed' may be misspelled - perhaps 'finished'?
#84: 
But even though it is far from finshed I don't want to just sit on the work 
                               ^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: arch/i386/Kconfig:589:
+config PRIORITY_MUTEX
+	bool "Use priority based muteces"
+	default y
+	depends on PREEMPT_REALTIME
+	help
+          Use priority sorted mutexes with priority inheritance
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#108: FILE: arch/i386/Kconfig:601:
+	  When a mutex is taken extra the taker runs checks wether the task
 	                                                    ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: include/linux/init_task.h:82:
+^I.muteces_held^I= LIST_HEAD_INIT(tsk.muteces_held),^I       ^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: include/linux/init_task.h:83:
+        .mutex_waiters_lock = RAW_SPIN_LOCK_UNLOCKED,                   \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: include/linux/init_task.h:83:
+        .mutex_waiters_lock = RAW_SPIN_LOCK_UNLOCKED,                   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: include/linux/init_task.h:84:
+^I.mutex_waiters^I= LIST_HEAD_INIT(tsk.mutex_waiters),^I       ^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: include/linux/init_task.h:85:
+        .waiting_on_mutex_lock = RAW_RW_LOCK_UNLOCKED,                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: include/linux/init_task.h:85:
+        .waiting_on_mutex_lock = RAW_RW_LOCK_UNLOCKED,                  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: include/linux/init_task.h:86:
+        .waiting_on_mutex = NULL,                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: include/linux/init_task.h:86:
+        .waiting_on_mutex = NULL,                                       \$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#138: FILE: include/linux/list.h:495:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: include/linux/list.h:497:
+ * list_insert_sorted: Insert in a list by iterating from the beginning and $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: include/linux/list.h:498:
+                insert your element when your condition say it is a good place.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: include/linux/list.h:499:
+                Meant for having sorted lists.$

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#146: FILE: include/linux/list.h:503:
+ * @condition   the code you use to test wether a place is 
                                          ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: include/linux/list.h:503:
+ * @condition   the code you use to test wether a place is $

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: include/linux/list.h:504:
+                ok to elem before element "pos".$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'elem' - possible side-effects?
#149: FILE: include/linux/list.h:506:
+#define list_insert_sorted(elem, head, member, condition) \
+	do { \
+		int found = 0; \
+		struct list_head *nhead = (head); \
+		typeof(*elem) *pos; \
+		list_for_each_entry(pos, nhead, member) { \
+			if(condition) { \
+				__list_add(&elem->member, pos->member.prev, \
+					   &pos->member); \
+				found = 1; \
+				break; \
+			} \
+		} \
+		if(!found) { \
+			list_add_tail(&elem->member, nhead); \
+		} \
+        } while(0); \
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'elem' may be better as '(elem)' to avoid precedence issues
#149: FILE: include/linux/list.h:506:
+#define list_insert_sorted(elem, head, member, condition) \
+	do { \
+		int found = 0; \
+		struct list_head *nhead = (head); \
+		typeof(*elem) *pos; \
+		list_for_each_entry(pos, nhead, member) { \
+			if(condition) { \
+				__list_add(&elem->member, pos->member.prev, \
+					   &pos->member); \
+				found = 1; \
+				break; \
+			} \
+		} \
+		if(!found) { \
+			list_add_tail(&elem->member, nhead); \
+		} \
+        } while(0); \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#149: FILE: include/linux/list.h:506:
+#define list_insert_sorted(elem, head, member, condition) \
+	do { \
+		int found = 0; \
+		struct list_head *nhead = (head); \
+		typeof(*elem) *pos; \
+		list_for_each_entry(pos, nhead, member) { \
+			if(condition) { \
+				__list_add(&elem->member, pos->member.prev, \
+					   &pos->member); \
+				found = 1; \
+				break; \
+			} \
+		} \
+		if(!found) { \
+			list_add_tail(&elem->member, nhead); \
+		} \
+        } while(0); \
+

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#149: FILE: include/linux/list.h:506:
+#define list_insert_sorted(elem, head, member, condition) \
+	do { \
+		int found = 0; \
+		struct list_head *nhead = (head); \
+		typeof(*elem) *pos; \
+		list_for_each_entry(pos, nhead, member) { \
+			if(condition) { \
+				__list_add(&elem->member, pos->member.prev, \
+					   &pos->member); \
+				found = 1; \
+				break; \
+			} \
+		} \
+		if(!found) { \
+			list_add_tail(&elem->member, nhead); \
+		} \
+        } while(0); \
+

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space required before the open parenthesis '('
#155: FILE: include/linux/list.h:512:
+			if(condition) { \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: include/linux/list.h:519:
+		if(!found) { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: include/linux/list.h:522:
+        } while(0); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: include/linux/list.h:522:
+        } while(0); \$

ERROR:SPACING: space required before the open parenthesis '('
#165: FILE: include/linux/list.h:522:
+        } while(0); \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#167: FILE: include/linux/list.h:524:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#175: FILE: include/linux/mutex.h:1:
+#ifndef MUTEX_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#180: FILE: include/linux/mutex.h:6:
+typedef struct mutex_held

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#181: FILE: include/linux/mutex.h:7:
+typedef struct mutex_held
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#188: FILE: include/linux/mutex.h:14:
+typedef struct mutex

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#189: FILE: include/linux/mutex.h:15:
+typedef struct mutex
+{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/mutex.h:21:
+extern void mutex_init(mutex_t *m);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/mutex.h:22:
+extern void mutex_lock(mutex_t *m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/mutex.h:25:
+extern int  mutex_trylock(mutex_t *m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/mutex.h:26:
+extern void mutex_unlock(mutex_t *m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: include/linux/mutex.h:27:
+extern int mutex_is_locked(mutex_t *m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: include/linux/mutex.h:28:
+extern int atomic_dec_and_mutex_lock(atomic_t *atomic, mutex_t *mutex);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#215: FILE: include/linux/realtime_lock.h:99:
+typedef mutex_t _mutex_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#216: FILE: include/linux/realtime_lock.h:100:
+# define SPIN_LOCK_UNLOCKED (mutex_t) { 0, }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: include/linux/realtime_lock.h:101:
+# else $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#224: FILE: include/linux/realtime_lock.h:107:
+#  define SPIN_LOCK_UNLOCKED (_mutex_t) { 0, }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#240: FILE: include/linux/sched.h:590:
+	/* List of held muteces. Can only be manipulated and used
+	   by the task itself */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#240: FILE: include/linux/sched.h:590:
+	   by the task itself */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#244: FILE: include/linux/sched.h:594:
+	/* List of struct mutex_wait_elem (mutex.c). On this list is only
+	   the highest priority waiters. The list is sorted by priority.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#247: FILE: include/linux/sched.h:597:
+	   this lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#252: FILE: include/linux/sched.h:602:
+	/* This pointer is set/unset by the task itself while having a write
+	   lock. Others must use read lock while taking it.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#253: FILE: include/linux/sched.h:603:
+	   This write lock must be taken before the mutex lock */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: include/linux/sched.h:604:
+ ^Istruct mutex_wait_elem *waiting_on_mutex; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: include/linux/sched.h:604:
+ ^Istruct mutex_wait_elem *waiting_on_mutex; $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: include/linux/sched.h:604:
+ ^Istruct mutex_wait_elem *waiting_on_mutex; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: include/linux/sched.h:604:
+ ^Istruct mutex_wait_elem *waiting_on_mutex; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: include/linux/sched.h:607:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: include/linux/sched.h:608:
+	
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/linux/sched.h:1254:
+extern void mutex_set_task_priority_up(task_t *p, int new_prio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: include/linux/sched.h:1255:
+extern void mutex_set_task_priority_back_down(int prev_prio);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: include/linux/spinlock.h:431:
+#define _mutex_unlock_irqrestore(m,f) mutex_unlock(m)
                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: include/linux/wait.h:295:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/wait.h:300:
+extern void add_wait_queue_sorted_exclusive_locked(wait_queue_head_t *q,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#320: FILE: include/linux/wait.h:301:
+						   wait_queue_t * wait);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#322: FILE: include/linux/wait.h:303:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#358: FILE: kernel/mutex.c:12:
+#include <asm/bug.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: kernel/mutex.c:17:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#365: FILE: kernel/mutex.c:19:
+/* HOW THIS MUTEX WORKS:
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#372: FILE: kernel/mutex.c:26:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: kernel/mutex.c:44:
+   The tasks on the wait list have a pointer to the mutex_wait_elem_t $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: kernel/mutex.c:49:
+   really used for anything but is keeped in there so it can be used for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: kernel/mutex.c:53:
+    Each mutex is only manipulated while holding it's spinlock, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: kernel/mutex.c:56:
+    task->waiting_on_mutex is locked with a rw-lock, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: kernel/mutex.c:58:
+    The list task->mutex_waiters is locked by the spinlock $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: kernel/mutex.c:61:
+    The locking hiracy is that you should first take $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: kernel/mutex.c:62:
+    task->waiting_on_mutex_lock then mutex->waiters.lock and last $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: kernel/mutex.c:63:
+    task->mutex_waiters_lock to avoid deadlocks. You can hold all 3 types $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: kernel/mutex.c:65:
+    kind, forinstance locking both mutex1->waiters.lock and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: kernel/mutex.c:71:
+     Is mutex->owner==NULL? $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: kernel/mutex.c:72:
+        Set mutex->owner = current $

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: kernel/mutex.c:72:
+        Set mutex->owner = current $

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: kernel/mutex.c:73:
+        unlock mutex->waiters.lock$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: kernel/mutex.c:74:
+        return.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: kernel/mutex.c:75:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: kernel/mutex.c:82:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: kernel/mutex.c:87:
+       remove the old head of the wait list representing on the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: kernel/mutex.c:88:
+       owner->mutex_waiters wait list (there is only one wait element $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: kernel/mutex.c:97:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: kernel/mutex.c:97:
+        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: kernel/mutex.c:98:
+       If the owner's priority was increased re-sort the waiting lists $

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: kernel/mutex.c:100:
+          Take the mutex' owner's waiting_on_mutex_lock. If it is waiting$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: kernel/mutex.c:101:
+          on a mutex lock that mutex, remove the waiting element $

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: kernel/mutex.c:101:
+          on a mutex lock that mutex, remove the waiting element $

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: kernel/mutex.c:102:
+          (owner->waiting_on_mutex) from the wait lists and reinsert it at$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: kernel/mutex.c:103:
+          the right spots in the lists. If the owner of this other mutex has $

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: kernel/mutex.c:103:
+          the right spots in the lists. If the owner of this other mutex has $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: kernel/mutex.c:104:
+          lower priority increase it. Unlock the mutex and $

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: kernel/mutex.c:104:
+          lower priority increase it. Unlock the mutex and $

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: kernel/mutex.c:105:
+          waiting_on_mutex_lock.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: kernel/mutex.c:106:
+          If the other mutex' owner's priority was increased repeat all this$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: kernel/mutex.c:107:
+          for the new owner.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: kernel/mutex.c:108:
+       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: kernel/mutex.c:109:
+         $

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: kernel/mutex.c:109:
+         $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: kernel/mutex.c:116:
+       Remove the wait element from the mutex's waiting list. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: kernel/mutex.c:118:
+          Lock this task's waiting_on_mutex_lock$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: kernel/mutex.c:119:
+          Insert the new head of the list into waiting_on_mutex.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: kernel/mutex.c:120:
+          Unock this task's waiting_on_mutex_lock$

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: kernel/mutex.c:130:
+          Remove the wait element from this task's mutex_waiters list.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: kernel/mutex.c:131:
+          Set the mutex's owner to the first waiter$

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: kernel/mutex.c:133:
+          Set the mutex's owner to NULL.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: kernel/mutex.c:139:
+       Unlock the mutex lock.       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#487: FILE: kernel/mutex.c:141:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: kernel/mutex.c:146:
+     c) Waiting tasks can only get their priorities increased, never $

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: kernel/mutex.c:147:
+        descreased.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: kernel/mutex.c:156:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: kernel/mutex.c:161:
+    Now if we try to take into account that rescheduling can occur between $

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: kernel/mutex.c:165:
+                          other1 ->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: kernel/mutex.c:166:
+                          other2 ->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: kernel/mutex.c:167:
+                          ...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: kernel/mutex.c:171:
+         But as we insert from the beginning scanning until we find a task$

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: kernel/mutex.c:172:
+         with lower priority than otherX, otherX will be correctly inserted$

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: kernel/mutex.c:173:
+         even though  it can suddenly meet owner which has too high priority$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: kernel/mutex.c:174:
+         relatively to where it is placed on the list.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: kernel/mutex.c:175:
+         When the resorting of owner kicks in later the list will be $

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: kernel/mutex.c:175:
+         When the resorting of owner kicks in later the list will be $

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: kernel/mutex.c:176:
+         strictly sorted again.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: kernel/mutex.c:178:
+         it has highest priority! Other1 will thus take the place of owner2 in$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: kernel/mutex.c:179:
+         the above drawing. This can keep happening until current gets $

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: kernel/mutex.c:179:
+         the above drawing. This can keep happening until current gets $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: kernel/mutex.c:180:
+         mutex2's lock. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: kernel/mutex.c:180:
+         mutex2's lock. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: kernel/mutex.c:181:
+         The window in which this can happen is the task-latency of current$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: kernel/mutex.c:182:
+         plus a few instructions. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: kernel/mutex.c:182:
+         plus a few instructions. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: kernel/mutex.c:183:
+         $

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: kernel/mutex.c:183:
+         $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: kernel/mutex.c:184:
+         On a UP RT system: You have to count in the task-latency anyway so no $

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: kernel/mutex.c:184:
+         On a UP RT system: You have to count in the task-latency anyway so no $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: kernel/mutex.c:185:
+         harm is really done! If current is the highest priority (real-time) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: kernel/mutex.c:185:
+         harm is really done! If current is the highest priority (real-time) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: kernel/mutex.c:186:
+         task involved it will not be preempted by the others. There is thus$

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: kernel/mutex.c:187:
+         no problem.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: kernel/mutex.c:188:
+         In the case that owner2 originally has higher priority than current $

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: kernel/mutex.c:188:
+         In the case that owner2 originally has higher priority than current $

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: kernel/mutex.c:189:
+         owner2 will get the CPU to release mutex2 to other1 rather than owner.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: kernel/mutex.c:190:
+         In that case current will get in and boost other1 as soon as owner2 $

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: kernel/mutex.c:190:
+         In that case current will get in and boost other1 as soon as owner2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: kernel/mutex.c:191:
+         sleeps. I.e. you worst case waiting is increased by 1 worst locking $

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: kernel/mutex.c:191:
+         sleeps. I.e. you worst case waiting is increased by 1 worst locking $

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: kernel/mutex.c:192:
+         time of mutex2 by this implementation. (Notice that this will only$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: kernel/mutex.c:193:
+         happen in "bad" applications where owner2 sleeps while having the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: kernel/mutex.c:193:
+         happen in "bad" applications where owner2 sleeps while having the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: kernel/mutex.c:194:
+         mutex!).$

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: kernel/mutex.c:196:
+         On a SMB system owner2 might run on another CPU. In that case it can$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: kernel/mutex.c:197:
+         get to mutex_unlock() before current get the list resorted no$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: kernel/mutex.c:198:
+         matter what the priority differences are. You thus get into the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: kernel/mutex.c:199:
+         same problem as just above. But your locking delay can never be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: kernel/mutex.c:200:
+         increased by more that 1 extra worst case locking of mutex2.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#548: FILE: kernel/mutex.c:202:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: kernel/mutex.c:207:
+    systems in general. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: kernel/mutex.c:208:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: kernel/mutex.c:211:
+    and the maximum length of the dependency list ("task waits on a mutex $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: kernel/mutex.c:212:
+    which is owned by a task waiting on a mutex, which is owner by a task $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: kernel/mutex.c:222:
+     I.e.: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: kernel/mutex.c:227:
+      O(M) because the worst place is reinserting the next waiter into $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: kernel/mutex.c:229:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: kernel/mutex.c:231:
+    muteces while holding a mutex, and we are on a UP system all O(N) and O(M) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: kernel/mutex.c:233:
+    get the CPU to ever call mutex_lock() and that will insert itself as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: kernel/mutex.c:235:
+    $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: kernel/mutex.c:241:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#606: FILE: kernel/mutex.c:260:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#609: FILE: kernel/mutex.c:263:
+#define PRINT(level,fmt, args...) \
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: kernel/mutex.c:264:
+        printk(level"%d:%s:%s:%s:%d: "fmt"\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: kernel/mutex.c:264:
+        printk(level"%d:%s:%s:%s:%d: "fmt"\n", \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#610: FILE: kernel/mutex.c:264:
+        printk(level"%d:%s:%s:%s:%d: "fmt"\n", \

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#610: FILE: kernel/mutex.c:264:
+        printk(level"%d:%s:%s:%s:%d: "fmt"\n", \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:CODE_INDENT: code indent should use tabs where possible
#611: FILE: kernel/mutex.c:265:
+               current->pid,current->comm, __FUNCTION__, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: kernel/mutex.c:265:
+               current->pid,current->comm, __FUNCTION__, \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#611: FILE: kernel/mutex.c:265:
+               current->pid,current->comm, __FUNCTION__, \
                            ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#611: FILE: kernel/mutex.c:265:
+               current->pid,current->comm, __FUNCTION__, \

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: kernel/mutex.c:266:
+               __FILE__, __LINE__,##args)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: kernel/mutex.c:266:
+               __FILE__, __LINE__,##args)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#612: FILE: kernel/mutex.c:266:
+               __FILE__, __LINE__,##args)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: kernel/mutex.c:268:
+#define ERROR(fmt,args...) PRINT(KERN_ERR,fmt,##args)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: kernel/mutex.c:268:
+#define ERROR(fmt,args...) PRINT(KERN_ERR,fmt,##args)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: kernel/mutex.c:268:
+#define ERROR(fmt,args...) PRINT(KERN_ERR,fmt,##args)
                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flag' may be better as '(flag)' to avoid precedence issues
#616: FILE: kernel/mutex.c:270:
+#define DEBUG(flag, fmt, args...) \
+do { \
+     if(flag & DEBUG_FLAGS) \
+          PRINT(KERN_INFO,fmt,##args); \
+} while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 5)
#617: FILE: kernel/mutex.c:271:
+do { \
+     if(flag & DEBUG_FLAGS) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: kernel/mutex.c:272:
+     if(flag & DEBUG_FLAGS) \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 10)
#618: FILE: kernel/mutex.c:272:
+     if(flag & DEBUG_FLAGS) \
+          PRINT(KERN_INFO,fmt,##args); \

ERROR:SPACING: space required before the open parenthesis '('
#618: FILE: kernel/mutex.c:272:
+     if(flag & DEBUG_FLAGS) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: kernel/mutex.c:273:
+          PRINT(KERN_INFO,fmt,##args); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: kernel/mutex.c:273:
+          PRINT(KERN_INFO,fmt,##args); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#619: FILE: kernel/mutex.c:273:
+          PRINT(KERN_INFO,fmt,##args); \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#619: FILE: kernel/mutex.c:273:
+          PRINT(KERN_INFO,fmt,##args); \
                              ^

ERROR:SPACING: space required before the open parenthesis '('
#620: FILE: kernel/mutex.c:274:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#622: FILE: kernel/mutex.c:276:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#624: FILE: kernel/mutex.c:278:
+typedef struct mutex_wait_elem {

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: kernel/mutex.c:281:
+                                     mutex */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#627: FILE: kernel/mutex.c:281:
+	wait_queue_t wait;        /* Node in the list of tasks waiting on this
+                                     mutex */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#627: FILE: kernel/mutex.c:281:
+                                     mutex */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#629: FILE: kernel/mutex.c:283:
+	int on_owners_list;       /* is set if it is added to the owners list
+				     already */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#629: FILE: kernel/mutex.c:283:
+				     already */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#631: FILE: kernel/mutex.c:285:
+	struct list_head owners_list; /* For the list of mutex_waiters on
+					 the task_t */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#631: FILE: kernel/mutex.c:285:
+					 the task_t */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#634: FILE: kernel/mutex.c:288:
+#define DECLARE_MUTEX_WAIT(name, mutex, tsk) \
+        mutex_wait_elem_t name = \
+                  { mutex, __WAITQUEUE_INITIALIZER(name.wait, tsk), \
+                    0, { NULL,NULL} }

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: kernel/mutex.c:289:
+        mutex_wait_elem_t name = \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: kernel/mutex.c:289:
+        mutex_wait_elem_t name = \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: kernel/mutex.c:290:
+                  { mutex, __WAITQUEUE_INITIALIZER(name.wait, tsk), \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: kernel/mutex.c:290:
+                  { mutex, __WAITQUEUE_INITIALIZER(name.wait, tsk), \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#637: FILE: kernel/mutex.c:291:
+                    0, { NULL,NULL} }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: kernel/mutex.c:291:
+                    0, { NULL,NULL} }$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#637: FILE: kernel/mutex.c:291:
+                    0, { NULL,NULL} }
                              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#642: FILE: kernel/mutex.c:296:
+	mh->held_list.next = mh->held_list.prev = &mh->held_list;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: kernel/mutex.c:309:
+	if(list_empty(&tsk->muteces_held)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#655: FILE: kernel/mutex.c:309:
+	if(list_empty(&tsk->muteces_held)) {
+		tsk->original_prio = tsk->prio;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: kernel/mutex.c:312:
+  ^Ilist_add(&m->held_list, &tsk->muteces_held);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#658: FILE: kernel/mutex.c:312:
+  ^Ilist_add(&m->held_list, &tsk->muteces_held);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: kernel/mutex.c:312:
+  ^Ilist_add(&m->held_list, &tsk->muteces_held);$

ERROR:SPACING: space required before the open parenthesis '('
#663: FILE: kernel/mutex.c:317:
+	if(list_empty(&m->waiters.task_list)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#666: FILE: kernel/mutex.c:320:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#666: FILE: kernel/mutex.c:320:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#668: FILE: kernel/mutex.c:322:
+				  mutex_wait_elem_t,wait.task_list);
 				                   ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#678: FILE: kernel/mutex.c:332:
+	m->waiters.task_list.prev = m->waiters.task_list.next =

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#682: FILE: kernel/mutex.c:336:
+EXPORT_SYMBOL(mutex_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#685: FILE: kernel/mutex.c:339:
+/* Returns 1 if the task ought to schedule as soon as the spinlock is released
+   called with the spinlock locked.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#703: FILE: kernel/mutex.c:357:
+	/* Find the first waiter for some _other_ mutex than this.
+	   Since only the first waiter of each mutex is on the list it is

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: kernel/mutex.c:359:
+^I   very short :-) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: kernel/mutex.c:364:
+ ^Ilist_for_each_entry(w, &tsk->mutex_waiters, owners_list) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#710: FILE: kernel/mutex.c:364:
+ ^Ilist_for_each_entry(w, &tsk->mutex_waiters, owners_list) { $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#710: FILE: kernel/mutex.c:364:
+ ^Ilist_for_each_entry(w, &tsk->mutex_waiters, owners_list) { $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: kernel/mutex.c:364:
+ ^Ilist_for_each_entry(w, &tsk->mutex_waiters, owners_list) { $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: kernel/mutex.c:366:
+		DEBUG(DEBUG_WAITER_LIST,"w: %p",w);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: kernel/mutex.c:366:
+		DEBUG(DEBUG_WAITER_LIST,"w: %p",w);
 		                               ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#713: FILE: kernel/mutex.c:367:
+		if(w->mutex!=m) {
 		           ^

ERROR:SPACING: space required before the open parenthesis '('
#713: FILE: kernel/mutex.c:367:
+		if(w->mutex!=m) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#714: FILE: kernel/mutex.c:368:
+			prev_prio = min(prev_prio,w->wait.task->prio);
 			                         ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#720: FILE: kernel/mutex.c:374:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#720: FILE: kernel/mutex.c:374:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: kernel/mutex.c:376:
+^I^I^Iwaits_on_this = w;^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: kernel/mutex.c:382:
+	DEBUG(DEBUG_WAITER_LIST,"w: %p, waits_on_this: %p",w, waits_on_this);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#728: FILE: kernel/mutex.c:382:
+	DEBUG(DEBUG_WAITER_LIST,"w: %p, waits_on_this: %p",w, waits_on_this);
 	                                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#733: FILE: kernel/mutex.c:387:
+	if(waits_on_this) {

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#734: FILE: kernel/mutex.c:388:
+		WARN_ON(w!=waits_on_this);
 		         ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#740: FILE: kernel/mutex.c:394:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#740: FILE: kernel/mutex.c:394:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#741: FILE: kernel/mutex.c:395:
+ ^I^IWARN_ON(w);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#741: FILE: kernel/mutex.c:395:
+ ^I^IWARN_ON(w);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: kernel/mutex.c:395:
+ ^I^IWARN_ON(w);$

ERROR:SPACING: space required before the open parenthesis '('
#744: FILE: kernel/mutex.c:398:
+	if(w) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#746: FILE: kernel/mutex.c:400:
+		w->on_owners_list=0;
 		                 ^

ERROR:SPACING: space required before the open parenthesis '('
#751: FILE: kernel/mutex.c:405:
+	if(w) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: kernel/mutex.c:409:
+^Ielse {^I  $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#755: FILE: kernel/mutex.c:409:
+	}
+	else {	  

CHECK:BRACES: Unbalanced braces around else statement
#755: FILE: kernel/mutex.c:409:
+	else {	  

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#758: FILE: kernel/mutex.c:412:
+	if(prev_prio>tsk->prio) {
 	            ^

ERROR:SPACING: space required before the open parenthesis '('
#758: FILE: kernel/mutex.c:412:
+	if(prev_prio>tsk->prio) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#785: FILE: kernel/mutex.c:439:
+	DEBUG(DEBUG_QUEUE,"wait: %p, prev_head: %p, owner: %s(%d)",
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: kernel/mutex.c:442:
+^Iadd_wait_queue_sorted_exclusive_locked(&m->waiters, $

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#791: FILE: kernel/mutex.c:445:
+	if(mutex_first_waiter(m) == wait && prev_head!=wait) {
 	                                             ^

ERROR:SPACING: space required before the open parenthesis '('
#791: FILE: kernel/mutex.c:445:
+	if(mutex_first_waiter(m) == wait && prev_head!=wait) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#793: FILE: kernel/mutex.c:447:
+		int prio = wait->wait.task->prio;
+		if(likely(owner)) {

ERROR:SPACING: space required before the open parenthesis '('
#793: FILE: kernel/mutex.c:447:
+		if(likely(owner)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#795: FILE: kernel/mutex.c:449:
+			unsigned long flags;
+			spin_lock_irqsave(&owner->mutex_waiters_lock, flags);

ERROR:SPACING: space required before the open parenthesis '('
#796: FILE: kernel/mutex.c:450:
+			if(prev_head) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: kernel/mutex.c:451:
+				DEBUG(DEBUG_WAITER_LIST,"prev_head: %p",
 				                       ^

ERROR:SPACING: space required before the open parenthesis '('
#799: FILE: kernel/mutex.c:453:
+				if(unlikely(!prev_head->on_owners_list)) {

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#800: FILE: kernel/mutex.c:454:
+					if(prev_head->wait.task!=owner) {
 					                       ^

ERROR:SPACING: space required before the open parenthesis '('
#800: FILE: kernel/mutex.c:454:
+					if(prev_head->wait.task!=owner) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: kernel/mutex.c:455:
+^I^I^I^I^I^IDEBUG(-1, $

WARNING:SPLIT_STRING: quoted string split across lines
#803: FILE: kernel/mutex.c:457:
+						      "owner: %s(%d), "
+						      "prev_head: %p, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#804: FILE: kernel/mutex.c:458:
+						      "prev_head: %p, "
+						      "m: %p, wait: %p, "

WARNING:SPLIT_STRING: quoted string split across lines
#805: FILE: kernel/mutex.c:459:
+						      "m: %p, wait: %p, "
+						      "prev_head->task:%s(%d)",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: kernel/mutex.c:461:
+						      prev_head,m,wait,
 						               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: kernel/mutex.c:461:
+						      prev_head,m,wait,
 						                 ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#812: FILE: kernel/mutex.c:466:
+				}
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#812: FILE: kernel/mutex.c:466:
+				else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#817: FILE: kernel/mutex.c:471:
+			DEBUG(DEBUG_WAITER_LIST,"wait: %p, owner: %s(%d)",
 			                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#819: FILE: kernel/mutex.c:473:
+^I^I^Ilist_insert_sorted(wait, &owner->mutex_waiters, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: kernel/mutex.c:477:
+^I^I^Ispin_unlock_irqrestore(&owner->mutex_waiters_lock, $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#826: FILE: kernel/mutex.c:480:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#826: FILE: kernel/mutex.c:480:
+		else {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#830: FILE: kernel/mutex.c:484:
+
+	}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#831: FILE: kernel/mutex.c:485:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#831: FILE: kernel/mutex.c:485:
+	else {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#833: FILE: kernel/mutex.c:487:
+		WARN_ON(prev_head==wait);
 		                 ^

ERROR:SPACING: space required before the open parenthesis '('
#834: FILE: kernel/mutex.c:488:
+		if(prev_head && owner) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#835: FILE: kernel/mutex.c:489:
+			if(prev_head->wait.task==owner) {
 			                       ^

ERROR:SPACING: space required before the open parenthesis '('
#835: FILE: kernel/mutex.c:489:
+			if(prev_head->wait.task==owner) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#837: FILE: kernel/mutex.c:491:
+				/* The owner is going to take the mutex
+				   but this task got in and inserted itself

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#840: FILE: kernel/mutex.c:494:
+				   ofcourse not on the owner's list */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#842: FILE: kernel/mutex.c:496:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#842: FILE: kernel/mutex.c:496:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#846: FILE: kernel/mutex.c:500:
+				mutex_wait_elem_t *w;
+				spin_lock_irqsave(&owner->mutex_waiters_lock, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: kernel/mutex.c:501:
+^I^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#848: FILE: kernel/mutex.c:502:
+				list_for_each_entry( w, &owner->mutex_waiters,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: kernel/mutex.c:503:
+				list_for_each_entry( w, &owner->mutex_waiters,
+						     owners_list) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#851: FILE: kernel/mutex.c:505:
+					if(w==prev_head) {
 					    ^

ERROR:SPACING: space required before the open parenthesis '('
#851: FILE: kernel/mutex.c:505:
+					if(w==prev_head) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#852: FILE: kernel/mutex.c:506:
+						found=1;
 						     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: kernel/mutex.c:511:
+^I^I^I^Ispin_unlock_irqrestore(&owner->mutex_waiters_lock, $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#861: FILE: kernel/mutex.c:515:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#861: FILE: kernel/mutex.c:515:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: kernel/mutex.c:528:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#877: FILE: kernel/mutex.c:531:
+	if(!wait) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: kernel/mutex.c:535:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#886: FILE: kernel/mutex.c:540:
+	if(unlikely(!owner)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#891: FILE: kernel/mutex.c:545:
+	DEBUG(DEBUG_REORDER,"tsk: %s(%d), m: %p, owner: %s(%d), "
 	                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#892: FILE: kernel/mutex.c:546:
+	DEBUG(DEBUG_REORDER,"tsk: %s(%d), m: %p, owner: %s(%d), "
+	      "wait: %p, prio: %d",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#893: FILE: kernel/mutex.c:547:
+	      tsk->comm,tsk->pid, m, owner->comm, owner->pid, wait, tsk->prio);
 	               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#894: FILE: kernel/mutex.c:548:
+^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#895: FILE: kernel/mutex.c:549:
+	WARN_ON(tsk!=wait->wait.task);
 	           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#897: FILE: kernel/mutex.c:551:
+	if(unlikely(owner==tsk)) {
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#897: FILE: kernel/mutex.c:551:
+	if(unlikely(owner==tsk)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#899: FILE: kernel/mutex.c:553:
+		DEBUG(DEBUG_REORDER_OWNER,"waiter %s(%d) "
 		                         ^

WARNING:SPLIT_STRING: quoted string split across lines
#900: FILE: kernel/mutex.c:554:
+		DEBUG(DEBUG_REORDER_OWNER,"waiter %s(%d) "
+		      "already got the mutex", owner->comm, owner->pid);

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#904: FILE: kernel/mutex.c:558:
+	if(wait!=mutex_first_waiter(m)) {
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#904: FILE: kernel/mutex.c:558:
+	if(wait!=mutex_first_waiter(m)) {

ERROR:SPACING: space required before the open parenthesis '('
#905: FILE: kernel/mutex.c:559:
+		if(unlikely(wait->on_owners_list)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#910: FILE: kernel/mutex.c:564:
+^I       $

ERROR:SPACING: space required after that ',' (ctx:VxO)
#911: FILE: kernel/mutex.c:565:
+		remove_wait_queue_locked(&m->waiters,&wait->wait);
 		                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#911: FILE: kernel/mutex.c:565:
+		remove_wait_queue_locked(&m->waiters,&wait->wait);
 		                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#913: FILE: kernel/mutex.c:567:
+		/* mutex_insert_wait_queue() can also inserts into owner's
+		   mutex_waiters list. This only happens to elements first on

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#914: FILE: kernel/mutex.c:568:
+		   mutex's wait list. As we weren't first on that list we wont
 		                                                          ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#915: FILE: kernel/mutex.c:569:
+		   get a double insert */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#918: FILE: kernel/mutex.c:572:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#918: FILE: kernel/mutex.c:572:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#922: FILE: kernel/mutex.c:576:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#924: FILE: kernel/mutex.c:578:
+	/* Ups, we have current waiting on a mutex owned by (tsk which waits
+	   for a mutex owned by)+ owner - deadlock! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#924: FILE: kernel/mutex.c:578:
+	   for a mutex owned by)+ owner - deadlock! */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#925: FILE: kernel/mutex.c:579:
+	if(unlikely((owner==current))) {
 	                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'owner==current'
#925: FILE: kernel/mutex.c:579:
+	if(unlikely((owner==current))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#925: FILE: kernel/mutex.c:579:
+	if(unlikely((owner==current))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#926: FILE: kernel/mutex.c:580:
+		printk(KERN_CRIT "Deadlock detected! %s(%d) waits "

WARNING:SPLIT_STRING: quoted string split across lines
#927: FILE: kernel/mutex.c:581:
+		printk(KERN_CRIT "Deadlock detected! %s(%d) waits "
+		       "on itself!\n", current->comm, current->pid);

ERROR:SPACING: space required before the open parenthesis '('
#932: FILE: kernel/mutex.c:586:
+	if(CHECK_FOR_DEADLOCK || set_prio) {

ERROR:SPACING: space required before the open parenthesis '('
#934: FILE: kernel/mutex.c:588:
+		if(set_prio)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#938: FILE: kernel/mutex.c:592:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#938: FILE: kernel/mutex.c:592:
+
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#942: FILE: kernel/mutex.c:596:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#943: FILE: kernel/mutex.c:597:
+	if(CHECK_FOR_DEADLOCK || set_prio) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: kernel/mutex.c:601:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#948: FILE: kernel/mutex.c:602:
+	
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#949: FILE: kernel/mutex.c:603:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: kernel/mutex.c:611:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#963: FILE: kernel/mutex.c:617:
+	spin_lock_irqsave(&m->waiters.lock,flags);
 	                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#968: FILE: kernel/mutex.c:622:
+        /* How to tell the compiler the condition is likely the first time$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#969: FILE: kernel/mutex.c:623:
+        /* How to tell the compiler the condition is likely the first time
+	   and unlikely the second time? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#969: FILE: kernel/mutex.c:623:
+	   and unlikely the second time? */

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#970: FILE: kernel/mutex.c:624:
+	while(get_mutex_owner(m) && get_mutex_owner(m)!=tsk) {
 	                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#970: FILE: kernel/mutex.c:624:
+	while(get_mutex_owner(m) && get_mutex_owner(m)!=tsk) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#973: FILE: kernel/mutex.c:627:
+		int set_prio = (owner->prio > tsk->prio);
+		if(CHECK_FOR_DEADLOCK || set_prio) {

ERROR:SPACING: space required before the open parenthesis '('
#973: FILE: kernel/mutex.c:627:
+		if(CHECK_FOR_DEADLOCK || set_prio) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#978: FILE: kernel/mutex.c:632:
+^I  ^Ispin_unlock_irqrestore(&m->waiters.lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#978: FILE: kernel/mutex.c:632:
+^I  ^Ispin_unlock_irqrestore(&m->waiters.lock, flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#981: FILE: kernel/mutex.c:635:
+^I^Iif(CHECK_FOR_DEADLOCK || set_prio) {^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#981: FILE: kernel/mutex.c:635:
+		if(CHECK_FOR_DEADLOCK || set_prio) {		

ERROR:SPACING: space required after that ',' (ctx:VxV)
#989: FILE: kernel/mutex.c:643:
+		spin_lock_irqsave(&m->waiters.lock,flags);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#992: FILE: kernel/mutex.c:646:
+		      m,get_mutex_owner(m)->comm);
 		       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#993: FILE: kernel/mutex.c:647:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: kernel/mutex.c:648:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1000: FILE: kernel/mutex.c:654:
+	if(w && !w->on_owners_list) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1002: FILE: kernel/mutex.c:656:
+		/* There is a room such it could have been added
+		   already! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1002: FILE: kernel/mutex.c:656:
+		   already! */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1005: FILE: kernel/mutex.c:659:
+		int prio = w->wait.task->prio;
+		spin_lock_irqsave(&tsk->mutex_waiters_lock, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1007: FILE: kernel/mutex.c:661:
+^I^I^I^I   &tsk->mutex_waiters, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1013: FILE: kernel/mutex.c:667:
+^I  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1014: FILE: kernel/mutex.c:668:
+	  
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1016: FILE: kernel/mutex.c:670:
+  ^Ispin_unlock_irqrestore(&m->waiters.lock,flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1016: FILE: kernel/mutex.c:670:
+  ^Ispin_unlock_irqrestore(&m->waiters.lock,flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: kernel/mutex.c:670:
+  ^Ispin_unlock_irqrestore(&m->waiters.lock,flags);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1016: FILE: kernel/mutex.c:670:
+  	spin_unlock_irqrestore(&m->waiters.lock,flags);
   	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1019: FILE: kernel/mutex.c:673:
+	      m,get_mutex_owner(m)->comm);
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#1026: FILE: kernel/mutex.c:680:
+	if(unlikely(mutex_is_uninitialized(m)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1028: FILE: kernel/mutex.c:682:
+^I   $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1030: FILE: kernel/mutex.c:684:
+	spin_lock_irqsave(&m->waiters.lock,flags);
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#1031: FILE: kernel/mutex.c:685:
+	if(likely(!get_mutex_owner(m)))	{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1033: FILE: kernel/mutex.c:687:
+		spin_unlock_irqrestore(&m->waiters.lock,flags);
 		                                       ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1037: FILE: kernel/mutex.c:691:
+	if(unlikely(get_current()==get_mutex_owner(m))) {
 	                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1037: FILE: kernel/mutex.c:691:
+	if(unlikely(get_current()==get_mutex_owner(m))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1043: FILE: kernel/mutex.c:697:
+		spin_unlock_irqrestore(&m->waiters.lock,flags);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1046: FILE: kernel/mutex.c:700:
+	spin_unlock_irqrestore(&m->waiters.lock,flags);
 	                                       ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1050: FILE: kernel/mutex.c:704:
+EXPORT_SYMBOL(mutex_lock);

ERROR:SPACING: space required before the open parenthesis '('
#1056: FILE: kernel/mutex.c:710:
+	if(unlikely(mutex_is_uninitialized(m)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: kernel/mutex.c:712:
+^I   $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1059: FILE: kernel/mutex.c:713:
+	spin_lock_irqsave(&m->waiters.lock,flags);
 	                                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1060: FILE: kernel/mutex.c:714:
+	if(likely(!get_mutex_owner(m)))
+	{

ERROR:SPACING: space required before the open parenthesis '('
#1060: FILE: kernel/mutex.c:714:
+	if(likely(!get_mutex_owner(m)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1063: FILE: kernel/mutex.c:717:
+		spin_unlock_irqrestore(&m->waiters.lock,flags);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1067: FILE: kernel/mutex.c:721:
+	spin_unlock_irqrestore(&m->waiters.lock,flags);
 	                                       ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1082: FILE: kernel/mutex.c:736:
+EXPORT_SYMBOL(mutex_lock_irqsave);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1089: FILE: kernel/mutex.c:743:
+	BUG_ON(mutex_is_uninitialized(m));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1093: FILE: kernel/mutex.c:747:
+	if(unlikely(get_mutex_owner(m)!=get_current())) {
 	                              ^

ERROR:SPACING: space required before the open parenthesis '('
#1093: FILE: kernel/mutex.c:747:
+	if(unlikely(get_mutex_owner(m)!=get_current())) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1094: FILE: kernel/mutex.c:748:
+^I^IDEBUG(DEBUG_QUEUE, $

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1103: FILE: kernel/mutex.c:757:
+	if((--(m->held.times_taken))>0) {
 	                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm->held.times_taken'
#1103: FILE: kernel/mutex.c:757:
+	if((--(m->held.times_taken))>0) {

ERROR:SPACING: space required before the open parenthesis '('
#1103: FILE: kernel/mutex.c:757:
+	if((--(m->held.times_taken))>0) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1113: FILE: kernel/mutex.c:767:
+EXPORT_SYMBOL(mutex_unlock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1117: FILE: kernel/mutex.c:771:
+	BUG_ON(mutex_is_uninitialized(m));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1123: FILE: kernel/mutex.c:777:
+EXPORT_SYMBOL(mutex_unlock_wait);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1129: FILE: kernel/mutex.c:783:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1130: FILE: kernel/mutex.c:784:
+	if(unlikely(mutex_is_uninitialized(m)))

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1135: FILE: kernel/mutex.c:789:
+	res = (get_mutex_owner(m)!=NULL);
 	                         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_mutex_owner"
#1135: FILE: kernel/mutex.c:789:
+	res = (get_mutex_owner(m)!=NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1136: FILE: kernel/mutex.c:790:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1142: FILE: kernel/mutex.c:796:
+EXPORT_SYMBOL(mutex_is_locked);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1155: FILE: kernel/mutex.c:809:
+EXPORT_SYMBOL(atomic_dec_and_mutex_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: kernel/mutex.c.bak:33:
+^Im->prev_prio = get_current()->prio; $

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#1227: FILE: kernel/mutex.c.bak:40:
+ * @condition(pos) the code you use to test wether a place is 
                                             ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1227: FILE: kernel/mutex.c.bak:40:
+ * @condition(pos) the code you use to test wether a place is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1253: FILE: kernel/mutex.c.bak:66:
+^I^Iint found = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: kernel/mutex.c.bak:67:
+^I^Istruct list_head *nhead = (head); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1256: FILE: kernel/mutex.c.bak:69:
+^I^Ilist_for_each_entry(pos, nhead, member) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: kernel/mutex.c.bak:72:
+^I^I^I^I__list_add(&elem->member, pos->member.prev, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1262: FILE: kernel/mutex.c.bak:75:
+^I^I^I^Ibreak; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: kernel/mutex.c.bak:90:
+ ^Itmp_list_add_sorted(wait, &q->task_list); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1301: FILE: kernel/mutex.c.bak:114:
+^Iwake_up_locked(&m->waiters, &flags); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1312: FILE: kernel/mutex.c.bak:125:
+^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1340: FILE: kernel/mutex.c.bak:153:
+^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1393: FILE: kernel/mutex.c.bak:206:
+    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1413: FILE: kernel/mutex.c.bak:226:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1420: FILE: kernel/mutex.c.bak:233:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1835: FILE: kernel/sched.c:609:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1845: FILE: kernel/sched.c:619:
+^I/* Do not decrease priority while muteces are held $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1846: FILE: kernel/sched.c:620:
+	/* Do not decrease priority while muteces are held 
+	   Increasing is good as it let the task release the mutex faster */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1846: FILE: kernel/sched.c:620:
+	   Increasing is good as it let the task release the mutex faster */

ERROR:SPACING: space prohibited after that open parenthesis '('
#1847: FILE: kernel/sched.c:621:
+	if( unlikely(!list_empty(&p->muteces_held)) &&  prio > p->prio )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1847: FILE: kernel/sched.c:621:
+	if( unlikely(!list_empty(&p->muteces_held)) &&  prio > p->prio )

ERROR:SPACING: space required before the open parenthesis '('
#1847: FILE: kernel/sched.c:621:
+	if( unlikely(!list_empty(&p->muteces_held)) &&  prio > p->prio )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1864: FILE: kernel/sched.c:3696:
+void mutex_set_task_priority_up(task_t *p, int new_prio) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1870: FILE: kernel/sched.c:3702:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1874: FILE: kernel/sched.c:3706:
+/* ^Iread_lock_irq(&tasklist_lock); */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1875: FILE: kernel/sched.c:3707:
+^I$

WARNING:TYPO_SPELLING: 'apropriate' may be misspelled - perhaps 'appropriate'?
#1877: FILE: kernel/sched.c:3709:
+	 * To be able to change p->policy safely, the apropriate
 	                                              ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1881: FILE: kernel/sched.c:3713:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1882: FILE: kernel/sched.c:3714:
+	if(unlikely(p->prio < new_prio))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1885: FILE: kernel/sched.c:3717:
+		/* unlikely on UP because then how should current be scheduled
+		   in ?? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1885: FILE: kernel/sched.c:3717:
+		   in ?? */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1887: FILE: kernel/sched.c:3719:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1892: FILE: kernel/sched.c:3724:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1894: FILE: kernel/sched.c:3726:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1903: FILE: kernel/sched.c:3735:
+		/* We know we increase the priority of p so there is no need
+		   to check that we decreasen the priority */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1903: FILE: kernel/sched.c:3735:
+		   to check that we decreasen the priority */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1910: FILE: kernel/sched.c:3742:
+/* ^Iread_unlock_irq(&tasklist_lock); */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1926: FILE: kernel/sched.c:3758:
+^I/* ^Iread_lock_irq(&tasklist_lock); */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1927: FILE: kernel/sched.c:3759:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1929: FILE: kernel/sched.c:3761:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1937: FILE: kernel/sched.c:3769:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1942: FILE: kernel/sched.c:3774:
+^I^I   be first on the run-queue anymore */^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1942: FILE: kernel/sched.c:3774:
+		/* We know we have decreases the priority of p so we might not
+		   be first on the run-queue anymore */		

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1942: FILE: kernel/sched.c:3774:
+		   be first on the run-queue anymore */		

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1947: FILE: kernel/sched.c:3779:
+/* ^Iread_unlock_irq(&tasklist_lock); */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1963: FILE: kernel/wait.c:37:
+void add_wait_queue_sorted_exclusive_locked(wait_queue_head_t *q,
+							  wait_queue_t * wait)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1963: FILE: kernel/wait.c:37:
+							  wait_queue_t * wait)

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#1982: FILE: Makefile:4:
+EXTRAVERSION = -rc4-mm1-RT-U9.2-priom
 ^^^^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231354.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 300 errors, 106 warnings, 51 checks, 1849 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000231354.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
