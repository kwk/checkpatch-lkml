CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#216: FILE: arch/i386/boot/tools/build.c:57:
+static Elf32_Ehdr ehdr;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Phdr>
#217: FILE: arch/i386/boot/tools/build.c:58:
+static Elf32_Phdr phdr[MAX_PHDRS];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: arch/i386/boot/tools/build.c:98:
+		die("Cannot read ELF header: %s\n",
+			strerror(errno));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#257: FILE: arch/i386/boot/tools/build.c:100:
+	if (memcmp(ehdr.e_ident, ELFMAG, 4) != 0) {
+		die("No ELF magic\n");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#260: FILE: arch/i386/boot/tools/build.c:103:
+	if (ehdr.e_ident[EI_CLASS] != ELFCLASS32) {
+		die("Not a 32 bit executable\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#263: FILE: arch/i386/boot/tools/build.c:106:
+	if (ehdr.e_ident[EI_DATA] != ELFDATA2LSB) {
+		die("Not a LSB ELF executable\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#266: FILE: arch/i386/boot/tools/build.c:109:
+	if (ehdr.e_ident[EI_VERSION] != EV_CURRENT) {
+		die("Unknown ELF version\n");
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ehdr.e_type != ET_EXEC'
#284: FILE: arch/i386/boot/tools/build.c:127:
+	if ((ehdr.e_type != ET_EXEC) && (ehdr.e_type != ET_DYN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ehdr.e_type != ET_DYN'
#284: FILE: arch/i386/boot/tools/build.c:127:
+	if ((ehdr.e_type != ET_EXEC) && (ehdr.e_type != ET_DYN)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#284: FILE: arch/i386/boot/tools/build.c:127:
+	if ((ehdr.e_type != ET_EXEC) && (ehdr.e_type != ET_DYN)) {
+		die("Unsupported ELF header type\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#287: FILE: arch/i386/boot/tools/build.c:130:
+	if (ehdr.e_machine != EM_386) {
+		die("Not for x86\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#290: FILE: arch/i386/boot/tools/build.c:133:
+	if (ehdr.e_version != EV_CURRENT) {
+		die("Unknown ELF version\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#293: FILE: arch/i386/boot/tools/build.c:136:
+	if (ehdr.e_ehsize != sizeof(Elf32_Ehdr)) {
+		die("Bad Elf header size\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#296: FILE: arch/i386/boot/tools/build.c:139:
+	if (ehdr.e_phentsize != sizeof(Elf32_Phdr)) {
+		die("Bad program header entry\n");
+	}

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#299: FILE: arch/i386/boot/tools/build.c:142:
+	if (ehdr.e_shentsize != sizeof(Elf32_Shdr)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#299: FILE: arch/i386/boot/tools/build.c:142:
+	if (ehdr.e_shentsize != sizeof(Elf32_Shdr)) {
+		die("Bad section header entry\n");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#302: FILE: arch/i386/boot/tools/build.c:145:
+	if (ehdr.e_shstrndx >= ehdr.e_shnum) {
+		die("String table index out of bounds\n");
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: arch/i386/boot/tools/build.c:154:
+	size_t size;
+	if (ehdr.e_phnum > MAX_PHDRS) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: arch/i386/boot/tools/build.c:156:
+		die("%d program headers supported: %d\n",
+			ehdr.e_phnum, MAX_PHDRS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: arch/i386/boot/tools/build.c:160:
+		die("Seek to %d failed: %s\n",
+			ehdr.e_phoff, strerror(errno));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#319: FILE: arch/i386/boot/tools/build.c:162:
+	size = sizeof(phdr[0])*ehdr.e_phnum;
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: arch/i386/boot/tools/build.c:165:
+		die("Cannot read ELF section headers: %s\n",
+			strerror(errno));

ERROR:SPACING: space required before the open parenthesis '('
#324: FILE: arch/i386/boot/tools/build.c:167:
+	for(i = 0; i < ehdr.e_phnum; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: arch/i386/boot/tools/build.c:183:
+	int i;
+	min = 0xffffffff;

ERROR:SPACING: space required before the open parenthesis '('
#342: FILE: arch/i386/boot/tools/build.c:185:
+	for(i = 0; i < ehdr.e_phnum; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#344: FILE: arch/i386/boot/tools/build.c:187:
+		unsigned long start, end;
+		if (phdr[i].p_type != PT_LOAD)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#356: FILE: arch/i386/boot/tools/build.c:199:
+	size += 128*1024;
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#358: FILE: arch/i386/boot/tools/build.c:201:
+	size = ((size + (((size + 4095) >> 12)*4)) + 4095) & ~4095;
 	                                      ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#371: FILE: arch/i386/boot/tools/build.c:213:
+	unsigned kernel_offset, kernel_filesz, kernel_memsz;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#426: FILE: arch/i386/boot/tools/build.c:282:
+	kernel_offset = (setup_sectors + 1)*512;
 	                                   ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#431: FILE: arch/i386/boot/tools/build.c:286:
+	kernel_filesz = sz = sb.st_size;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#478: FILE: include/linux/elf_boot.h:1:
+#ifndef ELF_BOOT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000032126.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 16 warnings, 14 checks, 414 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000032126.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
