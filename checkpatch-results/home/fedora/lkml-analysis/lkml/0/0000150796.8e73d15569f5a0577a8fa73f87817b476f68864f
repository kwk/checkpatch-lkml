WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#81: 
Content-Type: text/x-patch; name=timer_top4-20050901.patch; charset=us-ascii

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#105: FILE: kernel/timer.c:512:
+extern int account_timer(unsigned int function,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: kernel/timer.c:513:
+^I       ^I^Istruct timer_top_info * top_info);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#106: FILE: kernel/timer.c:513:
+^I       ^I^Istruct timer_top_info * top_info);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: kernel/timer.c:513:
+extern int account_timer(unsigned int function,
+	       		struct timer_top_info * top_info);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: kernel/timer.c:513:
+	       		struct timer_top_info * top_info);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: kernel/timer_top.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#123: FILE: kernel/timer_top.c:2:
+ * kernel/timer_top.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: kernel/timer_top.c:12:
+ * This is particular useful above dynamic tick implementation. One can $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: kernel/timer_top.c:23:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: kernel/timer_top.c:39:
+^Ichar ^I^I^Icomm[TASK_COMM_LEN];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: kernel/timer_top.c:40:
+^Istruct list_head ^Ilist;      ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: kernel/timer_top.c:40:
+^Istruct list_head ^Ilist;      ^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#169: FILE: kernel/timer_top.c:48:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: kernel/timer_top.c:49:
+int account_timer(unsigned long function, unsigned long data, struct timer_top_info * top_info)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: kernel/timer_top.c:52:
+	struct task_struct * task_info;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: kernel/timer_top.c:55:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: kernel/timer_top.c:58:
+^Iif (data) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: kernel/timer_top.c:59:
+^I       ^Itask_info = (struct task_struct *) data;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: kernel/timer_top.c:59:
+^I       ^Itask_info = (struct task_struct *) data;$

CHECK:SPACING: No space is necessary after a cast
#180: FILE: kernel/timer_top.c:59:
+	       	task_info = (struct task_struct *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task_info->pid > 0'
#182: FILE: kernel/timer_top.c:61:
+		if ((task_info->pid > 0) && (task_info->pid < PID_MAX_LIMIT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task_info->pid < PID_MAX_LIMIT'
#182: FILE: kernel/timer_top.c:61:
+		if ((task_info->pid > 0) && (task_info->pid < PID_MAX_LIMIT)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: kernel/timer_top.c:77:
+^I$

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#199: FILE: kernel/timer_top.c:78:
+	/* if you are here then it didnt find so inserts in the list */
 	                           ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*top)...) over kmalloc(sizeof(struct timer_top_info)...)
#201: FILE: kernel/timer_top.c:80:
+	top = kmalloc(sizeof(struct timer_top_info), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: kernel/timer_top.c:81:
+^Iif (!top) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: kernel/timer_top.c:91:
+out:^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#216: FILE: kernel/timer_top.c:95:
+EXPORT_SYMBOL(account_timer);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: kernel/timer_top.c:104:
+^I$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#229: FILE: kernel/timer_top.c:108:
+		seq_printf(m, "%x %lu %d %s\n", top->func_pointer, top->counter, top->pid, top->comm);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: kernel/timer_top.c:112:
+} $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#240: FILE: kernel/timer_top.c:119:
+static struct file_operations proc_timertop_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#250: FILE: kernel/timer_top.c:129:
+	if (top_info_file == NULL) {
+		return -ENOMEM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!top_info_file"
#250: FILE: kernel/timer_top.c:129:
+	if (top_info_file == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: kernel/timer_top.c:134:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150796.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 13 warnings, 8 checks, 163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150796.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
