WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
- All allocations needed to process incoming packets are marked as CRITICAL.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#70: FILE: include/linux/skbuff.h:1072:
+	return __dev_alloc_skb(length, GFP_ATOMIC|__GFP_CRITICAL);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sk' may be better as '(sk)' to avoid precedence issues
#82: FILE: include/net/sock.h:1408:
+#define SK_CRIT_ALLOC(sk, flags) ((sk->sk_allocation & __GFP_CRITICAL) | flags)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#82: FILE: include/net/sock.h:1408:
+#define SK_CRIT_ALLOC(sk, flags) ((sk->sk_allocation & __GFP_CRITICAL) | flags)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#83: FILE: include/net/sock.h:1409:
+#define CRIT_ALLOC(flags) (__GFP_CRITICAL | flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#95: FILE: net/compat.c:173:
+		kcmsg_base = kcmsg = sock_kmalloc(sk, kcmlen,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#122: FILE: net/core/dst.c:129:
+	dst = kmem_cache_alloc(ops->kmem_cachep, SLAB_ATOMIC|__GFP_CRITICAL);
 	                                                    ^

WARNING:TYPO_SPELLING: 'fle' may be misspelled - perhaps 'file'?
#135: FILE: net/core/flow.c:207:
+		fle = kmem_cache_alloc(flow_cachep, SLAB_ATOMIC|__GFP_CRITICAL);
 		^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#135: FILE: net/core/flow.c:207:
+		fle = kmem_cache_alloc(flow_cachep, SLAB_ATOMIC|__GFP_CRITICAL);
 		                                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#170: FILE: net/core/neighbour.c:1084:
+	if (!hh && (hh = kmalloc(sizeof(*hh), CRIT_ALLOC(GFP_ATOMIC))) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#236: FILE: net/ipv4/arp.c:947:
+	if ((skb = skb_share_check(skb, CRIT_ALLOC(GFP_ATOMIC))) == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#249: FILE: net/ipv4/esp4.c:194:
+			sg = kmalloc(sizeof(struct scatterlist)*nfrags, CRIT_ALLOC(GFP_ATOMIC));
 			                                       ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sg)...) over kmalloc(sizeof(struct scatterlist)...)
#249: FILE: net/ipv4/esp4.c:194:
+			sg = kmalloc(sizeof(struct scatterlist)*nfrags, CRIT_ALLOC(GFP_ATOMIC));

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#249: FILE: net/ipv4/esp4.c:194:
+			sg = kmalloc(sizeof(struct scatterlist)*nfrags, CRIT_ALLOC(GFP_ATOMIC));

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#288: FILE: net/ipv4/ip_input.c:389:
+	if ((skb = skb_share_check(skb, CRIT_ALLOC(GFP_ATOMIC))) == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#332: FILE: net/ipv4/tcp_input.c:3292:
+		nskb = alloc_skb(copy+header, SK_CRIT_ALLOC(sk, GFP_ATOMIC));
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#413: FILE: net/ipv4/tcp_output.c:1433:
+				    pskb_copy(skb, SK_CRIT_ALLOC(sk, GFP_ATOMIC)):
 				                                                 ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#552: FILE: net/socket.c:1761:
+			ctl_buf = sock_kmalloc(sock->sk, ctl_len, SK_CRIT_ALLOC(sock->sk, GFP_KERNEL));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#574: FILE: net/xfrm/xfrm_algo.c:649:
+		    pskb_expand_head(skb, 0, tailbits-skb_tailroom(skb)+128, CRIT_ALLOC(GFP_ATOMIC)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#574: FILE: net/xfrm/xfrm_algo.c:649:
+		    pskb_expand_head(skb, 0, tailbits-skb_tailroom(skb)+128, CRIT_ALLOC(GFP_ATOMIC)))
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#574: FILE: net/xfrm/xfrm_algo.c:649:
+		    pskb_expand_head(skb, 0, tailbits-skb_tailroom(skb)+128, CRIT_ALLOC(GFP_ATOMIC)))
 		                                                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125678.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 12 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125678.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
