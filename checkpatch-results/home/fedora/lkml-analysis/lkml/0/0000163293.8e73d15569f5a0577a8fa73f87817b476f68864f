WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
because you threw up when you saw what a mess it is. Anyway I'm sorry for=20

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#79: FILE: arch/i386/Kconfig:458:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#145: FILE: arch/i386/kernel/apic.c:954:
+	apic_timer_val =3D clocks/APIC_DIVISOR;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#145: FILE: arch/i386/kernel/apic.c:954:
+	apic_timer_val =3D clocks/APIC_DIVISOR;
 	                         ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#153: FILE: arch/i386/kernel/apic.c:961:
 static void __devinit setup_APIC_timer(unsigned int clocks)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: arch/i386/kernel/dyn-tick.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#187: FILE: arch/i386/kernel/dyn-tick.c:2:
+ * linux/arch/i386/kernel/dyn-tick.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: spaces required around that '*=' (ctx:WxV)
#211: FILE: arch/i386/kernel/dyn-tick.c:26:
+	count *=3D apic_timer_val;
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#237: FILE: arch/i386/kernel/dyn-tick.c:52:
+static struct dyn_tick_timer arch_dyn_tick_timer =3D {
                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#238: FILE: arch/i386/kernel/dyn-tick.c:53:
+	.arch_reprogram_timer	=3D &arch_reprogram_timer,
 	                     	^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#238: FILE: arch/i386/kernel/dyn-tick.c:53:
+	.arch_reprogram_timer	=3D &arch_reprogram_timer,
 	                     	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#243: FILE: arch/i386/kernel/dyn-tick.c:58:
+	arch_dyn_tick_timer.arch_init =3D dyn_tick_arch_init;
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#260: FILE: arch/i386/kernel/dyn-tick.c:73:
+irqreturn_t dyn_tick_timer_interrupt(int irq, void *dev_id, struct pt_regs=
                                                                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#264: FILE: arch/i386/kernel/dyn-tick.c:77:
+	volatile unsigned long long now;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#265: FILE: arch/i386/kernel/dyn-tick.c:78:
+	unsigned int skipped =3D 0;
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#268: FILE: arch/i386/kernel/dyn-tick.c:81:
+	now =3D cur_timer->monotonic_clock();
 	    ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#269: FILE: arch/i386/kernel/dyn-tick.c:82:
+	while (now - last_tick >=3D NS_TICK_LEN) {
 	                       ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#270: FILE: arch/i386/kernel/dyn-tick.c:83:
+		last_tick +=3D NS_TICK_LEN;
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#276: FILE: arch/i386/kernel/dyn-tick.c:89:
+		dyn_tick->skip =3D 1;
 		               ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#280: FILE: arch/i386/kernel/dyn-tick.c:93:
+		dyn_tick->state |=3D DYN_TICK_ENABLED;
 		                ^

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#281: FILE: arch/i386/kernel/dyn-tick.c:94:
+		dyn_tick->state &=3D ~DYN_TICK_SKIPPING;
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#293: FILE: arch/i386/kernel/dyn-tick.c:106:
+	last_tick =3D cur_timer->monotonic_clock();
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#294: FILE: arch/i386/kernel/dyn-tick.c:107:
+	dyn_tick->skip =3D 1;
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#296: FILE: arch/i386/kernel/dyn-tick.c:109:
+		dyn_tick->max_skip =3D 0xffff/LATCH;	/* PIT timer length */
 		                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#296: FILE: arch/i386/kernel/dyn-tick.c:109:
+		dyn_tick->max_skip =3D 0xffff/LATCH;	/* PIT timer length */
 		                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#297: FILE: arch/i386/kernel/dyn-tick.c:110:
+	printk(KERN_INFO "dyn-tick: Maximum ticks to skip limited to %i\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#301: FILE: arch/i386/kernel/dyn-tick.c:114:
+	dyn_tick->interrupt =3D dyn_tick_timer_interrupt;
 	                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#309: FILE: arch/i386/kernel/dyn-tick.c:121:
+/* Functions that need blank prototypes for !CONFIG_NO_IDLE_HZ below here =
+inline void set_dyn_tick_max_skip(u32 apic_timer_val)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: arch/i386/kernel/time.c:257:
+void do_timer_interrupt(int irq, void *dev_id,
 					struct pt_regs *regs)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#451: FILE: arch/i386/kernel/time.c:425:
+struct sys_device device_timer =3D {
                                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#475: FILE: arch/i386/kernel/timers/timer_pit.c:150:
 }
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#483: FILE: arch/i386/kernel/timers/timer_pit.c:158:
+	extern spinlock_t i8253_lock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: arch/i386/kernel/timers/timer_pit.c:160:
+	unsigned long flags;
+	spin_lock_irqsave(&i8253_lock, flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#499: FILE: arch/i386/kernel/timers/timer_pit.c:174:
+	extern spinlock_t i8253_lock;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#502: FILE: arch/i386/kernel/timers/timer_pit.c:177:
+	skip =3D jiffies_to_skip * LATCH;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#504: FILE: arch/i386/kernel/timers/timer_pit.c:179:
+		skip =3D 0xffff;
 		     ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#597: FILE: arch/i386/mach-default/setup.c:95:
 }
+/**

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#604: FILE: arch/i386/mach-default/setup.c:102:
+void replace_timer_interrupt(void * new_handler)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#609: FILE: arch/i386/mach-default/setup.c:107:
+	irq0.handler =3D new_handler;
 	             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#625: FILE: arch/i386/mach-default/setup.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#642: FILE: arch/i386/mach-default/setup.c:18:
+extern void disable_pit_timer(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#643: FILE: arch/i386/mach-default/setup.c:19:
+extern void reprogram_pit_timer(int jiffies_to_skip);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#644: FILE: arch/i386/mach-default/setup.c:20:
+extern void reprogram_apic_timer(unsigned int count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: arch/i386/mach-default/setup.c:21:
+extern void replace_timer_interrupt(void * new_handler);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#645: FILE: arch/i386/mach-default/setup.c:21:
+extern void replace_timer_interrupt(void * new_handler);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#647: FILE: arch/i386/mach-default/setup.c:23:
+extern void set_dyn_tick_max_skip(u32 apic_timer_val);

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#648: FILE: arch/i386/mach-default/setup.c:24:
+extern inline void setup_dyn_tick_use_apic(unsigned int calibration_result=
                                                                           ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#648: FILE: arch/i386/mach-default/setup.c:24:
+extern inline void setup_dyn_tick_use_apic(unsigned int calibration_result=

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#650: FILE: arch/i386/mach-default/setup.c:25:
+extern void wakeup_pit_or_apic(int cpu, struct pt_regs *regs);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#651: FILE: arch/i386/mach-default/setup.c:26:
+extern void dyn_tick_interrupt(int irq, struct pt_regs *regs);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#652: FILE: arch/i386/mach-default/setup.c:27:
+extern void dyn_tick_time_init(struct timer_opts *cur_timer);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#653: FILE: arch/i386/mach-default/setup.c:28:
+extern void do_timer_interrupt(int irq, void *dev_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: arch/i386/mach-default/setup.c:29:
+extern void do_timer_interrupt(int irq, void *dev_id,
+					struct pt_regs *regs);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#656: FILE: arch/i386/mach-default/setup.c:31:
+extern irqreturn_t dyn_tick_timer_interrupt(int irq, void *dev_id, struct =

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#658: FILE: arch/i386/mach-default/setup.c:32:
+extern int __init dyn_tick_arch_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#659: FILE: arch/i386/mach-default/setup.c:33:
+extern u32 apic_timer_val;

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#661: FILE: arch/i386/mach-default/setup.c:35:
+#if defined(CONFIG_DYN_TICK_USE_APIC) && (defined(CONFIG_SMP) || defined(C=
                                                                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#703: FILE: include/linux/dyn-tick.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#704: FILE: include/linux/dyn-tick.h:2:
+ * linux/include/linux/dyn-tick.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#721: FILE: include/linux/dyn-tick.h:19:
+#define DYN_TICK_TIMER_INT	(1 << 4)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#722: FILE: include/linux/dyn-tick.h:20:
+#define DYN_TICK_USE_APIC	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#723: FILE: include/linux/dyn-tick.h:21:
+#define DYN_TICK_SKIPPING	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#724: FILE: include/linux/dyn-tick.h:22:
+#define DYN_TICK_ENABLED	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#725: FILE: include/linux/dyn-tick.h:23:
+#define DYN_TICK_SUITABLE	(1 << 0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#733: FILE: include/linux/dyn-tick.h:31:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#733: FILE: include/linux/dyn-tick.h:31:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#733: FILE: include/linux/dyn-tick.h:31:
+	irqreturn_t (*interrupt)(int, void *, struct pt_regs *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#737: FILE: include/linux/dyn-tick.h:35:
+	int (*arch_init) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#738: FILE: include/linux/dyn-tick.h:36:
+	void (*arch_enable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#739: FILE: include/linux/dyn-tick.h:37:
+	void (*arch_disable) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#740: FILE: include/linux/dyn-tick.h:38:
+	void (*arch_reprogram_timer) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#743: FILE: include/linux/dyn-tick.h:41:
+extern struct dyn_tick_state * dyn_tick;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#744: FILE: include/linux/dyn-tick.h:42:
+extern void dyn_tick_register(struct dyn_tick_timer * new_timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#744: FILE: include/linux/dyn-tick.h:42:
+extern void dyn_tick_register(struct dyn_tick_timer * new_timer);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#746: FILE: include/linux/dyn-tick.h:44:
+#define NS_TICK_LEN		((1 * 1000000000)/HZ)
                    		                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#749: FILE: include/linux/dyn-tick.h:47:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#752: FILE: include/linux/dyn-tick.h:50:
+extern unsigned long dyn_tick_reprogram_timer(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#764: FILE: include/linux/dyn-tick.h:62:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#778: FILE: kernel/dyn-tick.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#779: FILE: kernel/dyn-tick.c:2:
+ * linux/arch/i386/kernel/dyn-tick.c

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#802: FILE: kernel/dyn-tick.c:25:
+#include <asm/io.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#809: FILE: kernel/dyn-tick.c:32:
+struct dyn_tick_state * dyn_tick =3D &dyn_tick_state;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#809: FILE: kernel/dyn-tick.c:32:
+struct dyn_tick_state * dyn_tick =3D &dyn_tick_state;
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#809: FILE: kernel/dyn-tick.c:32:
+struct dyn_tick_state * dyn_tick =3D &dyn_tick_state;
                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#810: FILE: kernel/dyn-tick.c:33:
+struct dyn_tick_timer * dyn_tick_cfg;

WARNING:TYPO_SPELLING: 'independed' may be misspelled - perhaps 'independent'?
#814: FILE: kernel/dyn-tick.c:37:
+ * Arch independed code needed to reprogram next timer interrupt.
         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#838: FILE: kernel/dyn-tick.c:61:
+	cpu =3D smp_processor_id();
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#842: FILE: kernel/dyn-tick.c:65:
+		next =3D next_timer_interrupt();
 		     ^

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#843: FILE: kernel/dyn-tick.c:66:
+		if (jiffies > next)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#844: FILE: kernel/dyn-tick.c:67:
+			dyn_tick->skip =3D 1;
 			               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#846: FILE: kernel/dyn-tick.c:69:
+			dyn_tick->skip =3D next_timer_interrupt() - jiffies;
 			               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#849: FILE: kernel/dyn-tick.c:72:
+				dyn_tick->skip =3D dyn_tick->max_skip;
 				               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#853: FILE: kernel/dyn-tick.c:76:
+			dyn_tick->skip_cpu =3D cpu;
 			                   ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#854: FILE: kernel/dyn-tick.c:77:
+			dyn_tick->state |=3D DYN_TICK_SKIPPING;
 			                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#863: FILE: kernel/dyn-tick.c:86:
+void __init dyn_tick_register(struct dyn_tick_timer * arch_timer)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#865: FILE: kernel/dyn-tick.c:88:
+	dyn_tick_cfg =3D arch_timer;
 	             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#866: FILE: kernel/dyn-tick.c:89:
+	printk(KERN_INFO "dyn-tick: Registering dynamic tick timer v%s\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#877: FILE: kernel/dyn-tick.c:98:
+static int __initdata dyntick_autoenable =3D 0;
                                          ^

WARNING:MISPLACED_INIT: __initdata should be placed after dyntick_autoenable
#877: FILE: kernel/dyn-tick.c:98:
+static int __initdata dyntick_autoenable =3D 0;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#878: FILE: kernel/dyn-tick.c:99:
+static int __initdata dyntick_useapic =3D 0;
                                       ^

WARNING:MISPLACED_INIT: __initdata should be placed after dyntick_useapic
#878: FILE: kernel/dyn-tick.c:99:
+static int __initdata dyntick_useapic =3D 0;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#882: FILE: kernel/dyn-tick.c:103:
+ * dyntick=3D[enable|disable],[forceapic]
+ */=20

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#882: FILE: kernel/dyn-tick.c:103:
+ */=20
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#888: FILE: kernel/dyn-tick.c:109:
+	if (!strncmp(options, "enable", 6))=20
 	                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#888: FILE: kernel/dyn-tick.c:109:
+	if (!strncmp(options, "enable", 6))=20

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#889: FILE: kernel/dyn-tick.c:110:
+		dyntick_autoenable =3D 1;
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#892: FILE: kernel/dyn-tick.c:113:
+		dyntick_useapic =3D 1;
 		                ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#897: FILE: kernel/dyn-tick.c:118:
+__setup("dyntick=3D", dyntick_setup);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#909: FILE: kernel/dyn-tick.c:128:
+#define DYN_TICK_IS_SET(x)	((dyn_tick->state & (x)) =3D=3D (x))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#909: FILE: kernel/dyn-tick.c:128:
+#define DYN_TICK_IS_SET(x)	((dyn_tick->state & (x)) =3D=3D (x))
                           	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#909: FILE: kernel/dyn-tick.c:128:
+#define DYN_TICK_IS_SET(x)	((dyn_tick->state & (x)) =3D=3D (x))
                           	                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#909: FILE: kernel/dyn-tick.c:128:
+#define DYN_TICK_IS_SET(x)	((dyn_tick->state & (x)) =3D=3D (x))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#922: FILE: kernel/dyn-tick.c:141:
+static ssize_t set_dyn_tick_state(struct sys_device *dev, const char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: kernel/dyn-tick.c:142:
+static ssize_t set_dyn_tick_state(struct sys_device *dev, const char * buf,
+				size_t count)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#926: FILE: kernel/dyn-tick.c:145:
+	unsigned int enable =3D simple_strtoul(buf, NULL, 2);
 	                    ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#926: FILE: kernel/dyn-tick.c:145:
+	unsigned int enable =3D simple_strtoul(buf, NULL, 2);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#932: FILE: kernel/dyn-tick.c:151:
+		dyn_tick->state |=3D DYN_TICK_ENABLED;
 		                ^

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#936: FILE: kernel/dyn-tick.c:155:
+		dyn_tick->state &=3D ~DYN_TICK_ENABLED;
 		                ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#956: FILE: kernel/dyn-tick.c:173:
+	dyn_tick->state |=3D DYN_TICK_TIMER_INT;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#967: FILE: kernel/dyn-tick.c:184:
+	int ret =3D 0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#969: FILE: kernel/dyn-tick.c:186:
+	if (dyn_tick_cfg =3D=3D NULL || dyn_tick_cfg->arch_init =3D=3D NULL ||
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#969: FILE: kernel/dyn-tick.c:186:
+	if (dyn_tick_cfg =3D=3D NULL || dyn_tick_cfg->arch_init =3D=3D NULL ||
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#969: FILE: kernel/dyn-tick.c:186:
+	if (dyn_tick_cfg =3D=3D NULL || dyn_tick_cfg->arch_init =3D=3D NULL ||
 	                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#969: FILE: kernel/dyn-tick.c:186:
+	if (dyn_tick_cfg =3D=3D NULL || dyn_tick_cfg->arch_init =3D=3D NULL ||
 	                                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#969: FILE: kernel/dyn-tick.c:186:
+	if (dyn_tick_cfg =3D=3D NULL || dyn_tick_cfg->arch_init =3D=3D NULL ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#971: FILE: kernel/dyn-tick.c:188:
+		printk(KERN_ERR "dyn-tick: No suitable timer found\n");

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#976: FILE: kernel/dyn-tick.c:193:
+		dyn_tick->state &=3D ~DYN_TICK_USE_APIC;
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#978: FILE: kernel/dyn-tick.c:195:
+	ret =3D dyn_tick_cfg->arch_init();
 	    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#979: FILE: kernel/dyn-tick.c:196:
+	if (ret !=3D 0) {
 	        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#980: FILE: kernel/dyn-tick.c:197:
+		printk(KERN_ERR "dyn-tick: Init failed\n");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#984: FILE: kernel/dyn-tick.c:201:
+	ret =3D sysdev_create_file(&device_timer, &attr_dyn_tick_state);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#986: FILE: kernel/dyn-tick.c:203:
+	if (ret =3D=3D 0 && dyntick_autoenable) {
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#986: FILE: kernel/dyn-tick.c:203:
+	if (ret =3D=3D 0 && dyntick_autoenable) {
 	           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#986: FILE: kernel/dyn-tick.c:203:
+	if (ret =3D=3D 0 && dyntick_autoenable) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#986: FILE: kernel/dyn-tick.c:203:
+	if (ret =3D=3D 0 && dyntick_autoenable) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#987: FILE: kernel/dyn-tick.c:204:
+		dyn_tick->state |=3D DYN_TICK_ENABLED;
 		                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#988: FILE: kernel/dyn-tick.c:205:
+		printk(KERN_INFO "dyn-tick: Timer using dynamic tick\n");

CHECK:BRACES: Unbalanced braces around else statement
#989: FILE: kernel/dyn-tick.c:206:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#990: FILE: kernel/dyn-tick.c:207:
+		printk(KERN_INFO "dyn-tick: Timer not enabled during boot\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000163293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 47 warnings, 24 checks, 855 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000163293.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
