WARNING:REPEATED_WORD: Possible repeated word: 'shm'
#30: 
and a shmfs mounted like this - mount -t shm shm /shm -osize=1G.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#39: 
--- a/fs/inode.c	Mon Feb  4 08:55:13 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: include/linux/mm.h:226:
+ * in memory if present. The tree is rooted at mapping->root.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: include/linux/mm.h:463:
+static inline void add_page_to_inode_queue(struct address_space *mapping, struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: include/linux/mm.h:472:
+static inline void remove_page_from_inode_queue(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: include/linux/mm.h:474:
+	struct address_space * mapping = page->mapping;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: include/linux/pagemap.h:46:
+extern struct page * find_get_page(struct address_space *mapping,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/pagemap.h:46:
+extern struct page * find_get_page(struct address_space *mapping,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: include/linux/pagemap.h:47:
+extern struct page * find_get_page(struct address_space *mapping,
+				unsigned long index);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: include/linux/pagemap.h:48:
+extern struct page * find_lock_page(struct address_space *mapping,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/pagemap.h:48:
+extern struct page * find_lock_page(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: include/linux/pagemap.h:49:
+extern struct page * find_lock_page(struct address_space *mapping,
+				unsigned long index);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#183: FILE: include/linux/pagemap.h:57:
+extern int add_to_page_cache(struct page * page, struct address_space *mapping, unsigned long index);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: include/linux/pagemap.h:57:
+extern int add_to_page_cache(struct page * page, struct address_space *mapping, unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/pagemap.h:57:
+extern int add_to_page_cache(struct page * page, struct address_space *mapping, unsigned long index);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#191: FILE: include/linux/radix-tree.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: include/linux/radix-tree.h:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: include/linux/radix-tree.h:14:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#206: FILE: include/linux/radix-tree.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#207: FILE: include/linux/radix-tree.h:17:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/radix-tree.h:34:
+extern int radix_tree_reserve(struct radix_tree_root *, unsigned long, void ***);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#224: FILE: include/linux/radix-tree.h:34:
+extern int radix_tree_reserve(struct radix_tree_root *, unsigned long, void ***);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#224: FILE: include/linux/radix-tree.h:34:
+extern int radix_tree_reserve(struct radix_tree_root *, unsigned long, void ***);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void ***' should also have an identifier name
#224: FILE: include/linux/radix-tree.h:34:
+extern int radix_tree_reserve(struct radix_tree_root *, unsigned long, void ***);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/linux/radix-tree.h:35:
+extern int radix_tree_insert(struct radix_tree_root *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#225: FILE: include/linux/radix-tree.h:35:
+extern int radix_tree_insert(struct radix_tree_root *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#225: FILE: include/linux/radix-tree.h:35:
+extern int radix_tree_insert(struct radix_tree_root *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#225: FILE: include/linux/radix-tree.h:35:
+extern int radix_tree_insert(struct radix_tree_root *, unsigned long, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: include/linux/radix-tree.h:36:
+extern void *radix_tree_lookup(struct radix_tree_root *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#226: FILE: include/linux/radix-tree.h:36:
+extern void *radix_tree_lookup(struct radix_tree_root *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#226: FILE: include/linux/radix-tree.h:36:
+extern void *radix_tree_lookup(struct radix_tree_root *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: include/linux/radix-tree.h:37:
+extern int radix_tree_delete(struct radix_tree_root *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct radix_tree_root *' should also have an identifier name
#227: FILE: include/linux/radix-tree.h:37:
+extern int radix_tree_delete(struct radix_tree_root *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#227: FILE: include/linux/radix-tree.h:37:
+extern int radix_tree_delete(struct radix_tree_root *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/linux/swap.h:129:
+extern int move_to_swap_cache(struct page *page, swp_entry_t entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/linux/swap.h:130:
+extern int move_from_swap_cache(struct page *page, unsigned long index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: include/linux/swap.h:131:
+extern int move_from_swap_cache(struct page *page, unsigned long index,
+		struct address_space *mapping);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#278: FILE: init/main.c:479:
+	if (open("/dev/console", O_RDWR, 0) < 0
+	    && open("/dv/console", O_RDWR, 0) < 0)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#301: FILE: kernel/ksyms.c:255:
+EXPORT_SYMBOL(find_lock_page);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#326: FILE: lib/radix-tree.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: lib/radix-tree.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: lib/radix-tree.c:14:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#341: FILE: lib/radix-tree.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#342: FILE: lib/radix-tree.c:17:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:BIT_MACRO: Prefer using the BIT macro
#356: FILE: lib/radix-tree.c:31:
+#define RADIX_TREE_MAP_SIZE		(1UL << RADIX_TREE_MAP_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#357: FILE: lib/radix-tree.c:32:
+#define RADIX_TREE_MAP_MASK		(RADIX_TREE_MAP_SIZE-1)
                            		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#381: FILE: lib/radix-tree.c:56:
+#define radix_tree_node_free(node) \
+	mempool_free((node), radix_tree_node_pool);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#389: FILE: lib/radix-tree.c:64:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#421: FILE: lib/radix-tree.c:96:
+	if (root->rnode) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#423: FILE: lib/radix-tree.c:98:
+			if (!(node = radix_tree_node_alloc(root)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: lib/radix-tree.c:108:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#433: FILE: lib/radix-tree.c:108:
+	} else 

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#439: FILE: lib/radix-tree.c:114:
+EXPORT_SYMBOL(radix_tree_extend);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: lib/radix-tree.c:116:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: lib/radix-tree.c:137:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: lib/radix-tree.c:137:
+    $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#465: FILE: lib/radix-tree.c:140:
+	shift = (height-1) * RADIX_TREE_MAP_SHIFT;
 	               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#468: FILE: lib/radix-tree.c:143:
+		if (*slot == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#470: FILE: lib/radix-tree.c:145:
+			if (!(tmp = radix_tree_node_alloc(root)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot"
#485: FILE: lib/radix-tree.c:160:
+	if (*slot != NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#495: FILE: lib/radix-tree.c:170:
+EXPORT_SYMBOL(radix_tree_reserve);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#497: FILE: lib/radix-tree.c:172:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#517: FILE: lib/radix-tree.c:192:
+EXPORT_SYMBOL(radix_tree_insert);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: lib/radix-tree.c:194:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#536: FILE: lib/radix-tree.c:211:
+	shift = (height-1) * RADIX_TREE_MAP_SHIFT;
 	               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#540: FILE: lib/radix-tree.c:215:
+		if (*slot == NULL)

CHECK:SPACING: No space is necessary after a cast
#549: FILE: lib/radix-tree.c:224:
+	return (void *) *slot;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#552: FILE: lib/radix-tree.c:227:
+EXPORT_SYMBOL(radix_tree_lookup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: lib/radix-tree.c:229:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#564: FILE: lib/radix-tree.c:239:
+	struct radix_tree_path path[RADIX_TREE_INDEX_BITS/RADIX_TREE_MAP_SHIFT + 2], *pathp = path;
 	                                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#571: FILE: lib/radix-tree.c:246:
+	shift = (height-1) * RADIX_TREE_MAP_SHIFT;
 	               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pathp->slot"
#576: FILE: lib/radix-tree.c:251:
+		if (*pathp->slot == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pathp[0].slot"
#587: FILE: lib/radix-tree.c:262:
+	if (*pathp[0].slot == NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#600: FILE: lib/radix-tree.c:275:
+EXPORT_SYMBOL(radix_tree_delete);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#623: FILE: lib/radix-tree.c:298:
+		panic ("Failed to create radix tree node cache\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#628: FILE: lib/radix-tree.c:303:
+		panic ("Failed to create radix tree node pool\n");

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#781: FILE: mm/filemap.c:203:
+static int FASTCALL(truncate_list_pages(struct address_space *, struct list_head *, unsigned long, unsigned *));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#781: FILE: mm/filemap.c:203:
+static int FASTCALL(truncate_list_pages(struct address_space *, struct list_head *, unsigned long, unsigned *));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: mm/filemap.c:205:
+static int truncate_list_pages(struct address_space *mapping,
+	struct list_head *head, unsigned long start, unsigned *partial)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#783: FILE: mm/filemap.c:205:
+	struct list_head *head, unsigned long start, unsigned *partial)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#826: FILE: mm/filemap.c:290:
+					struct page * page,

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#979: FILE: mm/filemap.c:438:
+	retval = do_buffer_fdatasync(mapping, &mapping->dirty_pages, start_idx, end_idx, writeout_one_page);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#980: FILE: mm/filemap.c:439:
+	retval |= do_buffer_fdatasync(mapping, &mapping->clean_pages, start_idx, end_idx, writeout_one_page);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#981: FILE: mm/filemap.c:440:
+	retval |= do_buffer_fdatasync(mapping, &mapping->locked_pages, start_idx, end_idx, writeout_one_page);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#987: FILE: mm/filemap.c:443:
+	retval |= do_buffer_fdatasync(mapping, &mapping->dirty_pages, start_idx, end_idx, waitfor_one_page);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#988: FILE: mm/filemap.c:444:
+	retval |= do_buffer_fdatasync(mapping, &mapping->clean_pages, start_idx, end_idx, waitfor_one_page);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#989: FILE: mm/filemap.c:445:
+	retval |= do_buffer_fdatasync(mapping, &mapping->locked_pages, start_idx, end_idx, waitfor_one_page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1080: FILE: mm/filemap.c:563:
+static int __add_to_page_cache(struct page * page, struct address_space *mapping,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1089: FILE: mm/filemap.c:570:
+	if ((error = radix_tree_insert(&mapping->page_tree, offset, page)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1137: FILE: mm/filemap.c:592:
+	if ((error = __add_to_page_cache(page, mapping, offset)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1172: FILE: mm/filemap.c:624:
+^Iwhile (error == -ENOMEM) {  $

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1175: FILE: mm/filemap.c:627:
+		yield();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: mm/filemap.c:639:
+^I * or we are out of memory.  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1202: FILE: mm/filemap.c:740:
+struct page * find_get_page(struct address_space *mapping, unsigned long offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1249: FILE: mm/filemap.c:778:
+static struct page * FASTCALL(find_lock_page_helper(struct address_space *, unsigned long));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1250: FILE: mm/filemap.c:779:
+static struct page * find_lock_page_helper(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1251: FILE: mm/filemap.c:780:
+static struct page * find_lock_page_helper(struct address_space *mapping,
+					unsigned long offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1278: FILE: mm/filemap.c:812:
+struct page * find_lock_page(struct address_space *mapping, unsigned long offset)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1315: FILE: mm/filemap.c:839:
+				if (__add_to_page_cache (newpage, mapping, index) == 0) {

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1321: FILE: mm/filemap.c:844:
+			spin_unlock(&mapping->-i_shared_lock);
 			                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1343: FILE: mm/filemap.c:898:
+	if ( unlikely(add_to_page_cache(page, mapping, index)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1343: FILE: mm/filemap.c:898:
+	if ( unlikely(add_to_page_cache(page, mapping, index)) ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1399: FILE: mm/filemap.c:1363:
+		if (__add_to_page_cache (cached_page, mapping, index) < 0) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1400: FILE: mm/filemap.c:1364:
+			spin_unlock (&mapping->i_shared_lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1436: FILE: mm/filemap.c:2503:
+	struct page * page;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1560: FILE: mm/shmem.c:388:
+	if (!move_from_swap_cache (page, offset + idx, info->vfs_inode.i_mapping))

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#1605: FILE: mm/shmem.c:458:
+		UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1639: FILE: mm/shmem.c:539:
+		if (move_from_swap_cache (page, idx, mapping))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1655: FILE: mm/shmem.c:565:
+		while (add_to_page_cache (page, mapping, idx) < 0) {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1658: FILE: mm/shmem.c:568:
+			yield();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1673: FILE: mm/shmem.c:588:
+	spin_unlock (&info->lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1674: FILE: mm/shmem.c:589:
+	UnlockPage (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1675: FILE: mm/shmem.c:590:
+	page_cache_release (page);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1679: FILE: mm/shmem.c:594:
+	yield();

WARNING:INDENTED_LABEL: labels should not be indented
#1703: FILE: mm/swap_state.c:41:
+	page_tree:	RADIX_TREE_ROOT_INITIALIZER,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1704: FILE: mm/swap_state.c:42:
+	clean_pages:	LIST_HEAD_INIT(swapper_space.clean_pages),
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1704: FILE: mm/swap_state.c:42:
+	clean_pages:	LIST_HEAD_INIT(swapper_space.clean_pages),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1705: FILE: mm/swap_state.c:43:
+	dirty_pages:	LIST_HEAD_INIT(swapper_space.dirty_pages),
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1705: FILE: mm/swap_state.c:43:
+	dirty_pages:	LIST_HEAD_INIT(swapper_space.dirty_pages),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1706: FILE: mm/swap_state.c:44:
+	locked_pages:	LIST_HEAD_INIT(swapper_space.locked_pages),
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#1706: FILE: mm/swap_state.c:44:
+	locked_pages:	LIST_HEAD_INIT(swapper_space.locked_pages),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1707: FILE: mm/swap_state.c:45:
+	a_ops:		&swap_aops,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1707: FILE: mm/swap_state.c:45:
+	a_ops:		&swap_aops,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1708: FILE: mm/swap_state.c:46:
+	i_shared_lock:	SPIN_LOCK_UNLOCKED,
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#1708: FILE: mm/swap_state.c:46:
+	i_shared_lock:	SPIN_LOCK_UNLOCKED,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1757: FILE: mm/swap_state.c:144:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1770: FILE: mm/swap_state.c:157:
+		__remove_inode_page (page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: mm/swap_state.c:187:
+int move_from_swap_cache(struct page *page, unsigned long index,
+		struct address_space *mapping)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1806: FILE: mm/swap_state.c:193:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1826: FILE: mm/swap_state.c:213:
+		add_page_to_inode_queue (mapping, page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1883: FILE: mm/vmscan.c:146:
+			swap_free (entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1937: FILE: mm/vmscan.c:484:
+			UnlockPage (page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000479358.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 57 warnings, 36 checks, 1808 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000479358.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
