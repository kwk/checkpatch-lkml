WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#39: 
> cool! With the debugging code removed it doesnt look all that complex.  
                                           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
> a common codepath then it's useful to mark the condition via unlikely().  

WARNING:LINE_SPACING: Missing a blank line after declarations
#107: FILE: fs/proc/proc_misc.c:557:
+	int len;
+	extern int rcu_read_proc_data(char *page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#107: FILE: fs/proc/proc_misc.c:557:
+	extern int rcu_read_proc_data(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: fs/proc/proc_misc.c:567:
+	int len;
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#117: FILE: fs/proc/proc_misc.c:567:
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#127: FILE: fs/proc/proc_misc.c:577:
+	int len;
+	extern int rcu_read_proc_wqgp_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#127: FILE: fs/proc/proc_misc.c:577:
+	extern int rcu_read_proc_wqgp_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: fs/proc/proc_misc.c:587:
+	int len;
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#137: FILE: fs/proc/proc_misc.c:587:
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#179: FILE: include/linux/rcupdate.h:200:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/rcupdate.h:202:
+extern void rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/rcupdate.h:203:
+extern void rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/rcupdate.h:204:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/linux/rcupdate.h:296:
+extern void synchronize_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#220: FILE: include/linux/rcupdate.h:296:
+extern void synchronize_sched(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#307: FILE: kernel/rcupdate.c:536:
+};
+struct rcu_ctrlblk {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#310: FILE: kernel/rcupdate.c:539:
+};
+static struct rcu_data rcu_data;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#316: FILE: kernel/rcupdate.c:545:
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =
+	{ ATOMIC_INIT(0), ATOMIC_INIT(0) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#328: FILE: kernel/rcupdate.c:557:
+	if (current->rcu_read_lock_nesting++ == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#341: FILE: kernel/rcupdate.c:570:
+		if (unlikely(flipctr != (rcu_ctrlblk.batch & 0x1))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#378: FILE: kernel/rcupdate.c:607:
+	if (--current->rcu_read_lock_nesting == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->rcu_flipctr2"
#389: FILE: kernel/rcupdate.c:618:
+		if (unlikely(current->rcu_flipctr2 != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#402: FILE: kernel/rcupdate.c:631:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#410: FILE: kernel/rcupdate.c:639:
+		if (rcu_data.waitlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#422: FILE: kernel/rcupdate.c:651:
+		if (rcu_data.nextlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_data.donelist"
#462: FILE: kernel/rcupdate.c:691:
+	if (rcu_data.donelist == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#468: FILE: kernel/rcupdate.c:697:
+	if (unlikely(rcu_data.n_next_length >= RCU_NEXT_LIST_TRIGGER_LENGTH)) {
+		schedule_work(&synchronize_rcu_wq);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#483: FILE: kernel/rcupdate.c:712:
+	if (list == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: kernel/rcupdate.c:754:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#525: FILE: kernel/rcupdate.c:754:
+	if (unlikely(flipctr != rcu_data.batch)) {
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: kernel/rcupdate.c:792:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: kernel/rcupdate.c:819:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#590: FILE: kernel/rcupdate.c:819:
+	if (unlikely(rcu_data.batch != oldbatch)) {
+		

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#621: FILE: kernel/rcupdate.c:850:
+	if (unlikely((rcu_data.batch - oldbatch) >= 2)) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#631: FILE: kernel/rcupdate.c:860:
+/*&&&&*/printk("Exiting synchronize_rcu()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'synchronize_rcu', this function's name, in a string
#631: FILE: kernel/rcupdate.c:860:
+/*&&&&*/printk("Exiting synchronize_rcu()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#658: FILE: kernel/rcupdate.c:887:
+synchronize_sched(void)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#663: FILE: kernel/rcupdate.c:892:
+	if (sched_getaffinity(0, &oldmask) < 0) {
+		oldmask = cpu_possible_map; 
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: kernel/rcupdate.c:893:
+^I^Ioldmask = cpu_possible_map; $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.donelist"
#676: FILE: kernel/rcupdate.c:905:
+	return (rcu_data.donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#677: FILE: kernel/rcupdate.c:906:
+		rcu_data.waitlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#678: FILE: kernel/rcupdate.c:907:
+		rcu_data.nextlist != NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#683: FILE: kernel/rcupdate.c:912:
+/*&&&&*/printk("WARNING: experimental RCU implementation.\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#772: FILE: kernel/rcupdate.c:1001:
+EXPORT_SYMBOL(call_rcu); /* WARNING: GPL-only in April 2006. */

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#774: FILE: kernel/rcupdate.c:1003:
+EXPORT_SYMBOL_GPL(synchronize_sched);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#775: FILE: kernel/rcupdate.c:1004:
+EXPORT_SYMBOL(rcu_read_lock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#776: FILE: kernel/rcupdate.c:1005:
+EXPORT_SYMBOL(rcu_read_unlock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#777: FILE: kernel/rcupdate.c:1006:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: Removal in April 2006. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168763.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 23 warnings, 21 checks, 698 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168763.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
