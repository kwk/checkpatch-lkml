WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
[patch 1/6] statistics infrastructure - prerequisite: scatter-gather ringbuffer

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: include/linux/sgrb.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#51: FILE: include/linux/sgrb.h:2:
+ * include/linux/sgrb.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#72: FILE: include/linux/sgrb.h:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#73: FILE: include/linux/sgrb.h:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#79: FILE: include/linux/sgrb.h:30:
+#define SGRB_H_REVISION "$Revision: 1.2 $"

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: include/linux/sgrb.h:75:
+static inline void * sgrb_entry(struct sgrb_ptr *a)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: include/linux/sgrb.h:80:
+extern struct sgrb_seg * sgrb_seg_find(struct list_head *, int, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/sgrb.h:80:
+extern struct sgrb_seg * sgrb_seg_find(struct list_head *, int, gfp_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/sgrb.h:81:
+extern void sgrb_seg_release_all(struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#130: FILE: include/linux/sgrb.h:81:
+extern void sgrb_seg_release_all(struct list_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/sgrb.h:83:
+extern int sgrb_alloc(struct sgrb *, int, int, int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#132: FILE: include/linux/sgrb.h:83:
+extern int sgrb_alloc(struct sgrb *, int, int, int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#132: FILE: include/linux/sgrb.h:83:
+extern int sgrb_alloc(struct sgrb *, int, int, int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#132: FILE: include/linux/sgrb.h:83:
+extern int sgrb_alloc(struct sgrb *, int, int, int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#132: FILE: include/linux/sgrb.h:83:
+extern int sgrb_alloc(struct sgrb *, int, int, int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#132: FILE: include/linux/sgrb.h:83:
+extern int sgrb_alloc(struct sgrb *, int, int, int, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/sgrb.h:84:
+extern void sgrb_release(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#133: FILE: include/linux/sgrb.h:84:
+extern void sgrb_release(struct sgrb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/sgrb.h:85:
+extern void sgrb_reset(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#134: FILE: include/linux/sgrb.h:85:
+extern void sgrb_reset(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: include/linux/sgrb.h:87:
+extern void * sgrb_produce_overwrite(struct sgrb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/sgrb.h:87:
+extern void * sgrb_produce_overwrite(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#136: FILE: include/linux/sgrb.h:87:
+extern void * sgrb_produce_overwrite(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: include/linux/sgrb.h:88:
+extern void * sgrb_produce_nooverwrite(struct sgrb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/sgrb.h:88:
+extern void * sgrb_produce_nooverwrite(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#137: FILE: include/linux/sgrb.h:88:
+extern void * sgrb_produce_nooverwrite(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: include/linux/sgrb.h:89:
+extern void * sgrb_consume_delete(struct sgrb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/sgrb.h:89:
+extern void * sgrb_consume_delete(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#138: FILE: include/linux/sgrb.h:89:
+extern void * sgrb_consume_delete(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: include/linux/sgrb.h:90:
+extern void * sgrb_consume_nodelete(struct sgrb *, struct sgrb_ptr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/sgrb.h:90:
+extern void * sgrb_consume_nodelete(struct sgrb *, struct sgrb_ptr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#139: FILE: include/linux/sgrb.h:90:
+extern void * sgrb_consume_nodelete(struct sgrb *, struct sgrb_ptr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb_ptr *' should also have an identifier name
#139: FILE: include/linux/sgrb.h:90:
+extern void * sgrb_consume_nodelete(struct sgrb *, struct sgrb_ptr *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#172: FILE: lib/sgrb.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#173: FILE: lib/sgrb.c:2:
+ * lib/sgrb.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#194: FILE: lib/sgrb.c:23:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#195: FILE: lib/sgrb.c:24:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#198: FILE: lib/sgrb.c:27:
+#define SGRB_C_REVISION "$Revision: 1.2 $"

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: lib/sgrb.c:32:
+static struct sgrb_seg * sgrb_seg_alloc(struct list_head *lh, int size,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seg)...) over kmalloc(sizeof(struct sgrb_seg)...)
#208: FILE: lib/sgrb.c:37:
+	seg = kmalloc(sizeof(struct sgrb_seg), gfp);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#231: FILE: lib/sgrb.c:60:
+struct sgrb_seg * sgrb_seg_find(struct list_head *lh, int size, gfp_t gfp)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: lib/sgrb.c:204:
+ * ^Ispin_lock(lock_for_this_ringbuffer);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#376: FILE: lib/sgrb.c:205:
+ * ^Ientry = sgrb_produce_overwrite(&ringbuffer);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#382: FILE: lib/sgrb.c:211:
+void * sgrb_produce_overwrite(struct sgrb *rb)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#406: FILE: lib/sgrb.c:235:
+ * ^Ispin_lock(lock_for_this_ringbuffer);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#407: FILE: lib/sgrb.c:236:
+ * ^Ientry = sgrb_produce_nooverwrite(&ringbuffer);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#415: FILE: lib/sgrb.c:244:
+void * sgrb_produce_nooverwrite(struct sgrb *rb)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#439: FILE: lib/sgrb.c:268:
+ * ^Ispin_lock(lock_for_this_ringbuffer);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: lib/sgrb.c:269:
+ * ^Ientry = sgrb_consume_delete(&ringbuffer);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#447: FILE: lib/sgrb.c:276:
+void * sgrb_consume_delete(struct sgrb *rb)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: lib/sgrb.c:307:
+ * ^Ispin_lock(lock_for_this_ringbuffer);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: lib/sgrb.c:308:
+ * ^Isgrb_ptr_copy(&i, &ringbuffer.first);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: lib/sgrb.c:309:
+ * ^Iwhile (entry = sgrb_consume_nodelete(&ringbuffer, &i))$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#487: FILE: lib/sgrb.c:316:
+void * sgrb_consume_nodelete(struct sgrb *rb, struct sgrb_ptr *pos)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 29 warnings, 10 checks, 439 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
