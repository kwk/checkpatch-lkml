WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
page_alloc.c contains a large amount of memory initialisation code. This patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: mm/mem_init.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#54: FILE: mm/mem_init.c:2:
+ * mm/mem_init.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#55: FILE: mm/mem_init.c:3:
+ * Initialises the architecture independant view of memory. pgdats, zones, etc
                                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: mm/mem_init.c:37:
+  struct node_active_region __initdata early_node_map[MAX_ACTIVE_REGIONS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: mm/mem_init.c:38:
+  unsigned long __initdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: mm/mem_init.c:39:
+  unsigned long __initdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: mm/mem_init.c:48:
+static int __meminit build_zonelists_node(pg_data_t *pgdat,
+			struct zonelist *zonelist, int nr_zones, int zone_type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: mm/mem_init.c:52:
+	BUG_ON(zone_type > ZONE_HIGHMEM);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: mm/mem_init.c:58:
+			BUG_ON(zone_type > ZONE_NORMAL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: mm/mem_init.c:72:
+	int res = ZONE_NORMAL;
+	if (zone_bits & (__force int)__GFP_HIGHMEM)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __meminitdata should be placed after node_load[MAX_NUMNODES]
#135: FILE: mm/mem_init.c:83:
+static int __meminitdata node_load[MAX_NUMNODES];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#181: FILE: mm/mem_init.c:129:
+		val *= (MAX_NODE_LOAD*MAX_NUMNODES);
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#236: FILE: mm/mem_init.c:184:
+			for (j = 0; zonelist->zones[j] != NULL; j++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zonelist->zones[j]"
#236: FILE: mm/mem_init.c:184:
+			for (j = 0; zonelist->zones[j] != NULL; j++);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: mm/mem_init.c:188:
+^I ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, k);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: mm/mem_init.c:188:
+^I ^I^Ij = build_zonelists_node(NODE_DATA(node), zonelist, j, k);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: mm/mem_init.c:208:
+ ^I^Ij = build_zonelists_node(pgdat, zonelist, j, k);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: mm/mem_init.c:208:
+ ^I^Ij = build_zonelists_node(pgdat, zonelist, j, k);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: mm/mem_init.c:208:
+ ^I^Ij = build_zonelists_node(pgdat, zonelist, j, k);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: mm/mem_init.c:209:
+ ^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: mm/mem_init.c:209:
+ ^I^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: mm/mem_init.c:209:
+ ^I^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: mm/mem_init.c:210:
+ ^I^I * Now we build the zonelist so that it contains the zones$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: mm/mem_init.c:210:
+ ^I^I * Now we build the zonelist so that it contains the zones$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: mm/mem_init.c:211:
+ ^I^I * of all the other nodes.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: mm/mem_init.c:211:
+ ^I^I * of all the other nodes.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: mm/mem_init.c:212:
+ ^I^I * We don't want to pressure a particular node, so when$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: mm/mem_init.c:212:
+ ^I^I * We don't want to pressure a particular node, so when$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: mm/mem_init.c:213:
+ ^I^I * building the zones for node N, we make sure that the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: mm/mem_init.c:213:
+ ^I^I * building the zones for node N, we make sure that the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: mm/mem_init.c:214:
+ ^I^I * zones coming right after the local ones are those from$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#266: FILE: mm/mem_init.c:214:
+ ^I^I * zones coming right after the local ones are those from$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: mm/mem_init.c:215:
+ ^I^I * node N+1 (modulo N)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: mm/mem_init.c:215:
+ ^I^I * node N+1 (modulo N)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: mm/mem_init.c:216:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: mm/mem_init.c:216:
+ ^I^I */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: mm/mem_init.c:238:
+	int nid;
+	for_each_online_node(nid)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#302: FILE: mm/mem_init.c:250:
+		/* we have to stop all cpus to guaranntee there is no user
+		   of zonelist */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#302: FILE: mm/mem_init.c:250:
+		   of zonelist */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#303: FILE: mm/mem_init.c:251:
+		stop_machine_run(__build_all_zonelists, NULL, NR_CPUS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#307: FILE: mm/mem_init.c:255:
+	printk("Built %i zonelists\n", num_online_nodes());

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#309: FILE: mm/mem_init.c:257:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#377: FILE: mm/mem_init.c:325:
+#define LONG_ALIGN(x) (((x)+(sizeof(long))-1)&~((sizeof(long))-1))
                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#377: FILE: mm/mem_init.c:325:
+#define LONG_ALIGN(x) (((x)+(sizeof(long))-1)&~((sizeof(long))-1))
                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#377: FILE: mm/mem_init.c:325:
+#define LONG_ALIGN(x) (((x)+(sizeof(long))-1)&~((sizeof(long))-1))
                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#377: FILE: mm/mem_init.c:325:
+#define LONG_ALIGN(x) (((x)+(sizeof(long))-1)&~((sizeof(long))-1))
                                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: mm/mem_init.c:338:
+void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,
+		unsigned long start_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: mm/mem_init.c:362:
+void zone_init_free_lists(struct pglist_data *pgdat, struct zone *zone,
+				unsigned long size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: mm/mem_init.c:365:
+	int order;
+	for (order = 0; order < MAX_ORDER ; order++) {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#423: FILE: mm/mem_init.c:371:
+#define ZONETABLE_INDEX(x, zone_nr)	((x << ZONES_SHIFT) | zone_nr)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_nr' may be better as '(zone_nr)' to avoid precedence issues
#423: FILE: mm/mem_init.c:371:
+#define ZONETABLE_INDEX(x, zone_nr)	((x << ZONES_SHIFT) | zone_nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: mm/mem_init.c:373:
+void zonetable_add(struct zone *zone, int nid, int zid, unsigned long pfn,
+		unsigned long size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: mm/mem_init.c:403:
+ ^Iif (system_state == SYSTEM_BOOTING) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#455: FILE: mm/mem_init.c:403:
+ ^Iif (system_state == SYSTEM_BOOTING) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: mm/mem_init.c:403:
+ ^Iif (system_state == SYSTEM_BOOTING) {$

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#469: FILE: mm/mem_init.c:417:
+		zone->wait_table = (wait_queue_head_t *)vmalloc(alloc_size);

ERROR:SPACING: space required before the open parenthesis '('
#474: FILE: mm/mem_init.c:422:
+	for(i = 0; i < zone->wait_table_hash_nr_entries; ++i)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: mm/mem_init.c:433:
+static void setup_pagelist_highmark(struct per_cpu_pageset *p,
+				unsigned long high)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#491: FILE: mm/mem_init.c:439:
+	pcp->batch = max(1UL, high/4);
 	                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#492: FILE: mm/mem_init.c:440:
+	if ((high/4) > (PAGE_SHIFT * 8))
 	         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: mm/mem_init.c:450:
+int percpu_pagelist_fraction_sysctl_handler(ctl_table *table, int write,
+	struct file *file, void __user *buffer, size_t *length, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#514: FILE: mm/mem_init.c:462:
+			unsigned long  high;
+			high = zone->present_pages / percpu_pagelist_fraction;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#548: FILE: mm/mem_init.c:496:
+	batch = (1 << (fls(batch + batch/2)-1)) - 1;
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#548: FILE: mm/mem_init.c:496:
+	batch = (1 << (fls(batch + batch/2)-1)) - 1;
 	                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#568: FILE: mm/mem_init.c:516:
+	pcp->batch = max(1UL, batch/2);
 	                           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#601: FILE: mm/mem_init.c:549:
+	for_each_zone(zone) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: mm/mem_init.c:551:
+		zone_pcp(zone, cpu) = kmalloc_node(sizeof(struct per_cpu_pageset),
+					 GFP_KERNEL, cpu_to_node(cpu));

ERROR:CODE_INDENT: code indent should use tabs where possible
#611: FILE: mm/mem_init.c:559:
+^I^I^I ^I(zone->present_pages / percpu_pagelist_fraction));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#611: FILE: mm/mem_init.c:559:
+^I^I^I ^I(zone->present_pages / percpu_pagelist_fraction));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: mm/mem_init.c:559:
+			setup_pagelist_highmark(zone_pcp(zone, cpu),
+			 	(zone->present_pages / percpu_pagelist_fraction));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: mm/mem_init.c:586:
+static int pageset_cpuup_callback(struct notifier_block *nfb,
+		unsigned long action,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#644: FILE: mm/mem_init.c:592:
+	switch (action) {
+		case CPU_UP_PREPARE:
[...]
+		case CPU_UP_CANCELED:
+		case CPU_DEAD:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#660: FILE: mm/mem_init.c:608:
+static struct notifier_block pageset_notifier =
+	{ &pageset_cpuup_callback, NULL, 0 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#671: FILE: mm/mem_init.c:619:
+	BUG_ON(err);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#681: FILE: mm/mem_init.c:629:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: mm/mem_init.c:633:
+		setup_pageset(&boot_pageset[cpu],0);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#687: FILE: mm/mem_init.c:635:
+		setup_pageset(zone_pcp(zone,cpu), batch);
 		                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#691: FILE: mm/mem_init.c:639:
+		printk(KERN_DEBUG "  %s zone: %lu pages, LIFO batch:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: mm/mem_init.c:640:
+		printk(KERN_DEBUG "  %s zone: %lu pages, LIFO batch:%lu\n",
+			zone->name, zone->present_pages, batch);

WARNING:LINE_SPACING: Missing a blank line after declarations
#701: FILE: mm/mem_init.c:649:
+	int ret;
+	ret = zone_wait_table_init(zone, size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: mm/mem_init.c:668:
+	int i;
+	for (i = 0; early_node_map[i].end_pfn; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start_pfn <= pfn'
#748: FILE: mm/mem_init.c:696:
+		if ((start_pfn <= pfn) && (pfn < end_pfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < end_pfn'
#748: FILE: mm/mem_init.c:696:
+		if ((start_pfn <= pfn) && (pfn < end_pfn))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#756: FILE: mm/mem_init.c:704:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); \
+				i != MAX_ACTIVE_REGIONS; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nid' - possible side-effects?
#756: FILE: mm/mem_init.c:704:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); \
+				i != MAX_ACTIVE_REGIONS; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: mm/mem_init.c:710:
+void __init free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#765: FILE: mm/mem_init.c:713:
+	unsigned int i;
+	for_each_active_range_index_in_nid(i, nid) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#768: FILE: mm/mem_init.c:716:
+		unsigned long end_pfn = early_node_map[i].end_pfn;
+		if (early_node_map[i].start_pfn >= max_low_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: mm/mem_init.c:724:
+		free_bootmem_node(NODE_DATA(early_node_map[i].nid),
+				PFN_PHYS(early_node_map[i].start_pfn),

WARNING:LINE_SPACING: Missing a blank line after declarations
#784: FILE: mm/mem_init.c:732:
+	unsigned int i;
+	for_each_active_range_index_in_nid(i, nid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: mm/mem_init.c:734:
+		memory_present(early_node_map[i].nid,
+				early_node_map[i].start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: mm/mem_init.c:739:
+void __init get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#803: FILE: mm/mem_init.c:751:
+		printk(KERN_WARNING "Node %u active with no memory\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: mm/mem_init.c:757:
+unsigned long __init zone_present_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: mm/mem_init.c:781:
+unsigned long __init __absent_pages_in_range(int nid,
+				unsigned long range_start_pfn,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#849: FILE: mm/mem_init.c:797:
+			i = next_active_region_index_in_nid(i, nid)) {
+

WARNING:TYPO_SPELLING: 'cound' may be misspelled - perhaps 'could'?
#858: FILE: mm/mem_init.c:806:
+		/* Update the hole size cound and move on */
 		                        ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: mm/mem_init.c:808:
+			BUG_ON(prev_end_pfn > start_pfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: mm/mem_init.c:818:
+unsigned long __init absent_pages_in_range(unsigned long start_pfn,
+							unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: mm/mem_init.c:824:
+unsigned long __init zone_absent_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: mm/mem_init.c:833:
+static inline unsigned long zone_present_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: mm/mem_init.c:840:
+static inline unsigned long zone_absent_pages_in_node(int nid,
+						unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: mm/mem_init.c:851:
+static void __init calculate_node_totalpages(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#920: FILE: mm/mem_init.c:868:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#921: FILE: mm/mem_init.c:869:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,
+							realtotalpages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#931: FILE: mm/mem_init.c:879:
+static void __meminit free_area_init_core(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#963: FILE: mm/mem_init.c:911:
+		zone->temp_priority = zone->prev_priority = DEF_PRIORITY;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#978: FILE: mm/mem_init.c:926:
+		BUG_ON(ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: mm/mem_init.c:960:
+void __meminit free_area_init_node(int nid, struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long node_start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: mm/mem_init.c:974:
+void __init add_active_range(unsigned int nid, unsigned long start_pfn,
+						unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1037: FILE: mm/mem_init.c:985:
+		if (start_pfn >= early_node_map[i].start_pfn &&
+				end_pfn <= early_node_map[i].end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: mm/mem_init.c:990:
+		if (start_pfn <= early_node_map[i].end_pfn &&
+				end_pfn > early_node_map[i].end_pfn) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: mm/mem_init.c:997:
+		if (start_pfn < early_node_map[i].end_pfn &&
+				end_pfn >= early_node_map[i].start_pfn) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1057: FILE: mm/mem_init.c:1005:
+		printk(KERN_ERR "Too many memory regions, truncating\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1067: FILE: mm/mem_init.c:1015:
+void __init shrink_active_range(unsigned int nid, unsigned long old_end_pfn,
+						unsigned long new_end_pfn)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init remove_all_active_ranges() should probably be void __init remove_all_active_ranges(void)
#1080: FILE: mm/mem_init.c:1028:
+void __init remove_all_active_ranges()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1104: FILE: mm/mem_init.c:1052:
+	size_t num = 0;
+	while (early_node_map[num].end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1108: FILE: mm/mem_init.c:1056:
+	sort(early_node_map, num, sizeof(struct node_active_region),
+						cmp_node_active_region, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1120: FILE: mm/mem_init.c:1068:
+	printk(KERN_WARNING "Could not find start_pfn for node %lu\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1141: FILE: mm/mem_init.c:1089:
+void __init free_area_init_nodes(unsigned long arch_max_dma_pfn,
+				unsigned long arch_max_dma32_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1150: FILE: mm/mem_init.c:1098:
+	memset(arch_zone_lowest_possible_pfn, 0,
+				sizeof(arch_zone_lowest_possible_pfn));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: mm/mem_init.c:1100:
+	memset(arch_zone_highest_possible_pfn, 0,
+				sizeof(arch_zone_highest_possible_pfn));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1161: FILE: mm/mem_init.c:1109:
+			arch_zone_highest_possible_pfn[zone_index-1];
 			                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1169: FILE: mm/mem_init.c:1117:
+		pg_data_t *pgdat = NODE_DATA(nid);
+		free_area_init_node(nid, pgdat, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: mm/mem_init.c:1118:
+		free_area_init_node(nid, pgdat, NULL,
+				find_min_pfn_for_node(nid), NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081073.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 51 warnings, 56 checks, 2268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081073.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
