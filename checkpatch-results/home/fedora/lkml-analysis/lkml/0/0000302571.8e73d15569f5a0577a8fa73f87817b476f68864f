WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#30: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#72: FILE: ipc/mqueue.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#80: FILE: ipc/mqueue.c:9:
+ * ^I^I^I    Manfred Spraul^I    (manfred@colorfullife.com)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#108: FILE: ipc/mqueue.c:37:
+#define NP_NONE		((void*)NOTIFY_NONE)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#109: FILE: ipc/mqueue.c:38:
+#define NP_WOKENUP	((void*)NOTIFY_WOKENUP)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#110: FILE: ipc/mqueue.c:39:
+#define NP_REMOVED	((void*)NOTIFY_REMOVED)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: ipc/mqueue.c:41:
+#define FS_MQUEUE ^I1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: ipc/mqueue.c:42:
+#define CTL_QUEUESMAX ^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#114: FILE: ipc/mqueue.c:43:
+#define CTL_MSGMAX ^I3$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#115: FILE: ipc/mqueue.c:44:
+#define CTL_MSGSIZEMAX ^I4$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: ipc/mqueue.c:48:
+#define DFLT_MSGMAX ^I40^I/* max number of messages in each queue */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#120: FILE: ipc/mqueue.c:49:
+#define HARD_MSGMAX ^I(131072/sizeof(void*))$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#120: FILE: ipc/mqueue.c:49:
+#define HARD_MSGMAX 	(131072/sizeof(void*))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#120: FILE: ipc/mqueue.c:49:
+#define HARD_MSGMAX 	(131072/sizeof(void*))
                     	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#147: FILE: ipc/mqueue.c:76:
+static struct inode_operations mqueue_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#148: FILE: ipc/mqueue.c:77:
+static struct file_operations mqueue_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#149: FILE: ipc/mqueue.c:78:
+static struct file_operations mqueue_notify_fops;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: ipc/mqueue.c:87:
+static unsigned int queues_max ^I= DFLT_QUEUESMAX;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: ipc/mqueue.c:88:
+static unsigned int msg_max ^I= DFLT_MSGMAX;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: ipc/mqueue.c:91:
+static struct ctl_table_header * mq_sysctl_table;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#180: FILE: ipc/mqueue.c:109:
+		inode->i_mtime = inode->i_ctime = inode->i_atime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#216: FILE: ipc/mqueue.c:145:
+	inode = mqueue_get_inode(sb, S_IFDIR | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#222: FILE: ipc/mqueue.c:151:
+		iput(inode);
 		^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#236: FILE: ipc/mqueue.c:165:
+static void init_once(void *foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:SPACING: No space is necessary after a cast
#238: FILE: ipc/mqueue.c:167:
+	struct mqueue_inode_info *p = (struct mqueue_inode_info *) foo;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#283: FILE: ipc/mqueue.c:212:
+static int mqueue_create(struct inode *dir, struct dentry *dentry, int mode, struct nameidata *nd)
                                                                                                ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#312: FILE: ipc/mqueue.c:241:
+static int mqueue_flush_file(struct file *filp)
                                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: ipc/mqueue.c:255:
+static void wq_add(struct mqueue_inode_info *info, int sr,
+			struct ext_wait_queue *ewp)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#380: FILE: ipc/mqueue.c:309:
+		printk(KERN_WARNING "mqueue: Spurious wakeup in wq_sleep()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wq_sleep', this function's name, in a string
#380: FILE: ipc/mqueue.c:309:
+		printk(KERN_WARNING "mqueue: Spurious wakeup in wq_sleep()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#390: FILE: ipc/mqueue.c:319:
+static struct ext_wait_queue *wq_get_first_waiter(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#431: FILE: ipc/mqueue.c:360:
+	 * synchronously. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#447: FILE: ipc/mqueue.c:376:
+			info->notify_filp->private_data = (void*)NP_WOKENUP;

CHECK:BRACES: braces {} should be used on all arms of this statement
#460: FILE: ipc/mqueue.c:389:
+	if (u_arg) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#465: FILE: ipc/mqueue.c:394:
+		if (unlikely(ts.tv_nsec < 0 || ts.tv_sec < 0
+			|| ts.tv_nsec >= NSEC_PER_SEC))

CHECK:BRACES: Unbalanced braces around else statement
#479: FILE: ipc/mqueue.c:408:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#485: FILE: ipc/mqueue.c:414:
+static unsigned int mqueue_notify_poll(struct file *filp, struct poll_table_struct *poll_tab)
                                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#490: FILE: ipc/mqueue.c:419:
+	poll_wait(filp, &info->wait_q, poll_tab);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#499: FILE: ipc/mqueue.c:428:
+static ssize_t mqueue_notify_read(struct file *filp, char __user *buf, size_t count, loff_t *ppos)
                                                ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#511: FILE: ipc/mqueue.c:440:
+		DEFINE_WAIT(wait);
+		if (filp->f_flags & O_NONBLOCK) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: ipc/mqueue.c:471:
+static struct file *do_create(struct dentry *dir, struct dentry *dentry,
+	     int oflag, mode_t mode, struct mq_attr __user *u_attr)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#544: FILE: ipc/mqueue.c:473:
+	struct file *filp;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#551: FILE: ipc/mqueue.c:480:
+	if (u_attr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#568: FILE: ipc/mqueue.c:497:
+	msgs = (struct msg_msg **)kmalloc(attr.mq_maxmsg * sizeof(struct msg_msg *), GFP_KERNEL);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#575: FILE: ipc/mqueue.c:504:
+		if (msgs)
+			kfree(msgs);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#586: FILE: ipc/mqueue.c:515:
+	filp = dentry_open(dentry, mqueue_mnt, oflag);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#587: FILE: ipc/mqueue.c:516:
+	if (!IS_ERR(filp))
 	            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#590: FILE: ipc/mqueue.c:519:
+	return filp;
 	       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#596: FILE: ipc/mqueue.c:525:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#605: FILE: ipc/mqueue.c:534:
+	filp = dentry_open(dentry, mqueue_mnt, oflag);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#607: FILE: ipc/mqueue.c:536:
+	if (!IS_ERR(filp))
 	            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#610: FILE: ipc/mqueue.c:539:
+	return filp;
 	       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: ipc/mqueue.c:543:
+asmlinkage long sys_mq_open(const char __user *u_name, int oflag, mode_t mode,
+	struct mq_attr __user *u_attr)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#617: FILE: ipc/mqueue.c:546:
+	struct file *filp;
 	             ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#621: FILE: ipc/mqueue.c:550:
+	if (IS_ERR(name = getname(u_name)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#636: FILE: ipc/mqueue.c:565:
+	if (oflag & O_CREAT) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#638: FILE: ipc/mqueue.c:567:
+			filp = (oflag & O_EXCL) ? ERR_PTR(-EEXIST) : do_open(dentry, oflag);
 			^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#640: FILE: ipc/mqueue.c:569:
+			filp = do_create(mqueue_mnt->mnt_root, dentry, oflag, mode, u_attr);
 			^^^^

CHECK:BRACES: Unbalanced braces around else statement
#642: FILE: ipc/mqueue.c:571:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#643: FILE: ipc/mqueue.c:572:
+		filp = (dentry->d_inode) ? do_open(dentry, oflag) : ERR_PTR(-ENOENT);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#647: FILE: ipc/mqueue.c:576:
+	if (IS_ERR(filp)) {
 	           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#648: FILE: ipc/mqueue.c:577:
+		error = PTR_ERR(filp);
 		                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#652: FILE: ipc/mqueue.c:581:
+	fd_install(fd, filp);
 	               ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#706: FILE: ipc/mqueue.c:635:
+		iput(inode);
 		^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#712: FILE: ipc/mqueue.c:641:
+ * queues terminology. It is little bit different. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#715: FILE: ipc/mqueue.c:644:
+ * sys_mq_timedreceive() (without inserting message into a queue). */

WARNING:MEMORY_BARRIER: memory barrier without comment
#724: FILE: ipc/mqueue.c:653:
+	wmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#729: FILE: ipc/mqueue.c:658:
+ * gets its message and put to the queue (we have one free place for sure). */

WARNING:MEMORY_BARRIER: memory barrier without comment
#741: FILE: ipc/mqueue.c:670:
+	wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: ipc/mqueue.c:675:
+asmlinkage long sys_mq_timedsend(mqd_t mqdes, const char __user *u_msg_ptr,
+	size_t msg_len, unsigned int msg_prio, const struct timespec __user *u_abs_timeout)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#748: FILE: ipc/mqueue.c:677:
+	struct file *filp;
 	             ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#754: FILE: ipc/mqueue.c:683:
+ ^Ilong timeout;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#754: FILE: ipc/mqueue.c:683:
+ ^Ilong timeout;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: ipc/mqueue.c:683:
+ ^Ilong timeout;$

CHECK:SPACING: No space is necessary after a cast
#757: FILE: ipc/mqueue.c:686:
+	if (unlikely(msg_prio >= (unsigned long) MQ_PRIO_MAX))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#760: FILE: ipc/mqueue.c:689:
+	if (unlikely((timeout = prepare_timeout(u_abs_timeout)) < 0))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#764: FILE: ipc/mqueue.c:693:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#765: FILE: ipc/mqueue.c:694:
+	if (unlikely(!filp))
 	              ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#782: FILE: ipc/mqueue.c:711:
+	 * existing queues. */

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#784: FILE: ipc/mqueue.c:713:
+	if (unlikely(IS_ERR(msg_ptr))) {

CHECK:SPACING: No space is necessary after a cast
#799: FILE: ipc/mqueue.c:728:
+			wait.msg = (void *) msg_ptr;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#814: FILE: ipc/mqueue.c:743:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#819: FILE: ipc/mqueue.c:748:
+	fput(filp);
 	     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: ipc/mqueue.c:754:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char __user *u_msg_ptr,
+	size_t msg_len, unsigned int __user *u_msg_prio,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#831: FILE: ipc/mqueue.c:760:
+	struct file *filp;
 	             ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#836: FILE: ipc/mqueue.c:765:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#837: FILE: ipc/mqueue.c:766:
+	if (unlikely((timeout = prepare_timeout(u_abs_timeout)) < 0))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#841: FILE: ipc/mqueue.c:770:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#842: FILE: ipc/mqueue.c:771:
+	if (unlikely(!filp))
 	              ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#874: FILE: ipc/mqueue.c:803:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: ipc/mqueue.c:814:
+		if ((u_msg_prio && put_user(msg_ptr->m_type, u_msg_prio)) ||
+			store_msg(u_msg_ptr, msg_ptr, msg_ptr->m_ts)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#891: FILE: ipc/mqueue.c:820:
+	fput(filp);
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#903: FILE: ipc/mqueue.c:832:
+	struct file *filp, *nfilp;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_notification"
#908: FILE: ipc/mqueue.c:837:
+	if (u_notification == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: ipc/mqueue.c:848:
+		if (notification.sigev_notify == SIGEV_SIGNAL &&
+			(notification.sigev_signo < 0 || notification.sigev_signo > _NSIG)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#925: FILE: ipc/mqueue.c:854:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#926: FILE: ipc/mqueue.c:855:
+	if (!filp)
 	     ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#961: FILE: ipc/mqueue.c:890:
+			inode->i_atime = inode->i_ctime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#973: FILE: ipc/mqueue.c:902:
+		inode->i_atime = inode->i_ctime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#979: FILE: ipc/mqueue.c:908:
+		inode->i_atime = inode->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#986: FILE: ipc/mqueue.c:915:
+	fput(filp);
 	     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#992: FILE: ipc/mqueue.c:921:
+asmlinkage long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *u_mqstat,
+	struct mq_attr __user *u_omqstat)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#996: FILE: ipc/mqueue.c:925:
+	struct file *filp;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_mqstat"
#1000: FILE: ipc/mqueue.c:929:
+	if (u_mqstat != NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1006: FILE: ipc/mqueue.c:935:
+	filp = fget(mqdes);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1007: FILE: ipc/mqueue.c:936:
+	if (!filp)
 	     ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1025: FILE: ipc/mqueue.c:954:
+		inode->i_atime = inode->i_ctime = CURRENT_TIME;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_omqstat"
#1031: FILE: ipc/mqueue.c:960:
+	if (u_omqstat != NULL && copy_to_user(u_omqstat, &omqstat, sizeof(struct mq_attr)))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1035: FILE: ipc/mqueue.c:964:
+	fput(filp);
 	     ^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1040: FILE: ipc/mqueue.c:969:
+static struct inode_operations mqueue_dir_inode_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1046: FILE: ipc/mqueue.c:975:
+static struct file_operations mqueue_file_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1050: FILE: ipc/mqueue.c:979:
+static struct file_operations mqueue_notify_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1055: FILE: ipc/mqueue.c:984:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: ipc/mqueue.c:1061:
+	mqueue_inode_cachep = kmem_cache_create("mqueue_inode_cache",
+		sizeof(struct mqueue_inode_info), 0, SLAB_HWCACHE_ALIGN, init_once, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mqueue_inode_cachep"
#1133: FILE: ipc/mqueue.c:1062:
+	if (mqueue_inode_cachep == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1146: FILE: ipc/mqueue.c:1075:
+	if (IS_ERR(mqueue_mnt = kern_mount(&mqueue_fs_type))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1163: FILE: ipc/mqueue.c:1092:
+		printk(KERN_INFO "mqueue_inode_cache: not all structures were freed\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1167: FILE: ipc/mqueue.c:1096:
+__initcall(init_mqueue_fs);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1248: FILE: fs/Kconfig:900:
+config POSIX_MQUEUE
+	bool "POSIX Message Queues"
+	---help---
+	  POSIX variant of message queues is a part of IPC. In POSIX message
+	  queues every message has a priority which decides about succession
+	  of receiving it by a process. If you want to compile and run
+	  programs written e.g. for Solaris with use of its POSIX message
+	  queues (functions mq_*) say Y here. To use this feature you will
+	  also need mqueue library, available from
+	  <http://www.mat.uni.torun.pl/~wrona/posix_ipc/>
+
+	  POSIX message queues are visible as a filesystem called 'mqueue'
+	  and can be mounted somewhere if you want to do filesystem
+	  operations on message queues.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1291: FILE: include/asm-generic/siginfo.h:142:
+#define SI_MESGQ __SI_CODE(__SI_MESGQ,-3) /* sent by real time mesq state change */
                                      ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1291: FILE: include/asm-generic/siginfo.h:142:
+#define SI_MESGQ __SI_CODE(__SI_MESGQ,-3) /* sent by real time mesq state change */
                                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000302571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 74 warnings, 33 checks, 1244 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000302571.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
