WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: include/linux/spinlock.h:92:
+  extern void __spin_lock_init(spinlock_t *lock, const char *name,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/spinlock.h:92:
+  extern void __spin_lock_init(spinlock_t *lock, const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#108: FILE: include/linux/spinlock.h:106:
+# define spin_lock_init_static(lock)				\
+	__spin_lock_init((lock), #lock,				\
+			 (struct lockdep_type_key *)(lock))	\
+

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#120: FILE: include/linux/spinlock.h:118:
+# define spin_lock_init(lock)					\
+	do { *(lock) = SPIN_LOCK_UNLOCKED; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: include/linux/spinlock.h:120:
+# define spin_lock_init_static(lock) ^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: include/linux/spinlock.h:127:
+  extern void __rwlock_init(rwlock_t *lock, const char *name,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/spinlock.h:127:
+  extern void __rwlock_init(rwlock_t *lock, const char *name,

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#140: FILE: include/linux/spinlock.h:138:
+# define rwlock_init(lock)					\
+	do { *(lock) = RW_LOCK_UNLOCKED; } while (0)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#247: FILE: include/linux/spinlock_api_smp.h:23:
+void __lockfunc _spin_lock_nested(spinlock_t *lock, int subtype)

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t' should also have an identifier name
#256: FILE: include/linux/spinlock_api_smp.h:44:
+void __lockfunc _spin_unlock_non_nested(spinlock_t *lock) __releases(spinlock_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t' should also have an identifier name
#258: FILE: include/linux/spinlock_api_smp.h:46:
+void __lockfunc _read_unlock_non_nested(rwlock_t *lock)	__releases(rwlock_t);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#486: FILE: kernel/spinlock.c:35:
+EXPORT_SYMBOL(__spin_lock_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: No space is necessary after a cast
#495: FILE: kernel/spinlock.c:44:
+	lock->raw_lock = (raw_rwlock_t) __RAW_RW_LOCK_UNLOCKED;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#506: FILE: kernel/spinlock.c:55:
+EXPORT_SYMBOL(__rwlock_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#677: FILE: kernel/spinlock.c:339:
+EXPORT_SYMBOL(_spin_lock_nested);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#695: FILE: kernel/spinlock.c:357:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#841: FILE: net/ipv4/route.c:209:
 };
+#if defined(CONFIG_SMP) || defined(CONFIG_DEBUG_SPINLOCK) || \

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 11 warnings, 6 checks, 694 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
