ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/fs/exec.c	Wed Apr 28 22:41:05 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: include/linux/ckrm.h:1:
+/* ckrm.h - Class-based Kernel Resource Management (CKRM)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: include/linux/ckrm.h:6:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: include/linux/ckrm.h:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: include/linux/ckrm.h:11:
+ * $

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#88: FILE: include/linux/ckrm.h:26:
+ *        Added callbacks_active and surrounding logic. Added task paramter
                                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: include/linux/ckrm.h:37:
+// Data structure and function to get the list of registered $

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: include/linux/ckrm.h:48:
+         *$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: include/linux/ckrm.h:50:
+         *      events can be latched for event callbacks by classtypes$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: include/linux/ckrm.h:51:
+         *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: include/linux/ckrm.h:53:
+         *     events can not be latched but can be used to call classification$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: include/linux/ckrm.h:54:
+         * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: include/linux/ckrm.h:54:
+         * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: include/linux/ckrm.h:57:
+         */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: include/linux/ckrm.h:86:
+^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/ckrm.h:94:
+extern void ckrm_invoke_event_cb_chain(enum ckrm_event ev, void *arg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/linux/ckrm.h:103:
+#define CKRM_DEF_CB(EV,fct)					\
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: include/linux/ckrm.h:106:
+         ckrm_invoke_event_cb_chain(CKRM_EVENT_##EV,NULL);      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: include/linux/ckrm.h:106:
+         ckrm_invoke_event_cb_chain(CKRM_EVENT_##EV,NULL);      \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#168: FILE: include/linux/ckrm.h:106:
+         ckrm_invoke_event_cb_chain(CKRM_EVENT_##EV,NULL);      \
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#171: FILE: include/linux/ckrm.h:109:
+#define CKRM_DEF_CB_ARG(EV,fct,argtp)					\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#171: FILE: include/linux/ckrm.h:109:
+#define CKRM_DEF_CB_ARG(EV,fct,argtp)					\
                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: include/linux/ckrm.h:112:
+         ckrm_invoke_event_cb_chain(CKRM_EVENT_##EV,(void*)arg);^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: include/linux/ckrm.h:112:
+         ckrm_invoke_event_cb_chain(CKRM_EVENT_##EV,(void*)arg);^I\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#174: FILE: include/linux/ckrm.h:112:
+         ckrm_invoke_event_cb_chain(CKRM_EVENT_##EV,(void*)arg);	\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/linux/ckrm.h:112:
+         ckrm_invoke_event_cb_chain(CKRM_EVENT_##EV,(void*)arg);	\
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: include/linux/ckrm.h:117:
+#define CKRM_DEF_CB(EV,fct)			\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/linux/ckrm.h:120:
+#define CKRM_DEF_CB_ARG(EV,fct,argtp)		\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/linux/ckrm.h:120:
+#define CKRM_DEF_CB_ARG(EV,fct,argtp)		\
                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: include/linux/ckrm.h:126:
+ *   define the CKRM event functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: include/linux/ckrm.h:127:
+ *               EVENT          FCT           ARG         $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#190: FILE: include/linux/ckrm.h:128:
+ *-----------------------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: include/linux/ckrm.h:130:
+// types we refer at $

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#197: FILE: include/linux/ckrm.h:135:
+CKRM_DEF_CB_ARG( FORK         , fork,         struct task_struct *);
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#197: FILE: include/linux/ckrm.h:135:
+CKRM_DEF_CB_ARG( FORK         , fork,         struct task_struct *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#198: FILE: include/linux/ckrm.h:136:
+CKRM_DEF_CB_ARG( EXEC         , exec,         const char*         );
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#198: FILE: include/linux/ckrm.h:136:
+CKRM_DEF_CB_ARG( EXEC         , exec,         const char*         );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#198: FILE: include/linux/ckrm.h:136:
+CKRM_DEF_CB_ARG( EXEC         , exec,         const char*         );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#199: FILE: include/linux/ckrm.h:137:
+CKRM_DEF_CB    ( UID          , uid                               );

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#199: FILE: include/linux/ckrm.h:137:
+CKRM_DEF_CB    ( UID          , uid                               );
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#199: FILE: include/linux/ckrm.h:137:
+CKRM_DEF_CB    ( UID          , uid                               );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#199: FILE: include/linux/ckrm.h:137:
+CKRM_DEF_CB    ( UID          , uid                               );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#200: FILE: include/linux/ckrm.h:138:
+CKRM_DEF_CB    ( GID          , gid                               );

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#200: FILE: include/linux/ckrm.h:138:
+CKRM_DEF_CB    ( GID          , gid                               );
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#200: FILE: include/linux/ckrm.h:138:
+CKRM_DEF_CB    ( GID          , gid                               );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#200: FILE: include/linux/ckrm.h:138:
+CKRM_DEF_CB    ( GID          , gid                               );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: include/linux/ckrm.h:139:
+CKRM_DEF_CB    ( APPTAG       , apptag                            );

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#201: FILE: include/linux/ckrm.h:139:
+CKRM_DEF_CB    ( APPTAG       , apptag                            );
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#201: FILE: include/linux/ckrm.h:139:
+CKRM_DEF_CB    ( APPTAG       , apptag                            );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#201: FILE: include/linux/ckrm.h:139:
+CKRM_DEF_CB    ( APPTAG       , apptag                            );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#202: FILE: include/linux/ckrm.h:140:
+CKRM_DEF_CB    ( LOGIN        , login                             );

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#202: FILE: include/linux/ckrm.h:140:
+CKRM_DEF_CB    ( LOGIN        , login                             );
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#202: FILE: include/linux/ckrm.h:140:
+CKRM_DEF_CB    ( LOGIN        , login                             );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#202: FILE: include/linux/ckrm.h:140:
+CKRM_DEF_CB    ( LOGIN        , login                             );

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#203: FILE: include/linux/ckrm.h:141:
+CKRM_DEF_CB_ARG( USERADD      , useradd,      struct user_struct *);
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#203: FILE: include/linux/ckrm.h:141:
+CKRM_DEF_CB_ARG( USERADD      , useradd,      struct user_struct *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#204: FILE: include/linux/ckrm.h:142:
+CKRM_DEF_CB_ARG( USERDEL      , userdel,      struct user_struct *);
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#204: FILE: include/linux/ckrm.h:142:
+CKRM_DEF_CB_ARG( USERDEL      , userdel,      struct user_struct *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#205: FILE: include/linux/ckrm.h:143:
+CKRM_DEF_CB_ARG( LISTEN_START , listen_start, struct sock *       );
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#205: FILE: include/linux/ckrm.h:143:
+CKRM_DEF_CB_ARG( LISTEN_START , listen_start, struct sock *       );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#205: FILE: include/linux/ckrm.h:143:
+CKRM_DEF_CB_ARG( LISTEN_START , listen_start, struct sock *       );

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#206: FILE: include/linux/ckrm.h:144:
+CKRM_DEF_CB_ARG( LISTEN_STOP  , listen_stop,  struct sock *       );
                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#206: FILE: include/linux/ckrm.h:144:
+CKRM_DEF_CB_ARG( LISTEN_STOP  , listen_stop,  struct sock *       );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#206: FILE: include/linux/ckrm.h:144:
+CKRM_DEF_CB_ARG( LISTEN_STOP  , listen_stop,  struct sock *       );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#209: FILE: include/linux/ckrm.h:147:
+void ckrm_cb_newtask(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#210: FILE: include/linux/ckrm.h:148:
+void ckrm_cb_exit(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/linux/ckrm.h:151:
+extern void ckrm_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: include/linux/ckrm.h:152:
+extern int get_exe_path_name(struct task_struct *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#214: FILE: include/linux/ckrm.h:152:
+extern int get_exe_path_name(struct task_struct *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#214: FILE: include/linux/ckrm.h:152:
+extern int get_exe_path_name(struct task_struct *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#214: FILE: include/linux/ckrm.h:152:
+extern int get_exe_path_name(struct task_struct *, char *, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#223: FILE: include/linux/ckrm_ce.h:1:
+/* ckrm_ce.h - Header file to be used by Classification Engine of CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: include/linux/ckrm_ce.h:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: include/linux/ckrm_ce.h:7:
+ * Provides data structures, macros and kernel API of CKRM for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: include/linux/ckrm_ce.h:11:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: include/linux/ckrm_ce.h:34:
+/* Action parameters identifying the cause of a task<->class notify callback $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: include/linux/ckrm_ce.h:41:
+typedef void* (*ce_classify_fct_t)(enum ckrm_event event, void *obj, ... );   $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#263: FILE: include/linux/ckrm_ce.h:41:
+typedef void* (*ce_classify_fct_t)(enum ckrm_event event, void *obj, ... );   

WARNING:NEW_TYPEDEFS: do not add new typedefs
#266: FILE: include/linux/ckrm_ce.h:44:
+typedef struct ckrm_eng_callback {

WARNING:SPACING: Unnecessary space before function pointer arguments
#275: FILE: include/linux/ckrm_ce.h:53:
+	void   (*class_add)   (const char *name, void *core); /* class added */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: include/linux/ckrm_ce.h:63:
+struct dentry; $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#287: FILE: include/linux/ckrm_ce.h:65:
+typedef struct rbce_eng_callback {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#288: FILE: include/linux/ckrm_ce.h:66:
+	int (*mkdir)(struct inode *, struct dentry *, int); // mkdir

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#288: FILE: include/linux/ckrm_ce.h:66:
+	int (*mkdir)(struct inode *, struct dentry *, int); // mkdir

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#288: FILE: include/linux/ckrm_ce.h:66:
+	int (*mkdir)(struct inode *, struct dentry *, int); // mkdir

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#289: FILE: include/linux/ckrm_ce.h:67:
+	int (*rmdir)(struct inode *, struct dentry *); // rmdir

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#289: FILE: include/linux/ckrm_ce.h:67:
+	int (*rmdir)(struct inode *, struct dentry *); // rmdir

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#292: FILE: include/linux/ckrm_ce.h:70:
+extern int ckrm_register_engine  (const char *name, ckrm_eng_callback_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/ckrm_ce.h:70:
+extern int ckrm_register_engine  (const char *name, ckrm_eng_callback_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_eng_callback_t *' should also have an identifier name
#292: FILE: include/linux/ckrm_ce.h:70:
+extern int ckrm_register_engine  (const char *name, ckrm_eng_callback_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/ckrm_ce.h:71:
+extern int ckrm_unregister_engine(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: include/linux/ckrm_ce.h:73:
+extern void *ckrm_classobj(char *, int *classtype);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#295: FILE: include/linux/ckrm_ce.h:73:
+extern void *ckrm_classobj(char *, int *classtype);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/ckrm_ce.h:74:
+extern int get_exe_path_name(struct task_struct *t, char *filename, int max_size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/ckrm_ce.h:76:
+extern int rcfs_register_engine(rbce_eng_callback_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rbce_eng_callback_t *' should also have an identifier name
#298: FILE: include/linux/ckrm_ce.h:76:
+extern int rcfs_register_engine(rbce_eng_callback_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: include/linux/ckrm_ce.h:77:
+extern int rcfs_unregister_engine(rbce_eng_callback_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rbce_eng_callback_t *' should also have an identifier name
#299: FILE: include/linux/ckrm_ce.h:77:
+extern int rcfs_unregister_engine(rbce_eng_callback_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/ckrm_ce.h:79:
+extern int ckrm_reclassify(int pid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/ckrm_ce.h:83:
+extern void ckrm_core_grab(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/ckrm_ce.h:84:
+extern void ckrm_core_drop(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#306: FILE: include/linux/ckrm_ce.h:84:
+extern void ckrm_core_drop(void *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#318: FILE: include/linux/ckrm_rc.h:1:
+/* ckrm_rc.h - Header file to be used by Resource controllers of CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: include/linux/ckrm_rc.h:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: include/linux/ckrm_rc.h:8:
+ * Provides data structures, macros and kernel API of CKRM for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: include/linux/ckrm_rc.h:12:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: include/linux/ckrm_rc.h:35:
+#include <linux/ckrm_ce.h>    $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#355: FILE: include/linux/ckrm_rc.h:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: include/linux/ckrm_rc.h:40:
+#define CKRM_MAX_CLASSTYPES         32       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#359: FILE: include/linux/ckrm_rc.h:42:
+#define CKRM_MAX_CLASSTYPE_NAME     32       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: include/linux/ckrm_rc.h:45:
+#define CKRM_MAX_RES_CTLRS           8     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: include/linux/ckrm_rc.h:47:
+#define CKRM_MAX_RES_NAME          128       $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: include/linux/ckrm_rc.h:49:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#374: FILE: include/linux/ckrm_rc.h:57:
+typedef struct ckrm_shares {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#388: FILE: include/linux/ckrm_rc.h:71:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#395: FILE: include/linux/ckrm_rc.h:78:
+typedef struct ckrm_res_ctlr {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#398: FILE: include/linux/ckrm_rc.h:81:
+^Iint  resid;         ^I          // (for now) same as the enum resid$

WARNING:SPACING: Unnecessary space before function pointer arguments
#402: FILE: include/linux/ckrm_rc.h:85:
+	void *(*res_alloc)  (struct ckrm_core_class *this, struct ckrm_core_class *parent);

WARNING:SPACING: Unnecessary space before function pointer arguments
#403: FILE: include/linux/ckrm_rc.h:86:
+	void  (*res_free)   (void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#403: FILE: include/linux/ckrm_rc.h:86:
+	void  (*res_free)   (void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#406: FILE: include/linux/ckrm_rc.h:89:
+	int  (*set_share_values) (void* , struct ckrm_shares *shares);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#406: FILE: include/linux/ckrm_rc.h:89:
+	int  (*set_share_values) (void* , struct ckrm_shares *shares);
 	                                ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#406: FILE: include/linux/ckrm_rc.h:89:
+	int  (*set_share_values) (void* , struct ckrm_shares *shares);

WARNING:SPACING: Unnecessary space before function pointer arguments
#407: FILE: include/linux/ckrm_rc.h:90:
+	int  (*get_share_values) (void* , struct ckrm_shares *shares);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#407: FILE: include/linux/ckrm_rc.h:90:
+	int  (*get_share_values) (void* , struct ckrm_shares *shares);
 	                                ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#407: FILE: include/linux/ckrm_rc.h:90:
+	int  (*get_share_values) (void* , struct ckrm_shares *shares);

WARNING:SPACING: Unnecessary space before function pointer arguments
#410: FILE: include/linux/ckrm_rc.h:93:
+	int  (*get_stats)    (void* , struct seq_file *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#410: FILE: include/linux/ckrm_rc.h:93:
+	int  (*get_stats)    (void* , struct seq_file *);
 	                            ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#410: FILE: include/linux/ckrm_rc.h:93:
+	int  (*get_stats)    (void* , struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#410: FILE: include/linux/ckrm_rc.h:93:
+	int  (*get_stats)    (void* , struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#411: FILE: include/linux/ckrm_rc.h:94:
+	int  (*reset_stats)  (void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#411: FILE: include/linux/ckrm_rc.h:94:
+	int  (*reset_stats)  (void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#412: FILE: include/linux/ckrm_rc.h:95:
+	int  (*show_config)  (void* , struct seq_file *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#412: FILE: include/linux/ckrm_rc.h:95:
+	int  (*show_config)  (void* , struct seq_file *);
 	                            ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#412: FILE: include/linux/ckrm_rc.h:95:
+	int  (*show_config)  (void* , struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#412: FILE: include/linux/ckrm_rc.h:95:
+	int  (*show_config)  (void* , struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#413: FILE: include/linux/ckrm_rc.h:96:
+	int  (*set_config)   (void* , const char *cfgstr);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#413: FILE: include/linux/ckrm_rc.h:96:
+	int  (*set_config)   (void* , const char *cfgstr);
 	                            ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#413: FILE: include/linux/ckrm_rc.h:96:
+	int  (*set_config)   (void* , const char *cfgstr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#415: FILE: include/linux/ckrm_rc.h:98:
+	void (*change_resclass)(void *, void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#415: FILE: include/linux/ckrm_rc.h:98:
+	void (*change_resclass)(void *, void *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#415: FILE: include/linux/ckrm_rc.h:98:
+	void (*change_resclass)(void *, void *, void *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: include/linux/ckrm_rc.h:105:
+ *   A <struct ckrm_classtype> object describes a dimension for CKRM to classify $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: include/linux/ckrm_rc.h:117:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#435: FILE: include/linux/ckrm_rc.h:118:
+typedef struct ckrm_classtype {

ERROR:POINTER_LOCATION: "foo*  bar" should be "foo *bar"
#445: FILE: include/linux/ckrm_rc.h:128:
+	ckrm_res_ctlr_t*  res_ctlrs[CKRM_MAX_RES_CTLRS];

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#450: FILE: include/linux/ckrm_rc.h:133:
+	struct list_head          classes;       // listhead to link up all classes of this classtype

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: include/linux/ckrm_rc.h:142:
+ ^I// Begin classtype-rcfs private data. No rcfs/fs specific types used. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: include/linux/ckrm_rc.h:142:
+ ^I// Begin classtype-rcfs private data. No rcfs/fs specific types used. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#459: FILE: include/linux/ckrm_rc.h:142:
+ ^I// Begin classtype-rcfs private data. No rcfs/fs specific types used. $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: include/linux/ckrm_rc.h:142:
+ ^I// Begin classtype-rcfs private data. No rcfs/fs specific types used. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: include/linux/ckrm_rc.h:143:
+ ^Iint               mfidx;             // Index into genmfdesc array used to initialize$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#460: FILE: include/linux/ckrm_rc.h:143:
+ ^Iint               mfidx;             // Index into genmfdesc array used to initialize$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: include/linux/ckrm_rc.h:143:
+ ^Iint               mfidx;             // Index into genmfdesc array used to initialize$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: include/linux/ckrm_rc.h:144:
+ ^I                                     // mfdesc and mfcount $

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: include/linux/ckrm_rc.h:144:
+ ^I                                     // mfdesc and mfcount $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: include/linux/ckrm_rc.h:144:
+ ^I                                     // mfdesc and mfcount $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: include/linux/ckrm_rc.h:144:
+ ^I                                     // mfdesc and mfcount $

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: include/linux/ckrm_rc.h:145:
+ ^Ivoid              *mfdesc;           // Array of descriptors of root and magic files$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#462: FILE: include/linux/ckrm_rc.h:145:
+ ^Ivoid              *mfdesc;           // Array of descriptors of root and magic files$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: include/linux/ckrm_rc.h:145:
+ ^Ivoid              *mfdesc;           // Array of descriptors of root and magic files$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: include/linux/ckrm_rc.h:146:
+ ^Iint               mfcount;           // length of above array $

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: include/linux/ckrm_rc.h:146:
+ ^Iint               mfcount;           // length of above array $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#463: FILE: include/linux/ckrm_rc.h:146:
+ ^Iint               mfcount;           // length of above array $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: include/linux/ckrm_rc.h:146:
+ ^Iint               mfcount;           // length of above array $

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: include/linux/ckrm_rc.h:147:
+ ^Ivoid              *rootde;           // root dentry created by rcfs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#464: FILE: include/linux/ckrm_rc.h:147:
+ ^Ivoid              *rootde;           // root dentry created by rcfs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: include/linux/ckrm_rc.h:147:
+ ^Ivoid              *rootde;           // root dentry created by rcfs$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: include/linux/ckrm_rc.h:148:
+ ^I// End rcfs private data $

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: include/linux/ckrm_rc.h:148:
+ ^I// End rcfs private data $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: include/linux/ckrm_rc.h:148:
+ ^I// End rcfs private data $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: include/linux/ckrm_rc.h:148:
+ ^I// End rcfs private data $

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#467: FILE: include/linux/ckrm_rc.h:150:
+	char name[CKRM_MAX_TYPENAME_LEN];    // currently same as mfdesc[0]->name but could be different

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: include/linux/ckrm_rc.h:151:
+ ^Iint  typeID;^I^I^I       /* unique TypeID                         */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#468: FILE: include/linux/ckrm_rc.h:151:
+ ^Iint  typeID;^I^I^I       /* unique TypeID                         */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: include/linux/ckrm_rc.h:151:
+ ^Iint  typeID;^I^I^I       /* unique TypeID                         */$

CHECK:CAMELCASE: Avoid CamelCase: <typeID>
#468: FILE: include/linux/ckrm_rc.h:151:
+ 	int  typeID;			       /* unique TypeID                         */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#472: FILE: include/linux/ckrm_rc.h:155:
+	struct ckrm_core_class*  (*alloc)(struct ckrm_core_class *parent, const char *name);   /* alloc class instance */

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#473: FILE: include/linux/ckrm_rc.h:156:
+	int                      (*free) (struct ckrm_core_class *cls);                        /* free  class instance */

WARNING:SPACING: Unnecessary space before function pointer arguments
#473: FILE: include/linux/ckrm_rc.h:156:
+	int                      (*free) (struct ckrm_core_class *cls);                        /* free  class instance */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: include/linux/ckrm_rc.h:157:
+^I$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#475: FILE: include/linux/ckrm_rc.h:158:
+	int                      (*show_members)(struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#475: FILE: include/linux/ckrm_rc.h:158:
+	int                      (*show_members)(struct ckrm_core_class *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#476: FILE: include/linux/ckrm_rc.h:159:
+	int                      (*show_stats)  (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#476: FILE: include/linux/ckrm_rc.h:159:
+	int                      (*show_stats)  (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#476: FILE: include/linux/ckrm_rc.h:159:
+	int                      (*show_stats)  (struct ckrm_core_class *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#477: FILE: include/linux/ckrm_rc.h:160:
+	int                      (*show_config) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#477: FILE: include/linux/ckrm_rc.h:160:
+	int                      (*show_config) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#477: FILE: include/linux/ckrm_rc.h:160:
+	int                      (*show_config) (struct ckrm_core_class *, struct seq_file *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#478: FILE: include/linux/ckrm_rc.h:161:
+	int                      (*show_shares) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#478: FILE: include/linux/ckrm_rc.h:161:
+	int                      (*show_shares) (struct ckrm_core_class *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#478: FILE: include/linux/ckrm_rc.h:161:
+	int                      (*show_shares) (struct ckrm_core_class *, struct seq_file *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: include/linux/ckrm_rc.h:163:
+^Iint                      (*reset_stats) (struct ckrm_core_class *, const char *resname, $

WARNING:SPACING: Unnecessary space before function pointer arguments
#480: FILE: include/linux/ckrm_rc.h:163:
+	int                      (*reset_stats) (struct ckrm_core_class *, const char *resname, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#480: FILE: include/linux/ckrm_rc.h:163:
+	int                      (*reset_stats) (struct ckrm_core_class *, const char *resname, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#480: FILE: include/linux/ckrm_rc.h:163:
+	int                      (*reset_stats) (struct ckrm_core_class *, const char *resname, 

WARNING:SPACING: Unnecessary space before function pointer arguments
#482: FILE: include/linux/ckrm_rc.h:165:
+	int                      (*set_config)  (struct ckrm_core_class *, const char *resname,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#482: FILE: include/linux/ckrm_rc.h:165:
+	int                      (*set_config)  (struct ckrm_core_class *, const char *resname,

WARNING:SPACING: Unnecessary space before function pointer arguments
#484: FILE: include/linux/ckrm_rc.h:167:
+	int                      (*set_shares)  (struct ckrm_core_class *, const char *resname,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#484: FILE: include/linux/ckrm_rc.h:167:
+	int                      (*set_shares)  (struct ckrm_core_class *, const char *resname,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#486: FILE: include/linux/ckrm_rc.h:169:
+	int                      (*forced_reclassify)(struct ckrm_core_class *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#486: FILE: include/linux/ckrm_rc.h:169:
+	int                      (*forced_reclassify)(struct ckrm_core_class *, const char *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: include/linux/ckrm_rc.h:171:
+  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#488: FILE: include/linux/ckrm_rc.h:171:
+
+  

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: include/linux/ckrm_rc.h:171:
+  $

WARNING:LONG_LINE_COMMENT: line length of 124 exceeds 100 columns
#490: FILE: include/linux/ckrm_rc.h:173:
+	void                     (*add_resctrl)(struct ckrm_core_class *, int resid);     // class initialization for new RC

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#490: FILE: include/linux/ckrm_rc.h:173:
+	void                     (*add_resctrl)(struct ckrm_core_class *, int resid);     // class initialization for new RC

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: include/linux/ckrm_rc.h:174:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: include/linux/ckrm_rc.h:174:
+ $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#499: FILE: include/linux/ckrm_rc.h:182:
+/* basic definition of a hierarchy that is to be used by the the CORE classes

WARNING:NEW_TYPEDEFS: do not add new typedefs
#505: FILE: include/linux/ckrm_rc.h:188:
+typedef struct ckrm_hnode {

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: include/linux/ckrm_rc.h:189:
+        struct ckrm_core_class *parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: include/linux/ckrm_rc.h:189:
+        struct ckrm_core_class *parent;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#511: FILE: include/linux/ckrm_rc.h:194:
+typedef struct ckrm_core_class {

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: include/linux/ckrm_rc.h:196:
+        void* res_class[CKRM_MAX_RES_CTLRS];                 // pointer to array of resource classes$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: include/linux/ckrm_rc.h:196:
+        void* res_class[CKRM_MAX_RES_CTLRS];                 // pointer to array of resource classes$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#513: FILE: include/linux/ckrm_rc.h:196:
+        void* res_class[CKRM_MAX_RES_CTLRS];                 // pointer to array of resource classes

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: include/linux/ckrm_rc.h:197:
+  ^Ispinlock_t ckrm_lock;             // to protect the list and the array above$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#514: FILE: include/linux/ckrm_rc.h:197:
+  ^Ispinlock_t ckrm_lock;             // to protect the list and the array above$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: include/linux/ckrm_rc.h:197:
+  ^Ispinlock_t ckrm_lock;             // to protect the list and the array above$

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#515: FILE: include/linux/ckrm_rc.h:198:
+	struct list_head objlist;         // generic list for any object list to be maintained by class

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#516: FILE: include/linux/ckrm_rc.h:199:
+	struct list_head clslist;         // to link up all classes in a single list type wrt to type

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: include/linux/ckrm_rc.h:209:
+#define class_type(type,coreptr)   container_of(coreptr,type,core)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: include/linux/ckrm_rc.h:209:
+#define class_type(type,coreptr)   container_of(coreptr,type,core)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: include/linux/ckrm_rc.h:209:
+#define class_type(type,coreptr)   container_of(coreptr,type,core)
                                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#534: FILE: include/linux/ckrm_rc.h:217:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#539: FILE: include/linux/ckrm_rc.h:222:
+#define ckrm_get_res_class(rescls,resid,type)   ((type*)((rescls)->res_class[resid]))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#539: FILE: include/linux/ckrm_rc.h:222:
+#define ckrm_get_res_class(rescls,resid,type)   ((type*)((rescls)->res_class[resid]))
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#539: FILE: include/linux/ckrm_rc.h:222:
+#define ckrm_get_res_class(rescls,resid,type)   ((type*)((rescls)->res_class[resid]))
                                        ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: include/linux/ckrm_rc.h:224:
+extern int ckrm_register_res_ctlr   (struct ckrm_classtype *, ckrm_res_ctlr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: include/linux/ckrm_rc.h:224:
+extern int ckrm_register_res_ctlr   (struct ckrm_classtype *, ckrm_res_ctlr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_classtype *' should also have an identifier name
#541: FILE: include/linux/ckrm_rc.h:224:
+extern int ckrm_register_res_ctlr   (struct ckrm_classtype *, ckrm_res_ctlr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_res_ctlr_t *' should also have an identifier name
#541: FILE: include/linux/ckrm_rc.h:224:
+extern int ckrm_register_res_ctlr   (struct ckrm_classtype *, ckrm_res_ctlr_t *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#542: FILE: include/linux/ckrm_rc.h:225:
+extern int ckrm_unregister_res_ctlr (ckrm_res_ctlr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: include/linux/ckrm_rc.h:225:
+extern int ckrm_unregister_res_ctlr (ckrm_res_ctlr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ckrm_res_ctlr_t *' should also have an identifier name
#542: FILE: include/linux/ckrm_rc.h:225:
+extern int ckrm_unregister_res_ctlr (ckrm_res_ctlr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: include/linux/ckrm_rc.h:227:
+extern int ckrm_validate_and_grab_core(struct ckrm_core_class *core);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#545: FILE: include/linux/ckrm_rc.h:228:
+extern int ckrm_init_core_class(struct ckrm_classtype  *clstype,struct ckrm_core_class *dcore,
                                                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/linux/ckrm_rc.h:228:
+extern int ckrm_init_core_class(struct ckrm_classtype  *clstype,struct ckrm_core_class *dcore,

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#547: FILE: include/linux/ckrm_rc.h:230:
+extern int ckrm_release_core_class(struct ckrm_core_class *);   // Hubertus .. can disappear after cls del debugging

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: include/linux/ckrm_rc.h:230:
+extern int ckrm_release_core_class(struct ckrm_core_class *);   // Hubertus .. can disappear after cls del debugging

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#547: FILE: include/linux/ckrm_rc.h:230:
+extern int ckrm_release_core_class(struct ckrm_core_class *);   // Hubertus .. can disappear after cls del debugging

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#548: FILE: include/linux/ckrm_rc.h:231:
+extern struct ckrm_res_ctlr *ckrm_resctlr_lookup(struct ckrm_classtype *type, const char *resname);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#550: FILE: include/linux/ckrm_rc.h:233:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: include/linux/ckrm_rc.h:235:
+// Hubertus ... need to straighten out all these I don't think we will even call thsie ore are we $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#555: FILE: include/linux/ckrm_rc.h:238:
+extern struct ckrm_core_class *ckrm_alloc_core_class(struct ckrm_core_class *, const char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#558: FILE: include/linux/ckrm_rc.h:241:
+extern void ckrm_forced_reclassify_pid(int, struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#558: FILE: include/linux/ckrm_rc.h:241:
+extern void ckrm_forced_reclassify_pid(int, struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#558: FILE: include/linux/ckrm_rc.h:241:
+extern void ckrm_forced_reclassify_pid(int, struct ckrm_core_class *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: include/linux/ckrm_rc.h:244:
+extern void ckrm_forced_reclassify_laq(struct ckrm_net_struct *, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#561: FILE: include/linux/ckrm_rc.h:244:
+extern void ckrm_forced_reclassify_laq(struct ckrm_net_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_net_struct *' should also have an identifier name
#561: FILE: include/linux/ckrm_rc.h:244:
+extern void ckrm_forced_reclassify_laq(struct ckrm_net_struct *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#561: FILE: include/linux/ckrm_rc.h:244:
+extern void ckrm_forced_reclassify_laq(struct ckrm_net_struct *, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: include/linux/ckrm_rc.h:245:
+extern void ckrm_forced_reclassify_laq(struct ckrm_net_struct *, 
+		struct ckrm_core_class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: include/linux/ckrm_rc.h:249:
+extern void ckrm_lock_hier(struct ckrm_core_class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: include/linux/ckrm_rc.h:250:
+extern void ckrm_unlock_hier(struct ckrm_core_class *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#567: FILE: include/linux/ckrm_rc.h:250:
+extern void ckrm_unlock_hier(struct ckrm_core_class *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#568: FILE: include/linux/ckrm_rc.h:251:
+extern struct ckrm_core_class * ckrm_get_next_child(struct ckrm_core_class *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#568: FILE: include/linux/ckrm_rc.h:251:
+extern struct ckrm_core_class * ckrm_get_next_child(struct ckrm_core_class *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#568: FILE: include/linux/ckrm_rc.h:251:
+extern struct ckrm_core_class * ckrm_get_next_child(struct ckrm_core_class *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_core_class *' should also have an identifier name
#568: FILE: include/linux/ckrm_rc.h:251:
+extern struct ckrm_core_class * ckrm_get_next_child(struct ckrm_core_class *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: include/linux/ckrm_rc.h:252:
+^I^I            struct ckrm_core_class *);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: include/linux/ckrm_rc.h:252:
+extern struct ckrm_core_class * ckrm_get_next_child(struct ckrm_core_class *,
+		            struct ckrm_core_class *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#571: FILE: include/linux/ckrm_rc.h:254:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#571: FILE: include/linux/ckrm_rc.h:254:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#571: FILE: include/linux/ckrm_rc.h:254:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#571: FILE: include/linux/ckrm_rc.h:254:
+extern void child_guarantee_changed(struct ckrm_shares *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: include/linux/ckrm_rc.h:255:
+extern void child_maxlimit_changed(struct ckrm_shares *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#572: FILE: include/linux/ckrm_rc.h:255:
+extern void child_maxlimit_changed(struct ckrm_shares *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#572: FILE: include/linux/ckrm_rc.h:255:
+extern void child_maxlimit_changed(struct ckrm_shares *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#573: FILE: include/linux/ckrm_rc.h:256:
+extern int  set_shares(struct ckrm_shares *, struct ckrm_shares *, struct ckrm_shares *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#573: FILE: include/linux/ckrm_rc.h:256:
+extern int  set_shares(struct ckrm_shares *, struct ckrm_shares *, struct ckrm_shares *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#573: FILE: include/linux/ckrm_rc.h:256:
+extern int  set_shares(struct ckrm_shares *, struct ckrm_shares *, struct ckrm_shares *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_shares *' should also have an identifier name
#573: FILE: include/linux/ckrm_rc.h:256:
+extern int  set_shares(struct ckrm_shares *, struct ckrm_shares *, struct ckrm_shares *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#576: FILE: include/linux/ckrm_rc.h:259:
+extern int ckrm_register_classtype  (struct ckrm_classtype *clstype);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#577: FILE: include/linux/ckrm_rc.h:260:
+extern int ckrm_unregister_classtype(struct ckrm_classtype *clstype);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#578: FILE: include/linux/ckrm_rc.h:261:
+extern struct ckrm_classtype* ckrm_find_classtype_by_name(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#578: FILE: include/linux/ckrm_rc.h:261:
+extern struct ckrm_classtype* ckrm_find_classtype_by_name(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#581: FILE: include/linux/ckrm_rc.h:264:
+extern int ckrm_class_show_shares(struct ckrm_core_class *core, struct seq_file *seq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#582: FILE: include/linux/ckrm_rc.h:265:
+extern int ckrm_class_show_stats(struct ckrm_core_class *core, struct seq_file *seq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#583: FILE: include/linux/ckrm_rc.h:266:
+extern int ckrm_class_show_config(struct ckrm_core_class *core, struct seq_file *seq);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#584: FILE: include/linux/ckrm_rc.h:267:
+extern int ckrm_class_set_config(struct ckrm_core_class *core, const char *resname, const char *cfgstr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: include/linux/ckrm_rc.h:267:
+extern int ckrm_class_set_config(struct ckrm_core_class *core, const char *resname, const char *cfgstr);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#585: FILE: include/linux/ckrm_rc.h:268:
+extern int ckrm_class_set_shares(struct ckrm_core_class *core, const char *resname, struct ckrm_shares *shares);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#585: FILE: include/linux/ckrm_rc.h:268:
+extern int ckrm_class_set_shares(struct ckrm_core_class *core, const char *resname, struct ckrm_shares *shares);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#586: FILE: include/linux/ckrm_rc.h:269:
+extern int ckrm_class_reset_stats(struct ckrm_core_class *core, const char *resname, const char *unused);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#586: FILE: include/linux/ckrm_rc.h:269:
+extern int ckrm_class_reset_stats(struct ckrm_core_class *core, const char *resname, const char *unused);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#588: FILE: include/linux/ckrm_rc.h:271:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#589: FILE: include/linux/ckrm_rc.h:272:
+extern void ckrm_ns_hold(struct ckrm_net_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#590: FILE: include/linux/ckrm_rc.h:273:
+extern void ckrm_ns_put(struct ckrm_net_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_net_struct *' should also have an identifier name
#590: FILE: include/linux/ckrm_rc.h:273:
+extern void ckrm_ns_put(struct ckrm_net_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: include/linux/ckrm_rc.h:274:
+extern void *ckrm_set_rootcore_byname(char *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#591: FILE: include/linux/ckrm_rc.h:274:
+extern void *ckrm_set_rootcore_byname(char *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#591: FILE: include/linux/ckrm_rc.h:274:
+extern void *ckrm_set_rootcore_byname(char *, void *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: include/linux/ckrm_rc.h:277:
+static inline void ckrm_core_grab(struct ckrm_core_class *core)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: include/linux/ckrm_rc.h:278:
+{ $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#596: FILE: include/linux/ckrm_rc.h:279:
+	if (core) atomic_inc(&core->refcnt);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: include/linux/ckrm_rc.h:282:
+static inline void ckrm_core_drop(struct ckrm_core_class *core) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: include/linux/ckrm_rc.h:283:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: include/linux/ckrm_rc.h:285:
+^Iextern void ckrm_free_core_class(struct ckrm_core_class *core);   $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: include/linux/ckrm_rc.h:285:
+	extern void ckrm_free_core_class(struct ckrm_core_class *core);   

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#603: FILE: include/linux/ckrm_rc.h:286:
+	if (core && (atomic_dec_and_test(&core->refcnt)))
+	    ckrm_free_core_class(core);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: include/linux/ckrm_rc.h:297:
+// requires following arguments (ckrm_core_class *cls, $

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#618: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)									\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#618: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)									\
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#618: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)									\
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#618: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)									\
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cls' - possible side-effects?
#618: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)									\
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;									\
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) && 									\
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
+           )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cls' may be better as '(cls)' to avoid precedence issues
#618: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)									\
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;									\
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) && 									\
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
+           )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bmap' - possible side-effects?
#618: FILE: include/linux/ckrm_rc.h:301:
+#define forall_class_resobjs(cls,rcbs,robj,bmap)									\
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;									\
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) && 									\
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
+           )

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#619: FILE: include/linux/ckrm_rc.h:302:
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;									\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: include/linux/ckrm_rc.h:302:
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;^I^I^I^I^I^I^I^I^I\$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#619: FILE: include/linux/ckrm_rc.h:302:
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;									\
                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#619: FILE: include/linux/ckrm_rc.h:302:
+       for ( bmap=((cls->classtype)->bit_res_ctlrs) ;									\

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#620: FILE: include/linux/ckrm_rc.h:303:
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) && 									\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#620: FILE: include/linux/ckrm_rc.h:303:
+^I     ({ int rid; ((rid=ffs(bmap)-1) >= 0) && ^I^I^I^I^I^I^I^I^I\$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#620: FILE: include/linux/ckrm_rc.h:303:
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) && 									\
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#620: FILE: include/linux/ckrm_rc.h:303:
+	     ({ int rid; ((rid=ffs(bmap)-1) >= 0) && 									\
 	                                ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#621: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: include/linux/ckrm_rc.h:304:
+^I                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;^I\$

ERROR:SPACING: spaces required around that '&=' (ctx:VxO)
#621: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
 	                      ^

ERROR:SPACING: space required before that '~' (ctx:OxV)
#621: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
 	                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#621: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#621: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
 	                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#621: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
 	                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#621: FILE: include/linux/ckrm_rc.h:304:
+	                 (bmap&=~(1<<rid),((rcbs=cls->classtype->res_ctlrs[rid]) && (robj=cls->res_class[rid]))); }) ;	\
 	                                                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: include/linux/ckrm_rc.h:305:
+           )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: include/linux/ckrm_rc.h:305:
+           )$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#624: FILE: include/linux/ckrm_rc.h:307:
+extern struct ckrm_classtype* ckrm_classtypes[]; /* should provide a different interface */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#626: FILE: include/linux/ckrm_rc.h:309:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: include/linux/ckrm_rc.h:311:
+ * CKRM event callback specification for the classtypes or resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: include/linux/ckrm_rc.h:312:
+ *   typically an array is specified using CKRM_EVENT_SPEC terminated with $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#633: FILE: include/linux/ckrm_rc.h:316:
+ *-----------------------------------------------------------------------------*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#639: FILE: include/linux/ckrm_rc.h:322:
+};
+#define CKRM_EVENT_SPEC(EV,FCT) { CKRM_EVENT_##EV, { (ckrm_event_cb)FCT, NULL } }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#639: FILE: include/linux/ckrm_rc.h:322:
+#define CKRM_EVENT_SPEC(EV,FCT) { CKRM_EVENT_##EV, { (ckrm_event_cb)FCT, NULL } }
                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: include/linux/ckrm_rc.h:336:
+// CE Classification callbacks with $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctype' - possible side-effects?
#655: FILE: include/linux/ckrm_rc.h:338:
+#define CE_CLASSIFY_NORET(ctype, event, objs_to_classify...)					\
+do {												\
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		(*(ctype)->ce_callbacks.classify)(event, objs_to_classify);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#655: FILE: include/linux/ckrm_rc.h:338:
+#define CE_CLASSIFY_NORET(ctype, event, objs_to_classify...)					\
+do {												\
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		(*(ctype)->ce_callbacks.classify)(event, objs_to_classify);			\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#657: FILE: include/linux/ckrm_rc.h:340:
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#657: FILE: include/linux/ckrm_rc.h:340:
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctype' - possible side-effects?
#661: FILE: include/linux/ckrm_rc.h:344:
+#define CE_CLASSIFY_RET(ret, ctype, event, objs_to_classify...)					\
+do {												\
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		ret = (*(ctype)->ce_callbacks.classify)(event, objs_to_classify);		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#661: FILE: include/linux/ckrm_rc.h:344:
+#define CE_CLASSIFY_RET(ret, ctype, event, objs_to_classify...)					\
+do {												\
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
+		ret = (*(ctype)->ce_callbacks.classify)(event, objs_to_classify);		\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#663: FILE: include/linux/ckrm_rc.h:346:
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#663: FILE: include/linux/ckrm_rc.h:346:
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.c_interest)))	\
 	                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctype' - possible side-effects?
#667: FILE: include/linux/ckrm_rc.h:350:
+#define CE_NOTIFY(ctype, event, cls, objs_to_classify)						\
+do {												\
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
+		(*(ctype)->ce_callbacks.notify)(event,cls,objs_to_classify);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#667: FILE: include/linux/ckrm_rc.h:350:
+#define CE_NOTIFY(ctype, event, cls, objs_to_classify)						\
+do {												\
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
+		(*(ctype)->ce_callbacks.notify)(event,cls,objs_to_classify);			\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#669: FILE: include/linux/ckrm_rc.h:352:
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
 	                                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#669: FILE: include/linux/ckrm_rc.h:352:
+	if ((ctype)->ce_cb_active && (test_bit(event,&(ctype)->ce_callbacks.n_interest)))	\
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#670: FILE: include/linux/ckrm_rc.h:353:
+		(*(ctype)->ce_callbacks.notify)(event,cls,objs_to_classify);			\
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#670: FILE: include/linux/ckrm_rc.h:353:
+		(*(ctype)->ce_callbacks.notify)(event,cls,objs_to_classify);			\
 		                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#673: FILE: include/linux/ckrm_rc.h:356:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#680: FILE: include/linux/ckrm_rc.h:363:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#682: FILE: include/linux/ckrm_rc.h:365:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: include/linux/sched.h:498:
+^Ispinlock_t  ckrm_tsklock; $

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#693: FILE: include/linux/sched.h:498:
+	spinlock_t  ckrm_tsklock; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: include/linux/sched.h:501:
+^I// .. Hubertus should change to CONFIG_CKRM_TYPE_TASKCLASS $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: init/Kconfig:116:
+^I  http://ckrm.sf.net. $

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#722: FILE: init/Kconfig:118:
+	  If you say Y here, enable the Resource Class File System and atleast
 	                                                               ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: init/Kconfig:119:
+^I  one of the resource controllers below. Say N if you are unsure. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: init/Kconfig:125:
+^I  RCFS is the filesystem API for CKRM. This separate configuration $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: init/Kconfig:126:
+^I  option is provided only for debugging and will eventually disappear $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: init/Kconfig:127:
+^I  since rcfs will be automounted whenever CKRM is configured. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#733: FILE: init/Kconfig:129:
+          Say N if unsure, Y if you've enabled CKRM, M to debug rcfs $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#743: FILE: init/Kconfig:139:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: init/Kconfig:140:
+^I  Say N if unsure $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: init/Kconfig:149:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#761: FILE: init/Kconfig:157:
+^I  classes.  This is the base to enable socket based resource $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: init/Kconfig:159:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#764: FILE: init/Kconfig:160:
+^I  Say N if unsure.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#775: FILE: init/Kconfig:171:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: kernel/ckrm/Makefile:2:
+# Makefile for CKRM $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#832: FILE: kernel/ckrm/Makefile:6:
+^Iobj-y = ckrm.o ckrmutils.o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: kernel/ckrm/Makefile:9:
+obj-$(CONFIG_CKRM_TYPE_TASKCLASS) += ckrm_tc.o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: kernel/ckrm/Makefile:12:
+obj-$(CONFIG_CKRM_TYPE_SOCKETCLASS) += ckrm_sockc.o        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#839: FILE: kernel/ckrm/Makefile:13:
+obj-$(CONFIG_CKRM_RES_LISTENAQ) += ckrm_listenaq.o  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#845: FILE: kernel/ckrm/ckrm.c:1:
+/* ckrm.c - Class-based Kernel Resource Management (CKRM)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: kernel/ckrm/ckrm.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#852: FILE: kernel/ckrm/ckrm.c:8:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: kernel/ckrm/ckrm.c:9:
+ * Provides kernel API of CKRM for in-kernel,per-resource controllers $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#854: FILE: kernel/ckrm/ckrm.c:10:
+ * (one each for cpu, memory, io, network) and callbacks for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#858: FILE: kernel/ckrm/ckrm.c:14:
+ * $

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#874: FILE: kernel/ckrm/ckrm.c:30:
+ *        surrounding logic. Added task paramter for all CE callbacks.
                                         ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#879: FILE: kernel/ckrm/ckrm.c:35:
+ *  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#887: FILE: kernel/ckrm/ckrm.c:43:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#899: FILE: kernel/ckrm/ckrm.c:55:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: kernel/ckrm/ckrm.c:56:
+rwlock_t ckrm_class_lock = RW_LOCK_UNLOCKED;  // protect classlists $

WARNING:SPACING: space prohibited before semicolon
#902: FILE: kernel/ckrm/ckrm.c:58:
+struct rcfs_functions rcfs_fn ;

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#919: FILE: kernel/ckrm/ckrm.c:75:
+	return ( (resid>=0) && (resid < clstype->max_resid) &&
 	               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#919: FILE: kernel/ckrm/ckrm.c:75:
+	return ( (resid>=0) && (resid < clstype->max_resid) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: kernel/ckrm/ckrm.c:76:
+	return ( (resid>=0) && (resid < clstype->max_resid) &&
+		 test_bit(resid, &clstype->bit_res_ctlrs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#928: FILE: kernel/ckrm/ckrm.c:84:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#929: FILE: kernel/ckrm/ckrm.c:85:
+^Ifor (resid=0; resid < clstype->max_resid; resid++) { $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#929: FILE: kernel/ckrm/ckrm.c:85:
+	for (resid=0; resid < clstype->max_resid; resid++) { 
 	          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#932: FILE: kernel/ckrm/ckrm.c:88:
+			struct ckrm_res_ctlr *rctrl = clstype->res_ctlrs[resid];
+			if (!strncmp(resname, rctrl->res_name,CKRM_MAX_RES_NAME))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#932: FILE: kernel/ckrm/ckrm.c:88:
+			if (!strncmp(resname, rctrl->res_name,CKRM_MAX_RES_NAME))
 			                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <classTypeID>
#942: FILE: kernel/ckrm/ckrm.c:98:
+ckrm_classobj(char *classname, int *classTypeID)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#947: FILE: kernel/ckrm/ckrm.c:103:
+	if (!classname || !*classname) {
+		return NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#952: FILE: kernel/ckrm/ckrm.c:108:
+	for ( i=0 ; i<CKRM_MAX_CLASSTYPES; i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#952: FILE: kernel/ckrm/ckrm.c:108:
+	for ( i=0 ; i<CKRM_MAX_CLASSTYPES; i++) {
 	             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#952: FILE: kernel/ckrm/ckrm.c:108:
+	for ( i=0 ; i<CKRM_MAX_CLASSTYPES; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: kernel/ckrm/ckrm.c:112:
+^I^Iif (ctype == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctype"
#956: FILE: kernel/ckrm/ckrm.c:112:
+		if (ctype == NULL) 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#971: FILE: kernel/ckrm/ckrm.c:127:
+EXPORT_SYMBOL(is_res_regd);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#972: FILE: kernel/ckrm/ckrm.c:128:
+EXPORT_SYMBOL(ckrm_classobj);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#978: FILE: kernel/ckrm/ckrm.c:134:
+static inline void $

WARNING:LINE_SPACING: Missing a blank line after declarations
#989: FILE: kernel/ckrm/ckrm.c:145:
+	int rc = 0;
+	read_lock(&ckrm_class_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1013: FILE: kernel/ckrm/ckrm.c:169:
+^Iif (ctype == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctype"
#1013: FILE: kernel/ckrm/ckrm.c:169:
+	if (ctype == NULL) 

WARNING:TYPO_SPELLING: 'acive' may be misspelled - perhaps 'active'?
#1018: FILE: kernel/ckrm/ckrm.c:174:
+		// Some engine is acive, deregister it first.
 		                  ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: kernel/ckrm/ckrm.c:178:
+^I$

WARNING:TYPO_SPELLING: 'momement' may be misspelled - perhaps 'moment'?
#1025: FILE: kernel/ckrm/ckrm.c:181:
+	 * also require that the function pointer be set the momement the mask is non-null
 	                                                     ^^^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1027: FILE: kernel/ckrm/ckrm.c:183:
+	if ( ! (((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	     (ecbs->c_interest && ecbs->classify == NULL) ||
+	     (ecbs->n_interest && ecbs->notify == NULL) )
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1027: FILE: kernel/ckrm/ckrm.c:183:
+	if ( ! (((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
 	     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1027: FILE: kernel/ckrm/ckrm.c:183:
+	if ( ! (((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ecbs->classify'
#1027: FILE: kernel/ckrm/ckrm.c:183:
+	if ( ! (((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	     (ecbs->c_interest && ecbs->classify == NULL) ||
+	     (ecbs->n_interest && ecbs->notify == NULL) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ecbs->class_delete'
#1027: FILE: kernel/ckrm/ckrm.c:183:
+	if ( ! (((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	     (ecbs->c_interest && ecbs->classify == NULL) ||
+	     (ecbs->n_interest && ecbs->notify == NULL) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ecbs->notify'
#1027: FILE: kernel/ckrm/ckrm.c:183:
+	if ( ! (((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	     (ecbs->c_interest && ecbs->classify == NULL) ||
+	     (ecbs->n_interest && ecbs->notify == NULL) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: kernel/ckrm/ckrm.c:184:
+	if ( ! (((ecbs->classify) && (ecbs->class_delete)) || (ecbs->notify)) ||
+	     (ecbs->c_interest && ecbs->classify == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ecbs->classify"
#1028: FILE: kernel/ckrm/ckrm.c:184:
+	     (ecbs->c_interest && ecbs->classify == NULL) ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1029: FILE: kernel/ckrm/ckrm.c:185:
+	     (ecbs->n_interest && ecbs->notify == NULL) )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ecbs->notify"
#1029: FILE: kernel/ckrm/ckrm.c:185:
+	     (ecbs->n_interest && ecbs->notify == NULL) )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: kernel/ckrm/ckrm.c:190:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1035: FILE: kernel/ckrm/ckrm.c:191:
+	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: kernel/ckrm/ckrm.c:197:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1045: FILE: kernel/ckrm/ckrm.c:201:
+^Iif (ctype->ce_callbacks.class_add) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1046: FILE: kernel/ckrm/ckrm.c:202:
+		(*ctype->ce_callbacks.class_add)(ctype->default_class->name,ctype->default_class);
 		                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1061: FILE: kernel/ckrm/ckrm.c:217:
+^Iif (ctype == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctype"
#1061: FILE: kernel/ckrm/ckrm.c:217:
+	if (ctype == NULL) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1064: FILE: kernel/ckrm/ckrm.c:220:
+^Ictype->ce_cb_active = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1078: FILE: kernel/ckrm/ckrm.c:234:
+ *           Interfaces to manipulate class (core or resource) hierarchies $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1081: FILE: kernel/ckrm/ckrm.c:237:
+/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1089: FILE: kernel/ckrm/ckrm.c:245:
+		printk(KERN_ERR "Invalid child %p given in ckrm_add_child\n", child);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_add_child', this function's name, in a string
#1089: FILE: kernel/ckrm/ckrm.c:245:
+		printk(KERN_ERR "Invalid child %p given in ckrm_add_child\n", child);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1092: FILE: kernel/ckrm/ckrm.c:248:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1097: FILE: kernel/ckrm/ckrm.c:253:
+ ^Iif (parent) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1097: FILE: kernel/ckrm/ckrm.c:253:
+ ^Iif (parent) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: kernel/ckrm/ckrm.c:253:
+ ^Iif (parent) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1101: FILE: kernel/ckrm/ckrm.c:257:
+			printk(KERN_ERR "Invalid parent %p given in ckrm_add_child\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_add_child', this function's name, in a string
#1101: FILE: kernel/ckrm/ckrm.c:257:
+			printk(KERN_ERR "Invalid parent %p given in ckrm_add_child\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: kernel/ckrm/ckrm.c:258:
+			printk(KERN_ERR "Invalid parent %p given in ckrm_add_child\n",
+					parent);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1114: FILE: kernel/ckrm/ckrm.c:270:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1116: FILE: kernel/ckrm/ckrm.c:272:
+/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1125: FILE: kernel/ckrm/ckrm.c:281:
+		printk(KERN_ERR "Invalid child %p given in ckrm_remove_child\n", child);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_remove_child', this function's name, in a string
#1125: FILE: kernel/ckrm/ckrm.c:281:
+		printk(KERN_ERR "Invalid child %p given in ckrm_remove_child\n", child);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1132: FILE: kernel/ckrm/ckrm.c:288:
+		printk(KERN_ERR "Invalid parent %p in ckrm_remove_child\n", parent);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_remove_child', this function's name, in a string
#1132: FILE: kernel/ckrm/ckrm.c:288:
+		printk(KERN_ERR "Invalid parent %p in ckrm_remove_child\n", parent);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1155: FILE: kernel/ckrm/ckrm.c:311:
+	if (ckrm_is_core_valid(parent)) {
+		read_lock(&parent->hnode_rwlock);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1160: FILE: kernel/ckrm/ckrm.c:316:
+void $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1163: FILE: kernel/ckrm/ckrm.c:319:
+	if (ckrm_is_core_valid(parent)) {
+		read_unlock(&parent->hnode_rwlock);
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1173: FILE: kernel/ckrm/ckrm.c:329:
+#define hnode_2_core(ptr) ((ptr) ? container_of(ptr, struct ckrm_core_class, hnode) : NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: kernel/ckrm/ckrm.c:333:
+ckrm_get_next_child(struct ckrm_core_class *parent,
+			struct ckrm_core_class *child)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1184: FILE: kernel/ckrm/ckrm.c:340:
+		printk(KERN_ERR "Invalid parent %p in ckrm_get_next_child\n", parent);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_get_next_child', this function's name, in a string
#1184: FILE: kernel/ckrm/ckrm.c:340:
+		printk(KERN_ERR "Invalid parent %p in ckrm_get_next_child\n", parent);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1187: FILE: kernel/ckrm/ckrm.c:343:
+	if (list_empty(&parent->hnode.children)) {
+		return NULL;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1193: FILE: kernel/ckrm/ckrm.c:349:
+			printk(KERN_ERR "Invalid child %p in ckrm_get_next_child\n", child);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_get_next_child', this function's name, in a string
#1193: FILE: kernel/ckrm/ckrm.c:349:
+			printk(KERN_ERR "Invalid child %p in ckrm_get_next_child\n", child);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1209: FILE: kernel/ckrm/ckrm.c:365:
+		printk(KERN_ERR "Invalid next child %p in ckrm_get_next_child\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_get_next_child', this function's name, in a string
#1209: FILE: kernel/ckrm/ckrm.c:365:
+		printk(KERN_ERR "Invalid next child %p in ckrm_get_next_child\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1210: FILE: kernel/ckrm/ckrm.c:366:
+		printk(KERN_ERR "Invalid next child %p in ckrm_get_next_child\n",
+				next_childcore);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1216: FILE: kernel/ckrm/ckrm.c:372:
+EXPORT_SYMBOL(ckrm_lock_hier);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1217: FILE: kernel/ckrm/ckrm.c:373:
+EXPORT_SYMBOL(ckrm_unlock_hier);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1218: FILE: kernel/ckrm/ckrm.c:374:
+EXPORT_SYMBOL(ckrm_get_next_child);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: kernel/ckrm/ckrm.c:376:
+static void $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1225: FILE: kernel/ckrm/ckrm.c:381:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1228: FILE: kernel/ckrm/ckrm.c:384:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: kernel/ckrm/ckrm.c:390:
+^I^Ireturn ; $

WARNING:SPACING: space prohibited before semicolon
#1234: FILE: kernel/ckrm/ckrm.c:390:
+		return ; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: kernel/ckrm/ckrm.c:400:
+^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1246: FILE: kernel/ckrm/ckrm.c:402:
+			core->res_class[resid] =(*rcbs->res_alloc)(core,parent);
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1246: FILE: kernel/ckrm/ckrm.c:402:
+			core->res_class[resid] =(*rcbs->res_alloc)(core,parent);
 			                                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1249: FILE: kernel/ckrm/ckrm.c:405:
+			printk(KERN_ERR "Error creating res class\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: kernel/ckrm/ckrm.c:425:
+^I// Hubertus .. how is this used in initialization $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1271: FILE: kernel/ckrm/ckrm.c:427:
+	printk("ckrm_init_core_class: name %s => %p\n", name?name:"default",dcore);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1271: FILE: kernel/ckrm/ckrm.c:427:
+	printk("ckrm_init_core_class: name %s => %p\n", name?name:"default",dcore);
 	                                                    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1271: FILE: kernel/ckrm/ckrm.c:427:
+	printk("ckrm_init_core_class: name %s => %p\n", name?name:"default",dcore);
 	                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1271: FILE: kernel/ckrm/ckrm.c:427:
+	printk("ckrm_init_core_class: name %s => %p\n", name?name:"default",dcore);
 	                                                                   ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_init_core_class', this function's name, in a string
#1271: FILE: kernel/ckrm/ckrm.c:427:
+	printk("ckrm_init_core_class: name %s => %p\n", name?name:"default",dcore);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1272: FILE: kernel/ckrm/ckrm.c:428:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1273: FILE: kernel/ckrm/ckrm.c:429:
+	if ((dcore != clstype->default_class) && ( !ckrm_is_core_valid(parent))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dcore != clstype->default_class'
#1273: FILE: kernel/ckrm/ckrm.c:429:
+	if ((dcore != clstype->default_class) && ( !ckrm_is_core_valid(parent))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1274: FILE: kernel/ckrm/ckrm.c:430:
+		printk("error not a valid parent %p\n", parent);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1277: FILE: kernel/ckrm/ckrm.c:433:
+#if 0  // Hubertus .. dynamic allocation still breaks when RCs registers. See def in ckrm_rc.h

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#1280: FILE: kernel/ckrm/ckrm.c:436:
+		dcore->res_class = (void**)kmalloc(clstype->max_resid * sizeof(void*) , GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1280: FILE: kernel/ckrm/ckrm.c:436:
+		dcore->res_class = (void**)kmalloc(clstype->max_resid * sizeof(void*) , GFP_KERNEL);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1280: FILE: kernel/ckrm/ckrm.c:436:
+		dcore->res_class = (void**)kmalloc(clstype->max_resid * sizeof(void*) , GFP_KERNEL);
 		                                                                      ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1280: FILE: kernel/ckrm/ckrm.c:436:
+		dcore->res_class = (void**)kmalloc(clstype->max_resid * sizeof(void*) , GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1280: FILE: kernel/ckrm/ckrm.c:436:
+		dcore->res_class = (void**)kmalloc(clstype->max_resid * sizeof(void*) , GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dcore->res_class"
#1281: FILE: kernel/ckrm/ckrm.c:437:
+		if (dcore->res_class == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1282: FILE: kernel/ckrm/ckrm.c:438:
+			printk("error no mem\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1282: FILE: kernel/ckrm/ckrm.c:438:
+		if (dcore->res_class == NULL) {
+			printk("error no mem\n");

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1298: FILE: kernel/ckrm/ckrm.c:454:
+	list_add(&dcore->clslist,&clstype->classes);
 	                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1298: FILE: kernel/ckrm/ckrm.c:454:
+	list_add(&dcore->clslist,&clstype->classes);
 	                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1304: FILE: kernel/ckrm/ckrm.c:460:
+^Ickrm_add_child(parent, dcore); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1306: FILE: kernel/ckrm/ckrm.c:462:
+^Ifor (i = 0; i < clstype->max_resid; i++) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1307: FILE: kernel/ckrm/ckrm.c:463:
+		ckrm_alloc_res_class(dcore,parent,i);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1307: FILE: kernel/ckrm/ckrm.c:463:
+		ckrm_alloc_res_class(dcore,parent,i);
 		                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1310: FILE: kernel/ckrm/ckrm.c:466:
+^Iif (parent) $

ERROR:SPACING: space prohibited after that open parenthesis '('
#1313: FILE: kernel/ckrm/ckrm.c:469:
+	ckrm_core_grab( dcore );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1313: FILE: kernel/ckrm/ckrm.c:469:
+	ckrm_core_grab( dcore );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1317: FILE: kernel/ckrm/ckrm.c:473:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1318: FILE: kernel/ckrm/ckrm.c:474:
+static void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1321: FILE: kernel/ckrm/ckrm.c:477:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1323: FILE: kernel/ckrm/ckrm.c:479:
+^I * registered with core $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1336: FILE: kernel/ckrm/ckrm.c:492:
+^I^I^Icore->res_class[resid] = NULL;^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1342: FILE: kernel/ckrm/ckrm.c:498:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1344: FILE: kernel/ckrm/ckrm.c:500:
+ * Free a core class $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1356: FILE: kernel/ckrm/ckrm.c:512:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1357: FILE: kernel/ckrm/ckrm.c:513:
+	printk("%s: core=%p:%s parent=%p:%s\n",__FUNCTION__,core,core->name,parent,parent->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: kernel/ckrm/ckrm.c:513:
+	printk("%s: core=%p:%s parent=%p:%s\n",__FUNCTION__,core,core->name,parent,parent->name);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: kernel/ckrm/ckrm.c:513:
+	printk("%s: core=%p:%s parent=%p:%s\n",__FUNCTION__,core,core->name,parent,parent->name);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: kernel/ckrm/ckrm.c:513:
+	printk("%s: core=%p:%s parent=%p:%s\n",__FUNCTION__,core,core->name,parent,parent->name);
 	                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: kernel/ckrm/ckrm.c:513:
+	printk("%s: core=%p:%s parent=%p:%s\n",__FUNCTION__,core,core->name,parent,parent->name);
 	                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1357: FILE: kernel/ckrm/ckrm.c:513:
+	printk("%s: core=%p:%s parent=%p:%s\n",__FUNCTION__,core,core->name,parent,parent->name);
 	                                                                          ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1357: FILE: kernel/ckrm/ckrm.c:513:
+	printk("%s: core=%p:%s parent=%p:%s\n",__FUNCTION__,core,core->name,parent,parent->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1360: FILE: kernel/ckrm/ckrm.c:516:
+		printk("class <%s> finally deleted %lu\n",core->name,jiffies);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1360: FILE: kernel/ckrm/ckrm.c:516:
+		printk("class <%s> finally deleted %lu\n",core->name,jiffies);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1360: FILE: kernel/ckrm/ckrm.c:516:
+		printk("class <%s> finally deleted %lu\n",core->name,jiffies);
 		                                                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1362: FILE: kernel/ckrm/ckrm.c:518:
+	if (ckrm_remove_child(core) == 0) {
+		printk("Core class removal failed. Chilren present\n");
+	}

WARNING:TYPO_SPELLING: 'Chilren' may be misspelled - perhaps 'Children'?
#1363: FILE: kernel/ckrm/ckrm.c:519:
+		printk("Core class removal failed. Chilren present\n");
 		                                   ^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1363: FILE: kernel/ckrm/ckrm.c:519:
+		printk("Core class removal failed. Chilren present\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1366: FILE: kernel/ckrm/ckrm.c:522:
+	for (i = 0; i < clstype->max_resid; i++) {
+		ckrm_free_res_class(core,i);
+	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1367: FILE: kernel/ckrm/ckrm.c:523:
+		ckrm_free_res_class(core,i);
 		                        ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1374: FILE: kernel/ckrm/ckrm.c:530:
+#if 0 // Dynamic not yet enabled

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1384: FILE: kernel/ckrm/ckrm.c:540:
+^Iif (parent) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1386: FILE: kernel/ckrm/ckrm.c:542:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: kernel/ckrm/ckrm.c:542:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1399: FILE: kernel/ckrm/ckrm.c:555:
+ ^I^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1399: FILE: kernel/ckrm/ckrm.c:555:
+ ^I^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: kernel/ckrm/ckrm.c:555:
+ ^I^Ireturn 0;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1403: FILE: kernel/ckrm/ckrm.c:559:
+		printk("class <%s> deletion delayed refcnt=%d jif=%ld\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1404: FILE: kernel/ckrm/ckrm.c:560:
+		       core->name,core->refcnt,jiffies);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1404: FILE: kernel/ckrm/ckrm.c:560:
+		       core->name,core->refcnt,jiffies);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1422: FILE: kernel/ckrm/ckrm.c:578:
+	int  resid, ret,i;
 	               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1423: FILE: kernel/ckrm/ckrm.c:579:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1428: FILE: kernel/ckrm/ckrm.c:584:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1430: FILE: kernel/ckrm/ckrm.c:586:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1431: FILE: kernel/ckrm/ckrm.c:587:
+^Iprintk(KERN_WARNING "resid is %d name is %s %s\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1431: FILE: kernel/ckrm/ckrm.c:587:
+	printk(KERN_WARNING "resid is %d name is %s %s\n", 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1432: FILE: kernel/ckrm/ckrm.c:588:
+	       resid, rcbs->res_name,clstype->res_ctlrs[resid]->res_name);
 	                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < CKRM_MAX_RES_CTLRS'
#1435: FILE: kernel/ckrm/ckrm.c:591:
+		if ((resid < CKRM_MAX_RES_CTLRS) && (clstype->res_ctlrs[resid] == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'clstype->res_ctlrs[resid] == NULL'
#1435: FILE: kernel/ckrm/ckrm.c:591:
+		if ((resid < CKRM_MAX_RES_CTLRS) && (clstype->res_ctlrs[resid] == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->res_ctlrs[resid]"
#1435: FILE: kernel/ckrm/ckrm.c:591:
+		if ((resid < CKRM_MAX_RES_CTLRS) && (clstype->res_ctlrs[resid] == NULL)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1438: FILE: kernel/ckrm/ckrm.c:594:
+^I^I^Iset_bit(resid, &clstype->bit_res_ctlrs);^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1440: FILE: kernel/ckrm/ckrm.c:596:
+			if (resid >= clstype->max_resid) {
+				clstype->max_resid = resid + 1;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype->res_ctlrs[i]"
#1451: FILE: kernel/ckrm/ckrm.c:607:
+		if (clstype->res_ctlrs[i] == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1455: FILE: kernel/ckrm/ckrm.c:611:
+^I^I^Iset_bit(i, &clstype->bit_res_ctlrs);^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1456: FILE: kernel/ckrm/ckrm.c:612:
+			if (i >= clstype->max_resid) {
+				clstype->max_resid = i + 1;
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1463: FILE: kernel/ckrm/ckrm.c:619:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1473: FILE: kernel/ckrm/ckrm.c:629:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1474: FILE: kernel/ckrm/ckrm.c:630:
+	resid = ckrm_register_res_ctlr_intern(clstype,rcbs);
 	                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1475: FILE: kernel/ckrm/ckrm.c:631:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1478: FILE: kernel/ckrm/ckrm.c:634:
+^I^I * if necessary "initialize" class in context of this resource $

WARNING:TYPO_SPELLING: 'resouce' may be misspelled - perhaps 'resource'?
#1482: FILE: kernel/ckrm/ckrm.c:638:
+			printk("CKRM .. create res clsobj for resouce <%s> class <%s> par=%p\n", 
 			                                      ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1482: FILE: kernel/ckrm/ckrm.c:638:
+^I^I^Iprintk("CKRM .. create res clsobj for resouce <%s> class <%s> par=%p\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1482: FILE: kernel/ckrm/ckrm.c:638:
+			printk("CKRM .. create res clsobj for resouce <%s> class <%s> par=%p\n", 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1486: FILE: kernel/ckrm/ckrm.c:642:
+				(*clstype->add_resctrl)(core,resid);
 				                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1500: FILE: kernel/ckrm/ckrm.c:656:
+{^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'clstype == NULL'
#1504: FILE: kernel/ckrm/ckrm.c:660:
+	if ((clstype == NULL) || (resid < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#1504: FILE: kernel/ckrm/ckrm.c:660:
+	if ((clstype == NULL) || (resid < 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#1504: FILE: kernel/ckrm/ckrm.c:660:
+	if ((clstype == NULL) || (resid < 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1506: FILE: kernel/ckrm/ckrm.c:662:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1509: FILE: kernel/ckrm/ckrm.c:665:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1514: FILE: kernel/ckrm/ckrm.c:670:
+^Iclear_bit(resid, &clstype->bit_res_ctlrs);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1518: FILE: kernel/ckrm/ckrm.c:674:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1528: FILE: kernel/ckrm/ckrm.c:684:
+struct ckrm_classtype* ckrm_classtypes[CKRM_MAX_CLASSTYPES];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid < 0'
#1537: FILE: kernel/ckrm/ckrm.c:693:
+		if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES) || (ckrm_classtypes[tid]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid > CKRM_MAX_CLASSTYPES'
#1537: FILE: kernel/ckrm/ckrm.c:693:
+		if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES) || (ckrm_classtypes[tid]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ckrm_classtypes[tid]'
#1537: FILE: kernel/ckrm/ckrm.c:693:
+		if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES) || (ckrm_classtypes[tid]))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1541: FILE: kernel/ckrm/ckrm.c:697:
+		int i;
+		for ( i=CKRM_RESV_CLASSTYPES ; i<CKRM_MAX_CLASSTYPES; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1541: FILE: kernel/ckrm/ckrm.c:697:
+		for ( i=CKRM_RESV_CLASSTYPES ; i<CKRM_MAX_CLASSTYPES; i++) {
 		       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1541: FILE: kernel/ckrm/ckrm.c:697:
+		for ( i=CKRM_RESV_CLASSTYPES ; i<CKRM_MAX_CLASSTYPES; i++) {
 		                                ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1541: FILE: kernel/ckrm/ckrm.c:697:
+		for ( i=CKRM_RESV_CLASSTYPES ; i<CKRM_MAX_CLASSTYPES; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ckrm_classtypes[i]"
#1542: FILE: kernel/ckrm/ckrm.c:698:
+			if (ckrm_classtypes[i] == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1548: FILE: kernel/ckrm/ckrm.c:704:
+^Iif (tid == -1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1552: FILE: kernel/ckrm/ckrm.c:708:
+^I$

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1555: FILE: kernel/ckrm/ckrm.c:711:
+		(* rcfs_fn.register_classtype)(clstype);
 		 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid < 0'
#1567: FILE: kernel/ckrm/ckrm.c:723:
+	if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES) || (ckrm_classtypes[tid] != clstype))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tid > CKRM_MAX_CLASSTYPES'
#1567: FILE: kernel/ckrm/ckrm.c:723:
+	if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES) || (ckrm_classtypes[tid] != clstype))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ckrm_classtypes[tid] != clstype'
#1567: FILE: kernel/ckrm/ckrm.c:723:
+	if ((tid < 0) || (tid > CKRM_MAX_CLASSTYPES) || (ckrm_classtypes[tid] != clstype))

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#1571: FILE: kernel/ckrm/ckrm.c:727:
+		(* rcfs_fn.deregister_classtype)(clstype);
 		 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1584: FILE: kernel/ckrm/ckrm.c:740:
+	int i;
+	for ( i=0 ; i<CKRM_MAX_CLASSTYPES; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1584: FILE: kernel/ckrm/ckrm.c:740:
+	for ( i=0 ; i<CKRM_MAX_CLASSTYPES; i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1584: FILE: kernel/ckrm/ckrm.c:740:
+	for ( i=0 ; i<CKRM_MAX_CLASSTYPES; i++) {
 	             ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1584: FILE: kernel/ckrm/ckrm.c:740:
+	for ( i=0 ; i<CKRM_MAX_CLASSTYPES; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1586: FILE: kernel/ckrm/ckrm.c:742:
+^I^Iif (ctype && !strncmp(ctype->name,name,CKRM_MAX_TYPENAME_LEN)) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1586: FILE: kernel/ckrm/ckrm.c:742:
+		struct ckrm_classtype *ctype = ckrm_classtypes[i];
+		if (ctype && !strncmp(ctype->name,name,CKRM_MAX_TYPENAME_LEN)) 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1586: FILE: kernel/ckrm/ckrm.c:742:
+		if (ctype && !strncmp(ctype->name,name,CKRM_MAX_TYPENAME_LEN)) 
 		                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1586: FILE: kernel/ckrm/ckrm.c:742:
+		if (ctype && !strncmp(ctype->name,name,CKRM_MAX_TYPENAME_LEN)) 
 		                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1592: FILE: kernel/ckrm/ckrm.c:748:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1597: FILE: kernel/ckrm/ckrm.c:753:
+struct ckrm_hook_cb* ckrm_event_callbacks[CKRM_NONLATCHABLE_EVENTS];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ev < CKRM_LATCHABLE_EVENTS'
#1606: FILE: kernel/ckrm/ckrm.c:762:
+	if ((ev < CKRM_LATCHABLE_EVENTS) || (ev >= CKRM_NONLATCHABLE_EVENTS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ev >= CKRM_NONLATCHABLE_EVENTS'
#1606: FILE: kernel/ckrm/ckrm.c:762:
+	if ((ev < CKRM_LATCHABLE_EVENTS) || (ev >= CKRM_NONLATCHABLE_EVENTS))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1609: FILE: kernel/ckrm/ckrm.c:765:
+^Iwhile (*cbptr != NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cbptr"
#1609: FILE: kernel/ckrm/ckrm.c:765:
+	while (*cbptr != NULL) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ev < CKRM_LATCHABLE_EVENTS'
#1620: FILE: kernel/ckrm/ckrm.c:776:
+	if ((ev < CKRM_LATCHABLE_EVENTS) || (ev >= CKRM_NONLATCHABLE_EVENTS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ev >= CKRM_NONLATCHABLE_EVENTS'
#1620: FILE: kernel/ckrm/ckrm.c:776:
+	if ((ev < CKRM_LATCHABLE_EVENTS) || (ev >= CKRM_NONLATCHABLE_EVENTS))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cbptr"
#1623: FILE: kernel/ckrm/ckrm.c:779:
+	while ((*cbptr != NULL) && (*cbptr != cb))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cbptr"
#1627: FILE: kernel/ckrm/ckrm.c:783:
+	return (*cbptr == NULL);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1635: FILE: kernel/ckrm/ckrm.c:791:
+	for ( espec = especs ; espec->ev != -1 ; espec++ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1635: FILE: kernel/ckrm/ckrm.c:791:
+	for ( espec = especs ; espec->ev != -1 ; espec++ )

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1636: FILE: kernel/ckrm/ckrm.c:792:
+		ckrm_register_event_cb(espec->ev,&espec->cb);
 		                                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1636: FILE: kernel/ckrm/ckrm.c:792:
+		ckrm_register_event_cb(espec->ev,&espec->cb);
 		                                 ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1645: FILE: kernel/ckrm/ckrm.c:801:
+	for ( espec = especs ; espec->ev != -1 ; espec++ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1645: FILE: kernel/ckrm/ckrm.c:801:
+	for ( espec = especs ; espec->ev != -1 ; espec++ )

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1646: FILE: kernel/ckrm/ckrm.c:802:
+		ckrm_unregister_event_cb(espec->ev,&espec->cb);
 		                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1646: FILE: kernel/ckrm/ckrm.c:802:
+		ckrm_unregister_event_cb(espec->ev,&espec->cb);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1657: FILE: kernel/ckrm/ckrm.c:813:
+	ECC_PRINTK("%d %x\n",current,ev,arg);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1657: FILE: kernel/ckrm/ckrm.c:813:
+	ECC_PRINTK("%d %x\n",current,ev,arg);
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1657: FILE: kernel/ckrm/ckrm.c:813:
+	ECC_PRINTK("%d %x\n",current,ev,arg);
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1658: FILE: kernel/ckrm/ckrm.c:814:
+	if ((anchor = ckrm_event_callbacks[ev]) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1659: FILE: kernel/ckrm/ckrm.c:815:
+^I^Ifor ( cb = anchor ; cb ; cb = cb->next ) $

ERROR:SPACING: space prohibited after that open parenthesis '('
#1659: FILE: kernel/ckrm/ckrm.c:815:
+		for ( cb = anchor ; cb ; cb = cb->next ) 

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1659: FILE: kernel/ckrm/ckrm.c:815:
+		for ( cb = anchor ; cb ; cb = cb->next ) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1665: FILE: kernel/ckrm/ckrm.c:821:
+ *   Generic Functions that can be used as default functions $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1671: FILE: kernel/ckrm/ckrm.c:827:
+int                      $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1684: FILE: kernel/ckrm/ckrm.c:840:
+			seq_printf(seq,"res=%s,guarantee=%d,limit=%d,total_guarantee=%d,max_limit=%d\n",
 			              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1696: FILE: kernel/ckrm/ckrm.c:852:
+int                      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1706: FILE: kernel/ckrm/ckrm.c:862:
+^I^Iif (rcbs && rcbs->get_stats) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1713: FILE: kernel/ckrm/ckrm.c:869:
+int                      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1723: FILE: kernel/ckrm/ckrm.c:879:
+^I^Iif (rcbs && rcbs->show_config) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1734: FILE: kernel/ckrm/ckrm.c:890:
+	struct ckrm_res_ctlr *rcbs = ckrm_resctlr_lookup(clstype,resname);
 	                                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs"
#1737: FILE: kernel/ckrm/ckrm.c:893:
+	if (rcbs == NULL || rcbs->set_config == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs->set_config"
#1737: FILE: kernel/ckrm/ckrm.c:893:
+	if (rcbs == NULL || rcbs->set_config == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1738: FILE: kernel/ckrm/ckrm.c:894:
+^I^Ireturn -EINVAL; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1739: FILE: kernel/ckrm/ckrm.c:895:
+	rc = (*rcbs->set_config)(core->res_class[rcbs->resid],cfgstr);
 	                                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1751: FILE: kernel/ckrm/ckrm.c:907:
+	printk("ckrm_class_set_shares(%s,%s)\n",core->name,resname);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1751: FILE: kernel/ckrm/ckrm.c:907:
+	printk("ckrm_class_set_shares(%s,%s)\n",core->name,resname);
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1751: FILE: kernel/ckrm/ckrm.c:907:
+	printk("ckrm_class_set_shares(%s,%s)\n",core->name,resname);
 	                                                  ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_class_set_shares', this function's name, in a string
#1751: FILE: kernel/ckrm/ckrm.c:907:
+	printk("ckrm_class_set_shares(%s,%s)\n",core->name,resname);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1752: FILE: kernel/ckrm/ckrm.c:908:
+	rcbs = ckrm_resctlr_lookup(clstype,resname);
 	                                  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs"
#1753: FILE: kernel/ckrm/ckrm.c:909:
+	if (rcbs == NULL || rcbs->set_share_values == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs->set_share_values"
#1753: FILE: kernel/ckrm/ckrm.c:909:
+	if (rcbs == NULL || rcbs->set_share_values == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1754: FILE: kernel/ckrm/ckrm.c:910:
+^I^Ireturn -EINVAL; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1755: FILE: kernel/ckrm/ckrm.c:911:
+	rc = (*rcbs->set_share_values)(core->res_class[rcbs->resid],shares);
 	                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1759: FILE: kernel/ckrm/ckrm.c:915:
+int $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1763: FILE: kernel/ckrm/ckrm.c:919:
+	struct ckrm_res_ctlr *rcbs = ckrm_resctlr_lookup(clstype,resname);
 	                                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs"
#1766: FILE: kernel/ckrm/ckrm.c:922:
+	if (rcbs == NULL || rcbs->reset_stats == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcbs->reset_stats"
#1766: FILE: kernel/ckrm/ckrm.c:922:
+	if (rcbs == NULL || rcbs->reset_stats == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1767: FILE: kernel/ckrm/ckrm.c:923:
+^I^Ireturn -EINVAL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1770: FILE: kernel/ckrm/ckrm.c:926:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1773: FILE: kernel/ckrm/ckrm.c:929:
+ *   Initialization $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1781: FILE: kernel/ckrm/ckrm.c:937:
+	ckrm_invoke_event_cb_chain(CKRM_EVENT_NEWTASK,tsk);
 	                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1784: FILE: kernel/ckrm/ckrm.c:940:
+void $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1787: FILE: kernel/ckrm/ckrm.c:943:
+	ckrm_invoke_event_cb_chain(CKRM_EVENT_EXIT,tsk);
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1792: FILE: kernel/ckrm/ckrm.c:948:
+ckrm_init(void) $

CHECK:SPACING: No space is necessary after a cast
#1792: FILE: kernel/ckrm/ckrm.c:948:
+ckrm_init(void) 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1794: FILE: kernel/ckrm/ckrm.c:950:
+	printk("CKRM Initialization\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1795: FILE: kernel/ckrm/ckrm.c:951:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1797: FILE: kernel/ckrm/ckrm.c:953:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1799: FILE: kernel/ckrm/ckrm.c:955:
+^I{ $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1800: FILE: kernel/ckrm/ckrm.c:956:
+		extern void ckrm_meta_init_taskclass(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1805: FILE: kernel/ckrm/ckrm.c:961:
+^I{ $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1806: FILE: kernel/ckrm/ckrm.c:962:
+		extern void ckrm_meta_init_sockclass(void);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1812: FILE: kernel/ckrm/ckrm.c:968:
+	printk("CKRM Initialization done\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1815: FILE: kernel/ckrm/ckrm.c:971:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1816: FILE: kernel/ckrm/ckrm.c:972:
+EXPORT_SYMBOL(ckrm_register_engine);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1817: FILE: kernel/ckrm/ckrm.c:973:
+EXPORT_SYMBOL(ckrm_unregister_engine);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1819: FILE: kernel/ckrm/ckrm.c:975:
+EXPORT_SYMBOL(ckrm_register_res_ctlr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1820: FILE: kernel/ckrm/ckrm.c:976:
+EXPORT_SYMBOL(ckrm_unregister_res_ctlr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1822: FILE: kernel/ckrm/ckrm.c:978:
+EXPORT_SYMBOL(ckrm_init_core_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1823: FILE: kernel/ckrm/ckrm.c:979:
+EXPORT_SYMBOL(ckrm_free_core_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1824: FILE: kernel/ckrm/ckrm.c:980:
+EXPORT_SYMBOL(ckrm_release_core_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1826: FILE: kernel/ckrm/ckrm.c:982:
+EXPORT_SYMBOL(ckrm_register_classtype);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1827: FILE: kernel/ckrm/ckrm.c:983:
+EXPORT_SYMBOL(ckrm_unregister_classtype);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1828: FILE: kernel/ckrm/ckrm.c:984:
+EXPORT_SYMBOL(ckrm_find_classtype_by_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1830: FILE: kernel/ckrm/ckrm.c:986:
+EXPORT_SYMBOL(ckrm_core_grab);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1831: FILE: kernel/ckrm/ckrm.c:987:
+EXPORT_SYMBOL(ckrm_core_drop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1832: FILE: kernel/ckrm/ckrm.c:988:
+EXPORT_SYMBOL(ckrm_is_core_valid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1833: FILE: kernel/ckrm/ckrm.c:989:
+EXPORT_SYMBOL(ckrm_validate_and_grab_core);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1835: FILE: kernel/ckrm/ckrm.c:991:
+EXPORT_SYMBOL(ckrm_register_event_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1836: FILE: kernel/ckrm/ckrm.c:992:
+EXPORT_SYMBOL(ckrm_unregister_event_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1837: FILE: kernel/ckrm/ckrm.c:993:
+EXPORT_SYMBOL(ckrm_register_event_cb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1838: FILE: kernel/ckrm/ckrm.c:994:
+EXPORT_SYMBOL(ckrm_unregister_event_cb);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1840: FILE: kernel/ckrm/ckrm.c:996:
+EXPORT_SYMBOL(ckrm_class_show_stats);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1841: FILE: kernel/ckrm/ckrm.c:997:
+EXPORT_SYMBOL(ckrm_class_show_config);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1842: FILE: kernel/ckrm/ckrm.c:998:
+EXPORT_SYMBOL(ckrm_class_show_shares);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1844: FILE: kernel/ckrm/ckrm.c:1000:
+EXPORT_SYMBOL(ckrm_class_set_config);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1845: FILE: kernel/ckrm/ckrm.c:1001:
+EXPORT_SYMBOL(ckrm_class_set_shares);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1847: FILE: kernel/ckrm/ckrm.c:1003:
+EXPORT_SYMBOL(ckrm_class_reset_stats);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1852: FILE: kernel/ckrm/ckrmutils.c:1:
+/* ckrmutils.c - Utility functions for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1856: FILE: kernel/ckrm/ckrmutils.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1861: FILE: kernel/ckrm/ckrmutils.c:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1870: FILE: kernel/ckrm/ckrmutils.c:19:
+ * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1884: FILE: kernel/ckrm/ckrmutils.c:33:
+	struct vm_area_struct * vma;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1886: FILE: kernel/ckrm/ckrmutils.c:35:
+	struct mm_struct * mm = get_task_mm(tsk);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1892: FILE: kernel/ckrm/ckrmutils.c:41:
+	if (!mm) {
+		return -EINVAL;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1900: FILE: kernel/ckrm/ckrmutils.c:49:
+		if ((vma->vm_flags & VM_EXECUTABLE) &&
+				vma->vm_file) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1904: FILE: kernel/ckrm/ckrmutils.c:53:
+			if (! IS_ERR(lname)) {
 			    ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1904: FILE: kernel/ckrm/ckrmutils.c:53:
+			if (! IS_ERR(lname)) {
[...]
+			} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#1907: FILE: kernel/ckrm/ckrmutils.c:56:
+				rc = (int) PTR_ERR(lname);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1920: FILE: kernel/ckrm/ckrmutils.c:69:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1929: FILE: kernel/ckrm/ckrmutils.c:78:
+	if (new == cur || !parent) {
+		return;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1932: FILE: kernel/ckrm/ckrmutils.c:81:
+	if (new != CKRM_SHARE_DONTCARE) {
+		parent->unused_guarantee -= new;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1935: FILE: kernel/ckrm/ckrmutils.c:84:
+	if (cur != CKRM_SHARE_DONTCARE) {
+		parent->unused_guarantee += cur;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1939: FILE: kernel/ckrm/ckrmutils.c:88:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1943: FILE: kernel/ckrm/ckrmutils.c:92:
+ * Caller is responsible for making sure that the new limit is not more $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1949: FILE: kernel/ckrm/ckrmutils.c:98:
+	if (parent && parent->cur_max_limit < new_limit) {
+		parent->cur_max_limit = new_limit;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1953: FILE: kernel/ckrm/ckrmutils.c:102:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1961: FILE: kernel/ckrm/ckrmutils.c:110:
+set_shares(struct ckrm_shares *new, struct ckrm_shares *cur,
+		struct ckrm_shares *par)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1968: FILE: kernel/ckrm/ckrmutils.c:117:
+	if (new->total_guarantee <= CKRM_SHARE_DONTCARE) {
[...]
+	} else if (new->total_guarantee == CKRM_SHARE_UNCHANGED) {
[...]
+	} else if (cur_usage_guar > new->total_guarantee) {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1977: FILE: kernel/ckrm/ckrmutils.c:126:
+	if (new->max_limit <= CKRM_SHARE_DONTCARE) {
[...]
+	} else if (new->max_limit == CKRM_SHARE_UNCHANGED) {
[...]
+	} else if (cur->cur_max_limit > new->max_limit) {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1986: FILE: kernel/ckrm/ckrmutils.c:135:
+	if (new->my_guarantee == CKRM_SHARE_UNCHANGED) {
[...]
+	} else if (new->my_guarantee == CKRM_SHARE_DONTCARE) {
[...]
+	} else if (par && increase_by > par->unused_guarantee) {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2002: FILE: kernel/ckrm/ckrmutils.c:151:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2003: FILE: kernel/ckrm/ckrmutils.c:152:
+		
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2009: FILE: kernel/ckrm/ckrmutils.c:158:
+		if (new->my_guarantee == CKRM_SHARE_DONTCARE) {
[...]
+		} else if (new->my_guarantee == CKRM_SHARE_UNCHANGED) {
[...]
+		} else if (new->my_guarantee > cur->my_limit) {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2020: FILE: kernel/ckrm/ckrmutils.c:169:
+			if (cur->my_guarantee > new->my_limit) {
+				goto set_share_err;
+			}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2030: FILE: kernel/ckrm/ckrmutils.c:179:
+		child_guarantee_changed(par, cur->my_guarantee,
+				new->my_guarantee);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2044: FILE: kernel/ckrm/ckrmutils.c:193:
+	if (new->max_limit != CKRM_SHARE_UNCHANGED) {
+		cur->max_limit = new->max_limit;
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2053: FILE: kernel/ckrm/ckrmutils.c:202:
+EXPORT_SYMBOL(get_exe_path_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2054: FILE: kernel/ckrm/ckrmutils.c:203:
+EXPORT_SYMBOL(child_guarantee_changed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2055: FILE: kernel/ckrm/ckrmutils.c:204:
+EXPORT_SYMBOL(child_maxlimit_changed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2056: FILE: kernel/ckrm/ckrmutils.c:205:
+EXPORT_SYMBOL(set_shares);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2058: FILE: kernel/ckrm/ckrmutils.c:207:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2112: FILE: kernel/fork.c:1149:
+	if (numtasks_get_ref(current->taskclass, 0) == 0) {
+		return -ENOMEM;
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 325 errors, 262 warnings, 127 checks, 2094 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
