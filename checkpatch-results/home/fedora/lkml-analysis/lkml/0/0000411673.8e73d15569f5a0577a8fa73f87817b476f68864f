WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
ChangeSet@1.695.1.6, 2002-11-21 16:42:17-02:00, riel@duckman.distro.conectiva

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#36: 
--- a/fs/buffer.c	Fri Nov 22 00:36:57 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#42: FILE: fs/buffer.c:2918:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: fs/buffer.c:2933:
+^I^I^Iif (!buffer_locked(bh)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: fs/buffer.c:2935:
+^I^I^Ielse $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#142: FILE: include/linux/mm.h:10:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#143: FILE: include/linux/mm.h:11:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: include/linux/mm.h:13:
+ * Authors: $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#161: FILE: include/linux/mm.h:189:
+					   protected by the lru lock !! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <TestandSetPageActiveAnon>
#219: FILE: include/linux/mm.h:456:
+#define TestandSetPageActiveAnon(page)	test_and_set_bit(PG_active_anon, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <TestandClearPageActiveAnon>
#220: FILE: include/linux/mm.h:457:
+#define TestandClearPageActiveAnon(page)	test_and_clear_bit(PG_active_anon, &(page)->flags)

CHECK:CAMELCASE: Avoid CamelCase: <TestandSetPageActiveCache>
#225: FILE: include/linux/mm.h:462:
+#define TestandSetPageActiveCache(page)	test_and_set_bit(PG_active_cache, &(page)->flags)

CHECK:CAMELCASE: Avoid CamelCase: <TestandClearPageActiveCache>
#226: FILE: include/linux/mm.h:463:
+#define TestandClearPageActiveCache(page)	test_and_clear_bit(PG_active_cache, &(page)->flags)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: include/linux/mm_inline.h:8:
+
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#252: FILE: include/linux/mm_inline.h:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#253: FILE: include/linux/mm_inline.h:17:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: include/linux/mm_inline.h:19:
+ * Authors: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: include/linux/mm_inline.h:36:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: include/linux/mm_inline.h:38:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: include/linux/mm_inline.h:38:
+ $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#292: FILE: include/linux/mm_inline.h:56:
+	tmp = bh = page->buffers;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#295: FILE: include/linux/mm_inline.h:59:
+		if (tmp->b_state & ((1<<BH_Dirty) | (1<<BH_Lock)))
 		                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#295: FILE: include/linux/mm_inline.h:59:
+		if (tmp->b_state & ((1<<BH_Dirty) | (1<<BH_Lock)))
 		                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: include/linux/mm_inline.h:74:
+static inline int page_anon(struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#315: FILE: include/linux/mm_inline.h:78:
+	 * set of the process... */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#334: FILE: include/linux/mm_inline.h:96:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#336: FILE: include/linux/mm_inline.h:98:
+static inline void add_page_to_active_anon_list(struct page * page, int age)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#351: FILE: include/linux/mm_inline.h:109:
+static inline void add_page_to_active_cache_list(struct page * page, int age)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#353: FILE: include/linux/mm_inline.h:111:
+	struct zone_struct * zone = page_zone(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: include/linux/mm_inline.h:112:
+	struct zone_struct * zone = page_zone(page);
+	DEBUG_LRU_PAGE(page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#362: FILE: include/linux/mm_inline.h:120:
+static inline void add_page_to_active_list(struct page * page, int age)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: include/linux/mm_inline.h:138:
+static inline void add_page_to_inactive_laundry_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: include/linux/mm_inline.h:140:
+	struct zone_struct * zone = page_zone(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: include/linux/mm_inline.h:141:
+	struct zone_struct * zone = page_zone(page);
+	DEBUG_LRU_PAGE(page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: include/linux/mm_inline.h:158:
+static inline void del_page_from_active_anon_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: include/linux/mm_inline.h:160:
+	struct zone_struct * zone = page_zone(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#397: FILE: include/linux/mm_inline.h:162:
+	unsigned char age;
+	list_del(&page->lru);

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#402: FILE: include/linux/mm_inline.h:167:
+	if (age<=MAX_AGE)
 	       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: include/linux/mm_inline.h:172:
+static inline void del_page_from_active_cache_list(struct page * page)

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#419: FILE: include/linux/mm_inline.h:181:
+	if (age<=MAX_AGE)
 	       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#428: FILE: include/linux/mm_inline.h:196:
+static inline void del_page_from_inactive_laundry_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#430: FILE: include/linux/mm_inline.h:198:
+	struct zone_struct * zone = page_zone(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: include/linux/mm_inline.h:199:
+	struct zone_struct * zone = page_zone(page);
+	list_del(&page->lru);

WARNING:LINE_SPACING: Missing a blank line after declarations
#457: FILE: include/linux/mm_inline.h:400:
+	unsigned long active, inactive;
+	active = zone->active_anon_pages + zone->active_cache_pages

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#459: FILE: include/linux/mm_inline.h:402:
+	inactive = zone->inactive_dirty_pages + zone->inactive_clean_pages + zone->inactive_laundry_pages;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#460: FILE: include/linux/mm_inline.h:403:
+	if (inactive * 5 >   (active+inactive))
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#540: FILE: include/linux/mmzone.h:60:
+	int			active_anon_count[MAX_AGE+1];
 	   			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#541: FILE: include/linux/mmzone.h:61:
+	int			active_cache_count[MAX_AGE+1];
 	   			                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#547: FILE: include/linux/mmzone.h:66:
+	struct list_head	active_anon_list[MAX_AGE+1];
 	                	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#548: FILE: include/linux/mmzone.h:67:
+	struct list_head	active_cache_list[MAX_AGE+1];
 	                	                         ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#553: FILE: include/linux/mmzone.h:72:
+	spinlock_t		lru_lock;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#564: FILE: include/linux/module.h:290:
+#define GPL_HEADER() \
+static const char cpyright="This software may be freely redistributed under the terms of the GNU General Public License.";

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#565: FILE: include/linux/module.h:291:
+static const char cpyright="This software may be freely redistributed under the terms of the GNU General Public License.";

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#565: FILE: include/linux/module.h:291:
+static const char cpyright="This software may be freely redistributed under the terms of the GNU General Public License.";
                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: include/linux/pagemap.h:89:
+extern int wait_on_page_timeout(struct page *page, int timeout);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#606: FILE: include/linux/pagemap.h:91:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#607: FILE: include/linux/pagemap.h:92:
+extern struct page * __find_pagecache_page(struct address_space *mapping,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#607: FILE: include/linux/pagemap.h:92:
+extern struct page * __find_pagecache_page(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: include/linux/pagemap.h:93:
+extern struct page * __find_pagecache_page(struct address_space *mapping,
+				unsigned long index, struct page **hash);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mapping' - possible side-effects?
#609: FILE: include/linux/pagemap.h:94:
+#define find_pagecache_page(mapping, index) \
+	__find_pagecache_page(mapping, index, page_hash(mapping, index))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#609: FILE: include/linux/pagemap.h:94:
+#define find_pagecache_page(mapping, index) \
+	__find_pagecache_page(mapping, index, page_hash(mapping, index))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#633: FILE: include/linux/swap.h:120:
+extern void FASTCALL(lru_cache_add_dirty(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#633: FILE: include/linux/swap.h:120:
+extern void FASTCALL(lru_cache_add_dirty(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#657: FILE: include/linux/swap.h:200:
+		BUG();				\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#661: FILE: include/linux/swap.h:204:
+		BUG();				\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: mm/filemap.c:58:
+ * NOTE: to avoid deadlocking you must never acquire the lru lock $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#720: FILE: mm/filemap.c:882:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: mm/filemap.c:884:
+ * returns 1 on timeout $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: mm/filemap.c:891:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#800: FILE: mm/filemap.c:1094:
+struct page * __find_pagecache_page(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: mm/filemap.c:1095:
+struct page * __find_pagecache_page(struct address_space *mapping,
+			      unsigned long offset, struct page **hash)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#817: FILE: mm/filemap.c:1111:
 
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#878: FILE: mm/page_alloc.c:115:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#884: FILE: mm/page_alloc.c:121:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#900: FILE: mm/page_alloc.c:736:
+	printk("( Active: %d/%d, inactive_laundry: %d, inactive_clean: %d, free: %d )\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: mm/page_alloc.c:737:
+	printk("( Active: %d/%d, inactive_laundry: %d, inactive_clean: %d, free: %d )\n",
+		nr_active_anon_pages + nr_active_cache_pages,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1020: FILE: mm/swap.c:80:
+void drop_page_zone(struct zone_struct *zone, struct page * page)

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#1022: FILE: mm/swap.c:82:
+	if (!TryLockPage(page)) {

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#1030: FILE: mm/swap.c:90:
+		UnlockPage(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1036: FILE: mm/swap.c:96:
+	if (!page->mapping || PageDirty(page) || page->pte_chain ||
+			page->buffers || page_count(page) > 1)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1147: FILE: mm/swap.c:203:
+	if (PageActiveAnon(page)) {
[...]
+	} else if (PageActiveCache(page)) {
[...]
 	} else if (PageInactiveDirty(page)) {
[...]
+	} else if (PageInactiveLaundry(page)) {
[...]
 	} else if (PageInactiveClean(page)) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1216: FILE: mm/vmscan.c:44:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1217: FILE: mm/vmscan.c:45:
+	new_age = old_age+4;
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1221: FILE: mm/vmscan.c:49:
+^I^Inew_age = MAX_AGE;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1222: FILE: mm/vmscan.c:50:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1225: FILE: mm/vmscan.c:53:
+^I^Iadd_page_to_active_anon_list(page, new_age);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1228: FILE: mm/vmscan.c:56:
+^I^Iadd_page_to_active_cache_list(page, new_age);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1231: FILE: mm/vmscan.c:59:
+^I^Iadd_page_to_active_list(page, new_age);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: mm/vmscan.c:62:
+^I^Iadd_page_to_active_list(page, new_age);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1237: FILE: mm/vmscan.c:65:
+^I^Iadd_page_to_active_list(page, new_age);^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1238: FILE: mm/vmscan.c:66:
+	} else return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1245: FILE: mm/vmscan.c:70:
 
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1271: FILE: mm/vmscan.c:118:
+		BUG_ON(unlikely(!PageInactiveClean(page)));

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#1308: FILE: mm/vmscan.c:185:
+ * Returns true if the zone in question has an inbalance between inactive
                                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1313: FILE: mm/vmscan.c:189:
+static inline int need_rebalance_dirty(zone_t * zone)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1341: FILE: mm/vmscan.c:204:
+static inline int need_rebalance_laundry(zone_t * zone)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1414: FILE: mm/vmscan.c:222:
+int launder_page(zone_t * zone, int gfp_mask, struct page *page)

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#1423: FILE: mm/vmscan.c:229:
+	if (unlikely(page_count(page)) == 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1429: FILE: mm/vmscan.c:232:
+	BUG_ON(!PageInactiveDirty(page));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1433: FILE: mm/vmscan.c:236:
+	page->age = (jiffies/HZ)&255;
 	                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1433: FILE: mm/vmscan.c:236:
+	page->age = (jiffies/HZ)&255;
 	                        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1440: FILE: mm/vmscan.c:243:
+	if (unlikely(TryLockPage(page))) {
+		return 1;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1455: FILE: mm/vmscan.c:253:
+	if (page_referenced(page, &over_rsslimit) && !over_rsslimit &&
+			page_mapping_inuse(page)) {

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#1508: FILE: mm/vmscan.c:285:
+		if (unlikely(page_count(page)) == 0) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1529: FILE: mm/vmscan.c:297:
+		switch (try_to_unmap(page)) {
+			case SWAP_ERROR:
+			case SWAP_FAIL:
[...]
+			case SWAP_AGAIN:
[...]
+			case SWAP_SUCCESS:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1555: FILE: mm/vmscan.c:306:
+				; /* fall through, try freeing the page below */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1581: FILE: mm/vmscan.c:318:
+		int (*writepage)(struct page *);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1595: FILE: mm/vmscan.c:332:
+			return 1;
+		} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1638: FILE: mm/vmscan.c:354:
+^I^I/* $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1669: FILE: mm/vmscan.c:376:
+	if (page->mapping && !PageDirty(page) && !page->pte_chain &&
+			page_count(page) == 1) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1673: FILE: mm/vmscan.c:380:
+		return 1;
+	} else {

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1706: FILE: mm/vmscan.c:395:
+unsigned char active_age_bias = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1712: FILE: mm/vmscan.c:399:
+static inline void kachunk_anon(struct zone_struct * zone)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1715: FILE: mm/vmscan.c:402:
+	int k;
+	if (!list_empty(&zone->active_anon_list[0]))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1749: FILE: mm/vmscan.c:408:
+		list_splice_init(&zone->active_anon_list[k+1], &zone->active_anon_list[k]);
 		                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1750: FILE: mm/vmscan.c:409:
+		zone->active_anon_count[k] = zone->active_anon_count[k+1];
 		                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1751: FILE: mm/vmscan.c:410:
+		zone->active_anon_count[k+1] = 0;
 		                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1759: FILE: mm/vmscan.c:418:
+static inline void kachunk_cache(struct zone_struct * zone)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1762: FILE: mm/vmscan.c:421:
+	int k;
+	if (!list_empty(&zone->active_cache_list[0]))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1768: FILE: mm/vmscan.c:427:
+		list_splice_init(&zone->active_cache_list[k+1], &zone->active_cache_list[k]);
 		                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1769: FILE: mm/vmscan.c:428:
+		zone->active_cache_count[k] = zone->active_cache_count[k+1];
 		                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1770: FILE: mm/vmscan.c:429:
+		zone->active_cache_count[k+1] = 0;
 		                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1785: FILE: mm/vmscan.c:443:
+static inline int cache_ratio(struct zone_struct * zone)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1809: FILE: mm/vmscan.c:467:
+int refill_inactive_zone(struct zone_struct * zone, int priority, int target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1812: FILE: mm/vmscan.c:470:
+	struct list_head * page_lru;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1813: FILE: mm/vmscan.c:471:
+	struct page * page;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1827: FILE: mm/vmscan.c:485:
+		int anon_work, cache_work;
+		anon_work = active_anon_work[ratio];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1855: FILE: mm/vmscan.c:498:
+			BUG_ON(unlikely(!PageActiveAnon(page)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1856: FILE: mm/vmscan.c:499:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1898: FILE: mm/vmscan.c:539:
+			BUG_ON(unlikely(!PageActiveCache(page)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1899: FILE: mm/vmscan.c:540:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1951: FILE: mm/vmscan.c:575:
+static int need_active_anon_scan(struct zone_struct * zone)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1957: FILE: mm/vmscan.c:579:
+	int k;
+	for (k=0; k < MAX_AGE/2; k++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1957: FILE: mm/vmscan.c:579:
+	for (k=0; k < MAX_AGE/2; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1957: FILE: mm/vmscan.c:579:
+	for (k=0; k < MAX_AGE/2; k++)
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1972: FILE: mm/vmscan.c:582:
+	for (k=MAX_AGE/2; k <= MAX_AGE; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1972: FILE: mm/vmscan.c:582:
+	for (k=MAX_AGE/2; k <= MAX_AGE; k++)
 	              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1975: FILE: mm/vmscan.c:585:
+	if (high<low)
 	        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1980: FILE: mm/vmscan.c:590:
+static int need_active_cache_scan(struct zone_struct * zone)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1984: FILE: mm/vmscan.c:594:
+	int k;
+	for (k=0; k < MAX_AGE/2; k++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1984: FILE: mm/vmscan.c:594:
+	for (k=0; k < MAX_AGE/2; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1984: FILE: mm/vmscan.c:594:
+	for (k=0; k < MAX_AGE/2; k++)
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1987: FILE: mm/vmscan.c:597:
+	for (k=MAX_AGE/2; k <= MAX_AGE; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1987: FILE: mm/vmscan.c:597:
+	for (k=MAX_AGE/2; k <= MAX_AGE; k++)
 	              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1991: FILE: mm/vmscan.c:600:
+	if (high<low)
 	        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2002: FILE: mm/vmscan.c:605:
+static int scan_active_list(struct zone_struct * zone, int age, int anon)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2004: FILE: mm/vmscan.c:607:
+	struct list_head * list, *page_lru , *next;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2004: FILE: mm/vmscan.c:607:
+	struct list_head * list, *page_lru , *next;
 	                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2005: FILE: mm/vmscan.c:608:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2031: FILE: mm/vmscan.c:633:
+int rebalance_laundry_zone(struct zone_struct * zone, int max_work, unsigned int gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2062: FILE: mm/vmscan.c:650:
+		BUG_ON(unlikely(!PageInactiveLaundry(page)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done < max_work'
#2074: FILE: mm/vmscan.c:659:
+			if ((gfp_mask & __GFP_WAIT) && (work_done < max_work)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2076: FILE: mm/vmscan.c:661:
+^I^I^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2091: FILE: mm/vmscan.c:676:
+					unsigned char now;
+					now = (jiffies/HZ)&255;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2091: FILE: mm/vmscan.c:676:
+					now = (jiffies/HZ)&255;
 					              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2091: FILE: mm/vmscan.c:676:
+					now = (jiffies/HZ)&255;
 					                  ^

CHECK:BRACES: Unbalanced braces around else statement
#2105: FILE: mm/vmscan.c:690:
+			} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done > BATCH_WORK_AMOUNT'
#2145: FILE: mm/vmscan.c:712:
+		if ((work_done > BATCH_WORK_AMOUNT) && (!need_rebalance_laundry(zone)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2161: FILE: mm/vmscan.c:724:
+int rebalance_dirty_zone(struct zone_struct * zone, int max_work, unsigned int gfp_mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2163: FILE: mm/vmscan.c:726:
+	struct list_head * page_lru;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2166: FILE: mm/vmscan.c:729:
+	struct page * page;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2178: FILE: mm/vmscan.c:741:
+		BUG_ON(unlikely(!PageInactiveDirty(page)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done > BATCH_WORK_AMOUNT'
#2216: FILE: mm/vmscan.c:760:
+		if ((work_done > BATCH_WORK_AMOUNT) && (!need_rebalance_dirty(zone)))

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2225: FILE: mm/vmscan.c:769:
+int rebalance_inactive_zone(struct zone_struct * zone, int max_work, unsigned int gfp_mask, int goal_percentage)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2225: FILE: mm/vmscan.c:769:
+int rebalance_inactive_zone(struct zone_struct * zone, int max_work, unsigned int gfp_mask, int goal_percentage)

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#2229: FILE: mm/vmscan.c:773:
+	if (((zone->inactive_laundry_pages + zone->inactive_clean_pages + zone->free_pages)*100 < zone->size * goal_percentage) &&

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2229: FILE: mm/vmscan.c:773:
+	if (((zone->inactive_laundry_pages + zone->inactive_clean_pages + zone->free_pages)*100 < zone->size * goal_percentage) &&
 	                                                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2230: FILE: mm/vmscan.c:774:
+	if (((zone->inactive_laundry_pages + zone->inactive_clean_pages + zone->free_pages)*100 < zone->size * goal_percentage) &&
+			(inactive_high(zone) > 0))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2260: FILE: mm/vmscan.c:790:
+	struct zone_struct * zone;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#2293: FILE: mm/vmscan.c:823:
+	for_each_zone(zone)
+			rebalance_dirty_zone(zone, BATCH_WORK_AMOUNT, GFP_KSWAPD);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2323: FILE: mm/vmscan.c:865:
+	if (ret < free_low(ANY_ZONE) && (gfp_mask&__GFP_WAIT))
 	                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2340: FILE: mm/vmscan.c:882:
+	struct zone_struct * zone;

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2359: FILE: mm/vmscan.c:901:
+		if (free_high(zone)>0)
 		                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2396: FILE: mm/vmscan.c:1113:
+	struct zone_struct * zone;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2418: FILE: mm/vmscan.c:1138:
+ * from the init process. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2425: FILE: mm/vmscan.c:1145:
+ * ends up at the maximum age. $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2427: FILE: mm/vmscan.c:1147:
+#define MAX_AGING_INTERVAL 5*HZ
                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2427: FILE: mm/vmscan.c:1147:
+#define MAX_AGING_INTERVAL 5*HZ

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2428: FILE: mm/vmscan.c:1148:
+#define MIN_AGING_INTERVAL HZ/2
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2428: FILE: mm/vmscan.c:1148:
+#define MIN_AGING_INTERVAL HZ/2

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2432: FILE: mm/vmscan.c:1152:
+	struct zone_struct * zone;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2442: FILE: mm/vmscan.c:1162:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2445: FILE: mm/vmscan.c:1165:
+^I^Ischedule_timeout(pause);^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2480: FILE: mm/vmscan.c:1200:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411673.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 84 errors, 42 warnings, 58 checks, 2327 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411673.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
