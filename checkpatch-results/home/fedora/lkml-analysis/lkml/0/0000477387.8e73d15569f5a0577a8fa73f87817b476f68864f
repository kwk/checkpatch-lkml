WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
diff -u --recursive --new-file linux-2.5.4-rpc_bkl/fs/nfs/dir.c linux-2.5.4-rdplus/fs/nfs/dir.c

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: fs/nfs/dir.c:40:
+static int nfs_cached_lookup(struct inode *, struct dentry *,
+				struct nfs_fh *, struct nfs_fattr *);

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#74: FILE: fs/nfs/dir.c:114:
+		if (error == -ENOTSUPP && desc->plus) {

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#122: FILE: fs/nfs/dir.c:287:
+		unsigned d_type = DT_UNKNOWN;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#142: FILE: fs/nfs/dir.c:364:
+	desc->entry->cookie = desc->entry->prev_cookie = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#172: FILE: fs/nfs/dir.c:404:
+	my_entry.cookie = my_entry.prev_cookie = 0;

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#186: FILE: fs/nfs/dir.c:533:
+		if (memcmp(NFS_FH(inode), &fhandle, sizeof(struct nfs_fh))!= 0)
 		                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#235: FILE: fs/nfs/dir.c:664:
+	while((status = dir_decode(desc)) == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: fs/nfs/dir.c:686:
+int nfs_cached_lookup(struct inode *dir, struct dentry *dentry,
+			struct nfs_fh *fh, struct nfs_fattr *fattr)

ERROR:SPACING: space required after that ';' (ctx:BxV)
#281: FILE: fs/nfs/dir.c:710:
+	for(;(page = find_get_page(&dir->i_data, desc.page_index)); desc.page_index++) {
 	    ^

ERROR:SPACING: space required before the open parenthesis '('
#281: FILE: fs/nfs/dir.c:710:
+	for(;(page = find_get_page(&dir->i_data, desc.page_index)); desc.page_index++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#282: FILE: fs/nfs/dir.c:711:
+	for(;(page = find_get_page(&dir->i_data, desc.page_index)); desc.page_index++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#284: FILE: fs/nfs/dir.c:713:
+		if (Page_Uptodate(page)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#321: FILE: fs/nfs/inode.c:682:
+#define NFS_LIMIT_READDIRPLUS (8*PAGE_SIZE)
                                 ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#331: FILE: fs/nfs/inode.c:729:
+			if (nfs_server_capable(inode, NFS_CAP_READDIRPLUS)
+			    && fattr->size <= NFS_LIMIT_READDIRPLUS)

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: fs/nfs/nfs3xdr.c:675:
+		} else

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#418: FILE: fs/nfs/nfs3xdr.c:676:
+			memset((u8*)(entry->fh), 0, sizeof(*entry->fh));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#461: FILE: include/linux/nfs_fs_sb.h:43:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 3 warnings, 10 checks, 386 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000477387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
