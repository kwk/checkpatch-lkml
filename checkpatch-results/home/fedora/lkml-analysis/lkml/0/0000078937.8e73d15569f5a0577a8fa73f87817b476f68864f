WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#446: FILE: arch/powerpc/kernel/head_64.S:1303:
+	ld	r12,_MSR(r1)		/* Reenable interrupts if they */
 	  	            		   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#544: FILE: arch/powerpc/kernel/module_64.c:403:
+				printk(KERN_ERR "%s: TPREL16 relocation "

WARNING:SPLIT_STRING: quoted string split across lines
#545: FILE: arch/powerpc/kernel/module_64.c:404:
+				printk(KERN_ERR "%s: TPREL16 relocation "
+				       "too large (%d)\n", value - 0x8000);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((__used__))
#771: FILE: include/asm-powerpc/percpu.h:11:
+	__thread __typeof__(type) per_cpu__##name __attribute__((__used__))

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#781: FILE: include/asm-powerpc/percpu.h:17:
+	(*(__typeof__(&per_cpu__##var))({			\
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#783: FILE: include/asm-powerpc/percpu.h:19:
+		asm("addi %0,%1,per_cpu__"#var"@tprel"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#797: FILE: include/asm-powerpc/percpu.h:26:
+#define percpu_modcopy(pcpudst, src, size, total_size)			    \
+do {									    \
+	unsigned int __i;						    \
+	extern char __per_cpu_start[];					    \
+	unsigned long offset = (unsigned long)(pcpudst) - 0x8000;	    \
+	for_each_possible_cpu(__i) {					    \
+		memcpy((void *)(offset + paca[__i].thread_ptr),		    \
+		       (src), (size));					    \
+		if ((size) < (total_size))				    \
+			memset((void *)(offset + (size) + paca[__i].thread_ptr), \
+			       0, (total_size) - (size));		    \
+	}								    \
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'total_size' - possible side-effects?
#797: FILE: include/asm-powerpc/percpu.h:26:
+#define percpu_modcopy(pcpudst, src, size, total_size)			    \
+do {									    \
+	unsigned int __i;						    \
+	extern char __per_cpu_start[];					    \
+	unsigned long offset = (unsigned long)(pcpudst) - 0x8000;	    \
+	for_each_possible_cpu(__i) {					    \
+		memcpy((void *)(offset + paca[__i].thread_ptr),		    \
+		       (src), (size));					    \
+		if ((size) < (total_size))				    \
+			memset((void *)(offset + (size) + paca[__i].thread_ptr), \
+			       0, (total_size) - (size));		    \
+	}								    \
 } while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#813: FILE: include/asm-powerpc/percpu.h:42:
+#define DECLARE_PER_CPU(type, name) \
+	extern __thread __typeof__(type) per_cpu__##name

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#817: FILE: include/asm-powerpc/percpu.h:46:
+#define __EXPORT_PER_CPU_SYMBOL(sym, sec)				\
+	extern __thread typeof(sym) sym;				\
+	__CRC_SYMBOL(sym, sec)						\
+	static const char __kstrtab_##sym[]				\
+	__attribute__((used, section("__ksymtab_strings"))) = #sym;	\
+	asm(".section	__ksymtab"sec",\"aw\",@progbits\n"		\
+	    "	.align 3\n"						\
+	    "	.type	__ksymtab_"#sym", @object\n"			\
+	    "	.size	__ksymtab_"#sym", 16\n"				\
+	    "__ksymtab_"#sym":\n"					\
+	    "	.quad	0x8000+"#sym"@tprel\n"				\
+	    "	.quad	__kstrtab_"#sym)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sec' - possible side-effects?
#817: FILE: include/asm-powerpc/percpu.h:46:
+#define __EXPORT_PER_CPU_SYMBOL(sym, sec)				\
+	extern __thread typeof(sym) sym;				\
+	__CRC_SYMBOL(sym, sec)						\
+	static const char __kstrtab_##sym[]				\
+	__attribute__((used, section("__ksymtab_strings"))) = #sym;	\
+	asm(".section	__ksymtab"sec",\"aw\",@progbits\n"		\
+	    "	.align 3\n"						\
+	    "	.type	__ksymtab_"#sym", @object\n"			\
+	    "	.size	__ksymtab_"#sym", 16\n"				\
+	    "__ksymtab_"#sym":\n"					\
+	    "	.quad	0x8000+"#sym"@tprel\n"				\
+	    "	.quad	__kstrtab_"#sym)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((used))
#821: FILE: include/asm-powerpc/percpu.h:50:
+	__attribute__((used, section("__ksymtab_strings"))) = #sym;	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab_strings") over __attribute__((section("__ksymtab_strings")))
#821: FILE: include/asm-powerpc/percpu.h:50:
+	__attribute__((used, section("__ksymtab_strings"))) = #sym;	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#822: FILE: include/asm-powerpc/percpu.h:51:
+	asm(".section	__ksymtab"sec",\"aw\",@progbits\n"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#824: FILE: include/asm-powerpc/percpu.h:53:
+	    "	.type	__ksymtab_"#sym", @object\n"			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#825: FILE: include/asm-powerpc/percpu.h:54:
+	    "	.size	__ksymtab_"#sym", 16\n"				\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#826: FILE: include/asm-powerpc/percpu.h:55:
+	    "__ksymtab_"#sym":\n"					\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#827: FILE: include/asm-powerpc/percpu.h:56:
+	    "	.quad	0x8000+"#sym"@tprel\n"				\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#838: FILE: include/asm-powerpc/percpu.h:67:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 7 warnings, 11 checks, 718 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
