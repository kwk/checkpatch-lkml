WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#108: 
diff -X dontdiff -uprN linux-2.6.4/arch/alpha/kernel/systbls.S linux-2.6.4-fdmap/arch/alpha/kernel/systbls.S

ERROR:SPACING: space prohibited after that open square bracket '['
#356: FILE: arch/um/kernel/sys_call_table.c:493:
+	[ __NR_fdmap ] = sys_fdmap,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close square bracket ']'
#356: FILE: arch/um/kernel/sys_call_table.c:493:
+	[ __NR_fdmap ] = sys_fdmap,

ERROR:SPACING: space prohibited after that open square bracket '['
#358: FILE: arch/um/kernel/sys_call_table.c:495:
+	[ __NR_fdmap ] = sys_ni_syscall,

ERROR:SPACING: space prohibited before that close square bracket ']'
#358: FILE: arch/um/kernel/sys_call_table.c:495:
+	[ __NR_fdmap ] = sys_ni_syscall,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#412: FILE: fs/fdmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#460: FILE: fs/fdmap.c:49:
+#include <asm/uaccess.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#462: FILE: fs/fdmap.c:51:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#467: FILE: fs/fdmap.c:56:
+typedef struct {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: fs/fdmap.c:62:
+static struct super_block *fdmap_get_sb(struct file_system_type *fs_type,
+		int flags, const char *dev, void *data);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#482: FILE: fs/fdmap.c:71:
+static struct page* fdmap_nopage(struct vm_area_struct *area,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: fs/fdmap.c:72:
+static struct page* fdmap_nopage(struct vm_area_struct *area,
+		unsigned long address, int *type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: fs/fdmap.c:79:
+static ssize_t fdmap_write(struct file *f, const char *buf, size_t size,
+		loff_t *off);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: fs/fdmap.c:83:
+static unsigned int fdmap_copy_from_user_to_user(unsigned long base_dst,
+		unsigned long base_src,

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#499: FILE: fs/fdmap.c:88:
+static struct super_operations fdmap_super_ops =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#505: FILE: fs/fdmap.c:94:
+static struct file_system_type fdmap_fs_type =
+{

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#511: FILE: fs/fdmap.c:100:
+static struct dentry_operations fdmap_dentry_ops =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#512: FILE: fs/fdmap.c:101:
+static struct dentry_operations fdmap_dentry_ops =
+{

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#516: FILE: fs/fdmap.c:105:
+static struct vm_operations_struct fdmap_vm_ops =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#517: FILE: fs/fdmap.c:106:
+static struct vm_operations_struct fdmap_vm_ops =
+{

WARNING:CONST_STRUCT: struct file_operations should normally be const
#521: FILE: fs/fdmap.c:110:
+static struct file_operations fdmap_file_ops =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#522: FILE: fs/fdmap.c:111:
+static struct file_operations fdmap_file_ops =
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: fs/fdmap.c:130:
+	fdmap_inode_cachep = kmem_cache_create("fdmap_inode_cache",
+			sizeof(fdmap_alloc), 0,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#546: FILE: fs/fdmap.c:135:
+		printk("fdmap: failed to allocate cache.\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#552: FILE: fs/fdmap.c:141:
+	if (!(fdmap_mnt = kern_mount(&fdmap_fs_type))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#552: FILE: fs/fdmap.c:141:
+	if (!(fdmap_mnt = kern_mount(&fdmap_fs_type))) {
+		printk("fdmap: failed to mount fdmapfs.\n");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#553: FILE: fs/fdmap.c:142:
+		printk("fdmap: failed to mount fdmapfs.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: fs/fdmap.c:149:
+static struct super_block *fdmap_get_sb(struct file_system_type *fs_type,
+		int flags, const char *dev, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: fs/fdmap.c:155:
+static void fdmap_init_once(void *ctx, kmem_cache_t *cachep,
+		unsigned long flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#601: FILE: fs/fdmap.c:190:
+static struct page* fdmap_nopage(struct vm_area_struct *area,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: fs/fdmap.c:191:
+static struct page* fdmap_nopage(struct vm_area_struct *area,
+		unsigned long addr, int *type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: fs/fdmap.c:208:
+	if (get_user_pages(current, current->mm, fmc->vma + offset, 1, 0, 0,
+			&fpage, NULL) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/fdmap.c:236:
+	if ((atomic_read(&fdmap_initialized) == 1) &&
+			(atomic_dec_and_test(&fdmap_initialized)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!len'
#650: FILE: fs/fdmap.c:239:
+	if ((!len) ||
+			((addr + len) > TASK_SIZE) ||
+			((addr + len) < addr)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#651: FILE: fs/fdmap.c:240:
+	if ((!len) ||
+			((addr + len) > TASK_SIZE) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#679: FILE: fs/fdmap.c:268:
+	if (flags & O_RDONLY)
+	   flags &= ~O_WRONLY;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#681: FILE: fs/fdmap.c:270:
+	if (flags & O_WRONLY)
+	   flags &= ~O_RDONLY;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#684: FILE: fs/fdmap.c:273:
+	if (!(inode = new_inode(fdmap_mnt->mnt_sb)))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#687: FILE: fs/fdmap.c:276:
+	inode->i_mode = S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#694: FILE: fs/fdmap.c:283:
+	if ((fd = get_unused_fd()) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#697: FILE: fs/fdmap.c:286:
+	if (!(file = get_empty_filp()))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#719: FILE: fs/fdmap.c:308:
+	file->f_op         = inode->i_fop = &fdmap_file_ops;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#752: FILE: fs/fdmap.c:341:
+	switch (whence) {
[...]
+		case 0:
[...]
+		case 1:
[...]
+		case 2:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#753: FILE: fs/fdmap.c:342:
+	switch (whence) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'off < 0'
#762: FILE: fs/fdmap.c:351:
+			if ((off < 0) && (f->f_pos + off < fmc->vma_len))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'off >= 0'
#764: FILE: fs/fdmap.c:353:
+			if ((off >= 0) && (f->f_pos + off >= fmc->vma_len))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!fmc'
#792: FILE: fs/fdmap.c:381:
+	if ((!fmc) ||
+	    (!buf) ||
+	    ((unsigned long)(buf + size) > TASK_SIZE) ||
+	    ((unsigned long)(buf + size) < (unsigned long)buf))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!buf'
#792: FILE: fs/fdmap.c:381:
+	if ((!fmc) ||
+	    (!buf) ||
+	    ((unsigned long)(buf + size) > TASK_SIZE) ||
+	    ((unsigned long)(buf + size) < (unsigned long)buf))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#798: FILE: fs/fdmap.c:387:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: fs/fdmap.c:398:
+		total = fdmap_copy_from_user_to_user((unsigned long)buf,
+				fmc->vma + f->f_pos, (unsigned int)total);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#811: FILE: fs/fdmap.c:400:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: fs/fdmap.c:411:
+static ssize_t fdmap_write(struct file *f, const char *buf, size_t size,
+		loff_t *off)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!fmc'
#827: FILE: fs/fdmap.c:416:
+	if ((!fmc) ||
+	    (!buf) ||
+	    ((unsigned long)(buf + size) > TASK_SIZE) ||
+	    ((unsigned long)(buf + size) < (unsigned long)buf))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!buf'
#827: FILE: fs/fdmap.c:416:
+	if ((!fmc) ||
+	    (!buf) ||
+	    ((unsigned long)(buf + size) > TASK_SIZE) ||
+	    ((unsigned long)(buf + size) < (unsigned long)buf))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: fs/fdmap.c:432:
+		total = fdmap_copy_from_user_to_user(fmc->vma + f->f_pos,
+				(unsigned long)buf, (unsigned int)total);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: fs/fdmap.c:460:
+static unsigned int fdmap_copy_from_user_to_user(unsigned long base_dst,
+		unsigned long base_src, unsigned int total)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#876: FILE: fs/fdmap.c:465:
+	while (curr < total) {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#890: FILE: fs/fdmap.c:479:
+		spage = dpage = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: fs/fdmap.c:482:
+		if ((get_user_pages(current, current->mm, src, 1, 0, 0, &spage,
+				NULL) < 0) ||

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#896: FILE: fs/fdmap.c:485:
+				NULL) < 0)) {
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#948: FILE: include/asm-arm/unistd.h:302:
+#define __NR_fdmap			(__NR_SYSCALL_BASE+274)
                   			                  ^

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux>
#1003: FILE: include/asm-mips/unistd.h:291:
+#define __NR_fdmap			(__NR_Linux + 268)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux_syscalls>
#1009: FILE: include/asm-mips/unistd.h:296:
+#define __NR_Linux_syscalls		268

CHECK:CAMELCASE: Avoid CamelCase: <__NR_O32_Linux_syscalls>
#1015: FILE: include/asm-mips/unistd.h:301:
+#define __NR_O32_Linux_syscalls		268

CHECK:CAMELCASE: Avoid CamelCase: <__NR_64_Linux_syscalls>
#1035: FILE: include/asm-mips/unistd.h:546:
+#define __NR_64_Linux_syscalls		227

CHECK:CAMELCASE: Avoid CamelCase: <__NR_N32_Linux_syscalls>
#1055: FILE: include/asm-mips/unistd.h:795:
+#define __NR_N32_Linux_syscalls		231

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1129: FILE: include/asm-sparc/unistd.h:237:
+#define __NR_fdmap^I^I218 /* Common ^I^I^I^I^I   */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 15 warnings, 36 checks, 909 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
