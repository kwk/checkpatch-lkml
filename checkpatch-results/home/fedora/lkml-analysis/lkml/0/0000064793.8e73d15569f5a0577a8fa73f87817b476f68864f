WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#118: FILE: kernel/rcutorture.c:73:
+	do { printk(KERN_ALERT "%s" TORTURE_FLAG s "\n", torture_type); } while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#121: FILE: kernel/rcutorture.c:75:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG s "\n", torture_type); } while (0)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#124: FILE: kernel/rcutorture.c:77:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG "!!! " s "\n", torture_type); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#124: FILE: kernel/rcutorture.c:77:
+	do { if (verbose) printk(KERN_ALERT "%s" TORTURE_FLAG "!!! " s "\n", torture_type); } while (0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#174: FILE: kernel/rcutorture.c:189:
+};
+static struct rcu_torture_ops *cur_ops = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#174: FILE: kernel/rcutorture.c:189:
+static struct rcu_torture_ops *cur_ops = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:BRACES: braces {} should be used on all arms of this statement
#211: FILE: kernel/rcutorture.c:226:
+	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#214: FILE: kernel/rcutorture.c:229:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#235: FILE: kernel/rcutorture.c:250:
+static struct rcu_torture_ops *torture_ops[] =
+	{ &rcu_ops, NULL };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->stats"
#340: FILE: kernel/rcutorture.c:404:
+	if (cur_ops->stats != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#350: FILE: kernel/rcutorture.c:507:
+	printk(KERN_ALERT "%s" TORTURE_FLAG "--- %s: nreaders=%d "

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->cleanup"
#365: FILE: kernel/rcutorture.c:557:
+	if (cur_ops->cleanup != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops"
#374: FILE: kernel/rcutorture.c:574:
+	for (i = 0; cur_ops = torture_ops[i], cur_ops != NULL; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#376: FILE: kernel/rcutorture.c:576:
+		if (strcmp(torture_type, cur_ops->name) == 0) {
+			break;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur_ops"
#380: FILE: kernel/rcutorture.c:580:
+	if (cur_ops == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#381: FILE: kernel/rcutorture.c:581:
+		printk(KERN_ALERT "rcutorture: invalid torture type: \"%s\"\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->init"
#385: FILE: kernel/rcutorture.c:585:
+	if (cur_ops->init != NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064793.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 7 warnings, 8 checks, 324 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064793.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
