WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: drivers/char/raw.c:225:
+^I.aio_write = ^Igeneric_file_aio_write_nolock,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: fs/aio.c:68:
+	kiocb_cachep = kmem_cache_create("kiocb", sizeof(struct sync_iocb),
 				0, SLAB_HWCACHE_ALIGN, NULL, NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: fs/aio.c:151:
+^I^I^I^I^Iinfo->mmap_base, nr_pages, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: fs/aio.c:796:
+	struct timespec tmp;
+	jiffies_to_timespec(jiffies, &tmp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#219: FILE: fs/aio.c:804:
+		ts->tv_sec = ts->tv_nsec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: fs/aio.c:1006:
+^I^I        struct iocb *iocb, ssize_t (*op)(struct rw_iocb *))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: fs/aio.c:1006:
+static ssize_t rw_issue(struct rw_iocb *rw, struct file *file,
+		        struct iocb *iocb, ssize_t (*op)(struct rw_iocb *))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#264: FILE: fs/aio.c:1010:
+	if (unlikely(NULL == op))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: fs/aio.c:1036:
+	struct rw_iocb *rw = kiocb_to_rw_iocb(kiocb);
+	rw->rw = READ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: fs/aio.c:1044:
+	struct rw_iocb *rw = (struct rw_iocb *)kiocb;
+	rw->rw = WRITE;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#301: FILE: fs/aio.c:1047:
+}
+static ssize_t io_submit_fsync(struct kiocb *kiocb, struct file *file,

WARNING:LINE_SPACING: Missing a blank line after declarations
#306: FILE: fs/aio.c:1052:
+	ssize_t ret = -EINVAL;
+	fsync_iocb->dsync = dsync;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#307: FILE: fs/aio.c:1053:
+	if (NULL != file->f_op->aio_fsync) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: fs/block_dev.c:122:
+blkdev_direct_IO(int rw, struct rw_iocb *iocb, const struct iovec *iov,
 			loff_t offset, unsigned long nr_segs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: fs/cifs/cifsfs.c:320:
+^I.aio_write = generic_file_aio_write, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: fs/direct-io.c:825:
+direct_io_worker(int rw, struct rw_iocb *iocb, struct inode *inode, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: fs/direct-io.c:826:
+direct_io_worker(int rw, struct rw_iocb *iocb, struct inode *inode, 
 	const struct iovec *iov, loff_t offset, unsigned long nr_segs, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: fs/direct-io.c:963:
+blockdev_direct_IO(int rw, struct rw_iocb *iocb, struct inode *inode, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: fs/direct-io.c:964:
+blockdev_direct_IO(int rw, struct rw_iocb *iocb, struct inode *inode, 
 	struct block_device *bdev, const struct iovec *iov, loff_t offset, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: fs/ext2/inode.c:654:
+ext2_direct_IO(int rw, struct rw_iocb *iocb, const struct iovec *iov,
 			loff_t offset, unsigned long nr_segs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: fs/ext3/inode.c:1430:
+static int ext3_direct_IO(int rw, struct rw_iocb *iocb,
 			const struct iovec *iov, loff_t offset,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#655: FILE: fs/fat/file.c:69:
+	struct file *filp = iocb->kiocb.ki_filp;
 	             ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#802: FILE: fs/nfs/file.c:91:
+	struct dentry * dentry = iocb->kiocb.ki_filp->f_dentry;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#826: FILE: fs/nfs/file.c:205:
+	struct dentry * dentry = iocb->kiocb.ki_filp->f_dentry;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#947: FILE: fs/read_write.c:170:
+static ssize_t do_sync_rwv(struct file *filp, char *buf, size_t tot_len,
                                         ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#948: FILE: fs/read_write.c:171:
+			   struct iovec *iov, unsigned nr_segs, loff_t *ppos,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#959: FILE: fs/read_write.c:178:
+	init_sync_kiocb(&iocb->kiocb, filp);
 	                              ^^^^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#963: FILE: fs/read_write.c:182:
+	iocb->rw_iov = (NULL == iov) ? &iocb->rw_local_iov : iov;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: fs/read_write.c:185:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#976: FILE: fs/read_write.c:193:
+ssize_t do_sync_rw(struct file *filp, char *buf, size_t count, loff_t *ppos,
                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#979: FILE: fs/read_write.c:196:
+	return do_sync_rwv(filp, buf, count, NULL, 1, ppos, op, rw);
 	                   ^^^^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1059: FILE: fs/read_write.c:345:
+	if (NULL == fn)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1228: FILE: fs/read_write.c:626:
+EXPORT_SYMBOL(do_sync_rw);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: fs/reiserfs/file.c:144:
+    .aio_read^I= generic_file_aio_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1239: FILE: fs/reiserfs/file.c:145:
+    .aio_write^I= generic_file_aio_write,$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1254: FILE: fs/smbfs/file.c:221:
+	struct dentry * dentry = iocb->ki_filp->f_dentry;

CHECK:SPACING: No space is necessary after a cast
#1259: FILE: fs/smbfs/file.c:225:
+		(unsigned long) count, (unsigned long) pos);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1280: FILE: fs/smbfs/file.c:303:
+	struct dentry * dentry = iocb->ki_filp->f_dentry;

CHECK:SPACING: No space is necessary after a cast
#1286: FILE: fs/smbfs/file.c:308:
+		(unsigned long) count, (unsigned long) pos);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1333: FILE: fs/udf/file.c:112:
+static ssize_t udf_file_write(struct kiocb *iocb, const char * buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1425: FILE: include/linux/aio.h:83:
+	unsigned	dsync;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1437: FILE: include/linux/aio.h:95:
+typedef union {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1472: FILE: include/linux/aio.h:123:
+		__iocb->ki_filp = (filp);		\
 		                   ^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1496: FILE: include/linux/fs.h:310:
+	int (*direct_IO)(int, struct rw_iocb *, const struct iovec *iov,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rw_iocb *' should also have an identifier name
#1496: FILE: include/linux/fs.h:310:
+	int (*direct_IO)(int, struct rw_iocb *, const struct iovec *iov,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1497: FILE: include/linux/fs.h:311:
+	int (*direct_IO)(int, struct rw_iocb *, const struct iovec *iov,
 			loff_t offset, unsigned long nr_segs);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1505: FILE: include/linux/fs.h:711:
+	ssize_t (*aio_read) (struct rw_iocb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rw_iocb *' should also have an identifier name
#1505: FILE: include/linux/fs.h:711:
+	ssize_t (*aio_read) (struct rw_iocb *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1508: FILE: include/linux/fs.h:713:
+	ssize_t (*aio_write) (struct rw_iocb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rw_iocb *' should also have an identifier name
#1508: FILE: include/linux/fs.h:713:
+	ssize_t (*aio_write) (struct rw_iocb *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1517: FILE: include/linux/fs.h:722:
+	int (*aio_fsync) (struct fsync_iocb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fsync_iocb *' should also have an identifier name
#1517: FILE: include/linux/fs.h:722:
+	int (*aio_fsync) (struct fsync_iocb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1537: FILE: include/linux/fs.h:1207:
+extern ssize_t generic_file_aio_read(struct rw_iocb *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rw_iocb *' should also have an identifier name
#1537: FILE: include/linux/fs.h:1207:
+extern ssize_t generic_file_aio_read(struct rw_iocb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1538: FILE: include/linux/fs.h:1208:
+extern ssize_t generic_file_aio_write(struct rw_iocb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rw_iocb *' should also have an identifier name
#1538: FILE: include/linux/fs.h:1208:
+extern ssize_t generic_file_aio_write(struct rw_iocb *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1539: FILE: include/linux/fs.h:1209:
+extern ssize_t generic_file_aio_write_nolock(struct rw_iocb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rw_iocb *' should also have an identifier name
#1539: FILE: include/linux/fs.h:1209:
+extern ssize_t generic_file_aio_write_nolock(struct rw_iocb *);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1540: FILE: include/linux/fs.h:1210:
+extern ssize_t FASTCALL(do_sync_rw(struct file *filp, char *buf, size_t len, loff_t *ppos, ssize_t (*op)(struct rw_iocb *), int type));
                                                 ^^^^

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1540: FILE: include/linux/fs.h:1210:
+extern ssize_t FASTCALL(do_sync_rw(struct file *filp, char *buf, size_t len, loff_t *ppos, ssize_t (*op)(struct rw_iocb *), int type));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1540: FILE: include/linux/fs.h:1210:
+extern ssize_t FASTCALL(do_sync_rw(struct file *filp, char *buf, size_t len, loff_t *ppos, ssize_t (*op)(struct rw_iocb *), int type));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1547: FILE: include/linux/fs.h:1216:
+extern ssize_t generic_file_direct_IO(int rw, struct rw_iocb *iocb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1548: FILE: include/linux/fs.h:1217:
+extern ssize_t generic_file_direct_IO(int rw, struct rw_iocb *iocb,
 	const struct iovec *iov, loff_t offset, unsigned long nr_segs);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1550: FILE: include/linux/fs.h:1218:
+extern int blockdev_direct_IO(int rw, struct rw_iocb *iocb, struct inode *inode, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1550: FILE: include/linux/fs.h:1218:
+extern int blockdev_direct_IO(int rw, struct rw_iocb *iocb, struct inode *inode, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1551: FILE: include/linux/fs.h:1219:
+extern int blockdev_direct_IO(int rw, struct rw_iocb *iocb, struct inode *inode, 
 	struct block_device *bdev, const struct iovec *iov, loff_t offset, 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1582: FILE: include/net/sock.h:318:
+	BUG_ON(sizeof(struct sock_iocb) > sizeof(iocb_t));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1588: FILE: include/net/sock.h:324:
+	BUG_ON(sizeof(struct sock_iocb) > sizeof(iocb_t));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1637: FILE: mm/filemap.c:716:
+	struct file *filp = iocb->kiocb.ki_filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1686: FILE: mm/filemap.c:776:
+			do_generic_file_read(filp,&iocb->rw_pos,&desc,file_read_actor);
 			                     ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1686: FILE: mm/filemap.c:776:
+			do_generic_file_read(filp,&iocb->rw_pos,&desc,file_read_actor);
 			                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1686: FILE: mm/filemap.c:776:
+			do_generic_file_read(filp,&iocb->rw_pos,&desc,file_read_actor);
 			                          ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1686: FILE: mm/filemap.c:776:
+			do_generic_file_read(filp,&iocb->rw_pos,&desc,file_read_actor);
 			                                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1686: FILE: mm/filemap.c:776:
+			do_generic_file_read(filp,&iocb->rw_pos,&desc,file_read_actor);
 			                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1686: FILE: mm/filemap.c:776:
+			do_generic_file_read(filp,&iocb->rw_pos,&desc,file_read_actor);
 			                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1768: FILE: mm/filemap.c:1616:
+			nr_segs = iov_shorten(iocb->rw_iov,
 						nr_segs, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1891: FILE: mm/filemap.c:1745:
+generic_file_direct_IO(int rw, struct rw_iocb *iocb, const struct iovec *iov,
 	loff_t offset, unsigned long nr_segs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1933: FILE: net/socket.c:544:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1951: FILE: net/socket.c:575:
+        init_sync_kiocb(&iocb.kiocb, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1951: FILE: net/socket.c:575:
+        init_sync_kiocb(&iocb.kiocb, NULL);$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1976: FILE: net/socket.c:595:
+	if (0 == x->iocb.rw_local_iov.iov_len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1980: FILE: net/socket.c:598:
+^Isock = SOCKET_I(x->iocb.kiocb.ki_filp->f_dentry->d_inode); $

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2017: FILE: net/socket.c:625:
+	if (0 == x->iocb.rw_local_iov.iov_len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2021: FILE: net/socket.c:628:
+^Isock = SOCKET_I(x->iocb.kiocb.ki_filp->f_dentry->d_inode); $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 41 warnings, 22 checks, 1732 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
