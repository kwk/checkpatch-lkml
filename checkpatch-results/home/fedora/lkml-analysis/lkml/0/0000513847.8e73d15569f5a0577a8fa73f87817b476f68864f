WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
	Like the kernel threads approach, but AFAICT it won't work for the case of two CPUs running wait_for_rcu at the same time (on a 4-way or above).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: include/linux/rcupdate.h:1:
+#ifndef _LINUX_RCUPDATE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#54: FILE: include/linux/rcupdate.h:7:
+#include <asm/atomic.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#57: FILE: include/linux/rcupdate.h:10:
+struct rcu_head
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#128: FILE: kernel/rcupdate.c:1:
+/* Read-Copy-Update For Linux. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#137: FILE: kernel/rcupdate.c:10:
+/* Two batches per CPU : one (pending) is an internal queue of waiting
+   requests, being prepended to as new requests come in.  The other

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#138: FILE: kernel/rcupdate.c:11:
+   (rcu_waiting) is waiting completion of schedule()s on all CPUs. */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#140: FILE: kernel/rcupdate.c:13:
+struct rcu_batch
+{

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(SMP_CACHE_BYTES) over __attribute__((__aligned__(SMP_CACHE_BYTES)))
#145: FILE: kernel/rcupdate.c:18:
+} __attribute__((__aligned__(SMP_CACHE_BYTES)));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#151: FILE: kernel/rcupdate.c:24:
+	unsigned cpu = smp_processor_id();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#152: FILE: kernel/rcupdate.c:25:
+	unsigned state;

CHECK:BRACES: braces {} should be used on all arms of this statement
#156: FILE: kernel/rcupdate.c:29:
+	if (in_interrupt()) {
[...]
+	} else state = 0;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#157: FILE: kernel/rcupdate.c:30:
+		if (in_irq()) state = 2;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#158: FILE: kernel/rcupdate.c:31:
+		else state = 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#159: FILE: kernel/rcupdate.c:32:
+	} else state = 0;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#192: FILE: kernel/rcupdate.c:65:
+EXPORT_SYMBOL(call_rcu);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#212: FILE: kernel/sched.c:106:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0,0}}};

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: kernel/sched.c:106:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0,0}}};
                                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: kernel/sched.c:106:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0,0}}};
                                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: kernel/sched.c:106:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0,0}}};
                                                                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#212: FILE: kernel/sched.c:106:
+} aligned_data [NR_CPUS] __cacheline_aligned = { {{&init_task,0,0,0}}};

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000513847.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 11 warnings, 1 checks, 189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000513847.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
