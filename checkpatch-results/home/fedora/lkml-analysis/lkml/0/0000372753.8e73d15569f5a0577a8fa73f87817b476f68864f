CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#28: 
> locked before doing so.  In short, you almost need to duplicate
                         ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
http://domsch.com/linux/patches/dynids/linux-2.5/linux-2.5.69-dynids-20030506.patch.bz2

WARNING:TYPO_SPELLING: 'equivalant' may be misspelled - perhaps 'equivalent'?
#97: FILE: linux-2.5-dynids/Documentation/pci.txt:86:
+equivalant device types, not to use it as a pointer.
 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: linux-2.5-dynids/drivers/base/bus.c:319:
+void driver_attach(struct device_driver * drv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:22:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:61:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:66:
+{^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:84:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:90:
+{^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:114:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:120:
+{^I^I   $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:207:
+store_new_id(struct device_driver * driver, const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:207:
+store_new_id(struct device_driver * driver, const char * buf, size_t count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:210:
+	struct bus_type * bus;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:212:
+	__u32 vendor=PCI_ANY_ID, device=PCI_ANY_ID, subvendor=PCI_ANY_ID,
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:212:
+	__u32 vendor=PCI_ANY_ID, device=PCI_ANY_ID, subvendor=PCI_ANY_ID,
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:212:
+	__u32 vendor=PCI_ANY_ID, device=PCI_ANY_ID, subvendor=PCI_ANY_ID,
 	                                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#315: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:213:
+		subdevice=PCI_ANY_ID, class=0, class_mask=0;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#315: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:213:
+		subdevice=PCI_ANY_ID, class=0, class_mask=0;
 		                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#315: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:213:
+		subdevice=PCI_ANY_ID, class=0, class_mask=0;
 		                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#316: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:214:
+	unsigned long driver_data=0;
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#317: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:215:
+	int fields=0;
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#353: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:251:
+^I$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#357: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:255:
+static DRIVER_ATTR(new_id, S_IWUSR, NULL, store_new_id);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:261:
+pci_driver_attr_show(struct kobject * kobj, struct attribute *attr, char *buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#378: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:276:
+pci_driver_attr_store(struct kobject * kobj, struct attribute *attr,

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#393: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:291:
+static struct sysfs_ops pci_driver_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#397: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:295:
+};
+static struct kobj_type pci_driver_kobj_type = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:300:
+pci_populate_driver_dir(struct pci_driver * drv)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "drv->probe"
#406: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:304:
+	if (drv->probe != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BRACES: braces {} are not necessary for single statement blocks
#433: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:345:
+	if (count >= 0) {
+		pci_populate_driver_dir(drv);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#445: FILE: linux-2.5-dynids/drivers/pci/pci-driver.c:404:
+	const struct pci_dev * pci_dev = to_pci_dev(dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#487: FILE: linux-2.5-dynids/include/linux/device.h:321:
+extern void driver_attach(struct device_driver * drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#487: FILE: linux-2.5-dynids/include/linux/device.h:321:
+extern void driver_attach(struct device_driver * drv);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#495: FILE: linux-2.5-dynids/include/linux/pci-dynids.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000372753.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 6 warnings, 4 checks, 451 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000372753.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
