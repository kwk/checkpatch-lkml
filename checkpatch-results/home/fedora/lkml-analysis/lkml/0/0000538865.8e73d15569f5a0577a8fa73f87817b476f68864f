WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
diff -uNr linux-2.4.3/Documentation/Configure.help linux-2.4.3.ipdhcp/Documentation/Configure.help

CHECK:LINE_SPACING: Please don't use multiple blank lines
#96: FILE: include/net/ipconfig.h:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#183: FILE: net/ipv4/ipconfig.c:80:
+#define CONF_PRE_OPEN		(HZ/2)	/* Before opening: 1/2 second */
                      		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#184: FILE: net/ipv4/ipconfig.c:81:
+#define CONF_POST_OPEN		(1*HZ)	/* After opening: 1 second */
                       		  ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: net/ipv4/ipconfig.c:84:
+#define CONF_OPEN_RETRIES ^I2^I/* (Re)open devices twice */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: net/ipv4/ipconfig.c:85:
+#define CONF_SEND_RETRIES ^I6^I/* Send six requests per open */$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#189: FILE: net/ipv4/ipconfig.c:86:
+#define CONF_INTER_TIMEOUT	(HZ/2)	/* Inter-device timeout: 1/2 second */
                           	   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#190: FILE: net/ipv4/ipconfig.c:87:
+#define CONF_BASE_TIMEOUT	(HZ*2)	/* Initial timeout: 2 seconds */
                          	   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#193: FILE: net/ipv4/ipconfig.c:89:
+#define CONF_TIMEOUT_MULT	*7/4	/* Rate of timeout growth */
                          	  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#193: FILE: net/ipv4/ipconfig.c:89:
+#define CONF_TIMEOUT_MULT	*7/4	/* Rate of timeout growth */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#211: FILE: net/ipv4/ipconfig.c:94:
+/*
+ * Public IP configuration

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#215: FILE: net/ipv4/ipconfig.c:97:
+int ic_enable __initdata = 0;			/* IP config enabled? */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#235: FILE: net/ipv4/ipconfig.c:112:
+int ic_host_name_set __initdata = 0;		/* Host name set by us? */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#250: FILE: net/ipv4/ipconfig.c:125:
+int ic_proto_used = 0;			/* Protocol used, if any */

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#255: FILE: net/ipv4/ipconfig.c:130:
+/*
+ * Private state.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#266: FILE: net/ipv4/ipconfig.c:141:
+static volatile int ic_got_reply __initdata = 0;    /* Proto(s) that replied */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#266: FILE: net/ipv4/ipconfig.c:141:
+static volatile int ic_got_reply __initdata = 0;    /* Proto(s) that replied */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#269: FILE: net/ipv4/ipconfig.c:144:
+static int ic_dhcp_msgtype __initdata = 0;	/* DHCP msg type received */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: net/ipv4/ipconfig.c:147:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#287: FILE: net/ipv4/ipconfig.c:161:
+static struct net_device *ic_dev __initdata = NULL;	/* Selected device */

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#296: FILE: net/ipv4/ipconfig.c:180:
+				printk(KERN_WARNING "DHCP/BOOTP: Ignoring device %s, MTU %d too small", dev->name, dev->mtu);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#296: FILE: net/ipv4/ipconfig.c:180:
+				printk(KERN_WARNING "DHCP/BOOTP: Ignoring device %s, MTU %d too small", dev->name, dev->mtu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: net/ipv4/ipconfig.c:204:
+			DBG(("IP-Config: %s UP (able=%d, xid=%08x)\n",
+				dev->name, able, d->xid));

WARNING:TYPO_SPELLING: 'signle' may be misspelled - perhaps 'single'?
#387: FILE: net/ipv4/ipconfig.c:464:
+ *  Send RARP request packet over a signle interface.
                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: net/ipv4/ipconfig.c:469:
+	struct net_device *dev = d->dev;
+	arp_send(ARPOP_RREQUEST, ETH_P_RARP, 0, dev, 0, NULL,

WARNING:TYPO_SPELLING: 'exten' may be misspelled - perhaps 'extent'?
#436: FILE: net/ipv4/ipconfig.c:510:
+	u8 exten[312];		/* DHCP options / BOOTP vendor extensions */
 	   ^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: net/ipv4/ipconfig.c:554:
+	printk("DHCP: Sending message type %d\n", mt);

WARNING:TYPO_SPELLING: 'reqeust' may be misspelled - perhaps 'request'?
#538: FILE: net/ipv4/ipconfig.c:609:
+	*e++ = 5;		/* Name server reqeust */
 	         		               ^^^^^^^

WARNING:TYPO_SPELLING: 'exten' may be misspelled - perhaps 'extent'?
#608: FILE: net/ipv4/ipconfig.c:699:
+		ic_dhcp_init_options(b->exten);
 		                        ^^^^^

WARNING:TYPO_SPELLING: 'exten' may be misspelled - perhaps 'extent'?
#611: FILE: net/ipv4/ipconfig.c:702:
+		ic_bootp_init_ext(b->exten);
 		                     ^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#627: FILE: net/ipv4/ipconfig.c:721:
+	for(d = ic_first_dev; d; d=d->next) {
 	                          ^

ERROR:SPACING: space required before the open parenthesis '('
#627: FILE: net/ipv4/ipconfig.c:721:
+	for(d = ic_first_dev; d; d=d->next) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#655: FILE: net/ipv4/ipconfig.c:751:
+	printk("DHCP/BOOTP: Got extension %d:",*ext);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#655: FILE: net/ipv4/ipconfig.c:751:
+	printk("DHCP/BOOTP: Got extension %d:",*ext);
 	                                      ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#655: FILE: net/ipv4/ipconfig.c:751:
+	printk("DHCP/BOOTP: Got extension %d:",*ext);
 	                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#665: FILE: net/ipv4/ipconfig.c:768:
+				memcpy(&ic_nameserver, ext+1, 4);
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#674: FILE: net/ipv4/ipconfig.c:775:
+			ic_bootp_string(ic_domain, ext+1, *ext, sizeof(ic_domain));
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#681: FILE: net/ipv4/ipconfig.c:782:
+			ic_bootp_string(system_utsname.domainname, ext+1, *ext, __NEW_UTS_LEN);
 			                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#715: FILE: net/ipv4/ipconfig.c:827:
+		printk(KERN_ERR "DHCP/BOOTP: Ignoring fragmented reply.\n");

WARNING:TYPO_SPELLING: 'exten' may be misspelled - perhaps 'extent'?
#741: FILE: net/ipv4/ipconfig.c:841:
+	if (!memcmp(b->exten, ic_bootp_cookie, 4)) { /* Check magic cookie */
 	               ^^^^^

WARNING:TYPO_SPELLING: 'exten' may be misspelled - perhaps 'extent'?
#750: FILE: net/ipv4/ipconfig.c:850:
+		ext = &b->exten[4];
 		          ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#760: FILE: net/ipv4/ipconfig.c:853:
+			u8 *opt = ext++;
+			if (*opt == 0)	/* Padding */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#778: FILE: net/ipv4/ipconfig.c:871:
+		printk("DHCP: Got message type %d\n", mt);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#781: FILE: net/ipv4/ipconfig.c:874:
+		switch (mt) {
+		    case DHCPOFFER:
[...]
+		    case DHCPACK:
[...]
+		    default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#782: FILE: net/ipv4/ipconfig.c:875:
+		    case DHCPOFFER:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#784: FILE: net/ipv4/ipconfig.c:877:
+			/* While in the process of accepting one offer,
+			   ignore all others. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#784: FILE: net/ipv4/ipconfig.c:877:
+			   ignore all others. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#791: FILE: net/ipv4/ipconfig.c:884:
+			printk("DHCP: Offered address %u.%u.%u.%u", NIPQUAD(ic_myaddr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: net/ipv4/ipconfig.c:885:
+			printk(" by server %u.%u.%u.%u\n", NIPQUAD(ic_servaddr));

WARNING:TABSTOP: Statements should start on a tabstop
#796: FILE: net/ipv4/ipconfig.c:889:
+		    case DHCPACK:

WARNING:TABSTOP: Statements should start on a tabstop
#800: FILE: net/ipv4/ipconfig.c:893:
+		    default:

WARNING:TYPO_SPELLING: 'exten' may be misspelled - perhaps 'extent'?
#811: FILE: net/ipv4/ipconfig.c:904:
+		ext = &b->exten[4];
 		          ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#814: FILE: net/ipv4/ipconfig.c:907:
+			u8 *opt = ext++;
+			if (*opt == 0)	/* Padding */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#882: FILE: net/ipv4/ipconfig.c:965:
+		printk(KERN_ERR "DHCP/BOOTP: No suitable device found.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#921: FILE: net/ipv4/ipconfig.c:996:
+	printk(KERN_NOTICE "Sending %s%s%s requests .",

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#956: FILE: net/ipv4/ipconfig.c:1022:
+		if ((ic_got_reply & IC_BOOTP)
+		    && (ic_proto_enabled & IC_USE_DHCP)
+		    && ic_dhcp_msgtype != DHCPACK)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#957: FILE: net/ipv4/ipconfig.c:1023:
+		if ((ic_got_reply & IC_BOOTP)
+		    && (ic_proto_enabled & IC_USE_DHCP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#958: FILE: net/ipv4/ipconfig.c:1024:
+		    && (ic_proto_enabled & IC_USE_DHCP)
+		    && ic_dhcp_msgtype != DHCPACK)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#961: FILE: net/ipv4/ipconfig.c:1027:
+			printk(",");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#971: FILE: net/ipv4/ipconfig.c:1037:
+		if ((d = d->next))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#985: FILE: net/ipv4/ipconfig.c:1051:
+		printk(".");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1007: FILE: net/ipv4/ipconfig.c:1067:
+^I^I((ic_got_reply & IC_RARP) ? "RARP" $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1025: FILE: net/ipv4/ipconfig.c:1084:
+	if (ic_proto_used & IC_PROTO)
+	    sprintf(buffer, "#PROTO: %s\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1029: FILE: net/ipv4/ipconfig.c:1088:
+	else
+	    strcpy(buffer, "#MANUAL\n");

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1072: FILE: net/ipv4/ipconfig.c:1131:
+	while (jiffies < jiff)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1081: FILE: net/ipv4/ipconfig.c:1140:
+	while (jiffies < jiff)
+			;

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1081: FILE: net/ipv4/ipconfig.c:1140:
+	while (jiffies < jiff)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1099: FILE: net/ipv4/ipconfig.c:1160:
+			/*
+			 * I don't know why, but sometimes the

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1110: FILE: net/ipv4/ipconfig.c:1171:
+^I^I^I * ^I^I^I^I-- Chip$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1113: FILE: net/ipv4/ipconfig.c:1174:
+			if (ROOT_DEV == MKDEV(UNNAMED_MAJOR, 255)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: net/ipv4/ipconfig.c:1175:
+^I^I^I^Iprintk(KERN_ERR $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1114: FILE: net/ipv4/ipconfig.c:1175:
+				printk(KERN_ERR 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1121: FILE: net/ipv4/ipconfig.c:1182:
+^I^I^I^Iprintk(KERN_ERR $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1121: FILE: net/ipv4/ipconfig.c:1182:
+				printk(KERN_ERR 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1127: FILE: net/ipv4/ipconfig.c:1188:
+			printk(KERN_ERR "IP-Config: Auto-configuration of network failed.\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1153: FILE: net/ipv4/ipconfig.c:1216:
+	/*
+	 * Record which protocol was actually used.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1161: FILE: net/ipv4/ipconfig.c:1224:
+	/*
+	 * Clue in the operator.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1163: FILE: net/ipv4/ipconfig.c:1226:
+	printk("IP-Config: Complete:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1164: FILE: net/ipv4/ipconfig.c:1227:
+	printk("\n      device=%s", ic_dev->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1165: FILE: net/ipv4/ipconfig.c:1228:
+	printk(", addr=%u.%u.%u.%u", NIPQUAD(ic_myaddr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1166: FILE: net/ipv4/ipconfig.c:1229:
+	printk(", mask=%u.%u.%u.%u", NIPQUAD(ic_netmask));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1167: FILE: net/ipv4/ipconfig.c:1230:
+	printk(", gw=%u.%u.%u.%u", NIPQUAD(ic_gateway));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1168: FILE: net/ipv4/ipconfig.c:1231:
+	printk(",\n     host=%s, domain=%s, nis-domain=%s",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1170: FILE: net/ipv4/ipconfig.c:1233:
+	printk(",\n     bootserver=%u.%u.%u.%u", NIPQUAD(ic_servaddr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1171: FILE: net/ipv4/ipconfig.c:1234:
+	printk(", rootserver=%u.%u.%u.%u", NIPQUAD(root_server_addr));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1172: FILE: net/ipv4/ipconfig.c:1235:
+	printk(", rootpath=%s", root_server_path);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1173: FILE: net/ipv4/ipconfig.c:1236:
+	printk("\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1203: FILE: net/ipv4/ipconfig.c:1269:
+	if (!strcmp(name, "on") || !strcmp(name, "any")) {
+		return 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1240: FILE: net/ipv4/ipconfig.c:1304:
+^Iic_enable = (*addrs && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1241: FILE: net/ipv4/ipconfig.c:1305:
+^I^I(strcmp(addrs, "off") != 0) && $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000538865.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 58 warnings, 13 checks, 1167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000538865.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
