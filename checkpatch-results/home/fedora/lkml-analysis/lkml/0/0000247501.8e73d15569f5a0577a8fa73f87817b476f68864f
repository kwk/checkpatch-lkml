CHECK:LINE_SPACING: Please don't use multiple blank lines
#64: FILE: drivers/acpi/numa.c:219:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#65: FILE: drivers/acpi/numa.c:220:
+#if ( defined(CONFIG_ACPI_CONTAINER_MODULE) || defined(CONFIG_ACPI_CONTAINER) ) && defined(CONFIG_HOTPLUG)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#65: FILE: drivers/acpi/numa.c:220:
+#if ( defined(CONFIG_ACPI_CONTAINER_MODULE) || defined(CONFIG_ACPI_CONTAINER) ) && defined(CONFIG_HOTPLUG)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#65: FILE: drivers/acpi/numa.c:220:
+#if ( defined(CONFIG_ACPI_CONTAINER_MODULE) || defined(CONFIG_ACPI_CONTAINER) ) && defined(CONFIG_HOTPLUG)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid < 0'
#71: FILE: drivers/acpi/numa.c:226:
+	if ((nid < 0) || (nid >= MAX_NUMNODES))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nid >= MAX_NUMNODES'
#71: FILE: drivers/acpi/numa.c:226:
+	if ((nid < 0) || (nid >= MAX_NUMNODES))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#74: FILE: drivers/acpi/numa.c:229:
+	for(i=0; i < MAX_PXM_DOMAINS; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#74: FILE: drivers/acpi/numa.c:229:
+	for(i=0; i < MAX_PXM_DOMAINS; i++) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#75: FILE: drivers/acpi/numa.c:230:
+		if ( pxm_to_nid_map[i] == nid )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#75: FILE: drivers/acpi/numa.c:230:
+		if ( pxm_to_nid_map[i] == nid )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: drivers/acpi/numa.c:240:
+    return;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#91: FILE: drivers/acpi/numa.c:246:
+	struct acpi_numa_node *data=NULL;
 	                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#113: FILE: drivers/acpi/numa.c:268:
+		printk(KERN_INFO"PXM <%d> already has a nid <%d>.\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#113: FILE: drivers/acpi/numa.c:268:
+		printk(KERN_INFO"PXM <%d> already has a nid <%d>.\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPACING: space prohibited before semicolon
#115: FILE: drivers/acpi/numa.c:270:
+		return ;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#119: FILE: drivers/acpi/numa.c:274:
+		printk(KERN_ERR"nid <%d> is too big. Range: 0-%d\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#119: FILE: drivers/acpi/numa.c:274:
+		printk(KERN_ERR"nid <%d> is too big. Range: 0-%d\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#120: FILE: drivers/acpi/numa.c:275:
+		       nid, MAX_NUMNODES-1);
 		                        ^

WARNING:SPACING: space prohibited before semicolon
#121: FILE: drivers/acpi/numa.c:276:
+		return ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: drivers/acpi/numa.c:286:
+	int pxm = nid2pxm(nid);
+	if (pxm < 0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#146: FILE: drivers/acpi/numa.c:301:
+	for(i=0 ;i < MAX_NUMNODES; i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#146: FILE: drivers/acpi/numa.c:301:
+	for(i=0 ;i < MAX_NUMNODES; i++) {
 	        ^

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: drivers/acpi/numa.c:301:
+	for(i=0 ;i < MAX_NUMNODES; i++) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#151: FILE: drivers/acpi/numa.c:306:
+	printk(KERN_ERR"Failed to allocate nid for PXM <%d>\n", pxm);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#151: FILE: drivers/acpi/numa.c:306:
+	printk(KERN_ERR"Failed to allocate nid for PXM <%d>\n", pxm);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#170: FILE: drivers/acpi/numa.c:325:
+	struct acpi_numa_node *data=NULL;
 	                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#179: FILE: drivers/acpi/numa.c:334:
+		printk(KERN_ERR"Container does not have PXM.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#179: FILE: drivers/acpi/numa.c:334:
+		printk(KERN_ERR"Container does not have PXM.\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#191: FILE: drivers/acpi/numa.c:346:
+	struct acpi_numa_node *data=NULL;
 	                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#202: FILE: drivers/acpi/numa.c:357:
+		printk(KERN_ERR"Invalid nid %d\n", nid);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#202: FILE: drivers/acpi/numa.c:357:
+		printk(KERN_ERR"Invalid nid %d\n", nid);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#215: FILE: drivers/acpi/numa.c:370:
+	struct acpi_numa_node *data=NULL;
 	                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'data == NULL'
#221: FILE: drivers/acpi/numa.c:376:
+	if (ACPI_FAILURE(status) || (data == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#221: FILE: drivers/acpi/numa.c:376:
+	if (ACPI_FAILURE(status) || (data == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#226: FILE: drivers/acpi/numa.c:381:
+		printk(KERN_ERR"Failed to detach NUMA node data.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#226: FILE: drivers/acpi/numa.c:381:
+		printk(KERN_ERR"Failed to detach NUMA node data.\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#240: FILE: drivers/acpi/numa.c:395:
+	int _cnt=0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#241: FILE: drivers/acpi/numa.c:396:
+	int *cnt=&_cnt;
 	        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#241: FILE: drivers/acpi/numa.c:396:
+	int *cnt=&_cnt;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#242: FILE: drivers/acpi/numa.c:397:
+	struct acpi_device *node_dev=NULL;
 	                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#247: FILE: drivers/acpi/numa.c:402:
+		printk(KERN_ERR"Unknown handle.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#247: FILE: drivers/acpi/numa.c:402:
+		printk(KERN_ERR"Unknown handle.\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct acpi_numa_node)...)
#257: FILE: drivers/acpi/numa.c:412:
+	data = kmalloc(sizeof(struct acpi_numa_node), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#259: FILE: drivers/acpi/numa.c:414:
+		printk(KERN_ERR"Not enough memory.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#259: FILE: drivers/acpi/numa.c:414:
+		printk(KERN_ERR"Not enough memory.\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#259: FILE: drivers/acpi/numa.c:414:
+	if (!data) {
+		printk(KERN_ERR"Not enough memory.\n");

CHECK:SPACING: No space is necessary after a cast
#269: FILE: drivers/acpi/numa.c:424:
+			    (u32) 1,

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#277: FILE: drivers/acpi/numa.c:432:
+	if (! _cnt) {
 	    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#286: FILE: drivers/acpi/numa.c:441:
+		int nid = allocate_nodeid(pxm);
+		ACPI_DEBUG_PRINT((ACPI_DB_INFO,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#291: FILE: drivers/acpi/numa.c:446:
+			printk(KERN_ERR"Cannot get nid.\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#291: FILE: drivers/acpi/numa.c:446:
+			printk(KERN_ERR"Cannot get nid.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: drivers/acpi/numa.c:455:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#303: FILE: drivers/acpi/numa.c:458:
+		printk(KERN_ERR"Failed to attach NUMA data for <%s>.\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#303: FILE: drivers/acpi/numa.c:458:
+		printk(KERN_ERR"Failed to attach NUMA data for <%s>.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#308: FILE: drivers/acpi/numa.c:463:
+	printk(KERN_INFO"Container <%s> is NUMA node.\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#308: FILE: drivers/acpi/numa.c:463:
+	printk(KERN_INFO"Container <%s> is NUMA node.\n",

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#317: FILE: drivers/acpi/numa.c:472:
+	if (data)
+		kfree(data);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#321: FILE: drivers/acpi/numa.c:476:
+EXPORT_SYMBOL(acpi_numa_node_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#322: FILE: drivers/acpi/numa.c:477:
+EXPORT_SYMBOL(acpi_numa_node_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#323: FILE: drivers/acpi/numa.c:478:
+EXPORT_SYMBOL(acpi_numa_node_remove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#324: FILE: drivers/acpi/numa.c:479:
+EXPORT_SYMBOL(acpi_numa_node_data_detach);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#325: FILE: drivers/acpi/numa.c:480:
+EXPORT_SYMBOL(acpi_numa_data_handler);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#326: FILE: drivers/acpi/numa.c:481:
+EXPORT_SYMBOL(is_numa_node_device);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#333: FILE: include/acpi/numa.h:1:
+#ifndef _ACPI_NUMA_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/acpi.h> instead of <asm/acpi.h>
#339: FILE: include/acpi/numa.h:7:
+#include <asm/acpi.h>

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#342: FILE: include/acpi/numa.h:10:
+#if defined(CONFIG_ACPI_CONTAINER) || defined(CONFIG_ACPI_CONTAINER_MODULE)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#353: FILE: include/acpi/numa.h:21:
+extern void acpi_numa_node_init(acpi_handle handle);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: include/acpi/numa.h:22:
+extern void acpi_numa_node_add(acpi_handle handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: include/acpi/numa.h:23:
+extern void acpi_numa_node_remove(acpi_handle handle);

ERROR:SPACING: space prohibited after that open parenthesis '('
#356: FILE: include/acpi/numa.h:24:
+extern void acpi_numa_data_handler ( acpi_handle handle, u32 function, void *context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#356: FILE: include/acpi/numa.h:24:
+extern void acpi_numa_data_handler ( acpi_handle handle, u32 function, void *context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#357: FILE: include/acpi/numa.h:25:
+extern void acpi_numa_node_data_detach(acpi_handle handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#358: FILE: include/acpi/numa.h:26:
+extern int  is_numa_node_device(acpi_handle handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#359: FILE: include/acpi/numa.h:27:
+extern int acpi_numa_node_add_post(acpi_handle handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#360: FILE: include/acpi/numa.h:28:
+extern int acpi_numa_node_remove_request(acpi_handle handle);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000247501.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 28 warnings, 28 checks, 306 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000247501.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
