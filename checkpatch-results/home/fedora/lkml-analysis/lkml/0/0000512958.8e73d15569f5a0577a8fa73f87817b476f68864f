ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#61: FILE: fs/proc/array.c:540:
+#define MAPS_LINE_FORMAT	(sizeof(void*) == 4 ? MAPS_LINE_FORMAT4 : MAPS_LINE_FORMAT8)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#62: FILE: fs/proc/array.c:541:
+#define MAPS_LINE_MAX	(sizeof(void*) == 4 ?  MAPS_LINE_MAX4 :  MAPS_LINE_MAX8)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#64: FILE: fs/proc/array.c:543:
+int proc_pid_maps_get_line (char *buf, struct vm_area_struct *map)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#84: FILE: fs/proc/array.c:563:
+	if (map->vm_file != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->vm_file"
#84: FILE: fs/proc/array.c:563:
+	if (map->vm_file != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#90: FILE: fs/proc/array.c:569:
+		buf[PAGE_SIZE-1] = '\n';
 		             ^

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: fs/proc/array.c:571:
+		if(line < buf)

CHECK:BRACES: Unbalanced braces around else statement
#94: FILE: fs/proc/array.c:573:
+	} else

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: fs/proc/array.c:581:
+	if(map->vm_file) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#102: FILE: fs/proc/array.c:581:
+	if(map->vm_file) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: fs/proc/array.c:583:
+		int i;
+		for(i = len; i < MAPS_LINE_MAX; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#104: FILE: fs/proc/array.c:583:
+		for(i = len; i < MAPS_LINE_MAX; i++)

CHECK:BRACES: Unbalanced braces around else statement
#108: FILE: fs/proc/array.c:587:
+	} else

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#139: FILE: fs/proc/array.c:612:
+	kbuf = (char*)__get_free_page(GFP_KERNEL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#145: FILE: fs/proc/array.c:616:
+	tmp = (char*)__get_free_page(GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#248: FILE: fs/proc/array.c:644:
+			if (retval+len > count) {
 			          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#252: FILE: fs/proc/array.c:648:
+				 * must start */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#253: FILE: fs/proc/array.c:649:
+				loff = len+off;
 				          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: fs/proc/array.c:651:
+			memcpy(kbuf+retval, tmp+off, len);
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: fs/proc/array.c:651:
+			memcpy(kbuf+retval, tmp+off, len);
 			                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#273: FILE: fs/proc/array.c:660:
+		if (loff) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#273: FILE: fs/proc/array.c:660:
+		if (loff) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#276: FILE: fs/proc/array.c:663:
+	if (retval > count) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#276: FILE: fs/proc/array.c:663:
+	if (retval > count) BUG();

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#277: FILE: fs/proc/array.c:664:
+	if (copy_to_user(buf, kbuf, retval)) {
[...]
+	} else {
[...]

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000512958.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 6 warnings, 10 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000512958.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
