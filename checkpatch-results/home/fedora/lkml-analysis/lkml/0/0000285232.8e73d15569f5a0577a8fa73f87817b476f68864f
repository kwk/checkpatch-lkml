WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#53: FILE: drivers/mmc/Kconfig:7:
+config MMC
+	tristate "MMC support"
+	help
+	  MMC is the "multi-media card" bus protocol.
+
+	  If you want MMC support, you should say Y here and also
+	  to the specific driver for your MMC interface.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: drivers/mmc/Kconfig:15:
+config MMC_DEBUG
+	bool "MMC debugging"
+	depends on MMC != n
+	help
+	  This is an option for use by developers; most people should
+	  say N here.  This enables MMC core and driver debugging.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: drivers/mmc/mmc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#107: FILE: drivers/mmc/mmc.c:2:
+ *  linux/drivers/mmc/mmc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#131: FILE: drivers/mmc/mmc.c:26:
+#define DBG(x...)	printk(KERN_DEBUG x)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: drivers/mmc/mmc.c:61:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: drivers/mmc/mmc.c:76:
+	int err = req->cmd->error;
+	DBG("MMC: req done (%02x): %d: %08x %08x %08x %08x\n", cmd->opcode,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#193: FILE: drivers/mmc/mmc.c:88:
+EXPORT_SYMBOL(mmc_request_done);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->card_busy"
#209: FILE: drivers/mmc/mmc.c:104:
+	WARN_ON(host->card_busy == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#226: FILE: drivers/mmc/mmc.c:121:
+EXPORT_SYMBOL(mmc_start_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#247: FILE: drivers/mmc/mmc.c:142:
+EXPORT_SYMBOL(mmc_wait_for_req);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#263: FILE: drivers/mmc/mmc.c:158:
+	BUG_ON(host->card_busy == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->card_busy"
#263: FILE: drivers/mmc/mmc.c:158:
+	BUG_ON(host->card_busy == NULL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#278: FILE: drivers/mmc/mmc.c:173:
+EXPORT_SYMBOL(mmc_wait_for_cmd);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: drivers/mmc/mmc.c:175:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->card_busy"
#303: FILE: drivers/mmc/mmc.c:198:
+		if (host->card_busy == NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#329: FILE: drivers/mmc/mmc.c:224:
+EXPORT_SYMBOL(__mmc_claim_host);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#342: FILE: drivers/mmc/mmc.c:237:
+	BUG_ON(host->card_busy == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->card_busy"
#342: FILE: drivers/mmc/mmc.c:237:
+	BUG_ON(host->card_busy == NULL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#351: FILE: drivers/mmc/mmc.c:246:
+EXPORT_SYMBOL(mmc_release_host);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#371: FILE: drivers/mmc/mmc.c:266:
+
+

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#375: FILE: drivers/mmc/mmc.c:270:
+		yield();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*card)...) over kmalloc(sizeof(struct mmc_card)...)
#474: FILE: drivers/mmc/mmc.c:369:
+	card = kmalloc(sizeof(struct mmc_card), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#585: FILE: drivers/mmc/mmc.c:480:
+			printk(KERN_ERR "%s: error requesting CID: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: drivers/mmc/mmc.c:481:
+			printk(KERN_ERR "%s: error requesting CID: %d\n",
+				host->host_name, err);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#622: FILE: drivers/mmc/mmc.c:517:
+		if (card->state & (MMC_STATE_DEAD|MMC_STATE_PRESENT))
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#739: FILE: drivers/mmc/mmc.c:634:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#752: FILE: drivers/mmc/mmc.c:647:
+EXPORT_SYMBOL(mmc_detect_change);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#754: FILE: drivers/mmc/mmc.c:649:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#808: FILE: drivers/mmc/mmc.c:703:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*host)...) over kmalloc(sizeof(struct mmc_host)...)
#820: FILE: drivers/mmc/mmc.c:715:
+	host = kmalloc(sizeof(struct mmc_host) + extra, GFP_KERNEL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#837: FILE: drivers/mmc/mmc.c:732:
+EXPORT_SYMBOL(mmc_alloc_host);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#856: FILE: drivers/mmc/mmc.c:751:
+EXPORT_SYMBOL(mmc_add_host);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#878: FILE: drivers/mmc/mmc.c:773:
+EXPORT_SYMBOL(mmc_remove_host);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#892: FILE: drivers/mmc/mmc.c:787:
+EXPORT_SYMBOL(mmc_free_host);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#911: FILE: drivers/mmc/mmc.c:806:
+EXPORT_SYMBOL(mmc_suspend_host);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#924: FILE: drivers/mmc/mmc.c:819:
+EXPORT_SYMBOL(mmc_resume_host);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#933: FILE: drivers/mmc/mmc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#934: FILE: drivers/mmc/mmc.h:2:
+ *  linux/drivers/mmc/mmc.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#953: FILE: drivers/mmc/mmc_block.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#988: FILE: drivers/mmc/mmc_block.c:36:
+#include <asm/uaccess.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1004: FILE: drivers/mmc/mmc_block.c:52:
+	spinlock_t	lock;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1042: FILE: drivers/mmc/mmc_block.c:90:
+static int mmc_blk_open(struct inode *inode, struct file *filp)
                                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1057: FILE: drivers/mmc/mmc_block.c:105:
+static int mmc_blk_release(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1066: FILE: drivers/mmc/mmc_block.c:114:
+mmc_blk_ioctl(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg)
                                                 ^^^^

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#1087: FILE: drivers/mmc/mmc_block.c:135:
+static struct block_device_operations mmc_bdops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1109: FILE: drivers/mmc/mmc_block.c:157:
+		printk(KERN_ERR "%s: killing request - no device/host\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1123: FILE: drivers/mmc/mmc_block.c:171:
+		printk(KERN_ERR "%s: bad request size\n",

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1166: FILE: drivers/mmc/mmc_block.c:214:
+			rq.cmd.opcode = rq.data.blocks > 1 ? MMC_READ_MULTIPLE_BLOCK : MMC_READ_SINGLE_BLOCK;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1179: FILE: drivers/mmc/mmc_block.c:227:
+			printk(KERN_ERR "%s: error %d sending read/write command\n",

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1184: FILE: drivers/mmc/mmc_block.c:232:
+		if (rq_data_dir(req) == READ) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1192: FILE: drivers/mmc/mmc_block.c:240:
+			printk(KERN_ERR "%s: error %d transferring data\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1199: FILE: drivers/mmc/mmc_block.c:247:
+			printk(KERN_ERR "%s: error %d sending stop command\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1210: FILE: drivers/mmc/mmc_block.c:258:
+				printk(KERN_ERR "%s: error %d requesting status\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1216: FILE: drivers/mmc/mmc_block.c:264:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1218: FILE: drivers/mmc/mmc_block.c:266:
+			printk(KERN_ERR "%s: status = %08x\n",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1243: FILE: drivers/mmc/mmc_block.c:291:
+static unsigned long dev_use[MMC_NUM_MINORS/(8*sizeof(unsigned long))];
                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1243: FILE: drivers/mmc/mmc_block.c:291:
+static unsigned long dev_use[MMC_NUM_MINORS/(8*sizeof(unsigned long))];
                                               ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*md)...) over kmalloc(sizeof(struct mmc_blk_data)...)
#1255: FILE: drivers/mmc/mmc_block.c:303:
+	md = kmalloc(sizeof(struct mmc_blk_data), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md->disk"
#1260: FILE: drivers/mmc/mmc_block.c:308:
+		if (md->disk == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1314: FILE: drivers/mmc/mmc_block.c:362:
+		printk(KERN_ERR "%s: unable to set block size to %d: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: drivers/mmc/mmc_block.c:363:
+		printk(KERN_ERR "%s: unable to set block size to %d: %d\n",
+			md->disk->disk_name, cmd.arg, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1331: FILE: drivers/mmc/mmc_block.c:379:
+		printk(KERN_WARNING "%s: read blocksize too small (%u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: drivers/mmc/mmc_block.c:380:
+		printk(KERN_WARNING "%s: read blocksize too small (%u)\n",
+			mmc_card_id(card), 1 << card->csd.read_blkbits);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1344: FILE: drivers/mmc/mmc_block.c:392:
+	printk(KERN_INFO "%s: %s %s %dKiB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1345: FILE: drivers/mmc/mmc_block.c:393:
+	printk(KERN_INFO "%s: %s %s %dKiB\n",
+		md->disk->disk_name, mmc_card_id(card), mmc_card_name(card),

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1385: FILE: drivers/mmc/mmc_block.c:433:
+	if (md) {
+		blk_stop_queue(md->queue.queue);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1422: FILE: drivers/mmc/mmc_block.c:470:
+		printk(KERN_WARNING "Unable to get major %d for MMC media: %d\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1455: FILE: drivers/mmc/mmc_queue.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1456: FILE: drivers/mmc/mmc_queue.c:2:
+ *  linux/drivers/mmc/mmc_queue.c

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1487: FILE: drivers/mmc/mmc_queue.c:33:
+		BUG_ON(!req->special);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1520: FILE: drivers/mmc/mmc_queue.c:66:
+	current->flags |= PF_MEMALLOC|PF_NOFREEZE;
 	                             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1539: FILE: drivers/mmc/mmc_queue.c:85:
+			mq->req = req = elv_next_request(q);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1617: FILE: drivers/mmc/mmc_queue.c:163:
+EXPORT_SYMBOL(mmc_init_queue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1629: FILE: drivers/mmc/mmc_queue.c:175:
+EXPORT_SYMBOL(mmc_cleanup_queue);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1634: FILE: drivers/mmc/mmc_queue.h:1:
+#ifndef MMC_QUEUE_H

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_queue *' should also have an identifier name
#1646: FILE: drivers/mmc/mmc_queue.h:13:
+	int			(*prep_fn)(struct mmc_queue *, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1646: FILE: drivers/mmc/mmc_queue.h:13:
+	int			(*prep_fn)(struct mmc_queue *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_queue *' should also have an identifier name
#1647: FILE: drivers/mmc/mmc_queue.h:14:
+	int			(*issue_fn)(struct mmc_queue *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1647: FILE: drivers/mmc/mmc_queue.h:14:
+	int			(*issue_fn)(struct mmc_queue *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1659: FILE: drivers/mmc/mmc_queue.h:26:
+extern int mmc_init_queue(struct mmc_queue *, struct mmc_card *, spinlock_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_queue *' should also have an identifier name
#1659: FILE: drivers/mmc/mmc_queue.h:26:
+extern int mmc_init_queue(struct mmc_queue *, struct mmc_card *, spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_card *' should also have an identifier name
#1659: FILE: drivers/mmc/mmc_queue.h:26:
+extern int mmc_init_queue(struct mmc_queue *, struct mmc_card *, spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#1659: FILE: drivers/mmc/mmc_queue.h:26:
+extern int mmc_init_queue(struct mmc_queue *, struct mmc_card *, spinlock_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1660: FILE: drivers/mmc/mmc_queue.h:27:
+extern void mmc_cleanup_queue(struct mmc_queue *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_queue *' should also have an identifier name
#1660: FILE: drivers/mmc/mmc_queue.h:27:
+extern void mmc_cleanup_queue(struct mmc_queue *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1667: FILE: drivers/mmc/mmc_sysfs.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1668: FILE: drivers/mmc/mmc_sysfs.c:2:
+ *  linux/drivers/mmc/mmc_sysfs.c

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1715: FILE: drivers/mmc/mmc_sysfs.c:49:
+#define add_env(fmt,val)						\
                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1771: FILE: drivers/mmc/mmc_sysfs.c:105:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1790: FILE: drivers/mmc/mmc_sysfs.c:124:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1803: FILE: drivers/mmc/mmc_sysfs.c:137:
+EXPORT_SYMBOL(mmc_register_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1815: FILE: drivers/mmc/mmc_sysfs.c:149:
+EXPORT_SYMBOL(mmc_unregister_driver);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1817: FILE: drivers/mmc/mmc_sysfs.c:151:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1819: FILE: drivers/mmc/mmc_sysfs.c:153:
+static ssize_t mmc_dev_show_##name (struct device *dev, char *buf)	\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1824: FILE: drivers/mmc/mmc_sysfs.c:158:
+static DEVICE_ATTR(name, S_IRUGO, mmc_dev_show_##name, NULL)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1885: FILE: drivers/mmc/mmc_sysfs.c:219:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1902: FILE: include/linux/mmc/card.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1903: FILE: include/linux/mmc/card.h:2:
+ *  linux/include/linux/mmc/card.h

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1947: FILE: include/linux/mmc/card.h:46:
+#define MMC_STATE_PRESENT	(1<<0)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1947: FILE: include/linux/mmc/card.h:46:
+#define MMC_STATE_PRESENT	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1948: FILE: include/linux/mmc/card.h:47:
+#define MMC_STATE_DEAD		(1<<1)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1948: FILE: include/linux/mmc/card.h:47:
+#define MMC_STATE_DEAD		(1<<1)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1961: FILE: include/linux/mmc/card.h:60:
+#define mmc_set_drvdata(c,d)	dev_set_drvdata(&(c)->dev, d)
                          ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_card *' should also have an identifier name
#1968: FILE: include/linux/mmc/card.h:67:
+	int (*probe)(struct mmc_card *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_card *' should also have an identifier name
#1969: FILE: include/linux/mmc/card.h:68:
+	void (*remove)(struct mmc_card *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_card *' should also have an identifier name
#1970: FILE: include/linux/mmc/card.h:69:
+	int (*suspend)(struct mmc_card *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1970: FILE: include/linux/mmc/card.h:69:
+	int (*suspend)(struct mmc_card *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_card *' should also have an identifier name
#1971: FILE: include/linux/mmc/card.h:70:
+	int (*resume)(struct mmc_card *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1974: FILE: include/linux/mmc/card.h:73:
+extern int mmc_register_driver(struct mmc_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_driver *' should also have an identifier name
#1974: FILE: include/linux/mmc/card.h:73:
+extern int mmc_register_driver(struct mmc_driver *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1975: FILE: include/linux/mmc/card.h:74:
+extern void mmc_unregister_driver(struct mmc_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_driver *' should also have an identifier name
#1975: FILE: include/linux/mmc/card.h:74:
+extern void mmc_unregister_driver(struct mmc_driver *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1989: FILE: include/linux/mmc/host.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1990: FILE: include/linux/mmc/host.h:2:
+ *  linux/include/linux/mmc/host.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2075: FILE: include/linux/mmc/host.h:87:
+extern struct mmc_host *mmc_alloc_host(int extra, struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#2075: FILE: include/linux/mmc/host.h:87:
+extern struct mmc_host *mmc_alloc_host(int extra, struct device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2076: FILE: include/linux/mmc/host.h:88:
+extern int mmc_add_host(struct mmc_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2076: FILE: include/linux/mmc/host.h:88:
+extern int mmc_add_host(struct mmc_host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2077: FILE: include/linux/mmc/host.h:89:
+extern void mmc_remove_host(struct mmc_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2077: FILE: include/linux/mmc/host.h:89:
+extern void mmc_remove_host(struct mmc_host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2078: FILE: include/linux/mmc/host.h:90:
+extern void mmc_free_host(struct mmc_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2078: FILE: include/linux/mmc/host.h:90:
+extern void mmc_free_host(struct mmc_host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2083: FILE: include/linux/mmc/host.h:95:
+extern int mmc_suspend_host(struct mmc_host *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2083: FILE: include/linux/mmc/host.h:95:
+extern int mmc_suspend_host(struct mmc_host *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2083: FILE: include/linux/mmc/host.h:95:
+extern int mmc_suspend_host(struct mmc_host *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2084: FILE: include/linux/mmc/host.h:96:
+extern int mmc_resume_host(struct mmc_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2084: FILE: include/linux/mmc/host.h:96:
+extern int mmc_resume_host(struct mmc_host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2086: FILE: include/linux/mmc/host.h:98:
+extern void mmc_detect_change(struct mmc_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2086: FILE: include/linux/mmc/host.h:98:
+extern void mmc_detect_change(struct mmc_host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2087: FILE: include/linux/mmc/host.h:99:
+extern void mmc_request_done(struct mmc_host *, struct mmc_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2087: FILE: include/linux/mmc/host.h:99:
+extern void mmc_request_done(struct mmc_host *, struct mmc_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_request *' should also have an identifier name
#2087: FILE: include/linux/mmc/host.h:99:
+extern void mmc_request_done(struct mmc_host *, struct mmc_request *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2095: FILE: include/linux/mmc/mmc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2096: FILE: include/linux/mmc/mmc.h:2:
+ *  linux/include/linux/mmc/mmc.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#2119: FILE: include/linux/mmc/mmc.h:25:
+#define MMC_RSP_SHORT	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2122: FILE: include/linux/mmc/mmc.h:28:
+#define MMC_RSP_CRC	(1 << 3)		/* expect valid crc */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2123: FILE: include/linux/mmc/mmc.h:29:
+#define MMC_RSP_BUSY	(1 << 4)		/* card may send busy */

WARNING:TYPO_SPELLING: 'assoicated' may be misspelled - perhaps 'associated'?
#2136: FILE: include/linux/mmc/mmc.h:42:
+	struct mmc_request	*req;		/* assoicated request */
 	                  	     		   ^^^^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2148: FILE: include/linux/mmc/mmc.h:54:
+#define MMC_DATA_WRITE	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2149: FILE: include/linux/mmc/mmc.h:55:
+#define MMC_DATA_READ	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2150: FILE: include/linux/mmc/mmc.h:56:
+#define MMC_DATA_STREAM	(1 << 10)

WARNING:TYPO_SPELLING: 'assoicated' may be misspelled - perhaps 'associated'?
#2155: FILE: include/linux/mmc/mmc.h:61:
+	struct mmc_request	*req;		/* assoicated request */
 	                  	     		   ^^^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_request *' should also have an identifier name
#2164: FILE: include/linux/mmc/mmc.h:70:
+	void			(*done)(struct mmc_request *);/* completion function */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2170: FILE: include/linux/mmc/mmc.h:76:
+extern int mmc_wait_for_req(struct mmc_host *, struct mmc_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2170: FILE: include/linux/mmc/mmc.h:76:
+extern int mmc_wait_for_req(struct mmc_host *, struct mmc_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_request *' should also have an identifier name
#2170: FILE: include/linux/mmc/mmc.h:76:
+extern int mmc_wait_for_req(struct mmc_host *, struct mmc_request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2171: FILE: include/linux/mmc/mmc.h:77:
+extern int mmc_wait_for_cmd(struct mmc_host *, struct mmc_command *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_host *' should also have an identifier name
#2171: FILE: include/linux/mmc/mmc.h:77:
+extern int mmc_wait_for_cmd(struct mmc_host *, struct mmc_command *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mmc_command *' should also have an identifier name
#2171: FILE: include/linux/mmc/mmc.h:77:
+extern int mmc_wait_for_cmd(struct mmc_host *, struct mmc_command *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2171: FILE: include/linux/mmc/mmc.h:77:
+extern int mmc_wait_for_cmd(struct mmc_host *, struct mmc_command *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2173: FILE: include/linux/mmc/mmc.h:79:
+extern int __mmc_claim_host(struct mmc_host *host, struct mmc_card *card);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2180: FILE: include/linux/mmc/mmc.h:86:
+extern void mmc_release_host(struct mmc_host *host);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2187: FILE: include/linux/mmc/protocol.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2266: FILE: include/linux/mmc/protocol.h:80:
+/*
+  MMC status in R1

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#2268: FILE: include/linux/mmc/protocol.h:82:
+  ^Ie : error bit$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2268: FILE: include/linux/mmc/protocol.h:82:
+  ^Ie : error bit$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2272: FILE: include/linux/mmc/protocol.h:86:
+            the card by sending status command in order to read these bits.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2274: FILE: include/linux/mmc/protocol.h:88:
+  ^Ia : according to the card state$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2274: FILE: include/linux/mmc/protocol.h:88:
+  ^Ia : according to the card state$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2276: FILE: include/linux/mmc/protocol.h:90:
+            a valid command will clear it (with a delay of one command)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#2280: FILE: include/linux/mmc/protocol.h:94:
+#define R1_OUT_OF_RANGE		(1 << 31)	/* er, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2281: FILE: include/linux/mmc/protocol.h:95:
+#define R1_ADDRESS_ERROR	(1 << 30)	/* erx, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2282: FILE: include/linux/mmc/protocol.h:96:
+#define R1_BLOCK_LEN_ERROR	(1 << 29)	/* er, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2283: FILE: include/linux/mmc/protocol.h:97:
+#define R1_ERASE_SEQ_ERROR      (1 << 28)	/* er, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2284: FILE: include/linux/mmc/protocol.h:98:
+#define R1_ERASE_PARAM		(1 << 27)	/* ex, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2285: FILE: include/linux/mmc/protocol.h:99:
+#define R1_WP_VIOLATION		(1 << 26)	/* erx, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2286: FILE: include/linux/mmc/protocol.h:100:
+#define R1_CARD_IS_LOCKED	(1 << 25)	/* sx, a */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2287: FILE: include/linux/mmc/protocol.h:101:
+#define R1_LOCK_UNLOCK_FAILED	(1 << 24)	/* erx, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2288: FILE: include/linux/mmc/protocol.h:102:
+#define R1_COM_CRC_ERROR	(1 << 23)	/* er, b */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2289: FILE: include/linux/mmc/protocol.h:103:
+#define R1_ILLEGAL_COMMAND	(1 << 22)	/* er, b */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2290: FILE: include/linux/mmc/protocol.h:104:
+#define R1_CARD_ECC_FAILED	(1 << 21)	/* ex, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2291: FILE: include/linux/mmc/protocol.h:105:
+#define R1_CC_ERROR		(1 << 20)	/* erx, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2292: FILE: include/linux/mmc/protocol.h:106:
+#define R1_ERROR		(1 << 19)	/* erx, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2293: FILE: include/linux/mmc/protocol.h:107:
+#define R1_UNDERRUN		(1 << 18)	/* ex, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2294: FILE: include/linux/mmc/protocol.h:108:
+#define R1_OVERRUN		(1 << 17)	/* ex, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2295: FILE: include/linux/mmc/protocol.h:109:
+#define R1_CID_CSD_OVERWRITE	(1 << 16)	/* erx, c, CID/CSD overwrite */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2296: FILE: include/linux/mmc/protocol.h:110:
+#define R1_WP_ERASE_SKIP	(1 << 15)	/* sx, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2297: FILE: include/linux/mmc/protocol.h:111:
+#define R1_CARD_ECC_DISABLED	(1 << 14)	/* sx, a */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2298: FILE: include/linux/mmc/protocol.h:112:
+#define R1_ERASE_RESET		(1 << 13)	/* sr, c */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2299: FILE: include/linux/mmc/protocol.h:113:
+#define R1_STATUS(x)            (x & 0xFFFFE000)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2300: FILE: include/linux/mmc/protocol.h:114:
+#define R1_CURRENT_STATE(x)    ^I((x & 0x00001E00) >> 9)^I/* sx, b (4 bits) */$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2300: FILE: include/linux/mmc/protocol.h:114:
+#define R1_CURRENT_STATE(x)    	((x & 0x00001E00) >> 9)	/* sx, b (4 bits) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2301: FILE: include/linux/mmc/protocol.h:115:
+#define R1_READY_FOR_DATA	(1 << 8)	/* sx, a */

CHECK:BIT_MACRO: Prefer using the BIT macro
#2302: FILE: include/linux/mmc/protocol.h:116:
+#define R1_APP_CMD		(1 << 7)	/* sr, c */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2374: FILE: include/linux/mmc/protocol.h:188:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285232.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 102 warnings, 78 checks, 2299 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285232.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
