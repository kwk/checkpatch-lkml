WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#43: FILE: init/Kconfig:188:
+config CKRM_RES_CPU
+	bool "CPU Resource Controller"
+	select CPU_RC
+	depends on CKRM
+	default y
+	help
+	  Provides a CPU Resource Controller for CKRM.
+
+	  Say N if unsure, Y to use the feature.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: kernel/ckrm/ckrm_cpu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#71: FILE: kernel/ckrm/ckrm_cpu.c:2:
+ *  kernel/ckrm/ckrm_cpu.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#95: FILE: kernel/ckrm/ckrm_cpu.c:26:
+^Iint ^Icnt_total_min_shares; ^I/* total min_shares behind the class */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_ctlr.ctlr_id == CKRM_NO_RES_ID'
#119: FILE: kernel/ckrm/ckrm_cpu.c:50:
+	if ((cpu_ctlr.ctlr_id == CKRM_NO_RES_ID) || (class == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'class == NULL'
#119: FILE: kernel/ckrm/ckrm_cpu.c:50:
+	if ((cpu_ctlr.ctlr_id == CKRM_NO_RES_ID) || (class == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!class"
#119: FILE: kernel/ckrm/ckrm_cpu.c:50:
+	if ((cpu_ctlr.ctlr_id == CKRM_NO_RES_ID) || (class == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: kernel/ckrm/ckrm_cpu.c:61:
+static void cpu_res_initcls_one(struct ckrm_cpu * res)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*res)...) over kzalloc(sizeof(struct ckrm_cpu)...)
#146: FILE: kernel/ckrm/ckrm_cpu.c:77:
+	res = kzalloc(sizeof(struct ckrm_cpu), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#173: FILE: kernel/ckrm/ckrm_cpu.c:104:
+		temp = (u64) parres->shares.unused_min_shares

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#197: FILE: kernel/ckrm/ckrm_cpu.c:128:
+	printk(KERN_INFO "init_ckrm_cpu_res %d cpus available\n", grcd.numcpus);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_ckrm_cpu_res', this function's name, in a string
#197: FILE: kernel/ckrm/ckrm_cpu.c:128:
+	printk(KERN_INFO "init_ckrm_cpu_res %d cpus available\n", grcd.numcpus);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: kernel/ckrm/ckrm_cpu.c:135:
+	int rc;
+	do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: kernel/ckrm/ckrm_cpu.c:138:
+	BUG_ON(rc != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083852.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 8 warnings, 5 checks, 162 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083852.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
