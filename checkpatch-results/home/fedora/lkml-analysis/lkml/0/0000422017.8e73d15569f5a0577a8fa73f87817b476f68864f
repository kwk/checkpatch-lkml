WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#79: FILE: kernel/resource.c:21:
+/*
+#define RESOURCE98_DEBUG

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#121: FILE: kernel/resource.c:93:
+	printk(KERN_DEBUG "request_resource(): new={%lx-%lx%c, \"%s\"}\n",

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#123: FILE: kernel/resource.c:95:
+	       (new->flags&IORESOURCE98_SPARSE) ? '*' : ' ', new->name);
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#135: FILE: kernel/resource.c:108:
+			printk(KERN_DEBUG "request_resource(): "

WARNING:SPLIT_STRING: quoted string split across lines
#136: FILE: kernel/resource.c:109:
+			printk(KERN_DEBUG "request_resource(): "
+				"compare {%lx-%lx%c,\"%s\"}\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp->start > start'
#141: FILE: kernel/resource.c:114:
+		if (!tmp || tmp->start > end
+#ifdef CONFIG_PC9800
+		    || ((tmp->flags & IORESOURCE98_SPARSE
+			 || tmp->end == tmp->start)
+			&& (new->flags & IORESOURCE98_SPARSE || end == start)
+			&& ((start ^ tmp->start) & 1) != 0
+			&& (tmp->start > start))
+#endif
+			) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#143: FILE: kernel/resource.c:116:
+#ifdef CONFIG_PC9800
+		    || ((tmp->flags & IORESOURCE98_SPARSE

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#144: FILE: kernel/resource.c:117:
+		    || ((tmp->flags & IORESOURCE98_SPARSE
+			 || tmp->end == tmp->start)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#145: FILE: kernel/resource.c:118:
+			 || tmp->end == tmp->start)
+			&& (new->flags & IORESOURCE98_SPARSE || end == start)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#146: FILE: kernel/resource.c:119:
+			&& (new->flags & IORESOURCE98_SPARSE || end == start)
+			&& ((start ^ tmp->start) & 1) != 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#147: FILE: kernel/resource.c:120:
+			&& ((start ^ tmp->start) & 1) != 0
+			&& (tmp->start > start))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#159: FILE: kernel/resource.c:133:
+		if ((tmp->flags & IORESOURCE98_SPARSE
+		     || tmp->end == tmp->start)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#160: FILE: kernel/resource.c:134:
+		     || tmp->end == tmp->start)
+		    && (new->flags & IORESOURCE98_SPARSE || end == start)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#161: FILE: kernel/resource.c:135:
+		    && (new->flags & IORESOURCE98_SPARSE || end == start)
+		    && ((start ^ tmp->start) & 1) != 0)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#174: FILE: kernel/resource.c:269:
+struct resource * __request_region(struct resource *parent, unsigned long start, long n, const char *name)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: kernel/resource.c:269:
+struct resource * __request_region(struct resource *parent, unsigned long start, long n, const char *name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#186: FILE: kernel/resource.c:280:
+		if ((long) n < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#239: FILE: kernel/resource.c:356:
+		printk(KERN_DEBUG

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: kernel/timer.c:383:
+extern unsigned long tick_usec; ^I^I/* ACTHZ   period (usec) */$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#286: FILE: kernel/timer.c:384:
+extern unsigned long tick_nsec;			/* USER_HZ period (nsec) */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#313: FILE: include/linux/ioport.h:109:
+extern struct resource * __request_region(struct resource *, unsigned long start, long n, const char *name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: include/linux/ioport.h:109:
+extern struct resource * __request_region(struct resource *, unsigned long start, long n, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/ioport.h:109:
+extern struct resource * __request_region(struct resource *, unsigned long start, long n, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: include/linux/ioport.h:122:
+extern int __check_region(struct resource *, unsigned long, long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/ioport.h:123:
+extern void __release_region(struct resource *, unsigned long, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource *' should also have an identifier name
#327: FILE: include/linux/ioport.h:123:
+extern void __release_region(struct resource *, unsigned long, long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#327: FILE: include/linux/ioport.h:123:
+extern void __release_region(struct resource *, unsigned long, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#327: FILE: include/linux/ioport.h:123:
+extern void __release_region(struct resource *, unsigned long, long);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422017.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 12 warnings, 14 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422017.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
