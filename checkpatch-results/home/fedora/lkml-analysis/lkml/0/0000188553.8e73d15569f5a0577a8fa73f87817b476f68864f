WARNING:TYPO_SPELLING: 'Thats' may be misspelled - perhaps 'That's'?
#66: 
Thats what I used to think, however you want the node-local setup for
^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: arch/ia64/kernel/mspec.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: arch/ia64/kernel/mspec.c:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#202: FILE: arch/ia64/kernel/mspec.c:53:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#203: FILE: arch/ia64/kernel/mspec.c:54:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: arch/ia64/kernel/mspec.c:64:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#222: FILE: arch/ia64/kernel/mspec.c:73:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#229: FILE: arch/ia64/kernel/mspec.c:80:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: arch/ia64/kernel/mspec.c:90:
+
+

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#241: FILE: arch/ia64/kernel/mspec.c:92:
+ * One of these structures is allocated when an mspec region is mmaped. The
                                                                 ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: arch/ia64/kernel/mspec.c:93:
+ * structure is pointed to by the vma->vm_private_data field in the vma struct. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#253: FILE: arch/ia64/kernel/mspec.c:104:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: arch/ia64/kernel/mspec.c:121:
+
+

CHECK:BRACES: Unbalanced braces around else statement
#278: FILE: arch/ia64/kernel/mspec.c:129:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: arch/ia64/kernel/mspec.c:136:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status != PAL_VISIBILITY_OK'
#291: FILE: arch/ia64/kernel/mspec.c:142:
+	if ((status != PAL_VISIBILITY_OK) &&
+	    (status != PAL_VISIBILITY_OK_REMOTE_NEEDED))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status != PAL_VISIBILITY_OK_REMOTE_NEEDED'
#291: FILE: arch/ia64/kernel/mspec.c:142:
+	if ((status != PAL_VISIBILITY_OK) &&
+	    (status != PAL_VISIBILITY_OK_REMOTE_NEEDED))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#293: FILE: arch/ia64/kernel/mspec.c:144:
+		printk(KERN_DEBUG "pal_prefetch_visibility() returns %i on "

WARNING:SPLIT_STRING: quoted string split across lines
#294: FILE: arch/ia64/kernel/mspec.c:145:
+		printk(KERN_DEBUG "pal_prefetch_visibility() returns %i on "
+		       "CPU %i\n", status, get_cpu());

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#297: FILE: arch/ia64/kernel/mspec.c:148:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: arch/ia64/kernel/mspec.c:152:
+	int status;
+	status = ia64_pal_mc_drain();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#303: FILE: arch/ia64/kernel/mspec.c:154:
+		printk(KERN_WARNING "ia64_pal_mc_drain() failed with %i on "

WARNING:SPLIT_STRING: quoted string split across lines
#304: FILE: arch/ia64/kernel/mspec.c:155:
+		printk(KERN_WARNING "ia64_pal_mc_drain() failed with %i on "
+		       "CPU %i\n", status, get_cpu());

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: arch/ia64/kernel/mspec.c:158:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#321: FILE: arch/ia64/kernel/mspec.c:172:
+				IA64_GRANULE_SHIFT-PAGE_SHIFT);
 				                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#324: FILE: arch/ia64/kernel/mspec.c:175:
+		page, (unsigned long)(page-vmem_map) << PAGE_SHIFT);
 		                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#351: FILE: arch/ia64/kernel/mspec.c:202:
+			printk(KERN_WARNING "smp_call_function failed for "

WARNING:SPLIT_STRING: quoted string split across lines
#352: FILE: arch/ia64/kernel/mspec.c:203:
+			printk(KERN_WARNING "smp_call_function failed for "
+			       "mspec_ipi_visibility! (%i)\n", status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#359: FILE: arch/ia64/kernel/mspec.c:210:
+		printk(KERN_WARNING "smp_call_function failed for "

WARNING:SPLIT_STRING: quoted string split across lines
#360: FILE: arch/ia64/kernel/mspec.c:211:
+		printk(KERN_WARNING "smp_call_function failed for "
+		       "mspec_ipi_mc_drain! (%i)\n", status);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#368: FILE: arch/ia64/kernel/mspec.c:219:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mspec_alloc_page', this function's name, in a string
#383: FILE: arch/ia64/kernel/mspec.c:234:
+	dprintk(KERN_DEBUG "mspec_alloc_page returns %lx on node %i\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'availble' may be misspelled - perhaps 'available'?
#387: FILE: arch/ia64/kernel/mspec.c:238:
+	 * If no memory is availble on our local node, try the
 	                   ^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mspec_alloc_page', this function's name, in a string
#397: FILE: arch/ia64/kernel/mspec.c:248:
+			dprintk(KERN_DEBUG "mspec_alloc_page alternate search "

WARNING:SPLIT_STRING: quoted string split across lines
#398: FILE: arch/ia64/kernel/mspec.c:249:
+			dprintk(KERN_DEBUG "mspec_alloc_page alternate search "
+				"returns %lx on node %i\n", maddr, i);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#399: FILE: arch/ia64/kernel/mspec.c:250:
+			if (maddr) {
+				break;
+			}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#412: FILE: arch/ia64/kernel/mspec.c:263:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mspec_free_page', this function's name, in a string
#425: FILE: arch/ia64/kernel/mspec.c:276:
+	dprintk(KERN_DEBUG "mspec_free_page(%lx) on node %i\n", maddr, node);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: arch/ia64/kernel/mspec.c:279:
+^I^Ipanic("mspec_free_page invalid address %lx\n", maddr); $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mspec_free_page', this function's name, in a string
#428: FILE: arch/ia64/kernel/mspec.c:279:
+		panic("mspec_free_page invalid address %lx\n", maddr); 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#435: FILE: arch/ia64/kernel/mspec.c:286:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#452: FILE: arch/ia64/kernel/mspec.c:303:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: arch/ia64/kernel/mspec.c:322:
+^I^I^I^I * Clear the page before sticking it back $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#478: FILE: arch/ia64/kernel/mspec.c:329:
+					printk(KERN_WARNING "mspec_close(): "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mspec_close', this function's name, in a string
#478: FILE: arch/ia64/kernel/mspec.c:329:
+					printk(KERN_WARNING "mspec_close(): "

WARNING:SPLIT_STRING: quoted string split across lines
#479: FILE: arch/ia64/kernel/mspec.c:330:
+					printk(KERN_WARNING "mspec_close(): "
+					       "failed to zero page %i\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: arch/ia64/kernel/mspec.c:334:
+^I^Iif (vdata->count) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#489: FILE: arch/ia64/kernel/mspec.c:340:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#495: FILE: arch/ia64/kernel/mspec.c:346:
+static __inline__ int

WARNING:BRACES: braces {} are not necessary for single statement blocks
#509: FILE: arch/ia64/kernel/mspec.c:360:
+				if (pte_present(**pte)) {
+					return 0;
+				}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: arch/ia64/kernel/mspec.c:370:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: arch/ia64/kernel/mspec.c:394:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#547: FILE: arch/ia64/kernel/mspec.c:398:
+		printk(KERN_ERR "page already mapped\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#567: FILE: arch/ia64/kernel/mspec.c:418:
+		printk(KERN_ERR "remap_pfn_range failed!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#603: FILE: arch/ia64/kernel/mspec.c:454:
+
+

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#604: FILE: arch/ia64/kernel/mspec.c:455:
+static struct vm_operations_struct mspec_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#610: FILE: arch/ia64/kernel/mspec.c:461:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#631: FILE: arch/ia64/kernel/mspec.c:482:
+	if (!(vdata = vmalloc(sizeof(struct vma_data)+(pages-1)*sizeof(long))))
 	                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#631: FILE: arch/ia64/kernel/mspec.c:482:
+	if (!(vdata = vmalloc(sizeof(struct vma_data)+(pages-1)*sizeof(long))))
 	                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#631: FILE: arch/ia64/kernel/mspec.c:482:
+	if (!(vdata = vmalloc(sizeof(struct vma_data)+(pages-1)*sizeof(long))))
 	                                                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#631: FILE: arch/ia64/kernel/mspec.c:482:
+	if (!(vdata = vmalloc(sizeof(struct vma_data)+(pages-1)*sizeof(long))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*vdata)...) over vmalloc(sizeof(struct vma_data)...)
#631: FILE: arch/ia64/kernel/mspec.c:482:
+	if (!(vdata = vmalloc(sizeof(struct vma_data)+(pages-1)*sizeof(long))))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#633: FILE: arch/ia64/kernel/mspec.c:484:
+	memset(vdata, 0, sizeof(struct vma_data)+(pages-1)*sizeof(long));
 	                                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#633: FILE: arch/ia64/kernel/mspec.c:484:
+	memset(vdata, 0, sizeof(struct vma_data)+(pages-1)*sizeof(long));
 	                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#633: FILE: arch/ia64/kernel/mspec.c:484:
+	memset(vdata, 0, sizeof(struct vma_data)+(pages-1)*sizeof(long));
 	                                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: arch/ia64/kernel/mspec.c:500:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#656: FILE: arch/ia64/kernel/mspec.c:507:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#663: FILE: arch/ia64/kernel/mspec.c:514:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#670: FILE: arch/ia64/kernel/mspec.c:521:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: arch/ia64/kernel/mspec.c:528:
+^Ireturn NULL;^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#711: FILE: arch/ia64/kernel/mspec.c:562:
+
+

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#712: FILE: arch/ia64/kernel/mspec.c:563:
+static struct seq_operations mspec_seq_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#725: FILE: arch/ia64/kernel/mspec.c:576:
+static struct file_operations proc_mspec_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#732: FILE: arch/ia64/kernel/mspec.c:583:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mspec_build_memmap', this function's name, in a string
#754: FILE: arch/ia64/kernel/mspec.c:605:
+	dprintk(KERN_ERR "mspec_build_memmap(%lx %lx)\n", start, end);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#776: FILE: arch/ia64/kernel/mspec.c:627:
+mspec_walk_efi_memmap_uc (void)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#790: FILE: arch/ia64/kernel/mspec.c:641:
+			end = PAGE_ALIGN((md->phys_addr+(md->num_pages << EFI_PAGE_SHIFT)) & PAGE_MASK);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#790: FILE: arch/ia64/kernel/mspec.c:641:
+			end = PAGE_ALIGN((md->phys_addr+(md->num_pages << EFI_PAGE_SHIFT)) & PAGE_MASK);
 			                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#797: FILE: arch/ia64/kernel/mspec.c:648:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#798: FILE: arch/ia64/kernel/mspec.c:649:
+static struct file_operations fetchop_fops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#802: FILE: arch/ia64/kernel/mspec.c:653:
+};
+static struct miscdevice fetchop_miscdev = {

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#805: FILE: arch/ia64/kernel/mspec.c:656:
+	.fops		&fetchop_fops
 	     		^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#808: FILE: arch/ia64/kernel/mspec.c:659:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#809: FILE: arch/ia64/kernel/mspec.c:660:
+static struct file_operations cached_fops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#813: FILE: arch/ia64/kernel/mspec.c:664:
+};
+static struct miscdevice cached_miscdev = {

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#816: FILE: arch/ia64/kernel/mspec.c:667:
+	.fops		&cached_fops
 	     		^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#819: FILE: arch/ia64/kernel/mspec.c:670:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#820: FILE: arch/ia64/kernel/mspec.c:671:
+static struct file_operations uncached_fops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#824: FILE: arch/ia64/kernel/mspec.c:675:
+};
+static struct miscdevice uncached_miscdev = {

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#827: FILE: arch/ia64/kernel/mspec.c:678:
+	.fops		&uncached_fops
 	     		^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#830: FILE: arch/ia64/kernel/mspec.c:681:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#846: FILE: arch/ia64/kernel/mspec.c:697:
+		if ((ret = misc_register(&fetchop_miscdev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#847: FILE: arch/ia64/kernel/mspec.c:698:
+			printk(KERN_ERR "%s: failed to register device %i\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#852: FILE: arch/ia64/kernel/mspec.c:703:
+	if ((ret = misc_register(&cached_miscdev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#853: FILE: arch/ia64/kernel/mspec.c:704:
+		printk(KERN_ERR "%s: failed to register device %i\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#858: FILE: arch/ia64/kernel/mspec.c:709:
+	if ((ret = misc_register(&uncached_miscdev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#859: FILE: arch/ia64/kernel/mspec.c:710:
+		printk(KERN_ERR "%s: failed to register device %i\n",

ERROR:SPACING: space required before the open brace '{'
#871: FILE: arch/ia64/kernel/mspec.c:722:
+	if (!(proc_mspec = create_proc_entry(MSPEC_BASENAME, 0444, NULL))){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#871: FILE: arch/ia64/kernel/mspec.c:722:
+	if (!(proc_mspec = create_proc_entry(MSPEC_BASENAME, 0444, NULL))){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#872: FILE: arch/ia64/kernel/mspec.c:723:
+		printk(KERN_ERR "%s: unable to create proc entry",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#891: FILE: arch/ia64/kernel/mspec.c:742:
+	printk(KERN_INFO "%s %s initialized devices: %s %s %s\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#899: FILE: arch/ia64/kernel/mspec.c:750:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#903: FILE: arch/ia64/kernel/mspec.c:754:
+	BUG_ON(atomic_read(&mspec_stats.pages_in_use) > 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#913: FILE: arch/ia64/kernel/mspec.c:764:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#917: FILE: arch/ia64/kernel/mspec.c:768:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1014: FILE: include/asm-ia64/sn/mspec.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#1040: FILE: include/asm-ia64/sn/mspec.h:27:
+         *(volatile long *)((char*) (addr) + (op)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#1040: FILE: include/asm-ia64/sn/mspec.h:27:
+         *(volatile long *)((char*) (addr) + (op)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: include/asm-ia64/sn/mspec.h:27:
+         *(volatile long *)((char*) (addr) + (op)))$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1040: FILE: include/asm-ia64/sn/mspec.h:27:
+         *(volatile long *)((char*) (addr) + (op)))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1040: FILE: include/asm-ia64/sn/mspec.h:27:
+         *(volatile long *)((char*) (addr) + (op)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1043: FILE: include/asm-ia64/sn/mspec.h:30:
+         *(volatile long *)((char*) (addr) + (op)) = (long) (x))$

CHECK:SPACING: No space is necessary after a cast
#1043: FILE: include/asm-ia64/sn/mspec.h:30:
+         *(volatile long *)((char*) (addr) + (op)) = (long) (x))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: include/asm-ia64/sn/mspec.h:30:
+         *(volatile long *)((char*) (addr) + (op)) = (long) (x))$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1043: FILE: include/asm-ia64/sn/mspec.h:30:
+         *(volatile long *)((char*) (addr) + (op)) = (long) (x))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1043: FILE: include/asm-ia64/sn/mspec.h:30:
+         *(volatile long *)((char*) (addr) + (op)) = (long) (x))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: include/asm-ia64/sn/mspec.h:39:
+ * $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1064: FILE: include/asm-ia64/sn/mspec.h:51:
+typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: include/asm-ia64/sn/mspec.h:52:
+        u64 variable;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: include/asm-ia64/sn/mspec.h:52:
+        u64 variable;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: include/asm-ia64/sn/mspec.h:53:
+        u64 unused[7];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: include/asm-ia64/sn/mspec.h:53:
+        u64 unused[7];$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1069: FILE: include/asm-ia64/sn/mspec.h:56:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1074: FILE: include/asm-ia64/sn/mspec.h:61:
+ *^I^I^I^I  specified cnode. $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1078: FILE: include/asm-ia64/sn/mspec.h:65:
+extern unsigned long mspec_kalloc_page(int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1078: FILE: include/asm-ia64/sn/mspec.h:65:
+extern unsigned long mspec_kalloc_page(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1079: FILE: include/asm-ia64/sn/mspec.h:66:
+extern void mspec_kfree_page(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1079: FILE: include/asm-ia64/sn/mspec.h:66:
+extern void mspec_kfree_page(unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1081: FILE: include/asm-ia64/sn/mspec.h:68:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188553.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 52 warnings, 58 checks, 880 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188553.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
