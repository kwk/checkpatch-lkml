WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#179: FILE: include/linux/notifier.h:36:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#179: FILE: include/linux/notifier.h:36:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#179: FILE: include/linux/notifier.h:36:
+	int (*notifier_call)(struct notifier_block *, unsigned long, void *);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#185: FILE: include/linux/notifier.h:42:
+	struct mutex mutex;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#198: FILE: include/linux/notifier.h:55:
+#define ATOMIC_INIT_NOTIFIER_HEAD(name) do {	\
+		mutex_init(&(name)->mutex);	\
+		(name)->head = NULL;		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#202: FILE: include/linux/notifier.h:59:
+#define BLOCKING_INIT_NOTIFIER_HEAD(name) do {	\
+		init_rwsem(&(name)->rwsem);	\
+		(name)->head = NULL;		\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#206: FILE: include/linux/notifier.h:63:
+#define RAW_INIT_NOTIFIER_HEAD(name) do {	\
+		(name)->head = NULL;		\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#210: FILE: include/linux/notifier.h:67:
+#define ATOMIC_NOTIFIER_HEAD(name)				\
+	struct atomic_notifier_head name = {			\
+		.mutex = __MUTEX_INITIALIZER((name).mutex),	\
+		.head = NULL }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#214: FILE: include/linux/notifier.h:71:
+#define BLOCKING_NOTIFIER_HEAD(name)				\
+	struct blocking_notifier_head name = {			\
+		.rwsem = __RWSEM_INITIALIZER((name).rwsem),	\
+		.head = NULL }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#227: FILE: include/linux/notifier.h:81:
+extern int atomic_notifier_chain_register(struct atomic_notifier_head *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: include/linux/notifier.h:82:
+extern int atomic_notifier_chain_register(struct atomic_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/notifier.h:83:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blocking_notifier_head *' should also have an identifier name
#229: FILE: include/linux/notifier.h:83:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#229: FILE: include/linux/notifier.h:83:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: include/linux/notifier.h:84:
+extern int blocking_notifier_chain_register(struct blocking_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/notifier.h:85:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct raw_notifier_head *' should also have an identifier name
#231: FILE: include/linux/notifier.h:85:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#231: FILE: include/linux/notifier.h:85:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: include/linux/notifier.h:86:
+extern int raw_notifier_chain_register(struct raw_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: include/linux/notifier.h:88:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct atomic_notifier_head *' should also have an identifier name
#234: FILE: include/linux/notifier.h:88:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#234: FILE: include/linux/notifier.h:88:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: include/linux/notifier.h:89:
+extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/linux/notifier.h:90:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blocking_notifier_head *' should also have an identifier name
#236: FILE: include/linux/notifier.h:90:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#236: FILE: include/linux/notifier.h:90:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: include/linux/notifier.h:91:
+extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/notifier.h:92:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct raw_notifier_head *' should also have an identifier name
#238: FILE: include/linux/notifier.h:92:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#238: FILE: include/linux/notifier.h:92:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: include/linux/notifier.h:93:
+extern int raw_notifier_chain_unregister(struct raw_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: include/linux/notifier.h:95:
+extern int atomic_notifier_call_chain(struct atomic_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct atomic_notifier_head *' should also have an identifier name
#241: FILE: include/linux/notifier.h:95:
+extern int atomic_notifier_call_chain(struct atomic_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/linux/notifier.h:96:
+extern int atomic_notifier_call_chain(struct atomic_notifier_head *,
+		unsigned long val, void *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/notifier.h:97:
+extern int blocking_notifier_call_chain(struct blocking_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blocking_notifier_head *' should also have an identifier name
#243: FILE: include/linux/notifier.h:97:
+extern int blocking_notifier_call_chain(struct blocking_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: include/linux/notifier.h:98:
+extern int blocking_notifier_call_chain(struct blocking_notifier_head *,
+		unsigned long val, void *v);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/linux/notifier.h:99:
+extern int raw_notifier_call_chain(struct raw_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct raw_notifier_head *' should also have an identifier name
#245: FILE: include/linux/notifier.h:99:
+extern int raw_notifier_call_chain(struct raw_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: include/linux/notifier.h:100:
+extern int raw_notifier_call_chain(struct raw_notifier_head *,
+		unsigned long val, void *v);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#252: FILE: include/linux/notifier.h:105:
+#define NOTIFY_BAD		(NOTIFY_STOP_MASK|0x0002)
                   		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: kernel/sys.c:106:
+static int notifier_chain_register(struct notifier_block **nl,
+		struct notifier_block *n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: kernel/sys.c:119:
+static int notifier_chain_unregister(struct notifier_block **nl,
+		struct notifier_block *n)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: kernel/sys.c:132:
+static int __kprobes notifier_call_chain(struct notifier_block **nl,
+		unsigned long val, void *v)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: kernel/sys.c:164:
+int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#344: FILE: kernel/sys.c:174:
+EXPORT_SYMBOL(atomic_notifier_chain_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: kernel/sys.c:187:
+int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#368: FILE: kernel/sys.c:198:
+EXPORT_SYMBOL(atomic_notifier_chain_unregister);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: kernel/sys.c:219:
+int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#412: FILE: kernel/sys.c:229:
+EXPORT_SYMBOL(atomic_notifier_call_chain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: kernel/sys.c:248:
+int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#460: FILE: kernel/sys.c:258:
+EXPORT_SYMBOL(blocking_notifier_chain_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: kernel/sys.c:271:
+int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#485: FILE: kernel/sys.c:281:
+EXPORT_SYMBOL(blocking_notifier_chain_unregister);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: kernel/sys.c:301:
+int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#532: FILE: kernel/sys.c:311:
+EXPORT_SYMBOL(blocking_notifier_call_chain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: kernel/sys.c:330:
+int raw_notifier_chain_register(struct raw_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#556: FILE: kernel/sys.c:335:
+EXPORT_SYMBOL(raw_notifier_chain_register);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: kernel/sys.c:348:
+int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#574: FILE: kernel/sys.c:353:
+EXPORT_SYMBOL(raw_notifier_chain_unregister);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: kernel/sys.c:374:
+int raw_notifier_call_chain(struct raw_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#600: FILE: kernel/sys.c:379:
+EXPORT_SYMBOL(raw_notifier_call_chain);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000105832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 26 warnings, 36 checks, 449 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000105832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
