WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: drivers/char/dcdbas.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#86: FILE: drivers/char/dcdbas.c:38:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#88: FILE: drivers/char/dcdbas.c:40:
+#include <asm/uaccess.h>

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#144: FILE: drivers/char/dcdbas.c:96:
+	if (tvm_dma_buf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: drivers/char/dcdbas.c:100:
+	pr_debug("%s: phys: %x size: %lu\n",
+		__FUNCTION__, tvm_dma_buf_phys_addr, tvm_dma_buf_size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#148: FILE: drivers/char/dcdbas.c:100:
+		__FUNCTION__, tvm_dma_buf_phys_addr, tvm_dma_buf_size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size != 0'
#165: FILE: drivers/char/dcdbas.c:117:
+		if ((size != 0) && (tvm_dma_buf == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tvm_dma_buf == NULL'
#165: FILE: drivers/char/dcdbas.c:117:
+		if ((size != 0) && (tvm_dma_buf == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#165: FILE: drivers/char/dcdbas.c:117:
+		if ((size != 0) && (tvm_dma_buf == NULL)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#166: FILE: drivers/char/dcdbas.c:118:
+			pr_debug("%s: corruption detected\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#176: FILE: drivers/char/dcdbas.c:128:
+	if (buf == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#177: FILE: drivers/char/dcdbas.c:129:
+		printk(KERN_INFO

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: drivers/char/dcdbas.c:144:
+	pr_debug("%s: phys: %x size: %lu\n",
+		__FUNCTION__, tvm_dma_buf_phys_addr, tvm_dma_buf_size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#192: FILE: drivers/char/dcdbas.c:144:
+		__FUNCTION__, tvm_dma_buf_phys_addr, tvm_dma_buf_size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#206: FILE: drivers/char/dcdbas.c:158:
+	pr_debug("%s: size: %u\n", __FUNCTION__, tmr->size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#208: FILE: drivers/char/dcdbas.c:160:
+	if (tvm_dma_buf == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#209: FILE: drivers/char/dcdbas.c:161:
+		pr_debug("%s: TVM buffer not allocated\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#221: FILE: drivers/char/dcdbas.c:173:
+		pr_debug("%s: TVM buffer too small\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: drivers/char/dcdbas.c:182:
+			memcpy(tmr->buffer + ESM_APM_CMD_HEADER_SIZE,
+				tvm_dma_buf + sizeof(struct apm_cmd_t),

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#251: FILE: drivers/char/dcdbas.c:203:
+	pr_debug("%s: size: %u\n", __FUNCTION__, tmw->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: drivers/char/dcdbas.c:218:
+			memcpy(tvm_dma_buf + sizeof(struct apm_cmd_t),
+				tmw->buffer + ESM_APM_CMD_HEADER_SIZE,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#295: FILE: drivers/char/dcdbas.c:247:
+	pr_debug("%s: size: %u\n", __FUNCTION__, tma->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/char/dcdbas.c:265:
+	pr_debug("%s: action_bitmap: %x smi_type: %u\n",
+		__FUNCTION__, thca->action_bitmap, thca->smi_type);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#313: FILE: drivers/char/dcdbas.c:265:
+		__FUNCTION__, thca->action_bitmap, thca->smi_type);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#315: FILE: drivers/char/dcdbas.c:267:
+	if (tvm_dma_buf == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#316: FILE: drivers/char/dcdbas.c:268:
+		pr_debug("%s: TVM buffer not allocated\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: drivers/char/dcdbas.c:303:
+			outb(index,
+				(CMOS_BASE_PORT + CMOS_PAGE2_INDEX_PORT_PIIX4));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: drivers/char/dcdbas.c:305:
+			outb(*data++,
+				(CMOS_BASE_PORT + CMOS_PAGE2_DATA_PORT_PIIX4));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tvm_dma_buf"
#428: FILE: drivers/char/dcdbas.c:380:
+	if (tvm_dma_buf == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#429: FILE: drivers/char/dcdbas.c:381:
+		pr_debug("%s: TVM memory not allocated\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#441: FILE: drivers/char/dcdbas.c:393:
+		*((s16 *)&apm_cmd->parameters.shortreq.parm[0]) = (s16)0;
 		                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#450: FILE: drivers/char/dcdbas.c:402:
+		*((s16 *)&apm_cmd->parameters.shortreq.parm[0]) = (s16)20;
 		                                       ^^^^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#466: FILE: drivers/char/dcdbas.c:418:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: drivers/char/dcdbas.c:424:
+	pr_debug("%s: cmdaddr: %x cmdcode: %x phys: %x\n",
+		__FUNCTION__, ci_cmd->command_address, ci_cmd->command_code,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#472: FILE: drivers/char/dcdbas.c:424:
+		__FUNCTION__, ci_cmd->command_address, ci_cmd->command_code,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#479: FILE: drivers/char/dcdbas.c:431:
+		pr_debug("%s: failed to get CPU 0\n", __FUNCTION__);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#496: FILE: drivers/char/dcdbas.c:448:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#517: FILE: drivers/char/dcdbas.c:469:
+	pr_debug("%s: req_type: %u\n", __FUNCTION__, ireq->hdr.req_type);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#564: FILE: drivers/char/dcdbas.c:516:
+		pr_debug("%s: unsupported req_type\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#575: FILE: drivers/char/dcdbas.c:527:
+ * @filp: file object for device
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#579: FILE: drivers/char/dcdbas.c:531:
+static int dcdbas_ioctl(struct inode *inode, struct file *filp,
                                                           ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#598: FILE: drivers/char/dcdbas.c:550:
+	if ((kbuf = kmalloc(size, GFP_KERNEL)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#599: FILE: drivers/char/dcdbas.c:551:
+		printk(KERN_INFO

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#610: FILE: drivers/char/dcdbas.c:562:
+	if ((retval = dcdbas_dispatch_ioctl(kbuf)) != 0) {

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#634: FILE: drivers/char/dcdbas.c:586:
+	static int msg_done = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#643: FILE: drivers/char/dcdbas.c:595:
+				printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#645: FILE: drivers/char/dcdbas.c:597:
+					"Please wait for shutdown "
+					"action to complete...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#657: FILE: drivers/char/dcdbas.c:609:
+static struct file_operations dcdbas_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#658: FILE: drivers/char/dcdbas.c:610:
+	owner:	THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#659: FILE: drivers/char/dcdbas.c:611:
+	ioctl:	dcdbas_ioctl,
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#659: FILE: drivers/char/dcdbas.c:611:
+	ioctl:	dcdbas_ioctl,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#681: FILE: drivers/char/dcdbas.c:633:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#691: FILE: drivers/char/dcdbas.c:643:
+	printk(KERN_INFO"%s version %s\n", DRIVER_NAME, DRIVER_VERSION);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#691: FILE: drivers/char/dcdbas.c:643:
+	printk(KERN_INFO"%s version %s\n", DRIVER_NAME, DRIVER_VERSION);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#710: FILE: drivers/char/dcdbas.c:662:
+MODULE_DESCRIPTION(DRIVER_DESCRIPTION" (version "DRIVER_VERSION")");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#719: FILE: drivers/char/dcdbas.h:1:
+/*

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#750: FILE: drivers/char/dcdbas.h:32:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#750: FILE: drivers/char/dcdbas.h:32:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#750: FILE: drivers/char/dcdbas.h:32:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#750: FILE: drivers/char/dcdbas.h:32:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#766: FILE: drivers/char/dcdbas.h:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#766: FILE: drivers/char/dcdbas.h:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#766: FILE: drivers/char/dcdbas.h:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#766: FILE: drivers/char/dcdbas.h:48:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#770: FILE: drivers/char/dcdbas.h:52:
+typedef unsigned long cpumask_t;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#851: FILE: drivers/char/dcdbas.h:133:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#856: FILE: drivers/char/dcdbas.h:138:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#861: FILE: drivers/char/dcdbas.h:143:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#867: FILE: drivers/char/dcdbas.h:149:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#872: FILE: drivers/char/dcdbas.h:154:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#881: FILE: drivers/char/dcdbas.h:163:
+} __attribute__ ((packed));

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#885: FILE: drivers/char/dcdbas.h:167:
+	union __attribute__ ((packed)) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#885: FILE: drivers/char/dcdbas.h:167:
+	union __attribute__ ((packed)) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#892: FILE: drivers/char/dcdbas.h:174:
+} __attribute__ ((packed));

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#898: FILE: drivers/char/dcdbas.h:180:
+	union __attribute__ ((packed)) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#898: FILE: drivers/char/dcdbas.h:180:
+	union __attribute__ ((packed)) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#899: FILE: drivers/char/dcdbas.h:181:
+		struct __attribute__ ((packed)) {

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#900: FILE: drivers/char/dcdbas.h:182:
+			u8 parm[MAX_SYSMGMT_SHORTCMD_PARMBUF_LEN];
 			   ^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#903: FILE: drivers/char/dcdbas.h:185:
+		struct __attribute__ ((packed)) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#905: FILE: drivers/char/dcdbas.h:187:
+			struct __attribute__ ((packed)) {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#911: FILE: drivers/char/dcdbas.h:193:
+} __attribute__ ((packed));

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#961: FILE: MAINTAINERS:686:
+P:	Doug Warzecha
+M:	Douglas_Warzecha@dell.com

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175735.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 53 warnings, 19 checks, 902 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175735.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
