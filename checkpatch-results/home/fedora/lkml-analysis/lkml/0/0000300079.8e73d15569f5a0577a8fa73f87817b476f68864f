WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#251: FILE: arch/ppc64/mm/init.c:125:
+extern void *__ioremap(unsigned long addr, unsigned long size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:RETURN_VOID: void function return statements are not generally useful
#260: FILE: arch/ppc64/mm/init.c:134:
+	return;
+}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#299: FILE: arch/ppc64/mm/init.c:173:
+		hpteg = ((hash & htab_data.htab_hash_mask)*HPTES_PER_GROUP);
 		                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#303: FILE: arch/ppc64/mm/init.c:177:
+				       _PAGE_NO_CACHE|_PAGE_GUARDED|PP_RWXX,
 				                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#303: FILE: arch/ppc64/mm/init.c:177:
+				       _PAGE_NO_CACHE|_PAGE_GUARDED|PP_RWXX,
 				                                   ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map_io_page', this function's name, in a string
#305: FILE: arch/ppc64/mm/init.c:179:
+			panic("map_io_page: could not insert mapping");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: arch/ppc64/mm/init.c:184:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: arch/ppc64/mm/init.c:185:
+static void * __ioremap_com(unsigned long addr, unsigned long pa,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#322: FILE: arch/ppc64/mm/init.c:196:
+	for (i = 0; i < size; i += PAGE_SIZE) {
+		map_io_page(ea+i, pa+i, flags);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#323: FILE: arch/ppc64/mm/init.c:197:
+		map_io_page(ea+i, pa+i, flags);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#323: FILE: arch/ppc64/mm/init.c:197:
+		map_io_page(ea+i, pa+i, flags);
 		                    ^

CHECK:SPACING: No space is necessary after a cast
#326: FILE: arch/ppc64/mm/init.c:200:
+	return (void *) (ea + (addr & ~PAGE_MASK));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: arch/ppc64/mm/init.c:203:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#607: FILE: arch/ppc64/mm/tlb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#667: FILE: arch/ppc64/mm/tlb.c:61:
+	mm = (struct mm_struct *) ptepage->mapping;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#703: FILE: arch/ppc64/mm/tlb.c:97:
+	BUG_ON(in_interrupt());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!batchp"
#757: FILE: arch/ppc64/mm/tlb.c:151:
+	if (*batchp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#802: FILE: include/asm-ppc64/pgtable.h:310:
+extern void hpte_update(pte_t *ptep, unsigned long pte, int wrprot);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#822: FILE: include/asm-ppc64/pgtable.h:329:
+#if 1

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#906: FILE: include/asm-ppc64/pgtable.h:403:
+static inline void pte_clear(pte_t * ptep)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#937: FILE: include/asm-ppc64/pgtable.h:426:
+#define pte_same(A,B)	(((pte_val(A) ^ pte_val(B)) & ~_PAGE_HPTEFLAGS) == 0)
                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1070: FILE: include/asm-ppc64/tlbflush.h:30:
+extern void __flush_tlb_pending(struct ppc64_tlb_batch *batch);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300079.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 7 warnings, 12 checks, 982 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300079.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
