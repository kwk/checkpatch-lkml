WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#17: 
and a user level command, kernprof, that controls kernel profiling and creates

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: build2/dm/2.2.8-profile/Documentation/Configure.help:9755:
+  This option makes the kernel produce profiling data to support $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#157: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#166: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:10:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:22:
+#define NR_PROFILE_SPINLOCKS ^I(1 << 10)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#178: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:22:
+#define NR_PROFILE_SPINLOCKS 	(1 << 10)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:INLINE: plain inline is preferred over __inline__
#187: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:31:
+static __inline__ unsigned short

CHECK:CAMELCASE: Avoid CamelCase: <atomicAddUShort>
#188: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:32:
+atomicAddUShort(volatile unsigned short *lockaddr, unsigned short inc)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#188: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:32:
+atomicAddUShort(volatile unsigned short *lockaddr, unsigned short inc)

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:34:
+        register unsigned short oldval;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:34:
+        register unsigned short oldval;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:36:
+        __asm__ __volatile__($

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:36:
+        __asm__ __volatile__($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#192: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:36:
+        __asm__ __volatile__(

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:37:
+                LOCK "xaddw %2,%0"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:37:
+                LOCK "xaddw %2,%0"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:38:
+                :"=m" (__atomic_fool_gcc(lockaddr)), "=r" (oldval)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:38:
+                :"=m" (__atomic_fool_gcc(lockaddr)), "=r" (oldval)$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#194: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:38:
+                :"=m" (__atomic_fool_gcc(lockaddr)), "=r" (oldval)
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:39:
+                :"1" (inc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:39:
+                :"1" (inc)$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#195: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:39:
+                :"1" (inc)
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:40:
+                :"memory");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:40:
+                :"memory");$

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#196: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:40:
+                :"memory");
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:41:
+        return(oldval + inc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:41:
+        return(oldval + inc);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#199: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:43:
+}
+#define atomicIncUShort(x) atomicAddUShort(x, 1)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <atomicIncUShort>
#199: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:43:
+#define atomicIncUShort(x) atomicAddUShort(x, 1)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#207: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:51:
+	spinlock_t *lock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:52:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#209: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:53:
+	__asm__ (

CHECK:SPACING: No space is necessary after a cast
#217: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:61:
+	frompc = (unsigned long) __builtin_return_address(1) - p->lowpc;

CHECK:SPACING: No space is necessary after a cast
#221: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:65:
+	topc = (unsigned long) __builtin_return_address(0);

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#222: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:66:
+	for (toindex = p->froms[frompc]; toindex != 0; ) {
 	                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#225: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:69:
+			atomic_inc((atomic_t *) &top->count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:74:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#232: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:76:
+	if (p->state & PROF_MCOUNT_OVERFLOW) goto done;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#248: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:92:
+	top->link = p->froms[frompc];  // these two must happen atomically
 	               ^^^^^

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#249: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:93:
+	p->froms[frompc] = toindex;
 	   ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:95:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#252: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:96:
+ done:  __asm__ (

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#264: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:108:
+	extern char _stext, _etext;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#267: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:111:
+	p->lowpc = ROUNDDOWN((unsigned long) &_stext, sizeof(long));

CHECK:SPACING: No space is necessary after a cast
#268: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:112:
+	p->highpc = ROUNDUP((unsigned long) &_etext, sizeof(long));

CHECK:SPACING: No space is necessary after a cast
#277: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:121:
+	p->tos = (struct tostruct *) kmem_start;

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#280: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:124:
+	p->froms = (unsigned short *) kmem_start;
 	   ^^^^^

CHECK:SPACING: No space is necessary after a cast
#280: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:124:
+	p->froms = (unsigned short *) kmem_start;

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#282: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/profile.c:126:
+	memset((char *)p->froms, 0, p->fromssize);
 	                  ^^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#315: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/smp.c:1740:
+void setup_APIC_timer(unsigned int clocks);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/smp.c:1769:
+^I^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/smp.c:1779:
+			setup_APIC_timer(calibration_result/prof_counter[cpu]);
 			                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/smp.c:2138:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/smp.c:2147:
+^I/* $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#412: FILE: build2/dm/2.2.8-profile/arch/i386/kernel/smp.c:2153:
+	for (i = 0; i < NR_CPUS; ++i)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#441: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:162:
+	char * pnt;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:173:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:218:
+static ssize_t write_profile(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:218:
+static ssize_t write_profile(struct file * file, const char * buf,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#483: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:221:
+	if (count==sizeof(int)) {
 	         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:221:
+	if (count==sizeof(int)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:224:
+^I^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#490: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:228:
+		switch (cmd & 0xFF000000) {
[...]
+			case PROF_SET_FREQ:
[...]
+			case PROF_ENABLE:
[...]
+			case PROF_DISABLE:
[...]
+			case PROF_RESET:
[...]
+			case PROF_TYPE:
[...]
+			case PROF_DOMAIN:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#494: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:232:
+				extern int setup_profiling_timer (unsigned int multiplier);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#494: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:232:
+				extern int setup_profiling_timer (unsigned int multiplier);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:233:
+^I^I^I^I$

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#511: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:249:
+				memset((char *)p->froms, 0, p->fromssize);
 				                  ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#516: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:254:
+				if (val & PROF_PC) {
[...]
+				} else if (val & PROF_CALL_TRACE)
[...]

CHECK:BRACES: Unbalanced braces around else statement
#528: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:266:
+	} else

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#555: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:310:
+	if (p >= prof_params.fromssize) return 0;

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#558: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:313:
+	copy_to_user(buf, (char *) prof_params.froms + p, count);
 	                                       ^^^^^

CHECK:SPACING: No space is necessary after a cast
#558: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:313:
+	copy_to_user(buf, (char *) prof_params.froms + p, count);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#563: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:318:
+static struct file_operations proc_froms_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#568: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:323:
+struct inode_operations proc_froms_inode_operations = {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#577: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:332:
+	if (p >= prof_params.tossize) return 0;

CHECK:SPACING: No space is necessary after a cast
#580: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:335:
+	copy_to_user(buf, (char *) prof_params.tos + p, count);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#585: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:340:
+static struct file_operations proc_tos_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#590: FILE: build2/dm/2.2.8-profile/fs/proc/array.c:345:
+struct inode_operations proc_tos_inode_operations = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#618: FILE: build2/dm/2.2.8-profile/fs/proc/root.c:187:
+	S_IFDIR | S_IRUGO | S_IXUGO, 2, 0, 0,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#632: FILE: build2/dm/2.2.8-profile/fs/proc/root.c:669:
 };
+#ifdef CONFIG_PROF_MCOUNT

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#635: FILE: build2/dm/2.2.8-profile/fs/proc/root.c:672:
+	S_IFREG | S_IRUGO, 1, 0, 0,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#638: FILE: build2/dm/2.2.8-profile/fs/proc/root.c:675:
+};
+static struct proc_dir_entry proc_prof_tos = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#640: FILE: build2/dm/2.2.8-profile/fs/proc/root.c:677:
+	S_IFREG | S_IRUGO, 1, 0, 0,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#707: FILE: build2/dm/2.2.8-profile/include/linux/proc_fs.h:440:
+extern struct inode_operations proc_froms_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#708: FILE: build2/dm/2.2.8-profile/include/linux/proc_fs.h:441:
+extern struct inode_operations proc_tos_inode_operations;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#717: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:1:
+/*

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#738: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:22:
+ *    must display the following acknowledgement:
                                  ^^^^^^^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#794: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:78:
+#define ROUNDDOWN(x,y)	(((x)/(y))*(y))
                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#794: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:78:
+#define ROUNDDOWN(x,y)	(((x)/(y))*(y))
                       	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#794: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:78:
+#define ROUNDDOWN(x,y)	(((x)/(y))*(y))
                       	          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#794: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:78:
+#define ROUNDDOWN(x,y)	(((x)/(y))*(y))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#795: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:79:
+#define ROUNDUP(x,y)	((((x)+(y)-1)/(y))*(y))
                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#795: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:79:
+#define ROUNDUP(x,y)	((((x)+(y)-1)/(y))*(y))
                     	      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#795: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:79:
+#define ROUNDUP(x,y)	((((x)+(y)-1)/(y))*(y))
                     	          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#795: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:79:
+#define ROUNDUP(x,y)	((((x)+(y)-1)/(y))*(y))
                     	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#795: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:79:
+#define ROUNDUP(x,y)	((((x)+(y)-1)/(y))*(y))
                     	                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#795: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:79:
+#define ROUNDUP(x,y)	((((x)+(y)-1)/(y))*(y))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:117:
+ * Maximum number of processors we can handle.  This is important for the $

WARNING:TYPO_SPELLING: 'processore' may be misspelled - perhaps 'processor'?
#834: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:118:
+ * proper operation of mcount, so if we ever need more processore we must
                                                        ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#852: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:136:
+	volatile u_short *froms;
 	                  ^^^^^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#852: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:136:
+	volatile u_short *froms;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#861: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:145:
+};
+extern struct profparam prof_params;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#878: FILE: build2/dm/2.2.8-profile/include/linux/profile.h:162:
+#define PROF_ENABLE^I0x01000000^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: build2/dm/2.2.8-profile/init/main.c:1169:
+                memory_start = prof_init(memory_start, memory_end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: build2/dm/2.2.8-profile/init/main.c:1169:
+                memory_start = prof_init(memory_start, memory_end);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#928: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:1:
+/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#929: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:2:
+/* Copyright (C) 1996, 1997 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#944: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:17:
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#945: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:18:
+   Boston, MA 02111-1307, USA.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#948: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:21:
+/* This file specifies the format of gmon.out files.  It should have
+   as few external dependencies as possible as it is going to be included

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#953: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:26:
+   identifying the type of records, followed by records specific data. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:44:
+  {$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#971: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:44:
+struct gmon_hdr
+  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:45:
+    char cookie[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:46:
+    char version[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:47:
+    char spare[3 * 4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:48:
+  };$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#978: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:51:
+typedef enum

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:52:
+  {$

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#979: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:52:
+typedef enum
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:53:
+    GMON_TAG_TIME_HIST = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:54:
+    GMON_TAG_CG_ARC = 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:55:
+    GMON_TAG_BB_COUNT = 2$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:56:
+  } GMON_Record_Tag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:59:
+  {$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#986: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:59:
+struct gmon_hist_hdr
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:60:
+    char low_pc[sizeof (char *)];^I/* base pc address of sample buffer */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#987: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:60:
+    char low_pc[sizeof (char *)];	/* base pc address of sample buffer */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:61:
+    char high_pc[sizeof (char *)];^I/* max pc address of sampled buffer */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#988: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:61:
+    char high_pc[sizeof (char *)];	/* max pc address of sampled buffer */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:62:
+    char hist_size[4];^I^I^I/* size of sample buffer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:63:
+    char prof_rate[4];^I^I^I/* profiling clock rate */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:64:
+    char dimen[15];^I^I^I/* phys. dim., usually "seconds" */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:65:
+    char dimen_abbrev;^I^I^I/* usually 's' for "seconds" */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:66:
+  };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:69:
+  {$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#996: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:69:
+struct gmon_cg_arc_record
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:70:
+    char from_pc[sizeof (char *)];^I/* address within caller's body */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#997: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:70:
+    char from_pc[sizeof (char *)];	/* address within caller's body */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:71:
+    char self_pc[sizeof (char *)];^I/* address within callee's body */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#998: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:71:
+    char self_pc[sizeof (char *)];	/* address within callee's body */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: build2/dm/2.2.8-profile/scripts/gmon_out.h:72:
+    char count[4];^I^I^I/* number of arc traversals */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1009: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1029: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:21:
+ *   along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1030: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:22:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#1053: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:45:
+static char defaultmap[] = "/usr/src/linux/System.map";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#1054: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:46:
+static char defaultpro[] = "/proc/profile";

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void usage() should probably be void usage(void)
#1056: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:48:
+void usage()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:50:
+   fprintf(stderr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:65:
+   exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:70:
+   static char cmdline[S_LEN];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1079: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:71:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:71:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:72:
+   if (!strcmp(name + strlen(name) - 3, ".gz"))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1080: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:72:
+   if (!strcmp(name + strlen(name) - 3, ".gz"))
+   {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1080: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:72:
+   if (!strcmp(name + strlen(name) - 3, ".gz"))
+   {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:73:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:74:
+      *flag=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1082: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:74:
+      *flag=1;
            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1083: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:75:
+      sprintf(cmdline, "zcat %s", name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1084: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:76:
+      return popen(cmdline, mode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1085: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:77:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:78:
+   *flag = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:79:
+   return fopen(name, mode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:84:
+   if (write(pro_fd, &cmd, sizeof(int)) != sizeof(int)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1092: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:84:
+   if (write(pro_fd, &cmd, sizeof(int)) != sizeof(int)) {
+      perror(defaultpro);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:85:
+      perror(defaultpro);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1094: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:86:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:87:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1100: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:92:
+   int f;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1101: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:93:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:93:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1102: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:94:
+   setuid(0);                    /* try to become root, just in case */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1103: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:95:
+   if ((f = open(name, mode)) == -1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1103: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:95:
+   if ((f = open(name, mode)) == -1) {
+      perror(name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1103: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:95:
+   if ((f = open(name, mode)) == -1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:96:
+      perror(name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:97:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1106: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:98:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:99:
+   return f;$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void start_profile() should probably be void start_profile(void)
#1110: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:102:
+static void start_profile()

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:104:
+   int pro = open_prf(defaultpro, O_WRONLY);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1113: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:105:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1113: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:105:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1114: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:106:
+   write_prf_cmd(pro, PROF_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1115: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:107:
+   close(pro);$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void stop_profile() should probably be void stop_profile(void)
#1118: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:110:
+static void stop_profile()

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1120: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:112:
+   int pro = open_prf(defaultpro, O_WRONLY);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1121: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:113:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:113:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:114:
+   write_prf_cmd(pro, PROF_DISABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:115:
+   close(pro);$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void reset_profile_info() should probably be void reset_profile_info(void)
#1126: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:118:
+static void reset_profile_info()

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:120:
+   int pro;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:121:
+   struct timespec t;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1130: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:122:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1130: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:122:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:123:
+   pro = open_prf(defaultpro, O_WRONLY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1132: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:124:
+   write_prf_cmd(pro, PROF_DISABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:125:
+   t.tv_sec = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:126:
+   t.tv_nsec = 10000;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:127:
+   nanosleep(&t, NULL);          /* to avoid race conditions */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:128:
+   write_prf_cmd(pro, PROF_RESET);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:129:
+   close(pro);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1142: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:134:
+   int pro = open_prf(defaultpro, O_WRONLY);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1143: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:135:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1143: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:135:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:136:
+   write_prf_cmd(pro, (mult & 0xFFFFFF) | PROF_SET_FREQ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1145: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:137:
+   close(pro);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1150: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:142:
+   int pro;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1151: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:143:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1151: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:143:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:144:
+   reset_profile_info();  /* setting the type resets all profiling info */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:145:
+   pro = open_prf(defaultpro, O_WRONLY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:146:
+   write_prf_cmd(pro, type | PROF_TYPE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:147:
+   close(pro);$

CHECK:CAMELCASE: Avoid CamelCase: <proFile>
#1158: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:150:
+static void show_sampling_step(const char *proFile)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:152:
+   int pro, step;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1161: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:153:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1161: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:153:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:154:
+   pro = open_prf(proFile, O_RDONLY);$

CHECK:SPACING: No space is necessary after a cast
#1163: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:155:
+   if (read(pro, (char *) &step, sizeof(int)) != sizeof(int)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:155:
+   if (read(pro, (char *) &step, sizeof(int)) != sizeof(int)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1163: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:155:
+   if (read(pro, (char *) &step, sizeof(int)) != sizeof(int)) {
+      perror(proFile);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:156:
+      perror(proFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:157:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1166: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:158:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:159:
+   printf("PC sampling step is %i\n", step);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:164:
+   int pro, mult;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:165:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:165:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:166:
+   pro = open_prf(proFile, O_RDONLY);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1175: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:167:
+   if (lseek(pro, sizeof(int), SEEK_SET) < 0 || $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:167:
+   if (lseek(pro, sizeof(int), SEEK_SET) < 0 || $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1175: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:167:
+   if (lseek(pro, sizeof(int), SEEK_SET) < 0 || 
[...]
+      perror(proFile);

CHECK:SPACING: No space is necessary after a cast
#1176: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:168:
+       read(pro, (char *) &mult, sizeof(int)) != sizeof(int)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:168:
+       read(pro, (char *) &mult, sizeof(int)) != sizeof(int)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:169:
+      perror(proFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:170:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:171:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1180: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:172:
+   return mult * HZ;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:177:
+  printf("sampling frequency is %iHz\n", get_prof_freq(proFile));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:182:
+   unsigned int *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1191: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:183:
+   int pro, len;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1192: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:184:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:184:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:185:
+   if (((pro = open(proFile, O_RDONLY)) < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1193: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:185:
+   if (((pro = open(proFile, O_RDONLY)) < 0)
[...]
+      perror(proFile);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1193: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:185:
+   if (((pro = open(proFile, O_RDONLY)) < 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1194: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:186:
+   if (((pro = open(proFile, O_RDONLY)) < 0)
+       || ((int)(len = lseek(pro, 0, SEEK_END)) < 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1194: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:186:
+       || ((int)(len = lseek(pro, 0, SEEK_END)) < 0)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1195: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:187:
+       || ((int)(len = lseek(pro, 0, SEEK_END)) < 0)
+       || (lseek(pro, 0, SEEK_SET) < 0)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1195: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:187:
+       || (lseek(pro, 0, SEEK_SET) < 0)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1196: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:188:
+      perror(proFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:189:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:190:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1199: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:191:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1199: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:191:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1200: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:192:
+   if ((buf = malloc(len)) == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1200: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:192:
+   if ((buf = malloc(len)) == NULL) {
+      perror("malloc");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1200: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:192:
+   if ((buf = malloc(len)) == NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:193:
+      perror("malloc");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:194:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1203: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:195:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:197:
+   if (read(pro, buf, len) != len)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1205: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:197:
+   if (read(pro, buf, len) != len)
+   {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1205: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:197:
+   if (read(pro, buf, len) != len)
+   {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:198:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1207: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:199:
+      perror(proFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1208: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:200:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1209: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:201:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1210: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:202:
+   close(pro);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1211: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:203:
+   *lenp = len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:204:
+   return buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1217: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:209:
+   char mapline[S_LEN], fn_name[S_LEN], mode[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1218: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:210:
+   unsigned int fn_add;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1219: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:211:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1219: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:211:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:212:
+   while (fgets(mapline, S_LEN, fp)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1220: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:212:
+   while (fgets(mapline, S_LEN, fp)) {
+      if (sscanf(mapline, "%x %s %s", &fn_add, mode, fn_name) != 3) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1221: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:213:
+      if (sscanf(mapline, "%x %s %s", &fn_add, mode, fn_name) != 3) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1221: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:213:
+      if (sscanf(mapline, "%x %s %s", &fn_add, mode, fn_name) != 3) {
+	 fprintf(stderr,"%s: corrupt map file\n", prgname);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1222: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:214:
+	 fprintf(stderr,"%s: corrupt map file\n", prgname);
 	               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1224: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:216:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1225: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:217:
+      if (!strcmp(fn_name, name))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1225: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:217:
+      if (!strcmp(fn_name, name))
+	 return fn_add;

WARNING:TABSTOP: Statements should start on a tabstop
#1226: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:218:
+	 return fn_add;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1227: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:219:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:220:
+   return 0;$

CHECK:CAMELCASE: Avoid CamelCase: <mapFile>
#1231: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:223:
+static void output_pc_profile(const char *proFile, const char *mapFile,

CHECK:CAMELCASE: Avoid CamelCase: <outFile>
#1232: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:224:
+			      const char *outFile)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:226:
+   int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:227:
+   int popenMap;                /* flag to tell if popen() has been used */$

CHECK:CAMELCASE: Avoid CamelCase: <popenMap>
#1235: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:227:
+   int popenMap;                /* flag to tell if popen() has been used */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1236: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:228:
+   char mapline[S_LEN];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:229:
+   unsigned int add0 = 0, step;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:230:
+   unsigned int index = 1;      /* skip the profiling frequency */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1239: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:231:
+   unsigned int *buf, fn_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1240: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:232:
+   unsigned int fn_add, next_add;           /* current and next address */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1241: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:233:
+   char fn_name[S_LEN], next_name[S_LEN];   /* current and next name */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1242: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:234:
+   char mode[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1243: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:235:
+   FILE *map, *out;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:236:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:236:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:237:
+   buf = read_PC_profiling_data(proFile, &len);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1246: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:238:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:238:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:239:
+   if ((map = myopen(mapFile, "r", &popenMap)) == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1247: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:239:
+   if ((map = myopen(mapFile, "r", &popenMap)) == NULL) {
+      perror(mapFile);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1247: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:239:
+   if ((map = myopen(mapFile, "r", &popenMap)) == NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1248: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:240:
+      perror(mapFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1249: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:241:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:242:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:243:
+   if (outFile == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1251: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:243:
+   if (outFile == NULL)
+      out = stdout;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1251: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:243:
+   if (outFile == NULL)
[...]
+   else if ((out = fopen(outFile, "w")) == NULL) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!outFile"
#1251: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:243:
+   if (outFile == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1252: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:244:
+      out = stdout;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:245:
+   else if ((out = fopen(outFile, "w")) == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1253: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:245:
+   else if ((out = fopen(outFile, "w")) == NULL) {
+      perror(outFile);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1253: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:245:
+   else if ((out = fopen(outFile, "w")) == NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:246:
+      perror(outFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:247:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1256: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:248:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1257: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:249:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:249:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:250:
+   strcpy(fn_name, "_stext");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:251:
+   add0 = fn_add = get_symbol_address(map, fn_name);$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1259: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:251:
+   add0 = fn_add = get_symbol_address(map, fn_name);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:252:
+   if (!add0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1260: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:252:
+   if (!add0) {
+      fprintf(stderr, "%s: can't find \"_stext\" in %s\n", prgname, mapFile);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:253:
+      fprintf(stderr, "%s: can't find \"_stext\" in %s\n", prgname, mapFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1262: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:254:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1263: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:255:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:256:
+   step = buf[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1269: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:261:
+   while(fgets(mapline, S_LEN, map))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1269: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:261:
+   while(fgets(mapline, S_LEN, map))
+   {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1269: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:261:
+   while(fgets(mapline, S_LEN, map))
+   {

ERROR:SPACING: space required before the open parenthesis '('
#1269: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:261:
+   while(fgets(mapline, S_LEN, map))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:262:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1271: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:263:
+      unsigned int this = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:264:
+      unsigned int start_index;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1273: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:265:
+     $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1273: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:265:
+     $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1274: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:266:
+      if (sscanf(mapline, "%x %s %s", &next_add, mode, next_name) != 3) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1274: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:266:
+      if (sscanf(mapline, "%x %s %s", &next_add, mode, next_name) != 3) {
+	 fprintf(stderr, "%s: corrupt map file\n", prgname);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1277: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:269:
+      }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1278: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:270:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:270:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1280: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:272:
+      start_index = index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1281: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:273:
+      while (index < (next_add - add0) / step) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1281: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:273:
+      while (index < (next_add - add0) / step) {
+	 this += buf[++index];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1281: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:273:
+      while (index < (next_add - add0) / step) {
+	 this += buf[++index];
+      }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1283: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:275:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1284: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:276:
+      if (this > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1284: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:276:
+      if (this > 0) {
+	 index = start_index;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1287: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:279:
+^I$

WARNING:TABSTOP: Statements should start on a tabstop
#1288: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:280:
+	 while (index < (next_add - add0) / step) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 12)
#1288: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:280:
+	 while (index < (next_add - add0) / step) {
+	    if (buf[index + 1] != 0) {

WARNING:TABSTOP: Statements should start on a tabstop
#1289: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:281:
+	    if (buf[index + 1] != 0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 15)
#1289: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:281:
+	    if (buf[index + 1] != 0) {
+	       fprintf(out, "    %08X\t%d\n", add0 + index * step, buf[index + 1]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1289: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:281:
+	    if (buf[index + 1] != 0) {
+	       fprintf(out, "    %08X\t%d\n", add0 + index * step, buf[index + 1]);
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1291: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:283:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1293: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:285:
+	 }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1294: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:286:
+      }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1295: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:287:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1295: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:287:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1296: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:288:
+      fn_len = next_add - fn_add;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1297: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:289:
+      fn_add = next_add;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1298: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:290:
+      strcpy(fn_name, next_name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1299: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:291:
+      if (*mode != 'T' && *mode != 't') break; /* only text is profiled */$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1299: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:291:
+      if (*mode != 'T' && *mode != 't') break; /* only text is profiled */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:292:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1301: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:293:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1301: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:293:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1303: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:295:
+   if (buf[(len / sizeof(unsigned int)) - 1])$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1303: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:295:
+   if (buf[(len / sizeof(unsigned int)) - 1])
+      fprintf(out, "Other: %u\n", buf[(len / sizeof(unsigned int)) - 1]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1304: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:296:
+      fprintf(out, "Other: %u\n", buf[(len / sizeof(unsigned int)) - 1]);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1305: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:297:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1305: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:297:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:298:
+   popenMap ? pclose(map) : fclose(map);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1307: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:299:
+   free(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1312: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:304:
+   u_char tag = GMON_TAG_TIME_HIST;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:305:
+   struct gmon_hist_hdr thdr __attribute__ ((aligned (__alignof__ (char *))));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1313: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:305:
+   struct gmon_hist_hdr thdr __attribute__ ((aligned (__alignof__ (char *))));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1313: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:305:
+   struct gmon_hist_hdr thdr __attribute__ ((aligned (__alignof__ (char *))));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(__alignof__ (char *)) over __attribute__((aligned(__alignof__ (char *))))
#1313: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:305:
+   struct gmon_hist_hdr thdr __attribute__ ((aligned (__alignof__ (char *))));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1314: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:306:
+   unsigned int *buf, *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1315: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:307:
+   int i, len, hist_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:308:
+   HISTCOUNTER *b;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1317: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:309:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:309:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1318: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:310:
+   buf = read_PC_profiling_data(defaultpro, &len);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1319: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:311:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1319: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:311:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1321: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:313:
+   len -= 3 * sizeof(unsigned long);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1322: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:314:
+   hist_size = len / sizeof(unsigned long);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1323: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:315:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1323: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:315:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:317:
+   printf("gprof lowpc = %0x, highpc = %0x, %i buckets\n",$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1330: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:322:
+    * our data */

CHECK:SPACING: No space is necessary after a cast
#1331: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:323:
+   b = (HISTCOUNTER *) p = &buf[2];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1331: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:323:
+   b = (HISTCOUNTER *) p = &buf[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1333: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:325:
+   for (i = 0; i < hist_size; ++i)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1333: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:325:
+   for (i = 0; i < hist_size; ++i)
+      printf("bucket %i has %i hits\n", i, p[i]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1334: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:326:
+      printf("bucket %i has %i hits\n", i, p[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1336: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:328:
+   for (i = 0; i < hist_size; ++i)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1336: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:328:
+   for (i = 0; i < hist_size; ++i)
+      b[i] = p[i];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1337: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:329:
+      b[i] = p[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1339: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:331:
+   for (i = 0; i < hist_size; ++i)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1339: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:331:
+   for (i = 0; i < hist_size; ++i)
+      printf("bucket %i has %hi hits\n", i, b[i]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1340: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:332:
+      printf("bucket %i has %hi hits\n", i, b[i]);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1342: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:334:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1342: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:334:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1343: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:335:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1344: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:336:
+      struct iovec iov[3] = {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1348: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:340:
+      };$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1349: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:341:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:341:
+      $

CHECK:SPACING: No space is necessary after a cast
#1350: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:342:
+      *(char **) thdr.low_pc = (char *) lowpc;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1350: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:342:
+      *(char **) thdr.low_pc = (char *) lowpc;$

CHECK:SPACING: No space is necessary after a cast
#1351: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:343:
+      *(char **) thdr.high_pc = (char *) highpc;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1351: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:343:
+      *(char **) thdr.high_pc = (char *) highpc;$

CHECK:SPACING: No space is necessary after a cast
#1352: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:344:
+      *(int *) thdr.hist_size = hist_size;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1352: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:344:
+      *(int *) thdr.hist_size = hist_size;$

CHECK:SPACING: No space is necessary after a cast
#1353: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:345:
+      *(int *) thdr.prof_rate = get_prof_freq(defaultpro);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:345:
+      *(int *) thdr.prof_rate = get_prof_freq(defaultpro);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:346:
+      strncpy(thdr.dimen, "seconds", sizeof(thdr.dimen));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1355: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:347:
+      thdr.dimen_abbrev = 's';$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1356: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:348:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:348:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1357: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:349:
+      writev (fd, iov, 3);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1357: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:349:
+      writev (fd, iov, 3);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1358: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:350:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:351:
+   free(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:356:
+   char *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:357:
+   int fd, len;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1366: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:358:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:358:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:359:
+   if (((fd = open(name, O_RDONLY)) < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1367: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:359:
+   if (((fd = open(name, O_RDONLY)) < 0)
[...]
+      perror(name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1367: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:359:
+   if (((fd = open(name, O_RDONLY)) < 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1368: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:360:
+   if (((fd = open(name, O_RDONLY)) < 0)
+       || ((int)(len = lseek(fd, 0, SEEK_END)) < 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:360:
+       || ((int)(len = lseek(fd, 0, SEEK_END)) < 0)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1369: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:361:
+       || ((int)(len = lseek(fd, 0, SEEK_END)) < 0)
+       || (lseek(fd, 0, SEEK_SET) < 0)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:361:
+       || (lseek(fd, 0, SEEK_SET) < 0)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1370: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:362:
+      perror(name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:363:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1372: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:364:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1373: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:365:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1373: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:365:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1374: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:366:
+   if ((buf = malloc(len)) == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1374: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:366:
+   if ((buf = malloc(len)) == NULL) {
+      perror("malloc");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1374: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:366:
+   if ((buf = malloc(len)) == NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1375: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:367:
+      perror("malloc");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1376: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:368:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1377: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:369:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:371:
+   if (read(fd, buf, len) != len)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1379: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:371:
+   if (read(fd, buf, len) != len)
+   {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1379: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:371:
+   if (read(fd, buf, len) != len)
+   {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:372:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1381: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:373:
+      perror(name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:374:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1383: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:375:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:376:
+   close(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:377:
+   if (lenp) *lenp = len;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1385: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:377:
+   if (lenp) *lenp = len;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:378:
+   return buf;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1392: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:384:
+static void write_gprof_call_graph(int fd, u_int lowpc) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:386:
+   u_char tag = GMON_TAG_CG_ARC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1395: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:387:
+   struct gmon_cg_arc_record raw_arc[4]$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1396: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:388:
+      __attribute__ ((aligned (__alignof__ (char*))));$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1396: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:388:
+      __attribute__ ((aligned (__alignof__ (char*))));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1396: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:388:
+      __attribute__ ((aligned (__alignof__ (char*))));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1396: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:388:
+      __attribute__ ((aligned (__alignof__ (char*))));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(__alignof__ (char*)) over __attribute__((aligned(__alignof__ (char*))))
#1396: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:388:
+      __attribute__ ((aligned (__alignof__ (char*))));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:389:
+   int from_index, to_index, from_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1398: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:390:
+   u_long frompc;$

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#1399: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:391:
+   unsigned short *froms;
                    ^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:391:
+   unsigned short *froms;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:392:
+   struct tostruct *tos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1402: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:394:
+   struct iovec iov[8] = {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1403: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:395:
+      { &tag, sizeof(tag) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1404: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:396:
+      { &raw_arc[0], sizeof(struct gmon_cg_arc_record) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1405: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:397:
+      { &tag, sizeof(tag) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1406: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:398:
+      { &raw_arc[1], sizeof(struct gmon_cg_arc_record) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1407: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:399:
+      { &tag, sizeof(tag) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1408: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:400:
+      { &raw_arc[2], sizeof(struct gmon_cg_arc_record) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1409: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:401:
+      { &tag, sizeof(tag) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1410: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:402:
+      { &raw_arc[3], sizeof(struct gmon_cg_arc_record) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1411: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:403:
+   };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1412: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:404:
+   int nfilled = 0;$

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#1414: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:406:
+   froms = (u_short *) read_gprof_data(GPROF_FROMS_NAME, &from_len);
    ^^^^^

CHECK:SPACING: No space is necessary after a cast
#1414: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:406:
+   froms = (u_short *) read_gprof_data(GPROF_FROMS_NAME, &from_len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1414: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:406:
+   froms = (u_short *) read_gprof_data(GPROF_FROMS_NAME, &from_len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:407:
+   from_len /= sizeof(unsigned short);$

CHECK:SPACING: No space is necessary after a cast
#1417: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:409:
+   tos = (struct tostruct *) read_gprof_data(GPROF_TOS_NAME, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1417: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:409:
+   tos = (struct tostruct *) read_gprof_data(GPROF_TOS_NAME, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1419: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:411:
+   printf("%hi arcs recorded\n", tos[0].link);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1422: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:414:
+   for (from_index = 0; from_index < from_len; ++from_index) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1422: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:414:
+   for (from_index = 0; from_index < from_len; ++from_index) {
+      if (froms[from_index] == 0)

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#1423: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:415:
+      if (froms[from_index] == 0)
           ^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1423: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:415:
+      if (froms[from_index] == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1423: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:415:
+      if (froms[from_index] == 0)
+	 continue;

WARNING:TABSTOP: Statements should start on a tabstop
#1424: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:416:
+	 continue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1426: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:418:
+      frompc = lowpc + from_index * HASHFRACTION * sizeof(unsigned short);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1428: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:420:
+      printf("calls made from address %0x\n", frompc);$

WARNING:TYPO_SPELLING: 'froms' may be misspelled - perhaps 'forms'?
#1430: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:422:
+      for (to_index = froms[from_index]; to_index != 0;
                       ^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1430: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:422:
+      for (to_index = froms[from_index]; to_index != 0;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1430: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:422:
+      for (to_index = froms[from_index]; to_index != 0;
[...]
+	 if (nfilled > 3) {

WARNING:TABSTOP: Statements should start on a tabstop
#1432: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:424:
+	 if (nfilled > 3) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 12)
#1432: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:424:
+	 if (nfilled > 3) {
+	    writev (fd, iov, 2 * nfilled);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1433: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:425:
+	    writev (fd, iov, 2 * nfilled);

WARNING:TABSTOP: Statements should start on a tabstop
#1435: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:427:
+	 }

CHECK:SPACING: No space is necessary after a cast
#1436: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:428:
+	 *(char **) raw_arc[nfilled].from_pc = (char *)frompc;

CHECK:SPACING: No space is necessary after a cast
#1437: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:429:
+	 *(char **) raw_arc[nfilled].self_pc =

CHECK:SPACING: No space is necessary after a cast
#1439: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:431:
+	 *(int *) raw_arc[nfilled].count = tos[to_index].count;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1441: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:433:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1442: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:434:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1443: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:435:
+   writev (fd, iov, 2 * nfilled);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1443: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:435:
+   writev (fd, iov, 2 * nfilled);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1448: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:440:
+    struct gmon_hdr ghdr __attribute__ ((aligned (__alignof__ (int))));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1448: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:440:
+    struct gmon_hdr ghdr __attribute__ ((aligned (__alignof__ (int))));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1448: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:440:
+    struct gmon_hdr ghdr __attribute__ ((aligned (__alignof__ (int))));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(__alignof__ (int)) over __attribute__((aligned(__alignof__ (int))))
#1448: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:440:
+    struct gmon_hdr ghdr __attribute__ ((aligned (__alignof__ (int))));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1451: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:443:
+    memset (&ghdr, 0, sizeof (struct gmon_hdr));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1451: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:443:
+    memset (&ghdr, 0, sizeof (struct gmon_hdr));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1451: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:443:
+    memset (&ghdr, 0, sizeof (struct gmon_hdr));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1452: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:444:
+    memcpy (&ghdr.cookie[0], GMON_MAGIC, sizeof (ghdr.cookie));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1452: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:444:
+    memcpy (&ghdr.cookie[0], GMON_MAGIC, sizeof (ghdr.cookie));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1452: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:444:
+    memcpy (&ghdr.cookie[0], GMON_MAGIC, sizeof (ghdr.cookie));

CHECK:SPACING: No space is necessary after a cast
#1453: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:445:
+    *(int *) ghdr.version = GMON_VERSION;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1453: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:445:
+    *(int *) ghdr.version = GMON_VERSION;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1454: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:446:
+    write (fd, &ghdr, sizeof (struct gmon_hdr));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1454: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:446:
+    write (fd, &ghdr, sizeof (struct gmon_hdr));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1454: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:446:
+    write (fd, &ghdr, sizeof (struct gmon_hdr));

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#1457: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:449:
+static char defaultGprofOutFile[] = "gmon.out";

CHECK:CAMELCASE: Avoid CamelCase: <defaultGprofOutFile>
#1457: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:449:
+static char defaultGprofOutFile[] = "gmon.out";

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1461: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:453:
+   int fd, popenMap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1462: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:454:
+   unsigned int lowpc, highpc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1463: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:455:
+   FILE *map;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:456:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1464: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:456:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1465: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:457:
+   if ((map = myopen(mapFile, "r", &popenMap)) == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1465: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:457:
+   if ((map = myopen(mapFile, "r", &popenMap)) == NULL) {
+      perror(mapFile);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1465: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:457:
+   if ((map = myopen(mapFile, "r", &popenMap)) == NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1466: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:458:
+      perror(mapFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1467: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:459:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1468: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:460:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1469: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:461:
+   if ((lowpc = get_symbol_address(map, "_stext")) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1469: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:461:
+   if ((lowpc = get_symbol_address(map, "_stext")) == 0) {
+      fprintf(stderr, "%s: can't find \"_stext\" in %s\n", prgname, mapFile);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1469: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:461:
+   if ((lowpc = get_symbol_address(map, "_stext")) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1470: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:462:
+      fprintf(stderr, "%s: can't find \"_stext\" in %s\n", prgname, mapFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1471: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:463:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1472: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:464:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1473: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:465:
+   if ((highpc = get_symbol_address(map, "_etext")) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1473: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:465:
+   if ((highpc = get_symbol_address(map, "_etext")) == 0) {
+      fprintf(stderr, "%s: can't find \"_etext\" in %s\n", prgname, mapFile);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1473: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:465:
+   if ((highpc = get_symbol_address(map, "_etext")) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1474: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:466:
+      fprintf(stderr, "%s: can't find \"_etext\" in %s\n", prgname, mapFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1475: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:467:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1476: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:468:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1477: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:469:
+   popenMap ? pclose(map) : fclose(map);$

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#1479: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:471:
+   if ((fd = creat(outFile, 0666)) == 0) {
              ^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1479: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:471:
+   if ((fd = creat(outFile, 0666)) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1479: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:471:
+   if ((fd = creat(outFile, 0666)) == 0) {
+      perror(outFile);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1479: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:471:
+   if ((fd = creat(outFile, 0666)) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1480: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:472:
+      perror(outFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1481: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:473:
+      exit(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1482: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:474:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1483: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:475:
+   stop_profile();     /* to avoid any race conditions and freeze the data */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1484: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:476:
+   write_gprof_hdr(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1485: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:477:
+   write_gprof_pc_hist(fd, lowpc, highpc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1486: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:478:
+   write_gprof_call_graph(fd, lowpc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1487: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:479:
+   close(fd);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1490: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:482:
+int main (int argc, char **argv)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1492: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:484:
+   static char optstring[] = "m:p:f:o:t:bceigrs";$

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#1492: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:484:
+   static char optstring[] = "m:p:f:o:t:bceigrs";

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1494: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:486:
+   char *mapFile, *proFile, *outFile;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1495: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:487:
+   char *freq = NULL, *type = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1496: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:488:
+   int c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1497: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:489:
+   int optInfo = 0, optReset = 0, optPC = 0, optStart = 0, optStop = 0;$

CHECK:CAMELCASE: Avoid CamelCase: <optInfo>
#1497: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:489:
+   int optInfo = 0, optReset = 0, optPC = 0, optStart = 0, optStop = 0;

CHECK:CAMELCASE: Avoid CamelCase: <optReset>
#1497: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:489:
+   int optInfo = 0, optReset = 0, optPC = 0, optStart = 0, optStop = 0;

CHECK:CAMELCASE: Avoid CamelCase: <optPC>
#1497: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:489:
+   int optInfo = 0, optReset = 0, optPC = 0, optStart = 0, optStop = 0;

CHECK:CAMELCASE: Avoid CamelCase: <optStart>
#1497: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:489:
+   int optInfo = 0, optReset = 0, optPC = 0, optStart = 0, optStop = 0;

CHECK:CAMELCASE: Avoid CamelCase: <optStop>
#1497: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:489:
+   int optInfo = 0, optReset = 0, optPC = 0, optStart = 0, optStop = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1498: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:490:
+   int optGprof = 0, optProf = 0;$

CHECK:CAMELCASE: Avoid CamelCase: <optGprof>
#1498: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:490:
+   int optGprof = 0, optProf = 0;

CHECK:CAMELCASE: Avoid CamelCase: <optProf>
#1498: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:490:
+   int optGprof = 0, optProf = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1499: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:491:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1499: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:491:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1500: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:492:
+   prgname = argv[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1501: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:493:
+   proFile = defaultpro;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1502: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:494:
+   mapFile = defaultmap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1503: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:495:
+   outFile = NULL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1504: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:496:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1504: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:496:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1505: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:497:
+   while ((c = getopt(argc, argv, optstring)) != -1)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1505: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:497:
+   while ((c = getopt(argc, argv, optstring)) != -1)
+   {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1505: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:497:
+   while ((c = getopt(argc, argv, optstring)) != -1)
+   {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1506: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:498:
+   {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1507: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:499:
+      switch(c)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1507: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:499:
+      switch(c)
+      {

ERROR:SPACING: space required before the open parenthesis '('
#1507: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:499:
+      switch(c)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1508: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:500:
+      {$

WARNING:TABSTOP: Statements should start on a tabstop
#1509: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:501:
+	 case 'm': mapFile = optarg; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1509: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:501:
+	 case 'm': mapFile = optarg; break;

WARNING:TABSTOP: Statements should start on a tabstop
#1510: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:502:
+	 case 'o': outFile = optarg; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1510: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:502:
+	 case 'o': outFile = optarg; break;

WARNING:TABSTOP: Statements should start on a tabstop
#1511: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:503:
+	 case 'p': proFile = optarg; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1511: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:503:
+	 case 'p': proFile = optarg; break;

WARNING:TABSTOP: Statements should start on a tabstop
#1512: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:504:
+	 case 't': type = optarg;    break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1512: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:504:
+	 case 't': type = optarg;    break;

WARNING:TABSTOP: Statements should start on a tabstop
#1513: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:505:
+	 case 'b': optStart++;       break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1513: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:505:
+	 case 'b': optStart++;       break;

WARNING:TABSTOP: Statements should start on a tabstop
#1514: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:506:
+	 case 'e': optStop++;        break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1514: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:506:
+	 case 'e': optStop++;        break;

WARNING:TABSTOP: Statements should start on a tabstop
#1515: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:507:
+	 case 'f': freq = optarg;    break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1515: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:507:
+	 case 'f': freq = optarg;    break;

WARNING:TABSTOP: Statements should start on a tabstop
#1516: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:508:
+	 case 's': optInfo++;        break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1516: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:508:
+	 case 's': optInfo++;        break;

WARNING:TABSTOP: Statements should start on a tabstop
#1517: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:509:
+	 case 'r': optReset++;       break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1517: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:509:
+	 case 'r': optReset++;       break;

WARNING:TABSTOP: Statements should start on a tabstop
#1518: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:510:
+	 case 'i': optPC++;          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1518: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:510:
+	 case 'i': optPC++;          break;

WARNING:TABSTOP: Statements should start on a tabstop
#1519: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:511:
+	 case 'g': optGprof++;       break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1519: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:511:
+	 case 'g': optGprof++;       break;

WARNING:TABSTOP: Statements should start on a tabstop
#1520: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:512:
+	 case 'c': optProf++;        break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1520: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:512:
+	 case 'c': optProf++;        break;

WARNING:TABSTOP: Statements should start on a tabstop
#1521: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:513:
+	 default: usage();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1521: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:513:
+	 default: usage();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1522: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:514:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1523: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:515:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1524: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:516:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1524: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:516:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1525: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:517:
+   if (optStop) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1525: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:517:
+   if (optStop) {
+      stop_profile();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1525: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:517:
+   if (optStop) {
+      stop_profile();
+   }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1526: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:518:
+      stop_profile();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1527: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:519:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1528: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:520:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1528: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:520:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1529: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:521:
+   if (optReset) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1529: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:521:
+   if (optReset) {
+      reset_profile_info();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1529: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:521:
+   if (optReset) {
+      reset_profile_info();
+   }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1530: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:522:
+      reset_profile_info();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1531: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:523:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1532: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:524:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1532: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:524:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1533: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:525:
+   if (type) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1533: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:525:
+   if (type) {
+      if (!strcmp(type, "pc"))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1534: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:526:
+      if (!strcmp(type, "pc"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1534: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:526:
+      if (!strcmp(type, "pc"))
+	 set_prof_type(PROF_PC);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1534: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:526:
+      if (!strcmp(type, "pc"))
[...]
+      else if (!strcmp(type, "gprof"))
[...]
+      else if (!strcmp(type, "prof"))
[...]
+      else {
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1536: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:528:
+      else if (!strcmp(type, "gprof"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1536: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:528:
+      else if (!strcmp(type, "gprof"))
+	 set_prof_type(PROF_PC | PROF_MCOUNT);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1538: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:530:
+      else if (!strcmp(type, "prof"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1538: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:530:
+      else if (!strcmp(type, "prof"))
+	 set_prof_type(PROF_CALL_TRACE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1540: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:532:
+      else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1540: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:532:
+      else {
+	 fprintf(stderr, "%s: unsupported profiling type %s\n", prgname, type);

CHECK:BRACES: Unbalanced braces around else statement
#1540: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:532:
+      else {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1543: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:535:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1544: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:536:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1545: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:537:
+^I $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1546: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:538:
+   if (freq) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1546: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:538:
+   if (freq) {
+      unsigned int step;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1547: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:539:
+      unsigned int step;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1548: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:540:
+      char *endp;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1549: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:541:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1549: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:541:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1550: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:542:
+      if ((step = strtoul(freq, &endp, 10)) == 0 || *endp) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1550: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:542:
+      if ((step = strtoul(freq, &endp, 10)) == 0 || *endp) {
+	 fprintf(stderr, "%s: -f takes an unsigned integer\n", prgname);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1550: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:542:
+      if ((step = strtoul(freq, &endp, 10)) == 0 || *endp) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1553: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:545:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1554: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:546:
+      set_profile_freq(step);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1555: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:547:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1556: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:548:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1556: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:548:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1557: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:549:
+   if (optStart) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1557: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:549:
+   if (optStart) {
+      start_profile();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1557: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:549:
+   if (optStart) {
+      start_profile();
+   }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1558: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:550:
+      start_profile();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1559: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:551:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1560: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:552:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1560: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:552:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1561: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:553:
+   if (optInfo) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1561: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:553:
+   if (optInfo) {
+      show_sampling_step(proFile);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1562: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:554:
+      show_sampling_step(proFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1563: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:555:
+      show_sampling_freq(proFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1564: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:556:
+   }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1565: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:557:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1565: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:557:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1566: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:558:
+   if (optPC) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1566: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:558:
+   if (optPC) {
+      output_pc_profile(proFile, mapFile, outFile);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1567: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:559:
+      output_pc_profile(proFile, mapFile, outFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1568: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:560:
+      exit(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1569: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:561:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1571: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:563:
+   if (optGprof) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (3, 6)
#1571: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:563:
+   if (optGprof) {
+      if (!outFile)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1572: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:564:
+      if (!outFile)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 9)
#1572: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:564:
+      if (!outFile)
+	 outFile = defaultGprofOutFile;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1574: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:566:
+      output_gprof_profile(outFile, mapFile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1575: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:567:
+      exit(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1576: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:568:
+   }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1579: FILE: build2/dm/2.2.8-profile/scripts/kernprof.c:571:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000570200.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 124 errors, 514 warnings, 67 checks, 1449 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000570200.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
