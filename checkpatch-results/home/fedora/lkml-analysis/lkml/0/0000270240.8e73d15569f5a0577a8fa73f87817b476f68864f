WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#46: 
Signed-Off-By: Manfred Spraul <manfred@colorfullife.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:MEMORY_BARRIER: memory barrier without comment
#65: FILE: ipc/msg.c:168:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#77: FILE: ipc/msg.c:532:
+				smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#85: FILE: ipc/msg.c:539:
+				smp_mb();

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#109: FILE: ipc/msg.c:581:
+		err=-EACCES;
 		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '-' (ctx:OxV)
#109: FILE: ipc/msg.c:581:
+		err=-EACCES;
 		    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: ipc/msg.c:582:
+^I^Iif (ipcperms(&msq->q_perm, S_IWUGO)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#110: FILE: ipc/msg.c:582:
+		if (ipcperms(&msq->q_perm, S_IWUGO)) 

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: ipc/msg.c:589:
+^I^Iif(msgsz + msq->q_cbytes <= msq->q_qbytes && $

ERROR:SPACING: space required before the open parenthesis '('
#120: FILE: ipc/msg.c:589:
+		if(msgsz + msq->q_cbytes <= msq->q_qbytes && 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: ipc/msg.c:590:
+		if(msgsz + msq->q_cbytes <= msq->q_qbytes && 
+				1 + msq->q_qnum <= msq->q_qbytes) {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#150: FILE: ipc/msg.c:613:
+			err=-ERESTARTNOHAND;
 			   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#150: FILE: ipc/msg.c:613:
+			err=-ERESTARTNOHAND;
 			    ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#185: FILE: ipc/msg.c:681:
+		struct list_head* tmp;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#209: FILE: ipc/msg.c:684:
+		if (ipcperms (&msq->q_perm, S_IRUGO))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#209: FILE: ipc/msg.c:684:
+		if (ipcperms (&msq->q_perm, S_IRUGO))

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: ipc/msg.c:691:
+			struct msg_msg *walk_msg;
+			walk_msg = list_entry(tmp,struct msg_msg,m_list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: ipc/msg.c:691:
+			walk_msg = list_entry(tmp,struct msg_msg,m_list);
 			                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: ipc/msg.c:691:
+			walk_msg = list_entry(tmp,struct msg_msg,m_list);
 			                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: ipc/msg.c:692:
+			if(testmsg(walk_msg,msgtyp,mode) &&
 			                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: ipc/msg.c:692:
+			if(testmsg(walk_msg,msgtyp,mode) &&
 			                          ^

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: ipc/msg.c:692:
+			if(testmsg(walk_msg,msgtyp,mode) &&

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: ipc/msg.c:695:
+				if(mode == SEARCH_LESSEQUAL && walk_msg->m_type != 1) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#221: FILE: ipc/msg.c:696:
+					msg=walk_msg;
 					   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#222: FILE: ipc/msg.c:697:
+					msgtyp=walk_msg->m_type-1;
 					      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#222: FILE: ipc/msg.c:697:
+					msgtyp=walk_msg->m_type-1;
 					                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#224: FILE: ipc/msg.c:699:
+					msg=walk_msg;
 					   ^

ERROR:SPACING: space required before the open parenthesis '('
#244: FILE: ipc/msg.c:705:
+		if(!IS_ERR(msg)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msgsz < msg->m_ts'
#246: FILE: ipc/msg.c:707:
+			if ((msgsz < msg->m_ts) && !(msgflg & MSG_NOERROR)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxO)
#255: FILE: ipc/msg.c:716:
+			atomic_sub(msg->m_ts,&msg_bytes);
 			                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#255: FILE: ipc/msg.c:716:
+			atomic_sub(msg->m_ts,&msg_bytes);
 			                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#257: FILE: ipc/msg.c:718:
+			ss_wakeup(&msq->q_senders,0);
 			                         ^

WARNING:TYPO_SPELLING: 'existance' may be misspelled - perhaps 'existence'?
#298: FILE: ipc/msg.c:745:
+		 * existance of msq:
 		   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#316: FILE: ipc/msg.c:759:
+		while (msg == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#318: FILE: ipc/msg.c:761:
+			msg = (struct msg_msg*) msr_d.r_msg;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#318: FILE: ipc/msg.c:761:
+			msg = (struct msg_msg*) msr_d.r_msg;

ERROR:SPACING: space required before the open parenthesis '('
#326: FILE: ipc/msg.c:768:
+		if(msg != ERR_PTR(-EAGAIN)) {

ERROR:SPACING: space required before the open parenthesis '('
#358: FILE: ipc/msg.c:783:
+		if(msg != ERR_PTR(-EAGAIN))

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: ipc/msg.c:795:
+       ^I^Ireturn PTR_ERR(msg);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#374: FILE: ipc/msg.c:795:
+       ^I^Ireturn PTR_ERR(msg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: ipc/msg.c:795:
+       ^I^Ireturn PTR_ERR(msg);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 20)
#377: FILE: ipc/msg.c:798:
+	if (put_user (msg->m_type, &msgp->mtype) ||
[...]
+		    msgsz = -EFAULT;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#377: FILE: ipc/msg.c:798:
+	if (put_user (msg->m_type, &msgp->mtype) ||

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 13 warnings, 5 checks, 322 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000270240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
