WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: drivers/mmc/pxamci.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#88: FILE: drivers/mmc/pxamci.c:28:
+#include <asm/io.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#95: FILE: drivers/mmc/pxamci.c:35:
+#define DBG(x...)	printk(KERN_DEBUG x)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#102: FILE: drivers/mmc/pxamci.c:42:
+	spinlock_t		lock;

WARNING:MEMORY_BARRIER: memory barrier without comment
#239: FILE: drivers/mmc/pxamci.c:179:
+	wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->cmd"
#247: FILE: drivers/mmc/pxamci.c:187:
+	WARN_ON(host->cmd != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#306: FILE: drivers/mmc/pxamci.c:246:
+		u32 w2 = readl(host->base + MMC_RES) & 0xffff;
+		cmd->resp[i] = v << 24 | w1 << 8 | w2 >> 8;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#310: FILE: drivers/mmc/pxamci.c:250:
+	if (stat & STAT_TIME_OUT_RESPONSE) {
[...]
+	} else if (stat & STAT_RES_CRC_ERR && cmd->flags & MMC_RSP_CRC) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#317: FILE: drivers/mmc/pxamci.c:257:
+	if (host->data && cmd->error == MMC_ERR_NONE) {
[...]
+	} else {
[...]

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#339: FILE: drivers/mmc/pxamci.c:279:
+	else if (stat & (STAT_CRC_READ_ERROR|STAT_CRC_WRITE_ERROR))
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#369: FILE: drivers/mmc/pxamci.c:309:
+		unsigned stat = readl(host->base + MMC_STAT);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->req"
#387: FILE: drivers/mmc/pxamci.c:327:
+	WARN_ON(host->req != NULL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pxamci_set_ios', this function's name, in a string
#415: FILE: drivers/mmc/pxamci.c:355:
+	DBG("pxamci_set_ios: clock %u power %u vdd %u.%02u\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: drivers/mmc/pxamci.c:361:
+		unsigned int clk = CLOCKRATE / ios->clock;
+		if (CLOCKRATE / clk > ios->clock)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pxamci_set_ios', this function's name, in a string
#446: FILE: drivers/mmc/pxamci.c:386:
+	DBG("pxamci_set_ios: clkrt = %x cmdat = %x\n",

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#455: FILE: drivers/mmc/pxamci.c:395:
+static struct resource *platform_device_resource(struct platform_device *dev, unsigned int mask, int nr)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#477: FILE: drivers/mmc/pxamci.c:417:
+	printk(KERN_ERR "DMA%d: IRQ???\n", dma);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#478: FILE: drivers/mmc/pxamci.c:418:
+	DCSR(dma) = DCSR_STARTINTR|DCSR_ENDINTR|DCSR_BUSERR;
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#478: FILE: drivers/mmc/pxamci.c:418:
+	DCSR(dma) = DCSR_STARTINTR|DCSR_ENDINTR|DCSR_BUSERR;
 	                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#522: FILE: drivers/mmc/pxamci.c:462:
+	host->imask = TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#522: FILE: drivers/mmc/pxamci.c:462:
+	host->imask = TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#522: FILE: drivers/mmc/pxamci.c:462:
+	host->imask = TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 	                                                    ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#522: FILE: drivers/mmc/pxamci.c:462:
+	host->imask = TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 	                                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#523: FILE: drivers/mmc/pxamci.c:463:
+		      END_CMD_RES|PRG_DONE|DATA_TRAN_DONE;
 		                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#523: FILE: drivers/mmc/pxamci.c:463:
+		      END_CMD_RES|PRG_DONE|DATA_TRAN_DONE;
 		                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#589: FILE: drivers/mmc/pxamci.c:529:
+		writel(TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 		                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#589: FILE: drivers/mmc/pxamci.c:529:
+		writel(TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 		                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#589: FILE: drivers/mmc/pxamci.c:529:
+		writel(TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 		                                             ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#589: FILE: drivers/mmc/pxamci.c:529:
+		writel(TXFIFO_WR_REQ|RXFIFO_RD_REQ|CLK_IS_OFF|STOP_CMD|
 		                                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#590: FILE: drivers/mmc/pxamci.c:530:
+		       END_CMD_RES|PRG_DONE|DATA_TRAN_DONE,
 		                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#590: FILE: drivers/mmc/pxamci.c:530:
+		       END_CMD_RES|PRG_DONE|DATA_TRAN_DONE,
 		                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#655: FILE: drivers/mmc/pxamci.h:1:
+#undef MMC_STRPCL

CHECK:BIT_MACRO: Prefer using the BIT macro
#678: FILE: drivers/mmc/pxamci.h:24:
+#define STOP_CLOCK		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#682: FILE: drivers/mmc/pxamci.h:28:
+#define STAT_END_CMD_RES		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#683: FILE: drivers/mmc/pxamci.h:29:
+#define STAT_PRG_DONE			(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#684: FILE: drivers/mmc/pxamci.h:30:
+#define STAT_DATA_TRAN_DONE		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#685: FILE: drivers/mmc/pxamci.h:31:
+#define STAT_CLK_EN			(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#686: FILE: drivers/mmc/pxamci.h:32:
+#define STAT_RECV_FIFO_FULL		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#687: FILE: drivers/mmc/pxamci.h:33:
+#define STAT_XMIT_FIFO_EMPTY		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#688: FILE: drivers/mmc/pxamci.h:34:
+#define STAT_RES_CRC_ERR		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#689: FILE: drivers/mmc/pxamci.h:35:
+#define STAT_SPI_READ_ERROR_TOKEN	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#690: FILE: drivers/mmc/pxamci.h:36:
+#define STAT_CRC_READ_ERROR		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#691: FILE: drivers/mmc/pxamci.h:37:
+#define STAT_CRC_WRITE_ERROR		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#692: FILE: drivers/mmc/pxamci.h:38:
+#define STAT_TIME_OUT_RESPONSE		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#693: FILE: drivers/mmc/pxamci.h:39:
+#define STAT_READ_TIME_OUT		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#698: FILE: drivers/mmc/pxamci.h:44:
+#define SPI_CS_ADDRESS		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#699: FILE: drivers/mmc/pxamci.h:45:
+#define SPI_CS_EN		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#700: FILE: drivers/mmc/pxamci.h:46:
+#define CRC_ON			(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#701: FILE: drivers/mmc/pxamci.h:47:
+#define SPI_EN			(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#704: FILE: drivers/mmc/pxamci.h:50:
+#define CMDAT_DMAEN		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#705: FILE: drivers/mmc/pxamci.h:51:
+#define CMDAT_INIT		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#706: FILE: drivers/mmc/pxamci.h:52:
+#define CMDAT_BUSY		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#707: FILE: drivers/mmc/pxamci.h:53:
+#define CMDAT_STREAM		(1 << 4)	/* 1 = stream */

CHECK:BIT_MACRO: Prefer using the BIT macro
#708: FILE: drivers/mmc/pxamci.h:54:
+#define CMDAT_WRITE		(1 << 3)	/* 1 = write */

CHECK:BIT_MACRO: Prefer using the BIT macro
#709: FILE: drivers/mmc/pxamci.h:55:
+#define CMDAT_DATAEN		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#711: FILE: drivers/mmc/pxamci.h:57:
+#define CMDAT_RESP_SHORT	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#724: FILE: drivers/mmc/pxamci.h:70:
+#define BUF_PART_FULL		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#727: FILE: drivers/mmc/pxamci.h:73:
+#define TXFIFO_WR_REQ		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#728: FILE: drivers/mmc/pxamci.h:74:
+#define RXFIFO_RD_REQ		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#729: FILE: drivers/mmc/pxamci.h:75:
+#define CLK_IS_OFF		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#730: FILE: drivers/mmc/pxamci.h:76:
+#define STOP_CMD		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#731: FILE: drivers/mmc/pxamci.h:77:
+#define END_CMD_RES		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#732: FILE: drivers/mmc/pxamci.h:78:
+#define PRG_DONE		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#733: FILE: drivers/mmc/pxamci.h:79:
+#define DATA_TRAN_DONE		(1 << 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 14 warnings, 50 checks, 704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
