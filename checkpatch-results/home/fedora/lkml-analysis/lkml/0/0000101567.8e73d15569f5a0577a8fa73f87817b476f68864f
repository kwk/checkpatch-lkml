WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#98: FILE: fs/locks.c:1015:
+ * @filp: The file to apply the lock to
     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#120: FILE: fs/locks.c:1037:
+int vfs_lock_file(struct file *filp, struct file_lock *fl)
                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#123: FILE: fs/locks.c:1040:
+		return filp->f_op->lock(filp, F_SETLK, fl);
 		                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#131: FILE: fs/locks.c:1048:
+ * @filp: The file to apply the lock to
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#137: FILE: fs/locks.c:1054:
+int vfs_lock_file_conf(struct file *filp, struct file_lock *fl, struct file_lock *conf)
                                     ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: fs/locks.c:1056:
+       if (filp->f_op && filp->f_op->lock) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#139: FILE: fs/locks.c:1056:
+       if (filp->f_op && filp->f_op->lock) {
+	       locks_copy_lock(conf, fl);

CHECK:BRACES: braces {} should be used on all arms of this statement
#139: FILE: fs/locks.c:1056:
+       if (filp->f_op && filp->f_op->lock) {
[...]
+       } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#141: FILE: fs/locks.c:1058:
+	       return filp->f_op->lock(filp, F_SETLK, fl);
 	                               ^^^^

WARNING:TABSTOP: Statements should start on a tabstop
#141: FILE: fs/locks.c:1058:
+	       return filp->f_op->lock(filp, F_SETLK, fl);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: fs/locks.c:1059:
+       } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#142: FILE: fs/locks.c:1059:
+       } else
+               return __posix_lock_file_conf(filp->f_dentry->d_inode, fl, conf);

CHECK:BRACES: Unbalanced braces around else statement
#142: FILE: fs/locks.c:1059:
+       } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: fs/locks.c:1060:
+               return __posix_lock_file_conf(filp->f_dentry->d_inode, fl, conf);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: fs/locks.c:1060:
+               return __posix_lock_file_conf(filp->f_dentry->d_inode, fl, conf);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#149: FILE: fs/locks.c:1066:
+ * @filp: The file to test lock for
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#153: FILE: fs/locks.c:1070:
+int vfs_test_lock(struct file *filp, struct file_lock *fl, struct file_lock *conf)
                                ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#158: FILE: fs/locks.c:1075:
+	if (filp->f_op && filp->f_op->lock) {
[...]
+ 	} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: fs/locks.c:1076:
+ ^I^Ilocks_copy_lock(conf, fl);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: fs/locks.c:1076:
+ ^I^Ilocks_copy_lock(conf, fl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: fs/locks.c:1076:
+ ^I^Ilocks_copy_lock(conf, fl);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#160: FILE: fs/locks.c:1077:
+		error = filp->f_op->lock(filp, F_GETLK, conf);
 		                         ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: fs/locks.c:1083:
+ ^I} else$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: fs/locks.c:1083:
+ ^I} else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: fs/locks.c:1083:
+ ^I} else$

CHECK:BRACES: Unbalanced braces around else statement
#166: FILE: fs/locks.c:1083:
+ 	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#167: FILE: fs/locks.c:1084:
+		return posix_test_lock(filp, fl, conf);
 		                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#173: FILE: fs/locks.c:1090:
+ * @filp: The file to apply the unblock to
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#178: FILE: fs/locks.c:1095:
+void vfs_cancel_lock(struct file *filp, struct file_lock *fl)
                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#185: FILE: fs/locks.c:1102:
+		filp->f_op->lock(filp, F_SETLK, fl);
 		                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#187: FILE: fs/locks.c:1104:
+		posix_unblock_lock(filp, fl);
 		                   ^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#213: FILE: include/linux/fs.h:698:
+	int (*fl_vfs_callback)(struct file_lock *, struct file_lock *, int result);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#213: FILE: include/linux/fs.h:698:
+	int (*fl_vfs_callback)(struct file_lock *, struct file_lock *, int result);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: include/linux/fs.h:758:
+extern int vfs_lock_file(struct file *, struct file_lock *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#221: FILE: include/linux/fs.h:758:
+extern int vfs_lock_file(struct file *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#221: FILE: include/linux/fs.h:758:
+extern int vfs_lock_file(struct file *, struct file_lock *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/fs.h:759:
+extern int vfs_lock_file_conf(struct file *, struct file_lock *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#222: FILE: include/linux/fs.h:759:
+extern int vfs_lock_file_conf(struct file *, struct file_lock *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#222: FILE: include/linux/fs.h:759:
+extern int vfs_lock_file_conf(struct file *, struct file_lock *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#222: FILE: include/linux/fs.h:759:
+extern int vfs_lock_file_conf(struct file *, struct file_lock *, struct file_lock *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: include/linux/fs.h:760:
+extern int vfs_test_lock(struct file *, struct file_lock *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#223: FILE: include/linux/fs.h:760:
+extern int vfs_test_lock(struct file *, struct file_lock *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#223: FILE: include/linux/fs.h:760:
+extern int vfs_test_lock(struct file *, struct file_lock *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#223: FILE: include/linux/fs.h:760:
+extern int vfs_test_lock(struct file *, struct file_lock *, struct file_lock *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/fs.h:761:
+extern void vfs_cancel_lock(struct file *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#224: FILE: include/linux/fs.h:761:
+extern void vfs_cancel_lock(struct file *, struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#224: FILE: include/linux/fs.h:761:
+extern void vfs_cancel_lock(struct file *, struct file_lock *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101567.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 36 warnings, 8 checks, 127 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101567.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
