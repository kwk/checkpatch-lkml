WARNING:TYPO_SPELLING: 'functionnal' may be misspelled - perhaps 'functional'?
#77: FILE: drivers/trace/Config.help:28:
+  The impact of a fully functionnal system (kernel event logging +
                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: drivers/trace/Config.help:39:
+  There are normally two tracing schemes available and selectable at $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#135: FILE: drivers/trace/tracer.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#136: FILE: drivers/trace/tracer.c:2:
+ * linux/drivers/trace/tracer.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Chaging' may be misspelled - perhaps 'Changing'?
#161: FILE: drivers/trace/tracer.c:27:
+ *    09/09/99, Chaging the format of an event record in order to reduce the
                 ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: drivers/trace/tracer.c:33:
+ *    planned for a system who gets at least one clock tick every 10 $

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#186: FILE: drivers/trace/tracer.c:52:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#188: FILE: drivers/trace/tracer.c:54:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#189: FILE: drivers/trace/tracer.c:55:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#190: FILE: drivers/trace/tracer.c:56:
+#include <asm/pgtable.h>

CHECK:CAMELCASE: Avoid CamelCase: <sMajorNumber>
#201: FILE: drivers/trace/tracer.c:67:
+static int		sMajorNumber;		/* Major number of the tracer */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <sOpenCount>
#202: FILE: drivers/trace/tracer.c:68:
+static int		sOpenCount;		/* Number of times device is open */

CHECK:CAMELCASE: Avoid CamelCase: <sTracLock>
#204: FILE: drivers/trace/tracer.c:70:
+static int		sTracLock;		/* Tracer lock used to lock primary buffer */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: drivers/trace/tracer.c:71:
+static spinlock_t ^IsSpinLock;^I^I/* Spinlock in order to lock kernel */$

CHECK:CAMELCASE: Avoid CamelCase: <sSpinLock>
#205: FILE: drivers/trace/tracer.c:71:
+static spinlock_t 	sSpinLock;		/* Spinlock in order to lock kernel */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: drivers/trace/tracer.c:73:
+static int ^I^IsSignalSent;^I^I/* A signal has been sent to the daemon */$

CHECK:CAMELCASE: Avoid CamelCase: <sSignalSent>
#207: FILE: drivers/trace/tracer.c:73:
+static int 		sSignalSent;		/* A signal has been sent to the daemon */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#208: FILE: drivers/trace/tracer.c:74:
+static struct task_struct* sDaemonTaskStruct;	/* Task structure of the tracer daemon */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <sDaemonTaskStruct>
#208: FILE: drivers/trace/tracer.c:74:
+static struct task_struct* sDaemonTaskStruct;	/* Task structure of the tracer daemon */

CHECK:CAMELCASE: Avoid CamelCase: <sTracerStarted>
#210: FILE: drivers/trace/tracer.c:76:
+static int		sTracerStarted;		/* Is the tracer started */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedEvents>
#211: FILE: drivers/trace/tracer.c:77:
+static trace_event_mask	sTracedEvents;		/* Bit-field of events being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sLogEventDetailsMask>
#212: FILE: drivers/trace/tracer.c:78:
+static trace_event_mask	sLogEventDetailsMask;	/* Log the details of the events mask */

CHECK:CAMELCASE: Avoid CamelCase: <sLogCPUID>
#213: FILE: drivers/trace/tracer.c:79:
+static int		sLogCPUID;		/* Log the CPUID associated with each event */

WARNING:TYPO_SPELLING: 'adress' may be misspelled - perhaps 'address'?
#214: FILE: drivers/trace/tracer.c:80:
+static int		sUseSyscallEIPBounds;	/* Use adress bounds to fetch the EIP where call is made */
           		                     	       ^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#214: FILE: drivers/trace/tracer.c:80:
+static int		sUseSyscallEIPBounds;	/* Use adress bounds to fetch the EIP where call is made */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <sUseSyscallEIPBounds>
#214: FILE: drivers/trace/tracer.c:80:
+static int		sUseSyscallEIPBounds;	/* Use adress bounds to fetch the EIP where call is made */

CHECK:CAMELCASE: Avoid CamelCase: <sLowerEIPBoundSet>
#215: FILE: drivers/trace/tracer.c:81:
+static int		sLowerEIPBoundSet;	/* The lower bound EIP has been set */

CHECK:CAMELCASE: Avoid CamelCase: <sUpperEIPBoundSet>
#216: FILE: drivers/trace/tracer.c:82:
+static int		sUpperEIPBoundSet;	/* The upper bound EIP has been set */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#217: FILE: drivers/trace/tracer.c:83:
+static void*		sLowerEIPBound;		/* The lower bound EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sLowerEIPBound>
#217: FILE: drivers/trace/tracer.c:83:
+static void*		sLowerEIPBound;		/* The lower bound EIP */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#218: FILE: drivers/trace/tracer.c:84:
+static void*		sUpperEIPBound;		/* The upper bound EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sUpperEIPBound>
#218: FILE: drivers/trace/tracer.c:84:
+static void*		sUpperEIPBound;		/* The upper bound EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingPID>
#219: FILE: drivers/trace/tracer.c:85:
+static int		sTracingPID;		/* Tracing only the events for one pid */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingPGRP>
#220: FILE: drivers/trace/tracer.c:86:
+static int		sTracingPGRP;		/* Tracing only the events for one process group */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingGID>
#221: FILE: drivers/trace/tracer.c:87:
+static int		sTracingGID;		/* Tracing only the events for one gid */

CHECK:CAMELCASE: Avoid CamelCase: <sTracingUID>
#222: FILE: drivers/trace/tracer.c:88:
+static int		sTracingUID;		/* Tracing only the events for one uid */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedPID>
#223: FILE: drivers/trace/tracer.c:89:
+static pid_t		sTracedPID;		/* PID being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedPGRP>
#224: FILE: drivers/trace/tracer.c:90:
+static pid_t		sTracedPGRP;		/* Process group being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedGID>
#225: FILE: drivers/trace/tracer.c:91:
+static gid_t		sTracedGID;		/* GID being traced */

CHECK:CAMELCASE: Avoid CamelCase: <sTracedUID>
#226: FILE: drivers/trace/tracer.c:92:
+static uid_t		sTracedUID;		/* UID being traced */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#227: FILE: drivers/trace/tracer.c:93:
+static int		sSyscallEIPDepthSet;	/* The call depth at which to fetch EIP has been set */

CHECK:CAMELCASE: Avoid CamelCase: <sSyscallEIPDepthSet>
#227: FILE: drivers/trace/tracer.c:93:
+static int		sSyscallEIPDepthSet;	/* The call depth at which to fetch EIP has been set */

CHECK:CAMELCASE: Avoid CamelCase: <sSyscallEIPDepth>
#228: FILE: drivers/trace/tracer.c:94:
+static int		sSyscallEIPDepth;	/* The call depth at which to fetch the EIP */

CHECK:CAMELCASE: Avoid CamelCase: <sBufReadComplete>
#230: FILE: drivers/trace/tracer.c:96:
+static int		sBufReadComplete;	/* Number of buffers completely filled */

CHECK:CAMELCASE: Avoid CamelCase: <sSizeReadIncomplete>
#231: FILE: drivers/trace/tracer.c:97:
+static int		sSizeReadIncomplete;	/* Quantity of data read from incomplete buffers */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#232: FILE: drivers/trace/tracer.c:98:
+static int		sEventsLost;		/* Number of events lost because of lack of buffer space */

CHECK:CAMELCASE: Avoid CamelCase: <sEventsLost>
#232: FILE: drivers/trace/tracer.c:98:
+static int		sEventsLost;		/* Number of events lost because of lack of buffer space */

CHECK:CAMELCASE: Avoid CamelCase: <sBufSize>
#233: FILE: drivers/trace/tracer.c:99:
+static u32		sBufSize;		/* Buffer sizes */

CHECK:CAMELCASE: Avoid CamelCase: <sAllocSize>
#234: FILE: drivers/trace/tracer.c:100:
+static u32		sAllocSize;		/* Size of buffers allocated */

CHECK:CAMELCASE: Avoid CamelCase: <sBufferID>
#235: FILE: drivers/trace/tracer.c:101:
+static u32		sBufferID;		/* Unique buffer ID */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#236: FILE: drivers/trace/tracer.c:102:
+static char*		sTracBuf = NULL;	/* Trace buffer */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#236: FILE: drivers/trace/tracer.c:102:
+static char*		sTracBuf = NULL;	/* Trace buffer */

CHECK:CAMELCASE: Avoid CamelCase: <sTracBuf>
#236: FILE: drivers/trace/tracer.c:102:
+static char*		sTracBuf = NULL;	/* Trace buffer */

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#237: FILE: drivers/trace/tracer.c:103:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */
             		                	                   ^^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#237: FILE: drivers/trace/tracer.c:103:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#237: FILE: drivers/trace/tracer.c:103:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */

CHECK:CAMELCASE: Avoid CamelCase: <sWritBuf>
#237: FILE: drivers/trace/tracer.c:103:
+static char*		sWritBuf = NULL;	/* Buffer used for writting */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#238: FILE: drivers/trace/tracer.c:104:
+static char*		sReadBuf = NULL;	/* Buffer used for reading */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#238: FILE: drivers/trace/tracer.c:104:
+static char*		sReadBuf = NULL;	/* Buffer used for reading */

CHECK:CAMELCASE: Avoid CamelCase: <sReadBuf>
#238: FILE: drivers/trace/tracer.c:104:
+static char*		sReadBuf = NULL;	/* Buffer used for reading */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#239: FILE: drivers/trace/tracer.c:105:
+static char*		sWritBufEnd;		/* End of write buffer */

CHECK:CAMELCASE: Avoid CamelCase: <sWritBufEnd>
#239: FILE: drivers/trace/tracer.c:105:
+static char*		sWritBufEnd;		/* End of write buffer */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#240: FILE: drivers/trace/tracer.c:106:
+static char*		sReadBufEnd;		/* End of read buffer */

CHECK:CAMELCASE: Avoid CamelCase: <sReadBufEnd>
#240: FILE: drivers/trace/tracer.c:106:
+static char*		sReadBufEnd;		/* End of read buffer */

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#241: FILE: drivers/trace/tracer.c:107:
+static char*		sWritPos;		/* Current position for writting */
             		         		                        ^^^^^^^^

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#241: FILE: drivers/trace/tracer.c:107:
+static char*		sWritPos;		/* Current position for writting */

CHECK:CAMELCASE: Avoid CamelCase: <sWritPos>
#241: FILE: drivers/trace/tracer.c:107:
+static char*		sWritPos;		/* Current position for writting */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#242: FILE: drivers/trace/tracer.c:108:
+static char*		sReadLimit;		/* Limit at which read should stop */

CHECK:CAMELCASE: Avoid CamelCase: <sReadLimit>
#242: FILE: drivers/trace/tracer.c:108:
+static char*		sReadLimit;		/* Limit at which read should stop */

ERROR:POINTER_LOCATION: "foo*		bar" should be "foo *bar"
#243: FILE: drivers/trace/tracer.c:109:
+static char*		sWritLimit;		/* Limit at which write should stop */

CHECK:CAMELCASE: Avoid CamelCase: <sWritLimit>
#243: FILE: drivers/trace/tracer.c:109:
+static char*		sWritLimit;		/* Limit at which write should stop */

CHECK:CAMELCASE: Avoid CamelCase: <sUseLocking>
#244: FILE: drivers/trace/tracer.c:110:
+static int              sUseLocking;		/* Holds command from daemon */

CHECK:CAMELCASE: Avoid CamelCase: <sBufnoBits>
#245: FILE: drivers/trace/tracer.c:111:
+static u32              sBufnoBits;             /* Holds command from daemon */

CHECK:CAMELCASE: Avoid CamelCase: <sBufOffsetBits>
#246: FILE: drivers/trace/tracer.c:112:
+static u32              sBufOffsetBits;         /* Holds command from daemon */

CHECK:CAMELCASE: Avoid CamelCase: <sBuffersFull>
#247: FILE: drivers/trace/tracer.c:113:
+static int              sBuffersFull;           /* All-buffers-full boolean */

CHECK:CAMELCASE: Avoid CamelCase: <sBufferStartTime>
#250: FILE: drivers/trace/tracer.c:116:
+static struct timeval sBufferStartTime;		/* The time at which the buffer was started */

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#253: FILE: drivers/trace/tracer.c:119:
+static char *sUserEventData = NULL;		/* The data associated with a user event */

CHECK:CAMELCASE: Avoid CamelCase: <sUserEventData>
#253: FILE: drivers/trace/tracer.c:119:
+static char *sUserEventData = NULL;		/* The data associated with a user event */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#256: FILE: drivers/trace/tracer.c:122:
+/* The global per-buffer control data structure, shared between the tracing
+   driver and the trace daemon via ioctl. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#256: FILE: drivers/trace/tracer.c:122:
+   driver and the trace daemon via ioctl. */

CHECK:CAMELCASE: Avoid CamelCase: <sBufferControl>
#257: FILE: drivers/trace/tracer.c:123:
+static struct buffer_control sBufferControl;

CHECK:CAMELCASE: Avoid CamelCase: <sEventStructSize>
#260: FILE: drivers/trace/tracer.c:126:
+static int sEventStructSize[TRACE_EV_MAX + 1] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#261: FILE: drivers/trace/tracer.c:127:
+static int sEventStructSize[TRACE_EV_MAX + 1] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#262: FILE: drivers/trace/tracer.c:128:
+	sizeof(trace_start)		/* TRACE_START */ ,
 	                   		                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#263: FILE: drivers/trace/tracer.c:129:
+	sizeof(trace_syscall_entry)	/* TRACE_SYSCALL_ENTRY */ ,
 	                           	                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#264: FILE: drivers/trace/tracer.c:130:
+	0				/* TRACE_SYSCALL_EXIT */ ,
 	 				                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#265: FILE: drivers/trace/tracer.c:131:
+	sizeof(trace_trap_entry)	/* TRACE_TRAP_ENTRY */ ,
 	                        	                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#266: FILE: drivers/trace/tracer.c:132:
+	0				/* TRACE_TRAP_EXIT */ ,
 	 				                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#267: FILE: drivers/trace/tracer.c:133:
+	sizeof(trace_irq_entry)		/* TRACE_IRQ_ENTRY */ ,
 	                       		                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#268: FILE: drivers/trace/tracer.c:134:
+	0				/* TRACE_IRQ_EXIT */ ,
 	 				                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#269: FILE: drivers/trace/tracer.c:135:
+	sizeof(trace_schedchange)	/* TRACE_SCHEDCHANGE */ ,
 	                         	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#270: FILE: drivers/trace/tracer.c:136:
+	0				/* TRACE_KERNEL_TIMER */ ,
 	 				                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#271: FILE: drivers/trace/tracer.c:137:
+	sizeof(trace_soft_irq)		/* TRACE_SOFT_IRQ */ ,
 	                      		                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#272: FILE: drivers/trace/tracer.c:138:
+	sizeof(trace_process)		/* TRACE_PROCESS */ ,
 	                     		                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#273: FILE: drivers/trace/tracer.c:139:
+	sizeof(trace_file_system)	/* TRACE_FILE_SYSTEM */ ,
 	                         	                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#274: FILE: drivers/trace/tracer.c:140:
+	sizeof(trace_timer)		/* TRACE_TIMER */ ,
 	                   		                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#275: FILE: drivers/trace/tracer.c:141:
+	sizeof(trace_memory)		/* TRACE_MEMORY */ ,
 	                    		                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#276: FILE: drivers/trace/tracer.c:142:
+	sizeof(trace_socket)		/* TRACE_SOCKET */ ,
 	                    		                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#277: FILE: drivers/trace/tracer.c:143:
+	sizeof(trace_ipc)		/* TRACE_IPC */ ,
 	                 		                ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#278: FILE: drivers/trace/tracer.c:144:
+	sizeof(trace_network)		/* TRACE_NETWORK */ ,
 	                     		                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#279: FILE: drivers/trace/tracer.c:145:
+	sizeof(trace_buffer_start)	/* TRACE_BUFFER_START */ ,
 	                          	                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#280: FILE: drivers/trace/tracer.c:146:
+	0				/* TRACE_BUFFER_END */ ,
 	 				                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#281: FILE: drivers/trace/tracer.c:147:
+	sizeof(trace_new_event)		/* TRACE_NEW_EVENT */ ,
 	                       		                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#282: FILE: drivers/trace/tracer.c:148:
+	sizeof(trace_custom)		/* TRACE_CUSTOM */ ,
 	                    		                   ^

CHECK:CAMELCASE: Avoid CamelCase: <sTracerFileOps>
#287: FILE: drivers/trace/tracer.c:153:
+static struct file_operations sTracerFileOps =

WARNING:CONST_STRUCT: struct file_operations should normally be const
#287: FILE: drivers/trace/tracer.c:153:
+static struct file_operations sTracerFileOps =

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#288: FILE: drivers/trace/tracer.c:154:
+static struct file_operations sTracerFileOps =
+{

WARNING:INDENTED_LABEL: labels should not be indented
#289: FILE: drivers/trace/tracer.c:155:
+	owner:		THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#290: FILE: drivers/trace/tracer.c:156:
+	ioctl:		tracer_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#290: FILE: drivers/trace/tracer.c:156:
+	ioctl:		tracer_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#291: FILE: drivers/trace/tracer.c:157:
+	mmap:		tracer_mmap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#291: FILE: drivers/trace/tracer.c:157:
+	mmap:		tracer_mmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#292: FILE: drivers/trace/tracer.c:158:
+	open:		tracer_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#292: FILE: drivers/trace/tracer.c:158:
+	open:		tracer_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#293: FILE: drivers/trace/tracer.c:159:
+	release:	tracer_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#293: FILE: drivers/trace/tracer.c:159:
+	release:	tracer_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#294: FILE: drivers/trace/tracer.c:160:
+	fsync:		tracer_fsync,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#294: FILE: drivers/trace/tracer.c:160:
+	fsync:		tracer_fsync,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: drivers/trace/tracer.c:164:
+static u32              sLastEventIndex;        /* For full-buffers state */ $

CHECK:CAMELCASE: Avoid CamelCase: <sLastEventIndex>
#298: FILE: drivers/trace/tracer.c:164:
+static u32              sLastEventIndex;        /* For full-buffers state */ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: drivers/trace/tracer.c:165:
+static struct timeval   sLastEventTimeStamp;    /* For full-buffers state */ $

CHECK:CAMELCASE: Avoid CamelCase: <sLastEventTimeStamp>
#299: FILE: drivers/trace/tracer.c:165:
+static struct timeval   sLastEventTimeStamp;    /* For full-buffers state */ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: drivers/trace/tracer.c:167:
+static u32 sStartReserve = TRACER_FIRST_EVENT_SIZE; $

CHECK:CAMELCASE: Avoid CamelCase: <sStartReserve>
#301: FILE: drivers/trace/tracer.c:167:
+static u32 sStartReserve = TRACER_FIRST_EVENT_SIZE; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: drivers/trace/tracer.c:169:
+/* Space reserved for TRACE_EV_BUFFER_END event + sizeof lost word, which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: drivers/trace/tracer.c:170:
+   though the sizeof lost word isn't necessarily contiguous with rest of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#304: FILE: drivers/trace/tracer.c:170:
+/* Space reserved for TRACE_EV_BUFFER_END event + sizeof lost word, which 
+   though the sizeof lost word isn't necessarily contiguous with rest of 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/trace/tracer.c:171:
+   event (it's always at the end of the buffer) is included here for code $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#306: FILE: drivers/trace/tracer.c:172:
+   clarity. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: drivers/trace/tracer.c:173:
+static u32 sEndReserve = TRACER_LAST_EVENT_SIZE; $

CHECK:CAMELCASE: Avoid CamelCase: <sEndReserve>
#307: FILE: drivers/trace/tracer.c:173:
+static u32 sEndReserve = TRACER_LAST_EVENT_SIZE; 

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#311: FILE: drivers/trace/tracer.c:177:
+#define FIX_SIZE(x) (((x) - 1) & PAGE_MASK) + PAGE_SIZE

CHECK:SPACING: No space is necessary after a cast
#323: FILE: drivers/trace/tracer.c:189:
+	kva = (unsigned long) page_address(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#339: FILE: drivers/trace/tracer.c:205:
+	adr = (unsigned long) mem;

CHECK:SPACING: No space is necessary after a cast
#341: FILE: drivers/trace/tracer.c:207:
+		mem_map_reserve(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#356: FILE: drivers/trace/tracer.c:222:
+	adr = (unsigned long) mem;

CHECK:SPACING: No space is necessary after a cast
#357: FILE: drivers/trace/tracer.c:223:
+	while ((long) size > 0) {

CHECK:SPACING: No space is necessary after a cast
#358: FILE: drivers/trace/tracer.c:224:
+		mem_map_unreserve(vmalloc_to_page((void *) adr));

CHECK:SPACING: No space is necessary after a cast
#370: FILE: drivers/trace/tracer.c:236:
+	unsigned long start = (unsigned long) adr;

CHECK:SPACING: No space is necessary after a cast
#373: FILE: drivers/trace/tracer.c:239:
+	pos = (unsigned long) start_pos;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#384: FILE: drivers/trace/tracer.c:250:
+}
+/* \end{Code inspired from BTTV driver} */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#389: FILE: drivers/trace/tracer.c:255:
+ *	Writes data to the destination buffer and updates the begining the
   	                                                      ^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'DEST' - possible side-effects?
#392: FILE: drivers/trace/tracer.c:258:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#392: FILE: drivers/trace/tracer.c:258:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#392: FILE: drivers/trace/tracer.c:258:
+#define tracer_write_to_buffer(DEST, SRC, SIZE) \
+do\
+{\
+   memcpy(DEST, SRC, SIZE);\
+   DEST += SIZE;\
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#393: FILE: drivers/trace/tracer.c:259:
+do\
+{\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: drivers/trace/tracer.c:261:
+   memcpy(DEST, SRC, SIZE);\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: drivers/trace/tracer.c:262:
+   DEST += SIZE;\$

ERROR:SPACING: space required before the open parenthesis '('
#397: FILE: drivers/trace/tracer.c:263:
+} while(0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: drivers/trace/tracer.c:278:
+static void init_buffer_control(struct buffer_control * pmBC,

CHECK:CAMELCASE: Avoid CamelCase: <pmBC>
#412: FILE: drivers/trace/tracer.c:278:
+static void init_buffer_control(struct buffer_control * pmBC,

CHECK:CAMELCASE: Avoid CamelCase: <pmUseLockless>
#413: FILE: drivers/trace/tracer.c:279:
+				int pmUseLockless,

CHECK:CAMELCASE: Avoid CamelCase: <pmBufnoBits>
#414: FILE: drivers/trace/tracer.c:280:
+				u8 pmBufnoBits,

CHECK:CAMELCASE: Avoid CamelCase: <pmOffsetBits>
#415: FILE: drivers/trace/tracer.c:281:
+				u8 pmOffsetBits)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#417: FILE: drivers/trace/tracer.c:283:
+	unsigned i;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: drivers/trace/tracer.c:284:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#419: FILE: drivers/trace/tracer.c:285:
+	if((pmBC->using_lockless = pmUseLockless) == TRUE) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#419: FILE: drivers/trace/tracer.c:285:
+	if((pmBC->using_lockless = pmUseLockless) == TRUE) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: drivers/trace/tracer.c:292:
+^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#427: FILE: drivers/trace/tracer.c:293:
+		pmBC->buffers_produced = pmBC->buffers_consumed = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#430: FILE: drivers/trace/tracer.c:296:
+		/* When a new buffer is switched to, TRACE_BUFFER_SIZE is
+		   subtracted from its fill_count in order to initialize it

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: drivers/trace/tracer.c:298:
+^I^I   because an intervening event may have already been written $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#435: FILE: drivers/trace/tracer.c:301:
+^I^I   The first buffer is initialized to 0 and the others are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: drivers/trace/tracer.c:302:
+^I^I   initialized to TRACE_BUFFER_SIZE because the very first $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: drivers/trace/tracer.c:303:
+^I^I   buffer we ever see won't be initialized in that way by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: drivers/trace/tracer.c:304:
+^I^I   the switching code and since there's never been an event, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: drivers/trace/tracer.c:305:
+^I^I   we know it should be 0 and that it must be explicitly $

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#441: FILE: drivers/trace/tracer.c:307:
+		   is is factored into the end-of-buffer processing, so isn't

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#442: FILE: drivers/trace/tracer.c:308:
+		   added to the fill counts here, except for the first. */

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: drivers/trace/tracer.c:310:
+		for(i = 1; i < TRACER_MAX_BUFFERS; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: drivers/trace/tracer.c:318:
+/* These inline atomic functions wrap the linux versions in order to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#453: FILE: drivers/trace/tracer.c:319:
+/* These inline atomic functions wrap the linux versions in order to 
+   implement the interface we want as well as to ensure memory barriers. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#453: FILE: drivers/trace/tracer.c:319:
+   implement the interface we want as well as to ensure memory barriers. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: drivers/trace/tracer.c:332:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: drivers/trace/tracer.c:340:
+inline int compare_and_store_volatile(volatile u32 *ptr, $

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#474: FILE: drivers/trace/tracer.c:340:
+inline int compare_and_store_volatile(volatile u32 *ptr, 

WARNING:TYPO_SPELLING: 'substract' may be misspelled - perhaps 'subtract'?
#517: FILE: drivers/trace/tracer.c:383:
+ *	atomic_sub_volatile: - Atomically substract val from the value at ptr.
   	                                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'substract' may be misspelled - perhaps 'subtract'?
#521: FILE: drivers/trace/tracer.c:387:
+ *	Uses memory barriers to substract val from *ptr.
   	                        ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: drivers/trace/tracer.c:407:
+	u32 bufno = TRACE_BUFFER_NUMBER_GET(index, sBufferControl.offset_bits);
+	atomic_add_volatile(&sBufferControl.fill_count[bufno], len);

CHECK:CAMELCASE: Avoid CamelCase: <pmIndex>
#552: FILE: drivers/trace/tracer.c:418:
+static inline void write_start_buffer_event(u32 pmIndex, struct timeval pmTime)

CHECK:CAMELCASE: Avoid CamelCase: <pmTime>
#552: FILE: drivers/trace/tracer.c:418:
+static inline void write_start_buffer_event(u32 pmIndex, struct timeval pmTime)

CHECK:CAMELCASE: Avoid CamelCase: <lStartBufferEvent>
#554: FILE: drivers/trace/tracer.c:420:
+	trace_buffer_start lStartBufferEvent; /* Start of new buffer event */

CHECK:CAMELCASE: Avoid CamelCase: <lEventID>
#555: FILE: drivers/trace/tracer.c:421:
+	u8 lEventID;			/* Event ID of last event */

CHECK:CAMELCASE: Avoid CamelCase: <lDataSize>
#556: FILE: drivers/trace/tracer.c:422:
+	uint16_t lDataSize;		/* Size of tracing data */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#556: FILE: drivers/trace/tracer.c:422:
+	uint16_t lDataSize;		/* Size of tracing data */

CHECK:CAMELCASE: Avoid CamelCase: <lTimeDelta>
#557: FILE: drivers/trace/tracer.c:423:
+	trace_time_delta lTimeDelta;	/* The time elapsed between now and the last event */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#558: FILE: drivers/trace/tracer.c:424:
+^Ichar* lWritPos;^I        ^I/* Current position for writing */$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#558: FILE: drivers/trace/tracer.c:424:
+	char* lWritPos;	        	/* Current position for writing */

CHECK:CAMELCASE: Avoid CamelCase: <lWritPos>
#558: FILE: drivers/trace/tracer.c:424:
+	char* lWritPos;	        	/* Current position for writing */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: drivers/trace/tracer.c:427:
+^IlWritPos = sTracBuf + TRACE_BUFFER_OFFSET_CLEAR(pmIndex, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: drivers/trace/tracer.c:432:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <Time>
#569: FILE: drivers/trace/tracer.c:435:
+	lStartBufferEvent.Time = pmTime;

WARNING:TYPO_SPELLING: 'runing' may be misspelled - perhaps 'running'?
#612: FILE: drivers/trace/tracer.c:478:
+	u8 lCPUID;			/* CPUID of currently runing process */
 	          			                      ^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <lCPUID>
#612: FILE: drivers/trace/tracer.c:478:
+	u8 lCPUID;			/* CPUID of currently runing process */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#614: FILE: drivers/trace/tracer.c:480:
+^Ichar* lWritPos;^I        ^I/* Current position for writing */$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#614: FILE: drivers/trace/tracer.c:480:
+	char* lWritPos;	        	/* Current position for writing */

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#619: FILE: drivers/trace/tracer.c:485:
+	if (sLogCPUID == TRUE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#640: FILE: drivers/trace/tracer.c:506:
+ *^I@pmIndex: index into the trace buffer $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: drivers/trace/tracer.c:509:
+ *^IWrites the value contained in pmSizeLost as the last word in the $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#644: FILE: drivers/trace/tracer.c:510:
+ *	Writes the value contained in pmSizeLost as the last word in the 
+ *	the buffer specified by the buffer number contained in pmIndex.  The

CHECK:CAMELCASE: Avoid CamelCase: <pmSizeLost>
#648: FILE: drivers/trace/tracer.c:514:
+static inline void write_lost_size(u32 pmIndex, u32 pmSizeLost)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#650: FILE: drivers/trace/tracer.c:516:
+	char* lWritBufEnd;		/* End of buffer */

CHECK:CAMELCASE: Avoid CamelCase: <lWritBufEnd>
#650: FILE: drivers/trace/tracer.c:516:
+	char* lWritBufEnd;		/* End of buffer */

CHECK:SPACING: No space is necessary after a cast
#658: FILE: drivers/trace/tracer.c:524:
+	*((u32 *) (lWritBufEnd - sizeof(pmSizeLost))) = pmSizeLost;

CHECK:CAMELCASE: Avoid CamelCase: <pmEndIndex>
#670: FILE: drivers/trace/tracer.c:536:
+static inline void finalize_buffer(u32 pmEndIndex, u32 pmSizeLost, struct timeval *pmTimestamp)

CHECK:CAMELCASE: Avoid CamelCase: <pmTimestamp>
#670: FILE: drivers/trace/tracer.c:536:
+static inline void finalize_buffer(u32 pmEndIndex, u32 pmSizeLost, struct timeval *pmTimestamp)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#676: FILE: drivers/trace/tracer.c:542:
+	/* In any buffer switch, we need to write out the lost size,
+	   which can be 0. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#676: FILE: drivers/trace/tracer.c:542:
+	   which can be 0. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: drivers/trace/tracer.c:545:
+^I/* Add the size lost and end event size to fill_count so that $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#680: FILE: drivers/trace/tracer.c:546:
+	/* Add the size lost and end event size to fill_count so that 
+	   the old buffer won't be seen as incomplete. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#680: FILE: drivers/trace/tracer.c:546:
+	   the old buffer won't be seen as incomplete. */

CHECK:CAMELCASE: Avoid CamelCase: <lEventsEnd>
#694: FILE: drivers/trace/tracer.c:560:
+	u32 lEventsEnd;                 /* Index of end of last event */

CHECK:CAMELCASE: Avoid CamelCase: <lSizeLost>
#695: FILE: drivers/trace/tracer.c:561:
+	u32 lSizeLost;                  /* Bytes after end of last event */

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#696: FILE: drivers/trace/tracer.c:562:
+	unsigned long int lFlags;       /* CPU flags for lock */

CHECK:CAMELCASE: Avoid CamelCase: <lFlags>
#696: FILE: drivers/trace/tracer.c:562:
+	unsigned long int lFlags;       /* CPU flags for lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#702: FILE: drivers/trace/tracer.c:568:
+	/* Size lost in buffer is the unused space after end of last event
+	   and end of buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#702: FILE: drivers/trace/tracer.c:568:
+	   and end of buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#708: FILE: drivers/trace/tracer.c:574:
+^I/* Write end event etc. and increment buffers_produced.  The  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#709: FILE: drivers/trace/tracer.c:575:
+	/* Write end event etc. and increment buffers_produced.  The  
+	   time used here is what the locking version uses as well. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#709: FILE: drivers/trace/tracer.c:575:
+	   time used here is what the locking version uses as well. */

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#710: FILE: drivers/trace/tracer.c:576:
+	finalize_buffer(sBufferControl.index & sBufferControl.index_mask, lSizeLost, &sBufferStartTime);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#725: FILE: drivers/trace/tracer.c:591:
+ *^Ilast available buffer, that buffer will be finalized and all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: drivers/trace/tracer.c:595:
+ *^IThe return value contains the result flags and is an ORed combination $

CHECK:CAMELCASE: Avoid CamelCase: <pmOldIndex>
#737: FILE: drivers/trace/tracer.c:603:
+static inline int discard_check(u32 pmOldIndex,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#738: FILE: drivers/trace/tracer.c:604:
+^I^I^I^Iu32 pmLen, $

CHECK:CAMELCASE: Avoid CamelCase: <pmLen>
#738: FILE: drivers/trace/tracer.c:604:
+				u32 pmLen, 

CHECK:CAMELCASE: Avoid CamelCase: <lBuffersReady>
#741: FILE: drivers/trace/tracer.c:607:
+	u32 lBuffersReady;

CHECK:CAMELCASE: Avoid CamelCase: <lOffsetMask>
#742: FILE: drivers/trace/tracer.c:608:
+	u32 lOffsetMask = sBufferControl.offset_mask;

CHECK:CAMELCASE: Avoid CamelCase: <lOffsetBits>
#743: FILE: drivers/trace/tracer.c:609:
+	u8 lOffsetBits = sBufferControl.offset_bits;

CHECK:CAMELCASE: Avoid CamelCase: <lIndexMask>
#744: FILE: drivers/trace/tracer.c:610:
+	u32 lIndexMask = sBufferControl.index_mask;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#746: FILE: drivers/trace/tracer.c:612:
+	unsigned long int lFlags; /* CPU flags for lock */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#748: FILE: drivers/trace/tracer.c:614:
+^I/* Check whether the event is larger than a buffer */ $

ERROR:SPACING: space required before the open parenthesis '('
#749: FILE: drivers/trace/tracer.c:615:
+	if(pmLen >= TRACE_BUFFER_SIZE(sBufferControl.offset_bits))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: drivers/trace/tracer.c:621:
+^I/* We're already overrun, nothing left to do */  $

ERROR:SPACING: space required before the open parenthesis '('
#756: FILE: drivers/trace/tracer.c:622:
+	if(sBuffersFull == TRUE) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#756: FILE: drivers/trace/tracer.c:622:
+	if(sBuffersFull == TRUE) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#762: FILE: drivers/trace/tracer.c:628:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#765: FILE: drivers/trace/tracer.c:631:
+^I/* If this happens, we've been pushed to the edge of the last $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: drivers/trace/tracer.c:632:
+^I   available buffer which means we need to finalize it and increment $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#766: FILE: drivers/trace/tracer.c:632:
+	/* If this happens, we've been pushed to the edge of the last 
+	   available buffer which means we need to finalize it and increment 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: drivers/trace/tracer.c:633:
+^I   buffers_produced.  However, we don't want to allow $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: drivers/trace/tracer.c:634:
+^I   sBufferControl.index to be actually pushed to full or beyond, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: drivers/trace/tracer.c:637:
+^I   be enough space for this event, but there could be space for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: drivers/trace/tracer.c:638:
+^I   subsequent smaller event(s).  It doesn't matter if they write $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#773: FILE: drivers/trace/tracer.c:639:
+^I   themselves, because here we say that anything after the old_index $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: drivers/trace/tracer.c:640:
+^I   passed in to this function is lost, even if other events have or $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#777: FILE: drivers/trace/tracer.c:643:
+	   buffer is consumed by the daemon. */

ERROR:SPACING: space required before the open parenthesis '('
#778: FILE: drivers/trace/tracer.c:644:
+	if(lBuffersReady == sBufferControl.n_buffers - 1) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#790: FILE: drivers/trace/tracer.c:656:
+		/* Write end event and lost size.  This increases buffer_count
+		   by the lost size, which is important later when we add the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#791: FILE: drivers/trace/tracer.c:657:
+		   deferred size. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#795: FILE: drivers/trace/tracer.c:661:
+		/* We need to add the lost size to old index, but we can't
+		   do it now, or we'd roll index over and allow new events,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#798: FILE: drivers/trace/tracer.c:664:
+		   important later when start logging again. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: drivers/trace/tracer.c:675:
+^Ispin_unlock_irqrestore(&sSpinLock, lFlags);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: drivers/trace/tracer.c:690:
+ *^Ito by pmIndex will contain the index actually reserved by this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#825: FILE: drivers/trace/tracer.c:691:
+ *^Ifunction.  The timestamp reflecting the time the slot was reserved $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: drivers/trace/tracer.c:692:
+ *^Iwill be saved in *pmTimestamp.  The return value indicates whether $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: drivers/trace/tracer.c:694:
+ *^IIf the return value also indicates a discarded event, the values in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: drivers/trace/tracer.c:695:
+ *^I*pmIndex and *pmTimestamp will be indeterminate. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: drivers/trace/tracer.c:697:
+ *^IThe return value contains the result flags and is an ORed combination $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#834: FILE: drivers/trace/tracer.c:700:
+ *^ILTT_BUFFER_SWITCH_NONE - no buffer switch occurred $

CHECK:CAMELCASE: Avoid CamelCase: <lNewIndex>
#845: FILE: drivers/trace/tracer.c:711:
+	u32 lNewIndex, lOffset, lNewBufno;

CHECK:CAMELCASE: Avoid CamelCase: <lOffset>
#845: FILE: drivers/trace/tracer.c:711:
+	u32 lNewIndex, lOffset, lNewBufno;

CHECK:CAMELCASE: Avoid CamelCase: <lNewBufno>
#845: FILE: drivers/trace/tracer.c:711:
+	u32 lNewIndex, lOffset, lNewBufno;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#846: FILE: drivers/trace/tracer.c:712:
+	unsigned long int lFlags; /* CPU flags for lock */

CHECK:CAMELCASE: Avoid CamelCase: <lDiscardEvent>
#851: FILE: drivers/trace/tracer.c:717:
+	int lDiscardEvent;

CHECK:CAMELCASE: Avoid CamelCase: <lBufferSwitched>
#852: FILE: drivers/trace/tracer.c:718:
+	int lBufferSwitched = LTT_BUFFER_SWITCH_NONE;

ERROR:SPACING: space required before the open parenthesis '('
#858: FILE: drivers/trace/tracer.c:724:
+	if(lDiscardEvent != LTT_EVENT_DISCARD_NONE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#865: FILE: drivers/trace/tracer.c:731:
+^I^I/* Yeah, we're re-using a param variable, is that bad form? */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#869: FILE: drivers/trace/tracer.c:735:
+		/* We're here because the event + ending reserve space would
+		   overflow or exactly fill old buffer.  Calculate new index

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#870: FILE: drivers/trace/tracer.c:736:
+		   again. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#876: FILE: drivers/trace/tracer.c:742:
+^I^I/* If we would actually overflow and not exactly fill the old $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: drivers/trace/tracer.c:743:
+^I^I   buffer, we reserve the first slot (after adding a buffer $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#877: FILE: drivers/trace/tracer.c:743:
+		/* If we would actually overflow and not exactly fill the old 
+		   buffer, we reserve the first slot (after adding a buffer 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#878: FILE: drivers/trace/tracer.c:744:
+		   start event) in the new one. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lOffset < pmLen'
#879: FILE: drivers/trace/tracer.c:745:
+		if((lOffset < pmLen) && (lOffset > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lOffset > 0'
#879: FILE: drivers/trace/tracer.c:745:
+		if((lOffset < pmLen) && (lOffset > 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#879: FILE: drivers/trace/tracer.c:745:
+		if((lOffset < pmLen) && (lOffset > 0)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#880: FILE: drivers/trace/tracer.c:746:
+		if((lOffset < pmLen) && (lOffset > 0)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: drivers/trace/tracer.c:747:
+^I^I^I/* This is an overflow, not an exact fit.  The $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#882: FILE: drivers/trace/tracer.c:748:
+			/* This is an overflow, not an exact fit.  The 
+			   reserved index is just after the space reserved for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#883: FILE: drivers/trace/tracer.c:749:
+			   the start event in the new buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#887: FILE: drivers/trace/tracer.c:753:
+^I^I^I/* Now the next free space is at the reserved index $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#888: FILE: drivers/trace/tracer.c:754:
+			/* Now the next free space is at the reserved index 
+			   plus the length of this event. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#888: FILE: drivers/trace/tracer.c:754:
+			   plus the length of this event. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#892: FILE: drivers/trace/tracer.c:758:
+			/* We'll exactly fill the old buffer, so our reserved
+			   index is still in the old buffer and our new index

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#893: FILE: drivers/trace/tracer.c:759:
+			   is in the new one + sStartReserve */

CHECK:BRACES: Unbalanced braces around else statement
#897: FILE: drivers/trace/tracer.c:763:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: drivers/trace/tracer.c:764:
+^I^I^I/* another event has actually pushed us into a new $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#899: FILE: drivers/trace/tracer.c:765:
+^I^I^I   buffer since we were called. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#899: FILE: drivers/trace/tracer.c:765:
+			/* another event has actually pushed us into a new 
+			   buffer since we were called. */ 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#899: FILE: drivers/trace/tracer.c:765:
+			   buffer since we were called. */ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#901: FILE: drivers/trace/tracer.c:767:
+^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: drivers/trace/tracer.c:770:
+^I} while (!compare_and_store_volatile(&sBufferControl.index, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: drivers/trace/tracer.c:774:
+^I   new global buffer control index, finish the buffer switch $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#908: FILE: drivers/trace/tracer.c:774:
+	/* Once we're successful in saving a new_index as the authoritative
+	   new global buffer control index, finish the buffer switch 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#909: FILE: drivers/trace/tracer.c:775:
+	   processing. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#915: FILE: drivers/trace/tracer.c:781:
+	/* At this point, our indices are set in stone, so we can safely
+	   write our start and end events and lost count to our buffers.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#918: FILE: drivers/trace/tracer.c:784:
+	   did the buffer switch already. */

ERROR:SPACING: space required before the open parenthesis '('
#919: FILE: drivers/trace/tracer.c:785:
+	if(lOffset < pmLen) { /* Event caused a buffer switch. */

ERROR:SPACING: space required before the open parenthesis '('
#920: FILE: drivers/trace/tracer.c:786:
+		if(lOffset > 0) /* We didn't exactly fill the old buffer */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#922: FILE: drivers/trace/tracer.c:788:
+			/* Set the size lost value in the old buffer.  That
+			   value is len+sEndReserve-offset-sEndReserve,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#923: FILE: drivers/trace/tracer.c:789:
+			   i.e. sEndReserve cancels itself out. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#926: FILE: drivers/trace/tracer.c:792:
+^I^I^I/* Since we exactly filled the old buffer, the index $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: drivers/trace/tracer.c:793:
+^I^I^I   we write the end event to is after the space $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#927: FILE: drivers/trace/tracer.c:793:
+			/* Since we exactly filled the old buffer, the index 
+			   we write the end event to is after the space 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#928: FILE: drivers/trace/tracer.c:794:
+			   reserved for this event. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#937: FILE: drivers/trace/tracer.c:803:
+^I^I/* If we're here, we had a normal buffer switch and need to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#938: FILE: drivers/trace/tracer.c:804:
+^I^I   update the start buffer time before writing the event.  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#938: FILE: drivers/trace/tracer.c:804:
+		/* If we're here, we had a normal buffer switch and need to 
+		   update the start buffer time before writing the event.  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#939: FILE: drivers/trace/tracer.c:805:
+^I^I   The start buffer time is the same as the event time for the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#940: FILE: drivers/trace/tracer.c:806:
+^I^I   event reserved, and lTimeDelta of 0 but that also appears $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#941: FILE: drivers/trace/tracer.c:807:
+		   to be the case in the locking version as well. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#947: FILE: drivers/trace/tracer.c:813:
+^I^I/* new_index is always valid here, since it's set correctly $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#948: FILE: drivers/trace/tracer.c:814:
+		/* new_index is always valid here, since it's set correctly 
+		   if offset < len + sEndReserve, and we don't get here

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#951: FILE: drivers/trace/tracer.c:817:
+		   sEndReserve bytes. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#954: FILE: drivers/trace/tracer.c:820:
+^I^I/* We initialize the new buffer by subtracting $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: drivers/trace/tracer.c:821:
+^I^I   TRACE_BUFFER_SIZE rather than directly initializing to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#955: FILE: drivers/trace/tracer.c:821:
+		/* We initialize the new buffer by subtracting 
+		   TRACE_BUFFER_SIZE rather than directly initializing to 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#956: FILE: drivers/trace/tracer.c:822:
+^I^I   sStartReserve in case events have been already been added $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#959: FILE: drivers/trace/tracer.c:825:
+		   buffer event we just wrote. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: drivers/trace/tracer.c:830:
+^I^I/* We need to check whether fill_count is less than the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#965: FILE: drivers/trace/tracer.c:831:
+^I^I   sStartReserve.  If this test is true, it means that $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#965: FILE: drivers/trace/tracer.c:831:
+		/* We need to check whether fill_count is less than the 
+		   sStartReserve.  If this test is true, it means that 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: drivers/trace/tracer.c:832:
+^I^I   subtracting the buffer size underflowed fill_count i.e. $

WARNING:REPEATED_WORD: Possible repeated word: 'Any'
#967: FILE: drivers/trace/tracer.c:833:
+		   fill_count represents an incomplete buffer.  Any any case, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#967: FILE: drivers/trace/tracer.c:833:
+^I^I   fill_count represents an incomplete buffer.  Any any case, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: drivers/trace/tracer.c:834:
+^I^I   we're completely fubared and don't have any choice but to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#969: FILE: drivers/trace/tracer.c:835:
+		   start the new buffer out fresh. */

ERROR:SPACING: space required before the open parenthesis '('
#970: FILE: drivers/trace/tracer.c:836:
+		if(atomic_read(&sBufferControl.fill_count[lNewBufno]) < sStartReserve)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#972: FILE: drivers/trace/tracer.c:838:
+^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#976: FILE: drivers/trace/tracer.c:842:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#986: FILE: drivers/trace/tracer.c:852:
+ *^IThis is the fast path for reserving space in the trace buffer in the  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: drivers/trace/tracer.c:853:
+ *^Ilockless tracing scheme.  If a slot was successfully reserved, the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#994: FILE: drivers/trace/tracer.c:860:
+ *^IThe index reflecting the start position of the slot reserved will be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: drivers/trace/tracer.c:864:
+ *^Iindeterminate. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: drivers/trace/tracer.c:866:
+ *^IThe return value contains the result flags and is an ORed combination $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1009: FILE: drivers/trace/tracer.c:875:
+static inline int trace_reserve(u32 pmLen, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1010: FILE: drivers/trace/tracer.c:876:
+^I^I^I^Iu32 *pmIndex, $

CHECK:CAMELCASE: Avoid CamelCase: <lOldIndex>
#1013: FILE: drivers/trace/tracer.c:879:
+	u32 lOldIndex, lNewIndex, lOffset;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1021: FILE: drivers/trace/tracer.c:887:
+		/* If adding len + sEndReserve to the old index doesn't put us
+		   into a new buffer, this is what the new index would be. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1021: FILE: drivers/trace/tracer.c:887:
+		   into a new buffer, this is what the new index would be. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1026: FILE: drivers/trace/tracer.c:892:
+		/* If adding the length reserved for the end buffer event and
+		   lost count to the new index would put us into a new buffer,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1027: FILE: drivers/trace/tracer.c:893:
+^I^I   we need to do a buffer switch.  If in between now and the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1028: FILE: drivers/trace/tracer.c:894:
+^I^I   buffer switch another event that does fit comes in, no $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: drivers/trace/tracer.c:895:
+^I^I   problem because we check again in the slow version.  In $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: drivers/trace/tracer.c:896:
+^I^I   either case, there will always be room for the end event $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1031: FILE: drivers/trace/tracer.c:897:
+^I^I   in the old buffer.  The trick in this test is that adding $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1032: FILE: drivers/trace/tracer.c:898:
+^I^I   a length that would carry into the non-offset bits of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1033: FILE: drivers/trace/tracer.c:899:
+^I^I   index results in the offset portion being smaller than the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1034: FILE: drivers/trace/tracer.c:900:
+		   length that was added. */

ERROR:SPACING: space required before the open parenthesis '('
#1035: FILE: drivers/trace/tracer.c:901:
+		if(lOffset < pmLen)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1036: FILE: drivers/trace/tracer.c:902:
+^I^I^I/* We would roll over into a new buffer, need to do $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1037: FILE: drivers/trace/tracer.c:903:
+			/* We would roll over into a new buffer, need to do 
+			   buffer switch processing. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1037: FILE: drivers/trace/tracer.c:903:
+			   buffer switch processing. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: drivers/trace/tracer.c:908:
+^I} while (!compare_and_store_volatile(&sBufferControl.index, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1046: FILE: drivers/trace/tracer.c:912:
+^I   new global buffer control index, we can return old_index, the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1046: FILE: drivers/trace/tracer.c:912:
+	/* Once we're successful in saving a new_index as the authoritative
+	   new global buffer control index, we can return old_index, the 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1047: FILE: drivers/trace/tracer.c:913:
+	   successfully reserved index. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1049: FILE: drivers/trace/tracer.c:915:
+        /* Return the reserved index value */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1059: FILE: drivers/trace/tracer.c:925:
+ *^I@pmDataSize: total event size $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1065: FILE: drivers/trace/tracer.c:931:
+ *^Ireserves space for an event if possible, writes the event and signals $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1068: FILE: drivers/trace/tracer.c:934:
+int lockless_write_event(u8 pmEventID, $

CHECK:CAMELCASE: Avoid CamelCase: <pmEventID>
#1068: FILE: drivers/trace/tracer.c:934:
+int lockless_write_event(u8 pmEventID, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1069: FILE: drivers/trace/tracer.c:935:
+^I^I^I void *pmEventStruct,^I$

CHECK:CAMELCASE: Avoid CamelCase: <pmEventStruct>
#1069: FILE: drivers/trace/tracer.c:935:
+			 void *pmEventStruct,	

CHECK:CAMELCASE: Avoid CamelCase: <pmDataSize>
#1070: FILE: drivers/trace/tracer.c:936:
+			 uint16_t pmDataSize,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1070: FILE: drivers/trace/tracer.c:936:
+			 uint16_t pmDataSize,

CHECK:CAMELCASE: Avoid CamelCase: <pmCPUID>
#1071: FILE: drivers/trace/tracer.c:937:
+			 u8 pmCPUID,

CHECK:CAMELCASE: Avoid CamelCase: <pmVarDataBeg>
#1072: FILE: drivers/trace/tracer.c:938:
+			 void *pmVarDataBeg,

CHECK:CAMELCASE: Avoid CamelCase: <pmVarDataLen>
#1073: FILE: drivers/trace/tracer.c:939:
+			 int pmVarDataLen)

CHECK:CAMELCASE: Avoid CamelCase: <lReservedIndex>
#1075: FILE: drivers/trace/tracer.c:941:
+	u32 lReservedIndex;

CHECK:CAMELCASE: Avoid CamelCase: <lTime>
#1076: FILE: drivers/trace/tracer.c:942:
+	struct timeval lTime;

CHECK:CAMELCASE: Avoid CamelCase: <lSigInfo>
#1078: FILE: drivers/trace/tracer.c:944:
+	struct siginfo lSigInfo;	/* Signal information */

CHECK:CAMELCASE: Avoid CamelCase: <lReserveRC>
#1079: FILE: drivers/trace/tracer.c:945:
+	int lReserveRC;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1080: FILE: drivers/trace/tracer.c:946:
+^Ichar* lWritPos;^I        ^I/* Current position for writing */$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1080: FILE: drivers/trace/tracer.c:946:
+	char* lWritPos;	        	/* Current position for writing */

CHECK:CAMELCASE: Avoid CamelCase: <lRC>
#1081: FILE: drivers/trace/tracer.c:947:
+	int lRC = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1084: FILE: drivers/trace/tracer.c:950:
+	/* Reserve space for the event.  If the space reserved is in a new
+	   buffer, note that fact. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1084: FILE: drivers/trace/tracer.c:950:
+	   buffer, note that fact. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1085: FILE: drivers/trace/tracer.c:951:
+^IlReserveRC = trace_reserve((u32)pmDataSize, $

ERROR:SPACING: space required before the open parenthesis '('
#1089: FILE: drivers/trace/tracer.c:955:
+	if(lReserveRC & LTT_EVENT_DISCARD)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1093: FILE: drivers/trace/tracer.c:959:
+^Iif((lReserveRC & LTT_BUFFER_SWITCH) && $

ERROR:SPACING: space required before the open parenthesis '('
#1093: FILE: drivers/trace/tracer.c:959:
+	if((lReserveRC & LTT_BUFFER_SWITCH) && 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1098: FILE: drivers/trace/tracer.c:964:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1100: FILE: drivers/trace/tracer.c:966:
+^Iif((lReserveRC & LTT_EVENT_DISCARD) || $

ERROR:SPACING: space required before the open parenthesis '('
#1100: FILE: drivers/trace/tracer.c:966:
+	if((lReserveRC & LTT_EVENT_DISCARD) || 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1106: FILE: drivers/trace/tracer.c:972:
+	/* The position we write to in the trace memory area is simply the
+	   beginning of trace memory plus the index we just reserved. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1106: FILE: drivers/trace/tracer.c:972:
+	   beginning of trace memory plus the index we just reserved. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1108: FILE: drivers/trace/tracer.c:974:
+^I/* Compute the time delta between this event and the time at which $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1109: FILE: drivers/trace/tracer.c:975:
+	/* Compute the time delta between this event and the time at which 
+	   this buffer was started */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1109: FILE: drivers/trace/tracer.c:975:
+	   this buffer was started */

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1114: FILE: drivers/trace/tracer.c:980:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sLogCPUID == TRUE'
#1114: FILE: drivers/trace/tracer.c:980:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_START'
#1114: FILE: drivers/trace/tracer.c:980:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_BUFFER_START'
#1114: FILE: drivers/trace/tracer.c:980:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1114: FILE: drivers/trace/tracer.c:980:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: drivers/trace/tracer.c:1013:
+^I/* We've written the event - update the fill_count for the buffer. */ $

ERROR:SPACING: space required before the open parenthesis '('
#1153: FILE: drivers/trace/tracer.c:1019:
+	if(lReserveRC & LTT_BUFFER_SWITCH) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1159: FILE: drivers/trace/tracer.c:1025:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1161: FILE: drivers/trace/tracer.c:1027:
+		printk("<1> Sending SIGIO to %d \n", sDaemonTaskStruct->pid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1161: FILE: drivers/trace/tracer.c:1027:
+		printk("<1> Sending SIGIO to %d \n", sDaemonTaskStruct->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1165: FILE: drivers/trace/tracer.c:1031:
+^I} $

CHECK:CAMELCASE: Avoid CamelCase: <lDiscardSize>
#1178: FILE: drivers/trace/tracer.c:1044:
+	int lDiscardSize;

CHECK:CAMELCASE: Avoid CamelCase: <lLastEventBufno>
#1179: FILE: drivers/trace/tracer.c:1045:
+	u32 lLastEventBufno;

CHECK:CAMELCASE: Avoid CamelCase: <lLastBufferLostSize>
#1180: FILE: drivers/trace/tracer.c:1046:
+	u32 lLastBufferLostSize;

CHECK:CAMELCASE: Avoid CamelCase: <lLastEventOffset>
#1181: FILE: drivers/trace/tracer.c:1047:
+	u32 lLastEventOffset;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: drivers/trace/tracer.c:1049:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1184: FILE: drivers/trace/tracer.c:1050:
+^I/* A buffer's been consumed, and as we've been waiting around at the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1185: FILE: drivers/trace/tracer.c:1051:
+	/* A buffer's been consumed, and as we've been waiting around at the 
+	   end of the last one produced, the one after that must now be free */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1185: FILE: drivers/trace/tracer.c:1051:
+	   end of the last one produced, the one after that must now be free */

CHECK:CAMELCASE: Avoid CamelCase: <lFreedBufno>
#1186: FILE: drivers/trace/tracer.c:1052:
+	int lFreedBufno = sBufferControl.buffers_produced % sBufferControl.n_buffers;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1191: FILE: drivers/trace/tracer.c:1057:
+^I/* In the all-buffers-full case, sBufferControl.index is frozen at the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1192: FILE: drivers/trace/tracer.c:1058:
+	/* In the all-buffers-full case, sBufferControl.index is frozen at the 
+	   position of the first event that would have caused a buffer switch.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: drivers/trace/tracer.c:1059:
+^I   However, the fill_count for that buffer is not frozen and reflects $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1194: FILE: drivers/trace/tracer.c:1060:
+^I   not only the lost size calculated at that point, but also any $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1195: FILE: drivers/trace/tracer.c:1061:
+^I   smaller events that managed to write themselves at the end of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1196: FILE: drivers/trace/tracer.c:1062:
+^I   last buffer (because there's technically still space at the end, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1197: FILE: drivers/trace/tracer.c:1063:
+^I   though it and all those contained events will be erased here).  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1198: FILE: drivers/trace/tracer.c:1064:
+^I   Here we try to salvage if possible that last buffer, but to do $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1199: FILE: drivers/trace/tracer.c:1065:
+^I   that, we need to subtract those pesky smaller events that managed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1200: FILE: drivers/trace/tracer.c:1066:
+^I   to get in.  If after all that, another small event manages to $

WARNING:REPEATED_WORD: Possible repeated word: 'in'
#1201: FILE: drivers/trace/tracer.c:1067:
+	   sneak in in the time it takes us to do this, well, we concede and 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1201: FILE: drivers/trace/tracer.c:1067:
+^I   sneak in in the time it takes us to do this, well, we concede and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1202: FILE: drivers/trace/tracer.c:1068:
+^I   the daemon will toss that buffer.  It's not the end of the world $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1203: FILE: drivers/trace/tracer.c:1069:
+^I   if that happens, since that buffer actually marked the start of a $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1204: FILE: drivers/trace/tracer.c:1070:
+	   bunch of lost events which continues until a buffer is freed. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1206: FILE: drivers/trace/tracer.c:1072:
+^I/* Get the bufno and offset of the buffer containing the last event $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1207: FILE: drivers/trace/tracer.c:1073:
+	/* Get the bufno and offset of the buffer containing the last event 
+	   logged before we had to stop for a buffer-full condition. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1207: FILE: drivers/trace/tracer.c:1073:
+	   logged before we had to stop for a buffer-full condition. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: drivers/trace/tracer.c:1077:
+^I/* We also need to know the lost size we wrote to that buffer when we $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1212: FILE: drivers/trace/tracer.c:1078:
+	/* We also need to know the lost size we wrote to that buffer when we 
+	   stopped */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1212: FILE: drivers/trace/tracer.c:1078:
+	   stopped */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: drivers/trace/tracer.c:1081:
+^I/* Since the time we stopped, some smaller events probably reserved $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1216: FILE: drivers/trace/tracer.c:1082:
+^I   space and wrote themselves in, the sizes of which would have been $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1216: FILE: drivers/trace/tracer.c:1082:
+	/* Since the time we stopped, some smaller events probably reserved 
+	   space and wrote themselves in, the sizes of which would have been 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1217: FILE: drivers/trace/tracer.c:1083:
+^I   reflected in the fill_count.  The total size of these events is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1218: FILE: drivers/trace/tracer.c:1084:
+^I   calculated here.  */  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1218: FILE: drivers/trace/tracer.c:1084:
+	   calculated here.  */  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1223: FILE: drivers/trace/tracer.c:1089:
+^I/* If there were events written after we stopped, subtract those from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1224: FILE: drivers/trace/tracer.c:1090:
+^I   the fill_count.  If that doesn't fix things, the buffer either is $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1224: FILE: drivers/trace/tracer.c:1090:
+	/* If there were events written after we stopped, subtract those from 
+	   the fill_count.  If that doesn't fix things, the buffer either is 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1225: FILE: drivers/trace/tracer.c:1091:
+^I   really incomplete, or another event snuck in, and we'll just stop $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1226: FILE: drivers/trace/tracer.c:1092:
+	   now and say we did what we could for it. */

ERROR:SPACING: space required before the open parenthesis '('
#1227: FILE: drivers/trace/tracer.c:1093:
+	if(lDiscardSize > 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1231: FILE: drivers/trace/tracer.c:1097:
+	/* Since our end buffer event probably got trounced, rewrite it in old
+	   buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1231: FILE: drivers/trace/tracer.c:1097:
+	   buffer. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: drivers/trace/tracer.c:1100:
+^I/* We also need to update the buffer start time and write the start $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1235: FILE: drivers/trace/tracer.c:1101:
+	/* We also need to update the buffer start time and write the start 
+	   event for the next buffer, since we couldn't do it until now */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1235: FILE: drivers/trace/tracer.c:1101:
+	   event for the next buffer, since we couldn't do it until now */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1238: FILE: drivers/trace/tracer.c:1104:
+^I/* The current buffer control index is hanging around near the end of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1239: FILE: drivers/trace/tracer.c:1105:
+	/* The current buffer control index is hanging around near the end of 
+	   the last buffer.  So we add the buffer size and clear the offset to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1240: FILE: drivers/trace/tracer.c:1106:
+	   get to the beginning of the newly freed buffer. */

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1242: FILE: drivers/trace/tracer.c:1108:
+	lNewIndex = TRACE_BUFFER_OFFSET_CLEAR(lNewIndex, sBufferControl.offset_mask) + sStartReserve;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1246: FILE: drivers/trace/tracer.c:1112:
+	/* Fixing up sBufferControl.index is simpler.  Since a buffer has been
+	   consumed, there's now at least one buffer free, and we can continue.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1247: FILE: drivers/trace/tracer.c:1113:
+^I   We start off the next buffer in a fresh state.  Since nothing else $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1249: FILE: drivers/trace/tracer.c:1115:
+^I   do that here.  'Meaningfully' means that there may be cases of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1250: FILE: drivers/trace/tracer.c:1116:
+^I   smaller events managing to update the index in the last buffer but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1251: FILE: drivers/trace/tracer.c:1117:
+^I   they're essentially erased by the lost size of that buffer when $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1253: FILE: drivers/trace/tracer.c:1119:
+^I   of the next available buffer before turning off sBuffersFull, and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1254: FILE: drivers/trace/tracer.c:1120:
+^I   avoid an erroneous buffer switch.  */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1254: FILE: drivers/trace/tracer.c:1120:
+	   avoid an erroneous buffer switch.  */ 

CHECK:CAMELCASE: Avoid CamelCase: <pmNBuffers>
#1273: FILE: drivers/trace/tracer.c:1139:
+int tracer_set_n_buffers(int pmNBuffers)

ERROR:SPACING: space required before the open parenthesis '('
#1275: FILE: drivers/trace/tracer.c:1141:
+	if(hweight32(pmNBuffers) != 1) /* Invalid if # set bits in word != 1 */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1277: FILE: drivers/trace/tracer.c:1143:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1284: FILE: drivers/trace/tracer.c:1150:
+static void init_buffer_control(struct buffer_control * pmBC,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1291: FILE: drivers/trace/tracer.c:1157:
+}
+static inline void write_start_buffer_event(u32 pmIndex, struct timeval pmTime)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1294: FILE: drivers/trace/tracer.c:1160:
+}
+static inline void finalize_lockless_trace(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1297: FILE: drivers/trace/tracer.c:1163:
+}
+static inline void continue_trace(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1300: FILE: drivers/trace/tracer.c:1166:
+}
+int tracer_set_n_buffers(int pmNBuffers)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: drivers/trace/tracer.c:1177:
+ *^IReturns: $

CHECK:CAMELCASE: Avoid CamelCase: <lVarDataLen>
#1324: FILE: drivers/trace/tracer.c:1190:
+	int lVarDataLen = 0;		/* Length of variable length data to be copied, if any */

WARNING:TYPO_SPELLING: 'Begining' may be misspelled - perhaps 'Beginning'?
#1325: FILE: drivers/trace/tracer.c:1191:
+	void *lVarDataBeg = NULL;	/* Begining of variable length data to be copied */
 	                         	   ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <lVarDataBeg>
#1325: FILE: drivers/trace/tracer.c:1191:
+	void *lVarDataBeg = NULL;	/* Begining of variable length data to be copied */

CHECK:CAMELCASE: Avoid CamelCase: <lSendSignal>
#1326: FILE: drivers/trace/tracer.c:1192:
+	int lSendSignal = FALSE;	/* Should the daemon be summoned */

WARNING:TYPO_SPELLING: 'runing' may be misspelled - perhaps 'running'?
#1327: FILE: drivers/trace/tracer.c:1193:
+	u8 lCPUID;			/* CPUID of currently runing process */
 	          			                      ^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1328: FILE: drivers/trace/tracer.c:1194:
+	uint16_t lDataSize;		/* Size of tracing data */

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1331: FILE: drivers/trace/tracer.c:1197:
+	unsigned long int lFlags;	/* CPU flags for lock */

CHECK:CAMELCASE: Avoid CamelCase: <pIncomingProcess>
#1333: FILE: drivers/trace/tracer.c:1199:
+	struct task_struct *pIncomingProcess = NULL;	/* Pointer to incoming process */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sDaemonTaskStruct"
#1336: FILE: drivers/trace/tracer.c:1202:
+	if (sDaemonTaskStruct == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID == TRACE_EV_PROCESS'
#1340: FILE: drivers/trace/tracer.c:1206:
+	if ((pmEventID == TRACE_EV_PROCESS) &&
+	    (pmEventStruct != NULL) &&
+	    ((((trace_process *) pmEventStruct)->event_sub_id) == TRACE_EV_PROCESS_EXIT))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventStruct != NULL'
#1340: FILE: drivers/trace/tracer.c:1206:
+	if ((pmEventID == TRACE_EV_PROCESS) &&
+	    (pmEventStruct != NULL) &&
+	    ((((trace_process *) pmEventStruct)->event_sub_id) == TRACE_EV_PROCESS_EXIT))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pmEventStruct"
#1341: FILE: drivers/trace/tracer.c:1207:
+	    (pmEventStruct != NULL) &&

CHECK:SPACING: No space is necessary after a cast
#1342: FILE: drivers/trace/tracer.c:1208:
+	    ((((trace_process *) pmEventStruct)->event_sub_id) == TRACE_EV_PROCESS_EXIT))

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1346: FILE: drivers/trace/tracer.c:1212:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracerStarted == TRUE'
#1346: FILE: drivers/trace/tracer.c:1212:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID == TRACE_EV_START'
#1346: FILE: drivers/trace/tracer.c:1212:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID == TRACE_EV_BUFFER_START'
#1346: FILE: drivers/trace/tracer.c:1212:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1346: FILE: drivers/trace/tracer.c:1212:
+	if ((sTracerStarted == TRUE) || (pmEventID == TRACE_EV_START) || (pmEventID == TRACE_EV_BUFFER_START))

CHECK:CAMELCASE: Avoid CamelCase: <TraceEvent>
#1347: FILE: drivers/trace/tracer.c:1213:
+		goto TraceEvent;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_START'
#1357: FILE: drivers/trace/tracer.c:1223:
+	if ((pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_BUFFER_START'
#1357: FILE: drivers/trace/tracer.c:1223:
+	if ((pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1361: FILE: drivers/trace/tracer.c:1227:
+			pIncomingProcess = (struct task_struct *) (((trace_schedchange *) pmEventStruct)->in);

CHECK:SPACING: No space is necessary after a cast
#1361: FILE: drivers/trace/tracer.c:1227:
+			pIncomingProcess = (struct task_struct *) (((trace_schedchange *) pmEventStruct)->in);

CHECK:SPACING: No space is necessary after a cast
#1364: FILE: drivers/trace/tracer.c:1230:
+			(((trace_schedchange *) pmEventStruct)->in) = pIncomingProcess->pid;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPID == TRUE'
#1367: FILE: drivers/trace/tracer.c:1233:
+		if ((sTracingPID == TRUE) && (current->pid != sTracedPID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pid != sTracedPID'
#1367: FILE: drivers/trace/tracer.c:1233:
+		if ((sTracingPID == TRUE) && (current->pid != sTracedPID)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1367: FILE: drivers/trace/tracer.c:1233:
+		if ((sTracingPID == TRUE) && (current->pid != sTracedPID)) {

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1368: FILE: drivers/trace/tracer.c:1234:
+			/* Record this event if it is the scheduling change bringing in the traced PID */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#1369: FILE: drivers/trace/tracer.c:1235:
+			if (pIncomingProcess == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPGRP == TRUE'
#1375: FILE: drivers/trace/tracer.c:1241:
+		if ((sTracingPGRP == TRUE) && (current->pgrp != sTracedPGRP)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->pgrp != sTracedPGRP'
#1375: FILE: drivers/trace/tracer.c:1241:
+		if ((sTracingPGRP == TRUE) && (current->pgrp != sTracedPGRP)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1375: FILE: drivers/trace/tracer.c:1241:
+		if ((sTracingPGRP == TRUE) && (current->pgrp != sTracedPGRP)) {

WARNING:LONG_LINE_COMMENT: line length of 119 exceeds 100 columns
#1376: FILE: drivers/trace/tracer.c:1242:
+			/* Record this event if it is the scheduling change bringing in a process of the traced PGRP */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#1377: FILE: drivers/trace/tracer.c:1243:
+			if (pIncomingProcess == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingGID == TRUE'
#1383: FILE: drivers/trace/tracer.c:1249:
+		if ((sTracingGID == TRUE) && (current->egid != sTracedGID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->egid != sTracedGID'
#1383: FILE: drivers/trace/tracer.c:1249:
+		if ((sTracingGID == TRUE) && (current->egid != sTracedGID)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1383: FILE: drivers/trace/tracer.c:1249:
+		if ((sTracingGID == TRUE) && (current->egid != sTracedGID)) {

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#1384: FILE: drivers/trace/tracer.c:1250:
+			/* Record this event if it is the scheduling change bringing in a process of the traced GID */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#1385: FILE: drivers/trace/tracer.c:1251:
+			if (pIncomingProcess == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingUID == TRUE'
#1391: FILE: drivers/trace/tracer.c:1257:
+		if ((sTracingUID == TRUE) && (current->euid != sTracedUID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != sTracedUID'
#1391: FILE: drivers/trace/tracer.c:1257:
+		if ((sTracingUID == TRUE) && (current->euid != sTracedUID)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1391: FILE: drivers/trace/tracer.c:1257:
+		if ((sTracingUID == TRUE) && (current->euid != sTracedUID)) {

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#1392: FILE: drivers/trace/tracer.c:1258:
+			/* Record this event if it is the scheduling change bringing in a process of the traced UID */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pIncomingProcess"
#1393: FILE: drivers/trace/tracer.c:1259:
+			if (pIncomingProcess == NULL)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1412: FILE: drivers/trace/tracer.c:1278:
+			if ((((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_EXEC)

CHECK:SPACING: No space is necessary after a cast
#1412: FILE: drivers/trace/tracer.c:1278:
+			if ((((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_EXEC)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1413: FILE: drivers/trace/tracer.c:1279:
+			    || (((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_OPEN)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1413: FILE: drivers/trace/tracer.c:1279:
+			if ((((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_EXEC)
+			    || (((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_OPEN)) {

CHECK:SPACING: No space is necessary after a cast
#1413: FILE: drivers/trace/tracer.c:1279:
+			    || (((trace_file_system *) pmEventStruct)->event_sub_id == TRACE_EV_FILE_SYSTEM_OPEN)) {

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1414: FILE: drivers/trace/tracer.c:1280:
+				/* Remember the string's begining and update size variables */
 				                         ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1415: FILE: drivers/trace/tracer.c:1281:
+				lVarDataBeg = ((trace_file_system *) pmEventStruct)->file_name;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1416: FILE: drivers/trace/tracer.c:1282:
+				lVarDataLen = ((trace_file_system *) pmEventStruct)->event_data2 + 1;

CHECK:SPACING: No space is necessary after a cast
#1416: FILE: drivers/trace/tracer.c:1282:
+				lVarDataLen = ((trace_file_system *) pmEventStruct)->event_data2 + 1;

CHECK:SPACING: No space is necessary after a cast
#1417: FILE: drivers/trace/tracer.c:1283:
+				lDataSize += (uint16_t) lVarDataLen;

CHECK:SPACING: No space is necessary after a cast
#1423: FILE: drivers/trace/tracer.c:1289:
+			lVarDataBeg = ((trace_custom *) pmEventStruct)->data;

CHECK:SPACING: No space is necessary after a cast
#1424: FILE: drivers/trace/tracer.c:1290:
+			lVarDataLen = ((trace_custom *) pmEventStruct)->data_size;

CHECK:SPACING: No space is necessary after a cast
#1425: FILE: drivers/trace/tracer.c:1291:
+			lDataSize += (uint16_t) lVarDataLen;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1431: FILE: drivers/trace/tracer.c:1297:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sLogCPUID == TRUE'
#1431: FILE: drivers/trace/tracer.c:1297:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_START'
#1431: FILE: drivers/trace/tracer.c:1297:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_BUFFER_START'
#1431: FILE: drivers/trace/tracer.c:1297:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1431: FILE: drivers/trace/tracer.c:1297:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1442: FILE: drivers/trace/tracer.c:1308:
+^I/* If we're using the lockless scheme, we preempt the default path $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1443: FILE: drivers/trace/tracer.c:1309:
+^I   here - nothing after this point in this function will be executed. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1443: FILE: drivers/trace/tracer.c:1309:
+	/* If we're using the lockless scheme, we preempt the default path 
+	   here - nothing after this point in this function will be executed. 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1444: FILE: drivers/trace/tracer.c:1310:
+^I   Note that even if we do have cmpxchg, we still want to have a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1445: FILE: drivers/trace/tracer.c:1311:
+^I   choice between the lock-free and locking schemes at run-time, thus $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1446: FILE: drivers/trace/tracer.c:1312:
+^I   the using_lockless check.  This used to be implemented as a kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1447: FILE: drivers/trace/tracer.c:1313:
+^I   hook, and will be again when/if kernel hooks are accepted into the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1448: FILE: drivers/trace/tracer.c:1314:
+	   kernel. */

ERROR:SPACING: space required before the open parenthesis '('
#1449: FILE: drivers/trace/tracer.c:1315:
+	if(sBufferControl.using_lockless)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1450: FILE: drivers/trace/tracer.c:1316:
+^I^Ireturn lockless_write_event(pmEventID, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1451: FILE: drivers/trace/tracer.c:1317:
+^I^I^I^I^I    pmEventStruct,^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1463: FILE: drivers/trace/tracer.c:1329:
+	/* The following time calculations have to be done within the spinlock because
+	   otherwise the event order could be inverted. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1463: FILE: drivers/trace/tracer.c:1329:
+	   otherwise the event order could be inverted. */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1468: FILE: drivers/trace/tracer.c:1334:
+	/* Compute the time delta between this event and the time at which this buffer was started */

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1475: FILE: drivers/trace/tracer.c:1341:
+		if (sSignalSent == TRUE) {

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1489: FILE: drivers/trace/tracer.c:1355:
+		/* Recompute the time delta since sBufferStartTime has changed because of the buffer change */

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1494: FILE: drivers/trace/tracer.c:1360:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sLogCPUID == TRUE'
#1494: FILE: drivers/trace/tracer.c:1360:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_START'
#1494: FILE: drivers/trace/tracer.c:1360:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmEventID != TRACE_EV_BUFFER_START'
#1494: FILE: drivers/trace/tracer.c:1360:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1494: FILE: drivers/trace/tracer.c:1360:
+	if ((sLogCPUID == TRUE) && (pmEventID != TRACE_EV_START) && (pmEventID != TRACE_EV_BUFFER_START))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1528: FILE: drivers/trace/tracer.c:1394:
+	if (lSendSignal == TRUE) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1541: FILE: drivers/trace/tracer.c:1407:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1542: FILE: drivers/trace/tracer.c:1408:
+		printk("<1> Sending SIGIO to %d \n", sDaemonTaskStruct->pid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1542: FILE: drivers/trace/tracer.c:1408:
+		printk("<1> Sending SIGIO to %d \n", sDaemonTaskStruct->pid);

CHECK:BRACES: Unbalanced braces around else statement
#1547: FILE: drivers/trace/tracer.c:1413:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <lTempBuf>
#1567: FILE: drivers/trace/tracer.c:1433:
+	char *lTempBuf;			/* Temporary buffer pointer */

CHECK:CAMELCASE: Avoid CamelCase: <lTempBufEnd>
#1568: FILE: drivers/trace/tracer.c:1434:
+	char *lTempBufEnd;		/* Temporary buffer end pointer */

CHECK:CAMELCASE: Avoid CamelCase: <lInitWritPos>
#1569: FILE: drivers/trace/tracer.c:1435:
+	char *lInitWritPos;		/* Initial write position */

WARNING:TYPO_SPELLING: 'runing' may be misspelled - perhaps 'running'?
#1571: FILE: drivers/trace/tracer.c:1437:
+	u8 lCPUID;			/* CPUID of currently runing process */
 	          			                      ^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1572: FILE: drivers/trace/tracer.c:1438:
+	uint16_t lDataSize;		/* Size of tracing data */

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1583: FILE: drivers/trace/tracer.c:1449:
+	if (sLogCPUID == TRUE) {

CHECK:SPACING: No space is necessary after a cast
#1605: FILE: drivers/trace/tracer.c:1471:
+	*((u32 *) (sWritBufEnd - sizeof(lSizeLost))) = lSizeLost;

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1629: FILE: drivers/trace/tracer.c:1495:
+	/* Set the time of begining of this buffer */
 	                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'thes' may be misspelled - perhaps 'this'?
#1684: FILE: drivers/trace/tracer.c:1550:
+ *	server that make thes ioctl.
   	                 ^^^^

CHECK:CAMELCASE: Avoid CamelCase: <pmInode>
#1686: FILE: drivers/trace/tracer.c:1552:
+int tracer_ioctl(struct inode *pmInode,

CHECK:CAMELCASE: Avoid CamelCase: <pmFile>
#1687: FILE: drivers/trace/tracer.c:1553:
+		 struct file *pmFile,

CHECK:CAMELCASE: Avoid CamelCase: <pmCmd>
#1688: FILE: drivers/trace/tracer.c:1554:
+		 unsigned int pmCmd,

CHECK:CAMELCASE: Avoid CamelCase: <pmArg>
#1689: FILE: drivers/trace/tracer.c:1555:
+		 unsigned long pmArg)

CHECK:CAMELCASE: Avoid CamelCase: <lRetValue>
#1691: FILE: drivers/trace/tracer.c:1557:
+	int lRetValue;			/* Function return value */

CHECK:CAMELCASE: Avoid CamelCase: <lDevMinor>
#1692: FILE: drivers/trace/tracer.c:1558:
+	int lDevMinor;			/* Device minor number */

CHECK:CAMELCASE: Avoid CamelCase: <lNewUserEventID>
#1693: FILE: drivers/trace/tracer.c:1559:
+	int lNewUserEventID;		/* ID of newly created user event */

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1694: FILE: drivers/trace/tracer.c:1560:
+	trace_start lStartEvent;	/* Event marking the begining of the trace */
 	                        	                     ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <lStartEvent>
#1694: FILE: drivers/trace/tracer.c:1560:
+	trace_start lStartEvent;	/* Event marking the begining of the trace */

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1695: FILE: drivers/trace/tracer.c:1561:
+	unsigned long int lFlags;	/* CPU flags for lock */

CHECK:CAMELCASE: Avoid CamelCase: <lUserEvent>
#1696: FILE: drivers/trace/tracer.c:1562:
+	trace_custom lUserEvent;	/* The user event to be logged */

CHECK:CAMELCASE: Avoid CamelCase: <lTraceMask>
#1697: FILE: drivers/trace/tracer.c:1563:
+	trace_change_mask lTraceMask;	/* Event mask */

CHECK:CAMELCASE: Avoid CamelCase: <lNewUserEvent>
#1698: FILE: drivers/trace/tracer.c:1564:
+	trace_new_event lNewUserEvent;	/* The event to be created for the user */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor == 0'
#1705: FILE: drivers/trace/tracer.c:1571:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE)
+	    && (pmCmd != TRACER_STOP)
+	    && (pmCmd != TRACER_DATA_COMITTED)
+	    && (pmCmd != TRACER_GET_BUFFER_CONTROL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracerStarted == TRUE'
#1705: FILE: drivers/trace/tracer.c:1571:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE)
+	    && (pmCmd != TRACER_STOP)
+	    && (pmCmd != TRACER_DATA_COMITTED)
+	    && (pmCmd != TRACER_GET_BUFFER_CONTROL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_STOP'
#1705: FILE: drivers/trace/tracer.c:1571:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE)
+	    && (pmCmd != TRACER_STOP)
+	    && (pmCmd != TRACER_DATA_COMITTED)
+	    && (pmCmd != TRACER_GET_BUFFER_CONTROL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_DATA_COMITTED'
#1705: FILE: drivers/trace/tracer.c:1571:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE)
+	    && (pmCmd != TRACER_STOP)
+	    && (pmCmd != TRACER_DATA_COMITTED)
+	    && (pmCmd != TRACER_GET_BUFFER_CONTROL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_GET_BUFFER_CONTROL'
#1705: FILE: drivers/trace/tracer.c:1571:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE)
+	    && (pmCmd != TRACER_STOP)
+	    && (pmCmd != TRACER_DATA_COMITTED)
+	    && (pmCmd != TRACER_GET_BUFFER_CONTROL))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1706: FILE: drivers/trace/tracer.c:1572:
+	if ((lDevMinor == 0)
+	    && (sTracerStarted == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1706: FILE: drivers/trace/tracer.c:1572:
+	    && (sTracerStarted == TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1707: FILE: drivers/trace/tracer.c:1573:
+	    && (sTracerStarted == TRUE)
+	    && (pmCmd != TRACER_STOP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1708: FILE: drivers/trace/tracer.c:1574:
+	    && (pmCmd != TRACER_STOP)
+	    && (pmCmd != TRACER_DATA_COMITTED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1709: FILE: drivers/trace/tracer.c:1575:
+	    && (pmCmd != TRACER_DATA_COMITTED)
+	    && (pmCmd != TRACER_GET_BUFFER_CONTROL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor == 1'
#1713: FILE: drivers/trace/tracer.c:1579:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_CREATE_USER_EVENT'
#1713: FILE: drivers/trace/tracer.c:1579:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_DESTROY_USER_EVENT'
#1713: FILE: drivers/trace/tracer.c:1579:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_TRACE_USER_EVENT'
#1713: FILE: drivers/trace/tracer.c:1579:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_SET_EVENT_MASK'
#1713: FILE: drivers/trace/tracer.c:1579:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmCmd != TRACER_GET_EVENT_MASK'
#1713: FILE: drivers/trace/tracer.c:1579:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1714: FILE: drivers/trace/tracer.c:1580:
+	if ((lDevMinor == 1)
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1715: FILE: drivers/trace/tracer.c:1581:
+	    && (pmCmd != TRACER_CREATE_USER_EVENT)
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1716: FILE: drivers/trace/tracer.c:1582:
+	    && (pmCmd != TRACER_DESTROY_USER_EVENT)
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1717: FILE: drivers/trace/tracer.c:1583:
+	    && (pmCmd != TRACER_TRACE_USER_EVENT)
+	    && (pmCmd != TRACER_SET_EVENT_MASK)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1718: FILE: drivers/trace/tracer.c:1584:
+	    && (pmCmd != TRACER_SET_EVENT_MASK)
+	    && (pmCmd != TRACER_GET_EVENT_MASK))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1719: FILE: drivers/trace/tracer.c:1585:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sUseSyscallEIPBounds == TRUE'
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sSyscallEIPDepthSet == TRUE'
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sUseSyscallEIPBounds == TRUE'
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sLowerEIPBoundSet != TRUE'
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sUpperEIPBoundSet != TRUE'
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPID == TRUE'
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sTracingPGRP == TRUE'
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1732: FILE: drivers/trace/tracer.c:1598:
+		if (((sUseSyscallEIPBounds == TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1733: FILE: drivers/trace/tracer.c:1599:
+		if (((sUseSyscallEIPBounds == TRUE)
+		     && (sSyscallEIPDepthSet == TRUE))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1733: FILE: drivers/trace/tracer.c:1599:
+		     && (sSyscallEIPDepthSet == TRUE))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1734: FILE: drivers/trace/tracer.c:1600:
+		     && (sSyscallEIPDepthSet == TRUE))
+		    || ((sUseSyscallEIPBounds == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1734: FILE: drivers/trace/tracer.c:1600:
+		    || ((sUseSyscallEIPBounds == TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1735: FILE: drivers/trace/tracer.c:1601:
+		    || ((sUseSyscallEIPBounds == TRUE)
+			&& ((sLowerEIPBoundSet != TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1735: FILE: drivers/trace/tracer.c:1601:
+			&& ((sLowerEIPBoundSet != TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1736: FILE: drivers/trace/tracer.c:1602:
+			&& ((sLowerEIPBoundSet != TRUE)
+			    || (sUpperEIPBoundSet != TRUE)))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1736: FILE: drivers/trace/tracer.c:1602:
+			    || (sUpperEIPBoundSet != TRUE)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1737: FILE: drivers/trace/tracer.c:1603:
+			    || (sUpperEIPBoundSet != TRUE)))
+		    || ((sTracingPID == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1737: FILE: drivers/trace/tracer.c:1603:
+		    || ((sTracingPID == TRUE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1738: FILE: drivers/trace/tracer.c:1604:
+		    || ((sTracingPID == TRUE)
+			&& (sTracingPGRP == TRUE)))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1738: FILE: drivers/trace/tracer.c:1604:
+			&& (sTracingPGRP == TRUE)))

CHECK:CAMELCASE: Avoid CamelCase: <MagicNumber>
#1766: FILE: drivers/trace/tracer.c:1632:
+		lStartEvent.MagicNumber = TRACER_MAGIC_NUMBER;

WARNING:TYPO_SPELLING: 'ArchType' may be misspelled - perhaps 'Archetype'?
#1767: FILE: drivers/trace/tracer.c:1633:
+		lStartEvent.ArchType = TRACE_ARCH_TYPE;
 		            ^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <ArchType>
#1767: FILE: drivers/trace/tracer.c:1633:
+		lStartEvent.ArchType = TRACE_ARCH_TYPE;

CHECK:CAMELCASE: Avoid CamelCase: <ArchVariant>
#1768: FILE: drivers/trace/tracer.c:1634:
+		lStartEvent.ArchVariant = TRACE_ARCH_VARIANT;

CHECK:CAMELCASE: Avoid CamelCase: <SystemType>
#1769: FILE: drivers/trace/tracer.c:1635:
+		lStartEvent.SystemType = TRACE_SYS_TYPE_VANILLA_LINUX;

CHECK:CAMELCASE: Avoid CamelCase: <MajorVersion>
#1770: FILE: drivers/trace/tracer.c:1636:
+		lStartEvent.MajorVersion = TRACER_VERSION_MAJOR;

CHECK:CAMELCASE: Avoid CamelCase: <MinorVersion>
#1771: FILE: drivers/trace/tracer.c:1637:
+		lStartEvent.MinorVersion = TRACER_VERSION_MINOR;

CHECK:CAMELCASE: Avoid CamelCase: <BufferSize>
#1772: FILE: drivers/trace/tracer.c:1638:
+		lStartEvent.BufferSize = sBufSize;

CHECK:CAMELCASE: Avoid CamelCase: <EventMask>
#1773: FILE: drivers/trace/tracer.c:1639:
+		lStartEvent.EventMask = sTracedEvents;

CHECK:CAMELCASE: Avoid CamelCase: <DetailsMask>
#1774: FILE: drivers/trace/tracer.c:1640:
+		lStartEvent.DetailsMask = sLogEventDetailsMask;

CHECK:CAMELCASE: Avoid CamelCase: <LogCPUID>
#1775: FILE: drivers/trace/tracer.c:1641:
+		lStartEvent.LogCPUID = sLogCPUID;

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#1777: FILE: drivers/trace/tracer.c:1643:
+		/* Trace the buffer start event using the appropriate method depending on the locking scheme */

ERROR:SPACING: space required before the open parenthesis '('
#1778: FILE: drivers/trace/tracer.c:1644:
+		if(sBufferControl.using_lockless == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1778: FILE: drivers/trace/tracer.c:1644:
+		if(sBufferControl.using_lockless == TRUE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1801: FILE: drivers/trace/tracer.c:1667:
+ ^I^I/* We don't log new events, but old lockless ones can finish */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1801: FILE: drivers/trace/tracer.c:1667:
+ ^I^I/* We don't log new events, but old lockless ones can finish */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1801: FILE: drivers/trace/tracer.c:1667:
+ ^I^I/* We don't log new events, but old lockless ones can finish */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1808: FILE: drivers/trace/tracer.c:1674:
+ ^I^I/* Make sure the last buffer touched is finalized */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1808: FILE: drivers/trace/tracer.c:1674:
+ ^I^I/* Make sure the last buffer touched is finalized */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1808: FILE: drivers/trace/tracer.c:1674:
+ ^I^I/* Make sure the last buffer touched is finalized */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1809: FILE: drivers/trace/tracer.c:1675:
+ ^I^Iif(sBufferControl.using_lockless) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1809: FILE: drivers/trace/tracer.c:1675:
+ ^I^Iif(sBufferControl.using_lockless) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1809: FILE: drivers/trace/tracer.c:1675:
+ ^I^Iif(sBufferControl.using_lockless) {$

ERROR:SPACING: space required before the open parenthesis '('
#1809: FILE: drivers/trace/tracer.c:1675:
+ 		if(sBufferControl.using_lockless) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1810: FILE: drivers/trace/tracer.c:1676:
+ ^I^I^I/* Write end buffer event as last event in old buf. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1810: FILE: drivers/trace/tracer.c:1676:
+ ^I^I^I/* Write end buffer event as last event in old buf. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1810: FILE: drivers/trace/tracer.c:1676:
+ ^I^I^I/* Write end buffer event as last event in old buf. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1811: FILE: drivers/trace/tracer.c:1677:
+ ^I^I^Ifinalize_lockless_trace();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1811: FILE: drivers/trace/tracer.c:1677:
+ ^I^I^Ifinalize_lockless_trace();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1811: FILE: drivers/trace/tracer.c:1677:
+ ^I^I^Ifinalize_lockless_trace();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1812: FILE: drivers/trace/tracer.c:1678:
+ ^I^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1812: FILE: drivers/trace/tracer.c:1678:
+ ^I^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1812: FILE: drivers/trace/tracer.c:1678:
+ ^I^I^Ibreak;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1813: FILE: drivers/trace/tracer.c:1679:
+ ^I^I} /* Else locking scheme */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1813: FILE: drivers/trace/tracer.c:1679:
+ ^I^I} /* Else locking scheme */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1813: FILE: drivers/trace/tracer.c:1679:
+ ^I^I} /* Else locking scheme */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1816: FILE: drivers/trace/tracer.c:1682:
+		/* Acquire the lock to avoid SMP case of where another CPU is writing a trace
+		   while buffer is being switched */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1816: FILE: drivers/trace/tracer.c:1682:
+		   while buffer is being switched */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1819: FILE: drivers/trace/tracer.c:1685:
+		/* Switch the buffers to ensure that the end of the buffer mark is set (time isn't important) */

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1834: FILE: drivers/trace/tracer.c:1700:
+		if (sUseLocking == TRUE) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1838: FILE: drivers/trace/tracer.c:1704:
+^I^I^Iif ((pmArg < TRACER_LOCKLESS_MIN_BUF_SIZE) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmArg < TRACER_LOCKLESS_MIN_BUF_SIZE'
#1838: FILE: drivers/trace/tracer.c:1704:
+			if ((pmArg < TRACER_LOCKLESS_MIN_BUF_SIZE) || 
+			    (pmArg > TRACER_LOCKLESS_MAX_BUF_SIZE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmArg > TRACER_LOCKLESS_MAX_BUF_SIZE'
#1838: FILE: drivers/trace/tracer.c:1704:
+			if ((pmArg < TRACER_LOCKLESS_MIN_BUF_SIZE) || 
+			    (pmArg > TRACER_LOCKLESS_MAX_BUF_SIZE))

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1845: FILE: drivers/trace/tracer.c:1711:
+		return tracer_set_buffer_size(pmArg);
+		break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1850: FILE: drivers/trace/tracer.c:1716:
+^I^Iif ((sUseLocking == TRUE) || (pmArg < TRACER_MIN_BUFFERS) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sUseLocking == TRUE'
#1850: FILE: drivers/trace/tracer.c:1716:
+		if ((sUseLocking == TRUE) || (pmArg < TRACER_MIN_BUFFERS) || 
+		    (pmArg > TRACER_MAX_BUFFERS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmArg < TRACER_MIN_BUFFERS'
#1850: FILE: drivers/trace/tracer.c:1716:
+		if ((sUseLocking == TRUE) || (pmArg < TRACER_MIN_BUFFERS) || 
+		    (pmArg > TRACER_MAX_BUFFERS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pmArg > TRACER_MAX_BUFFERS'
#1850: FILE: drivers/trace/tracer.c:1716:
+		if ((sUseLocking == TRUE) || (pmArg < TRACER_MIN_BUFFERS) || 
+		    (pmArg > TRACER_MAX_BUFFERS))

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#1850: FILE: drivers/trace/tracer.c:1716:
+		if ((sUseLocking == TRUE) || (pmArg < TRACER_MIN_BUFFERS) || 

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1856: FILE: drivers/trace/tracer.c:1722:
+		return tracer_set_n_buffers(pmArg);
+		break;

ERROR:SPACING: space required before the open parenthesis '('
#1863: FILE: drivers/trace/tracer.c:1729:
+		if(sUseLocking == FALSE) /* Trying to use lock-free scheme */

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#1863: FILE: drivers/trace/tracer.c:1729:
+		if(sUseLocking == FALSE) /* Trying to use lock-free scheme */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1864: FILE: drivers/trace/tracer.c:1730:
+                        /* Lock-free scheme not supported on this platform */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1865: FILE: drivers/trace/tracer.c:1731:
+^I^I^Ireturn -EINVAL; $

CHECK:SPACING: No space is necessary after a cast
#1871: FILE: drivers/trace/tracer.c:1737:
+		if (copy_from_user(&sTracedEvents, (void *) pmArg, sizeof(sTracedEvents)))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1877: FILE: drivers/trace/tracer.c:1743:
+		if (copy_from_user(&sLogEventDetailsMask, (void *) pmArg, sizeof(sLogEventDetailsMask)))

CHECK:SPACING: No space is necessary after a cast
#1877: FILE: drivers/trace/tracer.c:1743:
+		if (copy_from_user(&sLogEventDetailsMask, (void *) pmArg, sizeof(sLogEventDetailsMask)))

CHECK:SPACING: No space is necessary after a cast
#1922: FILE: drivers/trace/tracer.c:1788:
+		sLowerEIPBound = (void *) pmArg;

CHECK:SPACING: No space is necessary after a cast
#1934: FILE: drivers/trace/tracer.c:1800:
+		sUpperEIPBound = (void *) pmArg;

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#1940: FILE: drivers/trace/tracer.c:1806:
+	/* The daemon has comitted the last trace */
 	                  ^^^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1942: FILE: drivers/trace/tracer.c:1808:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1944: FILE: drivers/trace/tracer.c:1810:
+		printk("Tracer: Data has been committed \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1944: FILE: drivers/trace/tracer.c:1810:
+		printk("Tracer: Data has been committed \n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1947: FILE: drivers/trace/tracer.c:1813:
+^I^I/* The lockless version doesn't use sSignalSent.  pmArg is the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1948: FILE: drivers/trace/tracer.c:1814:
+		/* The lockless version doesn't use sSignalSent.  pmArg is the 
+		   number of buffers the daemon has told us it just consumed.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1949: FILE: drivers/trace/tracer.c:1815:
+		   Add that to the global count. */

ERROR:SPACING: space required before the open parenthesis '('
#1950: FILE: drivers/trace/tracer.c:1816:
+		if(sBufferControl.using_lockless) {

ERROR:SPACING: space required before the open parenthesis '('
#1958: FILE: drivers/trace/tracer.c:1824:
+			if(sBuffersFull && ((u32)pmArg > 0))

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1975: FILE: drivers/trace/tracer.c:1841:
+		return sEventsLost;
+		break;

CHECK:SPACING: No space is necessary after a cast
#1980: FILE: drivers/trace/tracer.c:1846:
+		if (copy_from_user(&lNewUserEvent, (void *) pmArg, sizeof(lNewUserEvent)))

WARNING:TYPO_SPELLING: 'succeded' may be misspelled - perhaps 'succeeded'?
#1990: FILE: drivers/trace/tracer.c:1856:
+		/* Has the operation succeded */
 		                     ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#1996: FILE: drivers/trace/tracer.c:1862:
+			if (copy_to_user((void *) pmArg, &lNewUserEvent, sizeof(lNewUserEvent))) {

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1997: FILE: drivers/trace/tracer.c:1863:
+				/* Since we were unable to tell the user about the event, destroy it */

CHECK:BRACES: Unbalanced braces around else statement
#2001: FILE: drivers/trace/tracer.c:1867:
+		} else

CHECK:SPACING: No space is necessary after a cast
#2009: FILE: drivers/trace/tracer.c:1875:
+		trace_destroy_event((int) pmArg);

CHECK:SPACING: No space is necessary after a cast
#2015: FILE: drivers/trace/tracer.c:1881:
+		if (copy_from_user(&lUserEvent, (void *) pmArg, sizeof(lUserEvent)))

CHECK:SPACING: No space is necessary after a cast
#2036: FILE: drivers/trace/tracer.c:1902:
+		if (copy_from_user(&(lTraceMask.mask), (void *) pmArg, sizeof(lTraceMask.mask)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lTraceMask.mask
#2036: FILE: drivers/trace/tracer.c:1902:
+		if (copy_from_user(&(lTraceMask.mask), (void *) pmArg, sizeof(lTraceMask.mask)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2043: FILE: drivers/trace/tracer.c:1909:
+		/* Change the event mask. (This has to be done second or else may loose the
+		   information if the user decides to stop logging "change mask" events) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2043: FILE: drivers/trace/tracer.c:1909:
+		   information if the user decides to stop logging "change mask" events) */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lTraceMask.mask
#2044: FILE: drivers/trace/tracer.c:1910:
+		memcpy(&sTracedEvents, &(lTraceMask.mask), sizeof(lTraceMask.mask));

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#2055: FILE: drivers/trace/tracer.c:1921:
+		return lRetValue;
+		break;

CHECK:SPACING: No space is necessary after a cast
#2060: FILE: drivers/trace/tracer.c:1926:
+		if (copy_to_user((void *) pmArg, &sTracedEvents, sizeof(sTracedEvents)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2066: FILE: drivers/trace/tracer.c:1932:
+^I^I/* We can't copy_to_user() with a lock held (accessing user $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2067: FILE: drivers/trace/tracer.c:1933:
+		/* We can't copy_to_user() with a lock held (accessing user 
+		   memory may cause a page fault),  so buffers_produced may

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2071: FILE: drivers/trace/tracer.c:1937:
+^I^I   time it's signaled. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2071: FILE: drivers/trace/tracer.c:1937:
+		   time it's signaled. */ 

CHECK:SPACING: No space is necessary after a cast
#2073: FILE: drivers/trace/tracer.c:1939:
+		if(copy_to_user((void *) pmArg, &sBufferControl, sizeof(sBufferControl)))

ERROR:SPACING: space required before the open parenthesis '('
#2073: FILE: drivers/trace/tracer.c:1939:
+		if(copy_to_user((void *) pmArg, &sBufferControl, sizeof(sBufferControl)))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2079: FILE: drivers/trace/tracer.c:1945:
+		return -ENOSYS;

CHECK:CAMELCASE: Avoid CamelCase: <pmVmArea>
#2097: FILE: drivers/trace/tracer.c:1963:
+		struct vm_area_struct *pmVmArea)

CHECK:SPACING: No space is necessary after a cast
#2107: FILE: drivers/trace/tracer.c:1973:
+				       (char *) pmVmArea->vm_start,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2111: FILE: drivers/trace/tracer.c:1977:
+#if 0

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2112: FILE: drivers/trace/tracer.c:1978:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

CHECK:SPACING: No space is necessary after a cast
#2112: FILE: drivers/trace/tracer.c:1978:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2112: FILE: drivers/trace/tracer.c:1978:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2112: FILE: drivers/trace/tracer.c:1978:
+	printk("Tracer: Trace buffer virtual address                  => 0x%08X \n", (u32) sTracBuf);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#2113: FILE: drivers/trace/tracer.c:1979:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

CHECK:SPACING: No space is necessary after a cast
#2113: FILE: drivers/trace/tracer.c:1979:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2113: FILE: drivers/trace/tracer.c:1979:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2113: FILE: drivers/trace/tracer.c:1979:
+	printk("Tracer: Trace buffer physical address                 => 0x%08X \n", (u32) virt_to_phys(sTracBuf));

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#2114: FILE: drivers/trace/tracer.c:1980:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

CHECK:SPACING: No space is necessary after a cast
#2114: FILE: drivers/trace/tracer.c:1980:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2114: FILE: drivers/trace/tracer.c:1980:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2114: FILE: drivers/trace/tracer.c:1980:
+	printk("Tracer: Trace buffer virtual address in daemon space  => 0x%08X \n", (u32) pmVmArea->vm_start);

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#2115: FILE: drivers/trace/tracer.c:1981:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

CHECK:SPACING: No space is necessary after a cast
#2115: FILE: drivers/trace/tracer.c:1981:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2115: FILE: drivers/trace/tracer.c:1981:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2115: FILE: drivers/trace/tracer.c:1981:
+	printk("Tracer: Trace buffer physical address in daemon space => 0x%08X \n", (u32) virt_to_phys((void *) pmVmArea->vm_start));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor > 0'
#2137: FILE: drivers/trace/tracer.c:2003:
+	if ((lDevMinor > 0) && (lDevMinor != 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lDevMinor != 1'
#2137: FILE: drivers/trace/tracer.c:2003:
+	if ((lDevMinor > 0) && (lDevMinor != 1))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2145: FILE: drivers/trace/tracer.c:2011:
+			return -EBUSY;
+		else

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#2146: FILE: drivers/trace/tracer.c:2012:
+			/* Only increment use, this is just another user process trying to log user events */

CHECK:CAMELCASE: Avoid CamelCase: <IncrementUse>
#2147: FILE: drivers/trace/tracer.c:2013:
+			goto IncrementUse;

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#2152: FILE: drivers/trace/tracer.c:2018:
+	/* Reset the default configuration since this is the daemon and he will complete the setup */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2155: FILE: drivers/trace/tracer.c:2021:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2157: FILE: drivers/trace/tracer.c:2023:
+	printk("<1>Process %d opened the tracing device \n", sDaemonTaskStruct->pid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2157: FILE: drivers/trace/tracer.c:2023:
+	printk("<1>Process %d opened the tracing device \n", sDaemonTaskStruct->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2177: FILE: drivers/trace/tracer.c:2043:
+ *^IReturns: $

CHECK:CAMELCASE: Avoid CamelCase: <lCount>
#2190: FILE: drivers/trace/tracer.c:2056:
+	int lCount;

CHECK:CAMELCASE: Avoid CamelCase: <DecrementUse>
#2195: FILE: drivers/trace/tracer.c:2061:
+		goto DecrementUse;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#2199: FILE: drivers/trace/tracer.c:2065:
+		printk(KERN_ALERT "Tracer: Lost %d events \n", sEventsLost);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2199: FILE: drivers/trace/tracer.c:2065:
+		printk(KERN_ALERT "Tracer: Lost %d events \n", sEventsLost);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2205: FILE: drivers/trace/tracer.c:2071:
+	/* Free the current buffers, if any, but only if they're not still
+	   in use */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2205: FILE: drivers/trace/tracer.c:2071:
+	   in use */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sTracBuf"
#2206: FILE: drivers/trace/tracer.c:2072:
+	if (sTracBuf != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#2208: FILE: drivers/trace/tracer.c:2074:
+		if(lCount == 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2208: FILE: drivers/trace/tracer.c:2074:
+		if(lCount == 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2210: FILE: drivers/trace/tracer.c:2076:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2211: FILE: drivers/trace/tracer.c:2077:
+			printk(KERN_ERR "Tracer: Couldn't release tracer - %d event writes pending \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2211: FILE: drivers/trace/tracer.c:2077:
+			printk(KERN_ERR "Tracer: Couldn't release tracer - %d event writes pending \n",

CHECK:CAMELCASE: Avoid CamelCase: <pmDEntry>
#2266: FILE: drivers/trace/tracer.c:2132:
+		 struct dentry *pmDEntry,

CHECK:CAMELCASE: Avoid CamelCase: <pmDataSync>
#2267: FILE: drivers/trace/tracer.c:2133:
+		 int pmDataSync)

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#2269: FILE: drivers/trace/tracer.c:2135:
+	unsigned long int lFlags;

CHECK:CAMELCASE: Avoid CamelCase: <pmSize>
#2308: FILE: drivers/trace/tracer.c:2174:
+int tracer_set_buffer_size(int pmSize)

CHECK:CAMELCASE: Avoid CamelCase: <lSizeAlloc>
#2310: FILE: drivers/trace/tracer.c:2176:
+	int lSizeAlloc;

CHECK:CAMELCASE: Avoid CamelCase: <lNBuffers>
#2311: FILE: drivers/trace/tracer.c:2177:
+	int lNBuffers = TRACE_MAX_BUFFER_NUMBER(sBufnoBits);

ERROR:SPACING: space required before the open parenthesis '('
#2313: FILE: drivers/trace/tracer.c:2179:
+	if(sUseLocking == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#2313: FILE: drivers/trace/tracer.c:2179:
+	if(sUseLocking == TRUE)

CHECK:BRACES: Unbalanced braces around else statement
#2316: FILE: drivers/trace/tracer.c:2182:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#2318: FILE: drivers/trace/tracer.c:2184:
+		if(hweight32(pmSize) != 1)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2321: FILE: drivers/trace/tracer.c:2187:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2328: FILE: drivers/trace/tracer.c:2194:
+^I^I/* Sanity check */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2329: FILE: drivers/trace/tracer.c:2195:
+^I^Iif(lSizeAlloc > TRACER_LOCKLESS_MAX_TOTAL_BUF_SIZE) $

ERROR:SPACING: space required before the open parenthesis '('
#2329: FILE: drivers/trace/tracer.c:2195:
+		if(lSizeAlloc > TRACER_LOCKLESS_MAX_TOTAL_BUF_SIZE) 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sTracBuf"
#2334: FILE: drivers/trace/tracer.c:2200:
+	if (sTracBuf != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#2335: FILE: drivers/trace/tracer.c:2201:
+		if(trace_get_pending_write_count() == 0)

CHECK:SPACING: No space is necessary after a cast
#2342: FILE: drivers/trace/tracer.c:2208:
+	if ((sTracBuf = (char *) rvmalloc(lSizeAlloc)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2342: FILE: drivers/trace/tracer.c:2208:
+	if ((sTracBuf = (char *) rvmalloc(lSizeAlloc)) == NULL)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2345: FILE: drivers/trace/tracer.c:2211:
+#if 0 /* DEBUG - init all of buffer with easy-to-spot default values */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2348: FILE: drivers/trace/tracer.c:2214:
+		int i;
+		for(i=0; i<lSizeAlloc; i+=4)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2348: FILE: drivers/trace/tracer.c:2214:
+		for(i=0; i<lSizeAlloc; i+=4)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2348: FILE: drivers/trace/tracer.c:2214:
+		for(i=0; i<lSizeAlloc; i+=4)
 		          ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#2348: FILE: drivers/trace/tracer.c:2214:
+		for(i=0; i<lSizeAlloc; i+=4)
 		                        ^

ERROR:SPACING: space required before the open parenthesis '('
#2348: FILE: drivers/trace/tracer.c:2214:
+		for(i=0; i<lSizeAlloc; i+=4)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2349: FILE: drivers/trace/tracer.c:2215:
+			*((u32 *)(sTracBuf+i)) = 0xcafebabe;
 			                  ^

CHECK:CAMELCASE: Avoid CamelCase: <lError>
#2387: FILE: drivers/trace/tracer.c:2253:
+	int lError = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2443: FILE: drivers/trace/tracer.c:2309:
+	if ((lError = tracer_set_default_config()) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2467: FILE: drivers/trace/tracer.c:2333:
+	if ((sUserEventData = vmalloc(CUSTOM_EVENT_MAX_SIZE)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2480: FILE: drivers/trace/tracer.c:2346:
+	if ((lError = register_tracer(trace)) < 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2480: FILE: drivers/trace/tracer.c:2346:
+	if ((lError = register_tracer(trace)) < 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#2482: FILE: drivers/trace/tracer.c:2348:
+		printk(KERN_ALERT "Tracer: Unable to register tracer with kernel, tracer disabled \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2482: FILE: drivers/trace/tracer.c:2348:
+		printk(KERN_ALERT "Tracer: Unable to register tracer with kernel, tracer disabled \n");

CHECK:BRACES: Unbalanced braces around else statement
#2486: FILE: drivers/trace/tracer.c:2352:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2487: FILE: drivers/trace/tracer.c:2353:
+		printk(KERN_INFO "Tracer: Initialization complete \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2487: FILE: drivers/trace/tracer.c:2353:
+		printk(KERN_INFO "Tracer: Initialization complete \n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sTracBuf"
#2516: FILE: drivers/trace/tracer.c:2382:
+	if (sTracBuf != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#2518: FILE: drivers/trace/tracer.c:2384:
+		if(lCount == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2521: FILE: drivers/trace/tracer.c:2387:
+			printk(KERN_ERR "Tracer: Couldn't exit tracer - %d event writes pending \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2521: FILE: drivers/trace/tracer.c:2387:
+			printk(KERN_ERR "Tracer: Couldn't exit tracer - %d event writes pending \n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2522: FILE: drivers/trace/tracer.c:2388:
+^I^I^I       lCount);^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#2526: FILE: drivers/trace/tracer.c:2392:
+	if(trace_get_pending_write_count() == 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2537: FILE: drivers/trace/tracer.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2538: FILE: drivers/trace/tracer.h:2:
+ * drivers/trace/tracer.h

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2558: FILE: drivers/trace/tracer.h:22:
+#define LTT_PACKED_STRUCT __attribute__ ((packed));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2558: FILE: drivers/trace/tracer.h:22:
+#define LTT_PACKED_STRUCT __attribute__ ((packed));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2558: FILE: drivers/trace/tracer.h:22:
+#define LTT_PACKED_STRUCT __attribute__ ((packed));

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#2576: FILE: drivers/trace/tracer.h:40:
+#define TRACER_FIRST_EVENT_SIZE   (sizeof(u8) + sizeof(trace_time_delta) + sizeof(trace_buffer_start) + sizeof(uint16_t))

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#2585: FILE: drivers/trace/tracer.h:49:
+#define TRACER_MAGIC_NUMBER     0x00D6B7ED	/* That day marks an important historical event ... */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2588: FILE: drivers/trace/tracer.h:52:
+typedef struct _trace_start {

WARNING:TYPO_SPELLING: 'ArchType' may be misspelled - perhaps 'Archetype'?
#2590: FILE: drivers/trace/tracer.h:54:
+	u32 ArchType;		/* Type of architecture */
 	    ^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2603: FILE: drivers/trace/tracer.h:67:
+typedef struct _trace_buffer_start {

WARNING:LONG_LINE_COMMENT: line length of 130 exceeds 100 columns
#2609: FILE: drivers/trace/tracer.h:73:
+#define TRACER_START                      TRACER_MAGIC_NUMBER + 0	/* Start tracing events using the current configuration */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2609: FILE: drivers/trace/tracer.h:73:
+#define TRACER_START                      TRACER_MAGIC_NUMBER + 0	/* Start tracing events using the current configuration */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2610: FILE: drivers/trace/tracer.h:74:
+#define TRACER_STOP                       TRACER_MAGIC_NUMBER + 1	/* Stop tracing */

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#2611: FILE: drivers/trace/tracer.h:75:
+#define TRACER_CONFIG_DEFAULT             TRACER_MAGIC_NUMBER + 2	/* Set the tracer to the default configuration */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2611: FILE: drivers/trace/tracer.h:75:
+#define TRACER_CONFIG_DEFAULT             TRACER_MAGIC_NUMBER + 2	/* Set the tracer to the default configuration */

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#2612: FILE: drivers/trace/tracer.h:76:
+#define TRACER_CONFIG_MEMORY_BUFFERS      TRACER_MAGIC_NUMBER + 3	/* Set the memory buffers the daemon wants us to use */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2612: FILE: drivers/trace/tracer.h:76:
+#define TRACER_CONFIG_MEMORY_BUFFERS      TRACER_MAGIC_NUMBER + 3	/* Set the memory buffers the daemon wants us to use */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2613: FILE: drivers/trace/tracer.h:77:
+#define TRACER_CONFIG_EVENTS              TRACER_MAGIC_NUMBER + 4	/* Trace the given events */

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#2614: FILE: drivers/trace/tracer.h:78:
+#define TRACER_CONFIG_DETAILS             TRACER_MAGIC_NUMBER + 5	/* Record the details of the event, or not */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2614: FILE: drivers/trace/tracer.h:78:
+#define TRACER_CONFIG_DETAILS             TRACER_MAGIC_NUMBER + 5	/* Record the details of the event, or not */

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#2615: FILE: drivers/trace/tracer.h:79:
+#define TRACER_CONFIG_CPUID               TRACER_MAGIC_NUMBER + 6	/* Record the CPUID associated with the event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2615: FILE: drivers/trace/tracer.h:79:
+#define TRACER_CONFIG_CPUID               TRACER_MAGIC_NUMBER + 6	/* Record the CPUID associated with the event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2616: FILE: drivers/trace/tracer.h:80:
+#define TRACER_CONFIG_PID                 TRACER_MAGIC_NUMBER + 7	/* Trace only one process */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#2617: FILE: drivers/trace/tracer.h:81:
+#define TRACER_CONFIG_PGRP                TRACER_MAGIC_NUMBER + 8	/* Trace only the given process group */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2617: FILE: drivers/trace/tracer.h:81:
+#define TRACER_CONFIG_PGRP                TRACER_MAGIC_NUMBER + 8	/* Trace only the given process group */

WARNING:LONG_LINE_COMMENT: line length of 123 exceeds 100 columns
#2618: FILE: drivers/trace/tracer.h:82:
+#define TRACER_CONFIG_GID                 TRACER_MAGIC_NUMBER + 9	/* Trace the processes of a given group of users */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2618: FILE: drivers/trace/tracer.h:82:
+#define TRACER_CONFIG_GID                 TRACER_MAGIC_NUMBER + 9	/* Trace the processes of a given group of users */

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#2619: FILE: drivers/trace/tracer.h:83:
+#define TRACER_CONFIG_UID                 TRACER_MAGIC_NUMBER + 10	/* Trace the processes of a given user */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2619: FILE: drivers/trace/tracer.h:83:
+#define TRACER_CONFIG_UID                 TRACER_MAGIC_NUMBER + 10	/* Trace the processes of a given user */

WARNING:LONG_LINE_COMMENT: line length of 142 exceeds 100 columns
#2620: FILE: drivers/trace/tracer.h:84:
+#define TRACER_CONFIG_SYSCALL_EIP_DEPTH   TRACER_MAGIC_NUMBER + 11	/* Set the call depth at which the EIP should be fetched on syscall */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2620: FILE: drivers/trace/tracer.h:84:
+#define TRACER_CONFIG_SYSCALL_EIP_DEPTH   TRACER_MAGIC_NUMBER + 11	/* Set the call depth at which the EIP should be fetched on syscall */

WARNING:LONG_LINE_COMMENT: line length of 142 exceeds 100 columns
#2621: FILE: drivers/trace/tracer.h:85:
+#define TRACER_CONFIG_SYSCALL_EIP_LOWER   TRACER_MAGIC_NUMBER + 12	/* Set the lowerbound address from which EIP is recorded on syscall */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2621: FILE: drivers/trace/tracer.h:85:
+#define TRACER_CONFIG_SYSCALL_EIP_LOWER   TRACER_MAGIC_NUMBER + 12	/* Set the lowerbound address from which EIP is recorded on syscall */

WARNING:LONG_LINE_COMMENT: line length of 142 exceeds 100 columns
#2622: FILE: drivers/trace/tracer.h:86:
+#define TRACER_CONFIG_SYSCALL_EIP_UPPER   TRACER_MAGIC_NUMBER + 13	/* Set the upperbound address from which EIP is recorded on syscall */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2622: FILE: drivers/trace/tracer.h:86:
+#define TRACER_CONFIG_SYSCALL_EIP_UPPER   TRACER_MAGIC_NUMBER + 13	/* Set the upperbound address from which EIP is recorded on syscall */

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#2623: FILE: drivers/trace/tracer.h:87:
+#define TRACER_DATA_COMITTED              TRACER_MAGIC_NUMBER + 14	/* The daemon has comitted the last trace */
                                                                   	                  ^^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#2623: FILE: drivers/trace/tracer.h:87:
+#define TRACER_DATA_COMITTED              TRACER_MAGIC_NUMBER + 14	/* The daemon has comitted the last trace */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2623: FILE: drivers/trace/tracer.h:87:
+#define TRACER_DATA_COMITTED              TRACER_MAGIC_NUMBER + 14	/* The daemon has comitted the last trace */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#2624: FILE: drivers/trace/tracer.h:88:
+#define TRACER_GET_EVENTS_LOST            TRACER_MAGIC_NUMBER + 15	/* Get the number of events lost */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2624: FILE: drivers/trace/tracer.h:88:
+#define TRACER_GET_EVENTS_LOST            TRACER_MAGIC_NUMBER + 15	/* Get the number of events lost */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#2625: FILE: drivers/trace/tracer.h:89:
+#define TRACER_CREATE_USER_EVENT          TRACER_MAGIC_NUMBER + 16	/* Create a user tracable event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2625: FILE: drivers/trace/tracer.h:89:
+#define TRACER_CREATE_USER_EVENT          TRACER_MAGIC_NUMBER + 16	/* Create a user tracable event */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#2626: FILE: drivers/trace/tracer.h:90:
+#define TRACER_DESTROY_USER_EVENT         TRACER_MAGIC_NUMBER + 17	/* Destroy a user tracable event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2626: FILE: drivers/trace/tracer.h:90:
+#define TRACER_DESTROY_USER_EVENT         TRACER_MAGIC_NUMBER + 17	/* Destroy a user tracable event */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2627: FILE: drivers/trace/tracer.h:91:
+#define TRACER_TRACE_USER_EVENT           TRACER_MAGIC_NUMBER + 18	/* Trace a user event */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#2628: FILE: drivers/trace/tracer.h:92:
+#define TRACER_SET_EVENT_MASK             TRACER_MAGIC_NUMBER + 19	/* Set the trace event mask */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2628: FILE: drivers/trace/tracer.h:92:
+#define TRACER_SET_EVENT_MASK             TRACER_MAGIC_NUMBER + 19	/* Set the trace event mask */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#2629: FILE: drivers/trace/tracer.h:93:
+#define TRACER_GET_EVENT_MASK             TRACER_MAGIC_NUMBER + 20	/* Get the trace event mask */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2629: FILE: drivers/trace/tracer.h:93:
+#define TRACER_GET_EVENT_MASK             TRACER_MAGIC_NUMBER + 20	/* Get the trace event mask */

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#2630: FILE: drivers/trace/tracer.h:94:
+#define TRACER_GET_BUFFER_CONTROL         TRACER_MAGIC_NUMBER + 21	/* Get the buffer control data for the lockless schem*/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2630: FILE: drivers/trace/tracer.h:94:
+#define TRACER_GET_BUFFER_CONTROL         TRACER_MAGIC_NUMBER + 21	/* Get the buffer control data for the lockless schem*/

WARNING:LONG_LINE_COMMENT: line length of 137 exceeds 100 columns
#2631: FILE: drivers/trace/tracer.h:95:
+#define TRACER_CONFIG_N_MEMORY_BUFFERS    TRACER_MAGIC_NUMBER + 22	/* Set the number of memory buffers the daemon wants us to use */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2631: FILE: drivers/trace/tracer.h:95:
+#define TRACER_CONFIG_N_MEMORY_BUFFERS    TRACER_MAGIC_NUMBER + 22	/* Set the number of memory buffers the daemon wants us to use */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#2632: FILE: drivers/trace/tracer.h:96:
+#define TRACER_CONFIG_USE_LOCKING         TRACER_MAGIC_NUMBER + 23      /* Set the locking scheme to use */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2632: FILE: drivers/trace/tracer.h:96:
+#define TRACER_CONFIG_USE_LOCKING         TRACER_MAGIC_NUMBER + 23      /* Set the locking scheme to use */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2635: FILE: drivers/trace/tracer.h:99:
+/* For the lockless scheme:
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2636: FILE: drivers/trace/tracer.h:100:
+   A trace index is composed of two parts, a buffer number and a buffer $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2637: FILE: drivers/trace/tracer.h:101:
+   offset.  The actual number of buffers allocated is a run-time decision, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2638: FILE: drivers/trace/tracer.h:102:
+   although it must be a power of two for efficient computation.  We define $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2639: FILE: drivers/trace/tracer.h:103:
+   a maximum number of bits for the buffer number, because the fill_count $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2640: FILE: drivers/trace/tracer.h:104:
+   array in buffer_control must have a fixed size.  offset_bits must be at $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2642: FILE: drivers/trace/tracer.h:106:
+   lost size word (since a buffer must be able to hold an event of maximum $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2643: FILE: drivers/trace/tracer.h:107:
+   size).  Making offset_bits larger reduces fragmentation.  Making it $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2644: FILE: drivers/trace/tracer.h:108:
+   smaller increases trace responsiveness. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2647: FILE: drivers/trace/tracer.h:111:
+/* We need at least enough room for the max custom event, and we also need
+   room for the start and end event.  We also need it to be a power of 2. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2647: FILE: drivers/trace/tracer.h:111:
+   room for the start and end event.  We also need it to be a power of 2. */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2648: FILE: drivers/trace/tracer.h:112:
+#define TRACER_LOCKLESS_MIN_BUF_SIZE CUSTOM_EVENT_MAX_SIZE + 8192 /* 16K */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2650: FILE: drivers/trace/tracer.h:114:
+/* Because we use atomic_t as the type for fill_counts, which has only 24
+   usable bits, we have 2**24 = 16M max for each buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2650: FILE: drivers/trace/tracer.h:114:
+   usable bits, we have 2**24 = 16M max for each buffer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2653: FILE: drivers/trace/tracer.h:117:
+/* Since we multiply n buffers by the buffer size, this provides a sanity
+   check, much less than the 256*16M possible. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2653: FILE: drivers/trace/tracer.h:117:
+   check, much less than the 256*16M possible. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2672: FILE: drivers/trace/tracer.h:136:
+   for lock-free tracing.  This is a per-buffer (CPU, etc.) data structure. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2672: FILE: drivers/trace/tracer.h:136:
+/* Structure used for communicating buffer info between tracer and daemon
+   for lock-free tracing.  This is a per-buffer (CPU, etc.) data structure. */ 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2672: FILE: drivers/trace/tracer.h:136:
+   for lock-free tracing.  This is a per-buffer (CPU, etc.) data structure. */ 

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2674: FILE: drivers/trace/tracer.h:138:
+struct buffer_control
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2691: FILE: drivers/trace/tracer.h:155:
+/* If cmpxchg isn't defined for the architecture, we don't want to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2692: FILE: drivers/trace/tracer.h:156:
+   generate a link error - the locking scheme will still be available. */  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2692: FILE: drivers/trace/tracer.h:156:
+/* If cmpxchg isn't defined for the architecture, we don't want to 
+   generate a link error - the locking scheme will still be available. */  

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2692: FILE: drivers/trace/tracer.h:156:
+   generate a link error - the locking scheme will still be available. */  

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2694: FILE: drivers/trace/tracer.h:158:
+#define cmpxchg(p,o,n) 0
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2694: FILE: drivers/trace/tracer.h:158:
+#define cmpxchg(p,o,n) 0
                    ^

WARNING:INLINE: plain inline is preferred over __inline__
#2697: FILE: drivers/trace/tracer.h:161:
+extern __inline__ int ltt_set_bit(int nr, void *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#2710: FILE: drivers/trace/tracer.h:174:
+extern __inline__ int ltt_clear_bit(int nr, void *addr)

WARNING:INLINE: plain inline is preferred over __inline__
#2723: FILE: drivers/trace/tracer.h:187:
+extern __inline__ int ltt_test_bit(int nr, void *addr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2735: FILE: drivers/trace/tracer.h:199:
+ (u8,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2736: FILE: drivers/trace/tracer.h:200:
+  void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timeval' should also have an identifier name
#2737: FILE: drivers/trace/tracer.h:201:
+void tracer_switch_buffers

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2738: FILE: drivers/trace/tracer.h:202:
+ (struct timeval);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2739: FILE: drivers/trace/tracer.h:203:
+int tracer_ioctl

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2739: FILE: drivers/trace/tracer.h:203:
+int tracer_ioctl

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2739: FILE: drivers/trace/tracer.h:203:
+int tracer_ioctl

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2739: FILE: drivers/trace/tracer.h:203:
+int tracer_ioctl

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2740: FILE: drivers/trace/tracer.h:204:
+ (struct inode *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2741: FILE: drivers/trace/tracer.h:205:
+  struct file *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2742: FILE: drivers/trace/tracer.h:206:
+  unsigned int,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2743: FILE: drivers/trace/tracer.h:207:
+  unsigned long);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2744: FILE: drivers/trace/tracer.h:208:
+int tracer_mmap

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#2744: FILE: drivers/trace/tracer.h:208:
+int tracer_mmap

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2745: FILE: drivers/trace/tracer.h:209:
+ (struct file *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2746: FILE: drivers/trace/tracer.h:210:
+  struct vm_area_struct *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2747: FILE: drivers/trace/tracer.h:211:
+int tracer_open

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2747: FILE: drivers/trace/tracer.h:211:
+int tracer_open

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2748: FILE: drivers/trace/tracer.h:212:
+ (struct inode *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2749: FILE: drivers/trace/tracer.h:213:
+  struct file *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2750: FILE: drivers/trace/tracer.h:214:
+int tracer_release

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2750: FILE: drivers/trace/tracer.h:214:
+int tracer_release

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2751: FILE: drivers/trace/tracer.h:215:
+ (struct inode *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2752: FILE: drivers/trace/tracer.h:216:
+  struct file *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2753: FILE: drivers/trace/tracer.h:217:
+int tracer_fsync

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#2753: FILE: drivers/trace/tracer.h:217:
+int tracer_fsync

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2753: FILE: drivers/trace/tracer.h:217:
+int tracer_fsync

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2754: FILE: drivers/trace/tracer.h:218:
+ (struct file *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2755: FILE: drivers/trace/tracer.h:219:
+  struct dentry *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2756: FILE: drivers/trace/tracer.h:220:
+  int);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2759: FILE: drivers/trace/tracer.h:223:
+ (void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2762: FILE: drivers/trace/tracer.h:226:
+ (int);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2763: FILE: drivers/trace/tracer.h:227:
+int tracer_set_n_buffers

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2764: FILE: drivers/trace/tracer.h:228:
+ (int);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2766: FILE: drivers/trace/tracer.h:230:
+ (void);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2768: FILE: drivers/trace/tracer.h:232:
+ (void);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 295 errors, 315 warnings, 304 checks, 2710 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
