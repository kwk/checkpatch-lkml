WARNING:TYPO_SPELLING: 'cummulative' may be misspelled - perhaps 'cumulative'?
#32: 
patches which are cummulative against 2.4.4:
                  ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#85: FILE: mm/shmem.c:286:
+static struct page * shmem_getpage_locked(struct shmem_inode_info *info, struct inode * inode, unsigned long idx)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: mm/shmem.c:286:
+static struct page * shmem_getpage_locked(struct shmem_inode_info *info, struct inode * inode, unsigned long idx)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: mm/shmem.c:286:
+static struct page * shmem_getpage_locked(struct shmem_inode_info *info, struct inode * inode, unsigned long idx)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: mm/shmem.c:411:
+	down (&info->sem);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: mm/shmem.c:412:
+^I/* retest we may have slept */  ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: mm/shmem.c:412:
+^I/* retest we may have slept */  ^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#127: FILE: mm/shmem.c:423:
+	up (&info->sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#131: FILE: mm/shmem.c:426:
+	up (&info->sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: mm/shmem.c:525:
+		spin_lock_init (&info->lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#162: FILE: mm/shmem.c:526:
+		sema_init (&info->sem, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: mm/shmem.c:633:
+		down (&info->sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#182: FILE: mm/shmem.c:635:
+		up (&info->sem);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: include/linux/shmem_fs.h:22:
+^Istruct semaphore ^Isem;$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#240: FILE: include/linux/shmem_fs.h:40:
+#define SHMEM_I(inode)  (&inode->u.shmem_i)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#260: FILE: ipc/shm.c:366:
+		spin_lock (&info->lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#265: FILE: ipc/shm.c:369:
+		spin_unlock (&info->lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: mm/shmem.c:162:
+	struct shmem_inode_info * info = SHMEM_I(inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: mm/shmem.c:209:
+	list_del (&SHMEM_I(inode)->list);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#331: FILE: mm/shmem.c:465:
+	struct shmem_inode_info * info = SHMEM_I(inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: mm/shmem.c:546:
+		list_add (&SHMEM_I(inode)->list, &shmem_inodes);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#370: FILE: mm/shmem.c:663:
+				info->max_index = index+1;
 				                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: mm/shmem.c:1224:
+static int shmem_unuse_inode (struct shmem_inode_info *info, swp_entry_t entry, struct page *page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: mm/shmem.c:1264:
+	struct shmem_inode_info * info;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: mm/shmem.c:208:
+^Iif (inode->i_op->truncate == shmem_truncate){ $

ERROR:SPACING: space required before the open brace '{'
#448: FILE: mm/shmem.c:208:
+	if (inode->i_op->truncate == shmem_truncate){ 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#449: FILE: mm/shmem.c:209:
+		spin_lock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#450: FILE: mm/shmem.c:210:
+		list_del (&SHMEM_I(inode)->list);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#451: FILE: mm/shmem.c:211:
+		spin_unlock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#461: FILE: mm/shmem.c:536:
+			spin_lock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#462: FILE: mm/shmem.c:537:
+			list_add (&SHMEM_I(inode)->list, &shmem_inodes);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#463: FILE: mm/shmem.c:538:
+			spin_unlock (&shmem_ilock);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#483: FILE: mm/shmem.c:554:
+static struct inode_operations shmem_symlink_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#484: FILE: mm/shmem.c:555:
+static struct inode_operations shmem_symlink_inline_operations;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: mm/shmem.c:937:
+	struct shmem_inode_info * info;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#524: FILE: mm/shmem.c:955:
+		spin_lock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#525: FILE: mm/shmem.c:956:
+		list_add (&info->list, &shmem_inodes);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#526: FILE: mm/shmem.c:957:
+		spin_unlock (&shmem_ilock);

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#537: FILE: mm/shmem.c:968:
+		UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: mm/shmem.c:979:
+	return vfs_readlink(dentry,buffer,buflen, (const char *)SHMEM_I(dentry->d_inode));
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: mm/shmem.c:979:
+	return vfs_readlink(dentry,buffer,buflen, (const char *)SHMEM_I(dentry->d_inode));
 	                                 ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#554: FILE: mm/shmem.c:982:
+static int shmem_follow_link_inline(struct dentry *dentry, struct nameidata *nd)
                                                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#556: FILE: mm/shmem.c:984:
+	return vfs_follow_link(nd, (const char *)SHMEM_I(dentry->d_inode));
 	                       ^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#564: FILE: mm/shmem.c:1014:
+static struct inode_operations shmem_symlink_inline_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#565: FILE: mm/shmem.c:1015:
+	readlink:	shmem_readlink_inline,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#566: FILE: mm/shmem.c:1016:
+	follow_link:	shmem_follow_link_inline,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#566: FILE: mm/shmem.c:1016:
+	follow_link:	shmem_follow_link_inline,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#569: FILE: mm/shmem.c:1019:
+static struct inode_operations shmem_symlink_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#570: FILE: mm/shmem.c:1020:
+	truncate:	shmem_truncate,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#571: FILE: mm/shmem.c:1021:
+	readlink:	shmem_readlink,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#571: FILE: mm/shmem.c:1021:
+	readlink:	shmem_readlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#572: FILE: mm/shmem.c:1022:
+	follow_link:	shmem_follow_link,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#572: FILE: mm/shmem.c:1022:
+	follow_link:	shmem_follow_link,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536224.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 36 warnings, 3 checks, 477 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000536224.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
