WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#73: FILE: kernel/kallsyms.c:25:
+extern u8 kallsyms_names[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#73: FILE: kernel/kallsyms.c:25:
+extern u8 kallsyms_names[] __attribute__((weak));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#75: FILE: kernel/kallsyms.c:27:
+extern u8 kallsyms_token_table[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#75: FILE: kernel/kallsyms.c:27:
+extern u8 kallsyms_token_table[] __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#76: FILE: kernel/kallsyms.c:28:
+extern u16 kallsyms_token_index[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: kernel/kallsyms.c:28:
+extern u16 kallsyms_token_index[] __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#78: FILE: kernel/kallsyms.c:30:
+extern unsigned long kallsyms_markers[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#78: FILE: kernel/kallsyms.c:30:
+extern unsigned long kallsyms_markers[] __attribute__((weak));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#87: FILE: kernel/kallsyms.c:51:
+/* expand a compressed symbol data into the resulting uncompressed string,
+   given the offset to where the symbol is in the compressed stream */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#87: FILE: kernel/kallsyms.c:51:
+   given the offset to where the symbol is in the compressed stream */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#99: FILE: kernel/kallsyms.c:63:
+	 * the compressed stream */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: kernel/kallsyms.c:67:
+	/* for every byte on the compressed symbol data, copy the table
+	   entry for that byte */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#103: FILE: kernel/kallsyms.c:67:
+	   entry for that byte */

ERROR:SPACING: space required before the open parenthesis '('
#104: FILE: kernel/kallsyms.c:68:
+	while(len) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open square bracket '['
#105: FILE: kernel/kallsyms.c:69:
+		tptr = &kallsyms_token_table[ kallsyms_token_index[*data] ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#105: FILE: kernel/kallsyms.c:69:
+		tptr = &kallsyms_token_table[ kallsyms_token_index[*data] ];

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: kernel/kallsyms.c:74:
+			if(skipped_first) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#110: FILE: kernel/kallsyms.c:74:
+			if(skipped_first) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#113: FILE: kernel/kallsyms.c:77:
+			} else

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#126: FILE: kernel/kallsyms.c:90:
+ * begining of the symbol name */
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: kernel/kallsyms.c:90:
+ * begining of the symbol name */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#130: FILE: kernel/kallsyms.c:94:
+	 * first char from this token */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#131: FILE: kernel/kallsyms.c:95:
+	return kallsyms_token_table[ kallsyms_token_index[ kallsyms_names[off+1] ] ];
 	                                                                     ^

ERROR:SPACING: space prohibited after that open square bracket '['
#131: FILE: kernel/kallsyms.c:95:
+	return kallsyms_token_table[ kallsyms_token_index[ kallsyms_names[off+1] ] ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#131: FILE: kernel/kallsyms.c:95:
+	return kallsyms_token_table[ kallsyms_token_index[ kallsyms_names[off+1] ] ];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: kernel/kallsyms.c:98:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#136: FILE: kernel/kallsyms.c:100:
+ * kallsyms array */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#143: FILE: kernel/kallsyms.c:107:
+	 * so that should be close enough */

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#144: FILE: kernel/kallsyms.c:108:
+	name = &kallsyms_names[ kallsyms_markers[pos>>8] ];
 	                                            ^

ERROR:SPACING: space prohibited after that open square bracket '['
#144: FILE: kernel/kallsyms.c:108:
+	name = &kallsyms_names[ kallsyms_markers[pos>>8] ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#144: FILE: kernel/kallsyms.c:108:
+	name = &kallsyms_names[ kallsyms_markers[pos>>8] ];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#149: FILE: kernel/kallsyms.c:113:
+	 * wish to skip */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#150: FILE: kernel/kallsyms.c:114:
+	for(i = 0; i < (pos&0xFF); i++)
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#150: FILE: kernel/kallsyms.c:114:
+	for(i = 0; i < (pos&0xFF); i++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#192: FILE: kernel/kallsyms.c:151:
+		unsigned long symbol_end=0;
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#203: FILE: kernel/kallsyms.c:157:
+		while (high-low > 1) {
 		           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#205: FILE: kernel/kallsyms.c:159:
+			if (kallsyms_addresses[mid] <= addr) low = mid;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#206: FILE: kernel/kallsyms.c:160:
+			else high = mid;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: kernel/kallsyms.c:164:
+		/* search for the first aliased symbol. Aliased symbols are
+		   symbols with the same address */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#216: FILE: kernel/kallsyms.c:164:
+		   symbols with the same address */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#268: FILE: kernel/kallsyms.c:253:
+	unsigned off = iter->nameoff;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#333: FILE: kernel/kallsyms.c:342:
+	 * using get_symbol_offset for every symbol */

WARNING:TYPO_SPELLING: 'decompresion' may be misspelled - perhaps 'decompression'?
#369: FILE: scripts/kallsyms.c:21:
+ *  decompresion can work without "special cases".
     ^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#381: FILE: scripts/kallsyms.c:33:
+ * very long substrings probably don't repeat themselves too often. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#386: FILE: scripts/kallsyms.c:38:
+ * to speed up compression, at the expense of a little compression ratio */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#393: FILE: scripts/kallsyms.c:45:
+ * search the bad list. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#398: FILE: scripts/kallsyms.c:50:
+#define HASH_TABLE_SIZE		(1 << HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#401: FILE: scripts/kallsyms.c:53:
+#define HASH_FOLD(a)		((a)&(HASH_MASK))
                     		    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#425: FILE: scripts/kallsyms.c:77:
+	 * token into the table */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#437: FILE: scripts/kallsyms.c:89:
+unsigned char best_table[256][MAX_TOK_SIZE+1];
                                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: scripts/kallsyms.c:92:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: scripts/kallsyms.c:128:
+	 * compressed together */

CHECK:SPACING: No space is necessary after a cast
#452: FILE: scripts/kallsyms.c:130:
+	s->sym = (char *) malloc(s->len + 1);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#467: FILE: scripts/kallsyms.c:145:
+	static char *special_symbols[] = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#482: FILE: scripts/kallsyms.c:160:
+	 * and inittext sections are discarded */

ERROR:SPACING: space prohibited after that open parenthesis '('
#507: FILE: scripts/kallsyms.c:172:
+		if( strcmp(s->sym + 1, special_symbols[i]) == 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#507: FILE: scripts/kallsyms.c:172:
+		if( strcmp(s->sym + 1, special_symbols[i]) == 0 )

ERROR:SPACING: space required before the open parenthesis '('
#507: FILE: scripts/kallsyms.c:172:
+		if( strcmp(s->sym + 1, special_symbols[i]) == 0 )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#518: FILE: scripts/kallsyms.c:197:
+	printf(".globl %s\n",label);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#520: FILE: scripts/kallsyms.c:199:
+	printf("%s:\n",label);
 	              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#524: FILE: scripts/kallsyms.c:203:
+ * might still be compressed itself, so the function needs to be recursive */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#527: FILE: scripts/kallsyms.c:206:
+	int c, rlen, total=0;
 	                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#532: FILE: scripts/kallsyms.c:211:
+		 * we are looking for, then end the search */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#533: FILE: scripts/kallsyms.c:212:
+		if (best_table[c][0]==c && best_table_len[c]==1) {
 		                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#533: FILE: scripts/kallsyms.c:212:
+		if (best_table[c][0]==c && best_table_len[c]==1) {
 		                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#545: FILE: scripts/kallsyms.c:224:
+	*result=0;
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#558: FILE: scripts/kallsyms.c:235:
+	char buf[KSYM_NAME_LEN+1];
 	                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#596: FILE: scripts/kallsyms.c:263:
+	 * every 256 symbols */

CHECK:SPACING: No space is necessary after a cast
#597: FILE: scripts/kallsyms.c:264:
+	markers = (unsigned int *) malloc(sizeof(unsigned int)*((valid + 255) / 256));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#597: FILE: scripts/kallsyms.c:264:
+	markers = (unsigned int *) malloc(sizeof(unsigned int)*((valid + 255) / 256));
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#637: FILE: scripts/kallsyms.c:298:
+		expand_symbol(best_table[i],best_table_len[i],buf);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#637: FILE: scripts/kallsyms.c:298:
+		expand_symbol(best_table[i],best_table_len[i],buf);
 		                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: scripts/kallsyms.c:310:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#659: FILE: scripts/kallsyms.c:320:
+	unsigned int hash=HASH_BASE_OFFSET;
 	                 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr->len == len'
#676: FILE: scripts/kallsyms.c:337:
+		if ((ptr->len == len) && (memcmp(ptr->data, data, len) == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#678: FILE: scripts/kallsyms.c:339:
+		ptr=ptr->next;
 		   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#698: FILE: scripts/kallsyms.c:359:
+
+

WARNING:TYPO_SPELLING: 'lenghts' may be misspelled - perhaps 'lengths'?
#699: FILE: scripts/kallsyms.c:360:
+/* build the counts for all the tokens that start with "data", and have lenghts
                                                                         ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#700: FILE: scripts/kallsyms.c:361:
+ * from 2 to "len" */

ERROR:SPACING: space required after that ',' (ctx:VxO)
#703: FILE: scripts/kallsyms.c:364:
+	struct token *ptr,*last_ptr;
 	                 ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#703: FILE: scripts/kallsyms.c:364:
+	struct token *ptr,*last_ptr;
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#714: FILE: scripts/kallsyms.c:375:
+		hash = rehash_token(hash, data[i-1]);
 		                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#724: FILE: scripts/kallsyms.c:385:
+		if (!ptr) ptr = find_token_hash(data, i, hash);

CHECK:SPACING: No space is necessary after a cast
#728: FILE: scripts/kallsyms.c:389:
+			ptr = (struct token *) malloc(sizeof(*ptr));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#737: FILE: scripts/kallsyms.c:398:
+			 * the good or bad list, is a comparison to zero */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#749: FILE: scripts/kallsyms.c:410:
+			 * different list */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr->profit < 0'
#750: FILE: scripts/kallsyms.c:411:
+			if((ptr->profit < 0) && (newprofit >= 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newprofit >= 0'
#750: FILE: scripts/kallsyms.c:411:
+			if((ptr->profit < 0) && (newprofit >= 0)) {

ERROR:SPACING: space required before the open parenthesis '('
#750: FILE: scripts/kallsyms.c:411:
+			if((ptr->profit < 0) && (newprofit >= 0)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#752: FILE: scripts/kallsyms.c:413:
+				insert_token_in_group(&good_head,ptr);
 				                                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#757: FILE: scripts/kallsyms.c:418:
+		if (last_ptr) last_ptr->smaller = ptr;

WARNING:TYPO_SPELLING: 'lenghts' may be misspelled - perhaps 'lengths'?
#764: FILE: scripts/kallsyms.c:425:
+/* decrease the counts for all the tokens that start with "data", and have lenghts
                                                                            ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#767: FILE: scripts/kallsyms.c:428:
+ * The two separate functions exist only because of compression performance */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#772: FILE: scripts/kallsyms.c:433:
+	unsigned int hash=0;
 	                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#774: FILE: scripts/kallsyms.c:435:
+	if (len > MAX_TOK_SIZE) len = MAX_TOK_SIZE;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#780: FILE: scripts/kallsyms.c:441:
+	for (i = len; i >= 2; i--) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr->profit >= 0'
#782: FILE: scripts/kallsyms.c:443:
+		if ((ptr->profit >= 0) && (newprofit < 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newprofit < 0'
#782: FILE: scripts/kallsyms.c:443:
+		if ((ptr->profit >= 0) && (newprofit < 0)) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#786: FILE: scripts/kallsyms.c:447:
+		ptr->profit=newprofit;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#788: FILE: scripts/kallsyms.c:449:
+		ptr=ptr->smaller;
 		   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#818: FILE: scripts/kallsyms.c:479:
+		if ( symbol_valid(&table[i]) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#818: FILE: scripts/kallsyms.c:479:
+		if ( symbol_valid(&table[i]) ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#826: FILE: scripts/kallsyms.c:487:
+	for (i = 0; i < cnt; i++) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#829: FILE: scripts/kallsyms.c:490:
+		 * across the symbol table */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#831: FILE: scripts/kallsyms.c:492:
+		if (table[i].flags & SYM_FLAG_VALID) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#845: FILE: scripts/kallsyms.c:506:
+ * to update the counts */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#852: FILE: scripts/kallsyms.c:513:
+	for (i = 0; i < cnt; i++) {
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#853: FILE: scripts/kallsyms.c:514:
+		if (!(table[i].flags & SYM_FLAG_VALID)) continue;

CHECK:SPACING: No space is necessary after a cast
#861: FILE: scripts/kallsyms.c:522:
+			p = (unsigned char *) strstr((char *) p, (char *) str);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#862: FILE: scripts/kallsyms.c:523:
+			if (!p) break;

ERROR:SPACING: space required before the open parenthesis '('
#879: FILE: scripts/kallsyms.c:540:
+		if(learn) {

ERROR:SPACING: space required before the open parenthesis '('
#882: FILE: scripts/kallsyms.c:543:
+			if(table[i].flags & SYM_FLAG_SAMPLED)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#891: FILE: scripts/kallsyms.c:552:
+	struct token *ptr,*best,*head;
 	                 ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#891: FILE: scripts/kallsyms.c:552:
+	struct token *ptr,*best,*head;
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#891: FILE: scripts/kallsyms.c:552:
+	struct token *ptr,*best,*head;
 	                       ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#891: FILE: scripts/kallsyms.c:552:
+	struct token *ptr,*best,*head;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#894: FILE: scripts/kallsyms.c:555:
+	bestprofit=-10000;
 	          ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#894: FILE: scripts/kallsyms.c:555:
+	bestprofit=-10000;
 	           ^

ERROR:SPACING: space required before the open parenthesis '('
#897: FILE: scripts/kallsyms.c:558:
+	if(good_head.right == &good_head) head = &bad_head;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#897: FILE: scripts/kallsyms.c:558:
+	if(good_head.right == &good_head) head = &bad_head;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#898: FILE: scripts/kallsyms.c:559:
+	else head = &good_head;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#920: FILE: scripts/kallsyms.c:581:
+	 * fast string functions */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#922: FILE: scripts/kallsyms.c:583:
+	for (i = 255; i >= 0; i--) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#924: FILE: scripts/kallsyms.c:585:
+		 * original char code */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#926: FILE: scripts/kallsyms.c:587:
+		if (!best_table_len[i]) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#934: FILE: scripts/kallsyms.c:595:
+			/* zero terminate the token so that we can use strstr
+			   in compress_symbols */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#934: FILE: scripts/kallsyms.c:595:
+			   in compress_symbols */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#935: FILE: scripts/kallsyms.c:596:
+			best_table[i][best_table_len[i]]='\0';
 			                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#955: FILE: scripts/kallsyms.c:616:
+				best_table[c][0]=c;
 				                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#956: FILE: scripts/kallsyms.c:617:
+				best_table_len[c]=1;
 				                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#979: FILE: scripts/kallsyms.c:640:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237870.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 46 warnings, 32 checks, 917 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237870.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
