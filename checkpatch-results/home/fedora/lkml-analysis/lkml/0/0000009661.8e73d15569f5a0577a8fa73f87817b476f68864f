CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: arch/s390/kernel/compat_signal.c:302:
+	regs32.psw.mask = PSW32_MASK_MERGE(psw32_user_bits,
  					   (__u32)(regs->psw.mask >> 32));

CHECK:SPACING: No space is necessary after a cast
#285: FILE: arch/s390/kernel/ptrace.c:476:
+				PSW_MASK_MERGE(psw_user32_bits, (__u64) tmp << 32);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/compat.h> instead of <asm/compat.h>
#296: FILE: arch/s390/kernel/setup.c:52:
+#include <asm/compat.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#311: FILE: arch/s390/kernel/setup.c:397:
+unsigned int switch_amode = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#332: FILE: arch/s390/kernel/setup.c:418:
+		printk("mvcos available.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#335: FILE: arch/s390/kernel/setup.c:421:
+		printk("mvcos not available.\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#348: FILE: arch/s390/kernel/setup.c:434:
+}
+early_param("switch_amode", early_parse_switch_amode);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#358: FILE: arch/s390/kernel/setup.c:444:
+unsigned int s390_noexec = 0;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#372: FILE: arch/s390/kernel/setup.c:458:
+}
+early_param("noexec", early_parse_noexec);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#378: FILE: arch/s390/kernel/setup.c:464:
+		printk("S390 execute protection active, ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#383: FILE: arch/s390/kernel/setup.c:469:
+		printk("S390 address spaces switched, ");

CHECK:SPACING: No space is necessary after a cast
#465: FILE: arch/s390/lib/uaccess_mvcos.c:173:
+		len = min(count - done, (size_t) 256);

CHECK:SPACING: No space is necessary after a cast
#483: FILE: arch/s390/lib/uaccess_mvcos.c:191:
+		len = min(count - done, (size_t) 4096);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#504: FILE: arch/s390/lib/uaccess_mvcos.c:222:
+extern int futex_atomic_cmpxchg_pt(int __user *uaddr, int oldval, int newval);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#590: FILE: arch/s390/lib/uaccess_pt.c:203:
+		memset((void __kernel __force *) to, 0, n);

CHECK:SPACING: No space is necessary after a cast
#599: FILE: arch/s390/lib/uaccess_pt.c:212:
+		ret = __user_copy_pt((unsigned long) to + done,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: arch/s390/lib/uaccess_pt.c:213:
+		ret = __user_copy_pt((unsigned long) to + done,
+				      &empty_zero_page, size, 1);

CHECK:SPACING: No space is necessary after a cast
#611: FILE: arch/s390/lib/uaccess_pt.c:224:
+	unsigned long uaddr = (unsigned long) src;

CHECK:SPACING: No space is necessary after a cast
#620: FILE: arch/s390/lib/uaccess_pt.c:233:
+		return strnlen((const char __kernel __force *) src, count) + 1;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#643: FILE: arch/s390/lib/uaccess_pt.c:256:
+		offset = uaddr & (PAGE_SIZE-1);
 		                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#655: FILE: arch/s390/lib/uaccess_pt.c:268:
+	if (__handle_fault(mm, uaddr, 0)) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#671: FILE: arch/s390/lib/uaccess_pt.c:284:
+		memcpy(dst, (const char __kernel __force *) src, n);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#672: FILE: arch/s390/lib/uaccess_pt.c:285:
+		if (dst[n-1] == '\0')
 		         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#673: FILE: arch/s390/lib/uaccess_pt.c:286:
+			return n-1;
 			        ^

CHECK:SPACING: No space is necessary after a cast
#677: FILE: arch/s390/lib/uaccess_pt.c:290:
+	if (__user_copy_pt((unsigned long) src, dst, n, 0))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#679: FILE: arch/s390/lib/uaccess_pt.c:292:
+	if (dst[n-1] == '\0')
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#680: FILE: arch/s390/lib/uaccess_pt.c:293:
+		return n-1;
 		        ^

CHECK:SPACING: No space is necessary after a cast
#691: FILE: arch/s390/lib/uaccess_pt.c:304:
+	unsigned long uaddr_from = (unsigned long) from;

CHECK:SPACING: No space is necessary after a cast
#692: FILE: arch/s390/lib/uaccess_pt.c:305:
+	unsigned long uaddr_to = (unsigned long) to;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#748: FILE: arch/s390/lib/uaccess_pt.c:361:
+		offset_from = uaddr_from & (PAGE_SIZE-1);
 		                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#749: FILE: arch/s390/lib/uaccess_pt.c:362:
+		offset_to = uaddr_from & (PAGE_SIZE-1);
 		                                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#769: FILE: arch/s390/lib/uaccess_pt.c:382:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile("0: l   %1,0(%6)\n"				\
+		     "1: " insn						\
+		     "2: cs  %1,%2,0(%6)\n"				\
+		     "3: jl  1b\n"					\
+		     "   lhi %0,0\n"					\
+		     "4:\n"						\
+		     EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)	\
+		     : "=d" (ret), "=&d" (oldval), "=&d" (newval),	\
+		       "=m" (*uaddr)					\
+		     : "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		       "m" (*uaddr) : "cc" );

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'uaddr' - possible side-effects?
#769: FILE: arch/s390/lib/uaccess_pt.c:382:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile("0: l   %1,0(%6)\n"				\
+		     "1: " insn						\
+		     "2: cs  %1,%2,0(%6)\n"				\
+		     "3: jl  1b\n"					\
+		     "   lhi %0,0\n"					\
+		     "4:\n"						\
+		     EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)	\
+		     : "=d" (ret), "=&d" (oldval), "=&d" (newval),	\
+		       "=m" (*uaddr)					\
+		     : "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		       "m" (*uaddr) : "cc" );

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'uaddr' may be better as '(uaddr)' to avoid precedence issues
#769: FILE: arch/s390/lib/uaccess_pt.c:382:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile("0: l   %1,0(%6)\n"				\
+		     "1: " insn						\
+		     "2: cs  %1,%2,0(%6)\n"				\
+		     "3: jl  1b\n"					\
+		     "   lhi %0,0\n"					\
+		     "4:\n"						\
+		     EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)	\
+		     : "=d" (ret), "=&d" (oldval), "=&d" (newval),	\
+		       "=m" (*uaddr)					\
+		     : "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		       "m" (*uaddr) : "cc" );

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#769: FILE: arch/s390/lib/uaccess_pt.c:382:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile("0: l   %1,0(%6)\n"				\
+		     "1: " insn						\
+		     "2: cs  %1,%2,0(%6)\n"				\
+		     "3: jl  1b\n"					\
+		     "   lhi %0,0\n"					\
+		     "4:\n"						\
+		     EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)	\
+		     : "=d" (ret), "=&d" (oldval), "=&d" (newval),	\
+		       "=m" (*uaddr)					\
+		     : "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		       "m" (*uaddr) : "cc" );

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#776: FILE: arch/s390/lib/uaccess_pt.c:389:
+		     EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)	\
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#776: FILE: arch/s390/lib/uaccess_pt.c:389:
+		     EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)	\
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#776: FILE: arch/s390/lib/uaccess_pt.c:389:
+		     EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)	\
 		                                                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#780: FILE: arch/s390/lib/uaccess_pt.c:393:
+		       "m" (*uaddr) : "cc" );

CHECK:SPACING: No space is necessary after a cast
#787: FILE: arch/s390/lib/uaccess_pt.c:400:
+	uaddr = (int __user *) __dat_user_addr((unsigned long) uaddr);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#816: FILE: arch/s390/lib/uaccess_pt.c:429:
+		ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#828: FILE: arch/s390/lib/uaccess_pt.c:441:
+	uaddr = (int __user *) __dat_user_addr((unsigned long) uaddr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: arch/s390/lib/uaccess_pt.c:451:
+		     EX_TABLE(0b,1b)
 		                ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#841: FILE: arch/s390/lib/uaccess_pt.c:454:
+		     : "cc", "memory" );

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#887: FILE: arch/s390/mm/fault.c:190:
+extern long sys_rt_sigreturn(struct pt_regs *regs);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#888: FILE: arch/s390/mm/fault.c:191:
+extern long sys32_sigreturn(struct pt_regs *regs);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#889: FILE: arch/s390/mm/fault.c:192:
+extern long sys32_rt_sigreturn(struct pt_regs *regs);

WARNING:RETURN_VOID: void function return statements are not generally useful
#910: FILE: arch/s390/mm/fault.c:213:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#936: FILE: arch/s390/mm/fault.c:239:
+	instruction = (u16 *) ((pfn << PAGE_SHIFT) + (uaddr & (PAGE_SIZE-1)));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#936: FILE: arch/s390/mm/fault.c:239:
+	instruction = (u16 *) ((pfn << PAGE_SHIFT) + (uaddr & (PAGE_SIZE-1)));
 	                                                                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#937: FILE: arch/s390/mm/fault.c:240:
+	if (*instruction == 0x0a77)
[...]
+	else if (*instruction == 0x0aad)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#941: FILE: arch/s390/mm/fault.c:244:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#942: FILE: arch/s390/mm/fault.c:245:
+		printk("- XXX - do_exception: task = %s, primary, NO EXEC "

WARNING:SPLIT_STRING: quoted string split across lines
#943: FILE: arch/s390/mm/fault.c:246:
+		printk("- XXX - do_exception: task = %s, primary, NO EXEC "
+		       "-> SIGSEGV\n", current->comm);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'user_address == 2'
#965: FILE: arch/s390/mm/fault.c:338:
+	if (unlikely((user_address == 2) && !(vma->vm_flags & VM_EXEC)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1098: FILE: include/asm-s390/compat.h:31:
+#define PSW32_MASK_MERGE(CURRENT,NEW) \
                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1099: FILE: include/asm-s390/compat.h:32:
+	(((CURRENT) & ~(PSW32_MASK_CC|PSW32_MASK_PM)) | \
 	                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1100: FILE: include/asm-s390/compat.h:33:
+	 ((NEW) & (PSW32_MASK_CC|PSW32_MASK_PM)))
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1116: FILE: include/asm-s390/lowcore.h:224:
+	__u8	     pad10[0xc60-0xc5c];       /* 0xc5c */
 	    	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1126: FILE: include/asm-s390/lowcore.h:315:
+	__u8	     pad10[0xd80-0xd78];       /* 0xd78 */
 	    	                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1147: FILE: include/asm-s390/mmu_context.h:22:
+#define PGTABLE_BITS (_SEGMENT_TABLE|USER_STD_MASK)
                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1150: FILE: include/asm-s390/mmu_context.h:25:
+#define PGTABLE_BITS (_REGION_TABLE|USER_STD_MASK)
                                    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1186: FILE: include/asm-s390/mmu_context.h:45:
+			asm volatile(LCTL_OPCODE" 1,1,%0\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1187: FILE: include/asm-s390/mmu_context.h:46:
+				     LCTL_OPCODE" 7,7,%1"

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1189: FILE: include/asm-s390/mmu_context.h:48:
+					 "m" (S390_lowcore.user_asce) );

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1192: FILE: include/asm-s390/mmu_context.h:51:
+			asm volatile(LCTL_OPCODE" 1,1,%0"

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1193: FILE: include/asm-s390/mmu_context.h:52:
+				     : : "m" (S390_lowcore.user_asce) );

CHECK:BRACES: Unbalanced braces around else statement
#1194: FILE: include/asm-s390/mmu_context.h:53:
+		} else

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1196: FILE: include/asm-s390/mmu_context.h:55:
+			asm volatile(LCTL_OPCODE" 13,13,%0"

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1197: FILE: include/asm-s390/mmu_context.h:56:
+				     : : "m" (S390_lowcore.user_asce) );

CHECK:SPACING: No space is necessary after a cast
#1221: FILE: include/asm-s390/pgalloc.h:56:
+			free_pages((unsigned long) pgd, PGD_ALLOC_ORDER);

CHECK:SPACING: No space is necessary after a cast
#1224: FILE: include/asm-s390/pgalloc.h:59:
+		page->lru.next = (void *) shadow_pgd;

CHECK:SPACING: No space is necessary after a cast
#1236: FILE: include/asm-s390/pgalloc.h:75:
+		free_pages((unsigned long) shadow_pgd, PGD_ALLOC_ORDER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1244: FILE: include/asm-s390/pgalloc.h:89:
+#define pgd_populate_kernel(mm, pmd, pte)	BUG()

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#1258: FILE: include/asm-s390/pgalloc.h:104:
+			free_pages((unsigned long) pmd, PMD_ALLOC_ORDER);

CHECK:SPACING: No space is necessary after a cast
#1261: FILE: include/asm-s390/pgalloc.h:107:
+		page->lru.next = (void *) shadow_pmd;

CHECK:SPACING: No space is necessary after a cast
#1273: FILE: include/asm-s390/pgalloc.h:119:
+		free_pages((unsigned long) shadow_pmd, PMD_ALLOC_ORDER);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1322: FILE: include/asm-s390/pgalloc.h:186:
+			__get_free_page(GFP_KERNEL|__GFP_REPEAT);
 			                          ^

CHECK:SPACING: No space is necessary after a cast
#1326: FILE: include/asm-s390/pgalloc.h:190:
+			free_page((unsigned long) pte);

CHECK:SPACING: No space is necessary after a cast
#1329: FILE: include/asm-s390/pgalloc.h:193:
+		page->lru.next = (void *) shadow_pte;

CHECK:SPACING: No space is necessary after a cast
#1342: FILE: include/asm-s390/pgalloc.h:216:
+		free_page((unsigned long) shadow_pte);

CHECK:SPACING: No space is necessary after a cast
#1343: FILE: include/asm-s390/pgalloc.h:217:
+	free_page((unsigned long) pte);

CHECK:SPACING: No space is necessary after a cast
#1462: FILE: include/asm-s390/pgtable.h:369:
+	unsigned long pteptr = (unsigned long) (ptep);

CHECK:SPACING: No space is necessary after a cast
#1466: FILE: include/asm-s390/pgtable.h:373:
+		void *addr = (void *) (pteptr ^ offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1468: FILE: include/asm-s390/pgtable.h:375:
+		struct page *page = virt_to_page(addr);
+		if (!list_empty(&page->lru))

CHECK:SPACING: No space is necessary after a cast
#1469: FILE: include/asm-s390/pgtable.h:376:
+			return (pte_t *) ((unsigned long) page->lru.next |

CHECK:SPACING: No space is necessary after a cast
#1477: FILE: include/asm-s390/pgtable.h:384:
+	unsigned long pmdptr = (unsigned long) (pmdp);

CHECK:SPACING: No space is necessary after a cast
#1482: FILE: include/asm-s390/pgtable.h:389:
+		void *addr = (void *) (pmdptr ^ offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1484: FILE: include/asm-s390/pgtable.h:391:
+		struct page *page = virt_to_page(addr);
+		if (!list_empty(&page->lru))

CHECK:SPACING: No space is necessary after a cast
#1485: FILE: include/asm-s390/pgtable.h:392:
+			return (pmd_t *) ((unsigned long) page->lru.next |

CHECK:SPACING: No space is necessary after a cast
#1493: FILE: include/asm-s390/pgtable.h:400:
+	unsigned long pgdptr = (unsigned long) (pgdp);

CHECK:SPACING: No space is necessary after a cast
#1498: FILE: include/asm-s390/pgtable.h:405:
+		void *addr = (void *) (pgdptr ^ offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1500: FILE: include/asm-s390/pgtable.h:407:
+		struct page *page = virt_to_page(addr);
+		if (!list_empty(&page->lru))

CHECK:SPACING: No space is necessary after a cast
#1501: FILE: include/asm-s390/pgtable.h:408:
+			return (pgd_t *) ((unsigned long) page->lru.next |

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1531: FILE: include/asm-s390/pgtable.h:548:
+static inline void pmd_clear_kernel(pmd_t * pmdp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1539: FILE: include/asm-s390/pgtable.h:556:
+static inline void pmd_clear(pmd_t * pmdp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1551: FILE: include/asm-s390/pgtable.h:567:
+static inline void pgd_clear_kernel(pgd_t * pgdp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1557: FILE: include/asm-s390/pgtable.h:572:
+static inline void pgd_clear(pgd_t * pgdp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1566: FILE: include/asm-s390/pgtable.h:581:
+static inline void pmd_clear_kernel(pmd_t * pmdp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1572: FILE: include/asm-s390/pgtable.h:587:
+static inline void pmd_clear(pmd_t * pmdp)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1723: FILE: include/asm-s390/tlbflush.h:109:
+			asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1726: FILE: include/asm-s390/tlbflush.h:112:
+				"a" (__pa(shadow_pgd) & PAGE_MASK) : "cc" );

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000009661.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 18 warnings, 64 checks, 1491 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000009661.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
