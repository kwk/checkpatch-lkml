ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#122: FILE: fs/dquot.c:1492:
+	if ((dquot = dqget(sb, id, type)) != NODQUOT) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#156: FILE: fs/dquot.c:1546:
+	memcpy(dqblk, &dquot->dq_dqb, sizeof(struct mem_dqblk));        /* We copy data to preserve them from changing */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#196: FILE: fs/dquot.c:1574:
+	if ((len -= offset) > count)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#202: FILE: fs/dquot.c:1580:
+}
+#define quota_proc_init()	\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#202: FILE: fs/dquot.c:1580:
+#define quota_proc_init()	\
+	create_proc_read_entry("fs/quota", 0, 0, read_stats, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#221: FILE: fs/dquot.c:1591:
+	memcpy(kinfo, sb_dqopt(sb)->info+type, sizeof(struct mem_dqinfo));
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#239: FILE: fs/dquot.c:1604:
 	switch (op) {
+		case Q_SETFLAGS:
[...]
+		case Q_SETGRACE:
[...]
+		case Q_SETINFO:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:INDENTED_LABEL: labels should not be indented
#398: FILE: fs/dquot.c:2058:
+	quotaon:	quota_on,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#399: FILE: fs/dquot.c:2059:
+	quotaoff:	quota_off,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#399: FILE: fs/dquot.c:2059:
+	quotaoff:	quota_off,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#400: FILE: fs/dquot.c:2060:
+	quotasync:	quota_sync,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#400: FILE: fs/dquot.c:2060:
+	quotasync:	quota_sync,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#401: FILE: fs/dquot.c:2061:
+	getinfo:	get_info,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#401: FILE: fs/dquot.c:2061:
+	getinfo:	get_info,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#402: FILE: fs/dquot.c:2062:
+	setinfo:	set_info,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#402: FILE: fs/dquot.c:2062:
+	setinfo:	set_info,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#403: FILE: fs/dquot.c:2063:
+	getdqblk:	get_dqblk,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#403: FILE: fs/dquot.c:2063:
+	getdqblk:	get_dqblk,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#404: FILE: fs/dquot.c:2064:
+	setdqblk:	set_dqblk,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#404: FILE: fs/dquot.c:2064:
+	setdqblk:	set_dqblk,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#434: FILE: fs/quota.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#444: FILE: fs/quota.c:11:
+#include <asm/uaccess.h>

WARNING:RETURN_VOID: void function return statements are not generally useful
#454: FILE: fs/quota.c:21:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#463: FILE: fs/quota.c:30:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#466: FILE: fs/quota.c:33:
+	ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#473: FILE: fs/quota.c:40:
+	if (cmd == 0x0300 || cmd == 0x0400 || cmd == 0x0500 || cmd == 0x1000
+	    || cmd < 0x100)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#479: FILE: fs/quota.c:46:
+	switch (cmd) {
+		case Q_SYNC:
+		case Q_GETINFO:
+		case Q_XGETQSTAT:
[...]
+		case Q_GETQUOTA:
+		case Q_XGETQUOTA:
[...]
+		default:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#500: FILE: fs/quota.c:67:
+	ret = user_path_walk(special, &nd);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#504: FILE: fs/quota.c:71:
+	dev = nd.dentry->d_inode->i_rdev;
 	      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#505: FILE: fs/quota.c:72:
+	mode = nd.dentry->d_inode->i_mode;
 	       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#506: FILE: fs/quota.c:73:
+	path_release(&nd);
 	              ^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#517: FILE: fs/quota.c:84:
+	ret = -ENOSYS;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#553: FILE: fs/quota.c:120:
+	switch (cmds) {
+		case Q_QUOTAON:
[...]
+		case Q_QUOTAOFF:
[...]
+	    	case Q_SYNC:
[...]
+		case Q_GETINFO:
[...]
+		case Q_SETINFO:
+		case Q_SETFLAGS:
+		case Q_SETGRACE:
[...]
+		case Q_GETQUOTA:
[...]
+		case Q_SETUSE:
+		case Q_SETQLIM:
+		case Q_SETQUOTA:
[...]
+		case Q_XQUOTAON:
+		case Q_XQUOTAOFF:
+		case Q_XQUOTARM:
[...]
+		case Q_XGETQSTAT:
[...]
+		case Q_XSETQLIM:
[...]
+		case Q_XGETQUOTA:
[...]
+		default:

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: fs/quota.c:132:
+^I    ^Icase Q_SYNC:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#565: FILE: fs/quota.c:132:
+^I    ^Icase Q_SYNC:$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#673: FILE: include/linux/fs.h:664:
+	int (*quotaon)(struct super_block *, short, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#673: FILE: include/linux/fs.h:664:
+	int (*quotaon)(struct super_block *, short, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#673: FILE: include/linux/fs.h:664:
+	int (*quotaon)(struct super_block *, short, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#674: FILE: include/linux/fs.h:665:
+	int (*quotaoff)(struct super_block *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#674: FILE: include/linux/fs.h:665:
+	int (*quotaoff)(struct super_block *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#675: FILE: include/linux/fs.h:666:
+	int (*quotasync)(struct super_block *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#675: FILE: include/linux/fs.h:666:
+	int (*quotasync)(struct super_block *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#676: FILE: include/linux/fs.h:667:
+	int (*getinfo)(struct super_block *, short, struct mem_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#676: FILE: include/linux/fs.h:667:
+	int (*getinfo)(struct super_block *, short, struct mem_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_dqinfo *' should also have an identifier name
#676: FILE: include/linux/fs.h:667:
+	int (*getinfo)(struct super_block *, short, struct mem_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#677: FILE: include/linux/fs.h:668:
+	int (*setinfo)(struct super_block *, short, struct mem_dqinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#677: FILE: include/linux/fs.h:668:
+	int (*setinfo)(struct super_block *, short, struct mem_dqinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_dqinfo *' should also have an identifier name
#677: FILE: include/linux/fs.h:668:
+	int (*setinfo)(struct super_block *, short, struct mem_dqinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#677: FILE: include/linux/fs.h:668:
+	int (*setinfo)(struct super_block *, short, struct mem_dqinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#678: FILE: include/linux/fs.h:669:
+	int (*getdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#678: FILE: include/linux/fs.h:669:
+	int (*getdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#678: FILE: include/linux/fs.h:669:
+	int (*getdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_dqblk *' should also have an identifier name
#678: FILE: include/linux/fs.h:669:
+	int (*getdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#679: FILE: include/linux/fs.h:670:
+	int (*setdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#679: FILE: include/linux/fs.h:670:
+	int (*setdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#679: FILE: include/linux/fs.h:670:
+	int (*setdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mem_dqblk *' should also have an identifier name
#679: FILE: include/linux/fs.h:670:
+	int (*setdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#679: FILE: include/linux/fs.h:670:
+	int (*setdqblk)(struct super_block *, short, qid_t, struct mem_dqblk *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#680: FILE: include/linux/fs.h:671:
+	int (*getxstate)(struct super_block *, short, struct fs_quota_stat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#680: FILE: include/linux/fs.h:671:
+	int (*getxstate)(struct super_block *, short, struct fs_quota_stat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_quota_stat *' should also have an identifier name
#680: FILE: include/linux/fs.h:671:
+	int (*getxstate)(struct super_block *, short, struct fs_quota_stat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#681: FILE: include/linux/fs.h:672:
+	int (*setxstate)(struct super_block *, short, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#681: FILE: include/linux/fs.h:672:
+	int (*setxstate)(struct super_block *, short, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#681: FILE: include/linux/fs.h:672:
+	int (*setxstate)(struct super_block *, short, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#681: FILE: include/linux/fs.h:672:
+	int (*setxstate)(struct super_block *, short, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#682: FILE: include/linux/fs.h:673:
+	int (*getxquota)(struct super_block *, short, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#682: FILE: include/linux/fs.h:673:
+	int (*getxquota)(struct super_block *, short, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_disk_quota *' should also have an identifier name
#682: FILE: include/linux/fs.h:673:
+	int (*getxquota)(struct super_block *, short, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#683: FILE: include/linux/fs.h:674:
+	int (*setxquota)(struct super_block *, short, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#683: FILE: include/linux/fs.h:674:
+	int (*setxquota)(struct super_block *, short, struct fs_disk_quota *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_disk_quota *' should also have an identifier name
#683: FILE: include/linux/fs.h:674:
+	int (*setxquota)(struct super_block *, short, struct fs_disk_quota *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#760: FILE: include/linux/xqm.h:1:
+/*

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#800: FILE: include/linux/xqm.h:41:
+#define XQM_CMD(x)	(('X'<<8)+(x))	/* note: forms first QCMD argument */
                   	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#800: FILE: include/linux/xqm.h:41:
+#define XQM_CMD(x)	(('X'<<8)+(x))	/* note: forms first QCMD argument */
                   	         ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#816: FILE: include/linux/xqm.h:57:
+typedef struct fs_disk_quota {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#830: FILE: include/linux/xqm.h:71:
+^I__u16^I  ^Id_iwarns;       /* # warnings issued wrt num inodes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#831: FILE: include/linux/xqm.h:72:
+^I__u16^I  ^Id_bwarns;       /* # warnings issued wrt disk blocks */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#837: FILE: include/linux/xqm.h:78:
+^I__u16^I  ^Id_rtbwarns;     /* # warnings issued wrt RT disk blks */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: include/linux/xqm.h:79:
+^I__s16^I^Id_padding3;^I/* padding3 - for future use */^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#845: FILE: include/linux/xqm.h:86:
+#define FS_DQ_ISOFT	(1<<0)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#845: FILE: include/linux/xqm.h:86:
+#define FS_DQ_ISOFT	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#846: FILE: include/linux/xqm.h:87:
+#define FS_DQ_IHARD	(1<<1)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#846: FILE: include/linux/xqm.h:87:
+#define FS_DQ_IHARD	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#847: FILE: include/linux/xqm.h:88:
+#define FS_DQ_BSOFT	(1<<2)
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#847: FILE: include/linux/xqm.h:88:
+#define FS_DQ_BSOFT	(1<<2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#848: FILE: include/linux/xqm.h:89:
+#define FS_DQ_BHARD ^I(1<<3)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#848: FILE: include/linux/xqm.h:89:
+#define FS_DQ_BHARD 	(1<<3)
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#848: FILE: include/linux/xqm.h:89:
+#define FS_DQ_BHARD 	(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#849: FILE: include/linux/xqm.h:90:
+#define FS_DQ_RTBSOFT	(1<<4)
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#849: FILE: include/linux/xqm.h:90:
+#define FS_DQ_RTBSOFT	(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#850: FILE: include/linux/xqm.h:91:
+#define FS_DQ_RTBHARD	(1<<5)
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#850: FILE: include/linux/xqm.h:91:
+#define FS_DQ_RTBHARD	(1<<5)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: include/linux/xqm.h:98:
+ * defined below are used. $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#860: FILE: include/linux/xqm.h:101:
+#define FS_DQ_BTIMER	(1<<6)
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#860: FILE: include/linux/xqm.h:101:
+#define FS_DQ_BTIMER	(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#861: FILE: include/linux/xqm.h:102:
+#define FS_DQ_ITIMER	(1<<7)
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#861: FILE: include/linux/xqm.h:102:
+#define FS_DQ_ITIMER	(1<<7)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#862: FILE: include/linux/xqm.h:103:
+#define FS_DQ_RTBTIMER ^I(1<<8)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#862: FILE: include/linux/xqm.h:103:
+#define FS_DQ_RTBTIMER 	(1<<8)
                        	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#862: FILE: include/linux/xqm.h:103:
+#define FS_DQ_RTBTIMER 	(1<<8)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#871: FILE: include/linux/xqm.h:112:
+#define	DQ_FTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#871: FILE: include/linux/xqm.h:112:
+#define	DQ_FTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#872: FILE: include/linux/xqm.h:113:
+#define	DQ_BTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#872: FILE: include/linux/xqm.h:113:
+#define	DQ_BTIMELIMIT	(7 * 24*60*60)		/* 1 week */
        	             	          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#877: FILE: include/linux/xqm.h:118:
+#define XFS_QUOTA_UDQ_ACCT	(1<<0)  /* user quota accounting */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#877: FILE: include/linux/xqm.h:118:
+#define XFS_QUOTA_UDQ_ACCT	(1<<0)  /* user quota accounting */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#878: FILE: include/linux/xqm.h:119:
+#define XFS_QUOTA_UDQ_ENFD	(1<<1)  /* user quota limits enforcement */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#878: FILE: include/linux/xqm.h:119:
+#define XFS_QUOTA_UDQ_ENFD	(1<<1)  /* user quota limits enforcement */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#879: FILE: include/linux/xqm.h:120:
+#define XFS_QUOTA_GDQ_ACCT	(1<<2)  /* group quota accounting */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#879: FILE: include/linux/xqm.h:120:
+#define XFS_QUOTA_GDQ_ACCT	(1<<2)  /* group quota accounting */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#880: FILE: include/linux/xqm.h:121:
+#define XFS_QUOTA_GDQ_ENFD	(1<<3)  /* group quota limits enforcement */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#880: FILE: include/linux/xqm.h:121:
+#define XFS_QUOTA_GDQ_ENFD	(1<<3)  /* group quota limits enforcement */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#882: FILE: include/linux/xqm.h:123:
+#define XFS_USER_QUOTA		(1<<0)	/* user quota type */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#882: FILE: include/linux/xqm.h:123:
+#define XFS_USER_QUOTA		(1<<0)	/* user quota type */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#883: FILE: include/linux/xqm.h:124:
+#define XFS_PROJ_QUOTA		(1<<1)	/* (IRIX) project quota type */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#883: FILE: include/linux/xqm.h:124:
+#define XFS_PROJ_QUOTA		(1<<1)	/* (IRIX) project quota type */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#884: FILE: include/linux/xqm.h:125:
+#define XFS_GROUP_QUOTA		(1<<2)	/* group quota type */
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#884: FILE: include/linux/xqm.h:125:
+#define XFS_GROUP_QUOTA		(1<<2)	/* group quota type */

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#888: FILE: include/linux/xqm.h:129:
+ * Provides a centralized way to get meta infomation about the quota subsystem.
                                           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#895: FILE: include/linux/xqm.h:136:
+ * Some basic infomation about 'quota files'.
               ^^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#897: FILE: include/linux/xqm.h:138:
+typedef struct fs_qfilestat {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#903: FILE: include/linux/xqm.h:144:
+typedef struct fs_quota_stat {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#910: FILE: include/linux/xqm.h:151:
+^I__s32^I^Iqs_btimelimit;  /* limit for blks timer */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#911: FILE: include/linux/xqm.h:152:
+^I__s32^I^Iqs_itimelimit;  /* limit for inodes timer */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#912: FILE: include/linux/xqm.h:153:
+^I__s32^I^Iqs_rtbtimelimit;/* limit for rt blks timer */^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000508280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 67 warnings, 41 checks, 801 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000508280.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
