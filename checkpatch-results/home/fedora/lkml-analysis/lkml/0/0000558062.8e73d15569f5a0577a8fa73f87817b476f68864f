WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#33: 
* 2 context switches for each transfered page.
                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#57: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#79: FILE: fs/pipe.c:46:
+pio_copy_to_user(struct kiobuf* iobuf, char* ubuf, int chars, int offset)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#79: FILE: fs/pipe.c:46:
+pio_copy_to_user(struct kiobuf* iobuf, char* ubuf, int chars, int offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#82: FILE: fs/pipe.c:49:
+	int page_nr;
+	offset += iobuf->offset;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#83: FILE: fs/pipe.c:50:
+	page_nr = offset/PAGE_SIZE;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#85: FILE: fs/pipe.c:52:
+	while(chars) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#86: FILE: fs/pipe.c:53:
+		int pcount = PAGE_SIZE-offset;
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#88: FILE: fs/pipe.c:55:
+		void *kaddr;
+		if (pcount > chars)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: fs/pipe.c:58:
+		if (copy_to_user(ubuf, kaddr+offset, pcount))
 		                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/pipe.c:89:
+		int chars = PIPE_LEN(*inode);
+		if (chars) {

ERROR:SPACING: space required before the open parenthesis '('
#141: FILE: fs/pipe.c:96:
+			if(PIPE_IS_PIO(*inode)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#142: FILE: fs/pipe.c:97:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#142: FILE: fs/pipe.c:97:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: fs/pipe.c:98:
+				struct pipe_pio* pio = ((struct pipe_pio*)pipebuf);
+				if(pio_copy_to_user(&pio->iobuf, buf, chars, offset))

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: fs/pipe.c:98:
+				if(pio_copy_to_user(&pio->iobuf, buf, chars, offset))

ERROR:SPACING: space required before the open parenthesis '('
#147: FILE: fs/pipe.c:102:
+				if(!PIPE_LEN(*inode)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#156: FILE: fs/pipe.c:111:
+				if (offset+chars <= PIPE_SIZE) {
 				          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#157: FILE: fs/pipe.c:112:
+					if (copy_to_user(buf, pipebuf+offset, chars))
 					                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: fs/pipe.c:115:
+					int p1 = PIPE_SIZE-offset;
 					                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: fs/pipe.c:116:
+					int p1 = PIPE_SIZE-offset;
+					if (copy_to_user(buf, pipebuf+offset, p1))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: fs/pipe.c:116:
+					if (copy_to_user(buf, pipebuf+offset, p1))
 					                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#163: FILE: fs/pipe.c:118:
+					if (copy_to_user(buf+p1, pipebuf, chars-p1))
 					                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#163: FILE: fs/pipe.c:118:
+					if (copy_to_user(buf+p1, pipebuf, chars-p1))
 					                                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#206: FILE: fs/pipe.c:151:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#302: FILE: fs/pipe.c:196:
+	for(;;) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#335: FILE: fs/pipe.c:208:
+			struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#335: FILE: fs/pipe.c:208:
+			struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: fs/pipe.c:209:
+			struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);
+			chars = KIO_MAX_ATOMIC_BYTES;

ERROR:SPACING: space required before the open parenthesis '('
#344: FILE: fs/pipe.c:213:
+			if(map_user_kiobuf(READ, &pio->iobuf, (unsigned long)buf, chars))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#349: FILE: fs/pipe.c:218:
+		} else if (!PIPE_IS_PIO(*inode) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#362: FILE: fs/pipe.c:225:
+			if (chars+offset <= PIPE_SIZE) {
 			         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#363: FILE: fs/pipe.c:226:
+				if (copy_from_user(pipebuf+offset, buf, chars))
 				                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#366: FILE: fs/pipe.c:229:
+				int p1 = PIPE_SIZE-offset;
 				                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: fs/pipe.c:230:
+				int p1 = PIPE_SIZE-offset;
+				if (copy_from_user(pipebuf+offset, buf, p1))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#367: FILE: fs/pipe.c:230:
+				if (copy_from_user(pipebuf+offset, buf, p1))
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#369: FILE: fs/pipe.c:232:
+				if (copy_from_user(pipebuf, buf+p1, chars-p1))
 				                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#369: FILE: fs/pipe.c:232:
+				if (copy_from_user(pipebuf, buf+p1, chars-p1))
 				                                         ^

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#403: FILE: fs/pipe.c:249:
+		 * is going to give up this CPU, so it doesnt have
 		                                       ^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#423: FILE: fs/pipe.c:271:
+	if(!pio_done) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#424: FILE: fs/pipe.c:272:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#424: FILE: fs/pipe.c:272:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: fs/pipe.c:273:
+		struct pipe_pio* pio = (struct pipe_pio*)PIPE_BASE(*inode);
+		PIPE_IS_PIO(*inode) = 0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558062.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 12 warnings, 15 checks, 429 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558062.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
