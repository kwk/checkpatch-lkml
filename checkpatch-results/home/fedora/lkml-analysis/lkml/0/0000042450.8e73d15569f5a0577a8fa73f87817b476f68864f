WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#40: 
15- LTTng architecture dependant instrumentation --- sh (incomplete)
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#51: 
--- a/arch/sh/kernel/irq.c

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#122: FILE: arch/sh/kernel/traps.c:529:
+		if (tmp==0) {
 		       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: arch/sh/kernel/traps.c:531:
+ ^I^I^Ireturn; /* sorted */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: arch/sh/kernel/traps.c:531:
+ ^I^I^Ireturn; /* sorted */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/sh/kernel/traps.c:531:
+ ^I^I^Ireturn; /* sorted */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#141: FILE: arch/sh/kernel/traps.c:713:
 }
+/* Trace related code */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#156: FILE: arch/sh/kernel/traps.c:728:
+	trace_syscall_event.syscall_id = (uint8_t) regs->regs[REG_REG0 + 3];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: arch/sh/kernel/traps.c:740:
+	if (ltt_get_trace_config(&use_depth, &use_bounds, &seek_depth,
+				(void *) &lower_bound, (void *) &upper_bound) < 0)

CHECK:SPACING: No space is necessary after a cast
#168: FILE: arch/sh/kernel/traps.c:740:
+				(void *) &lower_bound, (void *) &upper_bound) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#172: FILE: arch/sh/kernel/traps.c:744:
+	if ((use_depth == 1) || (use_bounds == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#172: FILE: arch/sh/kernel/traps.c:744:
+	if ((use_depth == 1) || (use_bounds == 1)) {

CHECK:SPACING: No space is necessary after a cast
#174: FILE: arch/sh/kernel/traps.c:746:
+		stack = (unsigned long *) regs->regs[REG_REG15];

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#176: FILE: arch/sh/kernel/traps.c:748:
+		/* Keep on going until we reach the end of the process' stack limit (wherever it may be) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > current->mm->start_code'
#180: FILE: arch/sh/kernel/traps.c:752:
+			if ((addr > current->mm->start_code) && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < current->mm->end_code'
#180: FILE: arch/sh/kernel/traps.c:752:
+			if ((addr > current->mm->start_code) && (addr < current->mm->end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#182: FILE: arch/sh/kernel/traps.c:754:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth == seek_depth'
#182: FILE: arch/sh/kernel/traps.c:754:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#182: FILE: arch/sh/kernel/traps.c:754:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > lower_bound'
#182: FILE: arch/sh/kernel/traps.c:754:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < upper_bound'
#182: FILE: arch/sh/kernel/traps.c:754:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#183: FILE: arch/sh/kernel/traps.c:755:
+				if (((use_depth == 1) && (depth == seek_depth))
+				    || ((use_bounds == 1) && (addr > lower_bound)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#184: FILE: arch/sh/kernel/traps.c:756:
+				    || ((use_bounds == 1) && (addr > lower_bound)
+					&& (addr < upper_bound))) {

CHECK:BRACES: Unbalanced braces around else statement
#190: FILE: arch/sh/kernel/traps.c:762:
+				} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: arch/sh/mm/fault.c:60:
+		unsigned long trapnr;
+		asm volatile("stc       r2_bank,%0": "=r" (trapnr));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#231: FILE: arch/sh/mm/fault.c:60:
+		asm volatile("stc       r2_bank,%0": "=r" (trapnr));
 		                                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042450.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 6 warnings, 17 checks, 181 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042450.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
