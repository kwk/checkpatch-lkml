CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#101: FILE: include/linux/gfp.h:59:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_CRITICAL)
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#101: FILE: include/linux/gfp.h:59:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_CRITICAL)
 			                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#122: FILE: include/linux/sysctl.h:183:
+	VM_CRITICAL_PAGES=29,	/* # of pages to reserve for __GFP_CRITICAL allocs */
 	                 ^

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#142: FILE: kernel/sysctl.c:860:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#156: FILE: mm/page_alloc.c:57:
+int critical_pages = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#161: FILE: mm/page_alloc.c:62:
+	spinlock_t lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: mm/page_alloc.c:108:
+		BUG_ON(!get_page_testone(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#279: FILE: mm/page_alloc.c:2645:
+		BUG_ON(critical_pool.free < 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: mm/page_alloc.c:2650:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: mm/page_alloc.c:2657:
+^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: mm/page_alloc.c:2668:
+int critical_pages_sysctl_handler(ctl_table *table, int write,
+				   struct file *file, void __user *buffer,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#350: FILE: include/linux/mmzone.h:425:
+int critical_pages_sysctl_handler(struct ctl_table *, int, struct file *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#350: FILE: include/linux/mmzone.h:425:
+int critical_pages_sysctl_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#350: FILE: include/linux/mmzone.h:425:
+int critical_pages_sysctl_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#350: FILE: include/linux/mmzone.h:425:
+int critical_pages_sysctl_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#350: FILE: include/linux/mmzone.h:425:
+int critical_pages_sysctl_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#350: FILE: include/linux/mmzone.h:425:
+int critical_pages_sysctl_handler(struct ctl_table *, int, struct file *,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 9 warnings, 4 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
