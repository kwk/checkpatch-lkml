WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#37: FILE: dev.c:1:
+/* -*- linux-c -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: dev.c:201:
+        struct net_device* dev;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: dev.c:201:
+        struct net_device* dev;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#75: FILE: dev.c:201:
+        struct net_device* dev;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: dev.c:202:
+        struct dev_hash_node* next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: dev.c:202:
+        struct dev_hash_node* next;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#76: FILE: dev.c:202:
+        struct dev_hash_node* next;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#79: FILE: dev.c:205:
+struct dev_hash_node* fdl_name_base[FDL_HASH_LEN];/* hashed by name */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#80: FILE: dev.c:206:
+struct dev_hash_node* fdl_idx_base[FDL_HASH_LEN]; /* hashed by index */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#81: FILE: dev.c:207:
+int fdl_initialized_yet = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#85: FILE: dev.c:211:
+int fdl_calc_name_idx(const char* dev_name) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#85: FILE: dev.c:211:
+int fdl_calc_name_idx(const char* dev_name) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: dev.c:212:
+        int tmp = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: dev.c:212:
+        int tmp = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: dev.c:213:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: dev.c:213:
+        int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: dev.c:215:
+        printk(KERN_ERR "fdl_calc_name_idx, name: %s\n", dev_name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: dev.c:215:
+        printk(KERN_ERR "fdl_calc_name_idx, name: %s\n", dev_name);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#89: FILE: dev.c:215:
+        printk(KERN_ERR "fdl_calc_name_idx, name: %s\n", dev_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fdl_calc_name_idx', this function's name, in a string
#89: FILE: dev.c:215:
+        printk(KERN_ERR "fdl_calc_name_idx, name: %s\n", dev_name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: dev.c:217:
+        for (i = 0; dev_name[i]; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: dev.c:217:
+        for (i = 0; dev_name[i]; i++) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#91: FILE: dev.c:217:
+        for (i = 0; dev_name[i]; i++) {
+                tmp += (int)(dev_name[i]);
+        }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: dev.c:218:
+                tmp += (int)(dev_name[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: dev.c:218:
+                tmp += (int)(dev_name[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: dev.c:219:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: dev.c:219:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: dev.c:220:
+        if (i > 3) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: dev.c:220:
+        if (i > 3) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: dev.c:221:
+                tmp += (dev_name[i-2] * 10); /* might add a little spread to the hash */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: dev.c:221:
+                tmp += (dev_name[i-2] * 10); /* might add a little spread to the hash */$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#95: FILE: dev.c:221:
+                tmp += (dev_name[i-2] * 10); /* might add a little spread to the hash */
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: dev.c:222:
+                tmp += (dev_name[i-3] * 100); /* might add a little spread to the hash */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: dev.c:222:
+                tmp += (dev_name[i-3] * 100); /* might add a little spread to the hash */$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#96: FILE: dev.c:222:
+                tmp += (dev_name[i-3] * 100); /* might add a little spread to the hash */
                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: dev.c:223:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: dev.c:223:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: dev.c:225:
+        printk(KERN_ERR "fdl_calc_name_idx, rslt: %i\n", (int)(tmp % FDL_HASH_LEN));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: dev.c:225:
+        printk(KERN_ERR "fdl_calc_name_idx, rslt: %i\n", (int)(tmp % FDL_HASH_LEN));$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#99: FILE: dev.c:225:
+        printk(KERN_ERR "fdl_calc_name_idx, rslt: %i\n", (int)(tmp % FDL_HASH_LEN));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fdl_calc_name_idx', this function's name, in a string
#99: FILE: dev.c:225:
+        printk(KERN_ERR "fdl_calc_name_idx, rslt: %i\n", (int)(tmp % FDL_HASH_LEN));

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: dev.c:227:
+        return (tmp % FDL_HASH_LEN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: dev.c:227:
+        return (tmp % FDL_HASH_LEN);$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#104: FILE: dev.c:230:
+int fdl_calc_index_idx(const int ifindex) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: dev.c:231:
+        return (ifindex % FDL_HASH_LEN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: dev.c:231:
+        return (ifindex % FDL_HASH_LEN);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#108: FILE: dev.c:234:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#110: FILE: dev.c:236:
+int __fdl_ensure_init(void) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: dev.c:238:
+        printk(KERN_ERR "__fdl_ensure_init, enter\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: dev.c:238:
+        printk(KERN_ERR "__fdl_ensure_init, enter\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#112: FILE: dev.c:238:
+        printk(KERN_ERR "__fdl_ensure_init, enter\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fdl_ensure_init', this function's name, in a string
#112: FILE: dev.c:238:
+        printk(KERN_ERR "__fdl_ensure_init, enter\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: dev.c:240:
+        if (! fdl_initialized_yet) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: dev.c:240:
+        if (! fdl_initialized_yet) {$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#114: FILE: dev.c:240:
+        if (! fdl_initialized_yet) {
             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: dev.c:241:
+                /* only do this once.. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: dev.c:242:
+                int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: dev.c:242:
+                int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: dev.c:243:
+                int idx = 0; /* into the hash table */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: dev.c:243:
+                int idx = 0; /* into the hash table */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: dev.c:244:
+                struct net_device* dev = dev_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: dev.c:244:
+                struct net_device* dev = dev_base;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#118: FILE: dev.c:244:
+                struct net_device* dev = dev_base;

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: dev.c:245:
+                struct dev_hash_node* dhn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: dev.c:245:
+                struct dev_hash_node* dhn;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#119: FILE: dev.c:245:
+                struct dev_hash_node* dhn;

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: dev.c:248:
+                printk(KERN_ERR "__fdl_ensure_init, doing real work...");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: dev.c:248:
+                printk(KERN_ERR "__fdl_ensure_init, doing real work...");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#122: FILE: dev.c:248:
+                printk(KERN_ERR "__fdl_ensure_init, doing real work...");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fdl_ensure_init', this function's name, in a string
#122: FILE: dev.c:248:
+                printk(KERN_ERR "__fdl_ensure_init, doing real work...");

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: dev.c:251:
+                fdl_initialized_yet = 1; /* it has been attempted at least... */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: dev.c:251:
+                fdl_initialized_yet = 1; /* it has been attempted at least... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: dev.c:253:
+                for (i = 0; i<FDL_HASH_LEN; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: dev.c:253:
+                for (i = 0; i<FDL_HASH_LEN; i++) {$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#127: FILE: dev.c:253:
+                for (i = 0; i<FDL_HASH_LEN; i++) {
                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: dev.c:254:
+                        fdl_name_base[i] = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: dev.c:254:
+                        fdl_name_base[i] = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: dev.c:255:
+                        fdl_idx_base[i] = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: dev.c:255:
+                        fdl_idx_base[i] = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: dev.c:256:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: dev.c:256:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: dev.c:258:
+                /* add any current devices to the hash tables at this time.  Note that$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: dev.c:259:
+                 * this method must be called with locks on the dev_base acquired.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: dev.c:260:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: dev.c:261:
+                while (dev) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: dev.c:261:
+                while (dev) {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#136: FILE: dev.c:262:
+                while (dev) {
+

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#138: FILE: dev.c:264:
+                        printk(KERN_ERR "__fdl_ensure_init, dev: %p dev: %s, idx: %i\n", dev, dev->name, idx);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: dev.c:264:
+                        printk(KERN_ERR "__fdl_ensure_init, dev: %p dev: %s, idx: %i\n", dev, dev->name, idx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: dev.c:264:
+                        printk(KERN_ERR "__fdl_ensure_init, dev: %p dev: %s, idx: %i\n", dev, dev->name, idx);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#138: FILE: dev.c:264:
+                        printk(KERN_ERR "__fdl_ensure_init, dev: %p dev: %s, idx: %i\n", dev, dev->name, idx);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fdl_ensure_init', this function's name, in a string
#138: FILE: dev.c:264:
+                        printk(KERN_ERR "__fdl_ensure_init, dev: %p dev: %s, idx: %i\n", dev, dev->name, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: dev.c:266:
+                        /* first, take care of the hash-by-name */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: dev.c:267:
+                        idx = fdl_calc_name_idx(dev->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: dev.c:267:
+                        idx = fdl_calc_name_idx(dev->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: dev.c:268:
+                        dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: dev.c:268:
+                        dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dhn)...) over kmalloc(sizeof(struct dev_hash_node)...)
#142: FILE: dev.c:268:
+                        dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: dev.c:269:
+                        if (dhn) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: dev.c:269:
+                        if (dhn) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: dev.c:270:
+                                dhn->dev = dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: dev.c:270:
+                                dhn->dev = dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: dev.c:271:
+                                dhn->next = fdl_name_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: dev.c:271:
+                                dhn->next = fdl_name_base[idx];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: dev.c:272:
+                                fdl_name_base[idx] = dhn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: dev.c:272:
+                                fdl_name_base[idx] = dhn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: dev.c:273:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: dev.c:273:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: dev.c:274:
+                        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: dev.c:274:
+                        else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#148: FILE: dev.c:274:
+                        }
+                        else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#148: FILE: dev.c:274:
+                        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: dev.c:275:
+                                /* Nasty..couldn't get memory... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: dev.c:276:
+                                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: dev.c:276:
+                                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: dev.c:277:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: dev.c:277:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: dev.c:279:
+                        /* now, do the hash-by-idx */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: dev.c:280:
+                        idx = fdl_calc_index_idx(dev->ifindex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: dev.c:280:
+                        idx = fdl_calc_index_idx(dev->ifindex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: dev.c:281:
+                        dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: dev.c:281:
+                        dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dhn)...) over kmalloc(sizeof(struct dev_hash_node)...)
#155: FILE: dev.c:281:
+                        dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: dev.c:282:
+                        if (dhn) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: dev.c:282:
+                        if (dhn) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: dev.c:283:
+                                dhn->dev = dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: dev.c:283:
+                                dhn->dev = dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: dev.c:284:
+                                dhn->next = fdl_idx_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: dev.c:284:
+                                dhn->next = fdl_idx_base[idx];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: dev.c:285:
+                                fdl_idx_base[idx] = dhn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: dev.c:285:
+                                fdl_idx_base[idx] = dhn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: dev.c:286:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: dev.c:286:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: dev.c:287:
+                        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: dev.c:287:
+                        else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#161: FILE: dev.c:287:
+                        }
+                        else {

CHECK:BRACES: Unbalanced braces around else statement
#161: FILE: dev.c:287:
+                        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: dev.c:288:
+                                /* Nasty..couldn't get memory... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: dev.c:289:
+                                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: dev.c:289:
+                                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: dev.c:290:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: dev.c:290:
+                        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: dev.c:291:
+         $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: dev.c:291:
+         $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: dev.c:291:
+         $

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: dev.c:292:
+                        dev = dev->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: dev.c:292:
+                        dev = dev->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: dev.c:293:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: dev.c:293:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: dev.c:294:
+                fdl_initialized_yet = 2; /* initialization actually worked */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: dev.c:294:
+                fdl_initialized_yet = 2; /* initialization actually worked */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: dev.c:295:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: dev.c:295:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: dev.c:297:
+        printk(KERN_ERR "__fdl_ensure_init, end, fdl_initialized_yet: %i\n", fdl_initialized_yet);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: dev.c:297:
+        printk(KERN_ERR "__fdl_ensure_init, end, fdl_initialized_yet: %i\n", fdl_initialized_yet);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#171: FILE: dev.c:297:
+        printk(KERN_ERR "__fdl_ensure_init, end, fdl_initialized_yet: %i\n", fdl_initialized_yet);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fdl_ensure_init', this function's name, in a string
#171: FILE: dev.c:297:
+        printk(KERN_ERR "__fdl_ensure_init, end, fdl_initialized_yet: %i\n", fdl_initialized_yet);

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: dev.c:299:
+        if (fdl_initialized_yet == 2) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: dev.c:299:
+        if (fdl_initialized_yet == 2) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#173: FILE: dev.c:299:
+        if (fdl_initialized_yet == 2) {
[...]
+        else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: dev.c:300:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: dev.c:300:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: dev.c:301:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: dev.c:301:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: dev.c:302:
+        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: dev.c:302:
+        else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#176: FILE: dev.c:302:
+        }
+        else {

CHECK:BRACES: Unbalanced braces around else statement
#176: FILE: dev.c:302:
+        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: dev.c:303:
+                return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: dev.c:303:
+                return -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: dev.c:304:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: dev.c:304:
+        }$

ERROR:SPACING: space required after that close brace '}'
#179: FILE: dev.c:305:
+}/* fdl_ensure_init */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: dev.c:307:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#185: FILE: dev.c:311:
+int __fdl_register_netdevice(struct net_device* dev) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#185: FILE: dev.c:311:
+int __fdl_register_netdevice(struct net_device* dev) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: dev.c:312:
+        if (__fdl_ensure_init() == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: dev.c:312:
+        if (__fdl_ensure_init() == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: dev.c:313:
+                /* first, take care of the hash-by-name */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: dev.c:314:
+                int idx = fdl_calc_name_idx(dev->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: dev.c:314:
+                int idx = fdl_calc_name_idx(dev->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: dev.c:315:
+                struct dev_hash_node* dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: dev.c:315:
+                struct dev_hash_node* dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#189: FILE: dev.c:315:
+                struct dev_hash_node* dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dhn)...) over kmalloc(sizeof(struct dev_hash_node)...)
#189: FILE: dev.c:315:
+                struct dev_hash_node* dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#192: FILE: dev.c:318:
+                printk(KERN_ERR "__fdl_register_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: dev.c:318:
+                printk(KERN_ERR "__fdl_register_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: dev.c:318:
+                printk(KERN_ERR "__fdl_register_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#192: FILE: dev.c:318:
+                printk(KERN_ERR "__fdl_register_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fdl_register_netdevice', this function's name, in a string
#192: FILE: dev.c:318:
+                printk(KERN_ERR "__fdl_register_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: dev.c:321:
+                if (dhn) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: dev.c:321:
+                if (dhn) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: dev.c:322:
+                        dhn->dev = dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: dev.c:322:
+                        dhn->dev = dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: dev.c:323:
+                        dhn->next = fdl_name_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: dev.c:323:
+                        dhn->next = fdl_name_base[idx];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: dev.c:324:
+                        fdl_name_base[idx] = dhn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: dev.c:324:
+                        fdl_name_base[idx] = dhn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: dev.c:325:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: dev.c:325:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: dev.c:326:
+                else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: dev.c:326:
+                else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#200: FILE: dev.c:326:
+                }
+                else {

CHECK:BRACES: Unbalanced braces around else statement
#200: FILE: dev.c:326:
+                else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: dev.c:327:
+                        /* Nasty..couldn't get memory... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: dev.c:328:
+                        /* Don't try to use these hash tables any more... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: dev.c:329:
+                        fdl_initialized_yet = 1; /* tried, but failed */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: dev.c:329:
+                        fdl_initialized_yet = 1; /* tried, but failed */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: dev.c:330:
+                        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: dev.c:330:
+                        return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: dev.c:331:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: dev.c:331:
+                }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: dev.c:332:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: dev.c:332:
+      $

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: dev.c:333:
+                /* now, do the hash-by-idx */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: dev.c:334:
+                idx = fdl_calc_index_idx(dev->ifindex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: dev.c:334:
+                idx = fdl_calc_index_idx(dev->ifindex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: dev.c:335:
+                dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: dev.c:335:
+                dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dhn)...) over kmalloc(sizeof(struct dev_hash_node)...)
#209: FILE: dev.c:335:
+                dhn = kmalloc(sizeof(struct dev_hash_node), GFP_ATOMIC);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#212: FILE: dev.c:338:
+                printk(KERN_ERR "__fdl_register_netdevice, ifindex: %i, idx: %i", dev->ifindex, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: dev.c:338:
+                printk(KERN_ERR "__fdl_register_netdevice, ifindex: %i, idx: %i", dev->ifindex, idx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: dev.c:338:
+                printk(KERN_ERR "__fdl_register_netdevice, ifindex: %i, idx: %i", dev->ifindex, idx);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#212: FILE: dev.c:338:
+                printk(KERN_ERR "__fdl_register_netdevice, ifindex: %i, idx: %i", dev->ifindex, idx);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fdl_register_netdevice', this function's name, in a string
#212: FILE: dev.c:338:
+                printk(KERN_ERR "__fdl_register_netdevice, ifindex: %i, idx: %i", dev->ifindex, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: dev.c:341:
+                if (dhn) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: dev.c:341:
+                if (dhn) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: dev.c:342:
+                        dhn->dev = dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: dev.c:342:
+                        dhn->dev = dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: dev.c:343:
+                        dhn->next = fdl_idx_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: dev.c:343:
+                        dhn->next = fdl_idx_base[idx];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: dev.c:344:
+                        fdl_idx_base[idx] = dhn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: dev.c:344:
+                        fdl_idx_base[idx] = dhn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: dev.c:345:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: dev.c:345:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: dev.c:346:
+                else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: dev.c:346:
+                else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#220: FILE: dev.c:346:
+                }
+                else {

CHECK:BRACES: Unbalanced braces around else statement
#220: FILE: dev.c:346:
+                else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: dev.c:347:
+                        /* Nasty..couldn't get memory... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: dev.c:348:
+                        /* Don't try to use these hash tables any more... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: dev.c:349:
+                        fdl_initialized_yet = 1; /* tried, but failed */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: dev.c:349:
+                        fdl_initialized_yet = 1; /* tried, but failed */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: dev.c:350:
+                        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: dev.c:350:
+                        return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: dev.c:351:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: dev.c:351:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: dev.c:352:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: dev.c:352:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: dev.c:353:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: dev.c:353:
+        return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: dev.c:356:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#235: FILE: dev.c:361:
+int __fdl_unregister_netdevice(struct net_device* dev) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#235: FILE: dev.c:361:
+int __fdl_unregister_netdevice(struct net_device* dev) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: dev.c:362:
+        int retval = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: dev.c:362:
+        int retval = -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: dev.c:363:
+        if (fdl_initialized_yet == 2) { /* If we've been initialized correctly... */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: dev.c:363:
+        int retval = -1;
+        if (fdl_initialized_yet == 2) { /* If we've been initialized correctly... */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: dev.c:363:
+        if (fdl_initialized_yet == 2) { /* If we've been initialized correctly... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: dev.c:364:
+                /* first, take care of the hash-by-name */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: dev.c:365:
+                int idx = fdl_calc_name_idx(dev->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: dev.c:365:
+                int idx = fdl_calc_name_idx(dev->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: dev.c:366:
+                struct dev_hash_node* prev = fdl_name_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: dev.c:366:
+                struct dev_hash_node* prev = fdl_name_base[idx];$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#240: FILE: dev.c:366:
+                struct dev_hash_node* prev = fdl_name_base[idx];

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: dev.c:367:
+                struct dev_hash_node* cur = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: dev.c:367:
+                struct dev_hash_node* cur = NULL;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#241: FILE: dev.c:367:
+                struct dev_hash_node* cur = NULL;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#244: FILE: dev.c:370:
+                printk(KERN_ERR "__fdl_unregister_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: dev.c:370:
+                printk(KERN_ERR "__fdl_unregister_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: dev.c:370:
+                printk(KERN_ERR "__fdl_unregister_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#244: FILE: dev.c:370:
+                printk(KERN_ERR "__fdl_unregister_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__fdl_unregister_netdevice', this function's name, in a string
#244: FILE: dev.c:370:
+                printk(KERN_ERR "__fdl_unregister_netdevice, dev: %p dev: %s, idx: %i", dev, dev->name, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: dev.c:373:
+                if (prev) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: dev.c:373:
+                if (prev) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: dev.c:374:
+                        if (strcmp(dev->name, prev->dev->name) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: dev.c:374:
+                        if (strcmp(dev->name, prev->dev->name) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: dev.c:375:
+                                /* it's the first one... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: dev.c:376:
+                                fdl_name_base[idx] = prev->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: dev.c:376:
+                                fdl_name_base[idx] = prev->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: dev.c:377:
+                                kfree(prev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: dev.c:377:
+                                kfree(prev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: dev.c:378:
+                                retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: dev.c:378:
+                                retval = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: dev.c:379:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: dev.c:379:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: dev.c:380:
+                        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: dev.c:380:
+                        else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#254: FILE: dev.c:380:
+                        }
+                        else {

CHECK:BRACES: Unbalanced braces around else statement
#254: FILE: dev.c:380:
+                        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: dev.c:381:
+                                cur = prev->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: dev.c:381:
+                                cur = prev->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: dev.c:382:
+                                while (cur) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: dev.c:382:
+                                while (cur) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: dev.c:383:
+                                        if (strcmp(dev->name, cur->dev->name) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: dev.c:383:
+                                        if (strcmp(dev->name, cur->dev->name) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: dev.c:384:
+                                                prev->next = cur->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: dev.c:384:
+                                                prev->next = cur->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: dev.c:385:
+                                                kfree(cur);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: dev.c:385:
+                                                kfree(cur);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: dev.c:386:
+                                                retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: dev.c:386:
+                                                retval = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: dev.c:387:
+                                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: dev.c:387:
+                                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: dev.c:388:
+                                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: dev.c:388:
+                                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: dev.c:389:
+                                        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: dev.c:389:
+                                        else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#263: FILE: dev.c:389:
+                                        }
+                                        else {

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: dev.c:389:
+                                        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: dev.c:390:
+                                                prev = cur;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: dev.c:390:
+                                                prev = cur;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: dev.c:391:
+                                                cur = cur->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: dev.c:391:
+                                                cur = cur->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: dev.c:392:
+                                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: dev.c:392:
+                                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: dev.c:393:
+                                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: dev.c:393:
+                                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: dev.c:394:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: dev.c:394:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: dev.c:395:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: dev.c:395:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: dev.c:397:
+                /* Now, the hash-by-index */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: dev.c:398:
+                idx = fdl_calc_index_idx(dev->ifindex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: dev.c:398:
+                idx = fdl_calc_index_idx(dev->ifindex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: dev.c:399:
+                prev = fdl_idx_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: dev.c:399:
+                prev = fdl_idx_base[idx];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: dev.c:400:
+                cur = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: dev.c:400:
+                cur = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: dev.c:401:
+                if (prev) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: dev.c:401:
+                if (prev) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: dev.c:402:
+                        if (dev->ifindex == prev->dev->ifindex) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: dev.c:402:
+                        if (dev->ifindex == prev->dev->ifindex) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: dev.c:403:
+                                /* it's the first one... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: dev.c:404:
+                                fdl_idx_base[idx] = prev->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: dev.c:404:
+                                fdl_idx_base[idx] = prev->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: dev.c:405:
+                                kfree(prev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: dev.c:405:
+                                kfree(prev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: dev.c:406:
+                                retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: dev.c:406:
+                                retval = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: dev.c:407:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: dev.c:407:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: dev.c:408:
+                        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: dev.c:408:
+                        else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#282: FILE: dev.c:408:
+                        }
+                        else {

CHECK:BRACES: Unbalanced braces around else statement
#282: FILE: dev.c:408:
+                        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: dev.c:409:
+                                cur = prev->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: dev.c:409:
+                                cur = prev->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: dev.c:410:
+                                while (cur) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: dev.c:410:
+                                while (cur) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: dev.c:411:
+                                        if (dev->ifindex == cur->dev->ifindex) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: dev.c:411:
+                                        if (dev->ifindex == cur->dev->ifindex) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: dev.c:412:
+                                                prev->next = cur->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: dev.c:412:
+                                                prev->next = cur->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: dev.c:413:
+                                                kfree(cur);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: dev.c:413:
+                                                kfree(cur);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: dev.c:414:
+                                                retval = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: dev.c:414:
+                                                retval = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: dev.c:415:
+                                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: dev.c:415:
+                                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: dev.c:416:
+                                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: dev.c:416:
+                                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: dev.c:417:
+                                        else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: dev.c:417:
+                                        else {$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#291: FILE: dev.c:417:
+                                        }
+                                        else {

CHECK:BRACES: Unbalanced braces around else statement
#291: FILE: dev.c:417:
+                                        else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: dev.c:418:
+                                                prev = cur;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: dev.c:418:
+                                                prev = cur;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: dev.c:419:
+                                                cur = cur->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: dev.c:419:
+                                                cur = cur->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: dev.c:420:
+                                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: dev.c:420:
+                                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: dev.c:421:
+                                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: dev.c:421:
+                                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: dev.c:422:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: dev.c:422:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: dev.c:423:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: dev.c:423:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: dev.c:424:
+        }/* if we ensured init OK */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: dev.c:424:
+        }/* if we ensured init OK */$

ERROR:SPACING: space required after that close brace '}'
#298: FILE: dev.c:424:
+        }/* if we ensured init OK */

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: dev.c:425:
+        return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: dev.c:425:
+        return retval;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#302: FILE: dev.c:428:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: dev.c:432:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: dev.c:652:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: dev.c:652:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: dev.c:652:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: dev.c:654:
+        int idx = fdl_calc_name_idx(name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: dev.c:654:
+        int idx = fdl_calc_name_idx(name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: dev.c:655:
+        struct dev_hash_node* dhn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: dev.c:655:
+        struct dev_hash_node* dhn;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#319: FILE: dev.c:655:
+        struct dev_hash_node* dhn;

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: dev.c:656:
+        if (fdl_initialized_yet == 2) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: dev.c:656:
+        struct dev_hash_node* dhn;
+        if (fdl_initialized_yet == 2) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: dev.c:656:
+        if (fdl_initialized_yet == 2) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: dev.c:658:
+                printk(KERN_ERR "__dev_get_by_name, name: %s  idx: %i\n", name, idx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: dev.c:658:
+                printk(KERN_ERR "__dev_get_by_name, name: %s  idx: %i\n", name, idx);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#322: FILE: dev.c:658:
+                printk(KERN_ERR "__dev_get_by_name, name: %s  idx: %i\n", name, idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: dev.c:660:
+                dhn = fdl_name_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: dev.c:660:
+                dhn = fdl_name_base[idx];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: dev.c:661:
+                while (dhn) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: dev.c:661:
+                while (dhn) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: dev.c:662:
+                        if (strcmp(dhn->dev->name, name) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: dev.c:662:
+                        if (strcmp(dhn->dev->name, name) == 0) {$

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#327: FILE: dev.c:663:
+                                /* printk(KERN_ERR "__dev_get_by_name, found it: %p\n", dhn->dev); */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: dev.c:663:
+                                /* printk(KERN_ERR "__dev_get_by_name, found it: %p\n", dhn->dev); */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: dev.c:664:
+                                return dhn->dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: dev.c:664:
+                                return dhn->dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: dev.c:665:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: dev.c:665:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: dev.c:666:
+                        dhn = dhn->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: dev.c:666:
+                        dhn = dhn->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: dev.c:667:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: dev.c:667:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: dev.c:668:
+                /* printk(KERN_ERR "__dev_get_by_name, didn't find it for name: %s\n", name); */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: dev.c:669:
+                return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: dev.c:669:
+                return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: dev.c:670:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: dev.c:670:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: dev.c:748:
+        int idx = fdl_calc_index_idx(ifindex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: dev.c:748:
+        int idx = fdl_calc_index_idx(ifindex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: dev.c:749:
+        struct dev_hash_node* dhn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: dev.c:749:
+        struct dev_hash_node* dhn;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#345: FILE: dev.c:749:
+        struct dev_hash_node* dhn;

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: dev.c:750:
+        if (fdl_initialized_yet == 2) { /* have we gone through initialization before... */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#346: FILE: dev.c:750:
+        struct dev_hash_node* dhn;
+        if (fdl_initialized_yet == 2) { /* have we gone through initialization before... */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: dev.c:750:
+        if (fdl_initialized_yet == 2) { /* have we gone through initialization before... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: dev.c:751:
+                dhn = fdl_idx_base[idx];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: dev.c:751:
+                dhn = fdl_idx_base[idx];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: dev.c:752:
+                while (dhn) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: dev.c:752:
+                while (dhn) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: dev.c:753:
+                        if (dhn->dev->ifindex == ifindex)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: dev.c:753:
+                        if (dhn->dev->ifindex == ifindex)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: dev.c:754:
+                                return dhn->dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: dev.c:754:
+                                return dhn->dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: dev.c:755:
+                        dhn = dhn->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: dev.c:755:
+                        dhn = dhn->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: dev.c:756:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: dev.c:756:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: dev.c:757:
+                return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: dev.c:757:
+                return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: dev.c:758:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: dev.c:758:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: dev.c:838:
+         *      Increased it to deal with VLAN interfaces.  It is unlikely$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: dev.c:839:
+         *      that this many will ever be added, but it can't hurt! -BLG$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: dev.c:2359:
+                        write_lock_bh(&dev_base_lock); /* gotta lock it to remove stuff */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: dev.c:2359:
+                        write_lock_bh(&dev_base_lock); /* gotta lock it to remove stuff */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: dev.c:2360:
+                        __fdl_unregister_netdevice(dev); /* remove it from the hash.. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: dev.c:2360:
+                        __fdl_unregister_netdevice(dev); /* remove it from the hash.. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: dev.c:2365:
+                        __fdl_register_netdevice(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: dev.c:2365:
+                        __fdl_register_netdevice(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: dev.c:2366:
+                        write_unlock_bh(&dev_base_lock); /* gotta lock it to add stuff too */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: dev.c:2366:
+                        write_unlock_bh(&dev_base_lock); /* gotta lock it to add stuff too */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: dev.c:2367:
+#endif                        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: dev.c:2642:
+                /* Must do this before dp is set to dev, or it could be added twice, once$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: dev.c:2643:
+                 * on initialization based on dev_base, and once again after that...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: dev.c:2644:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: dev.c:2645:
+                __fdl_register_netdevice(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: dev.c:2645:
+                __fdl_register_netdevice(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: dev.c:2702:
+        /* Must do this before dp is set to dev, or it could be added twice, once$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: dev.c:2703:
+         * on initialization based on dev_base, and once again after that...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: dev.c:2704:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: dev.c:2705:
+        __fdl_register_netdevice(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: dev.c:2705:
+        __fdl_register_netdevice(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: dev.c:2780:
+                        __fdl_unregister_netdevice(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: dev.c:2780:
+                        __fdl_unregister_netdevice(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: dev.c:2782:
+                        write_unlock_bh(&dev_base_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: dev.c:2782:
+                        write_unlock_bh(&dev_base_lock);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558029.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 241 errors, 207 warnings, 21 checks, 390 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558029.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
