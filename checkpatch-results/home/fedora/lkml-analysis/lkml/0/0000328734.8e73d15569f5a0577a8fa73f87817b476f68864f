WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -urN linux-2.4/arch/ia64/ia32/binfmt_elf32.c ppc64-linux-2.4/arch/ia64/ia32/binfmt_elf32.c

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#57: FILE: arch/s390x/kernel/binfmt_elf32.c:38:
+#define ELF_PLAT_INIT(_r, load_addr) \
 	do { \
 	_r->gprs[14] = 0; \
 	current->thread.flags |= S390_FLAG_31BIT; \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#126: FILE: include/asm-alpha/elf.h:53:
+#define ELF_PLAT_INIT(_r, load_addr)	_r->r0 = 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#126: FILE: include/asm-alpha/elf.h:53:
+#define ELF_PLAT_INIT(_r, load_addr)	_r->r0 = 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#138: FILE: include/asm-arm/elf.h:51:
+#define ELF_PLAT_INIT(_r, load_addr)	(_r)->ARM_r0 = 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#150: FILE: include/asm-cris/elf.h:42:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	(_r)->r13 = 0; (_r)->r12 = 0; (_r)->r11 = 0; (_r)->r10 = 0; \
 	(_r)->r9 = 0;  (_r)->r8 = 0;  (_r)->r7 = 0;  (_r)->r6 = 0;  \
 	(_r)->r5 = 0;  (_r)->r4 = 0;  (_r)->r3 = 0;  (_r)->r2 = 0;  \

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#162: FILE: include/asm-i386/elf.h:44:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	_r->ebx = 0; _r->ecx = 0; _r->edx = 0; \
 	_r->esi = 0; _r->edi = 0; _r->ebp = 0; \
 	_r->eax = 0; \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#162: FILE: include/asm-i386/elf.h:44:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	_r->ebx = 0; _r->ecx = 0; _r->edx = 0; \
 	_r->esi = 0; _r->edi = 0; _r->ebp = 0; \
 	_r->eax = 0; \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#198: FILE: include/asm-m68k/elf.h:34:
+#define ELF_PLAT_INIT(_r, load_addr)	_r->a1 = 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#198: FILE: include/asm-m68k/elf.h:34:
+#define ELF_PLAT_INIT(_r, load_addr)	_r->a1 = 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#210: FILE: include/asm-mips/elf.h:92:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	_r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;	\
 	_r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;	\
 	_r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#210: FILE: include/asm-mips/elf.h:92:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	_r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;	\
 	_r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;	\
 	_r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#222: FILE: include/asm-mips64/elf.h:90:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	_r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;	\
 	_r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;	\
 	_r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#222: FILE: include/asm-mips64/elf.h:90:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	_r->regs[1] = _r->regs[2] = _r->regs[3] = _r->regs[4] = 0;	\
 	_r->regs[5] = _r->regs[6] = _r->regs[7] = _r->regs[8] = 0;	\
 	_r->regs[9] = _r->regs[10] = _r->regs[11] = _r->regs[12] = 0;	\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#234: FILE: include/asm-parisc/elf.h:121:
+#define ELF_PLAT_INIT(_r, load_addr)       _r->gr[23] = 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#234: FILE: include/asm-parisc/elf.h:121:
+#define ELF_PLAT_INIT(_r, load_addr)       _r->gr[23] = 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: include/asm-ppc64/elf.h:91:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#270: FILE: include/asm-s390/elf.h:39:
+#define ELF_PLAT_INIT(_r, load_addr) \
 	_r->gprs[14] = 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#270: FILE: include/asm-s390/elf.h:39:
+#define ELF_PLAT_INIT(_r, load_addr) \
 	_r->gprs[14] = 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#282: FILE: include/asm-s390x/elf.h:39:
+#define ELF_PLAT_INIT(_r, load_addr) \
 	do { \
 	_r->gprs[14] = 0; \
 	current->thread.flags = 0; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#294: FILE: include/asm-sh/elf.h:64:
+#define ELF_PLAT_INIT(_r, load_addr) \
   do { _r->regs[0]=0; _r->regs[1]=0; _r->regs[2]=0; _r->regs[3]=0; \
        _r->regs[4]=0; _r->regs[5]=0; _r->regs[6]=0; _r->regs[7]=0; \
        _r->regs[8]=0; _r->regs[9]=0; _r->regs[10]=0; _r->regs[11]=0; \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#294: FILE: include/asm-sh/elf.h:64:
+#define ELF_PLAT_INIT(_r, load_addr) \
   do { _r->regs[0]=0; _r->regs[1]=0; _r->regs[2]=0; _r->regs[3]=0; \
        _r->regs[4]=0; _r->regs[5]=0; _r->regs[6]=0; _r->regs[7]=0; \
        _r->regs[8]=0; _r->regs[9]=0; _r->regs[10]=0; _r->regs[11]=0; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#306: FILE: include/asm-sh64/elf.h:76:
+#define ELF_PLAT_INIT(_r, load_addr) \
   do { _r->regs[0]=0; _r->regs[1]=0; _r->regs[2]=0; _r->regs[3]=0; \
        _r->regs[4]=0; _r->regs[5]=0; _r->regs[6]=0; _r->regs[7]=0; \
        _r->regs[8]=0; _r->regs[9]=0; _r->regs[10]=0; _r->regs[11]=0; \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_r' may be better as '(_r)' to avoid precedence issues
#306: FILE: include/asm-sh64/elf.h:76:
+#define ELF_PLAT_INIT(_r, load_addr) \
   do { _r->regs[0]=0; _r->regs[1]=0; _r->regs[2]=0; _r->regs[3]=0; \
        _r->regs[4]=0; _r->regs[5]=0; _r->regs[6]=0; _r->regs[7]=0; \
        _r->regs[8]=0; _r->regs[9]=0; _r->regs[10]=0; _r->regs[11]=0; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_r' - possible side-effects?
#318: FILE: include/asm-x86_64/elf.h:42:
+#define ELF_PLAT_INIT(_r, load_addr)	do { \
 	struct task_struct *cur = current; \
 	(_r)->rbx = 0; (_r)->rcx = 0; (_r)->rdx = 0; \
 	(_r)->rsi = 0; (_r)->rdi = 0; (_r)->rbp = 0; \

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328734.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 1 warnings, 19 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328734.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
