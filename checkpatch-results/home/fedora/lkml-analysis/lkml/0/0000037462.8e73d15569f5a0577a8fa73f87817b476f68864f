CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_LogicalDeviceInfo_T>
#52: FILE: drivers/block/DAC960.c:1883:
+	kzalloc(sizeof(DAC960_V2_LogicalDeviceInfo_T), GFP_ATOMIC);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_V2_PhysicalDeviceInfo_T>
#61: FILE: drivers/block/DAC960.c:2117:
+		kzalloc(sizeof(DAC960_V2_PhysicalDeviceInfo_T), GFP_ATOMIC);

CHECK:CAMELCASE: Avoid CamelCase: <DAC960_SCSI_Inquiry_UnitSerialNumber_T>
#70: FILE: drivers/block/DAC960.c:2126:
+	kzalloc(sizeof(DAC960_SCSI_Inquiry_UnitSerialNumber_T), GFP_ATOMIC);

CHECK:SPACING: No space is necessary after a cast
#100: FILE: drivers/block/DAC960.c:5721:
+	(unsigned char *) kzalloc(NewStatusBufferLength, GFP_ATOMIC);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <NewStatusBufferLength>
#100: FILE: drivers/block/DAC960.c:5721:
+	(unsigned char *) kzalloc(NewStatusBufferLength, GFP_ATOMIC);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#100: FILE: drivers/block/DAC960.c:5721:
+	(unsigned char *) kzalloc(NewStatusBufferLength, GFP_ATOMIC);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: drivers/block/DAC960.c:5727:
+    kzalloc(2 * Controller->CombinedStatusBufferLength, GFP_ATOMIC);$

CHECK:CAMELCASE: Avoid CamelCase: <Controller>
#107: FILE: drivers/block/DAC960.c:5727:
+    kzalloc(2 * Controller->CombinedStatusBufferLength, GFP_ATOMIC);

CHECK:CAMELCASE: Avoid CamelCase: <CombinedStatusBufferLength>
#107: FILE: drivers/block/DAC960.c:5727:
+    kzalloc(2 * Controller->CombinedStatusBufferLength, GFP_ATOMIC);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#120: FILE: drivers/block/amiflop.c:1676:
GFP_KERNEL)) == NULL) {

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#121: FILE: drivers/block/amiflop.c:1677:
+		if ((unit[drive].trackbuf = kzalloc(FLOPPY_MAX_SECTORS * 512,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: drivers/block/amiflop.c:1678:
+		if ((unit[drive].trackbuf = kzalloc(FLOPPY_MAX_SECTORS * 512,
 			printk("no mem for ");

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#175: FILE: drivers/block/cciss.c:1037:
+			buff_size = (int *)kzalloc(MAXSGENTRIES * sizeof(int),

CHECK:CAMELCASE: Avoid CamelCase: <ReadCapdata_struct>
#193: FILE: drivers/block/cciss.c:1349:
+	size_buff = kzalloc(sizeof(ReadCapdata_struct), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <InquiryData_struct>
#197: FILE: drivers/block/cciss.c:1352:
+	inq_buff = kzalloc(sizeof(InquiryData_struct), GFP_KERNEL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#259: FILE: drivers/block/cpqarray.c:427:
+	hba[i]->cmd_pool_bits = kzalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#338: FILE: drivers/block/cpqarray.c:1620:
+	id_ctlr_buf = (id_ctlr_t *)kzalloc(sizeof(id_ctlr_t), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#347: FILE: drivers/block/cpqarray.c:1655:
+	id_ldrive = (id_log_drv_t *)kzalloc(sizeof(id_log_drv_t), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#355: FILE: drivers/block/cpqarray.c:1662:
+	id_ctlr_buf = (id_ctlr_t *)kzalloc(sizeof(id_ctlr_t), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#375: FILE: drivers/block/cpqarray.c:1679:
+	sense_config_buf = (config_t *)kzalloc(sizeof(config_t), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#400: FILE: drivers/block/loop.c:1263:
+	loop_dev = kzalloc(max_loop * sizeof(struct loop_device), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#406: FILE: drivers/block/loop.c:1266:
+	disks = kzalloc(max_loop * sizeof(struct gendisk *), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bio)...) over kzalloc(sizeof(struct bio)...)
#445: FILE: drivers/block/pktcdvd.c:109:
+	bio = kzalloc(sizeof(struct bio), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 9 warnings, 12 checks, 334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
