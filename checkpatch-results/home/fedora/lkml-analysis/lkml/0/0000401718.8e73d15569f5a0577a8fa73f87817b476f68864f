WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
diff -u -p -r linux/include/net/irda-d4/af_irda.h linux/include/net/irda/af_irda.h

CHECK:SPACING: No space is necessary after a cast
#75: FILE: include/net/irda/discovery.h:61:
+#define u16ho(array) (* ((__u16 *) array))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#75: FILE: include/net/irda/discovery.h:61:
+#define u16ho(array) (* ((__u16 *) array))
                       ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#85: FILE: include/net/irda/discovery.h:74:
+typedef struct irda_device_info		discinfo_t;	/* linux/irda.h */

WARNING:TYPO_SPELLING: 'Lenght' may be misspelled - perhaps 'Length'?
#95: FILE: include/net/irda/discovery.h:83:
+	int		name_len;	/* Lenght of nickname */
 	   		         	   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#112: FILE: include/net/irda/discovery.h:87:
+					 * address? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#114: FILE: include/net/irda/discovery.h:89:
+					 * discovering */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'discinfo_t *' should also have an identifier name
#135: FILE: include/net/irda/irlan_client.h:37:
+void irlan_client_discovery_indication(discinfo_t *, DISCOVERY_MODE, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'DISCOVERY_MODE' should also have an identifier name
#135: FILE: include/net/irda/irlan_client.h:37:
+void irlan_client_discovery_indication(discinfo_t *, DISCOVERY_MODE, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#135: FILE: include/net/irda/irlan_client.h:37:
+void irlan_client_discovery_indication(discinfo_t *, DISCOVERY_MODE, void *);

CHECK:SPACING: No space is necessary after a cast
#302: FILE: net/irda/af_irda.c:2016:
+		self->mask.word = (__u16) opt;

ERROR:SPACING: space required before the open parenthesis '('
#309: FILE: net/irda/af_irda.c:2020:
+		if(!self->mask.word)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node->data.saddr == new->data.saddr'
#402: FILE: net/irda/discovery.c:79:
+		if ((node->data.saddr == new->data.saddr) &&
+		    ((node->data.daddr == new->data.daddr) || 
+		     (strcmp(node->data.info, new->data.info) == 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node->data.daddr == new->data.daddr'
#402: FILE: net/irda/discovery.c:79:
+		if ((node->data.saddr == new->data.saddr) &&
+		    ((node->data.daddr == new->data.daddr) || 
+		     (strcmp(node->data.info, new->data.info) == 0)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: net/irda/discovery.c:80:
+^I^I    ((node->data.daddr == new->data.daddr) || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#413: FILE: net/irda/discovery.c:88:
+			if(u16ho(node->data.hints) == u16ho(new->data.hints))

CHECK:SPACING: No space is necessary after a cast
#423: FILE: net/irda/discovery.c:96:
+	hashbin_insert(cachelog, (irda_queue_t *) new, new->data.daddr, NULL);

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#433: FILE: net/irda/discovery.c:150:
+	discovery_t *		discovery;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#434: FILE: net/irda/discovery.c:151:
+	discovery_t *		curr;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#436: FILE: net/irda/discovery.c:153:
+	discinfo_t *		buffer = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "log"
#440: FILE: net/irda/discovery.c:157:
+	ASSERT(log != NULL, return;);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr->data.saddr == saddr'
#455: FILE: net/irda/discovery.c:169:
+		if ((curr->data.saddr == saddr) &&
 		    (force ||
 		     ((jiffies - curr->timestamp) > DISCOVERY_EXPIRE_TIMEOUT)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#465: FILE: net/irda/discovery.c:177:
+			 * by not calling kmalloc. Jean II */

ERROR:SPACING: space required before the open parenthesis '('
#466: FILE: net/irda/discovery.c:178:
+			if(buffer == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#466: FILE: net/irda/discovery.c:178:
+			if(buffer == NULL) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#469: FILE: net/irda/discovery.c:181:
+				buffer = kmalloc(n * sizeof(struct irda_device_info), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#470: FILE: net/irda/discovery.c:182:
+				if (buffer == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#475: FILE: net/irda/discovery.c:187:
+
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buffer[i]
#478: FILE: net/irda/discovery.c:190:
+			memcpy(&(buffer[i]), &(curr->data),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around curr->data
#478: FILE: net/irda/discovery.c:190:
+			memcpy(&(buffer[i]), &(curr->data),

WARNING:TYPO_SPELLING: 'interupted' may be misspelled - perhaps 'interrupted'?
#492: FILE: net/irda/discovery.c:204:
+	 * don't care to be interupted. - Jean II */
 	                    ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#492: FILE: net/irda/discovery.c:204:
+	 * don't care to be interupted. - Jean II */

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: net/irda/discovery.c:207:
+	if(buffer == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#495: FILE: net/irda/discovery.c:207:
+	if(buffer == NULL)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#505: FILE: net/irda/discovery.c:217:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: net/irda/discovery.c:234:
+^I^IIRDA_DEBUG(0, "  saddr=%08x\n", discovery->data.saddr); $

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#540: FILE: net/irda/discovery.c:265:
+	discovery_t *		discovery;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#542: FILE: net/irda/discovery.c:267:
+	discinfo_t *		buffer = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "log"
#548: FILE: net/irda/discovery.c:273:
+	ASSERT(log != NULL, return NULL;);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "discovery"
#570: FILE: net/irda/discovery.c:279:
+	while (discovery != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#573: FILE: net/irda/discovery.c:282:
+		 * the most recent one (unless we want old ones) */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#576: FILE: net/irda/discovery.c:285:
+		     ((jiffies - discovery->firststamp) < j_timeout)) ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#581: FILE: net/irda/discovery.c:290:
+			 * by not calling kmalloc. Jean II */

ERROR:SPACING: space required before the open parenthesis '('
#582: FILE: net/irda/discovery.c:291:
+			if(buffer == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#582: FILE: net/irda/discovery.c:291:
+			if(buffer == NULL) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#585: FILE: net/irda/discovery.c:294:
+				buffer = kmalloc(n * sizeof(struct irda_device_info), GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#586: FILE: net/irda/discovery.c:295:
+				if (buffer == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#591: FILE: net/irda/discovery.c:300:
+
+			}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buffer[i]
#601: FILE: net/irda/discovery.c:303:
+			memcpy(&(buffer[i]), &(discovery->data),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around discovery->data
#601: FILE: net/irda/discovery.c:303:
+			memcpy(&(buffer[i]), &(discovery->data),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#632: FILE: net/irda/discovery.c:375:
+		len += sprintf(buf+len, "nickname: %s,", discovery->data.info);
 		                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#637: FILE: net/irda/discovery.c:378:
+^I^I^I       discovery->data.hints[0], $

ERROR:SPACING: space prohibited after that open parenthesis '('
#641: FILE: net/irda/discovery.c:381:
+		if ( discovery->data.hints[0] & HINT_PNP)

ERROR:SPACING: space prohibited after that open parenthesis '('
#644: FILE: net/irda/discovery.c:383:
+		if ( discovery->data.hints[0] & HINT_PDA)

ERROR:SPACING: space prohibited after that open parenthesis '('
#647: FILE: net/irda/discovery.c:385:
+		if ( discovery->data.hints[0] & HINT_COMPUTER)

ERROR:SPACING: space prohibited after that open parenthesis '('
#650: FILE: net/irda/discovery.c:387:
+		if ( discovery->data.hints[0] & HINT_PRINTER)

ERROR:SPACING: space prohibited after that open parenthesis '('
#653: FILE: net/irda/discovery.c:389:
+		if ( discovery->data.hints[0] & HINT_MODEM)

ERROR:SPACING: space prohibited after that open parenthesis '('
#656: FILE: net/irda/discovery.c:391:
+		if ( discovery->data.hints[0] & HINT_FAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#659: FILE: net/irda/discovery.c:393:
+		if ( discovery->data.hints[0] & HINT_LAN)

ERROR:SPACING: space prohibited after that open parenthesis '('
#663: FILE: net/irda/discovery.c:396:
+		if ( discovery->data.hints[1] & HINT_TELEPHONY)

ERROR:SPACING: space prohibited after that open parenthesis '('
#666: FILE: net/irda/discovery.c:398:
+		if ( discovery->data.hints[1] & HINT_FILE_SERVER)

ERROR:SPACING: space prohibited after that open parenthesis '('
#669: FILE: net/irda/discovery.c:400:
+		if ( discovery->data.hints[1] & HINT_COMM)

ERROR:SPACING: space prohibited after that open parenthesis '('
#672: FILE: net/irda/discovery.c:402:
+		if ( discovery->data.hints[1] & HINT_OBEX)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#807: FILE: net/irda/irlap_frame.c:429:
+	IRDA_DEBUG(4, "%s(), daddr=%08x\n", __FUNCTION__,

WARNING:TYPO_SPELLING: 'explicity' may be misspelled - perhaps 'explicitly'?
#1026: FILE: net/irda/irlmp.c:928:
+	 * explicity request a dump of the log. Jean II
 	   ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!discoveries"
#1042: FILE: net/irda/irlmp.c:934:
+	if (discoveries == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#1046: FILE: net/irda/irlmp.c:938:
+	for(i = 0; i < number; i++)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around discoveries[i]
#1047: FILE: net/irda/irlmp.c:939:
+		client->disco_callback(&(discoveries[i]), mode, client->priv);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "expiries"
#1083: FILE: net/irda/irlmp.c:994:
+	ASSERT(expiries != NULL, return;);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1094: FILE: net/irda/irlmp.c:1000:
 					 (void *) &client_next) ) {
+

ERROR:SPACING: space required before the open parenthesis '('
#1096: FILE: net/irda/irlmp.c:1002:
+		for(i = 0; i < number; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'client->expir_callback'
#1098: FILE: net/irda/irlmp.c:1004:
+			if ((client->expir_callback) &&
+			    (client->hint_mask.word & u16ho(expiries[i].hints)
+			     & 0x7f7f) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1100: FILE: net/irda/irlmp.c:1006:
+			     & 0x7f7f) )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around expiries[i]
#1101: FILE: net/irda/irlmp.c:1007:
+				client->expir_callback(&(expiries[i]),

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1135: FILE: net/irda/irlmp.c:1277:
+#if 0

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#1283: FILE: net/irda/irnet/irnet_irda.c:1636:
+irnet_discovery_indication(discinfo_t *		discovery,

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#1316: FILE: net/irda/irnet/irnet_irda.c:1666:
+irnet_expiry_indication(discinfo_t *	expiry,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000401718.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 19 warnings, 27 checks, 1211 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000401718.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
