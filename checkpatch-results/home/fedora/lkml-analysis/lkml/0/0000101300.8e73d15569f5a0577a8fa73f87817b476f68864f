WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#82: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: include/linux/task_ref.h:1:
+#ifndef _LINUX_TASK_REF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'comparision' may be misspelled - perhaps 'comparison'?
#101: FILE: include/linux/task_ref.h:15:
+ * By comparision a task_ref is between 16 and 20 bytes.
       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#125: FILE: include/linux/task_ref.h:39:
+struct task_ref
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/task_ref.h:56:
+extern void tref_put(struct task_ref *ref);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/task_ref.h:57:
+extern struct task_ref *tref_get(struct task_ref *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/task_ref.h:58:
+extern struct task_ref *tref_get_by_task(task_t *task, enum pid_type type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/task_ref.h:59:
+extern struct task_ref *tref_get_by_pid(int pid, enum pid_type type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/task_ref.h:61:
+extern void tref_init(struct task_ref **dst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/task_ref.h:62:
+extern void tref_set(struct task_ref **dst, struct task_ref *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/task_ref.h:63:
+extern void tref_reset(struct task_ref **dst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/linux/task_ref.h:64:
+extern void tref_fini(struct task_ref **dst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/task_ref.h:66:
+extern struct task_struct *get_tref_task(const struct task_ref *tref);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: include/linux/task_ref.h:68:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#249: FILE: kernel/task_ref.c:1:
+#include <linux/sched.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: kernel/task_ref.c:16:
+		struct task_struct *task;
+		BUG_ON(ref == &init_tref);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#264: FILE: kernel/task_ref.c:16:
+		BUG_ON(ref == &init_tref);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: kernel/task_ref.c:37:
+	struct pid *pid;
+	might_sleep();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: kernel/task_ref.c:38:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#305: FILE: kernel/task_ref.c:57:
+		if (ref)
[...]
+		else if (pid->nr) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#312: FILE: kernel/task_ref.c:64:
+			pid->ref = ref = new_ref;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#337: FILE: kernel/task_ref.c:89:
+	if (task) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#341: FILE: kernel/task_ref.c:93:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#369: FILE: kernel/task_ref.c:121:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: kernel/task_ref.c:125:
+	struct task_struct *task;
+	read_lock(&tasklist_lock);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 14 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000101300.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
