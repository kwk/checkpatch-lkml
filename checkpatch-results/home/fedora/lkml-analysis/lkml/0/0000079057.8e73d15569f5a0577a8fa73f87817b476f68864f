WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#31: 
Signed-off-by:  Don Zickus <dzickus@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#55: FILE: arch/i386/kernel/nmi.c:27:
+#include <asm/kdebug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#106: FILE: arch/i386/kernel/nmi.c:77:
+};
+static DEFINE_PER_CPU(struct nmi_watchdog_ctlblk, nmi_watchdog_ctlblk);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#136: FILE: arch/i386/kernel/nmi.c:83:
+extern void show_registers(struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#137: FILE: arch/i386/kernel/nmi.c:84:
+extern int unknown_nmi_panic;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog == NMI_NONE'
#164: FILE: arch/i386/kernel/nmi.c:222:
+	if ((nmi_watchdog == NMI_NONE) || (nmi_watchdog == NMI_DEFAULT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog == NMI_DEFAULT'
#164: FILE: arch/i386/kernel/nmi.c:222:
+	if ((nmi_watchdog == NMI_NONE) || (nmi_watchdog == NMI_DEFAULT))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi >= NMI_INVALID'
#204: FILE: arch/i386/kernel/nmi.c:285:
+	if ((nmi >= NMI_INVALID) || (nmi < NMI_NONE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi < NMI_NONE'
#204: FILE: arch/i386/kernel/nmi.c:285:
+	if ((nmi >= NMI_INVALID) || (nmi < NMI_NONE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi == NMI_LOCAL_APIC'
#229: FILE: arch/i386/kernel/nmi.c:292:
+	if ((nmi == NMI_LOCAL_APIC) && (nmi_known_cpu() == 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: arch/i386/kernel/nmi.c:302:
+	BUG_ON(nmi_watchdog != NMI_LOCAL_APIC);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: arch/i386/kernel/nmi.c:309:
+	BUG_ON(atomic_read(&nmi_active) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#279: FILE: arch/i386/kernel/nmi.c:314:
+	BUG_ON(nmi_watchdog != NMI_LOCAL_APIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#299: FILE: arch/i386/kernel/nmi.c:357:
+	BUG_ON(nmi_watchdog != NMI_IO_APIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#310: FILE: arch/i386/kernel/nmi.c:365:
+	BUG_ON(atomic_read(&nmi_active) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: arch/i386/kernel/nmi.c:370:
+	BUG_ON(nmi_watchdog != NMI_IO_APIC);

ERROR:SPACING: space prohibited after that open parenthesis '('
#347: FILE: arch/i386/kernel/nmi.c:419:
+	if ( atomic_read(&nmi_active) < 0 )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#347: FILE: arch/i386/kernel/nmi.c:419:
+	if ( atomic_read(&nmi_active) < 0 )

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#368: FILE: arch/i386/kernel/nmi.c:448:
+/* Note that these events don't tick when the CPU idles. This means
+   the frequency varies with CPU load. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#368: FILE: arch/i386/kernel/nmi.c:448:
+   the frequency varies with CPU load. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#370: FILE: arch/i386/kernel/nmi.c:450:
+#define K7_EVNTSEL_ENABLE	(1 << 22)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#371: FILE: arch/i386/kernel/nmi.c:451:
+#define K7_EVNTSEL_INT		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#372: FILE: arch/i386/kernel/nmi.c:452:
+#define K7_EVNTSEL_OS		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#373: FILE: arch/i386/kernel/nmi.c:453:
+#define K7_EVNTSEL_USR		(1 << 16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#416: FILE: arch/i386/kernel/nmi.c:488:
+	wd->check_bit = 1ULL<<63;
 	                    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#435: FILE: arch/i386/kernel/nmi.c:506:
+#define P6_EVNTSEL0_ENABLE	(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#436: FILE: arch/i386/kernel/nmi.c:507:
+#define P6_EVNTSEL_INT		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#437: FILE: arch/i386/kernel/nmi.c:508:
+#define P6_EVNTSEL_OS		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#438: FILE: arch/i386/kernel/nmi.c:509:
+#define P6_EVNTSEL_USR		(1 << 16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#481: FILE: arch/i386/kernel/nmi.c:544:
+	wd->check_bit = 1ULL<<39;
 	                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#501: FILE: arch/i386/kernel/nmi.c:563:
+/* Note that these events don't tick when the CPU idles. This means
+   the frequency varies with CPU load. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: arch/i386/kernel/nmi.c:563:
+   the frequency varies with CPU load. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#503: FILE: arch/i386/kernel/nmi.c:565:
+#define MSR_P4_MISC_ENABLE_PERF_AVAIL	(1<<7)
                                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#503: FILE: arch/i386/kernel/nmi.c:565:
+#define MSR_P4_MISC_ENABLE_PERF_AVAIL	(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#504: FILE: arch/i386/kernel/nmi.c:566:
+#define P4_ESCR_EVENT_SELECT(N)	((N)<<25)
                                	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#505: FILE: arch/i386/kernel/nmi.c:567:
+#define P4_ESCR_OS		(1<<3)
                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#505: FILE: arch/i386/kernel/nmi.c:567:
+#define P4_ESCR_OS		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#506: FILE: arch/i386/kernel/nmi.c:568:
+#define P4_ESCR_USR		(1<<2)
                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#506: FILE: arch/i386/kernel/nmi.c:568:
+#define P4_ESCR_USR		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#507: FILE: arch/i386/kernel/nmi.c:569:
+#define P4_CCCR_OVF_PMI0	(1<<26)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#507: FILE: arch/i386/kernel/nmi.c:569:
+#define P4_CCCR_OVF_PMI0	(1<<26)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#508: FILE: arch/i386/kernel/nmi.c:570:
+#define P4_CCCR_OVF_PMI1	(1<<27)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#508: FILE: arch/i386/kernel/nmi.c:570:
+#define P4_CCCR_OVF_PMI1	(1<<27)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#509: FILE: arch/i386/kernel/nmi.c:571:
+#define P4_CCCR_THRESHOLD(N)	((N)<<20)
                             	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#510: FILE: arch/i386/kernel/nmi.c:572:
+#define P4_CCCR_COMPLEMENT	(1<<19)
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#510: FILE: arch/i386/kernel/nmi.c:572:
+#define P4_CCCR_COMPLEMENT	(1<<19)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#511: FILE: arch/i386/kernel/nmi.c:573:
+#define P4_CCCR_COMPARE		(1<<18)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#511: FILE: arch/i386/kernel/nmi.c:573:
+#define P4_CCCR_COMPARE		(1<<18)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#512: FILE: arch/i386/kernel/nmi.c:574:
+#define P4_CCCR_REQUIRED	(3<<16)
                         	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#513: FILE: arch/i386/kernel/nmi.c:575:
+#define P4_CCCR_ESCR_SELECT(N)	((N)<<13)
                               	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#514: FILE: arch/i386/kernel/nmi.c:576:
+#define P4_CCCR_ENABLE		(1<<12)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#514: FILE: arch/i386/kernel/nmi.c:576:
+#define P4_CCCR_ENABLE		(1<<12)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#515: FILE: arch/i386/kernel/nmi.c:577:
+#define P4_CCCR_OVF ^I^I(1<<31)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#515: FILE: arch/i386/kernel/nmi.c:577:
+#define P4_CCCR_OVF 		(1<<31)
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#515: FILE: arch/i386/kernel/nmi.c:577:
+#define P4_CCCR_OVF 		(1<<31)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#517: FILE: arch/i386/kernel/nmi.c:579:
+/* Set up IQ_COUNTER0 to behave like a clock, by having IQ_CCCR0 filter
+   CRU_ESCR0 (with any non-null event selector) through a complemented

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: arch/i386/kernel/nmi.c:580:
+   max threshold. [IA32-Vol3, Section 14.9.9] */

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: arch/i386/kernel/nmi.c:599:
+        ^Iebx = cpuid_ebx(1);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#542: FILE: arch/i386/kernel/nmi.c:599:
+        ^Iebx = cpuid_ebx(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: arch/i386/kernel/nmi.c:599:
+        ^Iebx = cpuid_ebx(1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: arch/i386/kernel/nmi.c:600:
+^I        apicid = (ebx >> 24) & 0xff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: arch/i386/kernel/nmi.c:601:
+        ^Iht_num = apicid & 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: arch/i386/kernel/nmi.c:601:
+        ^Iht_num = apicid & 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: arch/i386/kernel/nmi.c:601:
+        ^Iht_num = apicid & 1;$

CHECK:BRACES: Unbalanced braces around else statement
#545: FILE: arch/i386/kernel/nmi.c:602:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: arch/i386/kernel/nmi.c:632:
+^I ^I| P4_ESCR_OS$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#580: FILE: arch/i386/kernel/nmi.c:632:
+^I ^I| P4_ESCR_OS$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#598: FILE: arch/i386/kernel/nmi.c:649:
+	wd->check_bit = 1ULL<<39;
 	                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#631: FILE: arch/i386/kernel/nmi.c:668:
+void setup_apic_nmi_watchdog (void *unused)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_LOCAL_APIC'
#634: FILE: arch/i386/kernel/nmi.c:671:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_IO_APIC'
#634: FILE: arch/i386/kernel/nmi.c:671:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: arch/i386/kernel/nmi.c:673:
+^I    ^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#636: FILE: arch/i386/kernel/nmi.c:673:
+^I    ^Ireturn;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_LOCAL_APIC'
#682: FILE: arch/i386/kernel/nmi.c:714:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_IO_APIC'
#682: FILE: arch/i386/kernel/nmi.c:714:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: arch/i386/kernel/nmi.c:716:
+^I    ^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#684: FILE: arch/i386/kernel/nmi.c:716:
+^I    ^Ireturn;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#724: FILE: arch/i386/kernel/nmi.c:783:
+void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#724: FILE: arch/i386/kernel/nmi.c:783:
+void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#724: FILE: arch/i386/kernel/nmi.c:783:
+void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason)

ERROR:SPACING: space required before the open brace '{'
#776: FILE: arch/i386/kernel/nmi.c:825:
+			if (dummy & wd->check_bit){

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: arch/i386/kernel/nmi.c:831:
+^I ^I^Iif (wd->cccr_msr != 0) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#782: FILE: arch/i386/kernel/nmi.c:831:
+^I ^I^Iif (wd->cccr_msr != 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: arch/i386/kernel/nmi.c:832:
+^I ^I^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#783: FILE: arch/i386/kernel/nmi.c:832:
+^I ^I^I^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: arch/i386/kernel/nmi.c:833:
+^I ^I^I^I * P4 quirks:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#784: FILE: arch/i386/kernel/nmi.c:833:
+^I ^I^I^I * P4 quirks:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#785: FILE: arch/i386/kernel/nmi.c:834:
+^I ^I^I^I * - An overflown perfctr will assert its interrupt$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#785: FILE: arch/i386/kernel/nmi.c:834:
+^I ^I^I^I * - An overflown perfctr will assert its interrupt$

ERROR:CODE_INDENT: code indent should use tabs where possible
#786: FILE: arch/i386/kernel/nmi.c:835:
+^I ^I^I^I *   until the OVF flag in its CCCR is cleared.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#786: FILE: arch/i386/kernel/nmi.c:835:
+^I ^I^I^I *   until the OVF flag in its CCCR is cleared.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: arch/i386/kernel/nmi.c:836:
+^I ^I^I^I * - LVTPC is masked on interrupt and must be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#787: FILE: arch/i386/kernel/nmi.c:836:
+^I ^I^I^I * - LVTPC is masked on interrupt and must be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: arch/i386/kernel/nmi.c:837:
+^I ^I^I^I *   unmasked by the LVTPC handler.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#788: FILE: arch/i386/kernel/nmi.c:837:
+^I ^I^I^I *   unmasked by the LVTPC handler.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#789: FILE: arch/i386/kernel/nmi.c:838:
+^I ^I^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#789: FILE: arch/i386/kernel/nmi.c:838:
+^I ^I^I^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#792: FILE: arch/i386/kernel/nmi.c:841:
+^I ^I^I^Iwrmsrl(wd->cccr_msr, dummy);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#792: FILE: arch/i386/kernel/nmi.c:841:
+^I ^I^I^Iwrmsrl(wd->cccr_msr, dummy);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: arch/i386/kernel/nmi.c:842:
+^I ^I^I^Iapic_write(APIC_LVTPC, APIC_DM_NMI);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#793: FILE: arch/i386/kernel/nmi.c:842:
+^I ^I^I^Iapic_write(APIC_LVTPC, APIC_DM_NMI);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#794: FILE: arch/i386/kernel/nmi.c:843:
+^I ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#794: FILE: arch/i386/kernel/nmi.c:843:
+^I ^I^I}$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#795: FILE: arch/i386/kernel/nmi.c:844:
+	 		}
+			else if (wd->perfctr_msr == MSR_P6_PERFCTR0) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#798: FILE: arch/i386/kernel/nmi.c:847:
+				 * other P6 variant */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#833: FILE: include/asm-i386/nmi.h:35:
+extern void setup_apic_nmi_watchdog (void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#833: FILE: include/asm-i386/nmi.h:35:
+extern void setup_apic_nmi_watchdog (void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#833: FILE: include/asm-i386/nmi.h:35:
+extern void setup_apic_nmi_watchdog (void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#839: FILE: include/asm-i386/nmi.h:40:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#839: FILE: include/asm-i386/nmi.h:40:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#839: FILE: include/asm-i386/nmi.h:40:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#839: FILE: include/asm-i386/nmi.h:40:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079057.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 42 warnings, 47 checks, 789 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000079057.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
