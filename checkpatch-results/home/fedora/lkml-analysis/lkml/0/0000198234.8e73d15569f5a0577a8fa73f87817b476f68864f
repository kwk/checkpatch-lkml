WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: mm/bigphysarea.c:1:
+/* linux/mm/bigphysarea.c, M. Welsh (mdw@xxxxxxxxxxxxxx)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#66: FILE: mm/bigphysarea.c:1:
+/* linux/mm/bigphysarea.c, M. Welsh (mdw@xxxxxxxxxxxxxx)

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#92: FILE: mm/bigphysarea.c:27:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: mm/bigphysarea.c:28:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#110: FILE: mm/bigphysarea.c:45:
+static int get_info(char* buf, char**, off_t, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#112: FILE: mm/bigphysarea.c:47:
+typedef struct range_struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: mm/bigphysarea.c:48:
+       struct range_struct *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: mm/bigphysarea.c:49:
+       caddr_t base;                   /* base of allocated block */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: mm/bigphysarea.c:50:
+       size_t  size;                   /* size in bytes */$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#123: FILE: mm/bigphysarea.c:58:
+static int     init_level = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#124: FILE: mm/bigphysarea.c:59:
+static int     bigphysarea_pages = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#125: FILE: mm/bigphysarea.c:60:
+static caddr_t bigphysarea = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#126: FILE: mm/bigphysarea.c:61:
+static range_t *free_list = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#127: FILE: mm/bigphysarea.c:62:
+static range_t *used_list = NULL;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#128: FILE: mm/bigphysarea.c:63:
+static struct resource mem_resource = { "Bigphysarea", 0, 0, IORESOURCE_MEM|IORESOURCE_BUSY };
                                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: mm/bigphysarea.c:68:
+       if (bigphysarea_pages == 0 || bigphysarea == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#133: FILE: mm/bigphysarea.c:68:
+       if (bigphysarea_pages == 0 || bigphysarea == 0)
+               return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: mm/bigphysarea.c:69:
+               return -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: mm/bigphysarea.c:69:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: mm/bigphysarea.c:72:
+       if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#137: FILE: mm/bigphysarea.c:72:
+       if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {
[...]
+       }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#137: FILE: mm/bigphysarea.c:72:
+       if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#137: FILE: mm/bigphysarea.c:72:
+       if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#137: FILE: mm/bigphysarea.c:72:
+       if (!create_proc_info_entry("bigphysarea",0444,NULL,get_info)) {
                                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: mm/bigphysarea.c:73:
+               // ohoh, no way to free the allocated memory!$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: mm/bigphysarea.c:74:
+               // continue without proc support, it not fatal in itself$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: mm/bigphysarea.c:78:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: mm/bigphysarea.c:80:
+       init_level = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: mm/bigphysarea.c:82:
+       printk(KERN_INFO "bigphysarea: Allocated %d pages at 0x%p.\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#147: FILE: mm/bigphysarea.c:82:
+       printk(KERN_INFO "bigphysarea: Allocated %d pages at 0x%p.\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: mm/bigphysarea.c:83:
+              bigphysarea_pages, bigphysarea);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: mm/bigphysarea.c:83:
+              bigphysarea_pages, bigphysarea);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: mm/bigphysarea.c:85:
+       return 0;$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#153: FILE: mm/bigphysarea.c:88:
+__initcall(bigphysarea_init);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: mm/bigphysarea.c:100:
+       int par;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: mm/bigphysarea.c:101:
+       int par;
+       if (get_option(&str,&par)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: mm/bigphysarea.c:101:
+       if (get_option(&str,&par)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#166: FILE: mm/bigphysarea.c:101:
+       if (get_option(&str,&par)) {
+               bigphysarea_pages = par;

ERROR:SPACING: space required after that ',' (ctx:VxO)
#166: FILE: mm/bigphysarea.c:101:
+       if (get_option(&str,&par)) {
                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#166: FILE: mm/bigphysarea.c:101:
+       if (get_option(&str,&par)) {
                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: mm/bigphysarea.c:102:
+               bigphysarea_pages = par;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: mm/bigphysarea.c:102:
+               bigphysarea_pages = par;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: mm/bigphysarea.c:103:
+               // Alloc the memory$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: mm/bigphysarea.c:104:
+               bigphysarea = alloc_bootmem_low_pages(bigphysarea_pages<<PAGE_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: mm/bigphysarea.c:104:
+               bigphysarea = alloc_bootmem_low_pages(bigphysarea_pages<<PAGE_SHIFT);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#169: FILE: mm/bigphysarea.c:104:
+               bigphysarea = alloc_bootmem_low_pages(bigphysarea_pages<<PAGE_SHIFT);
                                                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: mm/bigphysarea.c:105:
+               if (!bigphysarea) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: mm/bigphysarea.c:105:
+               if (!bigphysarea) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#170: FILE: mm/bigphysarea.c:105:
+               if (!bigphysarea) {
+                       printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#171: FILE: mm/bigphysarea.c:106:
+                       printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: mm/bigphysarea.c:106:
+                       printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: mm/bigphysarea.c:106:
+                       printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#171: FILE: mm/bigphysarea.c:106:
+                       printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#171: FILE: mm/bigphysarea.c:106:
+                       printk(KERN_CRIT "bigphysarea: not enough memory for %d pages\n",bigphysarea_pages);
                                                                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: mm/bigphysarea.c:107:
+                       return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: mm/bigphysarea.c:107:
+                       return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: mm/bigphysarea.c:108:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: mm/bigphysarea.c:108:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: mm/bigphysarea.c:110:
+               // register the resource for it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: mm/bigphysarea.c:111:
+               mem_resource.start = bigphysarea;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: mm/bigphysarea.c:111:
+               mem_resource.start = bigphysarea;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: mm/bigphysarea.c:112:
+               mem_resource.end = mem_resource.start + (bigphysarea_pages<<PAGE_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: mm/bigphysarea.c:112:
+               mem_resource.end = mem_resource.start + (bigphysarea_pages<<PAGE_SHIFT);$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#177: FILE: mm/bigphysarea.c:112:
+               mem_resource.end = mem_resource.start + (bigphysarea_pages<<PAGE_SHIFT);
                                                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: mm/bigphysarea.c:113:
+               request_resource(&iomem_resource, &mem_resource);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: mm/bigphysarea.c:113:
+               request_resource(&iomem_resource, &mem_resource);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: mm/bigphysarea.c:114:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: mm/bigphysarea.c:115:
+       return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#183: FILE: mm/bigphysarea.c:118:
+__setup("bigphysarea=", bigphysarea_setup);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: mm/bigphysarea.c:127:
+       if (init_level == 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#192: FILE: mm/bigphysarea.c:127:
+       if (init_level == 1) {
+               free_list = kmalloc(sizeof(range_t), priority);

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: mm/bigphysarea.c:128:
+               free_list = kmalloc(sizeof(range_t), priority);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: mm/bigphysarea.c:128:
+               free_list = kmalloc(sizeof(range_t), priority);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: mm/bigphysarea.c:129:
+               if (free_list != NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: mm/bigphysarea.c:129:
+               if (free_list != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#194: FILE: mm/bigphysarea.c:129:
+               if (free_list != NULL) {
+                       free_list->next = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "free_list"
#194: FILE: mm/bigphysarea.c:129:
+               if (free_list != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: mm/bigphysarea.c:130:
+                       free_list->next = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: mm/bigphysarea.c:130:
+                       free_list->next = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: mm/bigphysarea.c:131:
+                       free_list->base = bigphysarea;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: mm/bigphysarea.c:131:
+                       free_list->base = bigphysarea;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: mm/bigphysarea.c:132:
+                       free_list->size = bigphysarea_pages * PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: mm/bigphysarea.c:132:
+                       free_list->size = bigphysarea_pages * PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: mm/bigphysarea.c:133:
+                       init_level = 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: mm/bigphysarea.c:133:
+                       init_level = 2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: mm/bigphysarea.c:134:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: mm/bigphysarea.c:134:
+                       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: mm/bigphysarea.c:135:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: mm/bigphysarea.c:135:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: mm/bigphysarea.c:136:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: mm/bigphysarea.c:137:
+       return 1;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: mm/bigphysarea.c:140:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: mm/bigphysarea.c:149:
+       range_t *range, **range_ptr, *new_range, *align_range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: mm/bigphysarea.c:150:
+       caddr_t aligned_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: mm/bigphysarea.c:152:
+       if (init_level < 2)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#217: FILE: mm/bigphysarea.c:152:
+       if (init_level < 2)
+               if (init2(priority))

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: mm/bigphysarea.c:153:
+               if (init2(priority))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: mm/bigphysarea.c:153:
+               if (init2(priority))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#218: FILE: mm/bigphysarea.c:153:
+               if (init2(priority))
+                       return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: mm/bigphysarea.c:154:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: mm/bigphysarea.c:154:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: mm/bigphysarea.c:155:
+       new_range   = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: mm/bigphysarea.c:156:
+       align_range = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: mm/bigphysarea.c:158:
+       if (align == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#223: FILE: mm/bigphysarea.c:158:
+       if (align == 0)
+               align = PAGE_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: mm/bigphysarea.c:159:
+               align = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: mm/bigphysarea.c:159:
+               align = PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: mm/bigphysarea.c:160:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#225: FILE: mm/bigphysarea.c:160:
+       else
+               align = align * PAGE_SIZE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: mm/bigphysarea.c:161:
+               align = align * PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: mm/bigphysarea.c:161:
+               align = align * PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: mm/bigphysarea.c:163:
+        * Search a free block which is large enough, even with alignment.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: mm/bigphysarea.c:164:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: mm/bigphysarea.c:165:
+       range_ptr = &free_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: mm/bigphysarea.c:166:
+       while (*range_ptr != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#231: FILE: mm/bigphysarea.c:166:
+       while (*range_ptr != NULL) {
+               range = *range_ptr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#231: FILE: mm/bigphysarea.c:166:
+       while (*range_ptr != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: mm/bigphysarea.c:167:
+               range = *range_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: mm/bigphysarea.c:167:
+               range = *range_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: mm/bigphysarea.c:168:
+               aligned_base =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: mm/bigphysarea.c:168:
+               aligned_base =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: mm/bigphysarea.c:169:
+                 (caddr_t)((((unsigned long)range->base + align - 1) / align) * align);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: mm/bigphysarea.c:169:
+                 (caddr_t)((((unsigned long)range->base + align - 1) / align) * align);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: mm/bigphysarea.c:170:
+               if (aligned_base + count * PAGE_SIZE <=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: mm/bigphysarea.c:170:
+               if (aligned_base + count * PAGE_SIZE <=$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#235: FILE: mm/bigphysarea.c:170:
+               if (aligned_base + count * PAGE_SIZE <=
[...]
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: mm/bigphysarea.c:171:
+                   range->base + range->size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: mm/bigphysarea.c:171:
+                   range->base + range->size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: mm/bigphysarea.c:172:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: mm/bigphysarea.c:172:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: mm/bigphysarea.c:173:
+            range_ptr = &range->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: mm/bigphysarea.c:173:
+            range_ptr = &range->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: mm/bigphysarea.c:174:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: mm/bigphysarea.c:175:
+       if (*range_ptr == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#240: FILE: mm/bigphysarea.c:175:
+       if (*range_ptr == NULL)
+               return 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!range_ptr"
#240: FILE: mm/bigphysarea.c:175:
+       if (*range_ptr == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: mm/bigphysarea.c:176:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: mm/bigphysarea.c:176:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: mm/bigphysarea.c:177:
+       range = *range_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: mm/bigphysarea.c:179:
+        * When we have to align, the pages needed for alignment can$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: mm/bigphysarea.c:180:
+        * be put back to the free pool.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: mm/bigphysarea.c:181:
+        * We check here if we need a second range data structure later$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: mm/bigphysarea.c:182:
+        * and allocate it now, so that we don't have to check for a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: mm/bigphysarea.c:183:
+        * failed kmalloc later.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: mm/bigphysarea.c:184:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: mm/bigphysarea.c:185:
+       if (aligned_base - range->base + count * PAGE_SIZE < range->size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#250: FILE: mm/bigphysarea.c:185:
+       if (aligned_base - range->base + count * PAGE_SIZE < range->size) {
+               new_range = kmalloc(sizeof(range_t), priority);

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: mm/bigphysarea.c:186:
+               new_range = kmalloc(sizeof(range_t), priority);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: mm/bigphysarea.c:186:
+               new_range = kmalloc(sizeof(range_t), priority);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: mm/bigphysarea.c:187:
+               if (new_range == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: mm/bigphysarea.c:187:
+               if (new_range == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#252: FILE: mm/bigphysarea.c:187:
+               if (new_range == NULL)
+                       return NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_range"
#252: FILE: mm/bigphysarea.c:187:
+               if (new_range == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: mm/bigphysarea.c:188:
+                       return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: mm/bigphysarea.c:188:
+                       return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: mm/bigphysarea.c:189:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: mm/bigphysarea.c:190:
+       if (aligned_base != range->base) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#255: FILE: mm/bigphysarea.c:190:
+       if (aligned_base != range->base) {
+               align_range = kmalloc(sizeof(range_t), priority);

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: mm/bigphysarea.c:191:
+               align_range = kmalloc(sizeof(range_t), priority);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: mm/bigphysarea.c:191:
+               align_range = kmalloc(sizeof(range_t), priority);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: mm/bigphysarea.c:192:
+               if (align_range == NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: mm/bigphysarea.c:192:
+               if (align_range == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#257: FILE: mm/bigphysarea.c:192:
+               if (align_range == NULL) {
+                       if (new_range != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!align_range"
#257: FILE: mm/bigphysarea.c:192:
+               if (align_range == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: mm/bigphysarea.c:193:
+                       if (new_range != NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: mm/bigphysarea.c:193:
+                       if (new_range != NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#258: FILE: mm/bigphysarea.c:193:
+                       if (new_range != NULL)
+                               kfree(new_range);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_range"
#258: FILE: mm/bigphysarea.c:193:
+                       if (new_range != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: mm/bigphysarea.c:194:
+                               kfree(new_range);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: mm/bigphysarea.c:194:
+                               kfree(new_range);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: mm/bigphysarea.c:195:
+                       return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: mm/bigphysarea.c:195:
+                       return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: mm/bigphysarea.c:196:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: mm/bigphysarea.c:196:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: mm/bigphysarea.c:197:
+               align_range->base = range->base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: mm/bigphysarea.c:197:
+               align_range->base = range->base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: mm/bigphysarea.c:198:
+               align_range->size = aligned_base - range->base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: mm/bigphysarea.c:198:
+               align_range->size = aligned_base - range->base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: mm/bigphysarea.c:199:
+               range->base = aligned_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: mm/bigphysarea.c:199:
+               range->base = aligned_base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: mm/bigphysarea.c:200:
+               range->size -= align_range->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: mm/bigphysarea.c:200:
+               range->size -= align_range->size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: mm/bigphysarea.c:201:
+               align_range->next = range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: mm/bigphysarea.c:201:
+               align_range->next = range;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: mm/bigphysarea.c:202:
+               *range_ptr = align_range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: mm/bigphysarea.c:202:
+               *range_ptr = align_range;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: mm/bigphysarea.c:203:
+               range_ptr = &align_range->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: mm/bigphysarea.c:203:
+               range_ptr = &align_range->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: mm/bigphysarea.c:204:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: mm/bigphysarea.c:205:
+       if (new_range != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#270: FILE: mm/bigphysarea.c:205:
+       if (new_range != NULL) {
[...]
+               new_range->base        = range->base;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_range"
#270: FILE: mm/bigphysarea.c:205:
+       if (new_range != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: mm/bigphysarea.c:206:
+               /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: mm/bigphysarea.c:207:
+                * Range is larger than needed, create a new list element for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: mm/bigphysarea.c:208:
+                * the used list and shrink the element in the free list.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: mm/bigphysarea.c:209:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: mm/bigphysarea.c:210:
+               new_range->base        = range->base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: mm/bigphysarea.c:210:
+               new_range->base        = range->base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: mm/bigphysarea.c:211:
+               new_range->size        = count * PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: mm/bigphysarea.c:211:
+               new_range->size        = count * PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: mm/bigphysarea.c:212:
+               range->base = new_range->base + new_range->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: mm/bigphysarea.c:212:
+               range->base = new_range->base + new_range->size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: mm/bigphysarea.c:213:
+               range->size = range->size - new_range->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: mm/bigphysarea.c:213:
+               range->size = range->size - new_range->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: mm/bigphysarea.c:214:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#279: FILE: mm/bigphysarea.c:214:
+       } else {
[...]
+               *range_ptr = range->next;

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: mm/bigphysarea.c:215:
+               /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: mm/bigphysarea.c:216:
+                * Range fits perfectly, remove it from free list.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: mm/bigphysarea.c:217:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: mm/bigphysarea.c:218:
+               *range_ptr = range->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: mm/bigphysarea.c:218:
+               *range_ptr = range->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: mm/bigphysarea.c:219:
+               new_range = range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: mm/bigphysarea.c:219:
+               new_range = range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: mm/bigphysarea.c:220:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: mm/bigphysarea.c:222:
+        * Insert block into used list$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: mm/bigphysarea.c:223:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: mm/bigphysarea.c:224:
+       new_range->next = used_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: mm/bigphysarea.c:225:
+       used_list = new_range;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: mm/bigphysarea.c:227:
+       return new_range->base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: mm/bigphysarea.c:238:
+       range_t *prev, *next, *range, **range_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: mm/bigphysarea.c:241:
+        * Search the block in the used list.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: mm/bigphysarea.c:242:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: mm/bigphysarea.c:243:
+       for (range_ptr = &used_list;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#308: FILE: mm/bigphysarea.c:243:
+       for (range_ptr = &used_list;
[...]
+               if ((*range_ptr)->base == base)

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: mm/bigphysarea.c:244:
+            *range_ptr != NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: mm/bigphysarea.c:244:
+            *range_ptr != NULL;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#309: FILE: mm/bigphysarea.c:244:
+            *range_ptr != NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: mm/bigphysarea.c:245:
+            range_ptr = &(*range_ptr)->next)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: mm/bigphysarea.c:245:
+            range_ptr = &(*range_ptr)->next)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: mm/bigphysarea.c:246:
+               if ((*range_ptr)->base == base)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: mm/bigphysarea.c:246:
+               if ((*range_ptr)->base == base)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#311: FILE: mm/bigphysarea.c:246:
+               if ((*range_ptr)->base == base)
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: mm/bigphysarea.c:247:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: mm/bigphysarea.c:247:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: mm/bigphysarea.c:248:
+       if (*range_ptr == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#313: FILE: mm/bigphysarea.c:248:
+       if (*range_ptr == NULL) {
+               printk("bigphysarea_free_pages(0x%08x), not allocated!\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!range_ptr"
#313: FILE: mm/bigphysarea.c:248:
+       if (*range_ptr == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: mm/bigphysarea.c:249:
+               printk("bigphysarea_free_pages(0x%08x), not allocated!\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: mm/bigphysarea.c:249:
+               printk("bigphysarea_free_pages(0x%08x), not allocated!\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: mm/bigphysarea.c:249:
+               printk("bigphysarea_free_pages(0x%08x), not allocated!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bigphysarea_free_pages', this function's name, in a string
#314: FILE: mm/bigphysarea.c:249:
+               printk("bigphysarea_free_pages(0x%08x), not allocated!\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: mm/bigphysarea.c:250:
+                      (unsigned)base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: mm/bigphysarea.c:250:
+                      (unsigned)base);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#315: FILE: mm/bigphysarea.c:250:
+                      (unsigned)base);

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: mm/bigphysarea.c:251:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: mm/bigphysarea.c:251:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: mm/bigphysarea.c:252:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: mm/bigphysarea.c:253:
+       range = *range_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: mm/bigphysarea.c:255:
+        * Remove range from the used list:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: mm/bigphysarea.c:256:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: mm/bigphysarea.c:257:
+       *range_ptr = (*range_ptr)->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: mm/bigphysarea.c:259:
+        * The free-list is sorted by address, search insertion point$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: mm/bigphysarea.c:260:
+        * and insert block in free list.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: mm/bigphysarea.c:261:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: mm/bigphysarea.c:262:
+       for (range_ptr = &free_list, prev = NULL;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#327: FILE: mm/bigphysarea.c:262:
+       for (range_ptr = &free_list, prev = NULL;
[...]
+               if ((*range_ptr)->base >= base)

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: mm/bigphysarea.c:263:
+            *range_ptr != NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: mm/bigphysarea.c:263:
+            *range_ptr != NULL;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range_ptr"
#328: FILE: mm/bigphysarea.c:263:
+            *range_ptr != NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: mm/bigphysarea.c:264:
+            prev = *range_ptr, range_ptr = &(*range_ptr)->next)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: mm/bigphysarea.c:264:
+            prev = *range_ptr, range_ptr = &(*range_ptr)->next)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: mm/bigphysarea.c:265:
+               if ((*range_ptr)->base >= base)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: mm/bigphysarea.c:265:
+               if ((*range_ptr)->base >= base)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#330: FILE: mm/bigphysarea.c:265:
+               if ((*range_ptr)->base >= base)
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: mm/bigphysarea.c:266:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: mm/bigphysarea.c:266:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: mm/bigphysarea.c:267:
+       range->next  = *range_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: mm/bigphysarea.c:268:
+       *range_ptr   = range;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: mm/bigphysarea.c:270:
+        * Concatenate free range with neighbors, if possible.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: mm/bigphysarea.c:271:
+        * Try for upper neighbor (next in list) first, then$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: mm/bigphysarea.c:272:
+        * for lower neighbor (predecessor in list).$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: mm/bigphysarea.c:273:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: mm/bigphysarea.c:274:
+       if (range->next != NULL &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#339: FILE: mm/bigphysarea.c:274:
+       if (range->next != NULL &&
[...]
+               next = range->next;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "range->next"
#339: FILE: mm/bigphysarea.c:274:
+       if (range->next != NULL &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: mm/bigphysarea.c:275:
+           range->base + range->size == range->next->base) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: mm/bigphysarea.c:275:
+           range->base + range->size == range->next->base) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: mm/bigphysarea.c:276:
+               next = range->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: mm/bigphysarea.c:276:
+               next = range->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: mm/bigphysarea.c:277:
+               range->size += range->next->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: mm/bigphysarea.c:277:
+               range->size += range->next->size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: mm/bigphysarea.c:278:
+               range->next = next->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: mm/bigphysarea.c:278:
+               range->next = next->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: mm/bigphysarea.c:279:
+               kfree(next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: mm/bigphysarea.c:279:
+               kfree(next);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: mm/bigphysarea.c:280:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: mm/bigphysarea.c:281:
+       if (prev != NULL &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#346: FILE: mm/bigphysarea.c:281:
+       if (prev != NULL &&
[...]
+               prev->size += prev->next->size;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#346: FILE: mm/bigphysarea.c:281:
+       if (prev != NULL &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: mm/bigphysarea.c:282:
+           prev->base + prev->size == range->base) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: mm/bigphysarea.c:282:
+           prev->base + prev->size == range->base) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: mm/bigphysarea.c:283:
+               prev->size += prev->next->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: mm/bigphysarea.c:283:
+               prev->size += prev->next->size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: mm/bigphysarea.c:284:
+               prev->next = range->next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: mm/bigphysarea.c:284:
+               prev->next = range->next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: mm/bigphysarea.c:285:
+               kfree(range);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: mm/bigphysarea.c:285:
+               kfree(range);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: mm/bigphysarea.c:286:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: mm/bigphysarea.c:292:
+       int pages = (size + PAGE_SIZE - 1) / PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: mm/bigphysarea.c:294:
+       return bigphysarea_alloc_pages(pages, 1, GFP_KERNEL);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: mm/bigphysarea.c:298:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: mm/bigphysarea.c:301:
+       (void)size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: mm/bigphysarea.c:302:
+       bigphysarea_free_pages(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: mm/bigphysarea.c:309:
+       char    *p = buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: mm/bigphysarea.c:310:
+       range_t *ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: mm/bigphysarea.c:311:
+       int     free_count, free_total, free_max;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: mm/bigphysarea.c:312:
+       int     used_count, used_total, used_max;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: mm/bigphysarea.c:314:
+       if (init_level == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 9)
#379: FILE: mm/bigphysarea.c:314:
+       if (init_level == 1)
+         init2(GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: mm/bigphysarea.c:315:
+         init2(GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: mm/bigphysarea.c:315:
+         init2(GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: mm/bigphysarea.c:317:
+       free_count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: mm/bigphysarea.c:318:
+       free_total = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: mm/bigphysarea.c:319:
+       free_max   = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: mm/bigphysarea.c:320:
+       for (ptr = free_list; ptr != NULL; ptr = ptr->next) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#385: FILE: mm/bigphysarea.c:320:
+       for (ptr = free_list; ptr != NULL; ptr = ptr->next) {
+               free_count++;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#385: FILE: mm/bigphysarea.c:320:
+       for (ptr = free_list; ptr != NULL; ptr = ptr->next) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: mm/bigphysarea.c:321:
+               free_count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: mm/bigphysarea.c:321:
+               free_count++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: mm/bigphysarea.c:322:
+               free_total += ptr->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: mm/bigphysarea.c:322:
+               free_total += ptr->size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: mm/bigphysarea.c:323:
+               if (ptr->size > free_max)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: mm/bigphysarea.c:323:
+               if (ptr->size > free_max)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#388: FILE: mm/bigphysarea.c:323:
+               if (ptr->size > free_max)
+                       free_max = ptr->size;

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: mm/bigphysarea.c:324:
+                       free_max = ptr->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: mm/bigphysarea.c:324:
+                       free_max = ptr->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: mm/bigphysarea.c:325:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: mm/bigphysarea.c:327:
+       used_count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: mm/bigphysarea.c:328:
+       used_total = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: mm/bigphysarea.c:329:
+       used_max   = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: mm/bigphysarea.c:330:
+       for (ptr = used_list; ptr != NULL; ptr = ptr->next) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#395: FILE: mm/bigphysarea.c:330:
+       for (ptr = used_list; ptr != NULL; ptr = ptr->next) {
+               used_count++;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#395: FILE: mm/bigphysarea.c:330:
+       for (ptr = used_list; ptr != NULL; ptr = ptr->next) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: mm/bigphysarea.c:331:
+               used_count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: mm/bigphysarea.c:331:
+               used_count++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: mm/bigphysarea.c:332:
+               used_total += ptr->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: mm/bigphysarea.c:332:
+               used_total += ptr->size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: mm/bigphysarea.c:333:
+               if (ptr->size > used_max)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: mm/bigphysarea.c:333:
+               if (ptr->size > used_max)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#398: FILE: mm/bigphysarea.c:333:
+               if (ptr->size > used_max)
+                       used_max = ptr->size;

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: mm/bigphysarea.c:334:
+                       used_max = ptr->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: mm/bigphysarea.c:334:
+                       used_max = ptr->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: mm/bigphysarea.c:335:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: mm/bigphysarea.c:337:
+       if (bigphysarea_pages == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#402: FILE: mm/bigphysarea.c:337:
+       if (bigphysarea_pages == 0) {
+               p += sprintf(p, "No big physical area allocated!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: mm/bigphysarea.c:338:
+               p += sprintf(p, "No big physical area allocated!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: mm/bigphysarea.c:338:
+               p += sprintf(p, "No big physical area allocated!\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: mm/bigphysarea.c:339:
+               return  p - buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: mm/bigphysarea.c:339:
+               return  p - buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: mm/bigphysarea.c:340:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: mm/bigphysarea.c:342:
+       p += sprintf(p, "Big physical area, size %ld kB\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: mm/bigphysarea.c:343:
+                    bigphysarea_pages * PAGE_SIZE / 1024);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: mm/bigphysarea.c:343:
+                    bigphysarea_pages * PAGE_SIZE / 1024);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: mm/bigphysarea.c:344:
+       p += sprintf(p, "                       free list:             used list:\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: mm/bigphysarea.c:345:
+       p += sprintf(p, "number of blocks:      %8d               %8d\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: mm/bigphysarea.c:346:
+                    free_count, used_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: mm/bigphysarea.c:346:
+                    free_count, used_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: mm/bigphysarea.c:347:
+       p += sprintf(p, "size of largest block: %8d kB            %8d kB\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: mm/bigphysarea.c:348:
+                    free_max / 1024, used_max / 1024);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: mm/bigphysarea.c:348:
+                    free_max / 1024, used_max / 1024);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: mm/bigphysarea.c:349:
+       p += sprintf(p, "total:                 %8d kB            %8d kB\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: mm/bigphysarea.c:350:
+                    free_total / 1024, used_total /1024);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: mm/bigphysarea.c:350:
+                    free_total / 1024, used_total /1024);$

CHECK:SPACING: spaces preferred around that '/' (ctx:WxV)
#415: FILE: mm/bigphysarea.c:350:
+                    free_total / 1024, used_total /1024);
                                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: mm/bigphysarea.c:352:
+       return  p - buf;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198234.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 134 errors, 210 warnings, 21 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198234.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
