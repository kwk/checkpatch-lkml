CHECK:LINE_SPACING: Please don't use multiple blank lines
#45: FILE: include/linux/sched.h:123:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#91: FILE: include/linux/init_task.h:50:
+    policy:		SCHED_NORMAL,					\
           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#91: FILE: include/linux/init_task.h:50:
+    policy:		SCHED_NORMAL,					\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#99: FILE: include/linux/init_task.h:81:
+    switch_lock:	SPIN_LOCK_UNLOCKED,				\
                ^

WARNING:INDENTED_LABEL: labels should not be indented
#99: FILE: include/linux/init_task.h:81:
+    switch_lock:	SPIN_LOCK_UNLOCKED,				\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#176: FILE: include/asm-sparc64/system.h:153:
+#define finish_arch_switch(rq, prev)		\
+do {	spin_unlock_irq(&(prev)->switch_lock);	\
 } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#268: FILE: kernel/sched.c:113:
+	((MAX_TIMESLICE - MIN_TIMESLICE) * (MAX_PRIO-1-(p)->static_prio)/(MAX_USER_PRIO - 1)))
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#268: FILE: kernel/sched.c:113:
+	((MAX_TIMESLICE - MIN_TIMESLICE) * (MAX_PRIO-1-(p)->static_prio)/(MAX_USER_PRIO - 1)))
 	                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#268: FILE: kernel/sched.c:113:
+	((MAX_TIMESLICE - MIN_TIMESLICE) * (MAX_PRIO-1-(p)->static_prio)/(MAX_USER_PRIO - 1)))
 	                                                                ^

ERROR:SPACING: space required before the open parenthesis '('
#302: FILE: kernel/sched.c:166:
+# define prepare_arch_switch(rq, next)	do { } while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->thread_info->cpu != smp_processor_id()'
#342: FILE: kernel/sched.c:357:
+	if ((task_running(task_rq(p), p)) && (p->thread_info->cpu != smp_processor_id()))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: kernel/sched.c:387:
+		if (unlikely(sync && !task_running(rq, p) &&
 			(task_cpu(p) != smp_processor_id()) &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#415: FILE: kernel/sched.c:529:
+	if (rq1 == rq2)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: kernel/sched.c:531:
+	else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#459: FILE: kernel/sched.c:580:
+static inline runqueue_t *find_busiest_queue(runqueue_t *this_rq, int this_cpu, int idle, int *imbalance)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#484: FILE: kernel/sched.c:637:
+	if (!idle && (*imbalance < (max_load + 3)/4)) {
 	                                         ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#508: FILE: kernel/sched.c:659:
+static inline void pull_task(runqueue_t *src_rq, prio_array_t *src_array, task_t *p, runqueue_t *this_rq, int this_cpu)

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#525: FILE: kernel/sched.c:676:
+ * inbalance (current runqueue is too short) then pull from
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: kernel/sched.c:1187:
+		if ((NICE_TO_PRIO(nice) < p->static_prio) ||
+							task_running(rq, p))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'policy == SCHED_NORMAL'
#714: FILE: kernel/sched.c:1306:
+	if ((policy == SCHED_NORMAL) != (lp.sched_priority == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lp.sched_priority == 0'
#714: FILE: kernel/sched.c:1306:
+	if ((policy == SCHED_NORMAL) != (lp.sched_priority == 0))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#915: FILE: kernel/sched.c:1874:
+extern void timer_bh(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#916: FILE: kernel/sched.c:1875:
+extern void tqueue_bh(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#917: FILE: kernel/sched.c:1876:
+extern void immediate_bh(void);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#924: FILE: kernel/sched.c:1883:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->policy == SCHED_NORMAL'
#993: FILE: kernel/exit.c:185:
+	if ((current->policy == SCHED_NORMAL) && (task_nice(current) < 0))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446091.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 10 warnings, 13 checks, 881 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446091.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
