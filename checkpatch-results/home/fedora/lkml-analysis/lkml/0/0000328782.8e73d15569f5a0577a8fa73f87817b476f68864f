WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# This patch format is intended for GNU patch command version 2.5 or

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#                  ChangeSet    1.1349  -> 1.1350

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#       drivers/serial/8250.c   1.40    -> 1.41

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#       drivers/serial/serial_core.c    1.72    -> 1.73

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# 03/10/21      gdt@andromache.(none)   1.1350

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# serial_core.c:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#   Revert change which used only the termios flag to indicate flow

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#   on the serial console.  If the termios gets trod on (which seems

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#   to happen late in the boot process, around the time /sbin/init

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#   is started) then we still want the console to do CTS/RTS

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# 8250.c:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#   Serial console bug fixes.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#   End of line is now CR LF, not LF CR.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#   The kernel parameter 'console=ttyS...r' selects CTS/RTS

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#   flow control for the serial console.  This waited on

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#   the CTS line to be asserted before outputing a character.

WARNING:TYPO_SPELLING: 'outputing' may be misspelled - perhaps 'outputting'?
#78: 
#   the CTS line to be asserted before outputing a character.
                                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#   Unfortunately, no RS-232 signal from the DCE is defined

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#   unless DSR is asserted.  By not recognising this the code

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#   took forever to boot when waiting for a CTS timeout when

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#   no console was attached (or, more commonly, when attached

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#   to an idle port of a terminal server).

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#   CTS can still timeout, so the new code abandons the remainder

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
#   of the message on an error.  This leads to a worst-case delay

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#   of 1s per line (rather than about 1m per line).  So booting

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#   is slowed by a minute rather than the best part of an

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
#   hour.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#   The new flow control code also requires DCD to be asserted.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
#   This prevents printing into the command mode of a Hayes

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
#   AT modem. That is (1) a security issue and (2) prevents

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
#   the sysadm from dialing-in when there are lots of messages

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
#   (eg, when a disk has died and console access is particularly

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
#   useful).

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
#   When the flow control option is not selected DSR, DCD and

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#   CTS need not be asserted before a message is printed.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#100: 
--- a/drivers/serial/8250.c     Tue Oct 21 16:20:05 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#125: FILE: drivers/serial/8250.c:1914:
reported.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: drivers/serial/8250.c:1919:
+                                       int flow_control)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/serial/8250.c:1919:
+                                       int flow_control)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: drivers/serial/8250.c:1921:
+        /* Number of times to test the transmit buffer of the UART. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: drivers/serial/8250.c:1922:
+        unsigned int timeout;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: drivers/serial/8250.c:1922:
+        unsigned int timeout;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: drivers/serial/8250.c:1923:
+        /* Contents of a UART status register. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: drivers/serial/8250.c:1924:
+        unsigned int status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: drivers/serial/8250.c:1924:
+        unsigned int status;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: drivers/serial/8250.c:1926:
+        timeout = serial_console_attempts_tx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: drivers/serial/8250.c:1926:
+        timeout = serial_console_attempts_tx;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: drivers/serial/8250.c:1927:
+        /* Drain transmit buffer. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: drivers/serial/8250.c:1928:
+        do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: drivers/serial/8250.c:1928:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: drivers/serial/8250.c:1929:
+                status = serial_in(up, UART_LSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/serial/8250.c:1929:
+                status = serial_in(up, UART_LSR);$

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#143: FILE: drivers/serial/8250.c:1930:
+                /* If Break has been recieved then note this for the
                                      ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: drivers/serial/8250.c:1930:
+                /* If Break has been recieved then note this for the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: drivers/serial/8250.c:1931:
+                 * regular user of the serial port.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: drivers/serial/8250.c:1932:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: drivers/serial/8250.c:1933:
+                if (status & UART_LSR_BI) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: drivers/serial/8250.c:1933:
+                if (status & UART_LSR_BI) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#146: FILE: drivers/serial/8250.c:1933:
+                if (status & UART_LSR_BI) {
+                        up->lsr_break_flag = UART_LSR_BI;
+                }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: drivers/serial/8250.c:1934:
+                        up->lsr_break_flag = UART_LSR_BI;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: drivers/serial/8250.c:1934:
+                        up->lsr_break_flag = UART_LSR_BI;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: drivers/serial/8250.c:1935:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: drivers/serial/8250.c:1935:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: drivers/serial/8250.c:1936:
+                if (--timeout == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/serial/8250.c:1936:
+                if (--timeout == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: drivers/serial/8250.c:1937:
+                        /* Transmit buffer hasn't emptied in a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: drivers/serial/8250.c:1938:
+                         * reasonable time. Discard the character. If$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: drivers/serial/8250.c:1939:
+                         * using flow control, let caller know to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: drivers/serial/8250.c:1940:
+                         * discard the remainder of the message.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: drivers/serial/8250.c:1941:
+                         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: drivers/serial/8250.c:1942:
+                        return flow_control;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/serial/8250.c:1942:
+                        return flow_control;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: drivers/serial/8250.c:1943:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/serial/8250.c:1943:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: drivers/serial/8250.c:1944:
+                udelay(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: drivers/serial/8250.c:1944:
+                udelay(1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: drivers/serial/8250.c:1945:
+        } while ((status & BOTH_EMPTY) != BOTH_EMPTY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/serial/8250.c:1945:
+        } while ((status & BOTH_EMPTY) != BOTH_EMPTY);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: drivers/serial/8250.c:1946:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: drivers/serial/8250.c:1946:
+        return 0;$

WARNING:TYPO_SPELLING: 'reciever' may be misspelled - perhaps 'receiver'?
#170: FILE: drivers/serial/8250.c:1957:
+ *                   RS-232 status control lines indicate no reciever.
                                                              ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: drivers/serial/8250.c:1960:
+                                      int flow_control)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: drivers/serial/8250.c:1960:
+                                      int flow_control)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: drivers/serial/8250.c:1962:
+        /* Timeout loop tests Clear to Send. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: drivers/serial/8250.c:1963:
+        unsigned int timeout;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: drivers/serial/8250.c:1963:
+        unsigned int timeout;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: drivers/serial/8250.c:1964:
+        /* Contents of a UART status register. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: drivers/serial/8250.c:1965:
+        unsigned int status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: drivers/serial/8250.c:1965:
+        unsigned int status;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: drivers/serial/8250.c:1967:
+        if (serial_console_drain(up, flow_control)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: drivers/serial/8250.c:1967:
+        if (serial_console_drain(up, flow_control)) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#182: FILE: drivers/serial/8250.c:1967:
+        if (serial_console_drain(up, flow_control)) {
+                return !0;
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: drivers/serial/8250.c:1968:
+                return !0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: drivers/serial/8250.c:1968:
+                return !0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: drivers/serial/8250.c:1969:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/serial/8250.c:1969:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: drivers/serial/8250.c:1971:
+        /* If flow control is configured then wait for Clear to Send$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: drivers/serial/8250.c:1972:
+         * to be asserted. Abandon message if no status lines$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: drivers/serial/8250.c:1973:
+         * asserted.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: drivers/serial/8250.c:1974:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: drivers/serial/8250.c:1975:
+        if (flow_control) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: drivers/serial/8250.c:1975:
+        if (flow_control) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: drivers/serial/8250.c:1976:
+                for (timeout = serial_console_attempts_cts;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: drivers/serial/8250.c:1976:
+                for (timeout = serial_console_attempts_cts;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: drivers/serial/8250.c:1977:
+                     timeout > 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: drivers/serial/8250.c:1977:
+                     timeout > 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: drivers/serial/8250.c:1978:
+                     timeout--) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: drivers/serial/8250.c:1978:
+                     timeout--) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: drivers/serial/8250.c:1979:
+                        status = serial_in(up, UART_MSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/serial/8250.c:1979:
+                        status = serial_in(up, UART_MSR);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: drivers/serial/8250.c:1980:
+                        /* None of the modem status lines, including$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: drivers/serial/8250.c:1981:
+                         * Clear to Send, are valid unless Data Set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: drivers/serial/8250.c:1982:
+                         * Ready is asserted. Also, we should not$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: drivers/serial/8250.c:1983:
+                         * transmit unless Data Carrier Detect is$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: drivers/serial/8250.c:1984:
+                         * asserted (implying that a receiver is$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: drivers/serial/8250.c:1985:
+                         * present). If DSR or DCD is not present we$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: drivers/serial/8250.c:1986:
+                         * discard the message (the carrier won't be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: drivers/serial/8250.c:1987:
+                         * asserted in the time taken to poll the UART$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: drivers/serial/8250.c:1988:
+                         * a few times more).$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: drivers/serial/8250.c:1989:
+                         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: drivers/serial/8250.c:1990:
+                        if ((status & UART_MSR_DSR) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: drivers/serial/8250.c:1990:
+                        if ((status & UART_MSR_DSR) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: drivers/serial/8250.c:1991:
+                                /* Future -- increment counter for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: drivers/serial/8250.c:1992:
+                                 * "message dropped because no DSR".$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: drivers/serial/8250.c:1993:
+                                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: drivers/serial/8250.c:1994:
+                                return !0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: drivers/serial/8250.c:1994:
+                                return !0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: drivers/serial/8250.c:1995:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: drivers/serial/8250.c:1995:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: drivers/serial/8250.c:1996:
+                        if ((status & UART_MSR_DCD) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/serial/8250.c:1996:
+                        if ((status & UART_MSR_DCD) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: drivers/serial/8250.c:1997:
+                                /* Future -- increment counter for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: drivers/serial/8250.c:1998:
+                                 * "message dropped because no DCD".$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: drivers/serial/8250.c:1999:
+                                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: drivers/serial/8250.c:2000:
+                                return !0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: drivers/serial/8250.c:2000:
+                                return !0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: drivers/serial/8250.c:2001:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: drivers/serial/8250.c:2001:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: drivers/serial/8250.c:2002:
+                        /* At this point DSR and DCD are asserted, so$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: drivers/serial/8250.c:2003:
+                         * valid to test CTS flow control.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: drivers/serial/8250.c:2004:
+                         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: drivers/serial/8250.c:2005:
+                        if (status & UART_MSR_CTS) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: drivers/serial/8250.c:2005:
+                        if (status & UART_MSR_CTS) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#220: FILE: drivers/serial/8250.c:2005:
+                        if (status & UART_MSR_CTS) {
+                                return 0;
+                        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: drivers/serial/8250.c:2006:
+                                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: drivers/serial/8250.c:2006:
+                                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: drivers/serial/8250.c:2007:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: drivers/serial/8250.c:2007:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: drivers/serial/8250.c:2008:
+                        udelay(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/serial/8250.c:2008:
+                        udelay(1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: drivers/serial/8250.c:2009:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/serial/8250.c:2009:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: drivers/serial/8250.c:2010:
+                /* CTS still not asserted. Discard the message for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: drivers/serial/8250.c:2011:
+                 * correct operation on multi-drop lines.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: drivers/serial/8250.c:2012:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: drivers/serial/8250.c:2013:
+                return !0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: drivers/serial/8250.c:2013:
+                return !0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: drivers/serial/8250.c:2014:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/serial/8250.c:2014:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: drivers/serial/8250.c:2015:
+        /* No flow control, ready for next character. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: drivers/serial/8250.c:2016:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/serial/8250.c:2016:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: drivers/serial/8250.c:2030:
+                              int flow_control,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: drivers/serial/8250.c:2030:
+                              int flow_control,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: drivers/serial/8250.c:2031:
+                              char ch)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: drivers/serial/8250.c:2031:
+                              char ch)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: drivers/serial/8250.c:2033:
+        int error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: drivers/serial/8250.c:2033:
+        int error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: drivers/serial/8250.c:2035:
+        error = serial_console_flow(up, flow_control);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/serial/8250.c:2035:
+        error = serial_console_flow(up, flow_control);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: drivers/serial/8250.c:2036:
+        if (!error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/serial/8250.c:2036:
+        if (!error) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#270: FILE: drivers/serial/8250.c:2036:
+        if (!error) {
+                serial_out(up, UART_TX, ch);
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: drivers/serial/8250.c:2037:
+                serial_out(up, UART_TX, ch);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: drivers/serial/8250.c:2037:
+                serial_out(up, UART_TX, ch);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: drivers/serial/8250.c:2038:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: drivers/serial/8250.c:2038:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: drivers/serial/8250.c:2039:
+        return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: drivers/serial/8250.c:2039:
+        return error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: drivers/serial/8250.c:2079:
+                                     const char *message,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: drivers/serial/8250.c:2079:
+                                     const char *message,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: drivers/serial/8250.c:2080:
+                                     unsigned int message_length)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: drivers/serial/8250.c:2080:
+                                     unsigned int message_length)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: drivers/serial/8250.c:2082:
+        struct uart_8250_port *up = &serial8250_ports[co->index];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: drivers/serial/8250.c:2082:
+        struct uart_8250_port *up = &serial8250_ports[co->index];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: drivers/serial/8250.c:2083:
+        unsigned int ier;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: drivers/serial/8250.c:2083:
+        unsigned int ier;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: drivers/serial/8250.c:2084:
+        unsigned int u;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: drivers/serial/8250.c:2084:
+        unsigned int u;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: drivers/serial/8250.c:2085:
+        const char *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: drivers/serial/8250.c:2085:
+        const char *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: drivers/serial/8250.c:2086:
+        int flow_control;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: drivers/serial/8250.c:2086:
+        int flow_control;$

WARNING:TYPO_SPELLING: 'Interrput' may be misspelled - perhaps 'Interrupt'?
#354: FILE: drivers/serial/8250.c:2088:
+        /* Salt away the UART's Interrput Enable Register before
                                 ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: drivers/serial/8250.c:2088:
+        /* Salt away the UART's Interrput Enable Register before$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: drivers/serial/8250.c:2089:
+         * disabling interrupts.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: drivers/serial/8250.c:2090:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: drivers/serial/8250.c:2091:
+        ier = serial_in(up, UART_IER);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: drivers/serial/8250.c:2091:
+        ier = serial_in(up, UART_IER);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: drivers/serial/8250.c:2092:
+        serial_out(up, UART_IER, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: drivers/serial/8250.c:2092:
+        serial_out(up, UART_IER, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: drivers/serial/8250.c:2094:
+        /* Is console running RTS/CTS flow control? */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: drivers/serial/8250.c:2095:
+        flow_control = (up->port.flags & UPF_CONS_FLOW);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: drivers/serial/8250.c:2095:
+        flow_control = (up->port.flags & UPF_CONS_FLOW);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: drivers/serial/8250.c:2097:
+        /* Send the characters of the message to the serial port,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: drivers/serial/8250.c:2098:
+         * abandoning the entire message on error.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: drivers/serial/8250.c:2099:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: drivers/serial/8250.c:2100:
+        for (u = 0, p = message; u < message_length; u++, p++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: drivers/serial/8250.c:2100:
+        for (u = 0, p = message; u < message_length; u++, p++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: drivers/serial/8250.c:2101:
+                /* If a LF, then print CR LF. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: drivers/serial/8250.c:2102:
+                if (*p == '\n') {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: drivers/serial/8250.c:2102:
+                if (*p == '\n') {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: drivers/serial/8250.c:2103:
+                        if (serial_console_out(up, flow_control, '\r'))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: drivers/serial/8250.c:2103:
+                        if (serial_console_out(up, flow_control, '\r'))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 0)
#369: FILE: drivers/serial/8250.c:2103:
+                        if (serial_console_out(up, flow_control, '\r'))
[...]
count. */+                                break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: drivers/serial/8250.c:2104:
+                                /* Future - increment message discard$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: drivers/serial/8250.c:2105:
+                        }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#373: FILE: drivers/serial/8250.c:2105:
+                                /* Future - increment message discard
+                        }

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: drivers/serial/8250.c:2107:
+                /* Print the character. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: drivers/serial/8250.c:2108:
+                if (serial_console_out(up, flow_control, *p)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: drivers/serial/8250.c:2108:
+                if (serial_console_out(up, flow_control, *p)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: drivers/serial/8250.c:2109:
+                        /* Future - increment message discard count. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: drivers/serial/8250.c:2110:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: drivers/serial/8250.c:2110:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: drivers/serial/8250.c:2111:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: drivers/serial/8250.c:2111:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: drivers/serial/8250.c:2112:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: drivers/serial/8250.c:2112:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: drivers/serial/8250.c:2114:
+        /* Wait for remaining characters to be transmitted.  We don't$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: drivers/serial/8250.c:2115:
+         * wait for flow control, as user-space has to be prepared for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: drivers/serial/8250.c:2116:
+         * a change in flow control signals in any case.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: drivers/serial/8250.c:2117:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: drivers/serial/8250.c:2118:
+        (void)serial_console_drain(up, flow_control);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: drivers/serial/8250.c:2118:
+        (void)serial_console_drain(up, flow_control);$

WARNING:TYPO_SPELLING: 'Interrput' may be misspelled - perhaps 'Interrupt'?
#396: FILE: drivers/serial/8250.c:2120:
+        /* Restore the UART's Interrput Enable Register, re-enabling
                               ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: drivers/serial/8250.c:2120:
+        /* Restore the UART's Interrput Enable Register, re-enabling$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: drivers/serial/8250.c:2121:
+         * any interrupts which were set on behalf of user-space.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: drivers/serial/8250.c:2122:
+         */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: drivers/serial/8250.c:2123:
+       serial_out(up, UART_IER, ier);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/serial/serial_core.c:1859:
+       if (flow == 'r') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#413: FILE: drivers/serial/serial_core.c:1859:
+       if (flow == 'r') {
[...]
+                termios.c_cflag |= CRTSCTS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: drivers/serial/serial_core.c:1860:
+               /* This seems to get trod on by /sbin/init.  -GDT */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: drivers/serial/serial_core.c:1861:
+                termios.c_cflag |= CRTSCTS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: drivers/serial/serial_core.c:1861:
+                termios.c_cflag |= CRTSCTS;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: drivers/serial/serial_core.c:1862:
+                /* If the BOFH asked for CTS/RTS in the kernel$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: drivers/serial/serial_core.c:1863:
+                 * parameters then we do CTS/RTS flow control$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: drivers/serial/serial_core.c:1864:
+                 * regardless of the alterable termios setting.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: drivers/serial/serial_core.c:1865:
+                 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: drivers/serial/serial_core.c:1866:
+                port->flags |= UPF_CONS_FLOW;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: drivers/serial/serial_core.c:1866:
+                port->flags |= UPF_CONS_FLOW;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: drivers/serial/serial_core.c:1867:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: drivers/serial/serial_core.c:1867:
+        }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 135 errors, 125 warnings, 0 checks, 320 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
