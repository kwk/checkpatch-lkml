WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#13: 
Subject: Re: [PATCH] distributed counters for ext2 to avoid group scaning
                                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#34: 
 >> for 10G fs. I believe there is method to avoid scaning and
                                                   ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: fs/ext2/balloc.c:102:
+group_reserve_blocks(struct super_block *sb, struct ext2_bg_info *bgi, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: fs/ext2/balloc.c:103:
+group_reserve_blocks(struct super_block *sb, struct ext2_bg_info *bgi, 
+		struct ext2_group_desc *desc, struct buffer_head *bh,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#70: FILE: fs/ext2/balloc.c:107:
+	unsigned free_blocks;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#71: FILE: fs/ext2/balloc.c:108:
+	unsigned root_blocks;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->s_resgid'
#89: FILE: fs/ext2/balloc.c:123:
+	if (free_blocks <  bgi->reserved + count &&
+			!capable(CAP_SYS_RESOURCE) &&
+			sbi->s_resuid != current->fsuid &&
+			(sbi->s_resgid == 0 || !in_group_p (sbi->s_resgid))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/ext2/balloc.c:124:
+	if (free_blocks <  bgi->reserved + count &&
+			!capable(CAP_SYS_RESOURCE) &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#92: FILE: fs/ext2/balloc.c:126:
+			(sbi->s_resgid == 0 || !in_group_p (sbi->s_resgid))) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: fs/ext2/balloc.c:148:
+static void group_release_blocks(struct super_block *sb,
+	struct ext2_bg_info *bgi, struct ext2_group_desc *desc,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: fs/ext2/balloc.c:152:
+		unsigned free_blocks;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: fs/ext2/balloc.c:177:
+	struct ext2_sb_info * sbi = EXT2_SB(sb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#172: FILE: fs/ext2/balloc.c:179:
+	struct ext2_super_block * es = sbi->s_es;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: fs/ext2/balloc.c:229:
+		if (!ext2_clear_bit_atomic(&sbi->s_bgi[block_group].balloc_lock,
+					bit + i, (void *) bitmap_bh->b_data))

CHECK:SPACING: No space is necessary after a cast
#197: FILE: fs/ext2/balloc.c:229:
+					bit + i, (void *) bitmap_bh->b_data))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: fs/ext2/balloc.c:242:
+	group_release_blocks(sb, &sbi->s_bgi[block_group],
+				desc, bh2, group_freed);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#221: FILE: fs/ext2/balloc.c:255:
+static int grab_block(spinlock_t *lock, char *map, unsigned size, int goal)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: fs/ext2/balloc.c:303:
+^Iif (ext2_set_bit_atomic(lock, goal, (void *) map)) $

CHECK:SPACING: No space is necessary after a cast
#238: FILE: fs/ext2/balloc.c:303:
+	if (ext2_set_bit_atomic(lock, goal, (void *) map)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: fs/ext2/balloc.c:304:
+^I^Igoto repeat;^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/ext2/balloc.c:317:
+int ext2_new_block(struct inode *inode, unsigned long goal,
+			u32 *prealloc_count, u32 *prealloc_block, int *err)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/ext2/balloc.c:361:
+	group_alloc = group_reserve_blocks(sb, &sbi->s_bgi[group_no],
+					desc, gdp_bh, es_alloc, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: fs/ext2/balloc.c:373:
+		ret_block = grab_block(&sbi->s_bgi[group_no].balloc_lock,
+				bitmap_bh->b_data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: fs/ext2/balloc.c:378:
+		group_release_blocks(sb, &sbi->s_bgi[group_no],
+					desc, gdp_bh, group_alloc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: fs/ext2/balloc.c:398:
+		group_alloc = group_reserve_blocks(sb, &sbi->s_bgi[group_no],
+					desc, gdp_bh, es_alloc, use_reserve);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#328: FILE: fs/ext2/balloc.c:404:
+		 * will try to allocate reserved blocks -bzzz */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: fs/ext2/balloc.c:418:
+	ret_block = grab_block(&sbi->s_bgi[group_no].balloc_lock,
+			bitmap_bh->b_data, group_size, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: fs/ext2/balloc.c:421:
+^I^Igoto repeat;^I$

CHECK:SPACING: No space is necessary after a cast
#360: FILE: fs/ext2/balloc.c:465:
+						(void*) bitmap_bh->b_data))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#360: FILE: fs/ext2/balloc.c:465:
+						(void*) bitmap_bh->b_data))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: fs/ext2/balloc.c:485:
+	group_release_blocks(sb, &sbi->s_bgi[group_no],
+				desc, gdp_bh, group_alloc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: fs/ext2/balloc.c:535:
+        for (i = 0; i < EXT2_SB(sb)->s_groups_count; i++) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: fs/ext2/balloc.c:535:
+        for (i = 0; i < EXT2_SB(sb)->s_groups_count; i++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: fs/ext2/balloc.c:536:
+                desc = ext2_get_group_desc (sb, i, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: fs/ext2/balloc.c:536:
+                desc = ext2_get_group_desc (sb, i, NULL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: fs/ext2/balloc.c:536:
+                desc = ext2_get_group_desc (sb, i, NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: fs/ext2/balloc.c:537:
+                if (!desc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: fs/ext2/balloc.c:537:
+                if (!desc)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: fs/ext2/balloc.c:538:
+                        continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: fs/ext2/balloc.c:538:
+                        continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: fs/ext2/balloc.c:539:
+                desc_count += le16_to_cpu(desc->bg_free_blocks_count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: fs/ext2/balloc.c:539:
+                desc_count += le16_to_cpu(desc->bg_free_blocks_count);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#441: FILE: fs/ext2/ialloc.c:78:
+	struct ext2_group_desc * desc;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: fs/ext2/ialloc.c:84:
+		ext2_error(sb, "ext2_reserve_inode",
+			"can't get descriptor for group %d", group);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#467: FILE: fs/ext2/ialloc.c:104:
+	struct ext2_group_desc * desc;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: fs/ext2/ialloc.c:110:
+		ext2_error(sb, "ext2_release_inode",
+			"can't get descriptor for group %d", group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: fs/ext2/ialloc.c:189:
+	if (!ext2_clear_bit_atomic(&EXT2_SB(sb)->s_bgi[block_group].ialloc_lock,
+				bit, (void *) bitmap_bh->b_data))

CHECK:SPACING: No space is necessary after a cast
#520: FILE: fs/ext2/ialloc.c:189:
+				bit, (void *) bitmap_bh->b_data))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: fs/ext2/ialloc.c:520:
+	if (ext2_set_bit_atomic(&EXT2_SB(sb)->s_bgi[group].ialloc_lock,
+			i, (void *) bitmap_bh->b_data)) {

CHECK:SPACING: No space is necessary after a cast
#653: FILE: fs/ext2/ialloc.c:520:
+			i, (void *) bitmap_bh->b_data)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#726: FILE: fs/ext2/ialloc.c:645:
+^Iint i;^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#748: FILE: fs/ext2/ialloc.c:679:
+		desc = ext2_get_group_desc (sb, i, NULL);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#764: FILE: fs/ext2/super.c:38:
+unsigned long ext2_count_free_inodes_old(struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#765: FILE: fs/ext2/super.c:39:
+unsigned long ext2_count_free_blocks_old (struct super_block * sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#765: FILE: fs/ext2/super.c:39:
+unsigned long ext2_count_free_blocks_old (struct super_block * sb);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#765: FILE: fs/ext2/super.c:39:
+unsigned long ext2_count_free_blocks_old (struct super_block * sb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#783: FILE: fs/ext2/super.c:469:
+	struct ext2_super_block * es = sbi->s_es;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: fs/ext2/super.c:512:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#796: FILE: fs/ext2/super.c:513:
+	total_free = le32_to_cpu (es->s_free_blocks_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: fs/ext2/super.c:516:
+	dcounter_init(&EXT2_SB(sb)->free_inodes_dc,
+			le32_to_cpu (es->s_free_inodes_count), 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#799: FILE: fs/ext2/super.c:516:
+			le32_to_cpu (es->s_free_inodes_count), 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#803: FILE: fs/ext2/super.c:520:
+	for(i = sbi->s_groups_count-1; reserved && total_free && i >= 0; i--) {
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#803: FILE: fs/ext2/super.c:520:
+	for(i = sbi->s_groups_count-1; reserved && total_free && i >= 0; i--) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#804: FILE: fs/ext2/super.c:521:
+		gdp = ext2_get_group_desc (sb, i, NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#806: FILE: fs/ext2/super.c:523:
+			ext2_error (sb, "ext2_check_descriptors",

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#807: FILE: fs/ext2/super.c:524:
+					"cant get descriptor for group %d", i);
 					 ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: fs/ext2/super.c:524:
+			ext2_error (sb, "ext2_check_descriptors",
+					"cant get descriptor for group %d", i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: fs/ext2/super.c:527:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#818: FILE: fs/ext2/super.c:535:
+^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#827: FILE: fs/ext2/super.c:800:
+	sbi->s_bgi = kmalloc(sbi->s_groups_count*sizeof(struct ext2_bg_info),
 	                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: fs/ext2/super.c:801:
+	sbi->s_bgi = kmalloc(sbi->s_groups_count*sizeof(struct ext2_bg_info),
 			       GFP_KERNEL);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#851: FILE: fs/ext2/super.c:858:
+	if (sbi->s_bgi)
+		kfree(sbi->s_bgi);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#860: FILE: fs/ext2/super.c:878:
+		printk("EXT2-fs: invalid dirs_dc %d (real %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: fs/ext2/super.c:879:
+		printk("EXT2-fs: invalid dirs_dc %d (real %d)\n",
+				(int) dcounter_value(&EXT2_SB(sb)->dirs_dc),

CHECK:SPACING: No space is necessary after a cast
#861: FILE: fs/ext2/super.c:879:
+				(int) dcounter_value(&EXT2_SB(sb)->dirs_dc),

CHECK:SPACING: No space is necessary after a cast
#862: FILE: fs/ext2/super.c:880:
+				(int) ext2_count_dirs(sb));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#864: FILE: fs/ext2/super.c:882:
+		printk("EXT2-fs: invalid free blocks dcounter %d (real %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: fs/ext2/super.c:883:
+		printk("EXT2-fs: invalid free blocks dcounter %d (real %d)\n",
+				(int) ext2_count_free_blocks(sb),

CHECK:SPACING: No space is necessary after a cast
#865: FILE: fs/ext2/super.c:883:
+				(int) ext2_count_free_blocks(sb),

CHECK:SPACING: No space is necessary after a cast
#866: FILE: fs/ext2/super.c:884:
+				(int) ext2_count_free_blocks_old(sb));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#870: FILE: fs/ext2/super.c:888:
+		printk("EXT2-fs: invalid free inodes dcounter %d (real %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: fs/ext2/super.c:889:
+		printk("EXT2-fs: invalid free inodes dcounter %d (real %d)\n",
+			(int) ext2_count_free_inodes(sb),

CHECK:SPACING: No space is necessary after a cast
#871: FILE: fs/ext2/super.c:889:
+			(int) ext2_count_free_inodes(sb),

CHECK:SPACING: No space is necessary after a cast
#872: FILE: fs/ext2/super.c:890:
+			(int) ext2_count_free_inodes_old(sb));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#883: FILE: fs/ext2/super.c:922:
+				printk("EXT2-fs: invalid dirs_dc %d (real %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: fs/ext2/super.c:923:
+				printk("EXT2-fs: invalid dirs_dc %d (real %d)\n",
+					(int) dcounter_value(&EXT2_SB(sb)->dirs_dc),

CHECK:SPACING: No space is necessary after a cast
#884: FILE: fs/ext2/super.c:923:
+					(int) dcounter_value(&EXT2_SB(sb)->dirs_dc),

CHECK:SPACING: No space is necessary after a cast
#885: FILE: fs/ext2/super.c:924:
+					(int) ext2_count_dirs(sb));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#889: FILE: fs/ext2/super.c:928:
+^I^I^Iif (ext2_count_free_blocks(sb) != ext2_count_free_blocks_old(sb)) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#890: FILE: fs/ext2/super.c:929:
+				printk("EXT2-fs: invalid free blocks dcounter %d (real %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: fs/ext2/super.c:930:
+				printk("EXT2-fs: invalid free blocks dcounter %d (real %d)\n",
+					(int)ext2_count_free_blocks(sb),

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 33)
#896: FILE: fs/ext2/super.c:935:
+			if (ext2_count_free_inodes(sb) != ext2_count_free_inodes_old(sb))
+				 printk("EXT2-fs: invalid free inodes dcounter %d (real %d)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#897: FILE: fs/ext2/super.c:936:
+				 printk("EXT2-fs: invalid free inodes dcounter %d (real %d)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: fs/ext2/super.c:1026:
+^I^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#924: FILE: fs/ext2/super.c:1028:
+			desc = ext2_get_group_desc (sb, i, NULL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#946: FILE: include/asm-alpha/bitops.h:490:
+#define ext2_set_bit_atomic(l,n,a)   test_and_set_bit(n,a)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#946: FILE: include/asm-alpha/bitops.h:490:
+#define ext2_set_bit_atomic(l,n,a)   test_and_set_bit(n,a)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#946: FILE: include/asm-alpha/bitops.h:490:
+#define ext2_set_bit_atomic(l,n,a)   test_and_set_bit(n,a)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: include/asm-alpha/bitops.h:492:
+#define ext2_clear_bit_atomic(l,n,a) test_and_clear_bit(n,a)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: include/asm-alpha/bitops.h:492:
+#define ext2_clear_bit_atomic(l,n,a) test_and_clear_bit(n,a)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: include/asm-alpha/bitops.h:492:
+#define ext2_clear_bit_atomic(l,n,a) test_and_clear_bit(n,a)
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#959: FILE: include/asm-arm/bitops.h:360:
+#define ext2_set_bit_atomic(lock,nr,p)          \
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#959: FILE: include/asm-arm/bitops.h:360:
+#define ext2_set_bit_atomic(lock,nr,p)          \
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#960: FILE: include/asm-arm/bitops.h:361:
+                test_and_set_bit(WORD_BITOFF_TO_LE(nr), (unsigned long *)(p))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: include/asm-arm/bitops.h:361:
+                test_and_set_bit(WORD_BITOFF_TO_LE(nr), (unsigned long *)(p))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#963: FILE: include/asm-arm/bitops.h:364:
+#define ext2_clear_bit_atomic(lock,nr,p)        \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#963: FILE: include/asm-arm/bitops.h:364:
+#define ext2_clear_bit_atomic(lock,nr,p)        \
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#964: FILE: include/asm-arm/bitops.h:365:
+                test_and_clear_bit(WORD_BITOFF_TO_LE(nr), (unsigned long *)(p))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: include/asm-arm/bitops.h:365:
+                test_and_clear_bit(WORD_BITOFF_TO_LE(nr), (unsigned long *)(p))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#975: FILE: include/asm-cris/bitops.h:363:
+#define ext2_set_bit_atomic(l,n,a)   test_and_set_bit(n,a)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#975: FILE: include/asm-cris/bitops.h:363:
+#define ext2_set_bit_atomic(l,n,a)   test_and_set_bit(n,a)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#975: FILE: include/asm-cris/bitops.h:363:
+#define ext2_set_bit_atomic(l,n,a)   test_and_set_bit(n,a)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#977: FILE: include/asm-cris/bitops.h:365:
+#define ext2_clear_bit_atomic(l,n,a) test_and_clear_bit(n,a)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#977: FILE: include/asm-cris/bitops.h:365:
+#define ext2_clear_bit_atomic(l,n,a) test_and_clear_bit(n,a)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#977: FILE: include/asm-cris/bitops.h:365:
+#define ext2_clear_bit_atomic(l,n,a) test_and_clear_bit(n,a)
                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#988: FILE: include/asm-i386/bitops.h:482:
+#define ext2_set_bit_atomic(lock,nr,addr) \
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#988: FILE: include/asm-i386/bitops.h:482:
+#define ext2_set_bit_atomic(lock,nr,addr) \
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: include/asm-i386/bitops.h:483:
+        test_and_set_bit((nr),(unsigned long*)addr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: include/asm-i386/bitops.h:483:
+        test_and_set_bit((nr),(unsigned long*)addr)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#989: FILE: include/asm-i386/bitops.h:483:
+        test_and_set_bit((nr),(unsigned long*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#989: FILE: include/asm-i386/bitops.h:483:
+        test_and_set_bit((nr),(unsigned long*)addr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#992: FILE: include/asm-i386/bitops.h:486:
+#define ext2_clear_bit_atomic(lock,nr, addr) \
                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#993: FILE: include/asm-i386/bitops.h:487:
+^I        test_and_clear_bit((nr),(unsigned long*)addr)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#993: FILE: include/asm-i386/bitops.h:487:
+	        test_and_clear_bit((nr),(unsigned long*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#993: FILE: include/asm-i386/bitops.h:487:
+	        test_and_clear_bit((nr),(unsigned long*)addr)
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1004: FILE: include/asm-ia64/bitops.h:456:
+#define ext2_set_atomic(l,n,a)	     test_and_set_bit(n,a)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1004: FILE: include/asm-ia64/bitops.h:456:
+#define ext2_set_atomic(l,n,a)	     test_and_set_bit(n,a)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1004: FILE: include/asm-ia64/bitops.h:456:
+#define ext2_set_atomic(l,n,a)	     test_and_set_bit(n,a)
                               	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1006: FILE: include/asm-ia64/bitops.h:458:
+#define ext2_clear_atomic(l,n,a)     test_and_clear_bit(n,a)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1006: FILE: include/asm-ia64/bitops.h:458:
+#define ext2_clear_atomic(l,n,a)     test_and_clear_bit(n,a)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1006: FILE: include/asm-ia64/bitops.h:458:
+#define ext2_clear_atomic(l,n,a)     test_and_clear_bit(n,a)
                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1017: FILE: include/asm-m68k/bitops.h:368:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1026: FILE: include/asm-m68k/bitops.h:377:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1045: FILE: include/asm-m68knommu/bitops.h:405:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1054: FILE: include/asm-m68knommu/bitops.h:414:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1073: FILE: include/asm-mips/bitops.h:827:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1082: FILE: include/asm-mips/bitops.h:836:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1111: FILE: include/asm-mips64/bitops.h:534:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1120: FILE: include/asm-mips64/bitops.h:543:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1149: FILE: include/asm-parisc/bitops.h:392:
+#define ext2_set_bit_atomic(l,nr,addr)  test_and_set_bit((nr) ^ 0x38, addr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1149: FILE: include/asm-parisc/bitops.h:392:
+#define ext2_set_bit_atomic(l,nr,addr)  test_and_set_bit((nr) ^ 0x38, addr)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1151: FILE: include/asm-parisc/bitops.h:394:
+#define ext2_clear_bit_atomic(l,nr,addr) test_and_clear_bit((nr) ^ 0x38, addr)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1151: FILE: include/asm-parisc/bitops.h:394:
+#define ext2_clear_bit_atomic(l,nr,addr) test_and_clear_bit((nr) ^ 0x38, addr)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1154: FILE: include/asm-parisc/bitops.h:397:
+#define ext2_set_bit_atomic(l,nr,addr)  test_and_set_bit((nr) ^ 0x18, addr)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1154: FILE: include/asm-parisc/bitops.h:397:
+#define ext2_set_bit_atomic(l,nr,addr)  test_and_set_bit((nr) ^ 0x18, addr)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1156: FILE: include/asm-parisc/bitops.h:399:
+#define ext2_clear_bit_atomic(l,nr,addr) test_and_clear_bit((nr) ^ 0x18, addr)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1156: FILE: include/asm-parisc/bitops.h:399:
+#define ext2_clear_bit_atomic(l,nr,addr) test_and_clear_bit((nr) ^ 0x18, addr)
                                   ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1169: FILE: include/asm-ppc/bitops.h:397:
+#define ext2_clear_bit_atomic(lock, nr, addr) test_and_clear_bit((nr) ^ 0x18, (unsigned long *)(addr))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1181: FILE: include/asm-ppc64/bitops.h:342:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1190: FILE: include/asm-ppc64/bitops.h:351:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

ERROR:CODE_INDENT: code indent should use tabs where possible
#1210: FILE: include/asm-s390/bitops.h:809:
+^I        test_and_set_bit((nr)^24, (unsigned long *)addr)$

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#1210: FILE: include/asm-s390/bitops.h:809:
+	        test_and_set_bit((nr)^24, (unsigned long *)addr)
 	                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1214: FILE: include/asm-s390/bitops.h:813:
+^I        test_and_clear_bit((nr)^24, (unsigned long *)addr)$

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#1214: FILE: include/asm-s390/bitops.h:813:
+	        test_and_clear_bit((nr)^24, (unsigned long *)addr)
 	                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1226: FILE: include/asm-s390x/bitops.h:842:
+^I        test_and_set_bit((nr)^56, (unsigned long *)addr)$

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#1226: FILE: include/asm-s390x/bitops.h:842:
+	        test_and_set_bit((nr)^56, (unsigned long *)addr)
 	                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1230: FILE: include/asm-s390x/bitops.h:846:
+^I        test_and_clear_bit((nr)^56, (unsigned long *)addr)$

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#1230: FILE: include/asm-s390x/bitops.h:846:
+	        test_and_clear_bit((nr)^56, (unsigned long *)addr)
 	                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1241: FILE: include/asm-sh/bitops.h:347:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1250: FILE: include/asm-sh/bitops.h:356:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1270: FILE: include/asm-sparc/bitops.h:459:
+#define ext2_set_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_set_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1279: FILE: include/asm-sparc/bitops.h:468:
+#define ext2_clear_bit_atomic(lock, nr, addr)		\
+	({						\
+		int ret;				\
+		spin_lock(lock);			\
+		ret = ext2_clear_bit((nr), (addr));	\
+		spin_unlock(lock);			\
+		ret;					\
+	})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1298: FILE: include/asm-sparc64/bitops.h:354:
+#define ext2_set_bit_atomic(lock,nr,addr) test_and_set_le_bit((nr),(unsigned long *)(addr))
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1298: FILE: include/asm-sparc64/bitops.h:354:
+#define ext2_set_bit_atomic(lock,nr,addr) test_and_set_le_bit((nr),(unsigned long *)(addr))
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1298: FILE: include/asm-sparc64/bitops.h:354:
+#define ext2_set_bit_atomic(lock,nr,addr) test_and_set_le_bit((nr),(unsigned long *)(addr))
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1300: FILE: include/asm-sparc64/bitops.h:356:
+#define ext2_clear_bit_atomic(lock,nr,addr) test_and_clear_le_bit((nr),(unsigned long *)(addr))
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1300: FILE: include/asm-sparc64/bitops.h:356:
+#define ext2_clear_bit_atomic(lock,nr,addr) test_and_clear_le_bit((nr),(unsigned long *)(addr))
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1300: FILE: include/asm-sparc64/bitops.h:356:
+#define ext2_clear_bit_atomic(lock,nr,addr) test_and_clear_le_bit((nr),(unsigned long *)(addr))
                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1311: FILE: include/asm-v850/bitops.h:255:
+#define ext2_set_bit_atomic(l,n,a)      test_and_set_bit(n,a)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1311: FILE: include/asm-v850/bitops.h:255:
+#define ext2_set_bit_atomic(l,n,a)      test_and_set_bit(n,a)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1311: FILE: include/asm-v850/bitops.h:255:
+#define ext2_set_bit_atomic(l,n,a)      test_and_set_bit(n,a)
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1313: FILE: include/asm-v850/bitops.h:257:
+#define ext2_clear_bit_atomic(l,n,a)    test_and_clear_bit(n,a)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1313: FILE: include/asm-v850/bitops.h:257:
+#define ext2_clear_bit_atomic(l,n,a)    test_and_clear_bit(n,a)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1313: FILE: include/asm-v850/bitops.h:257:
+#define ext2_clear_bit_atomic(l,n,a)    test_and_clear_bit(n,a)
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1324: FILE: include/asm-x86_64/bitops.h:490:
+#define ext2_set_bit_atomic(lock,nr,addr) \
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1324: FILE: include/asm-x86_64/bitops.h:490:
+#define ext2_set_bit_atomic(lock,nr,addr) \
                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1325: FILE: include/asm-x86_64/bitops.h:491:
+^I        test_and_set_bit((nr),(unsigned long*)addr)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1325: FILE: include/asm-x86_64/bitops.h:491:
+	        test_and_set_bit((nr),(unsigned long*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1325: FILE: include/asm-x86_64/bitops.h:491:
+	        test_and_set_bit((nr),(unsigned long*)addr)
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1328: FILE: include/asm-x86_64/bitops.h:494:
+#define ext2_clear_bit_atomic(lock,nr,addr) \
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1328: FILE: include/asm-x86_64/bitops.h:494:
+#define ext2_clear_bit_atomic(lock,nr,addr) \
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1329: FILE: include/asm-x86_64/bitops.h:495:
+^I        test_and_clear_bit((nr),(unsigned long*)addr)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1329: FILE: include/asm-x86_64/bitops.h:495:
+	        test_and_clear_bit((nr),(unsigned long*)addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1329: FILE: include/asm-x86_64/bitops.h:495:
+	        test_and_clear_bit((nr),(unsigned long*)addr)
 	                               ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1337: FILE: include/linux/dcounter.h:1:
+#ifndef _DCOUNTER_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Distrubuted' may be misspelled - perhaps 'Distributed'?
#1340: FILE: include/linux/dcounter.h:4:
+ * Distrubuted counters:
    ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1341: FILE: include/linux/dcounter.h:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1355: FILE: include/linux/dcounter.h:19:
+ *   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1367: FILE: include/linux/dcounter.h:31:
+^Ilong dd_value; $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1382: FILE: include/linux/dcounter.h:46:
+	memset(dc->dc_diff, 0, sizeof(struct dcounter_diff) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1394: FILE: include/linux/dcounter.h:58:
+		for (i = 0; i < NR_CPUS; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1399: FILE: include/linux/dcounter.h:63:
+^I^Icounter = dc->dc_min;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1406: FILE: include/linux/dcounter.h:70:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1411: FILE: include/linux/dcounter.h:75:
+	if (dc->dc_diff[cpu].dd_value > DCOUNTER_MAX_DIFF ||
+		dc->dc_diff[cpu].dd_value < -DCOUNTER_MAX_DIFF) {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1433: FILE: include/linux/ext2_fs_sb.h:23:
+	spinlock_t balloc_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1434: FILE: include/linux/ext2_fs_sb.h:24:
+	spinlock_t ialloc_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000385230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 95 errors, 40 warnings, 61 checks, 1263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000385230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
