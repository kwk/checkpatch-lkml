WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> > > Minor issue of coding style. I'd steer away from such gratuitious changes, 

WARNING:TYPO_SPELLING: 'gratuitious' may be misspelled - perhaps 'gratuitous'?
#32: 
> > > Minor issue of coding style. I'd steer away from such gratuitious changes, 
                                                            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#51: 
> fair, thats what I usually do as well 8)
        ^^^^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#62: FILE: drivers/block/rd.c:676:
+	if ((inode = get_empty_inode(NULL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#71: FILE: drivers/block/rd.c:686:
+	if ((out_inode = get_empty_inode(NULL)) == NULL)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:INDENTED_LABEL: labels should not be indented
#84: FILE: fs/ext2/super.c:810:
+	owner:		THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#85: FILE: fs/ext2/super.c:811:
+	fs_flags:	FS_REQUIRES_DEV,
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#85: FILE: fs/ext2/super.c:811:
+	fs_flags:	FS_REQUIRES_DEV,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#86: FILE: fs/ext2/super.c:812:
+	name:		"ext2",
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#86: FILE: fs/ext2/super.c:812:
+	name:		"ext2",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#87: FILE: fs/ext2/super.c:813:
+	read_super:	ext2_read_super,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#87: FILE: fs/ext2/super.c:813:
+	read_super:	ext2_read_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#88: FILE: fs/ext2/super.c:814:
+	super_size:	sizeof(struct ext2_sb_info),
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#88: FILE: fs/ext2/super.c:814:
+	super_size:	sizeof(struct ext2_sb_info),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#89: FILE: fs/ext2/super.c:815:
+	inode_size:	sizeof(struct ext2_inode_info)
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#89: FILE: fs/ext2/super.c:815:
+	inode_size:	sizeof(struct ext2_inode_info)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: fs/ext2/super.c:817:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: fs/ext2/super.c:817:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: fs/ext2/super.c:820:
+        return register_filesystem(&ext2_fs);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: fs/ext2/super.c:820:
+        return register_filesystem(&ext2_fs);$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#115: FILE: fs/inode.c:80:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#115: FILE: fs/inode.c:80:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                                                 ^

CHECK:SPACING: No space is necessary after a cast
#116: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#116: FILE: fs/inode.c:81:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#116: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#116: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);
 	                                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#116: FILE: fs/inode.c:81:
+	return (struct inode *) kmem_cache_alloc (cache? cache: inode_cachep, SLAB_KERNEL);
 	                                                      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#122: FILE: fs/inode.c:87:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#122: FILE: fs/inode.c:87:
+	kmem_cache_t *cache = sb? sb->s_type->inode_cache: NULL;
 	                                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: fs/inode.c:90:
+	kmem_cache_free (cache? cache: inode_cachep, inode);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#126: FILE: fs/inode.c:90:
+	kmem_cache_free (cache? cache: inode_cachep, inode);
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#126: FILE: fs/inode.c:90:
+	kmem_cache_free (cache? cache: inode_cachep, inode);
 	                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#142: FILE: fs/inode.c:100:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) == SLAB_CTOR_CONSTRUCTOR)
 	                              ^

CHECK:SPACING: No space is necessary after a cast
#145: FILE: fs/inode.c:102:
+		struct inode *inode = (struct inode *) p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: fs/inode.c:103:
+		struct inode *inode = (struct inode *) p;
+		kmem_cache_clear (cache, inode);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#146: FILE: fs/inode.c:103:
+		kmem_cache_clear (cache, inode);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#162: FILE: fs/inode.c:732:
+#if 0

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#167: FILE: fs/inode.c:737:
+		kmem_cache_shrink (fs->inode_cache);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#185: FILE: fs/inode.c:785:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#185: FILE: fs/inode.c:785:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
 	                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#185: FILE: fs/inode.c:785:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
 	                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: fs/inode.c:786:
+	unsigned given = sb? sb->s_type->inode_size: 0; // only rd.c has null sb
+	memset(&inode->u, 0, given? given: sizeof(inode->u));

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#186: FILE: fs/inode.c:786:
+	memset(&inode->u, 0, given? given: sizeof(inode->u));
 	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#186: FILE: fs/inode.c:786:
+	memset(&inode->u, 0, given? given: sizeof(inode->u));
 	                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#205: FILE: fs/inode.c:825:
+	inode = alloc_inode (sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#230: FILE: fs/inode.c:854:
+	inode = alloc_inode (sb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: fs/inode.c:916:
+^I^Iif (!(fs->inode_cache = kmem_cache_create (fs->name, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#261: FILE: fs/inode.c:916:
+		if (!(fs->inode_cache = kmem_cache_create (fs->name, 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#261: FILE: fs/inode.c:916:
+		if (!(fs->inode_cache = kmem_cache_create (fs->name, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: fs/inode.c:917:
+		if (!(fs->inode_cache = kmem_cache_create (fs->name, 
+		    fs->inode_size + sizeof(struct inode) - sizeof(get_empty_inode(0)->u),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#270: FILE: fs/inode.c:925:
+	return kmem_cache_destroy (fs->inode_cache)? -EBUSY: 0;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#270: FILE: fs/inode.c:925:
+	return kmem_cache_destroy (fs->inode_cache)? -EBUSY: 0;
 	                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#270: FILE: fs/inode.c:925:
+	return kmem_cache_destroy (fs->inode_cache)? -EBUSY: 0;
 	                                                   ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#309: FILE: fs/super.c:123:
+		if (!(err = create_inode_cache (fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#309: FILE: fs/super.c:123:
+		if (!(err = create_inode_cache (fs)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#336: FILE: fs/super.c:149:
+			if (fs->inode_cache && (err = destroy_inode_cache (fs)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#336: FILE: fs/super.c:149:
+			if (fs->inode_cache && (err = destroy_inode_cache (fs)))

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#373: FILE: include/linux/fs.h:959:
+	unsigned super_size, inode_size;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#387: FILE: include/linux/fs.h:1338:
+extern struct inode *get_empty_inode(struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/fs.h:1350:
+extern int create_inode_cache(struct file_system_type *fs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: include/linux/fs.h:1351:
+extern int destroy_inode_cache(struct file_system_type *fs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: include/linux/fs.h:1352:
+extern void remove_suid(struct inode *inode);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: include/linux/slab.h:60:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#415: FILE: include/linux/slab.h:60:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#415: FILE: include/linux/slab.h:60:
+extern void kmem_cache_clear(kmem_cache_t *, void *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: mm/slab.c:1083:
+	unsigned size = cachep->objsize;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#430: FILE: mm/slab.c:1086:
+		size -= BYTES_PER_WORD*2;
 		                      ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000488040.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 38 warnings, 10 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000488040.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
