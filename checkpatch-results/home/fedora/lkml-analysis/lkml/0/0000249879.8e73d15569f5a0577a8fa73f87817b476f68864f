CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#41: FILE: arch/um/include/user_util.h:91:
+extern int setjmp_wrapper(void (*proc)(void *, void *), ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#70: FILE: arch/um/kernel/skas/uaccess.c:61:
+	int (*op)(unsigned long, int, void *) = va_arg(args, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#70: FILE: arch/um/kernel/skas/uaccess.c:61:
+	int (*op)(unsigned long, int, void *) = va_arg(args, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#70: FILE: arch/um/kernel/skas/uaccess.c:61:
+	int (*op)(unsigned long, int, void *) = va_arg(args, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#70: FILE: arch/um/kernel/skas/uaccess.c:61:
+	int (*op)(unsigned long, int, void *) = va_arg(args, void *);

ERROR:SPACING: space required before the open brace '{'
#80: FILE: arch/um/kernel/skas/uaccess.c:69:
+	if(n != 0){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#80: FILE: arch/um/kernel/skas/uaccess.c:69:
+	if(n != 0){

ERROR:SPACING: space required before the open brace '{'
#89: FILE: arch/um/kernel/skas/uaccess.c:76:
+	if(remain == 0){

ERROR:SPACING: space required before the open parenthesis '('
#89: FILE: arch/um/kernel/skas/uaccess.c:76:
+	if(remain == 0){

ERROR:SPACING: space required before the open brace '{'
#98: FILE: arch/um/kernel/skas/uaccess.c:83:
+		if(n != 0){

ERROR:SPACING: space required before the open parenthesis '('
#98: FILE: arch/um/kernel/skas/uaccess.c:83:
+		if(n != 0){

ERROR:SPACING: space required before the open brace '{'
#108: FILE: arch/um/kernel/skas/uaccess.c:91:
+	if(remain == 0){

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: arch/um/kernel/skas/uaccess.c:91:
+	if(remain == 0){

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#118: FILE: arch/um/kernel/skas/uaccess.c:99:
+	else *res = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/um/kernel/skas/uaccess.c:110:
+^Ifaulted = setjmp_wrapper(do_buffer_op, addr, len, is_write, op, arg, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#131: FILE: arch/um/kernel/skas/uaccess.c:112:
+	if(!faulted)

CHECK:SPACING: No space is necessary after a cast
#134: FILE: arch/um/kernel/skas/uaccess.c:115:
+	return(addr + len - (unsigned long) current->thread.fault_addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: arch/um/kernel/user_util.c:175:
+        va_list args;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: arch/um/kernel/user_util.c:175:
+        va_list args;$

ERROR:SPACING: space required before the open brace '{'
#161: FILE: arch/um/kernel/user_util.c:180:
+	if(n == 0){

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: arch/um/kernel/user_util.c:180:
+	if(n == 0){

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#166: FILE: arch/um/kernel/user_util.c:185:
+	return(n);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#190: FILE: arch/um/sys-i386/bugs.c:193:
+	if (copy_from_user_proc(tmp, (void *) UPT_IP(regs), 2))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp[0] != 0x0f'
#192: FILE: arch/um/sys-i386/bugs.c:195:
+	if((tmp[0] != 0x0f) || ((tmp[1] & 0xf0) != 0x40))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#192: FILE: arch/um/sys-i386/bugs.c:195:
+	if((tmp[0] != 0x0f) || ((tmp[1] & 0xf0) != 0x40))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249879.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 5 warnings, 4 checks, 149 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000249879.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
