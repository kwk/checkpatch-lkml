WARNING:TYPO_SPELLING: 'overwritting' may be misspelled - perhaps 'overwriting'?
#42: 
>>during resume by simply overwritting the key.
                          ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
--- linux-2.6.13-rc3.orig/kernel/power/Kconfig	2005-07-17 16:03:26.000000000 +0200

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: kernel/power/Kconfig:75:
+config SWSUSP_ENCRYPT
+	bool "Encrypt suspend image"
+	depends on SOFTWARE_SUSPEND && CRYPTO=y && (CRYPTO_AES=y || CRYPTO_AES_586=y || CRYPTO_AES_X86_64=y)
+	default ""
+	---help---
+	  To prevent data gathering from swap after resume you can encrypt
+	  the suspend image with a temporary key that is deleted on
+	  resume.
+
+	  Note that the temporary key is stored unencrypted on disk while the
+	  system is suspended.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#131: FILE: kernel/power/swsusp.c:118:
+	u8 key_iv[MAXKEY+MAXIV];
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: kernel/power/swsusp.c:144:
+static int write_page(unsigned long addr, swp_entry_t * loc);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: kernel/power/swsusp.c:145:
+static int bio_read_page(pgoff_t page_off, void * page);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: kernel/power/swsusp.c:147:
+static u8 key_iv[MAXKEY+MAXIV];
                        ^

ERROR:SPACING: space required before the open parenthesis '('
#156: FILE: kernel/power/swsusp.c:161:
+	if(!tfm) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#157: FILE: kernel/power/swsusp.c:162:
+		printk(KERN_ERR "swsusp: no tfm, %s\n", modemsg);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#162: FILE: kernel/power/swsusp.c:167:
+	if(MAXKEY < crypto_tfm_alg_min_keysize(tfm)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: kernel/power/swsusp.c:167:
+	if(MAXKEY < crypto_tfm_alg_min_keysize(tfm)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#163: FILE: kernel/power/swsusp.c:168:
+		printk(KERN_ERR "swsusp: key buffer too small, %s\n", modemsg);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#169: FILE: kernel/power/swsusp.c:174:
+		get_random_bytes(key_iv, MAXKEY+MAXIV);
 		                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#176: FILE: kernel/power/swsusp.c:181:
+		printk(KERN_ERR "swsusp: key setup failure, %s\n", modemsg);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#183: FILE: kernel/power/swsusp.c:188:
+	if (MAXIV < len) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#184: FILE: kernel/power/swsusp.c:189:
+		printk(KERN_ERR "swsusp: iv buffer too small, %s\n", modemsg);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: kernel/power/swsusp.c:194:
+	crypto_cipher_set_iv(tfm, key_iv+MAXKEY, len);
 	                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#191: FILE: kernel/power/swsusp.c:196:
+	*mem=(void *)tfm;
 	    ^

WARNING:INLINE: plain inline is preferred over __inline__
#199: FILE: kernel/power/swsusp.c:204:
+static __inline__ void crypto_exit(void *mem)

WARNING:INLINE: plain inline is preferred over __inline__
#204: FILE: kernel/power/swsusp.c:209:
+static __inline__ int crypto_write(struct pbe *p, void *mem)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: kernel/power/swsusp.c:222:
+	error = crypto_cipher_encrypt((struct crypto_tfm *)mem, &dst, &src,
+					PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: kernel/power/swsusp.c:226:
+		error = write_page((unsigned long)&swsusp_header,
+				&(p->swap_address));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->swap_address
#221: FILE: kernel/power/swsusp.c:226:
+				&(p->swap_address));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INLINE: plain inline is preferred over __inline__
#225: FILE: kernel/power/swsusp.c:230:
+static __inline__ int crypto_read(struct pbe *p, void *mem)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#236: FILE: kernel/power/swsusp.c:241:
+		src.page = dst.page = virt_to_page((void *)p->address);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: kernel/power/swsusp.c:244:
+		error = crypto_cipher_decrypt((struct crypto_tfm *)mem, &dst,
+						&src, PAGE_SIZE);

WARNING:INLINE: plain inline is preferred over __inline__
#244: FILE: kernel/power/swsusp.c:249:
+static __inline__ int crypto_init(int mode, void *mem)

WARNING:INLINE: plain inline is preferred over __inline__
#249: FILE: kernel/power/swsusp.c:254:
+static __inline__ void crypto_exit(void *mem)

WARNING:INLINE: plain inline is preferred over __inline__
#253: FILE: kernel/power/swsusp.c:258:
+static __inline__ int crypto_write(struct pbe *p, void *mem)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->swap_address
#255: FILE: kernel/power/swsusp.c:260:
+	return write_page(p->address, &(p->swap_address));

WARNING:INLINE: plain inline is preferred over __inline__
#258: FILE: kernel/power/swsusp.c:263:
+static __inline__ int crypto_read(struct pbe *p, void *mem)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#271: FILE: kernel/power/swsusp.c:280:
+		memcpy(swsusp_header.key_iv, key_iv, MAXKEY+MAXIV);
 		                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: kernel/power/swsusp.c:429:
+	if ((error = crypto_init(1, &tfm)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#291: FILE: kernel/power/swsusp.c:439:
+		if ((error = crypto_write(p, tfm))) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#306: FILE: kernel/power/swsusp.c:548:
+	memset(key_iv, 0, MAXKEY+MAXIV);
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: kernel/power/swsusp.c:1361:
+		memcpy(key_iv, swsusp_header.key_iv, MAXKEY+MAXIV);
 		                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#315: FILE: kernel/power/swsusp.c:1362:
+		memset(swsusp_header.key_iv, 0, MAXKEY+MAXIV);
 		                                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#325: FILE: kernel/power/swsusp.c:1392:
+	if ((error = crypto_init(0, &tfm)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#337: FILE: kernel/power/swsusp.c:1405:
+		if ((error = crypto_read(p, tfm))) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#353: FILE: kernel/power/swsusp.c:1541:
+	memset(key_iv, 0, MAXKEY+MAXIV);
 	                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000167002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 16 warnings, 15 checks, 265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000167002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
