WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#79: 
diff -ur rt2500-cvs-2006040703/Module/mlme.c /root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#86: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:353:
+extern void dump_prio(PRTMP_ADAPTER A);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:359:
+    int loops=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#93: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:359:
+    int loops=0;
              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:360:
+    { int static done = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#94: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:360:
+    { int static done = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:STORAGE_CLASS: storage class 'static' should be located before type 'int'
#94: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:360:
+    { int static done = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:361:
+    if (!done) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#95: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:361:
+    if (!done) {
+	    done = 1;

CHECK:CAMELCASE: Avoid CamelCase: <pAd>
#97: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:363:
+	    dump_prio(pAd);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:364:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:365:
+    }$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#109: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:423:
+		static int done = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:424:
+		static int done = 0;
+		if (done) break;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#110: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:424:
+		if (done) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#111: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:425:
+		done=1;
 		    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/mlme.c:427:
+		printk("BREAK\n"); break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#131: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rt2560.h:521:
+/* 0x169
+ TbcnExpire

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:913:
+	PTXD_STRUC T;
+	printk("Prio: Index=%d Done=%d\n", A->CurPrioIndex, A->NextPrioDoneIndex);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:913:
+	printk("Prio: Index=%d Done=%d\n", A->CurPrioIndex, A->NextPrioDoneIndex);

CHECK:CAMELCASE: Avoid CamelCase: <CurPrioIndex>
#155: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:913:
+	printk("Prio: Index=%d Done=%d\n", A->CurPrioIndex, A->NextPrioDoneIndex);

CHECK:CAMELCASE: Avoid CamelCase: <NextPrioDoneIndex>
#155: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:913:
+	printk("Prio: Index=%d Done=%d\n", A->CurPrioIndex, A->NextPrioDoneIndex);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#156: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:914:
+	for (i=0; i<PRIO_RING_SIZE; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#156: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:914:
+	for (i=0; i<PRIO_RING_SIZE; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#157: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:915:
+		T=(PTXD_STRUC)(A->PrioRing[i].va_addr);
 		 ^

CHECK:CAMELCASE: Avoid CamelCase: <PrioRing>
#157: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:915:
+		T=(PTXD_STRUC)(A->PrioRing[i].va_addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#158: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:916:
+		printk("%3d: size=%d FT=%d own=%d vld=%d, rty=%d\n",

CHECK:CAMELCASE: Avoid CamelCase: <FrameType>
#159: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:917:
+		       i, A->PrioRing[i].size, A->PrioRing[i].FrameType,

CHECK:CAMELCASE: Avoid CamelCase: <Owner>
#160: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:918:
+		       T->Owner, T->Valid, T->RetryCount);

CHECK:CAMELCASE: Avoid CamelCase: <Valid>
#160: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:918:
+		       T->Owner, T->Valid, T->RetryCount);

CHECK:CAMELCASE: Avoid CamelCase: <RetryCount>
#160: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:918:
+		       T->Owner, T->Valid, T->RetryCount);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#162: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:920:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#164: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:922:
+	printk("CSR7 is 0x%x\n", u);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:924:
+	printk("CSR8 is 0x%x\n", u);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:2143:
+    printk("Queuing prio for %d\n", pAdapter->CurPrioIndex);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#190: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:2143:
+    printk("Queuing prio for %d\n", pAdapter->CurPrioIndex);

CHECK:CAMELCASE: Avoid CamelCase: <pAdapter>
#190: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:2143:
+    printk("Queuing prio for %d\n", pAdapter->CurPrioIndex);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#197: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:2150:
+		printk("...not mine\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_data.c:2159:
+		printk("...still valid\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 7)
#220: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:196:
     if (ifname == NULL)
+       strcpy(net_dev->name, "eth%d");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:197:
+       strcpy(net_dev->name, "eth%d");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:526:
+	printk("Word = %d\n", IntSource.word);

CHECK:CAMELCASE: Avoid CamelCase: <IntSource>
#239: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:526:
+	printk("Word = %d\n", IntSource.word);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#247: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:550:
+	printk("Don't enable interrupt\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:559:
+    RTMP_IO_READ32(pAdapter, CSR7, &IntSource.word);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:560:
+    if (IntSource.word & ~0xFE14) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 4)
#256: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:560:
+    if (IntSource.word & ~0xFE14) {
[...]
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:563:
+    }$

CHECK:BRACES: Unbalanced braces around else statement
#265: FILE: root/rt-latest/rt2500-cvs-2006040703/Module/rtmp_main.c:568:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 30 warnings, 11 checks, 158 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086660.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
