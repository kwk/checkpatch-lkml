WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#114: 
http://people.redhat.com/~mingo/realtime-preempt/older/realtime-preempt-2.6.12-rc6-V0.7.47-19

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#134: 
Signed-Off-By: Daniel Walker <dwalker@mvista.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#175: FILE: arch/i386/kernel/process.c:151:
 	while (1) {
[...]
+			BUG_ON(hard_irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: arch/i386/kernel/process.c:153:
+			BUG_ON(hard_irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/asm-i386/system.h:454:
+extern void local_irq_enable(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/asm-i386/system.h:455:
+extern void local_irq_enable_noresched(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/asm-i386/system.h:456:
+extern void local_irq_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/asm-i386/system.h:457:
+extern void local_irq_restore(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#261: FILE: include/asm-i386/system.h:457:
+extern void local_irq_restore(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/asm-i386/system.h:458:
+extern unsigned long irqs_disabled(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/asm-i386/system.h:459:
+extern unsigned long irqs_disabled_flags(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#263: FILE: include/asm-i386/system.h:459:
+extern unsigned long irqs_disabled_flags(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: include/asm-i386/system.h:460:
+extern unsigned int ___local_save_flags(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/asm-i386/system.h:461:
+extern void irq_trace_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: include/asm-i386/system.h:462:
+extern void irq_trace_disable(void);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#268: FILE: include/asm-i386/system.h:464:
+#define local_save_flags(x) ({ x = ___local_save_flags(); x;})
                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#268: FILE: include/asm-i386/system.h:464:
+#define local_save_flags(x) ({ x = ___local_save_flags(); x;})

ERROR:SPACING: space required after that ';' (ctx:VxV)
#269: FILE: include/asm-i386/system.h:465:
+#define local_irq_save(x) ({ local_save_flags(x); local_irq_disable(); x;})
                                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#269: FILE: include/asm-i386/system.h:465:
+#define local_irq_save(x) ({ local_save_flags(x); local_irq_disable(); x;})

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#270: FILE: include/asm-i386/system.h:466:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#270: FILE: include/asm-i386/system.h:466:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)
                    	                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#270: FILE: include/asm-i386/system.h:466:
+#define safe_halt()	do { local_irq_enable(); __asm__ __volatile__("hlt": : :"memory"); } while (0)
                    	                                                       ^

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#274: FILE: include/asm-i386/system.h:470:
+#define hard_local_irq_enable()		do { local_irq_enable_noresched(); _hard_local_irq_enable(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: include/asm-i386/system.h:470:
+#define hard_local_irq_enable()		do { local_irq_enable_noresched(); _hard_local_irq_enable(); } while(0)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#275: FILE: include/asm-i386/system.h:471:
+#define hard_local_irq_disable()	do { _hard_local_irq_disable(); local_irq_disable(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: include/asm-i386/system.h:471:
+#define hard_local_irq_disable()	do { _hard_local_irq_disable(); local_irq_disable(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#276: FILE: include/asm-i386/system.h:472:
+#define hard_local_irq_save(x)		do { _hard_local_irq_save(x); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#276: FILE: include/asm-i386/system.h:472:
+#define hard_local_irq_save(x)		do { _hard_local_irq_save(x); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#277: FILE: include/asm-i386/system.h:473:
+#define hard_local_irq_restore(x)		do { _hard_local_irq_restore(x); } while (0)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#278: FILE: include/asm-i386/system.h:474:
+#define hard_safe_halt()			do { local_irq_enable(); _hard_safe_halt(); } while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: include/asm-i386/system.h:486:
+#define local_irq_enable^I_hard_local_irq_enable $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: include/asm-i386/system.h:487:
+#define local_irq_disable^I_hard_local_irq_disable $

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#304: FILE: include/asm-i386/system.h:496:
+#define _hard_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: include/asm-i386/system.h:496:
+#define _hard_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                  	                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#304: FILE: include/asm-i386/system.h:496:
+#define _hard_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                  	                                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#304: FILE: include/asm-i386/system.h:496:
+#define _hard_local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
                                  	                                                                                 ^

WARNING:LONG_LINE: line length of 239 exceeds 100 columns
#305: FILE: include/asm-i386/system.h:497:
+#define _hard_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (hard_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#305: FILE: include/asm-i386/system.h:497:
+#define _hard_local_irq_restore(x) ^Ido { typecheck(unsigned long,x); if (hard_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: include/asm-i386/system.h:497:
+#define _hard_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (hard_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#305: FILE: include/asm-i386/system.h:497:
+#define _hard_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (hard_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                                                                                                                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#305: FILE: include/asm-i386/system.h:497:
+#define _hard_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (hard_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                                                                                                                                                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#305: FILE: include/asm-i386/system.h:497:
+#define _hard_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (hard_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                                    	                                                                                                                                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#305: FILE: include/asm-i386/system.h:497:
+#define _hard_local_irq_restore(x) 	do { typecheck(unsigned long,x); if (hard_irqs_disabled_flags(x)) trace_irqs_on(); else trace_irqs_on(); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#306: FILE: include/asm-i386/system.h:498:
+#define _hard_local_irq_disable() 	do { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: include/asm-i386/system.h:498:
+#define _hard_local_irq_disable() ^Ido { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#306: FILE: include/asm-i386/system.h:498:
+#define _hard_local_irq_disable() 	do { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)
                                   	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#306: FILE: include/asm-i386/system.h:498:
+#define _hard_local_irq_disable() 	do { __asm__ __volatile__("cli": : :"memory"); trace_irqs_off(); } while (0)
                                   	                                   ^

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#307: FILE: include/asm-i386/system.h:499:
+#define _hard_local_irq_enable()	do { trace_irqs_on(); __asm__ __volatile__("sti": : :"memory"); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#307: FILE: include/asm-i386/system.h:499:
+#define _hard_local_irq_enable()	do { trace_irqs_on(); __asm__ __volatile__("sti": : :"memory"); } while (0)
                                 	                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#307: FILE: include/asm-i386/system.h:499:
+#define _hard_local_irq_enable()	do { trace_irqs_on(); __asm__ __volatile__("sti": : :"memory"); } while (0)
                                 	                                                    ^

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#310: FILE: include/asm-i386/system.h:501:
+#define _hard_safe_halt()		do { trace_irqs_on(); __asm__ __volatile__("sti; hlt": : :"memory"); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#310: FILE: include/asm-i386/system.h:501:
+#define _hard_safe_halt()		do { trace_irqs_on(); __asm__ __volatile__("sti; hlt": : :"memory"); } while (0)
                          		                                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#310: FILE: include/asm-i386/system.h:501:
+#define _hard_safe_halt()		do { trace_irqs_on(); __asm__ __volatile__("sti; hlt": : :"memory"); } while (0)
                          		                                                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#313: FILE: include/asm-i386/system.h:503:
+#define hard_irqs_disabled_flags(flags)	\
 ({					\
 	!(flags & (1<<9));		\
 })

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#330: FILE: include/asm-i386/system.h:516:
+#define _hard_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#330: FILE: include/asm-i386/system.h:516:
+#define _hard_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)
                                	                                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#330: FILE: include/asm-i386/system.h:516:
+#define _hard_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)
                                	                                                           ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#330: FILE: include/asm-i386/system.h:516:
+#define _hard_local_irq_save(x)	do { __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory"); trace_irqs_off(); } while (0)
                                	                                                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: include/linux/hardirq.h:28:
+#define IRQSOFF_BITS^I1 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: include/linux/hardirq.h:29:
+#define PREEMPTACTIVE_BITS^I1 $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#353: FILE: include/linux/hardirq.h:47:
+#define IRQSOFF_SHIFT ^I^I(PREEMPTACTIVE_SHIFT + PREEMPTACTIVE_BITS)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#367: FILE: include/linux/hardirq.h:61:
+#define IRQSOFF_OFFSET        (1UL << IRQSOFF_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#385: FILE: include/linux/hardirq.h:83:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_OFFSET)) != kernel_locked())
                     	                                    ^

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#385: FILE: include/linux/hardirq.h:83:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_OFFSET)) != kernel_locked())

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#388: FILE: include/linux/hardirq.h:85:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_OFFSET)) != 0)
                     	                                    ^

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#388: FILE: include/linux/hardirq.h:85:
+# define in_atomic()	((preempt_count() & ~(PREEMPT_ACTIVE|IRQSOFF_OFFSET)) != 0)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#424: FILE: include/linux/seqlock.h:315:
+	do { write_sequnlock(lock); PICK_IRQOP2(hard_local_irq_restore, flags, lock); preempt_check_resched(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#424: FILE: include/linux/seqlock.h:315:
+	do { write_sequnlock(lock); PICK_IRQOP2(hard_local_irq_restore, flags, lock); preempt_check_resched(); } while(0)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#427: FILE: include/linux/seqlock.h:317:
+	do { write_sequnlock(lock); PICK_IRQOP(hard_local_irq_enable, lock); preempt_check_resched(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#427: FILE: include/linux/seqlock.h:317:
+	do { write_sequnlock(lock); PICK_IRQOP(hard_local_irq_enable, lock); preempt_check_resched(); } while(0)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#452: FILE: include/linux/spinlock.h:247:
+	1 : ({ __preempt_enable_no_resched(); local_irq_enable_noresched(); preempt_check_resched(); 0; }); \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: init/main.c:432:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: init/main.c:433:
+ ^I * Force the soft IRQ state to mimic the hard state until$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#493: FILE: init/main.c:433:
+ ^I * Force the soft IRQ state to mimic the hard state until$

WARNING:LINE_SPACING: Missing a blank line after declarations
#717: FILE: kernel/irq/handle.c:162:
+	unsigned long flags;
+	local_irq_save(flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: kernel/irq/manage.c:62:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#870: FILE: kernel/irqs-off.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#871: FILE: kernel/irqs-off.c:2:
+ * kernel/irqs-off.c $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#871: FILE: kernel/irqs-off.c:2:
+ * kernel/irqs-off.c 

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#873: FILE: kernel/irqs-off.c:4:
+ * IRQ soft state managment 
                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: kernel/irqs-off.c:4:
+ * IRQ soft state managment $

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - unsigned int ___local_save_flags() should probably be unsigned int ___local_save_flags(void)
#895: FILE: kernel/irqs-off.c:26:
+unsigned int ___local_save_flags()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: kernel/irqs-off.c:29:
+}                                                                                                                        $

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#898: FILE: kernel/irqs-off.c:29:
+}                                                                                                                        

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#908: FILE: kernel/irqs-off.c:39:
+	if (irqs_off()) sub_preempt_count(IRQSOFF_OFFSET);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#918: FILE: kernel/irqs-off.c:49:
+	if (irqs_off()) sub_preempt_count(IRQSOFF_OFFSET);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#921: FILE: kernel/irqs-off.c:52:
+^Ipreempt_check_resched(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: kernel/irqs-off.c:56:
+void local_irq_disable(void) $

CHECK:SPACING: No space is necessary after a cast
#925: FILE: kernel/irqs-off.c:56:
+void local_irq_disable(void) 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#931: FILE: kernel/irqs-off.c:62:
+	if (!irqs_off()) add_preempt_count(IRQSOFF_OFFSET);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#937: FILE: kernel/irqs-off.c:68:
+^Ireturn (flags & IRQSOFF_MASK);^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#943: FILE: kernel/irqs-off.c:74:
+	if (!irqs_disabled_flags(flags)) local_irq_enable();

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#955: FILE: kernel/irqs-off.c:86:
+	printk("Soft state access: (%s)\n", (hard_irqs_disabled()) ? "Hard disabled" : "Not disabled");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#955: FILE: kernel/irqs-off.c:86:
+	printk("Soft state access: (%s)\n", (hard_irqs_disabled()) ? "Hard disabled" : "Not disabled");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#956: FILE: kernel/irqs-off.c:87:
+	printk(".. [<%08lx>] .... ", task->last_irq_disable[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#958: FILE: kernel/irqs-off.c:89:
+	printk(".....[<%08lx>] ..   ( <= ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: kernel/irqs-off.c:90:
+	printk(".....[<%08lx>] ..   ( <= ",
+				task->last_irq_disable[1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#962: FILE: kernel/irqs-off.c:93:
+	printk(".. [<%08lx>] .... ", task->last_irq_enable[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#964: FILE: kernel/irqs-off.c:95:
+	printk(".....[<%08lx>] ..   ( <= ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: kernel/irqs-off.c:96:
+	printk(".....[<%08lx>] ..   ( <= ",
+				task->last_irq_enable[1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#967: FILE: kernel/irqs-off.c:98:
+	printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#986: FILE: kernel/latency.c:119:
+#define MAX_TRACE (unsigned long)(8192-1)
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#986: FILE: kernel/latency.c:119:
+#define MAX_TRACE (unsigned long)(8192-1)

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#995: FILE: kernel/latency.c:270:
+			(hard_irqs_disabled() ? TRACE_FLAG_IRQS_HARD_OFF : 0)|
 			                                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1062: FILE: kernel/latency.c:1653:
+ ^I^I(entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'n' : '.');$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1062: FILE: kernel/latency.c:1653:
+ ^I^I(entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'n' : '.');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: kernel/latency.c:1653:
+ ^I^I(entry->flags & TRACE_FLAG_NEED_RESCHED) ? 'n' : '.');$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1117: FILE: kernel/printk.c:757:
+	if (!in_atomic() && !irqs_disabled() && !hard_irqs_disabled())
[...]
 	if (wake_klogd && !oops_in_progress && waitqueue_active(&log_wait))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1208: FILE: kernel/sched.c:2629:
+	BUG_ON(!hard_irqs_disabled());

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1349: FILE: lib/Kconfig.RT:99:
+^I  Select this if you plan to use Linux in an $

WARNING:TYPO_SPELLING: 'enviorment' may be misspelled - perhaps 'environment'?
#1350: FILE: lib/Kconfig.RT:100:
+	  embedded enviorment that needs low interrupt
 	           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1377: FILE: lib/kernel_lock.c:112:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 44 warnings, 24 checks, 1068 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177823.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
