WARNING:LINE_SPACING: Missing a blank line after declarations
#116: FILE: arch/powerpc/platforms/cell/spufs/file.c:45:
+	struct spu_context *ctx = i->i_ctx;
+	file->private_data = ctx;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#168: FILE: arch/powerpc/platforms/cell/spufs/file.c:175:
+      out:

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#181: FILE: arch/powerpc/platforms/cell/spufs/file.c:188:
+static struct vm_operations_struct spufs_cntl_mmap_vmops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#234: FILE: arch/powerpc/platforms/cell/spufs/file.c:241:
+static struct file_operations spufs_cntl_fops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: arch/powerpc/platforms/cell/spufs/file.c:614:
+	struct spu_context *ctx = i->i_ctx;
+	file->private_data = ctx;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#274: FILE: arch/powerpc/platforms/cell/spufs/file.c:667:
+static struct vm_operations_struct spufs_signal1_mmap_vmops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#306: FILE: arch/powerpc/platforms/cell/spufs/file.c:698:
+	struct spu_context *ctx = i->i_ctx;
+	file->private_data = ctx;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#326: FILE: arch/powerpc/platforms/cell/spufs/file.c:753:
+static struct vm_operations_struct spufs_signal2_mmap_vmops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: arch/powerpc/platforms/cell/spufs/file.c:829:
+static struct page *spufs_mfc_mmap_nopage(struct vm_area_struct *vma,
+					   unsigned long address, int *type)

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#367: FILE: arch/powerpc/platforms/cell/spufs/file.c:834:
+static struct vm_operations_struct spufs_mfc_mmap_vmops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#437: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:48:
+^Istruct address_space *cntl; ^I   /* 'control' area mappings. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#438: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:49:
+^Istruct address_space *signal1; ^I   /* 'signal1' area mappings. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#439: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:50:
+^Istruct address_space *signal2; ^I   /* 'signal2' area mappings. */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#448: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:132:
+struct spu_context * alloc_spu_context(void);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114466.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 12 warnings, 1 checks, 386 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114466.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
