WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
Content-Disposition: attachment; filename=kernel-text-replication-2.5.70-mjb1-2.patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#53: FILE: arch/i386/Kconfig:734:
+config KERNEL_TEXT_REPLICATION
+	bool "Kernel text replication"
+	depends on NUMA && HIGHMEM64G
+
 # Need comments to help the hapless user trying to turn on NUMA support
 comment "NUMA (NUMA-Q) requires SMP, 64GB highmem support"
 	depends on X86_NUMAQ && (!HIGHMEM64G || !SMP)

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#97: FILE: arch/i386/mm/text_repl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#98: FILE: arch/i386/mm/text_repl.c:2:
+ * arch/i386/mm/text_repl.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: arch/i386/mm/text_repl.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: arch/i386/mm/text_repl.c:6:
+ * This is highly dependent on having the kernel text being mapped $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: arch/i386/mm/text_repl.c:8:
+ * $

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#114: FILE: arch/i386/mm/text_repl.c:18:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#117: FILE: arch/i386/mm/text_repl.c:21:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#122: FILE: arch/i386/mm/text_repl.c:26:
+int text_replicated = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#129: FILE: arch/i386/mm/text_repl.c:33:
+static inline pmd_t* text_pmd(int nid, int pmdnum)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: arch/i386/mm/text_repl.c:35:
+	return &textpmds[text_pmd_index(nid,pmdnum)];
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: arch/i386/mm/text_repl.c:37:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#142: FILE: arch/i386/mm/text_repl.c:46:
+	unsigned long alloc_order = PMD_SHIFT-PAGE_SHIFT;
 	                                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#143: FILE: arch/i386/mm/text_repl.c:47:
+	unsigned long pages_per_pmd = PMD_SIZE/PAGE_SIZE;
 	                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: arch/i386/mm/text_repl.c:54:
+	pmd_array_size = numnodes*sizeof(pmd_t)*(text_size/PMD_SIZE);
 	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: arch/i386/mm/text_repl.c:54:
+	pmd_array_size = numnodes*sizeof(pmd_t)*(text_size/PMD_SIZE);
 	                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#150: FILE: arch/i386/mm/text_repl.c:54:
+	pmd_array_size = numnodes*sizeof(pmd_t)*(text_size/PMD_SIZE);
 	                                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: arch/i386/mm/text_repl.c:57:
+		printk("could not allocate pmd array\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: arch/i386/mm/text_repl.c:61:
+^Ifor (textsrc = KERNEL_TEXT_START; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: arch/i386/mm/text_repl.c:62:
+^I^Itextsrc < KERNEL_TEXT_END; $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#159: FILE: arch/i386/mm/text_repl.c:63:
+		textsrc += PMD_SIZE, pmdnum++ ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#162: FILE: arch/i386/mm/text_repl.c:66:
+		set_pmd(text_pmd(0,pmdnum), make_pmd_for_pages(srcpages));
 		                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: arch/i386/mm/text_repl.c:67:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: arch/i386/mm/text_repl.c:73:
+			set_pmd(text_pmd(nid,pmdnum),make_pmd_for_pages(dstpages));
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: arch/i386/mm/text_repl.c:73:
+			set_pmd(text_pmd(nid,pmdnum),make_pmd_for_pages(dstpages));
 			                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#173: FILE: arch/i386/mm/text_repl.c:77:
+	printk("set up kernel text replication for %d nodes\n", numnodes);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/i386/mm/text_repl.c:78:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: arch/i386/mm/text_repl.c:82:
+^Iprintk("couldn't allocate text space for node: %d pmd: %d size: %ld\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#178: FILE: arch/i386/mm/text_repl.c:82:
+	printk("couldn't allocate text space for node: %d pmd: %d size: %ld\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: arch/i386/mm/text_repl.c:83:
+	printk("couldn't allocate text space for node: %d pmd: %d size: %ld\n", 
+			nid, pmdnum, PAGE_SIZE<<alloc_order);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#179: FILE: arch/i386/mm/text_repl.c:83:
+			nid, pmdnum, PAGE_SIZE<<alloc_order);
 			                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#186: FILE: arch/i386/mm/text_repl.c:90:
+void update_kernel_text(struct mm_struct * oldmm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#191: FILE: arch/i386/mm/text_repl.c:95:
+	struct mm_struct * newmm = current->active_mm;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: arch/i386/mm/text_repl.c:98:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: arch/i386/mm/text_repl.c:100:
+^I * tasks forked before this happens).  $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newmm->kernel_text_node == nid'
#204: FILE: arch/i386/mm/text_repl.c:108:
+	if (!text_replicated || !newmm || (newmm->kernel_text_node == nid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldmm->kernel_text_node == nid'
#212: FILE: arch/i386/mm/text_repl.c:116:
+	if (oldmm && (oldmm->kernel_text_node == nid))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: arch/i386/mm/text_repl.c:127:
+		set_pmd(pmd, *text_pmd(nid,pmdnum));
 		                          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: include/asm-i386/mmu_context.h:26:
+#define finish_arch_switch(rq,prev)^Ido { ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#252: FILE: include/asm-i386/mmu_context.h:26:
+#define finish_arch_switch(rq,prev)	do { 	\
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'prev' may be better as '(prev)' to avoid precedence issues
#252: FILE: include/asm-i386/mmu_context.h:26:
+#define finish_arch_switch(rq,prev)	do { 	\
+	update_kernel_text(prev->active_mm);	\
+	spin_unlock_irq(&(rq)->lock);		\
+} while (0)

ERROR:SPACING: space required before the open parenthesis '('
#257: FILE: include/asm-i386/mmu_context.h:31:
+#define prepare_arch_switch(rq, next)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: include/linux/highmem.h:97:
+	while(len--)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: include/linux/sched.h:222:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: include/linux/sched.h:223:
+^I * which copy of kernel text is in the pagetables? $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: include/linux/sched.h:225:
+^I * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: include/linux/sched.h:891:
+extern void update_kernel_text(struct mm_struct * newmm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/sched.h:891:
+extern void update_kernel_text(struct mm_struct * newmm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: include/linux/sched.h:893:
+#define update_kernel_text(...) do {} while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000361895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 8 warnings, 13 checks, 232 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000361895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
