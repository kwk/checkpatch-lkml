WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#90: FILE: fs/Kconfig:591:
+config POSIX_MQUEUE
+    bool "POSIX Message Queues"
+    ---help---
+	  POSIX variant of message queues is a part of IPC. In POSIX message
+	  queues every message has a priority which decides about succession
+	  of receiving it by a process. If you want to compile and run
+	  programs written e.g. for Solaris with use of its POSIX message
+	  queues (functions mq_*) say Y here. To use this feature you will
+	  also need mqueue library, available from
+	  <http://www.mat.uni.torun.pl/~wrona/posix_ipc/>
+
+	  POSIX message queues are visible as a filesystem called 'mqueue'
+	  and should be mounted in /dev/mqueue in order to work with standard
+	  library.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: include/linux/mqueue.h:1:
+#ifndef _LINUX_MQUEUE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: include/linux/mqueue.h:8:
+#define MQ_MAXMSG ^I40^I/* max number of messages in each queue */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: include/linux/mqueue.h:9:
+#define MQ_MSGSIZE ^I16384^I/* max message size */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: include/linux/mqueue.h:11:
+#define MQ_PRIO_MAX ^I32768^I/* max priority */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#126: FILE: include/linux/mqueue.h:13:
+typedef int mqd_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: include/linux/mqueue.h:15:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#137: FILE: include/linux/mqueue.h:24:
+/*
+*	struct for passing data via ioctls calls

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#148: FILE: include/linux/mqueue.h:35:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: include/linux/mqueue.h:42:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: ipc/mqueue.c:1:
+#include <linux/mqueue.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#182: FILE: ipc/mqueue.c:12:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#184: FILE: ipc/mqueue.c:14:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: ipc/mqueue.c:17:
+#define FILENT_SIZE	(sizeof(long)+sizeof(int)*2+sizeof(pid_t))
                    	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#187: FILE: ipc/mqueue.c:17:
+#define FILENT_SIZE	(sizeof(long)+sizeof(int)*2+sizeof(pid_t))
                    	                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: ipc/mqueue.c:17:
+#define FILENT_SIZE	(sizeof(long)+sizeof(int)*2+sizeof(pid_t))
                    	                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: ipc/mqueue.c:19:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: ipc/mqueue.c:31:
+
+

WARNING:TYPO_SPELLING: 'becouse' may be misspelled - perhaps 'because'?
#210: FILE: ipc/mqueue.c:40:
+	/* this is left mainly becouse of poll */
 	                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#223: FILE: ipc/mqueue.c:53:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#224: FILE: ipc/mqueue.c:54:
+static long ^Imsgs_size;^I^I/* sum of sizes of all msgs in all queues */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: ipc/mqueue.c:56:
+static struct ^Isemaphore mq_sem;^I/* main queues semaphore */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: ipc/mqueue.c:66:
+static struct vfsmount ^I^I*mounted_mq;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#238: FILE: ipc/mqueue.c:68:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,
                                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: ipc/mqueue.c:68:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: ipc/mqueue.c:68:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: ipc/mqueue.c:68:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: ipc/mqueue.c:69:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,
+	unsigned int cmd, unsigned long arg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#240: FILE: ipc/mqueue.c:70:
+static unsigned int mqueue_poll_file (struct file *, struct poll_table_struct *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: ipc/mqueue.c:71:
+static struct super_block *mqueue_get_sb (struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: ipc/mqueue.c:72:
+static struct super_block *mqueue_get_sb (struct file_system_type *fs_type,
+	int flags, char *dev_name, void *data);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: ipc/mqueue.c:73:
+static int mqueue_create (struct inode *dir, struct dentry *dent, int mode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: ipc/mqueue.c:76:
+static int mqueue_release_file(struct inode *ino, struct file * f);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#247: FILE: ipc/mqueue.c:77:
+static void mqueue_delete_inode (struct inode *ino);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#248: FILE: ipc/mqueue.c:78:
+static int mqueue_unlink (struct inode *dir, struct dentry *dent);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#249: FILE: ipc/mqueue.c:79:
+static ssize_t mqueue_read_file (struct file *, char *, size_t, loff_t *);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#253: FILE: ipc/mqueue.c:83:
+static struct inode_operations mqueue_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#259: FILE: ipc/mqueue.c:89:
+static struct inode_operations mqueue_file_inode_operations = {};

WARNING:CONST_STRUCT: struct file_operations should normally be const
#261: FILE: ipc/mqueue.c:91:
+static struct file_operations mqueue_file_operations = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: ipc/mqueue.c:99:
+^I.alloc_inode^I= ^Imqueue_alloc_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: ipc/mqueue.c:100:
+^I.destroy_inode^I= ^Imqueue_destroy_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: ipc/mqueue.c:101:
+^I.statfs^I^I= ^Isimple_statfs,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: ipc/mqueue.c:102:
+^I.delete_inode^I= ^Imqueue_delete_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: ipc/mqueue.c:103:
+^I.drop_inode^I= ^Igeneric_delete_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: ipc/mqueue.c:107:
+^I.owner^I^I= ^ITHIS_MODULE,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: ipc/mqueue.c:108:
+^I.name^I^I= ^I"mqueue",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#279: FILE: ipc/mqueue.c:109:
+^I.get_sb^I^I= ^Imqueue_get_sb,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: ipc/mqueue.c:110:
+^I.kill_sb^I= ^Ikill_litter_super,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: ipc/mqueue.c:113:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#285: FILE: ipc/mqueue.c:115:
+/*
+*		GENERAL FUNCTIONS FOR FS CREATION

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: ipc/mqueue.c:119:
+* ^Iauxiliary function - produce a new inode$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#289: FILE: ipc/mqueue.c:119:
+/*
+* 	auxiliary function - produce a new inode

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: ipc/mqueue.c:134:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space prohibited after that open parenthesis '('
#305: FILE: ipc/mqueue.c:135:
+		if ( (mode & S_IFMT) == S_IFREG) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->mq_sem
#311: FILE: ipc/mqueue.c:141:
+			init_MUTEX(&(ino_extra->mq_sem));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[0]
#312: FILE: ipc/mqueue.c:142:
+			init_waitqueue_head((&(ino_extra->wait_q[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[1]
#313: FILE: ipc/mqueue.c:143:
+			init_waitqueue_head((&(ino_extra->wait_q[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[0]
#314: FILE: ipc/mqueue.c:144:
+			init_waitqueue_head((&(ino_extra->wait_q2[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[1]
#315: FILE: ipc/mqueue.c:145:
+			init_waitqueue_head((&(ino_extra->wait_q2[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[0].list
#316: FILE: ipc/mqueue.c:146:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[0].list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[1].list
#317: FILE: ipc/mqueue.c:147:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[1].list));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: ipc/mqueue.c:154:
+			 * (mq_open will set it up via next ioctl call) */

ERROR:SPACING: space required after that close brace '}'
#327: FILE: ipc/mqueue.c:157:
+		}else if((mode & S_IFMT) == S_IFDIR) {

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: ipc/mqueue.c:157:
+		}else if((mode & S_IFMT) == S_IFDIR) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#338: FILE: ipc/mqueue.c:168:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: ipc/mqueue.c:169:
+static int mqueue_parse_options(char *options,int *mode,uid_t *uid,gid_t *gid, int silent)
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: ipc/mqueue.c:169:
+static int mqueue_parse_options(char *options,int *mode,uid_t *uid,gid_t *gid, int silent)
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: ipc/mqueue.c:169:
+static int mqueue_parse_options(char *options,int *mode,uid_t *uid,gid_t *gid, int silent)
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: ipc/mqueue.c:176:
+		if ((value = strchr(this_char,'=')) != NULL) {
 		                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#346: FILE: ipc/mqueue.c:176:
+		if ((value = strchr(this_char,'=')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open parenthesis '('
#349: FILE: ipc/mqueue.c:179:
+			if(!silent)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#350: FILE: ipc/mqueue.c:180:
+				printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: ipc/mqueue.c:181:
+^I^I^I    ^I^I"mqueuefs: No value for mount option '%s'\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#351: FILE: ipc/mqueue.c:181:
+^I^I^I    ^I^I"mqueuefs: No value for mount option '%s'\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: ipc/mqueue.c:182:
+^I^I^I    ^I^Ithis_char);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#352: FILE: ipc/mqueue.c:182:
+^I^I^I    ^I^Ithis_char);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: ipc/mqueue.c:186:
+		if (!strcmp(this_char,"mode")) {
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#359: FILE: ipc/mqueue.c:189:
+			*mode = simple_strtoul(value,&rest,8);
 			                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#359: FILE: ipc/mqueue.c:189:
+			*mode = simple_strtoul(value,&rest,8);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: ipc/mqueue.c:189:
+			*mode = simple_strtoul(value,&rest,8);
 			                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#359: FILE: ipc/mqueue.c:189:
+			*mode = simple_strtoul(value,&rest,8);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: ipc/mqueue.c:192:
+		} else if (!strcmp(this_char,"uid")) {
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#365: FILE: ipc/mqueue.c:195:
+			*uid = simple_strtoul(value,&rest,0);
 			                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#365: FILE: ipc/mqueue.c:195:
+			*uid = simple_strtoul(value,&rest,0);
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#365: FILE: ipc/mqueue.c:195:
+			*uid = simple_strtoul(value,&rest,0);
 			                                 ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#365: FILE: ipc/mqueue.c:195:
+			*uid = simple_strtoul(value,&rest,0);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#368: FILE: ipc/mqueue.c:198:
+		} else if (!strcmp(this_char,"gid")) {
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#371: FILE: ipc/mqueue.c:201:
+			*gid = simple_strtoul(value,&rest,0);
 			                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#371: FILE: ipc/mqueue.c:201:
+			*gid = simple_strtoul(value,&rest,0);
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#371: FILE: ipc/mqueue.c:201:
+			*gid = simple_strtoul(value,&rest,0);
 			                                 ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#371: FILE: ipc/mqueue.c:201:
+			*gid = simple_strtoul(value,&rest,0);

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: ipc/mqueue.c:205:
+			if(!silent)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#376: FILE: ipc/mqueue.c:206:
+				printk(KERN_ERR "mqueuefs: Bad mount option %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: ipc/mqueue.c:207:
+^I^I^I       ^I^Ithis_char);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: ipc/mqueue.c:207:
+^I^I^I       ^I^Ithis_char);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: ipc/mqueue.c:207:
+				printk(KERN_ERR "mqueuefs: Bad mount option %s\n",
+			       		this_char);

ERROR:SPACING: space required before the open parenthesis '('
#384: FILE: ipc/mqueue.c:214:
+	if(!silent)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#385: FILE: ipc/mqueue.c:215:
+		printk(KERN_ERR "mqueuefs: Bad value '%s' for mount option '%s'\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: ipc/mqueue.c:216:
+^I       ^I^Ivalue, this_char);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#386: FILE: ipc/mqueue.c:216:
+^I       ^I^Ivalue, this_char);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: ipc/mqueue.c:216:
+		printk(KERN_ERR "mqueuefs: Bad value '%s' for mount option '%s'\n",
+	       		value, this_char);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#389: FILE: ipc/mqueue.c:219:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#391: FILE: ipc/mqueue.c:221:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: ipc/mqueue.c:223:
+static int mqueue_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: ipc/mqueue.c:223:
+static int mqueue_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: ipc/mqueue.c:225:
+	struct inode * inode;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#398: FILE: ipc/mqueue.c:228:
+	int mode   = S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#400: FILE: ipc/mqueue.c:230:
+	if (mqueue_parse_options (data, &mode, &uid, &gid, silent))

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#417: FILE: ipc/mqueue.c:247:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: ipc/mqueue.c:255:
+static struct super_block *mqueue_get_sb(struct file_system_type *fs_type,
+	int flags, char *dev_name, void *data)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: ipc/mqueue.c:257:
+	return get_sb_nodev(fs_type,flags,data,mqueue_fill_super);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: ipc/mqueue.c:257:
+	return get_sb_nodev(fs_type,flags,data,mqueue_fill_super);
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#427: FILE: ipc/mqueue.c:257:
+	return get_sb_nodev(fs_type,flags,data,mqueue_fill_super);
 	                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#430: FILE: ipc/mqueue.c:260:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: ipc/mqueue.c:264:
+	struct mqueue_inode_info *ei;
+	ei = (struct mqueue_inode_info *)kmem_cache_alloc(mqueue_inode_cachep, SLAB_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#447: FILE: ipc/mqueue.c:277:
+	struct mqueue_inode_info *p = (struct mqueue_inode_info *) foo;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#449: FILE: ipc/mqueue.c:279:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#455: FILE: ipc/mqueue.c:285:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: ipc/mqueue.c:289:
+	mqueue_inode_cachep = kmem_cache_create("mqueue_inode_cache",
+					     sizeof(struct mqueue_inode_info),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mqueue_inode_cachep"
#462: FILE: ipc/mqueue.c:292:
+	if (mqueue_inode_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#470: FILE: ipc/mqueue.c:300:
+		printk(KERN_INFO "mqueue_inode_cache: not all structures were freed\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#473: FILE: ipc/mqueue.c:303:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#475: FILE: ipc/mqueue.c:305:
+/*
+*	init function

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: ipc/mqueue.c:310:
+	struct vfsmount * res;

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: ipc/mqueue.c:311:
+	struct vfsmount * res;
+	error = init_inode_cache();

ERROR:SPACING: space required before the open parenthesis '('
#482: FILE: ipc/mqueue.c:312:
+	if(error) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#483: FILE: ipc/mqueue.c:313:
+		printk (KERN_ERR "Could not init inode cache for mqueue filesystem\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#483: FILE: ipc/mqueue.c:313:
+		printk (KERN_ERR "Could not init inode cache for mqueue filesystem\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: ipc/mqueue.c:314:
+^I    ^Ireturn error;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#484: FILE: ipc/mqueue.c:314:
+^I    ^Ireturn error;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#489: FILE: ipc/mqueue.c:319:
+		printk (KERN_ERR "Could not register mqueue filesystem\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#489: FILE: ipc/mqueue.c:319:
+		printk (KERN_ERR "Could not register mqueue filesystem\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#494: FILE: ipc/mqueue.c:324:
+	if (IS_ERR (res)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#496: FILE: ipc/mqueue.c:326:
+		printk (KERN_ERR "Could not kern_mount mqueue filesystem\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#496: FILE: ipc/mqueue.c:326:
+		printk (KERN_ERR "Could not kern_mount mqueue filesystem\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#526: FILE: ipc/mqueue.c:356:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#527: FILE: ipc/mqueue.c:357:
+static void mqueue_delete_inode (struct inode *ino)

ERROR:SPACING: space prohibited after that open parenthesis '('
#532: FILE: ipc/mqueue.c:362:
+	if ( (ino->i_mode & S_IFMT) == S_IFDIR) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#554: FILE: ipc/mqueue.c:384:
+static int mqueue_unlink (struct inode *dir, struct dentry *dent)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#564: FILE: ipc/mqueue.c:394:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#567: FILE: ipc/mqueue.c:397:
+	struct inode * ino;

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#571: FILE: ipc/mqueue.c:401:
+	if(queues_count>=MQ_MAX) {
 	               ^

ERROR:SPACING: space required before the open parenthesis '('
#571: FILE: ipc/mqueue.c:401:
+	if(queues_count>=MQ_MAX) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#575: FILE: ipc/mqueue.c:405:
+	ino = mqueue_get_inode(dir->i_sb,mode);
 	                                ^

ERROR:SPACING: space required before the open parenthesis '('
#576: FILE: ipc/mqueue.c:406:
+	if(!ino) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#585: FILE: ipc/mqueue.c:415:
+	dir->i_ctime = dir->i_mtime = CURRENT_TIME;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#587: FILE: ipc/mqueue.c:417:
+	d_instantiate(dent,ino);
 	                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#596: FILE: ipc/mqueue.c:426:
+/*
+*	This is routine for system read from queue file.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#599: FILE: ipc/mqueue.c:429:
+* ^Inotification info (the only values that are interesting from user$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#604: FILE: ipc/mqueue.c:434:
+	char * buffer;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#606: FILE: ipc/mqueue.c:436:
+	int retval=0;
 	          ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#608: FILE: ipc/mqueue.c:438:
+	if (*off>=FILENT_SIZE)
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#610: FILE: ipc/mqueue.c:440:
+	buffer = kmalloc(FILENT_SIZE,GFP_KERNEL);
 	                            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#611: FILE: ipc/mqueue.c:441:
+	if (buffer==NULL)
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#611: FILE: ipc/mqueue.c:441:
+	if (buffer==NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#615: FILE: ipc/mqueue.c:445:
+	*((pid_t *)(buffer+sizeof(long))) = info->notify_pid;
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#616: FILE: ipc/mqueue.c:446:
+	*((int *)(buffer+sizeof(long)+sizeof(pid_t))) =
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#616: FILE: ipc/mqueue.c:446:
+	*((int *)(buffer+sizeof(long)+sizeof(pid_t))) =
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#618: FILE: ipc/mqueue.c:448:
+	*((int *)(buffer+sizeof(long)+sizeof(pid_t)+sizeof(int))) =
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#618: FILE: ipc/mqueue.c:448:
+	*((int *)(buffer+sizeof(long)+sizeof(pid_t)+sizeof(int))) =
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#618: FILE: ipc/mqueue.c:448:
+	*((int *)(buffer+sizeof(long)+sizeof(pid_t)+sizeof(int))) =
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#621: FILE: ipc/mqueue.c:451:
+	if (copy_to_user(data,buffer+*off,retval))
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxO)
#621: FILE: ipc/mqueue.c:451:
+	if (copy_to_user(data,buffer+*off,retval))
 	                            ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#621: FILE: ipc/mqueue.c:451:
+	if (copy_to_user(data,buffer+*off,retval))
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#621: FILE: ipc/mqueue.c:451:
+	if (copy_to_user(data,buffer+*off,retval))
 	                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#627: FILE: ipc/mqueue.c:457:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#628: FILE: ipc/mqueue.c:458:
+static int mqueue_release_file(struct inode *ino, struct file * f)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#642: FILE: ipc/mqueue.c:472:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: ipc/mqueue.c:474:
+static unsigned int mqueue_poll_file(struct file *file,
+				struct poll_table_struct *poll_tab)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#663: FILE: ipc/mqueue.c:493:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#665: FILE: ipc/mqueue.c:495:
+/*
+*			CORE MQUEUE FUNCTIONS

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#669: FILE: ipc/mqueue.c:499:
+/*
+*  This cut&paste version of wait_event() without event checking & with

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#672: FILE: ipc/mqueue.c:502:
+void inline wait_exclusive(wait_queue_head_t *wq, struct mqueue_inode_info *i)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINE_SPACING: Missing a blank line after declarations
#675: FILE: ipc/mqueue.c:505:
+	wait_queue_t wait;
+	init_waitqueue_entry(&wait, current);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#693: FILE: ipc/mqueue.c:523:
+	if (!list_empty(&(info->e_wait_q[sr].list)))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#694: FILE: ipc/mqueue.c:524:
+		list_for_each_entry(ptr,&(info->e_wait_q[sr].list),list)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#694: FILE: ipc/mqueue.c:524:
+		list_for_each_entry(ptr,&(info->e_wait_q[sr].list),list)
 		                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#694: FILE: ipc/mqueue.c:524:
+		list_for_each_entry(ptr,&(info->e_wait_q[sr].list),list)
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#694: FILE: ipc/mqueue.c:524:
+		list_for_each_entry(ptr,&(info->e_wait_q[sr].list),list)
 		                                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#694: FILE: ipc/mqueue.c:524:
+		list_for_each_entry(ptr,&(info->e_wait_q[sr].list),list)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ptr->list
#697: FILE: ipc/mqueue.c:527:
+				list_del(&(ptr->list));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tmp)...) over kmalloc(sizeof(struct ext_wait_queue)...)
#709: FILE: ipc/mqueue.c:539:
+	tmp = kmalloc(sizeof(struct ext_wait_queue), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#710: FILE: ipc/mqueue.c:540:
+	if (tmp == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#714: FILE: ipc/mqueue.c:544:
+	if (list_empty(&info->e_wait_q[sr].list))
[...]
+	else {
[...]

ERROR:SPACING: space required after that ',' (ctx:VxO)
#715: FILE: ipc/mqueue.c:545:
+		list_add(&tmp->list,&info->e_wait_q[sr].list);
 		                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#715: FILE: ipc/mqueue.c:545:
+		list_add(&tmp->list,&info->e_wait_q[sr].list);
 		                    ^

CHECK:BRACES: Unbalanced braces around else statement
#716: FILE: ipc/mqueue.c:546:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#717: FILE: ipc/mqueue.c:547:
+		list_for_each_entry(ptr,&info->e_wait_q[sr].list, list)
 		                       ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#717: FILE: ipc/mqueue.c:547:
+		list_for_each_entry(ptr,&info->e_wait_q[sr].list, list)
 		                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#720: FILE: ipc/mqueue.c:550:
+				__list_add(&tmp->list,ptr->list.prev,&ptr->list);
 				                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#720: FILE: ipc/mqueue.c:550:
+				__list_add(&tmp->list,ptr->list.prev,&ptr->list);
 				                                    ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#720: FILE: ipc/mqueue.c:550:
+				__list_add(&tmp->list,ptr->list.prev,&ptr->list);
 				                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#724: FILE: ipc/mqueue.c:554:
+		list_add_tail(&tmp->list,&info->e_wait_q[sr].list);
 		                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#724: FILE: ipc/mqueue.c:554:
+		list_add_tail(&tmp->list,&info->e_wait_q[sr].list);
 		                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#731: FILE: ipc/mqueue.c:561:
+ * before-first (last) (meaning first in order as our 'queue' is inversed) */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#734: FILE: ipc/mqueue.c:564:
+	struct ext_wait_queue *tmp = list_entry (info->e_wait_q[sr].list.prev,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tmp->list
#736: FILE: ipc/mqueue.c:566:
+	list_del(&(tmp->list));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#742: FILE: ipc/mqueue.c:572:
+ * Returns: 0=ok -1=signal -2=memory allocation error -3=timeout passed*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: ipc/mqueue.c:577:
+	long retval;
+	if(wq_add(info,sr)<0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: ipc/mqueue.c:577:
+	if(wq_add(info,sr)<0)
 	              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#747: FILE: ipc/mqueue.c:577:
+	if(wq_add(info,sr)<0)
 	                  ^

ERROR:SPACING: space required before the open parenthesis '('
#747: FILE: ipc/mqueue.c:577:
+	if(wq_add(info,sr)<0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#751: FILE: ipc/mqueue.c:581:
+	add_wait_queue(&(info->wait_q[sr]), &__wait);

ERROR:CODE_INDENT: code indent should use tabs where possible
#756: FILE: ipc/mqueue.c:586:
+^I^I  ^I(list_entry(info->e_wait_q[sr].list.prev,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#756: FILE: ipc/mqueue.c:586:
+^I^I  ^I(list_entry(info->e_wait_q[sr].list.prev,$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#758: FILE: ipc/mqueue.c:588:
+			 struct ext_wait_queue, list))->task->pid)
+		    && ((info->attr.mq_curmsgs > 0 && sr == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#759: FILE: ipc/mqueue.c:589:
+		    && ((info->attr.mq_curmsgs > 0 && sr == 1)
+			|| (info->attr.mq_curmsgs <

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!retval'
#766: FILE: ipc/mqueue.c:596:
+			if ((!retval) && (!signal_pending(current))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#767: FILE: ipc/mqueue.c:597:
+				remove_wait_queue(&(info->wait_q[sr]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: ipc/mqueue.c:598:
+				remove_wait_queue(&(info->wait_q[sr]),
+					  &__wait);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#775: FILE: ipc/mqueue.c:605:
+			remove_wait_queue(&(info->wait_q[sr]),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#782: FILE: ipc/mqueue.c:612:
+	remove_wait_queue(&(info->wait_q[sr]), &__wait);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#783: FILE: ipc/mqueue.c:613:
+	wq_remove_last(info,sr);
 	                   ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#800: FILE: ipc/mqueue.c:630:
+		     info->attr.mq_maxmsg - 1)
+		    && (!list_empty(&info->e_wait_q[sr].list))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#801: FILE: ipc/mqueue.c:631:
+			wait_exclusive(&(info->wait_q2[sr]),info);
 			                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#801: FILE: ipc/mqueue.c:631:
+			wait_exclusive(&(info->wait_q2[sr]),info);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->attr.mq_curmsgs > 1'
#805: FILE: ipc/mqueue.c:635:
+		if ((info->attr.mq_curmsgs > 1)
+		    && (!list_empty(&info->e_wait_q[sr].list))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#806: FILE: ipc/mqueue.c:636:
+		if ((info->attr.mq_curmsgs > 1)
+		    && (!list_empty(&info->e_wait_q[sr].list))) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: ipc/mqueue.c:637:
+			wait_exclusive(&(info->wait_q2[sr]),info);
 			                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#807: FILE: ipc/mqueue.c:637:
+			wait_exclusive(&(info->wait_q2[sr]),info);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#811: FILE: ipc/mqueue.c:641:
+	 * queue is empty. */

ERROR:SPACING: space required before the open parenthesis '('
#812: FILE: ipc/mqueue.c:642:
+	if(!list_empty(&info->e_wait_q[sr].list))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#814: FILE: ipc/mqueue.c:644:
+		wake_up_process((list_entry(info->e_wait_q[sr].list.prev,
+			struct ext_wait_queue, list))->task);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#826: FILE: ipc/mqueue.c:656:
+	if (u_attr != NULL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#829: FILE: ipc/mqueue.c:659:
+		if (attr.mq_maxmsg <= 0
[...]
+		return -EINVAL;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#830: FILE: ipc/mqueue.c:660:
+		if (attr.mq_maxmsg <= 0
+		    || attr.mq_msgsize <= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#831: FILE: ipc/mqueue.c:661:
+		    || attr.mq_msgsize <= 0
+		    || attr.mq_maxmsg > MQ_MAXMSG

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#832: FILE: ipc/mqueue.c:662:
+		    || attr.mq_maxmsg > MQ_MAXMSG
+		    || attr.mq_msgsize > MQ_MSGSIZE)

ERROR:SPACING: space required before the open brace '{'
#837: FILE: ipc/mqueue.c:667:
+	}else{

ERROR:SPACING: space required after that close brace '}'
#837: FILE: ipc/mqueue.c:667:
+	}else{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#846: FILE: ipc/mqueue.c:676:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#847: FILE: ipc/mqueue.c:677:
+int mq_send_ioctl(struct inode * ino, int oflag, const char *msg_ptr, int msg_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: ipc/mqueue.c:678:
+int mq_send_ioctl(struct inode * ino, int oflag, const char *msg_ptr, int msg_len,
+			   unsigned int msg_prio, struct timespec *ts_ptr)

ERROR:CODE_INDENT: code indent should use tabs where possible
#863: FILE: ipc/mqueue.c:693:
+^I^I    ^Ierror = -EAGAIN;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#863: FILE: ipc/mqueue.c:693:
+^I^I    ^Ierror = -EAGAIN;$

CHECK:SPACING: No space is necessary after a cast
#867: FILE: ipc/mqueue.c:697:
+	if ((unsigned int) msg_prio >= (unsigned int) MQ_PRIO_MAX) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#878: FILE: ipc/mqueue.c:708:
+	if(ts_ptr)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#878: FILE: ipc/mqueue.c:708:
+	if(ts_ptr)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#880: FILE: ipc/mqueue.c:710:
+		if (copy_from_user(&ts,ts_ptr,sizeof(struct timespec)))
+		{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#880: FILE: ipc/mqueue.c:710:
+		if (copy_from_user(&ts,ts_ptr,sizeof(struct timespec)))
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#880: FILE: ipc/mqueue.c:710:
+		if (copy_from_user(&ts,ts_ptr,sizeof(struct timespec)))
 		                             ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#885: FILE: ipc/mqueue.c:715:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
+		{

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#885: FILE: ipc/mqueue.c:715:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
 		              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#885: FILE: ipc/mqueue.c:715:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
 		                             ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#885: FILE: ipc/mqueue.c:715:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
 		                                             ^

WARNING:TYPO_SPELLING: 'schould' may be misspelled - perhaps 'should'?
#890: FILE: ipc/mqueue.c:720:
+		/* it schould be enough */
 		      ^^^^^^^

ERROR:SPACING: space required after that close brace '}'
#892: FILE: ipc/mqueue.c:722:
+	}else

CHECK:BRACES: Unbalanced braces around else statement
#892: FILE: ipc/mqueue.c:722:
+	}else

WARNING:TYPO_SPELLING: 'mesages' may be misspelled - perhaps 'messages'?
#913: FILE: ipc/mqueue.c:743:
+	/* check if this message will exceed overall limit for mesages */
 	                                                       ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#920: FILE: ipc/mqueue.c:750:
+	 * existing queues */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tmp_ptr1)...) over kmalloc(sizeof(struct msg)...)
#921: FILE: ipc/mqueue.c:751:
+	tmp_ptr1 = kmalloc(sizeof(struct msg), GFP_KERNEL);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#944: FILE: ipc/mqueue.c:774:
+	if (copy_from_user(info->messages[i]->mtext, msg_ptr, msg_len))
+	{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#947: FILE: ipc/mqueue.c:777:
+		printk(KERN_ERR " coping data from user failed\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#959: FILE: ipc/mqueue.c:789:
+	 * empty to not empty*/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#961: FILE: ipc/mqueue.c:791:
+	if (info->notify_pid != 0
+	    && list_empty(&info->e_wait_q[1].list)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#962: FILE: ipc/mqueue.c:792:
+	    && list_empty(&info->e_wait_q[1].list)
+	    && info->attr.mq_curmsgs == 1) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[0]
#982: FILE: ipc/mqueue.c:812:
+	wake_up(&(info->wait_q2[0]));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#998: FILE: ipc/mqueue.c:828:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: ipc/mqueue.c:830:
+size_t mq_receive_ioctl(struct inode *ino, long oflag, char *msg_ptr, int msg_len,
+			 unsigned int *msg_prio, struct timespec *ts_ptr)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1016: FILE: ipc/mqueue.c:846:
+	if(ts_ptr)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#1016: FILE: ipc/mqueue.c:846:
+	if(ts_ptr)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1018: FILE: ipc/mqueue.c:848:
+		if (copy_from_user(&ts,ts_ptr,sizeof(struct timespec)))
+		{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1018: FILE: ipc/mqueue.c:848:
+		if (copy_from_user(&ts,ts_ptr,sizeof(struct timespec)))
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1018: FILE: ipc/mqueue.c:848:
+		if (copy_from_user(&ts,ts_ptr,sizeof(struct timespec)))
 		                             ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1023: FILE: ipc/mqueue.c:853:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
+		{

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1023: FILE: ipc/mqueue.c:853:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
 		              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1023: FILE: ipc/mqueue.c:853:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
 		                             ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1023: FILE: ipc/mqueue.c:853:
+		if (ts.tv_nsec<0 || ts.tv_sec<0 || ts.tv_nsec>=1000000000L)
 		                                             ^

WARNING:TYPO_SPELLING: 'schould' may be misspelled - perhaps 'should'?
#1028: FILE: ipc/mqueue.c:858:
+		/* it schould be enough */
 		      ^^^^^^^

ERROR:SPACING: space required after that close brace '}'
#1030: FILE: ipc/mqueue.c:860:
+	}else

CHECK:BRACES: Unbalanced braces around else statement
#1030: FILE: ipc/mqueue.c:860:
+	}else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1033: FILE: ipc/mqueue.c:863:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1036: FILE: ipc/mqueue.c:866:
+	 * we must wait */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msg_prio"
#1058: FILE: ipc/mqueue.c:888:
+	if (msg_prio != NULL)

ERROR:SPACING: space required before the open brace '{'
#1059: FILE: ipc/mqueue.c:889:
+		if (put_user(info->messages[0]->msg_prio, msg_prio)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1062: FILE: ipc/mqueue.c:892:
+^I    ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1062: FILE: ipc/mqueue.c:892:
+^I    ^I}$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1063: FILE: ipc/mqueue.c:893:
+	if (copy_to_user(msg_ptr, info->messages[0]->mtext,
+		     info->messages[0]->msg_len))
+	{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1064: FILE: ipc/mqueue.c:894:
+	if (copy_to_user(msg_ptr, info->messages[0]->mtext,
+		     info->messages[0]->msg_len))

CHECK:SPACING: No space is necessary after a cast
#1074: FILE: ipc/mqueue.c:904:
+		    (void *) (info->messages[i]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[1]
#1084: FILE: ipc/mqueue.c:914:
+	wake_up(&(info->wait_q2[1]));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1092: FILE: ipc/mqueue.c:922:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1096: FILE: ipc/mqueue.c:926:
+	struct mqueue_inode_info *info=MQUEUE_I(ino);
 	                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#1099: FILE: ipc/mqueue.c:929:
+	if (u_notification != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: ipc/mqueue.c:931:
+		if (copy_from_user(&notification, u_notification,
+			       sizeof(struct sigevent)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1107: FILE: ipc/mqueue.c:937:
+	if (info->notify_pid == current->pid
+	    && (u_notification == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_notification"
#1107: FILE: ipc/mqueue.c:937:
+	    && (u_notification == NULL ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#1108: FILE: ipc/mqueue.c:938:
+^I    ^Inotification.sigev_notify == SIGEV_NONE)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1108: FILE: ipc/mqueue.c:938:
+^I    ^Inotification.sigev_notify == SIGEV_NONE)) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#1115: FILE: ipc/mqueue.c:945:
+	} else if (u_notification != NULL &&

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1138: FILE: ipc/mqueue.c:968:
+	if (u_mqstat == NULL)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1138: FILE: ipc/mqueue.c:968:
+	if (u_mqstat == NULL)
+	{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_mqstat"
#1138: FILE: ipc/mqueue.c:968:
+	if (u_mqstat == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#1141: FILE: ipc/mqueue.c:971:
+	    goto out;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_mqstat"
#1144: FILE: ipc/mqueue.c:974:
+	if (u_mqstat != NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1153: FILE: ipc/mqueue.c:983:
+/*
+*	IOCTL FUNCTION - demultiplexer for various mqueues operations

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1156: FILE: ipc/mqueue.c:986:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,
                                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1156: FILE: ipc/mqueue.c:986:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1156: FILE: ipc/mqueue.c:986:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1156: FILE: ipc/mqueue.c:986:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1157: FILE: ipc/mqueue.c:987:
+static int mqueue_ioctl_file (struct inode * inode, struct file * filp,
+			unsigned int cmd, unsigned long arg)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1159: FILE: ipc/mqueue.c:989:
+^Iint ^I^I^Iret=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1159: FILE: ipc/mqueue.c:989:
+	int 			ret=1;
 	    			   ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1164: FILE: ipc/mqueue.c:994:
+	switch(cmd)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#1164: FILE: ipc/mqueue.c:994:
+	switch(cmd)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1167: FILE: ipc/mqueue.c:997:
+		ret = mq_create_ioctl(inode,(struct mq_attr *)arg);
 		                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1170: FILE: ipc/mqueue.c:1000:
+		if ((filp->f_flags & O_ACCMODE) == O_RDONLY)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1175: FILE: ipc/mqueue.c:1005:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))
+		{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1175: FILE: ipc/mqueue.c:1005:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1175: FILE: ipc/mqueue.c:1005:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))
 		                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1175: FILE: ipc/mqueue.c:1005:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1177: FILE: ipc/mqueue.c:1007:
+			printk(KERN_ERR " mqueue fs: can't copy data from user space");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1180: FILE: ipc/mqueue.c:1010:
+		ret = mq_send_ioctl(inode,filp->f_flags,sndrcv_arg.msg_ptr,
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1180: FILE: ipc/mqueue.c:1010:
+		ret = mq_send_ioctl(inode,filp->f_flags,sndrcv_arg.msg_ptr,
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: ipc/mqueue.c:1011:
+		ret = mq_send_ioctl(inode,filp->f_flags,sndrcv_arg.msg_ptr,
+				sndrcv_arg.msg_len,sndrcv_arg.msg_prio,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1181: FILE: ipc/mqueue.c:1011:
+				sndrcv_arg.msg_len,sndrcv_arg.msg_prio,
 				                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1185: FILE: ipc/mqueue.c:1015:
+		if ((filp->f_flags & O_ACCMODE) == O_WRONLY)
+		{

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1190: FILE: ipc/mqueue.c:1020:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))
+		{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1190: FILE: ipc/mqueue.c:1020:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1190: FILE: ipc/mqueue.c:1020:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))
 		                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#1190: FILE: ipc/mqueue.c:1020:
+		if(copy_from_user(&sndrcv_arg,(void *)arg,sizeof(sndrcv_arg)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1192: FILE: ipc/mqueue.c:1022:
+			printk(KERN_ERR " mqueue fs: can't copy data from user space");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1195: FILE: ipc/mqueue.c:1025:
+		ret = mq_receive_ioctl(inode,filp->f_flags,(char *)sndrcv_arg.msg_ptr,
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1195: FILE: ipc/mqueue.c:1025:
+		ret = mq_receive_ioctl(inode,filp->f_flags,(char *)sndrcv_arg.msg_ptr,
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1196: FILE: ipc/mqueue.c:1026:
+		ret = mq_receive_ioctl(inode,filp->f_flags,(char *)sndrcv_arg.msg_ptr,
+				sndrcv_arg.msg_len,(unsigned *)sndrcv_arg.msg_prio,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1196: FILE: ipc/mqueue.c:1026:
+				sndrcv_arg.msg_len,(unsigned *)sndrcv_arg.msg_prio,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1196: FILE: ipc/mqueue.c:1026:
+				sndrcv_arg.msg_len,(unsigned *)sndrcv_arg.msg_prio,
 				                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: ipc/mqueue.c:1034:
+		ret = mq_getattr_ioctl(inode, filp->f_flags,
+					(struct mq_attr *)arg);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 130 errors, 95 warnings, 103 checks, 1147 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409603.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
