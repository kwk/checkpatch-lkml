WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#45: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#91: FILE: include/linux/spinlock.h:91:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0, 10, __BASE_FILE__ , NULL, 0}
                                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#91: FILE: include/linux/spinlock.h:91:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0, 10, __BASE_FILE__ , NULL, 0}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#102: FILE: include/linux/spinlock.h:95:
+#define spin_lock_init(x) \
+	do { \
+		(x)->lock = 0; \
+		(x)->babble = 5; \
+		(x)->module = __BASE_FILE__; \
+		(x)->owner = NULL; \
+		(x)->oline = 0; \
+	} while (0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#111: FILE: include/linux/spinlock.h:104:
+ * FALSE. --> printk if already locked. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#112: FILE: include/linux/spinlock.h:105:
+#define spin_is_locked(x) \
+	({ \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n", \
+					__BASE_FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		0; \
+	})

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#112: FILE: include/linux/spinlock.h:105:
+#define spin_is_locked(x) \

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#114: FILE: include/linux/spinlock.h:107:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#115: FILE: include/linux/spinlock.h:108:
+			printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: include/linux/spinlock.h:109:
+					__BASE_FILE__,__LINE__, (x)->module, \
 					             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#124: FILE: include/linux/spinlock.h:117:
+ * TRUE. --> printk if already locked. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#125: FILE: include/linux/spinlock.h:118:
+#define spin_trylock(x) \
+	({ \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n", \
+					__BASE_FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		(x)->lock = 1; \
+		(x)->owner = __BASE_FILE__; \
+		(x)->oline = __LINE__; \
+		1; \
+	})

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#127: FILE: include/linux/spinlock.h:120:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#128: FILE: include/linux/spinlock.h:121:
+			printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: include/linux/spinlock.h:122:
+					__BASE_FILE__,__LINE__, (x)->module, \
 					             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#139: FILE: include/linux/spinlock.h:132:
+#define spin_lock(x)		\
+	do { \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n", \
+					__BASE_FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		(x)->lock = 1; \
+		(x)->owner = __BASE_FILE__; \
+		(x)->oline = __LINE__; \
+	} while (0)

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#141: FILE: include/linux/spinlock.h:134:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#142: FILE: include/linux/spinlock.h:135:
+			printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#143: FILE: include/linux/spinlock.h:136:
+					__BASE_FILE__,__LINE__, (x)->module, \
 					             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#152: FILE: include/linux/spinlock.h:145:
+#define spin_unlock_wait(x)	\
+	do { \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n", \
+					__BASE_FILE__,__LINE__, (x)->module, (x), \
+					(x)->owner, (x)->oline); \
+			(x)->babble--; \
+		}\
+	} while (0)

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#154: FILE: include/linux/spinlock.h:147:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: include/linux/spinlock.h:148:
+			printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#156: FILE: include/linux/spinlock.h:149:
+					__BASE_FILE__,__LINE__, (x)->module, (x), \
 					             ^

ERROR:SPACING: space required after that close brace '}'
#159: FILE: include/linux/spinlock.h:152:
+		}\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#161: FILE: include/linux/spinlock.h:154:
+#define spin_unlock(x) \
+	do { \
+		if (!(x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_unlock(%s:%p) not locked\n", \
+					__BASE_FILE__,__LINE__, (x)->module, (x));\
+			(x)->babble--; \
+		} \
+		(x)->lock = 0; \
+	} while (0)

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#163: FILE: include/linux/spinlock.h:156:
+		if (!(x)->lock&&(x)->babble) { \
 		              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#164: FILE: include/linux/spinlock.h:157:
+			printk("%s:%d: spin_unlock(%s:%p) not locked\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/linux/spinlock.h:158:
+					__BASE_FILE__,__LINE__, (x)->module, (x));\
 					             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000510203.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 9 warnings, 6 checks, 133 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000510203.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
