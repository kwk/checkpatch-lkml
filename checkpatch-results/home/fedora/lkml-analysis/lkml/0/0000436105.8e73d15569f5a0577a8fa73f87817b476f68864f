WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -u --recursive --new-file linux-2.5.32-cred2/arch/s390x/kernel/linux32.c linux-2.5.32-cred3/arch/s390x/kernel/linux32.c

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: fs/intermezzo/file.c:152:
+                fdata->fd_fsuid = cred->uid;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: fs/intermezzo/file.c:152:
+                fdata->fd_fsuid = cred->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: fs/intermezzo/file.c:153:
+                fdata->fd_fsgid = cred->gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: fs/intermezzo/file.c:153:
+                fdata->fd_fsgid = cred->gid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: fs/intermezzo/file.c:155:
+                fdata->fd_ngroups = cred->ngroups;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: fs/intermezzo/file.c:155:
+                fdata->fd_ngroups = cred->ngroups;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#128: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#128: FILE: fs/intermezzo/file.c:156:
+                for (i=0 ; i<cred->ngroups ; i++)
                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: fs/intermezzo/file.c:157:
+                        fdata->fd_groups[i] = cred->groups[i]; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: fs/intermezzo/file.c:157:
+                        fdata->fd_groups[i] = cred->groups[i]; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/intermezzo/file.c:157:
+                        fdata->fd_groups[i] = cred->groups[i]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: fs/intermezzo/journal.c:263:
+^Ifor (i=0; i<cred->ngroups; i++) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#151: FILE: fs/intermezzo/journal.c:263:
+	for (i=0; i<cred->ngroups; i++) 
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#151: FILE: fs/intermezzo/journal.c:263:
+	for (i=0; i<cred->ngroups; i++) 
 	           ^

CHECK:SPACING: No space is necessary after a cast
#152: FILE: fs/intermezzo/journal.c:264:
+		groups[i] = (__u32) cred->groups[i];

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: fs/intermezzo/journal.c:266:
+        i =  journal_log_prefix_with_groups_and_ids(buf, opcode, rec,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: fs/intermezzo/journal.c:266:
+        i =  journal_log_prefix_with_groups_and_ids(buf, opcode, rec,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: fs/intermezzo/journal.c:267:
+                                                      (__u32)cred->ngroups,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: fs/intermezzo/journal.c:267:
+        i =  journal_log_prefix_with_groups_and_ids(buf, opcode, rec,
+                                                      (__u32)cred->ngroups,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: fs/intermezzo/journal.c:267:
+                                                      (__u32)cred->ngroups,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/intermezzo/journal.c:269:
+                                                      (__u32)cred->uid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/intermezzo/journal.c:269:
+                                                      (__u32)cred->uid,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: fs/intermezzo/journal.c:270:
+                                                      (__u32)cred->gid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: fs/intermezzo/journal.c:270:
+                                                      (__u32)cred->gid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: fs/intermezzo/journal.c:1749:
+                open_ngroups = cred->ngroups;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: fs/intermezzo/journal.c:1749:
+                open_ngroups = cred->ngroups;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)
                       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#177: FILE: fs/intermezzo/journal.c:1750:
+                for (i=0; i<cred->ngroups; i++)
                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: fs/intermezzo/journal.c:1751:
+^I^I^Iopen_groups[i] =  (__u32) cred->groups[i]; $

CHECK:SPACING: No space is necessary after a cast
#178: FILE: fs/intermezzo/journal.c:1751:
+			open_groups[i] =  (__u32) cred->groups[i]; 

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/intermezzo/journal.c:1755:
+                open_fsuid = cred->uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/intermezzo/journal.c:1755:
+                open_fsuid = cred->uid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: fs/intermezzo/journal.c:1756:
+                open_fsgid = cred->gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: fs/intermezzo/journal.c:1756:
+                open_fsgid = cred->gid;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: include/linux/cred.h:1:
+#ifndef _LINUX_CRED_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#253: FILE: include/linux/cred.h:6:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: include/linux/cred.h:47:
+extern void credentials_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/cred.h:49:
+extern void put_ucred(struct ucred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucred *' should also have an identifier name
#296: FILE: include/linux/cred.h:49:
+extern void put_ucred(struct ucred *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: include/linux/cred.h:50:
+extern struct ucred *ucred_create(uid_t, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#297: FILE: include/linux/cred.h:50:
+extern struct ucred *ucred_create(uid_t, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#297: FILE: include/linux/cred.h:50:
+extern struct ucred *ucred_create(uid_t, gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/cred.h:51:
+extern struct ucred *ucred_clone(struct ucred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucred *' should also have an identifier name
#298: FILE: include/linux/cred.h:51:
+extern struct ucred *ucred_clone(struct ucred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: include/linux/cred.h:52:
+extern int ucred_getgroups(struct ucred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucred *' should also have an identifier name
#299: FILE: include/linux/cred.h:52:
+extern int ucred_getgroups(struct ucred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#299: FILE: include/linux/cred.h:52:
+extern int ucred_getgroups(struct ucred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#299: FILE: include/linux/cred.h:52:
+extern int ucred_getgroups(struct ucred *, int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: include/linux/cred.h:53:
+extern int ucred_setgroups(struct ucred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucred *' should also have an identifier name
#300: FILE: include/linux/cred.h:53:
+extern int ucred_setgroups(struct ucred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#300: FILE: include/linux/cred.h:53:
+extern int ucred_setgroups(struct ucred *, int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#300: FILE: include/linux/cred.h:53:
+extern int ucred_setgroups(struct ucred *, int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/cred.h:54:
+extern int ucred_match_supplemental(struct ucred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucred *' should also have an identifier name
#301: FILE: include/linux/cred.h:54:
+extern int ucred_match_supplemental(struct ucred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#301: FILE: include/linux/cred.h:54:
+extern int ucred_match_supplemental(struct ucred *, gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/cred.h:72:
+extern struct ucred *current_clone_ucred(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/cred.h:73:
+extern void current_setucred(struct ucred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucred *' should also have an identifier name
#320: FILE: include/linux/cred.h:73:
+extern void current_setucred(struct ucred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/cred.h:74:
+extern int current_setfsuid(uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#321: FILE: include/linux/cred.h:74:
+extern int current_setfsuid(uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/linux/cred.h:75:
+extern int current_setfsgid(gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#322: FILE: include/linux/cred.h:75:
+extern int current_setfsgid(gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/linux/cred.h:76:
+extern int current_setgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#323: FILE: include/linux/cred.h:76:
+extern int current_setgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#323: FILE: include/linux/cred.h:76:
+extern int current_setgroups(int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/cred.h:77:
+extern int current_getgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#324: FILE: include/linux/cred.h:77:
+extern int current_getgroups(int, gid_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t *' should also have an identifier name
#324: FILE: include/linux/cred.h:77:
+extern int current_getgroups(int, gid_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: include/linux/cred.h:79:
+extern struct ucred *task_getucred(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#326: FILE: include/linux/cred.h:79:
+extern struct ucred *task_getucred(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/cred.h:80:
+extern void task_setucred(struct task_struct *, struct ucred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#327: FILE: include/linux/cred.h:80:
+extern void task_setucred(struct task_struct *, struct ucred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ucred *' should also have an identifier name
#327: FILE: include/linux/cred.h:80:
+extern void task_setucred(struct task_struct *, struct ucred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/linux/cred.h:84:
+extern int task_setfsuid(struct task_struct *, uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: include/linux/cred.h:87:
+extern int current_setgroups16(int, gid16_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/cred.h:88:
+extern int current_getgroups16(int, gid16_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#335: FILE: include/linux/cred.h:88:
+extern int current_getgroups16(int, gid16_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid16_t *' should also have an identifier name
#335: FILE: include/linux/cred.h:88:
+extern int current_getgroups16(int, gid16_t *);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: include/linux/sched.h:331:
+	uid_t uid,euid,suid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: include/linux/sched.h:331:
+	uid_t uid,euid,suid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#371: FILE: include/linux/sched.h:332:
+	gid_t gid,egid,sgid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#371: FILE: include/linux/sched.h:332:
+	gid_t gid,egid,sgid;
 	              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#439: FILE: kernel/cred.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#440: FILE: kernel/cred.c:2:
+ * linux/kernel/cred.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: kernel/cred.c:22:
+struct ucred init_ucred = { $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: kernel/cred.c:37:
+	ucred_cache = kmem_cache_create("ucred_cache",
+				       sizeof(struct ucred),

WARNING:LINE_SPACING: Missing a blank line after declarations
#486: FILE: kernel/cred.c:48:
+	struct ucred *cred;
+	cred = (struct ucred *)kmem_cache_alloc(ucred_cache, gfp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#509: FILE: kernel/cred.c:71:
+	buf = (gid_t *)kmalloc(ngrp * sizeof(gid_t), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#509: FILE: kernel/cred.c:71:
+	buf = (gid_t *)kmalloc(ngrp * sizeof(gid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#541: FILE: kernel/cred.c:103:
+	if (!(cred = ucred_alloc(SLAB_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#636: FILE: kernel/cred.c:198:
+ * ^I grabbing a reference while the task itself is changing$

WARNING:LINE_SPACING: Missing a blank line after declarations
#709: FILE: kernel/cred.c:271:
+		struct ucred *new;
+		new = ucred_clone(cred);

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: kernel/cred.c:424:
+	int i;
+	if (ngrp > cred->ngroups)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#908: FILE: kernel/cred.c:470:
+EXPORT_SYMBOL(put_ucred);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#909: FILE: kernel/cred.c:471:
+EXPORT_SYMBOL(ucred_getgroups);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#910: FILE: kernel/cred.c:472:
+EXPORT_SYMBOL(current_setfsuid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#911: FILE: kernel/cred.c:473:
+EXPORT_SYMBOL(current_setfsgid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#912: FILE: kernel/cred.c:474:
+EXPORT_SYMBOL(current_setgroups);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#913: FILE: kernel/cred.c:475:
+EXPORT_SYMBOL(current_getgroups);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#946: FILE: kernel/fork.c:509:
+static int copy_cred(unsigned long clone_flags, struct task_struct * tsk)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#949: FILE: kernel/fork.c:512:
+	struct ucred *cred;
+	cred = current_clone_ucred();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1006: FILE: kernel/sys.c:1001:
+		if (copy_to_user(grouplist, groups, sizeof(gid_t)*i))
 		                                                 ^

CHECK:SPACING: No space is necessary after a cast
#1124: FILE: net/sunrpc/auth_unix.c:132:
+	struct unx_cred	*cr = (struct unx_cred *) rcred;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1130: FILE: net/sunrpc/auth_unix.c:138:
+		return (cr->uc_uid == 0 && cr->uc_fsuid == 0
+		     && cr->uc_gid == 0 && cr->uc_fsgid == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1131: FILE: net/sunrpc/auth_unix.c:139:
+		     && cr->uc_gid == 0 && cr->uc_fsgid == 0
+		     && cr->uc_gids[0] == (gid_t) NOGROUP);

CHECK:SPACING: No space is necessary after a cast
#1131: FILE: net/sunrpc/auth_unix.c:139:
+		     && cr->uc_gids[0] == (gid_t) NOGROUP);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1149: FILE: net/sunrpc/auth_unix.c:144:
+	if (cr->uc_uid != current->uid
+	 || cr->uc_gid != current->gid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1150: FILE: net/sunrpc/auth_unix.c:145:
+	 || cr->uc_gid != current->gid
+	 || cr->uc_fsuid != cred->uid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1151: FILE: net/sunrpc/auth_unix.c:146:
+	 || cr->uc_fsuid != cred->uid
+	 || cr->uc_fsgid != cred->gid) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1162: FILE: net/sunrpc/auth_unix.c:154:
+	if (memcmp(cr->uc_gids, cred->groups, groups*sizeof(gid_t)))
 	                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1180: FILE: security/dummy.c:56:
+	if (cap_is_fs_cap (cap) ? task_fsuid(tsk) == 0 : tsk->euid == 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436105.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 56 warnings, 31 checks, 1060 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436105.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
