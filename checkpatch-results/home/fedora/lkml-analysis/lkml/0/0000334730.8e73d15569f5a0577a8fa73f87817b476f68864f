WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
controller. Applies over the CKRM core patch for the -mm tree, available from

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#50: 
--- a/arch/i386/Kconfig	Wed Sep 24 14:47:35 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: arch/i386/Kconfig:538:
+^I   Provide per-class control over per-blockdevice I/O bandwidth. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: arch/i386/Kconfig:542:
+^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: arch/i386/Kconfig:543:
+^I   Say N if unsure about what CKRM does. ^I  ^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#90: FILE: drivers/block/cfq-iosched.c:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: drivers/block/cfq-iosched.c:73:
+^Iint iogrp;  /* could either be tgid for regular cfq or $

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: drivers/block/cfq-iosched.c:74:
+                       an ioclass id for CKRM_IO */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#100: FILE: drivers/block/cfq-iosched.c:74:
+	int iogrp;  /* could either be tgid for regular cfq or 
+                       an ioclass id for CKRM_IO */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#100: FILE: drivers/block/cfq-iosched.c:74:
+                       an ioclass id for CKRM_IO */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#112: FILE: drivers/block/cfq-iosched.c:100:
 
+

WARNING:SPACING: space prohibited before semicolon
#117: FILE: drivers/block/cfq-iosched.c:105:
+		return tsk->io_class->icls_id ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#119: FILE: drivers/block/cfq-iosched.c:107:
+		return ckrm_icls_dflt.icls_id ;

WARNING:SPACING: space prohibited before semicolon
#122: FILE: drivers/block/cfq-iosched.c:110:
+	return tsk->tgid ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: drivers/block/cfq-iosched.c:112:
+}^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#206: FILE: drivers/block/ckrm_io.c:1:
+/* linux/drivers/block/ckrm_io.c : io control for CKRM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#206: FILE: drivers/block/ckrm_io.c:1:
+/* linux/drivers/block/ckrm_io.c : io control for CKRM

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: drivers/block/ckrm_io.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: drivers/block/ckrm_io.c:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: drivers/block/ckrm_io.c:6:
+ * I/O control functions of the CKRM kernel API $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: drivers/block/ckrm_io.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: drivers/block/ckrm_io.c:20:
+ *        Initial version with equal shares for all classes. $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#245: FILE: drivers/block/ckrm_io.c:40:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#246: FILE: drivers/block/ckrm_io.c:41:
+#include <asm/pgtable.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: drivers/block/ckrm_io.c:43:
+
+

WARNING:SPACING: space prohibited before semicolon
#250: FILE: drivers/block/ckrm_io.c:45:
+int next_icls_id = 1 ;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#255: FILE: drivers/block/ckrm_io.c:50:
+EXPORT_SYMBOL(ckrm_icls_list);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#256: FILE: drivers/block/ckrm_io.c:51:
+EXPORT_SYMBOL(ckrm_icls_lock);

WARNING:SPACING: space prohibited before semicolon
#261: FILE: drivers/block/ckrm_io.c:56:
+} ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#263: FILE: drivers/block/ckrm_io.c:58:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: drivers/block/ckrm_io.c:63:
+#define cprintk(lvl,x) if ((lvl) <= iclsdebug) printk x
                    ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#268: FILE: drivers/block/ckrm_io.c:63:
+#define cprintk(lvl,x) if ((lvl) <= iclsdebug) printk x

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: drivers/block/ckrm_io.c:65:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#274: FILE: drivers/block/ckrm_io.c:69:
+int ckrm_validate_icls(ckrm_icls_t* cls)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#276: FILE: drivers/block/ckrm_io.c:71:
+	ckrm_icls_t *validcls ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: drivers/block/ckrm_io.c:75:
+			cprintk(5,("cki: validated cls %p [%d]\n",
 			         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/block/ckrm_io.c:76:
+			cprintk(5,("cki: validated cls %p [%d]\n",
+				cls,cls->icls_id));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: drivers/block/ckrm_io.c:76:
+				cls,cls->icls_id));
 				   ^

WARNING:SPACING: space prohibited before semicolon
#282: FILE: drivers/block/ckrm_io.c:77:
+			return 1 ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: drivers/block/ckrm_io.c:83:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#290: FILE: drivers/block/ckrm_io.c:85:
+void __init_ckrm_io_class(ckrm_icls_t* cls, void* super)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#290: FILE: drivers/block/ckrm_io.c:85:
+void __init_ckrm_io_class(ckrm_icls_t* cls, void* super)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: drivers/block/ckrm_io.c:96:
+^Icls->icls_id = next_icls_id++; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: drivers/block/ckrm_io.c:97:
+        cls->super = super;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: drivers/block/ckrm_io.c:97:
+        cls->super = super;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: drivers/block/ckrm_io.c:99:
+	cprintk(5,("cki: __init_ckrm_ioclass cls %p [%d] \n",
 	         ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#304: FILE: drivers/block/ckrm_io.c:99:
+	cprintk(5,("cki: __init_ckrm_ioclass cls %p [%d] \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: drivers/block/ckrm_io.c:100:
+	cprintk(5,("cki: __init_ckrm_ioclass cls %p [%d] \n",
+		cls,cls->icls_id));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: drivers/block/ckrm_io.c:100:
+		cls,cls->icls_id));
 		   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: drivers/block/ckrm_io.c:101:
+	cprintk(5,("cki: default cls %p [%d] share %lu\n",
 	         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: drivers/block/ckrm_io.c:102:
+	cprintk(5,("cki: default cls %p [%d] share %lu\n",
+		&ckrm_icls_dflt,ckrm_icls_dflt.icls_id,ckrm_icls_dflt.icls_share));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#307: FILE: drivers/block/ckrm_io.c:102:
+		&ckrm_icls_dflt,ckrm_icls_dflt.icls_id,ckrm_icls_dflt.icls_share));
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#307: FILE: drivers/block/ckrm_io.c:102:
+		&ckrm_icls_dflt,ckrm_icls_dflt.icls_id,ckrm_icls_dflt.icls_share));
 		                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#309: FILE: drivers/block/ckrm_io.c:104:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#310: FILE: drivers/block/ckrm_io.c:105:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: drivers/block/ckrm_io.c:106:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#312: FILE: drivers/block/ckrm_io.c:107:
+	
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#313: FILE: drivers/block/ckrm_io.c:108:
+inline void cki_cls_get(ckrm_icls_t* cls)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#319: FILE: drivers/block/ckrm_io.c:114:
+inline void cki_cls_put(ckrm_icls_t* cls)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: drivers/block/ckrm_io.c:116:
+^I/* FIXME - to really remove a class, we need to ensure all $

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: drivers/block/ckrm_io.c:117:
+           outstanding I/O's complete - for now just leave the class alone */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#322: FILE: drivers/block/ckrm_io.c:117:
+	/* FIXME - to really remove a class, we need to ensure all 
+           outstanding I/O's complete - for now just leave the class alone */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: drivers/block/ckrm_io.c:117:
+           outstanding I/O's complete - for now just leave the class alone */

ERROR:SPACING: space prohibited after that open parenthesis '('
#324: FILE: drivers/block/ckrm_io.c:119:
+	if ( (cls) && atomic_dec_and_test(&((cls)->icls_count))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#324: FILE: drivers/block/ckrm_io.c:119:
+	if ( (cls) && atomic_dec_and_test(&((cls)->icls_count))) {
+		printk("try to free cls %p:%d\n", cls, cls->icls_id);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#325: FILE: drivers/block/ckrm_io.c:120:
+		printk("try to free cls %p:%d\n", cls, cls->icls_id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: drivers/block/ckrm_io.c:124:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: drivers/block/ckrm_io.c:125:
+/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: drivers/block/ckrm_io.c:129:
+struct ckrm_io_class* ckrm_alloc_io_class(void* obj)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: drivers/block/ckrm_io.c:129:
+struct ckrm_io_class* ckrm_alloc_io_class(void* obj)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#336: FILE: drivers/block/ckrm_io.c:131:
+	ckrm_icls_t* cls = kmalloc(sizeof(ckrm_icls_t), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: drivers/block/ckrm_io.c:132:
+	ckrm_icls_t* cls = kmalloc(sizeof(ckrm_icls_t), GFP_KERNEL);
+	if (!cls)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: drivers/block/ckrm_io.c:134:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cls->icls_list
#342: FILE: drivers/block/ckrm_io.c:137:
+	list_add(&(cls->icls_list), &ckrm_icls_list);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: drivers/block/ckrm_io.c:141:
+	cprintk(5,("ckrm_alloc_io_class cls %p [%d] \n",
 	         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_alloc_io_class', this function's name, in a string
#346: FILE: drivers/block/ckrm_io.c:141:
+	cprintk(5,("ckrm_alloc_io_class cls %p [%d] \n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#346: FILE: drivers/block/ckrm_io.c:141:
+	cprintk(5,("ckrm_alloc_io_class cls %p [%d] \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: drivers/block/ckrm_io.c:142:
+	cprintk(5,("ckrm_alloc_io_class cls %p [%d] \n",
+		cls,cls->icls_id));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#347: FILE: drivers/block/ckrm_io.c:142:
+		cls,cls->icls_id));
 		   ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#352: FILE: drivers/block/ckrm_io.c:147:
+int ckrm_free_io_class(struct ckrm_io_class* cls)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#354: FILE: drivers/block/ckrm_io.c:149:
+	if (cls->icls_id==ckrm_icls_dflt.icls_id) {
 	                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#355: FILE: drivers/block/ckrm_io.c:150:
+		printk("Error: attempt to free default io class\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: drivers/block/ckrm_io.c:152:
+^I}    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: drivers/block/ckrm_io.c:153:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#362: FILE: drivers/block/ckrm_io.c:157:
+	cprintk(5,("ckrm_free_io_class cls %p [%d] \n",
 	         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_free_io_class', this function's name, in a string
#362: FILE: drivers/block/ckrm_io.c:157:
+	cprintk(5,("ckrm_free_io_class cls %p [%d] \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#362: FILE: drivers/block/ckrm_io.c:157:
+	cprintk(5,("ckrm_free_io_class cls %p [%d] \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/block/ckrm_io.c:158:
+	cprintk(5,("ckrm_free_io_class cls %p [%d] \n",
+		cls,cls->icls_id));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: drivers/block/ckrm_io.c:158:
+		cls,cls->icls_id));
 		   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: drivers/block/ckrm_io.c:164:
+^I/* strictly speaking, all the other io class shares should also be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: drivers/block/ckrm_io.c:165:
+^I   checked for consistency with the new value here $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#370: FILE: drivers/block/ckrm_io.c:165:
+	/* strictly speaking, all the other io class shares should also be 
+	   checked for consistency with the new value here 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'share < 0'
#373: FILE: drivers/block/ckrm_io.c:168:
+	if ((share < 0) || (share > 100))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'share > 100'
#373: FILE: drivers/block/ckrm_io.c:168:
+	if ((share < 0) || (share > 100))

WARNING:SPACING: space prohibited before semicolon
#374: FILE: drivers/block/ckrm_io.c:169:
+		return -1 ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: drivers/block/ckrm_io.c:170:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: drivers/block/ckrm_io.c:173:
+	cprintk(5,("ckrm_io_set_share %ld cls %p [%d] \n",
 	         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_io_set_share', this function's name, in a string
#378: FILE: drivers/block/ckrm_io.c:173:
+	cprintk(5,("ckrm_io_set_share %ld cls %p [%d] \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#378: FILE: drivers/block/ckrm_io.c:173:
+	cprintk(5,("ckrm_io_set_share %ld cls %p [%d] \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/block/ckrm_io.c:174:
+	cprintk(5,("ckrm_io_set_share %ld cls %p [%d] \n",
+		share, cls,cls->icls_id));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: drivers/block/ckrm_io.c:174:
+		share, cls,cls->icls_id));
 		          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#388: FILE: drivers/block/ckrm_io.c:183:
+	/* not exact but good enough - keep total in atomic variable in
+	   ckrm_iousage to get an exact value */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#388: FILE: drivers/block/ckrm_io.c:183:
+	   ckrm_iousage to get an exact value */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: drivers/block/ckrm_io.c:184:
+^I$

CHECK:SPACING: No space is necessary after a cast
#390: FILE: drivers/block/ckrm_io.c:185:
+	return (ulong) atomic_read(&cls->icls_usage.blkread)+

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#390: FILE: drivers/block/ckrm_io.c:185:
+	return (ulong) atomic_read(&cls->icls_usage.blkread)+
 	                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: drivers/block/ckrm_io.c:189:
+struct ckrm_io_class *ckrm_dflt_io_class(void *obj) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: drivers/block/ckrm_io.c:195:
+void ckrm_io_change_class(struct task_struct *tsk, $

WARNING:SPACING: space prohibited before semicolon
#404: FILE: drivers/block/ckrm_io.c:199:
+		return ;

WARNING:SPACING: space prohibited before semicolon
#408: FILE: drivers/block/ckrm_io.c:203:
+		return ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: drivers/block/ckrm_io.c:204:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: drivers/block/ckrm_io.c:207:
+^I^I$

WARNING:SPACING: space prohibited before semicolon
#414: FILE: drivers/block/ckrm_io.c:209:
+	tsk->io_class = newclass ;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#418: FILE: drivers/block/ckrm_io.c:213:
+	cprintk(5,("ckrm_io_change_class to %p [%d]\n",
 	         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ckrm_io_change_class', this function's name, in a string
#418: FILE: drivers/block/ckrm_io.c:213:
+	cprintk(5,("ckrm_io_change_class to %p [%d]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: drivers/block/ckrm_io.c:214:
+	cprintk(5,("ckrm_io_change_class to %p [%d]\n",
+		newclass,newclass->icls_id));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#419: FILE: drivers/block/ckrm_io.c:214:
+		newclass,newclass->icls_id));
 		        ^

WARNING:SPACING: space prohibited before semicolon
#421: FILE: drivers/block/ckrm_io.c:216:
+	return ;

WARNING:RETURN_VOID: void function return statements are not generally useful
#422: FILE: drivers/block/ckrm_io.c:217:
+	return ;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#424: FILE: drivers/block/ckrm_io.c:219:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#426: FILE: drivers/block/ckrm_io.c:221:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#428: FILE: drivers/block/ckrm_io.c:223:
+EXPORT_SYMBOL(ckrm_alloc_io_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#429: FILE: drivers/block/ckrm_io.c:224:
+EXPORT_SYMBOL(ckrm_free_io_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#430: FILE: drivers/block/ckrm_io.c:225:
+EXPORT_SYMBOL(ckrm_io_set_share);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#431: FILE: drivers/block/ckrm_io.c:226:
+EXPORT_SYMBOL(ckrm_io_get_usage);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#432: FILE: drivers/block/ckrm_io.c:227:
+EXPORT_SYMBOL(ckrm_dflt_io_class);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#433: FILE: drivers/block/ckrm_io.c:228:
+EXPORT_SYMBOL(ckrm_io_change_class);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#435: FILE: drivers/block/ckrm_io.c:230:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#440: FILE: include/linux/ckrm_io.h:1:
+/* include/linux/ckrm_io.h : io control for CKRM

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#440: FILE: include/linux/ckrm_io.h:1:
+/* include/linux/ckrm_io.h : io control for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: include/linux/ckrm_io.h:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: include/linux/ckrm_io.h:5:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: include/linux/ckrm_io.h:6:
+ * I/O control functions of the CKRM kernel API $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: include/linux/ckrm_io.h:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: include/linux/ckrm_io.h:20:
+ *        Initial version with equal shares for all classes. $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#463: FILE: include/linux/ckrm_io.h:24:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#476: FILE: include/linux/ckrm_io.h:37:
+typedef struct ckrm_iousage {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: include/linux/ckrm_io.h:38:
+^Istruct timeval       epochstart ; /* all measurements relative to this $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#478: FILE: include/linux/ckrm_io.h:39:
+	struct timeval       epochstart ; /* all measurements relative to this 
+					     start time */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#478: FILE: include/linux/ckrm_io.h:39:
+					     start time */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: include/linux/ckrm_io.h:43:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#485: FILE: include/linux/ckrm_io.h:46:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#486: FILE: include/linux/ckrm_io.h:47:
+typedef struct ckrm_io_class {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#487: FILE: include/linux/ckrm_io.h:48:
+typedef struct ckrm_io_class {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: include/linux/ckrm_io.h:50:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: include/linux/ckrm_io.h:51:
+^I/* percentage of io submitted may not translate to percentage of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#491: FILE: include/linux/ckrm_io.h:52:
+	/* percentage of io submitted may not translate to percentage of 
+	   delivered I/O bandwidth */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#491: FILE: include/linux/ckrm_io.h:52:
+	   delivered I/O bandwidth */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#493: FILE: include/linux/ckrm_io.h:54:
+^Iunsigned long    icls_share; /* percentage of all io submitted to $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#494: FILE: include/linux/ckrm_io.h:55:
+	unsigned long    icls_share; /* percentage of all io submitted to 
+					DDs by io scheduler. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#494: FILE: include/linux/ckrm_io.h:55:
+					DDs by io scheduler. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: include/linux/ckrm_io.h:57:
+^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: include/linux/ckrm_io.h:59:
+^Iint              icls_id;    $

ERROR:POINTER_LOCATION: "foo*            bar" should be "foo *bar"
#499: FILE: include/linux/ckrm_io.h:60:
+	void*            super;      /* pointer to ckrm super class */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: include/linux/ckrm_io.h:61:
+^I^I^I^I^I   $

WARNING:SPACING: space prohibited before semicolon
#501: FILE: include/linux/ckrm_io.h:62:
+}  ckrm_icls_t ;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#507: FILE: include/linux/ckrm_io.h:68:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#508: FILE: include/linux/ckrm_io.h:69:
+extern void init_ckrm_icls_share(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: include/linux/ckrm_io.h:70:
+extern void ckrm_icls_set_share(int icls_id, int percent);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: include/linux/ckrm_io.h:80:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#521: FILE: include/linux/ckrm_io.h:82:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334730.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 71 errors, 57 warnings, 33 checks, 459 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334730.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
