WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#51: FILE: list.h:29:
+	BUG_ON(list == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#51: FILE: list.h:29:
+	BUG_ON(list == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#52: FILE: list.h:30:
+	BUG_ON(list->next == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list->next"
#52: FILE: list.h:30:
+	BUG_ON(list->next == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#53: FILE: list.h:31:
+	BUG_ON(list->prev == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list->prev"
#53: FILE: list.h:31:
+	BUG_ON(list->prev == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#54: FILE: list.h:32:
+	BUG_ON(list->next->prev != list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#55: FILE: list.h:33:
+	BUG_ON(list->prev->next != list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#56: FILE: list.h:34:
+	BUG_ON((list->next == list) && (list->prev != list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#57: FILE: list.h:35:
+	BUG_ON((list->prev == list) && (list->next != list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: list.h:37:
+#else $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: list.h:182:
+#define list_for_each(pos, head) ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#129: FILE: list.h:182:
+#define list_for_each(pos, head) 			\
+	for (pos = (head)->next, prefetch(pos->next); \
+		__list_valid(pos), pos != (head); 	\
+        	__list_valid(pos), pos = pos->next, prefetch(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#129: FILE: list.h:182:
+#define list_for_each(pos, head) 			\
+	for (pos = (head)->next, prefetch(pos->next); \
+		__list_valid(pos), pos != (head); 	\
+        	__list_valid(pos), pos = pos->next, prefetch(pos->next))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: list.h:184:
+^I^I__list_valid(pos), pos != (head); ^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: list.h:185:
+        ^I__list_valid(pos), pos = pos->next, prefetch(pos->next))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: list.h:185:
+        ^I__list_valid(pos), pos = pos->next, prefetch(pos->next))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: list.h:185:
+        ^I__list_valid(pos), pos = pos->next, prefetch(pos->next))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: list.h:205:
+        ^I__list_valid(pos), pos = pos->prev, prefetch(pos->prev))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: list.h:205:
+        ^I__list_valid(pos), pos = pos->prev, prefetch(pos->prev))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: list.h:205:
+        ^I__list_valid(pos), pos = pos->prev, prefetch(pos->prev))$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431113.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 14 warnings, 5 checks, 97 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000431113.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
