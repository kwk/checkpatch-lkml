WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
The second patch of this set completes the removal of ext2-specific includes

WARNING:TYPO_SPELLING: 'occurances' may be misspelled - perhaps 'occurrences'?
#45: 
    space program, removes all occurances of __KERNEL__ from it.
                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#50: 
The bulk of this patch consists of the the more-or-less mechanical replacement

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#141: FILE: fs/ext2/balloc.c:587:
+	return ext2_test_bit ((block - le32_to_cpu(EXT2_SB(sb)->s_es->s_first_data_block)) %

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: fs/ext2/ext2.h:29:
+					printk ("EXT2-fs DEBUG (%s, %d): %s:", \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#212: FILE: fs/ext2/ext2.h:29:
+					printk ("EXT2-fs DEBUG (%s, %d): %s:", \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#213: FILE: fs/ext2/ext2.h:30:
+						__FILE__, __LINE__, __FUNCTION__); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: fs/ext2/ext2.h:31:
+^I^I^I^I  ^Iprintk (f, ## a); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: fs/ext2/ext2.h:31:
+^I^I^I^I  ^Iprintk (f, ## a); \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#214: FILE: fs/ext2/ext2.h:31:
+				  	printk (f, ## a); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: fs/ext2/ext2.h:31:
+				  	printk (f, ## a); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#250: FILE: fs/ext2/ext2.h:67:
+#define EXT2_ACLE_PER_BLOCK(s)		(EXT2_BLOCK_SIZE(s) / sizeof (struct ext2_acl_entry))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#251: FILE: fs/ext2/ext2.h:68:
+#define	EXT2_ADDR_PER_BLOCK(s)		(EXT2_BLOCK_SIZE(s) / sizeof (__u32))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#264: FILE: fs/ext2/ext2.h:81:
+#define EXT2_FRAGS_PER_BLOCK(s)	(EXT2_BLOCK_SIZE(s) / EXT2_FRAG_SIZE(s))

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#292: FILE: fs/ext2/ext2.h:109:
+struct ext2_group_desc
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#423: FILE: fs/ext2/ext2.h:240:
+#define i_frag		osd2.hurd2.h_i_frag;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#423: FILE: fs/ext2/ext2.h:240:
+#define i_frag		osd2.hurd2.h_i_frag;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#424: FILE: fs/ext2/ext2.h:241:
+#define i_fsize		osd2.hurd2.h_i_fsize;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#424: FILE: fs/ext2/ext2.h:241:
+#define i_fsize		osd2.hurd2.h_i_fsize;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#455: FILE: fs/ext2/ext2.h:272:
+#define clear_opt(o, opt)		o &= ~EXT2_MOUNT_##opt

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#455: FILE: fs/ext2/ext2.h:272:
+#define clear_opt(o, opt)		o &= ~EXT2_MOUNT_##opt

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#456: FILE: fs/ext2/ext2.h:273:
+#define set_opt(o, opt)			o |= EXT2_MOUNT_##opt

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#456: FILE: fs/ext2/ext2.h:273:
+#define set_opt(o, opt)			o |= EXT2_MOUNT_##opt

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#495: FILE: fs/ext2/ext2.h:312:
+^I__u16^Is_minor_rev_level; ^I/* minor revision level */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#515: FILE: fs/ext2/ext2.h:332:
+^I__u32^Is_first_ino; ^I^I/* First non-reserved inode */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#516: FILE: fs/ext2/ext2.h:333:
+^I__u16   s_inode_size; ^I^I/* size of inode structure */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: fs/ext2/ext2.h:334:
+^I__u16^Is_block_group_nr; ^I/* block group # of this superblock */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: fs/ext2/ext2.h:335:
+^I__u32^Is_feature_compat; ^I/* compatible feature set */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: fs/ext2/ext2.h:336:
+^I__u32^Is_feature_incompat; ^I/* incompatible feature set */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#520: FILE: fs/ext2/ext2.h:337:
+^I__u32^Is_feature_ro_compat; ^I/* readonly-compatible feature set */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: fs/ext2/ext2.h:339:
+^Ichar^Is_volume_name[16]; ^I/* volume name */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#523: FILE: fs/ext2/ext2.h:340:
+^Ichar^Is_last_mounted[64]; ^I/* directory where last mounted */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#551: FILE: fs/ext2/ext2.h:368:
+	struct buffer_head * s_sbh;	/* Buffer containing the super block */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#552: FILE: fs/ext2/ext2.h:369:
+	struct ext2_super_block * s_es;	/* Pointer to the super block in the buffer */

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#553: FILE: fs/ext2/ext2.h:370:
+	struct buffer_head ** s_group_desc;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#557: FILE: fs/ext2/ext2.h:374:
+	struct buffer_head * s_inode_bitmap[EXT2_MAX_GROUP_LOADED];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#559: FILE: fs/ext2/ext2.h:376:
+	struct buffer_head * s_block_bitmap[EXT2_MAX_GROUP_LOADED];

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#608: FILE: fs/ext2/ext2.h:436:
+#define EXT2_DYNAMIC_REV^I1 ^I/* V2 format w/ dynamic inode sizes */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#623: FILE: fs/ext2/ext2.h:447:
+#define EXT2_HAS_COMPAT_FEATURE(sb,mask)			\
                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#624: FILE: fs/ext2/ext2.h:448:
+	( EXT2_SB(sb)->s_es->s_feature_compat & cpu_to_le32(mask) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#624: FILE: fs/ext2/ext2.h:448:
+	( EXT2_SB(sb)->s_es->s_feature_compat & cpu_to_le32(mask) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#625: FILE: fs/ext2/ext2.h:449:
+#define EXT2_HAS_RO_COMPAT_FEATURE(sb,mask)			\
                                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#626: FILE: fs/ext2/ext2.h:450:
+	( EXT2_SB(sb)->s_es->s_feature_ro_compat & cpu_to_le32(mask) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#626: FILE: fs/ext2/ext2.h:450:
+	( EXT2_SB(sb)->s_es->s_feature_ro_compat & cpu_to_le32(mask) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#627: FILE: fs/ext2/ext2.h:451:
+#define EXT2_HAS_INCOMPAT_FEATURE(sb,mask)			\
                                     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#628: FILE: fs/ext2/ext2.h:452:
+	( EXT2_SB(sb)->s_es->s_feature_incompat & cpu_to_le32(mask) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#628: FILE: fs/ext2/ext2.h:452:
+	( EXT2_SB(sb)->s_es->s_feature_incompat & cpu_to_le32(mask) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#629: FILE: fs/ext2/ext2.h:453:
+#define EXT2_SET_COMPAT_FEATURE(sb,mask)			\
                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#629: FILE: fs/ext2/ext2.h:453:
+#define EXT2_SET_COMPAT_FEATURE(sb,mask)			\
+	EXT2_SB(sb)->s_es->s_feature_compat |= cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#631: FILE: fs/ext2/ext2.h:455:
+#define EXT2_SET_RO_COMPAT_FEATURE(sb,mask)			\
                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#631: FILE: fs/ext2/ext2.h:455:
+#define EXT2_SET_RO_COMPAT_FEATURE(sb,mask)			\
+	EXT2_SB(sb)->s_es->s_feature_ro_compat |= cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#633: FILE: fs/ext2/ext2.h:457:
+#define EXT2_SET_INCOMPAT_FEATURE(sb,mask)			\
                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#633: FILE: fs/ext2/ext2.h:457:
+#define EXT2_SET_INCOMPAT_FEATURE(sb,mask)			\
+	EXT2_SB(sb)->s_es->s_feature_incompat |= cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#635: FILE: fs/ext2/ext2.h:459:
+#define EXT2_CLEAR_COMPAT_FEATURE(sb,mask)			\
                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#635: FILE: fs/ext2/ext2.h:459:
+#define EXT2_CLEAR_COMPAT_FEATURE(sb,mask)			\
+	EXT2_SB(sb)->s_es->s_feature_compat &= ~cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#637: FILE: fs/ext2/ext2.h:461:
+#define EXT2_CLEAR_RO_COMPAT_FEATURE(sb,mask)			\
                                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#637: FILE: fs/ext2/ext2.h:461:
+#define EXT2_CLEAR_RO_COMPAT_FEATURE(sb,mask)			\
+	EXT2_SB(sb)->s_es->s_feature_ro_compat &= ~cpu_to_le32(mask)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#639: FILE: fs/ext2/ext2.h:463:
+#define EXT2_CLEAR_INCOMPAT_FEATURE(sb,mask)			\
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#639: FILE: fs/ext2/ext2.h:463:
+#define EXT2_CLEAR_INCOMPAT_FEATURE(sb,mask)			\
+	EXT2_SB(sb)->s_es->s_feature_incompat &= ~cpu_to_le32(mask)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#663: FILE: fs/ext2/ext2.h:487:
+#define EXT2_FEATURE_RO_COMPAT_SUPP	(EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER| \
                                    	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#664: FILE: fs/ext2/ext2.h:488:
+					 EXT2_FEATURE_RO_COMPAT_LARGE_FILE| \
 					                                  ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#722: FILE: fs/ext2/ext2.h:546:
+#define EXT2_DIR_PAD^I^I ^I4$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#723: FILE: fs/ext2/ext2.h:547:
+#define EXT2_DIR_ROUND ^I^I^I(EXT2_DIR_PAD - 1)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#764: FILE: fs/ext2/ialloc.c:233:
+	struct ext2_super_block * es = EXT2_SB(sb)->s_es;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#830: FILE: fs/ext2/ialloc.c:491:
+	struct ext2_super_block * es = EXT2_SB(sb)->s_es;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#910: FILE: fs/ext2/super.c:137:
+			brelse (EXT2_SB(sb)->s_group_desc[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#916: FILE: fs/ext2/super.c:141:
+			brelse (EXT2_SB(sb)->s_inode_bitmap[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#922: FILE: fs/ext2/super.c:144:
+			brelse (EXT2_SB(sb)->s_block_bitmap[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#923: FILE: fs/ext2/super.c:145:
+	brelse (EXT2_SB(sb)->s_sbh);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#970: FILE: fs/ext2/super.c:392:
+			gdp = (struct ext2_group_desc *) EXT2_SB(sb)->s_group_desc[desc_block++]->b_data;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#970: FILE: fs/ext2/super.c:392:
+			gdp = (struct ext2_group_desc *) EXT2_SB(sb)->s_group_desc[desc_block++]->b_data;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1058: FILE: fs/ext2/super.c:582:
+^I^I^I^I        EXT2_SB(sb)->s_inodes_per_block;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1129: FILE: fs/ext2/super.c:641:
+	EXT2_SB(sb)->s_group_desc = kmalloc (db_count * sizeof (struct buffer_head *), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1129: FILE: fs/ext2/super.c:641:
+	EXT2_SB(sb)->s_group_desc = kmalloc (db_count * sizeof (struct buffer_head *), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s_group_desc"
#1130: FILE: fs/ext2/super.c:642:
+	if (EXT2_SB(sb)->s_group_desc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1142: FILE: fs/ext2/super.c:650:
+				brelse (EXT2_SB(sb)->s_group_desc[j]);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1310: FILE: fs/ext2/super.c:870:
+	alloc_super:	ext2_alloc_super,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#1310: FILE: fs/ext2/super.c:870:
+	alloc_super:	ext2_alloc_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1311: FILE: fs/ext2/super.c:871:
+	destroy_super:	ext2_destroy_super,
 	             ^

WARNING:INDENTED_LABEL: labels should not be indented
#1311: FILE: fs/ext2/super.c:871:
+	destroy_super:	ext2_destroy_super,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 36 warnings, 7 checks, 1208 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000474459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
