WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#26: 
my own.  It's at the useable stage:-)  
                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'programable' may be misspelled - perhaps 'programmable'?
#36: 
	or a programable timer.  This patch provides high resolution
	     ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'flexibilty' may be misspelled - perhaps 'flexibility'?
#50: 
	me this flexibilty.
	        ^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#102: 
diff -X dontdiff -urN linux-2.5.50.orig/arch/i386/kernel/apic.c linux-2.5.50/arch/i386/kernel/apic.c

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#146: FILE: arch/i386/kernel/apic.c:940:
+	if (!tmp_value || clocks/APIC_DIVISOR < tmp_value)
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#147: FILE: arch/i386/kernel/apic.c:941:
+		apic_write_around(APIC_TMICT, clocks/APIC_DIVISOR);
 		                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: arch/i386/kernel/apic.c:944:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: arch/i386/kernel/apic.c:1043:
+^Iif (!run_posix_timers((void *)regs)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#196: FILE: arch/i386/kernel/signal.c:508:
 		switch (regs->eax) {
[...]
+			case -ERESTARTNANOSLP:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: arch/i386/kernel/signal.c:597:
+^I^I * by a non delivered signal we want to complete $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#236: FILE: arch/i386/kernel/smpboot.c:223:
+	one_usec = cpu_khz/1000;
 	                  ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#262: FILE: arch/i386/kernel/time.c:100:
+}
+void do_gettimeofday_ns(struct timespec *tv)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#301: FILE: arch/i386/kernel/time.c:124:
+	tv->tv_usec = ts.tv_nsec/1000;
 	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: arch/i386/kernel/time.c:127:
 
+

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#314: FILE: arch/i386/kernel/time.c:136:
+	ts.tv_nsec +=ytime.tv_nsec;
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#361: FILE: arch/i386/kernel/time.c:176:
+	struct timespec ts;
+	ts.tv_sec = tv->tv_sec;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#387: FILE: arch/i386/kernel/timers/timer_cyclone.c:50:
+	count = ((LATCH-1) - count) * tick_nsec;
 	               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: arch/i386/kernel/timers/timer_cyclone.c:67:
+^I/* convert cyclone ticks to nanoseconds */^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#399: FILE: arch/i386/kernel/timers/timer_cyclone.c:69:
+	offset = offset*(1000000000/CYCLONE_TIMER_FREQ);
 	               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#399: FILE: arch/i386/kernel/timers/timer_cyclone.c:69:
+	offset = offset*(1000000000/CYCLONE_TIMER_FREQ);
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#414: FILE: arch/i386/kernel/timers/timer_pit.c:118:
+	count = ((LATCH-1) - count) * tick_nsec;
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#454: FILE: arch/i386/kernel/timers/timer_tsc.c:49:
+	edx = ((long long)fast_gettimeoffset_quotient*eax) >> 22;
 	                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#466: FILE: arch/i386/kernel/timers/timer_tsc.c:97:
+	count = ((LATCH-1) - count) * tick_nsec;
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#488: FILE: arch/i386/kernel/timers/timer_tsc.c:116:
+#define CALIBRATE_TIME	((int)((1000000000LL*CALIBRATE_LATCH + \
                       	                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#489: FILE: arch/i386/kernel/timers/timer_tsc.c:117:
+			CLOCK_TICK_RATE/2) / CLOCK_TICK_RATE))
 			               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#498: FILE: arch/i386/kernel/timers/timer_tsc.c:167:
+		if (endlow <= (CALIBRATE_TIME>>10))
 		                             ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#504: FILE: arch/i386/kernel/timers/timer_tsc.c:172:
+			:"r" (endlow),
 			^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#505: FILE: arch/i386/kernel/timers/timer_tsc.c:173:
+			"0" (CALIBRATE_TIME<<22),
 			                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#506: FILE: arch/i386/kernel/timers/timer_tsc.c:174:
+			"1" (CALIBRATE_TIME>>10));
 			                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: arch/i386/kernel/timers/timer_tsc.c:274:
+^I^I^I * The formula is $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#530: FILE: arch/i386/kernel/timers/timer_tsc.c:279:
+				eax = (long)(1000000LL<<22);
 				                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#531: FILE: arch/i386/kernel/timers/timer_tsc.c:280:
+				edx = (long)(1000000LL>>10);
 				                      ^

WARNING:TABSTOP: Statements should start on a tabstop
#593: FILE: include/asm-generic/siginfo.h:240:
+		 int _tid;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#612: FILE: include/asm-i386/posix_types.h:25:
+typedef int		__kernel_timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#613: FILE: include/asm-i386/posix_types.h:26:
+typedef int		__kernel_clockid_t;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#625: FILE: include/asm-i386/unistd.h:267:
+#define __NR_timer_settime	(__NR_timer_create+1)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#626: FILE: include/asm-i386/unistd.h:268:
+#define __NR_timer_gettime	(__NR_timer_create+2)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#627: FILE: include/asm-i386/unistd.h:269:
+#define __NR_timer_getoverrun	(__NR_timer_create+3)
                              	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#628: FILE: include/asm-i386/unistd.h:270:
+#define __NR_timer_delete	(__NR_timer_create+4)
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#629: FILE: include/asm-i386/unistd.h:271:
+#define __NR_clock_settime	(__NR_timer_create+5)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#630: FILE: include/asm-i386/unistd.h:272:
+#define __NR_clock_gettime	(__NR_timer_create+6)
                           	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#631: FILE: include/asm-i386/unistd.h:273:
+#define __NR_clock_getres	(__NR_timer_create+7)
                          	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#632: FILE: include/asm-i386/unistd.h:274:
+#define __NR_clock_nanosleep	(__NR_timer_create+8)
                             	                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#651: FILE: include/linux/id2ptr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#652: FILE: include/linux/id2ptr.h:2:
+ * include/linux/id2ptr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: include/linux/id2ptr.h:3:
+ * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#663: FILE: include/linux/id2ptr.h:13:
+#define ID_MASK ((1 << ID_BITS)-1)
                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#664: FILE: include/linux/id2ptr.h:14:
+#define ID_FULL ((1 << (1 << ID_BITS))-1)
                                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#671: FILE: include/linux/id2ptr.h:21:
+	struct id_layer	*ary[1<<ID_BITS];
 	               	      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#687: FILE: include/linux/id2ptr.h:37:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#691: FILE: include/linux/id2ptr.h:41:
+		p->bitmap |= 1<<bit;
 		              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#693: FILE: include/linux/id2ptr.h:43:
+		p->bitmap &= ~(1<<bit);
 		                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#718: FILE: include/linux/posix-timers.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#719: FILE: include/linux/posix-timers.h:2:
+ * include/linux/posix-timers.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: include/linux/posix-timers.h:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#740: FILE: include/linux/posix-timers.h:23:
+^Istruct rb_node^I^Iit_pq_node;^I$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#767: FILE: include/linux/posix-timers.h:50:
+	spinlock_t		*lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#809: FILE: include/linux/sched.h:588:
+extern void exit_itimers(struct task_struct *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#809: FILE: include/linux/sched.h:588:
+extern void exit_itimers(struct task_struct *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#809: FILE: include/linux/sched.h:588:
+extern void exit_itimers(struct task_struct *, int);

ERROR:CODE_INDENT: code indent should use tabs where possible
#832: FILE: include/linux/sysctl.h:132:
+  ^IKERN_POSIX_TIMERS=57,^I/* posix timer parameters */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#832: FILE: include/linux/sysctl.h:132:
+  ^IKERN_POSIX_TIMERS=57,^I/* posix timer parameters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: include/linux/sysctl.h:132:
+  ^IKERN_POSIX_TIMERS=57,^I/* posix timer parameters */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#832: FILE: include/linux/sysctl.h:132:
+  	KERN_POSIX_TIMERS=57,	/* posix timer parameters */
   	                 ^

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#844: FILE: include/linux/sysctl.h:196:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#845: FILE: include/linux/sysctl.h:197:
+	POSIX_TIMERS_RESOLUTION=1,
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#846: FILE: include/linux/sysctl.h:198:
+	POSIX_TIMERS_NANOSLEEP_RES=2,
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#847: FILE: include/linux/sysctl.h:199:
+	POSIX_TIMERS_MAX_EXPIRIES=3,
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#848: FILE: include/linux/sysctl.h:200:
+	POSIX_TIMERS_RECOVERY_TIME=4,
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#849: FILE: include/linux/sysctl.h:201:
+	POSIX_TIMERS_MIN_DELAY=5
 	                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#890: FILE: include/linux/time.h:154:
+extern void do_gettimeofday_ns(struct timespec *tv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#892: FILE: include/linux/time.h:156:
+extern void do_settimeofday_ns(struct timespec *tv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#893: FILE: include/linux/time.h:157:
+extern void do_gettime_sinceboot_ns(struct timespec *tv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#894: FILE: include/linux/time.h:158:
+extern int do_sys_settimeofday(struct timeval *tv, struct timezone *tz);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#903: FILE: include/linux/time.h:185:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#931: FILE: include/linux/types.h:26:
+typedef __kernel_timer_t	timer_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#932: FILE: include/linux/types.h:27:
+typedef __kernel_clockid_t	clockid_t;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#980: FILE: kernel/id2ptr.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#981: FILE: kernel/id2ptr.c:2:
+ * linux/kernel/id2ptr.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: kernel/id2ptr.c:8:
+ * Small id to pointer translation service.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#989: FILE: kernel/id2ptr.c:10:
+ * It uses a radix tree like structure as a sparse array indexed $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#996: FILE: kernel/id2ptr.c:17:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1018: FILE: kernel/id2ptr.c:39:
+	if (!(p = id_free))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1019: FILE: kernel/id2ptr.c:40:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1023: FILE: kernel/id2ptr.c:44:
+	return(p);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: kernel/id2ptr.c:55:
+ * Lookup the kernel pointer associated with a user supplied $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1050: FILE: kernel/id2ptr.c:71:
+		return(NULL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1065: FILE: kernel/id2ptr.c:86:
+	int id_base = id & ~((1 << (shift+ID_BITS))-1);
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1065: FILE: kernel/id2ptr.c:86:
+	int id_base = id & ~((1 << (shift+ID_BITS))-1);
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: kernel/id2ptr.c:88:
+^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1073: FILE: kernel/id2ptr.c:94:
+			p->bitmap |= 1<<n;
 			              ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1074: FILE: kernel/id2ptr.c:95:
+			return(id);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1078: FILE: kernel/id2ptr.c:99:
+		if ((v = sub_alloc(p->ary[n], shift-ID_BITS, id, ptr))) {
 		                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1078: FILE: kernel/id2ptr.c:99:
+		if ((v = sub_alloc(p->ary[n], shift-ID_BITS, id, ptr))) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1080: FILE: kernel/id2ptr.c:101:
+			return(v);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1093: FILE: kernel/id2ptr.c:114:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1097: FILE: kernel/id2ptr.c:118:
+	while (id_free_cnt < n+1) {
 	                      ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1100: FILE: kernel/id2ptr.c:121:
+		if (!(new = kmem_cache_alloc(id_layer_cache, GFP_KERNEL)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1110: FILE: kernel/id2ptr.c:131:
+	if ((last == ((1 << n)-1) && last < idp->min_wrap) ||
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: kernel/id2ptr.c:132:
+	if ((last == ((1 << n)-1) && last < idp->min_wrap) ||
+		idp->count == (1 << n)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1119: FILE: kernel/id2ptr.c:140:
+	if (last >= ((1 << n)-1))
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1126: FILE: kernel/id2ptr.c:147:
+	id = last+1;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1127: FILE: kernel/id2ptr.c:148:
+	if (!(v = sub_alloc(idp->top, n-ID_BITS, id, ptr)))
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1127: FILE: kernel/id2ptr.c:148:
+	if (!(v = sub_alloc(idp->top, n-ID_BITS, id, ptr)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1128: FILE: kernel/id2ptr.c:149:
+		v = sub_alloc(idp->top, n-ID_BITS, 1, ptr);
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1132: FILE: kernel/id2ptr.c:153:
+	return(v+1);
 	        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1135: FILE: kernel/id2ptr.c:156:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1140: FILE: kernel/id2ptr.c:161:
+^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1142: FILE: kernel/id2ptr.c:163:
+	bitmap = p->bitmap & ~(1<<n);
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1148: FILE: kernel/id2ptr.c:169:
+		if (sub_remove(p->ary[n], shift-ID_BITS, id)) {
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1173: FILE: kernel/id2ptr.c:194:
+	sub_remove(idp->top, (idp->layers-1)*ID_BITS, id);
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1173: FILE: kernel/id2ptr.c:194:
+	sub_remove(idp->top, (idp->layers-1)*ID_BITS, id);
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: kernel/id2ptr.c:197:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1176: FILE: kernel/id2ptr.c:197:
+	if (id_free_cnt >= ID_FREE_MAX) {
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1188: FILE: kernel/id2ptr.c:209:
+^I^Iid_layer_cache = kmem_cache_create("id_layer_cache", $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1189: FILE: kernel/id2ptr.c:210:
+		id_layer_cache = kmem_cache_create("id_layer_cache", 
+			sizeof(struct id_layer), 0, 0, 0, 0);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1204: FILE: kernel/id2ptr.c:225:
+__initcall(init_id_cache);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1209: FILE: kernel/posix-timers.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: kernel/posix-timers.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1219: FILE: kernel/posix-timers.c:11:
+ * They allow applications to request periodic signal delivery $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1230: FILE: kernel/posix-timers.c:22:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1244: FILE: kernel/posix-timers.c:36:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1259: FILE: kernel/posix-timers.c:51:
+	myoffset = (i+1) % (MAXLOG-1);
 	             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1259: FILE: kernel/posix-timers.c:51:
+	myoffset = (i+1) % (MAXLOG-1);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1260: FILE: kernel/posix-timers.c:52:
+	rdtsc(eax,edx);
 	         ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1274: FILE: kernel/posix-timers.c:66:
+#if 0

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1279: FILE: kernel/posix-timers.c:71:
+	spinlock_t	lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1284: FILE: kernel/posix-timers.c:76:
+};
+typedef struct posix_timers_percpu pt_base_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1284: FILE: kernel/posix-timers.c:76:
+typedef struct posix_timers_percpu pt_base_t;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1307: FILE: kernel/posix-timers.c:99:
+	t->it_v.it_interval.tv_nsec = 1000000000/HZ;
 	                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1314: FILE: kernel/posix-timers.c:106:
+static int __devinit posix_timers_cpu_notify(struct notifier_block *self, $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1314: FILE: kernel/posix-timers.c:106:
+static int __devinit posix_timers_cpu_notify(struct notifier_block *self, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: kernel/posix-timers.c:107:
+static int __devinit posix_timers_cpu_notify(struct notifier_block *self, 
+				unsigned long action, void *hcpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1318: FILE: kernel/posix-timers.c:110:
+	long cpu = (long)hcpu;
+	switch(action) {

ERROR:SPACING: space required before the open parenthesis '('
#1318: FILE: kernel/posix-timers.c:110:
+	switch(action) {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1328: FILE: kernel/posix-timers.c:120:
+static struct notifier_block __devinitdata posix_timers_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after posix_timers_nb
#1328: FILE: kernel/posix-timers.c:120:
+static struct notifier_block __devinitdata posix_timers_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1334: FILE: kernel/posix-timers.c:126:
+ * be called early in the boot before its safe to setup the slab $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1348: FILE: kernel/posix-timers.c:140:
+	posix_timers_cache = kmem_cache_create("posix_timers_cache",
+		sizeof(struct k_itimer), 0, 0, 0, 0);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1352: FILE: kernel/posix-timers.c:144:
+__initcall(init_posix_timers2);

ERROR:SPACING: space required before the open parenthesis '('
#1382: FILE: kernel/posix-timers.c:174:
+	switch(clock) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1395: FILE: kernel/posix-timers.c:187:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1404: FILE: kernel/posix-timers.c:196:
+ * These parameters limit the timer interrupt load if the $

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#1405: FILE: kernel/posix-timers.c:197:
+ * timers are over commited.  
                    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1405: FILE: kernel/posix-timers.c:197:
+ * timers are over commited.  $

WARNING:LONG_LINE_COMMENT: line length of 151 exceeds 100 columns
#1409: FILE: kernel/posix-timers.c:201:
+static int recovery_time = 100000;	/* Recovery time used if we hit the */						/* timer expiry limit above. */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1413: FILE: kernel/posix-timers.c:205:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1440: FILE: kernel/posix-timers.c:232:
+extern void set_APIC_timer(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1440: FILE: kernel/posix-timers.c:232:
+extern void set_APIC_timer(int);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1460: FILE: kernel/posix-timers.c:252:
+	if (ts.tv_sec > 0 || ts.tv_nsec > (1000000000/HZ))
 	                                             ^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1474: FILE: kernel/posix-timers.c:266:
+	struct rb_node ** p = &pq->rb_root.rb_node;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1475: FILE: kernel/posix-timers.c:267:
+	struct rb_node * parent = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1478: FILE: kernel/posix-timers.c:270:
+	struct list_head *prev;
+	prev = &pq->head;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1481: FILE: kernel/posix-timers.c:273:
+		BUG();

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1485: FILE: kernel/posix-timers.c:277:
+		cur = rb_entry(parent, struct k_itimer , it_pq_node);
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1493: FILE: kernel/posix-timers.c:285:
+		if (t->it_v.it_value.tv_sec < cur->it_v.it_value.tv_sec  ||
+			(t->it_v.it_value.tv_sec == cur->it_v.it_value.tv_sec &&

CHECK:BRACES: Unbalanced braces around else statement
#1496: FILE: kernel/posix-timers.c:288:
+		else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1517: FILE: kernel/posix-timers.c:309:
+	if (!(pq = t->it_pq))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1536: FILE: kernel/posix-timers.c:328:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1546: FILE: kernel/posix-timers.c:338:
+^Iif (rv) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1553: FILE: kernel/posix-timers.c:345:
+ * If we are late delivering a periodic timer we may $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1554: FILE: kernel/posix-timers.c:346:
+ * have missed several expiries.  We want to calculate the $

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1565: FILE: kernel/posix-timers.c:357:
+#if 1

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1569: FILE: kernel/posix-timers.c:361:
+	in =  (long long)t->it_v.it_interval.tv_sec*1000000000 +
 	                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1604: FILE: kernel/posix-timers.c:396:
+^I^I(dt.tv_sec == t->it_v.it_interval.tv_sec && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1604: FILE: kernel/posix-timers.c:396:
+	while (dt.tv_sec > t->it_v.it_interval.tv_sec ||
+		(dt.tv_sec == t->it_v.it_interval.tv_sec && 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1608: FILE: kernel/posix-timers.c:400:
+		if (dt.tv_nsec < 0) {
+			 dt.tv_sec--;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1631: FILE: kernel/posix-timers.c:423:
+	timr->it_overrun_deferred = ovr-1;
 	                               ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1632: FILE: kernel/posix-timers.c:424:
+	if (! (timr->it_sigev_notify & SIGEV_NONE)) {
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1658: FILE: kernel/posix-timers.c:450:
+ * Check if the timer at the head of the priority queue has $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1665: FILE: kernel/posix-timers.c:457:
+static int check_expiry(struct timer_pq *pq, struct timespec *tv,
+int *next_expiry, int *expiry_cnt, void *regs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1672: FILE: kernel/posix-timers.c:464:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1681: FILE: kernel/posix-timers.c:473:
+^I^I^I * till the next expiry if it's less than a $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1685: FILE: kernel/posix-timers.c:477:
+				nsec = dt.tv_sec ? 1000000000-dt.tv_nsec :
 				                             ^

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#1702: FILE: kernel/posix-timers.c:494:
+if (dt.tv_sec || dt.tv_nsec > 50000) logit(8, dt.tv_nsec, get_eip(regs));
+		timer_remove_nolock(t);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1702: FILE: kernel/posix-timers.c:494:
+if (dt.tv_sec || dt.tv_nsec > 50000) logit(8, dt.tv_nsec, get_eip(regs));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1706: FILE: kernel/posix-timers.c:498:
+^I^I^I   (dt.tv_sec == t->it_v.it_interval.tv_sec && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1706: FILE: kernel/posix-timers.c:498:
+			if (dt.tv_sec > t->it_v.it_interval.tv_sec ||
+			   (dt.tv_sec == t->it_v.it_interval.tv_sec && 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1734: FILE: kernel/posix-timers.c:526:
+^I^I^I * If a clock_nanosleep is interrupted by a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1735: FILE: kernel/posix-timers.c:527:
+^I^I^I * signal we leave the timer in the queue $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1746: FILE: kernel/posix-timers.c:538:
+^I^I * Limit the number of timers we expire from a $

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1775: FILE: kernel/posix-timers.c:567:
+#if 1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1781: FILE: kernel/posix-timers.c:573:
+^I * hang during boot.  $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1784: FILE: kernel/posix-timers.c:576:
+		set_APIC_timer(1000000000/HZ);
 		                         ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1786: FILE: kernel/posix-timers.c:578:
+		return(1);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1790: FILE: kernel/posix-timers.c:582:
+	next_expiry = 1000000000/HZ;
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1794: FILE: kernel/posix-timers.c:586:
+^I$

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#1803: FILE: kernel/posix-timers.c:595:
+if (!expiry_cnt) logit(7, next_expiry, 0);
+	if (next_expiry < min_delay)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1803: FILE: kernel/posix-timers.c:595:
+if (!expiry_cnt) logit(7, next_expiry, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1810: FILE: kernel/posix-timers.c:602:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1811: FILE: kernel/posix-timers.c:603:
+	
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1814: FILE: kernel/posix-timers.c:606:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1816: FILE: kernel/posix-timers.c:608:
+static struct task_struct * good_sigevent(sigevent_t *event)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1818: FILE: kernel/posix-timers.c:610:
+	struct task_struct * rtn = current;

ERROR:SPACING: space prohibited after that open parenthesis '('
#1821: FILE: kernel/posix-timers.c:613:
+		if ( !(rtn = find_task_by_pid(event->sigev_notify_thread_id)) ||

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1821: FILE: kernel/posix-timers.c:613:
+		if ( !(rtn = find_task_by_pid(event->sigev_notify_thread_id)) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1822: FILE: kernel/posix-timers.c:614:
+		if ( !(rtn = find_task_by_pid(event->sigev_notify_thread_id)) ||
+		     rtn->tgid != current->tgid){

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1827: FILE: kernel/posix-timers.c:619:
+		if ((unsigned)(event->sigev_signo > SIGRTMAX))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1830: FILE: kernel/posix-timers.c:622:
+	if (event->sigev_notify & ~(SIGEV_SIGNAL | SIGEV_THREAD_ID )) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1830: FILE: kernel/posix-timers.c:622:
+	if (event->sigev_notify & ~(SIGEV_SIGNAL | SIGEV_THREAD_ID )) {
+		return NULL;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1840: FILE: kernel/posix-timers.c:632:
+sys_timer_create(clockid_t which_clock, struct sigevent *timer_event_spec,
+				timer_t *created_timer_id)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1845: FILE: kernel/posix-timers.c:637:
+	struct task_struct * process = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1851: FILE: kernel/posix-timers.c:643:
+	if (!(new_timer = kmem_cache_alloc(posix_timers_cache, GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1855: FILE: kernel/posix-timers.c:647:
+	if (!(id = id2ptr_new(&posix_timers_id, (void *)new_timer))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1860: FILE: kernel/posix-timers.c:652:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1872: FILE: kernel/posix-timers.c:664:
+		if ((process = good_sigevent(&event))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1876: FILE: kernel/posix-timers.c:668:
+^I^I^I * case the we clear posix_timers.next in $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1882: FILE: kernel/posix-timers.c:674:
+				list_add(&new_timer->it_task_list,
+					&process->posix_timers);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1919: FILE: kernel/posix-timers.c:711:
+
+

ERROR:SPACING: space required before the open brace '{'
#1925: FILE: kernel/posix-timers.c:717:
+	if (sys_timer_delete(timer->it_id)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1925: FILE: kernel/posix-timers.c:717:
+	if (sys_timer_delete(timer->it_id)){
+		BUG();
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1926: FILE: kernel/posix-timers.c:718:
+		BUG();

ERROR:SPACING: space required before the open brace '{'
#1944: FILE: kernel/posix-timers.c:736:
+	while (tsk->posix_timers.next != &tsk->posix_timers){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1946: FILE: kernel/posix-timers.c:738:
+		 tmr = list_entry(tsk->posix_timers.next,struct k_itimer,
 		                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1947: FILE: kernel/posix-timers.c:739:
+		 tmr = list_entry(tsk->posix_timers.next,struct k_itimer,
+			it_task_list);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1957: FILE: kernel/posix-timers.c:749:
+`	 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1978: FILE: kernel/posix-timers.c:770:
+^Iif ((ts == NULL) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ts == NULL'
#1978: FILE: kernel/posix-timers.c:770:
+	if ((ts == NULL) || 
+	    (ts->tv_sec < 0) ||
+	    ((unsigned)ts->tv_nsec >= NSEC_PER_SEC))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ts->tv_sec < 0'
#1978: FILE: kernel/posix-timers.c:770:
+	if ((ts == NULL) || 
+	    (ts->tv_sec < 0) ||
+	    ((unsigned)ts->tv_nsec >= NSEC_PER_SEC))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ts"
#1978: FILE: kernel/posix-timers.c:770:
+	if ((ts == NULL) || 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1980: FILE: kernel/posix-timers.c:772:
+	    ((unsigned)ts->tv_nsec >= NSEC_PER_SEC))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1990: FILE: kernel/posix-timers.c:782:
+static struct k_itimer* lock_timer(timer_t id)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1998: FILE: kernel/posix-timers.c:790:
+^I^Iif (!timr->it_process || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1999: FILE: kernel/posix-timers.c:791:
+		if (!timr->it_process || 
+		     timr->it_process->tgid != current->tgid) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2004: FILE: kernel/posix-timers.c:796:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2008: FILE: kernel/posix-timers.c:800:
+/* $

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#2013: FILE: kernel/posix-timers.c:805:
+void inline do_timer_gettime(struct k_itimer *timr,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2026: FILE: kernel/posix-timers.c:818:
+		ts.tv_sec = ts.tv_nsec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2038: FILE: kernel/posix-timers.c:830:
+	if (!timr) return -EINVAL;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2045: FILE: kernel/posix-timers.c:837:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2061: FILE: kernel/posix-timers.c:853:
+	struct task_struct * t;

ERROR:SPACING: space prohibited after that open parenthesis '('
#2063: FILE: kernel/posix-timers.c:855:
+	timr = lock_timer( timer_id);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2064: FILE: kernel/posix-timers.c:856:
+	if (!timr) return -EINVAL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2069: FILE: kernel/posix-timers.c:861:
+^Ifor (sig_queue = &t->sig->shared_pending, i = 2; i; $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_code == SI_TIMER'
#2072: FILE: kernel/posix-timers.c:864:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == timr->it_id)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_tid == timr->it_id'
#2072: FILE: kernel/posix-timers.c:864:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == timr->it_id)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2074: FILE: kernel/posix-timers.c:866:
+			    (q->info.si_tid == timr->it_id)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2082: FILE: kernel/posix-timers.c:874:
+^I$

ERROR:SPACING: space required before the open brace '{'
#2100: FILE: kernel/posix-timers.c:892:
+	if (( tp->tv_nsec - NSEC_PER_SEC) >= 0){

ERROR:SPACING: space prohibited after that open parenthesis '('
#2100: FILE: kernel/posix-timers.c:892:
+	if (( tp->tv_nsec - NSEC_PER_SEC) >= 0){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2114: FILE: kernel/posix-timers.c:906:
+	if (old_setting) {
+		do_timer_gettime(timr, old_setting);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2117: FILE: kernel/posix-timers.c:909:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2118: FILE: kernel/posix-timers.c:910:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2118: FILE: kernel/posix-timers.c:910:
+	
+	

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_setting->it_value.tv_sec == 0'
#2120: FILE: kernel/posix-timers.c:912:
+	if ((new_setting->it_value.tv_sec == 0) &&
+		(new_setting->it_value.tv_nsec == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_setting->it_value.tv_nsec == 0'
#2120: FILE: kernel/posix-timers.c:912:
+	if ((new_setting->it_value.tv_sec == 0) &&
+		(new_setting->it_value.tv_nsec == 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2121: FILE: kernel/posix-timers.c:913:
+	if ((new_setting->it_value.tv_sec == 0) &&
+		(new_setting->it_value.tv_nsec == 0)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2130: FILE: kernel/posix-timers.c:922:
+^Itimr->it_overrun_deferred = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2131: FILE: kernel/posix-timers.c:923:
+^I^Itimr->it_overrun_last = $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2142: FILE: kernel/posix-timers.c:934:
+	nsec +=  res-1;
 	            ^

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#2145: FILE: kernel/posix-timers.c:937:
+		nsec -=1000000000;
 		     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2151: FILE: kernel/posix-timers.c:943:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2163: FILE: kernel/posix-timers.c:955:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2164: FILE: kernel/posix-timers.c:956:
+	if (new_setting == NULL) {
+		return -EINVAL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_setting"
#2164: FILE: kernel/posix-timers.c:956:
+	if (new_setting == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2168: FILE: kernel/posix-timers.c:960:
+	if (copy_from_user(&new_spec, new_setting, sizeof(new_spec))) {
+		return -EFAULT;
+	}

ERROR:SPACING: space prohibited after that open parenthesis '('
#2177: FILE: kernel/posix-timers.c:969:
+	timr = lock_timer( timer_id);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2184: FILE: kernel/posix-timers.c:976:
+	error = do_timer_settime(timr, flags, &new_spec, rtn );

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#2187: FILE: kernel/posix-timers.c:979:
+	if (old_setting && ! error) {
 	                   ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2188: FILE: kernel/posix-timers.c:980:
+		if (copy_to_user(old_setting, &old_spec, sizeof(old_spec))) {
+			error = -EFAULT;
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#2200: FILE: kernel/posix-timers.c:992:
+	timer = lock_timer( timer_id);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2242: FILE: kernel/posix-timers.c:1034:
+	if (!(error = do_posix_gettime(clock, &rtn_tp))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2243: FILE: kernel/posix-timers.c:1035:
+		if (copy_to_user(tp, &rtn_tp, sizeof(rtn_tp))) {
+			error = -EFAULT;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2248: FILE: kernel/posix-timers.c:1040:
+^I^I $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2249: FILE: kernel/posix-timers.c:1041:
+		 
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2276: FILE: kernel/posix-timers.c:1068:
+ * change.  If this change is missing an interrupted nanosleep will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2279: FILE: kernel/posix-timers.c:1071:
+int do_clock_nanosleep(clockid_t clock, int flags, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2280: FILE: kernel/posix-timers.c:1072:
+int do_clock_nanosleep(clockid_t clock, int flags, 
+const struct timespec *rqtp, struct timespec *rmtp, int from_nanosleep)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2299: FILE: kernel/posix-timers.c:1091:
+		if ((pq = t->it_pq)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->it_pq'
#2301: FILE: kernel/posix-timers.c:1093:
+			if ((t->it_pq)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2316: FILE: kernel/posix-timers.c:1108:
+^Iif (t->it_pq) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2319: FILE: kernel/posix-timers.c:1111:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#2320: FILE: kernel/posix-timers.c:1112:
+	if(copy_from_user(&t->it_v.it_value, rqtp, sizeof(struct timespec)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->it_v.it_value.tv_nsec < 0'
#2323: FILE: kernel/posix-timers.c:1115:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||
+		(t->it_v.it_value.tv_sec < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->it_v.it_value.tv_nsec >= NSEC_PER_SEC'
#2323: FILE: kernel/posix-timers.c:1115:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||
+		(t->it_v.it_value.tv_sec < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->it_v.it_value.tv_sec < 0'
#2323: FILE: kernel/posix-timers.c:1115:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||
+		(t->it_v.it_value.tv_sec < 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2324: FILE: kernel/posix-timers.c:1116:
+	if ((t->it_v.it_value.tv_nsec < 0) ||
+		(t->it_v.it_value.tv_nsec >= NSEC_PER_SEC) ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2346: FILE: kernel/posix-timers.c:1138:
+	if (!(flags & TIMER_ABSTIME) && rmtp ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2353: FILE: kernel/posix-timers.c:1145:
+^I^I^I * by doing a nanosleep for the remaining time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2354: FILE: kernel/posix-timers.c:1146:
+^I^I^I * may accumulate the rounding error adding $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2366: FILE: kernel/posix-timers.c:1158:
+				ts.tv_sec = ts.tv_nsec = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2371: FILE: kernel/posix-timers.c:1163:
+			ts.tv_sec = ts.tv_nsec  = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2389: FILE: kernel/posix-timers.c:1181:
+asmlinkage int $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2391: FILE: kernel/posix-timers.c:1183:
+sys_clock_nanosleep(clockid_t which_clock, int flags,
+const struct timespec *rqtp, struct timespec *rmtp)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2393: FILE: kernel/posix-timers.c:1185:
+	return(do_clock_nanosleep(which_clock, flags, rqtp, rmtp, 0));

WARNING:TABSTOP: Statements should start on a tabstop
#2422: FILE: kernel/signal.c:726:
+	 struct sigpending *sig_queue;

WARNING:TABSTOP: Statements should start on a tabstop
#2440: FILE: kernel/signal.c:768:
+	 if (LEGACY_QUEUE(sig_queue, sig))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 17)
#2440: FILE: kernel/signal.c:768:
+	 if (LEGACY_QUEUE(sig_queue, sig))
+		 goto out;

WARNING:TABSTOP: Statements should start on a tabstop
#2441: FILE: kernel/signal.c:769:
+		 goto out;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2443: FILE: kernel/signal.c:771:
+^I  * In case of a POSIX timer generated signal you must check $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2444: FILE: kernel/signal.c:772:
+	  * In case of a POSIX timer generated signal you must check 
+	 * if a signal from this timer is already in the queue.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2447: FILE: kernel/signal.c:775:
+	 * itimer.c:posix_timer_fn().
+	  */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->si_code == SI_TIMER'
#2449: FILE: kernel/signal.c:777:
+	if (((unsigned long)info > 2) && (info->si_code == SI_TIMER)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2451: FILE: kernel/signal.c:779:
+		struct sigqueue *q;
+		for (q = sig_queue->head; q; q = q->next) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 33)
#2452: FILE: kernel/signal.c:780:
+			if ((q->info.si_code == SI_TIMER) &&
[...]
+				 q->info.si_overrun += info->si_overrun + 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_code == SI_TIMER'
#2452: FILE: kernel/signal.c:780:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == info->si_tid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'q->info.si_tid == info->si_tid'
#2452: FILE: kernel/signal.c:780:
+			if ((q->info.si_code == SI_TIMER) &&
+			    (q->info.si_tid == info->si_tid)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2455: FILE: kernel/signal.c:783:
+^I^I^I^I/* $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2456: FILE: kernel/signal.c:784:
+				/* 
+				  * this special ret value (1) is recognized

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2497: FILE: kernel/sysctl.c:121:
+extern ctl_table posix_timers_table[];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2505: FILE: kernel/sysctl.c:161:
 
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2525: FILE: kernel/timer.c:51:
+typedef struct timer_list tmr_t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2624: FILE: kernel/timer.c:441:
+struct timespec ytime __attribute__ ((aligned (16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#2624: FILE: kernel/timer.c:441:
+struct timespec ytime __attribute__ ((aligned (16)));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2658: FILE: kernel/timer.c:1036:
+ * by a signal which is not delivered to the process.  This is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2661: FILE: kernel/timer.c:1039:
+extern int do_clock_nanosleep(clockid_t which_clock, int flags, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2661: FILE: kernel/timer.c:1039:
+extern int do_clock_nanosleep(clockid_t which_clock, int flags, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2662: FILE: kernel/timer.c:1040:
+extern int do_clock_nanosleep(clockid_t which_clock, int flags, 
+const struct timespec *rqtp, struct timespec *rmtp, int from_nanosleep);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2667: FILE: kernel/timer.c:1045:
+	return(do_clock_nanosleep(CLOCK_REALTIME, 0, rqtp, rmtp, 1));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2669: FILE: kernel/timer.c:1047:
+#else $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 121 errors, 67 warnings, 122 checks, 2415 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
