WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
diff -urp -X dontdiff linux-2.4.27-pre5/drivers/usb/serial/usbserial.c linux-2.4.27-pre5-usb/drivers/usb/serial/usbserial.c

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#58: FILE: drivers/usb/serial/usbserial.c:361:
+};
+static spinlock_t post_lock = SPIN_LOCK_UNLOCKED;	/* Also covers ->ref */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#65: FILE: drivers/usb/serial/usbserial.c:368:
+static int __serial_write (struct usb_serial_port *port, int from_user, const unsigned char *buf, int count);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#65: FILE: drivers/usb/serial/usbserial.c:368:
+static int __serial_write (struct usb_serial_port *port, int from_user, const unsigned char *buf, int count);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: drivers/usb/serial/usbserial.c:371:
+static int  serial_post_job(struct usb_serial_port *port, int from_user,
+    int gfp, const unsigned char *buf, int count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: drivers/usb/serial/usbserial.c:371:
+    int gfp, const unsigned char *buf, int count);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: drivers/usb/serial/usbserial.c:373:
+static int  serial_post_one(struct usb_serial_port *port, int from_user,
+    int gfp, const unsigned char *buf, int count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: drivers/usb/serial/usbserial.c:373:
+    int gfp, const unsigned char *buf, int count);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#110: FILE: drivers/usb/serial/usbserial.c:502:
+			dbg("%s - port %d busy", __FUNCTION__, port->number);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#118: FILE: drivers/usb/serial/usbserial.c:510:
+		dbg("%s - port %d len %d backlog %d", __FUNCTION__,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "port->tty"
#120: FILE: drivers/usb/serial/usbserial.c:512:
+		if (port->tty != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'Normall' may be misspelled - perhaps 'Normal'?
#146: FILE: drivers/usb/serial/usbserial.c:663:
+		 * Normall callback mechanism wakes it up just fine.
 		   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#150: FILE: drivers/usb/serial/usbserial.c:667:
+		up (&port->sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#153: FILE: drivers/usb/serial/usbserial.c:670:
+		down (&port->sem);

WARNING:SPACING: space prohibited before semicolon
#154: FILE: drivers/usb/serial/usbserial.c:671:
+		if (!tty->driver_data) /* woopsie, disconnect, now what */ ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#154: FILE: drivers/usb/serial/usbserial.c:671:
+		if (!tty->driver_data) /* woopsie, disconnect, now what */ ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#163: FILE: drivers/usb/serial/usbserial.c:679:
+static int __serial_write (struct usb_serial_port *port, int from_user, const unsigned char *buf, int count)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#163: FILE: drivers/usb/serial/usbserial.c:679:
+static int __serial_write (struct usb_serial_port *port, int from_user, const unsigned char *buf, int count)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#185: FILE: drivers/usb/serial/usbserial.c:704:
+static int serial_write (struct tty_struct * tty, int from_user, const unsigned char *buf, int count)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#185: FILE: drivers/usb/serial/usbserial.c:704:
+static int serial_write (struct tty_struct * tty, int from_user, const unsigned char *buf, int count)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#185: FILE: drivers/usb/serial/usbserial.c:704:
+static int serial_write (struct tty_struct * tty, int from_user, const unsigned char *buf, int count)

CHECK:SPACING: No space is necessary after a cast
#187: FILE: drivers/usb/serial/usbserial.c:706:
+	struct usb_serial_port *port = (struct usb_serial_port *) tty->driver_data;

WARNING:TYPO_SPELLING: 'possiblity' may be misspelled - perhaps 'possibility'?
#192: FILE: drivers/usb/serial/usbserial.c:711:
+		 * Run post_list to reduce a possiblity of reordered writes.
 		                             ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: drivers/usb/serial/usbserial.c:748:
+static int serial_post_job(struct usb_serial_port *port, int from_user,
+    int gfp, const unsigned char *buf, int count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/usb/serial/usbserial.c:748:
+    int gfp, const unsigned char *buf, int count)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!port"
#234: FILE: drivers/usb/serial/usbserial.c:753:
+	if (port == NULL)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#238: FILE: drivers/usb/serial/usbserial.c:757:
+		static int rate = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:TYPO_SPELLING: 'ususal' may be misspelled - perhaps 'usual'?
#241: FILE: drivers/usb/serial/usbserial.c:760:
+		 * It's a ususal thing on serial to lose characters, isn't it?
 		          ^^^^^^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#247: FILE: drivers/usb/serial/usbserial.c:766:
+			    from_user? "user": "kernel");
 			             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#247: FILE: drivers/usb/serial/usbserial.c:766:
+			    from_user? "user": "kernel");
 			                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: drivers/usb/serial/usbserial.c:791:
+static int serial_post_one(struct usb_serial_port *port, int from_user,
+    int gfp, const unsigned char *buf, int count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: drivers/usb/serial/usbserial.c:791:
+    int gfp, const unsigned char *buf, int count)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#274: FILE: drivers/usb/serial/usbserial.c:793:
+	struct usb_serial *serial = get_usb_serial (port, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#274: FILE: drivers/usb/serial/usbserial.c:793:
+	struct usb_serial *serial = get_usb_serial (port, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#278: FILE: drivers/usb/serial/usbserial.c:797:
+	dbg("%s - port %d user %d count %d", __FUNCTION__, port->number, from_user, count);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*job)...) over kmalloc(sizeof(struct usb_serial_post_job)...)
#280: FILE: drivers/usb/serial/usbserial.c:799:
+	job = kmalloc(sizeof(struct usb_serial_post_job), gfp);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!job"
#281: FILE: drivers/usb/serial/usbserial.c:800:
+	if (job == NULL)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#319: FILE: drivers/usb/serial/usbserial.c:840:
+		dbg("%s - returns %d", __FUNCTION__, retval);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#334: FILE: drivers/usb/serial/usbserial.c:876:
+		dbg("%s - port %d: not open", __FUNCTION__, port->number);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#351: FILE: drivers/usb/serial/usbserial.c:1142:
+		err("%s - port %d: write request of %d bytes", __FUNCTION__,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#353: FILE: drivers/usb/serial/usbserial.c:1144:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#362: FILE: drivers/usb/serial/usbserial.c:1151:
+			info("%s - already writing", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#377: FILE: drivers/usb/serial/usbserial.c:1163:
+		dbg("%s - port %d [%d]", __FUNCTION__, port->number, count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#390: FILE: drivers/usb/serial/usbserial.c:1177:
+		if (result) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: drivers/usb/serial/usbserial.c:1179:
+			err("%s - port %d: failed submitting write urb (%d)",
+			     __FUNCTION__, port->number, result);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#392: FILE: drivers/usb/serial/usbserial.c:1179:
+			     __FUNCTION__, port->number, result);

CHECK:BRACES: Unbalanced braces around else statement
#399: FILE: drivers/usb/serial/usbserial.c:1186:
+		} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#416: FILE: drivers/usb/serial/usbserial.c:1206:
+	dbg("%s - port %d, returns %d", __FUNCTION__, port->number, room);

WARNING:MEMORY_BARRIER: memory barrier without comment
#437: FILE: drivers/usb/serial/usbserial.c:1285:
+	wmb();

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#441: FILE: drivers/usb/serial/usbserial.c:1288:
+		err("%s - null serial pointer, exiting", __FUNCTION__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#509: FILE: drivers/usb/serial/usbserial.c:1603:
+	if (serial->ref != 1) {
+		err("bug in component startup: ref %d\n", serial->ref);
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275281.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 32 warnings, 13 checks, 502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000275281.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
