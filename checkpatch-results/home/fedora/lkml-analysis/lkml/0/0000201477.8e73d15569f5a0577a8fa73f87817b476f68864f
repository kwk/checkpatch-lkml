WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#36: FILE: arch/um/Kconfig.debug:43:
+config SYSCALL_DEBUG
+	bool "Enable system call debugging"
+	default N
+	depends on DEBUG_INFO
+	help
+	This adds some system debugging to UML, including keeping a ring buffer
+	with recent system calls and some global and per-task statistics.
+
+	If unsure, say N
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: arch/um/kernel/skas/syscall_user.c:19:
+  ^Iint index;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#117: FILE: arch/um/kernel/skas/syscall_user.c:19:
+  ^Iint index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/um/kernel/skas/syscall_user.c:19:
+  ^Iint index;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: arch/um/kernel/skas/syscall_user.c:20:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: arch/um/kernel/skas/syscall_user.c:20:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: arch/um/kernel/skas/syscall_user.c:21:
+  ^Iindex = record_syscall_start(UPT_SYSCALL_NR(regs));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: arch/um/kernel/skas/syscall_user.c:21:
+  ^Iindex = record_syscall_start(UPT_SYSCALL_NR(regs));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/um/kernel/skas/syscall_user.c:21:
+  ^Iindex = record_syscall_start(UPT_SYSCALL_NR(regs));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: arch/um/kernel/skas/syscall_user.c:31:
+  ^Irecord_syscall_end(index, result);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: arch/um/kernel/skas/syscall_user.c:31:
+  ^Irecord_syscall_end(index, result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: arch/um/kernel/skas/syscall_user.c:31:
+  ^Irecord_syscall_end(index, result);$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#144: FILE: arch/um/kernel/syscall_kern.c:159:
+static int syscall_index = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: arch/um/kernel/syscall_kern.c:167:
+	if(++syscall_index == limit)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#155: FILE: arch/um/kernel/syscall_kern.c:170:
+	return(ret);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: arch/um/kernel/syscall_user.c:49:
+/* $

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(syscall_record)
#191: FILE: arch/um/kernel/syscall_user.c:71:
+	max = sizeof(syscall_record)/sizeof(syscall_record[0]);

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#191: FILE: arch/um/kernel/syscall_user.c:71:
+	max = sizeof(syscall_record)/sizeof(syscall_record[0]);
 	                            ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#198: FILE: arch/um/kernel/syscall_user.c:78:
+	return(index);

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: arch/um/kernel/tt/syscall_user.c:35:
+  ^Iindex = record_syscall_start(syscall);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: arch/um/kernel/tt/syscall_user.c:35:
+  ^Iindex = record_syscall_start(syscall);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: arch/um/kernel/tt/syscall_user.c:35:
+  ^Iindex = record_syscall_start(syscall);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: arch/um/kernel/tt/syscall_user.c:49:
+  ^Irecord_syscall_end(index, result);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: arch/um/kernel/tt/syscall_user.c:49:
+  ^Irecord_syscall_end(index, result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: arch/um/kernel/tt/syscall_user.c:49:
+  ^Irecord_syscall_end(index, result);$

ERROR:SPACING: space required before the open brace '{'
#293: FILE: arch/um/kernel/tt/tracer.c:284:
+			if(signal_index[proc_id] == 1024){

ERROR:SPACING: space required before the open parenthesis '('
#293: FILE: arch/um/kernel/tt/tracer.c:284:
+			if(signal_index[proc_id] == 1024){

CHECK:BRACES: braces {} should be used on all arms of this statement
#293: FILE: arch/um/kernel/tt/tracer.c:284:
+			if(signal_index[proc_id] == 1024){
[...]
+			else last_index = signal_index[proc_id] - 1;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#297: FILE: arch/um/kernel/tt/tracer.c:288:
+			else last_index = signal_index[proc_id] - 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#297: FILE: arch/um/kernel/tt/tracer.c:288:
+			}
+			else last_index = signal_index[proc_id] - 1;

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: arch/um/kernel/tt/tracer.c:289:
+^I^I^Iif(((sig == SIGPROF) || (sig == SIGVTALRM) || $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGPROF'
#298: FILE: arch/um/kernel/tt/tracer.c:289:
+			if(((sig == SIGPROF) || (sig == SIGVTALRM) || 
+			    (sig == SIGALRM)) &&
+			   (signal_record[proc_id][last_index].signal == sig)&&
+			   (signal_record[proc_id][last_index].pid == pid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGVTALRM'
#298: FILE: arch/um/kernel/tt/tracer.c:289:
+			if(((sig == SIGPROF) || (sig == SIGVTALRM) || 
+			    (sig == SIGALRM)) &&
+			   (signal_record[proc_id][last_index].signal == sig)&&
+			   (signal_record[proc_id][last_index].pid == pid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sig == SIGALRM'
#298: FILE: arch/um/kernel/tt/tracer.c:289:
+			if(((sig == SIGPROF) || (sig == SIGVTALRM) || 
+			    (sig == SIGALRM)) &&
+			   (signal_record[proc_id][last_index].signal == sig)&&
+			   (signal_record[proc_id][last_index].pid == pid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'signal_record[proc_id][last_index].signal == sig'
#298: FILE: arch/um/kernel/tt/tracer.c:289:
+			if(((sig == SIGPROF) || (sig == SIGVTALRM) || 
+			    (sig == SIGALRM)) &&
+			   (signal_record[proc_id][last_index].signal == sig)&&
+			   (signal_record[proc_id][last_index].pid == pid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'signal_record[proc_id][last_index].pid == pid'
#298: FILE: arch/um/kernel/tt/tracer.c:289:
+			if(((sig == SIGPROF) || (sig == SIGVTALRM) || 
+			    (sig == SIGALRM)) &&
+			   (signal_record[proc_id][last_index].signal == sig)&&
+			   (signal_record[proc_id][last_index].pid == pid))

ERROR:SPACING: space required before the open parenthesis '('
#298: FILE: arch/um/kernel/tt/tracer.c:289:
+			if(((sig == SIGPROF) || (sig == SIGVTALRM) || 

ERROR:SPACING: spaces required around that '&&' (ctx:VxE)
#300: FILE: arch/um/kernel/tt/tracer.c:291:
+			   (signal_record[proc_id][last_index].signal == sig)&&
 			                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: arch/um/kernel/tt/tracer.c:299:
+#endif^I^I^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201477.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 13 warnings, 7 checks, 231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201477.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
