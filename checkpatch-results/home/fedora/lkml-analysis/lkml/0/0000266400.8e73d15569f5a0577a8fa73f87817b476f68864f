WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: linux/plist.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: linux/plist.h:11:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: linux/plist.h:68:
+#define plist_INIT(p,__prio)				\
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#108: FILE: linux/plist.h:68:
+#define plist_INIT(p,__prio)				\
+{							\
+	.prio = __prio,					\
+	.dp_node = LIST_HEAD_INIT((p)->dp_node),	\
+	.sp_node = LIST_HEAD_INIT((p)->sp_node),	\
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: linux/plist.h:77:
+void plist_init (struct plist *pl, int prio)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: linux/plist.h:80:
+	INIT_LIST_HEAD (&pl->dp_node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#121: FILE: linux/plist.h:81:
+	INIT_LIST_HEAD (&pl->sp_node);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: linux/plist.h:89:
+struct plist * plist_first (struct plist *plist)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: linux/plist.h:89:
+struct plist * plist_first (struct plist *plist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#131: FILE: linux/plist.h:91:
+	return list_entry (plist->dp_node.next, struct plist, dp_node);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#136: FILE: linux/plist.h:96:
+unsigned plist_empty (const struct plist *plist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#136: FILE: linux/plist.h:96:
+unsigned plist_empty (const struct plist *plist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#138: FILE: linux/plist.h:98:
+	return list_empty (&plist->dp_node);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: linux/plist.h:104:
+ * $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#148: FILE: linux/plist.h:108:
+unsigned __plist_update_prio (struct plist *plist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#148: FILE: linux/plist.h:108:
+unsigned __plist_update_prio (struct plist *plist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#150: FILE: linux/plist.h:110:
+	int prio = plist_first (plist)->prio;

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: linux/plist.h:111:
+	int prio = plist_first (plist)->prio;
+	if (plist->prio == prio)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#158: FILE: linux/plist.h:118:
+unsigned plist_update_prio (struct plist *plist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#158: FILE: linux/plist.h:118:
+unsigned plist_update_prio (struct plist *plist)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#162: FILE: linux/plist.h:122:
+	plist->prio = plist_empty (plist)? INT_MAX : plist_first (plist)->prio;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#162: FILE: linux/plist.h:122:
+	plist->prio = plist_empty (plist)? INT_MAX : plist_first (plist)->prio;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#162: FILE: linux/plist.h:122:
+	plist->prio = plist_empty (plist)? INT_MAX : plist_first (plist)->prio;
 	                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#173: FILE: linux/plist.h:133:
+void __plist_add_sorted (struct plist *plist, struct plist *pl)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: linux/plist.h:138:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: linux/plist.h:140:
+		list_for_each (itr, &plist->dp_node) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#181: FILE: linux/plist.h:141:
+			itr_pl = list_entry (itr, struct plist, dp_node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#191: FILE: linux/plist.h:151:
+	itr_pl = container_of (plist->dp_node.prev, struct plist, dp_node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#192: FILE: linux/plist.h:152:
+	if (!list_empty (&plist->dp_node) && itr_pl->prio == INT_MAX)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&plist->dp_node'
#192: FILE: linux/plist.h:152:
+	if (!list_empty (&plist->dp_node) && itr_pl->prio == INT_MAX)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#197: FILE: linux/plist.h:157:
+	list_add_tail (&pl->dp_node, &itr_pl->dp_node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#198: FILE: linux/plist.h:158:
+	INIT_LIST_HEAD (&pl->sp_node);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: linux/plist.h:160:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#202: FILE: linux/plist.h:162:
+	list_add_tail (&pl->sp_node, &itr_pl->sp_node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#203: FILE: linux/plist.h:163:
+	INIT_LIST_HEAD (&pl->dp_node);

WARNING:RETURN_VOID: void function return statements are not generally useful
#205: FILE: linux/plist.h:165:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#207: FILE: linux/plist.h:167:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: linux/plist.h:170:
+ * otherwise. $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#213: FILE: linux/plist.h:173:
+unsigned plist_add (struct plist *plist, struct plist *pl)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#213: FILE: linux/plist.h:173:
+unsigned plist_add (struct plist *plist, struct plist *pl)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: linux/plist.h:175:
+	__plist_add_sorted (plist, pl);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: linux/plist.h:184:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#227: FILE: linux/plist.h:187:
+void __plist_del (struct plist *pl)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: linux/plist.h:190:
+^Iif (list_empty (&pl->dp_node))  ^I/* SP-node, not head */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#230: FILE: linux/plist.h:190:
+	struct list_head *victim;
+	if (list_empty (&pl->dp_node))  	/* SP-node, not head */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#230: FILE: linux/plist.h:190:
+	if (list_empty (&pl->dp_node))  	/* SP-node, not head */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&pl->dp_node'
#230: FILE: linux/plist.h:190:
+	if (list_empty (&pl->dp_node))  	/* SP-node, not head */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: linux/plist.h:192:
+^Ielse if (list_empty (&pl->sp_node)) ^I/* DP-node, empty SP list */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#232: FILE: linux/plist.h:192:
+	else if (list_empty (&pl->sp_node)) 	/* DP-node, empty SP list */

CHECK:BRACES: Unbalanced braces around else statement
#234: FILE: linux/plist.h:194:
+	else {					/* SP list head, not empty */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#235: FILE: linux/plist.h:195:
+		struct plist *pl_new = container_of (pl->sp_node.next,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#238: FILE: linux/plist.h:198:
+		list_replace (&pl_new->dp_node, &pl->dp_node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#240: FILE: linux/plist.h:200:
+	list_del_init (victim);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: linux/plist.h:203:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#249: FILE: linux/plist.h:209:
+unsigned plist_del (struct plist *plist, struct plist *pl)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#249: FILE: linux/plist.h:209:
+unsigned plist_del (struct plist *plist, struct plist *pl)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#251: FILE: linux/plist.h:211:
+	__plist_del (pl);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: linux/plist.h:212:
+	return plist_update_prio (plist);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#257: FILE: linux/plist.h:217:
+int plist_prio (struct plist *pl)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#264: FILE: linux/plist.h:224:
+void __plist_chprio (struct plist *pl, int new_prio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#274: FILE: linux/plist.h:234:
+unsigned plist_chprio (struct plist *plist, struct plist *pl, int new_prio)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#274: FILE: linux/plist.h:234:
+unsigned plist_chprio (struct plist *plist, struct plist *pl, int new_prio)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#278: FILE: linux/plist.h:238:
+	__plist_chprio (pl, new_prio);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#279: FILE: linux/plist.h:239:
+	__plist_del (pl);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#280: FILE: linux/plist.h:240:
+	__plist_add_sorted (plist, pl);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#281: FILE: linux/plist.h:241:
+	return __plist_update_prio (plist);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#284: FILE: linux/plist.h:244:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: linux/plist.h:246:
+struct plist * __plist_dp_next (struct plist *node_dp) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: linux/plist.h:246:
+struct plist * __plist_dp_next (struct plist *node_dp) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#286: FILE: linux/plist.h:246:
+struct plist * __plist_dp_next (struct plist *node_dp) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#288: FILE: linux/plist.h:248:
+	return container_of (node_dp->dp_node.next, struct plist, dp_node);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#291: FILE: linux/plist.h:251:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#292: FILE: linux/plist.h:252:
+extern void __plist_splice (struct plist *dst, struct plist *src);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: linux/plist.h:252:
+extern void __plist_splice (struct plist *dst, struct plist *src);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#296: FILE: linux/plist.h:256:
+unsigned plist_splice_init (struct plist *dst, struct plist *src)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#296: FILE: linux/plist.h:256:
+unsigned plist_splice_init (struct plist *dst, struct plist *src)

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: linux/plist.h:259:
+	int old_prio;
+	if (plist_empty (src))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#299: FILE: linux/plist.h:259:
+	if (plist_empty (src))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#302: FILE: linux/plist.h:262:
+	__plist_splice (dst, src);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#303: FILE: linux/plist.h:263:
+	plist_init (src, INT_MAX);

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#323: FILE: plist.c:1:
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#342: FILE: plist.c:20:
+void __plist_splice (struct plist *dst, struct plist *src)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#345: FILE: plist.c:23:
+#if 1

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: plist.c:29:
+	struct plist *itr;
+	while (!plist_empty (src)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#351: FILE: plist.c:29:
+	while (!plist_empty (src)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: plist.c:30:
+		itr = plist_first (src);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: plist.c:31:
+		plist_del (src, itr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: plist.c:32:
+		plist_add (dst, itr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: plist.c:39:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: plist.c:41:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#364: FILE: plist.c:42:
+	if (plist_empty (src))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#367: FILE: plist.c:45:
+	src_dp_itr = __plist_dp_next (src);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#368: FILE: plist.c:46:
+	dst_dp_itr = __plist_dp_next (dst);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: plist.c:47:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#373: FILE: plist.c:51:
+			src_dp_next = __plist_dp_next (src_dp_itr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#374: FILE: plist.c:52:
+			list_del_init (&src_dp_itr->dp_node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#375: FILE: plist.c:53:
+			list_add_tail (&src_dp_itr->dp_node,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#384: FILE: plist.c:62:
+		 * itself, so we have to do it manually */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: plist.c:67:
+			src_dp_next = __plist_dp_next (src_dp_itr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#390: FILE: plist.c:68:
+			list_del_init (&dst_dp_itr->dp_node);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: plist.c:69:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: plist.c:79:
+^I^I^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: plist.c:85:
+		dst_dp_itr = __plist_dp_next (dst_dp_itr);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#409: FILE: plist.c:87:
+		 * remainder of the source list */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: plist.c:89:
+			__list_splice (src_dp_itr->dp_node.prev,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#416: FILE: plist.c:94:
+	dst->prio = __plist_dp_next (dst)->prio;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 84 warnings, 11 checks, 372 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266400.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
