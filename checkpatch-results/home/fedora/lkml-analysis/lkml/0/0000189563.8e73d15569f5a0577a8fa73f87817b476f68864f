WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
diff -rNu linux-2.6.11.2.orig/arch/x86_64/crypto/aes.c linux-2.6.11.2/arch/x86_64/crypto/aes.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#49: FILE: arch/x86_64/crypto/aes.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: arch/x86_64/crypto/aes.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#100: FILE: arch/x86_64/crypto/aes.c:52:
+/* Some changes from the Gladman version:
+    s/RIJNDAEL(e_key)/E_KEY/g

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: arch/x86_64/crypto/aes.c:69:
+ * #define byte(x, nr) ((unsigned char)((x) >> (nr*8))) $

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#119: FILE: arch/x86_64/crypto/aes.c:71:
+inline static u8

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#120: FILE: arch/x86_64/crypto/aes.c:72:
+byte(const u32 x, const unsigned n)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#158: FILE: arch/x86_64/crypto/aes.c:110:
+f_mult (u8 a, u8 b)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: arch/x86_64/crypto/aes.c:117:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)
                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#165: FILE: arch/x86_64/crypto/aes.c:117:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#165: FILE: arch/x86_64/crypto/aes.c:117:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#165: FILE: arch/x86_64/crypto/aes.c:117:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#165: FILE: arch/x86_64/crypto/aes.c:117:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#167: FILE: arch/x86_64/crypto/aes.c:119:
+#define ls_box(x)				\
+    ( aes_fl_tab[0][byte(x, 0)] ^		\
+      aes_fl_tab[1][byte(x, 1)] ^		\
+      aes_fl_tab[2][byte(x, 2)] ^		\
+      aes_fl_tab[3][byte(x, 3)] )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/x86_64/crypto/aes.c:120:
+    ( aes_fl_tab[0][byte(x, 0)] ^^I^I\$

ERROR:SPACING: space prohibited after that open parenthesis '('
#168: FILE: arch/x86_64/crypto/aes.c:120:
+    ( aes_fl_tab[0][byte(x, 0)] ^		\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/x86_64/crypto/aes.c:121:
+      aes_fl_tab[1][byte(x, 1)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: arch/x86_64/crypto/aes.c:122:
+      aes_fl_tab[2][byte(x, 2)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: arch/x86_64/crypto/aes.c:123:
+      aes_fl_tab[3][byte(x, 3)] )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#171: FILE: arch/x86_64/crypto/aes.c:123:
+      aes_fl_tab[3][byte(x, 3)] )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#174: FILE: arch/x86_64/crypto/aes.c:126:
+gen_tabs (void)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#180: FILE: arch/x86_64/crypto/aes.c:132:
+	/* log and power tables for GF(2**8) finite field with
+	   0x011b as modular polynomial - the simplest primitive

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: arch/x86_64/crypto/aes.c:133:
+	   root is 0x03, used here to generate the tables */

CHECK:SPACING: No space is necessary after a cast
#184: FILE: arch/x86_64/crypto/aes.c:136:
+		pow_tab[i] = (u8) p;

CHECK:SPACING: No space is necessary after a cast
#185: FILE: arch/x86_64/crypto/aes.c:137:
+		log_tab[p] = (u8) i;

CHECK:SPACING: No space is necessary after a cast
#203: FILE: arch/x86_64/crypto/aes.c:155:
+		isb_tab[p] = (u8) i;

CHECK:SPACING: No space is necessary after a cast
#215: FILE: arch/x86_64/crypto/aes.c:167:
+		t = ((u32) ff_mult (2, p)) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#215: FILE: arch/x86_64/crypto/aes.c:167:
+		t = ((u32) ff_mult (2, p)) |

CHECK:SPACING: No space is necessary after a cast
#216: FILE: arch/x86_64/crypto/aes.c:168:
+		    ((u32) p << 8) |

CHECK:SPACING: No space is necessary after a cast
#217: FILE: arch/x86_64/crypto/aes.c:169:
+		    ((u32) p << 16) | ((u32) ff_mult (3, p) << 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#217: FILE: arch/x86_64/crypto/aes.c:169:
+		    ((u32) p << 16) | ((u32) ff_mult (3, p) << 24);

CHECK:SPACING: No space is necessary after a cast
#232: FILE: arch/x86_64/crypto/aes.c:184:
+		t = ((u32) ff_mult (14, p)) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#232: FILE: arch/x86_64/crypto/aes.c:184:
+		t = ((u32) ff_mult (14, p)) |

CHECK:SPACING: No space is necessary after a cast
#233: FILE: arch/x86_64/crypto/aes.c:185:
+		    ((u32) ff_mult (9, p) << 8) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#233: FILE: arch/x86_64/crypto/aes.c:185:
+		    ((u32) ff_mult (9, p) << 8) |

CHECK:SPACING: No space is necessary after a cast
#234: FILE: arch/x86_64/crypto/aes.c:186:
+		    ((u32) ff_mult (13, p) << 16) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#234: FILE: arch/x86_64/crypto/aes.c:186:
+		    ((u32) ff_mult (13, p) << 16) |

CHECK:SPACING: No space is necessary after a cast
#235: FILE: arch/x86_64/crypto/aes.c:187:
+		    ((u32) ff_mult (11, p) << 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#235: FILE: arch/x86_64/crypto/aes.c:187:
+		    ((u32) ff_mult (11, p) << 24);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#244: FILE: arch/x86_64/crypto/aes.c:196:
+#define star_x(x) (((x) & 0x7f7f7f7f) << 1) ^ ((((x) & 0x80808080) >> 7) * 0x1b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#244: FILE: arch/x86_64/crypto/aes.c:196:
+#define star_x(x) (((x) & 0x7f7f7f7f) << 1) ^ ((((x) & 0x80808080) >> 7) * 0x1b)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: arch/x86_64/crypto/aes.c:198:
+#define imix_col(y,x)       \
                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#246: FILE: arch/x86_64/crypto/aes.c:198:
+#define imix_col(y,x)       \
+    u   = star_x(x);        \
+    v   = star_x(u);        \
+    w   = star_x(v);        \
+    t   = w ^ (x);          \
+   (y)  = u ^ v ^ w;        \
+   (y) ^= ror32(u ^ t,  8) ^ \
+          ror32(v ^ t, 16) ^ \
+          ror32(t,24)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#246: FILE: arch/x86_64/crypto/aes.c:198:
+#define imix_col(y,x)       \
+    u   = star_x(x);        \
+    v   = star_x(u);        \
+    w   = star_x(v);        \
+    t   = w ^ (x);          \
+   (y)  = u ^ v ^ w;        \
+   (y) ^= ror32(u ^ t,  8) ^ \
+          ror32(v ^ t, 16) ^ \
+          ror32(t,24)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#246: FILE: arch/x86_64/crypto/aes.c:198:
+#define imix_col(y,x)       \
+    u   = star_x(x);        \
+    v   = star_x(u);        \
+    w   = star_x(v);        \
+    t   = w ^ (x);          \
+   (y)  = u ^ v ^ w;        \
+   (y) ^= ror32(u ^ t,  8) ^ \
+          ror32(v ^ t, 16) ^ \
+          ror32(t,24)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: arch/x86_64/crypto/aes.c:199:
+    u   = star_x(x);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/x86_64/crypto/aes.c:200:
+    v   = star_x(u);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: arch/x86_64/crypto/aes.c:201:
+    w   = star_x(v);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: arch/x86_64/crypto/aes.c:202:
+    t   = w ^ (x);          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: arch/x86_64/crypto/aes.c:203:
+   (y)  = u ^ v ^ w;        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: arch/x86_64/crypto/aes.c:204:
+   (y) ^= ror32(u ^ t,  8) ^ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: arch/x86_64/crypto/aes.c:205:
+          ror32(v ^ t, 16) ^ \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: arch/x86_64/crypto/aes.c:205:
+          ror32(v ^ t, 16) ^ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: arch/x86_64/crypto/aes.c:206:
+          ror32(t,24)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: arch/x86_64/crypto/aes.c:206:
+          ror32(t,24)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#254: FILE: arch/x86_64/crypto/aes.c:206:
+          ror32(t,24)
                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#258: FILE: arch/x86_64/crypto/aes.c:210:
+#define loop4(i)                                    \
+{   t = ror32(t,  8); t = ls_box(t) ^ rco_tab[i];    \
+    t ^= E_KEY[4 * i];     E_KEY[4 * i + 4] = t;    \
+    t ^= E_KEY[4 * i + 1]; E_KEY[4 * i + 5] = t;    \
+    t ^= E_KEY[4 * i + 2]; E_KEY[4 * i + 6] = t;    \
+    t ^= E_KEY[4 * i + 3]; E_KEY[4 * i + 7] = t;    \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: arch/x86_64/crypto/aes.c:212:
+    t ^= E_KEY[4 * i];     E_KEY[4 * i + 4] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: arch/x86_64/crypto/aes.c:213:
+    t ^= E_KEY[4 * i + 1]; E_KEY[4 * i + 5] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: arch/x86_64/crypto/aes.c:214:
+    t ^= E_KEY[4 * i + 2]; E_KEY[4 * i + 6] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/x86_64/crypto/aes.c:215:
+    t ^= E_KEY[4 * i + 3]; E_KEY[4 * i + 7] = t;    \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#266: FILE: arch/x86_64/crypto/aes.c:218:
+#define loop6(i)                                    \
+{   t = ror32(t,  8); t = ls_box(t) ^ rco_tab[i];    \
+    t ^= E_KEY[6 * i];     E_KEY[6 * i + 6] = t;    \
+    t ^= E_KEY[6 * i + 1]; E_KEY[6 * i + 7] = t;    \
+    t ^= E_KEY[6 * i + 2]; E_KEY[6 * i + 8] = t;    \
+    t ^= E_KEY[6 * i + 3]; E_KEY[6 * i + 9] = t;    \
+    t ^= E_KEY[6 * i + 4]; E_KEY[6 * i + 10] = t;   \
+    t ^= E_KEY[6 * i + 5]; E_KEY[6 * i + 11] = t;   \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: arch/x86_64/crypto/aes.c:220:
+    t ^= E_KEY[6 * i];     E_KEY[6 * i + 6] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: arch/x86_64/crypto/aes.c:221:
+    t ^= E_KEY[6 * i + 1]; E_KEY[6 * i + 7] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: arch/x86_64/crypto/aes.c:222:
+    t ^= E_KEY[6 * i + 2]; E_KEY[6 * i + 8] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: arch/x86_64/crypto/aes.c:223:
+    t ^= E_KEY[6 * i + 3]; E_KEY[6 * i + 9] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: arch/x86_64/crypto/aes.c:224:
+    t ^= E_KEY[6 * i + 4]; E_KEY[6 * i + 10] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/x86_64/crypto/aes.c:225:
+    t ^= E_KEY[6 * i + 5]; E_KEY[6 * i + 11] = t;   \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#276: FILE: arch/x86_64/crypto/aes.c:228:
+#define loop8(i)                                    \
+{   t = ror32(t,  8); ; t = ls_box(t) ^ rco_tab[i];  \
+    t ^= E_KEY[8 * i];     E_KEY[8 * i + 8] = t;    \
+    t ^= E_KEY[8 * i + 1]; E_KEY[8 * i + 9] = t;    \
+    t ^= E_KEY[8 * i + 2]; E_KEY[8 * i + 10] = t;   \
+    t ^= E_KEY[8 * i + 3]; E_KEY[8 * i + 11] = t;   \
+    t  = E_KEY[8 * i + 4] ^ ls_box(t);    \
+    E_KEY[8 * i + 12] = t;                \
+    t ^= E_KEY[8 * i + 5]; E_KEY[8 * i + 13] = t;   \
+    t ^= E_KEY[8 * i + 6]; E_KEY[8 * i + 14] = t;   \
+    t ^= E_KEY[8 * i + 7]; E_KEY[8 * i + 15] = t;   \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: arch/x86_64/crypto/aes.c:230:
+    t ^= E_KEY[8 * i];     E_KEY[8 * i + 8] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: arch/x86_64/crypto/aes.c:231:
+    t ^= E_KEY[8 * i + 1]; E_KEY[8 * i + 9] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: arch/x86_64/crypto/aes.c:232:
+    t ^= E_KEY[8 * i + 2]; E_KEY[8 * i + 10] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: arch/x86_64/crypto/aes.c:233:
+    t ^= E_KEY[8 * i + 3]; E_KEY[8 * i + 11] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: arch/x86_64/crypto/aes.c:234:
+    t  = E_KEY[8 * i + 4] ^ ls_box(t);    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: arch/x86_64/crypto/aes.c:235:
+    E_KEY[8 * i + 12] = t;                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: arch/x86_64/crypto/aes.c:236:
+    t ^= E_KEY[8 * i + 5]; E_KEY[8 * i + 13] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: arch/x86_64/crypto/aes.c:237:
+    t ^= E_KEY[8 * i + 6]; E_KEY[8 * i + 14] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: arch/x86_64/crypto/aes.c:238:
+    t ^= E_KEY[8 * i + 7]; E_KEY[8 * i + 15] = t;   \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#302: FILE: arch/x86_64/crypto/aes.c:254:
+	D_KEY[key_len + 24] = E_KEY[0] = u32_in (in_key);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#302: FILE: arch/x86_64/crypto/aes.c:254:
+	D_KEY[key_len + 24] = E_KEY[0] = u32_in (in_key);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#303: FILE: arch/x86_64/crypto/aes.c:255:
+	D_KEY[key_len + 25] = E_KEY[1] = u32_in (in_key + 4);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#303: FILE: arch/x86_64/crypto/aes.c:255:
+	D_KEY[key_len + 25] = E_KEY[1] = u32_in (in_key + 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#304: FILE: arch/x86_64/crypto/aes.c:256:
+	D_KEY[key_len + 26] = E_KEY[2] = u32_in (in_key + 8);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: arch/x86_64/crypto/aes.c:256:
+	D_KEY[key_len + 26] = E_KEY[2] = u32_in (in_key + 8);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#305: FILE: arch/x86_64/crypto/aes.c:257:
+	D_KEY[key_len + 27] = E_KEY[3] = u32_in (in_key + 12);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#305: FILE: arch/x86_64/crypto/aes.c:257:
+	D_KEY[key_len + 27] = E_KEY[3] = u32_in (in_key + 12);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: arch/x86_64/crypto/aes.c:263:
+			loop4 (i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: arch/x86_64/crypto/aes.c:267:
+		E_KEY[4] = u32_in (in_key + 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#316: FILE: arch/x86_64/crypto/aes.c:268:
+		t = E_KEY[5] = u32_in (in_key + 20);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#316: FILE: arch/x86_64/crypto/aes.c:268:
+		t = E_KEY[5] = u32_in (in_key + 20);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#318: FILE: arch/x86_64/crypto/aes.c:270:
+			loop6 (i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#322: FILE: arch/x86_64/crypto/aes.c:274:
+		E_KEY[4] = u32_in (in_key + 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#323: FILE: arch/x86_64/crypto/aes.c:275:
+		E_KEY[5] = u32_in (in_key + 20);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#324: FILE: arch/x86_64/crypto/aes.c:276:
+		E_KEY[6] = u32_in (in_key + 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#325: FILE: arch/x86_64/crypto/aes.c:277:
+		t = E_KEY[7] = u32_in (in_key + 28);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#325: FILE: arch/x86_64/crypto/aes.c:277:
+		t = E_KEY[7] = u32_in (in_key + 28);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#327: FILE: arch/x86_64/crypto/aes.c:279:
+			loop8 (i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#338: FILE: arch/x86_64/crypto/aes.c:290:
+		imix_col (D_KEY[j], E_KEY[i]);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#345: FILE: arch/x86_64/crypto/aes.c:297:
+extern void aes_decrypt(void *ctx_arg, u8 *out, const u8 *in);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: arch/x86_64/crypto/aes.c:310:
+^I^I^I.cia_setkey^I   ^I= ^Iaes_set_key,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#359: FILE: arch/x86_64/crypto/aes.c:311:
+^I^I^I.cia_encrypt^I ^I=^Iaes_encrypt,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#360: FILE: arch/x86_64/crypto/aes.c:312:
+^I^I^I.cia_decrypt^I  ^I=^Iaes_decrypt$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189563.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 63 warnings, 27 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000189563.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
