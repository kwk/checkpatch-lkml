WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: include/linux/brsem.h:1:
+#ifndef __LINUX_BRSEM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#53: FILE: include/linux/brsem.h:5:
+ * include/linux/brsem.h		- Big reader rw semaphore

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#66: FILE: include/linux/brsem.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: include/linux/brsem.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#86: FILE: include/linux/brsem.h:38:
+	spinlock_t lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#92: FILE: include/linux/brsem.h:44:
+	unsigned flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: include/linux/brsem.h:104:
+	int *p;
+	might_sleep();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#204: FILE: include/linux/brsem.h:156:
+ * Returns 1 on sucess and 0 on failure.
                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'specfied' may be misspelled - perhaps 'specified'?
#206: FILE: include/linux/brsem.h:158:
+ * If the specfied brsem can be acquired without sleeping, it's
           ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: include/linux/brsem.h:166:
+	int *p;
+	BUG_ON(in_irq());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: include/linux/brsem.h:166:
+	BUG_ON(in_irq());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: include/linux/brsem.h:186:
+	int *p;
+	BUG_ON(in_irq());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#234: FILE: include/linux/brsem.h:186:
+	BUG_ON(in_irq());

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#269: FILE: kernel/brsem.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#270: FILE: kernel/brsem.c:2:
+ * kernel/brsem.c			- Big reader rw semaphore

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#283: FILE: kernel/brsem.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#284: FILE: kernel/brsem.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA$

WARNING:TYPO_SPELLING: 'followings' may be misspelled - perhaps 'following'?
#303: FILE: kernel/brsem.c:35:
+ * brsem is semantically identical to rwsem except for the followings.
                                                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'sempahore' may be misspelled - perhaps 'semaphore'?
#332: FILE: kernel/brsem.c:64:
+ * a. being a sempahore not a spinlock, readers and writers can sleep
               ^^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#359: FILE: kernel/brsem.c:91:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#360: FILE: kernel/brsem.c:92:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sem' - possible side-effects?
#380: FILE: kernel/brsem.c:112:
+#define is_bypass(sem) \
+	unlikely((sem)->idx == 0 && (sem)->flags & BRSEM_F_BYPASS)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sem' - possible side-effects?
#383: FILE: kernel/brsem.c:115:
+#define check_idx(sem) \
+	BUG_ON((sem)->idx <= 0 || (sem)->idx >= brsem_len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#384: FILE: kernel/brsem.c:116:
+	BUG_ON((sem)->idx <= 0 || (sem)->idx >= brsem_len)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#402: FILE: kernel/brsem.c:134:
+	void (*func)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: kernel/brsem.c:173:
+		struct work_struct *w = coac_works + cpu;
+		INIT_WORK(w, coac_work_fn, &coac_arg);

WARNING:TYPO_SPELLING: 'shrinked' may be misspelled - perhaps 'shrunk'?
#498: FILE: kernel/brsem.c:230:
+ * Once expanded, rcnt_ar's are never shrinked, not even when
                                       ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#554: FILE: kernel/brsem.c:286:
+	BUG_ON(!brsem_initialized);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#595: FILE: kernel/brsem.c:327:
+		sem = allocated_sem = kzalloc(sizeof(*sem), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#682: FILE: kernel/brsem.c:414:
+		struct sync_brsem_arg sbarg = { sem, write_locking };
+		call_on_all_cpus(sync_brsem_cpucb, &sbarg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#695: FILE: kernel/brsem.c:427:
+		int *p = per_cpu(brsem_rcnt_ar, cpu) + sem->idx;
+		if (*p != INT_MIN)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#708: FILE: kernel/brsem.c:440:
+	BUG_ON(sem->master_rcnt != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#712: FILE: kernel/brsem.c:444:
+	BUG_ON(idr_find(&brsem_idr, sem->idx) != sem);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#726: FILE: kernel/brsem.c:458:
+	unsigned flags;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#740: FILE: kernel/brsem.c:472:
+static void queue_async(struct brsem *sem, unsigned todo)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#744: FILE: kernel/brsem.c:476:
+	BUG_ON(todo & ~BRSEM_F_ASYNC_MASK || sem->flags & todo);

CHECK:BRACES: braces {} should be used on all arms of this statement
#865: FILE: kernel/brsem.c:597:
+	if (interruptible) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#869: FILE: kernel/brsem.c:601:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#876: FILE: kernel/brsem.c:608:
+	if (sem->master_rcnt) {
[...]
+	} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#880: FILE: kernel/brsem.c:612:
+		BUG_ON(sem->master_rcnt < 0);

CHECK:BRACES: Unbalanced braces around else statement
#896: FILE: kernel/brsem.c:628:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: kernel/brsem.c:642:
+	int res = __brsem_down_write(sem, 0);
+	BUG_ON(res != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#910: FILE: kernel/brsem.c:642:
+	BUG_ON(res != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#936: FILE: kernel/brsem.c:668:
+	BUG_ON(sem->master_rcnt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#983: FILE: kernel/brsem.c:715:
+		BUG_ON(per_cpu(brsem_rcnt_ar, cpu) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcnt_ar"
#995: FILE: kernel/brsem.c:727:
+		if (rcnt_ar == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1009: FILE: kernel/brsem.c:741:
+			BUG_ON(!sem || sem->idx != i);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1030: FILE: kernel/brsem.c:762:
+static struct notifier_block brsem_cpu_notifier =
+	{ brsem_cpu_callback, NULL, 0 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1033: FILE: kernel/brsem.c:765:
+ * brsem is initialized in three stages to make it useable as early as
                                                    ^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'before'
#1065: FILE: kernel/brsem.c:797:
+ * Unless brsems are needed before before stage 2, users of brsem

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1090: FILE: kernel/brsem.c:822:
+	for (cpu = 1; cpu < NR_CPUS; cpu++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1114: FILE: kernel/brsem.c:846:
+	BUG_ON(!new_rcnt_ar);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1121: FILE: kernel/brsem.c:853:
+	BUG_ON(!brsem_async_wq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1130: FILE: kernel/brsem.c:862:
+EXPORT_SYMBOL(__create_brsem);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1131: FILE: kernel/brsem.c:863:
+EXPORT_SYMBOL(destroy_brsem);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1132: FILE: kernel/brsem.c:864:
+EXPORT_SYMBOL(__brsem_down_read_slow);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1133: FILE: kernel/brsem.c:865:
+EXPORT_SYMBOL(__brsem_down_read_trylock_slow);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1134: FILE: kernel/brsem.c:866:
+EXPORT_SYMBOL(__brsem_up_read_slow);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1135: FILE: kernel/brsem.c:867:
+EXPORT_SYMBOL(brsem_down_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1136: FILE: kernel/brsem.c:868:
+EXPORT_SYMBOL(brsem_down_write_interruptible);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1137: FILE: kernel/brsem.c:869:
+EXPORT_SYMBOL(brsem_up_write);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 47 warnings, 9 checks, 1100 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148438.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
