WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#35: 
> This is a quick scan, so i didnt look at little details.
                             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
7. Do not put the PID/TGID into the skb if there are errors in fill_pid() or

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/delayacct.h:29:
+extern int __delayacct_add_tsk(struct taskstats *, struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct taskstats *' should also have an identifier name
#86: FILE: include/linux/delayacct.h:29:
+extern int __delayacct_add_tsk(struct taskstats *, struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#86: FILE: include/linux/delayacct.h:29:
+extern int __delayacct_add_tsk(struct taskstats *, struct task_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: include/linux/taskstats.h:1:
+/* taskstats.h - exporting per-task statistics

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#157: FILE: include/linux/taskstats.h:50:
+					 * no count available/provided */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#160: FILE: include/linux/taskstats.h:53:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/taskstats.h:104:
+extern void taskstats_exit_pid(struct task_struct *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#292: FILE: kernel/delayacct.c:137:
 }
+#ifdef CONFIG_TASKSTATS

ERROR:SPACING: space required after that ',' (ctx:VxV)
#297: FILE: kernel/delayacct.c:142:
+	unsigned long t1,t2;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#301: FILE: kernel/delayacct.c:146:
+	tmp = (nsec_t)d->cpu_run_total ;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#302: FILE: kernel/delayacct.c:147:
+	tmp += (u64)(tsk->utime+tsk->stime)*TICK_NSEC;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#302: FILE: kernel/delayacct.c:147:
+	tmp += (u64)(tsk->utime+tsk->stime)*TICK_NSEC;
 	                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#303: FILE: kernel/delayacct.c:148:
+	d->cpu_run_total = (tmp < (nsec_t)d->cpu_run_total)? 0: tmp;
 	                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#303: FILE: kernel/delayacct.c:148:
+	d->cpu_run_total = (tmp < (nsec_t)d->cpu_run_total)? 0: tmp;
 	                                                      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#313: FILE: kernel/delayacct.c:158:
+	d->cpu_delay_total = (tmp < (nsec_t)d->cpu_delay_total)? 0: tmp;
 	                                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#313: FILE: kernel/delayacct.c:158:
+	d->cpu_delay_total = (tmp < (nsec_t)d->cpu_delay_total)? 0: tmp;
 	                                                          ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#317: FILE: kernel/delayacct.c:162:
+	d->blkio_delay_total = (tmp < d->blkio_delay_total)? 0: tmp;
 	                                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#317: FILE: kernel/delayacct.c:162:
+	d->blkio_delay_total = (tmp < d->blkio_delay_total)? 0: tmp;
 	                                                      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#319: FILE: kernel/delayacct.c:164:
+	d->swapin_delay_total = (tmp < d->swapin_delay_total)? 0: tmp;
 	                                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#319: FILE: kernel/delayacct.c:164:
+	d->swapin_delay_total = (tmp < d->swapin_delay_total)? 0: tmp;
 	                                                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#341: FILE: kernel/taskstats.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#363: FILE: kernel/taskstats.c:23:
+#include <asm/atomic.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#367: FILE: kernel/taskstats.c:27:
+static int family_registered = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#376: FILE: kernel/taskstats.c:36:
+static struct nla_policy taskstats_cmd_get_policy[TASKSTATS_CMD_ATTR_MAX+1] __read_mostly = {
                                                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: kernel/taskstats.c:41:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#397: FILE: kernel/taskstats.c:57:
+		int seq = get_cpu_var(taskstats_seqnum)++;
+		put_cpu_var(taskstats_seqnum);

CHECK:BRACES: Unbalanced braces around else statement
#402: FILE: kernel/taskstats.c:62:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reply"
#406: FILE: kernel/taskstats.c:66:
+	if (reply == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#441: FILE: kernel/taskstats.c:101:
+	if (!pidtsk) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#450: FILE: kernel/taskstats.c:110:
+	} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#458: FILE: kernel/taskstats.c:118:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: kernel/taskstats.c:160:
+		u32 pid = nla_get_u32(info->attrs[TASKSTATS_CMD_ATTR_PID]);
+		rc = fill_pid((pid_t)pid, NULL, &stats);

WARNING:LINE_SPACING: Missing a blank line after declarations
#507: FILE: kernel/taskstats.c:167:
+		u32 tgid = nla_get_u32(info->attrs[TASKSTATS_CMD_ATTR_TGID]);
+		rc = fill_tgid((pid_t)tgid, NULL, &stats);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#522: FILE: kernel/taskstats.c:182:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#524: FILE: kernel/taskstats.c:184:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: kernel/taskstats.c:243:
+        family_registered = 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: kernel/taskstats.c:243:
+        family_registered = 1;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091113.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 13 warnings, 15 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091113.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
