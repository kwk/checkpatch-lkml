WARNING:TYPO_SPELLING: 'neccesary' may be misspelled - perhaps 'necessary'?
#31: 
- Add neccesary fields to the task_struct.
      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#100: FILE: include/linux/futex.h:51:
+u32 futex_hash_key (const union futex_key *key)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: include/linux/futex.h:53:
+  u32 hash = jhash2((u32*)&key->both.word,$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#102: FILE: include/linux/futex.h:53:
+  u32 hash = jhash2((u32*)&key->both.word,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: include/linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: include/linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#103: FILE: include/linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#103: FILE: include/linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
                                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: include/linux/futex.h:55:
+                    key->both.offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/linux/futex.h:55:
+                    key->both.offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: include/linux/futex.h:56:
+  return hash;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: include/linux/futex.h:60:
+int match_futex_key (const union futex_key *key1, const union futex_key *key2)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#112: FILE: include/linux/futex.h:63:
+	return (key1->both.word == key2->both.word
+		&& key1->both.ptr == key2->both.ptr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#113: FILE: include/linux/futex.h:64:
+		&& key1->both.ptr == key2->both.ptr
+		&& key1->both.offset == key2->both.offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#116: FILE: include/linux/futex.h:67:
+extern int get_futex_key (unsigned long uaddr, union futex_key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/futex.h:67:
+extern int get_futex_key (unsigned long uaddr, union futex_key *key);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/futex.h:68:
+extern void get_key_refs(union futex_key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/futex.h:69:
+extern void drop_key_refs(union futex_key *key);

WARNING:TYPO_SPELLING: 'qeueue' may be misspelled - perhaps 'queue'?
#160: FILE: include/linux/sched.h:469:
+	struct fuqueue *fuqueue_wait; /* waiting for this qeueue */
 	                                                  ^^^^^^

WARNING:TYPO_SPELLING: 'qeueue' may be misspelled - perhaps 'queue'?
#161: FILE: include/linux/sched.h:470:
+	struct fuqueue_waiter *fuqueue_waiter; /* waiting for this qeueue */
 	                                                           ^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#205: FILE: kernel/fork.c:43:
+extern void init_fulock (struct task_struct *task);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#205: FILE: kernel/fork.c:43:
+extern void init_fulock (struct task_struct *task);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#258: FILE: kernel/futex.c:87:
+	u32 hash = futex_hash_key (key);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#269: FILE: kernel/futex.c:96:
+	return match_futex_key (key1, key2);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: kernel/sched.c:661:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: kernel/sched.c:662:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: kernel/sched.c:662:
+	
+		

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#316: FILE: kernel/sched.c:1765:
+extern void fuqueue_wait_cancel(struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#316: FILE: kernel/sched.c:1765:
+extern void fuqueue_wait_cancel(struct task_struct *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#316: FILE: kernel/sched.c:1765:
+extern void fuqueue_wait_cancel(struct task_struct *, int);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "curr->task->fuqueue_wait"
#335: FILE: kernel/sched.c:1789:
+		if (unlikely(curr->task->fuqueue_wait != NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: kernel/sched.c:2121:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: kernel/sched.c:2123:
+ * @prio New priority to set $

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#352: FILE: kernel/sched.c:2125:
+#warning FIXME: need to play by POSIX rules on prio change and list repositioning because of prio inheritance

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: kernel/sched.c:2127:
+void __set_prio (struct task_struct *p, int prio)

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: kernel/sched.c:2132:
+        int oldprio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: kernel/sched.c:2132:
+        int oldprio;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: kernel/sched.c:2133:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: kernel/sched.c:2135:
+        oldprio = p->prio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: kernel/sched.c:2135:
+        oldprio = p->prio;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: kernel/sched.c:2144:
+        if (rq->curr == p) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: kernel/sched.c:2144:
+        if (rq->curr == p) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#371: FILE: kernel/sched.c:2144:
+        if (rq->curr == p) {
[...]
+	else if (TASK_PREEMPTS_CURR (p, rq))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: kernel/sched.c:2145:
+                if (p->prio > oldprio)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: kernel/sched.c:2145:
+                if (p->prio > oldprio)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: kernel/sched.c:2146:
+                        resched_task(rq->curr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: kernel/sched.c:2146:
+                        resched_task(rq->curr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: kernel/sched.c:2147:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: kernel/sched.c:2147:
+        }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#375: FILE: kernel/sched.c:2148:
+	else if (TASK_PREEMPTS_CURR (p, rq))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#375: FILE: kernel/sched.c:2148:
+        }
+	else if (TASK_PREEMPTS_CURR (p, rq))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: kernel/sched.c:2149:
+                resched_task(rq->curr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: kernel/sched.c:2149:
+                resched_task(rq->curr);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#378: FILE: kernel/sched.c:2151:
+	task_rq_unlock (rq, &flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: kernel/sched.c:2154:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#382: FILE: kernel/sched.c:2155:
+extern void fuqueue_chprio (struct task_struct *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->fuqueue_wait"
#391: FILE: kernel/sched.c:2236:
+	if (p->fuqueue_wait != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#402: FILE: kernel/signal.c:527:
+extern void fuqueue_wait_cancel (struct task_struct *, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: kernel/signal.c:552:
+^I * $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: kernel/signal.c:563:
+		if (unlikely (t->fuqueue_wait != NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->fuqueue_wait != NULL'
#423: FILE: kernel/signal.c:563:
+		if (unlikely (t->fuqueue_wait != NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "t->fuqueue_wait"
#423: FILE: kernel/signal.c:563:
+		if (unlikely (t->fuqueue_wait != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "t->fuqueue_wait"
#435: FILE: kernel/signal.c:690:
+			if (unlikely(t->fuqueue_wait != NULL))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: kernel/timer.c:972:
+ */ $

CHECK:SPACING: No space is necessary after a cast
#455: FILE: kernel/timer.c:977:
+	struct task_struct *task = (task_t *) __data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#456: FILE: kernel/timer.c:978:
+	struct task_struct *task = (task_t *) __data;
+	if (unlikely(task->fuqueue_wait != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "task->fuqueue_wait"
#456: FILE: kernel/timer.c:978:
+	if (unlikely(task->fuqueue_wait != NULL))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311568.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 32 warnings, 17 checks, 368 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311568.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
