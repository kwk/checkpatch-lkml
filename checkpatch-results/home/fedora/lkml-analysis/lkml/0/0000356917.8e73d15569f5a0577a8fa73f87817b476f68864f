WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: include/linux/dynlocks.h:1:
+#ifndef _LINUX_DYNLOCKS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#106: FILE: include/linux/dynlocks.h:26:
+	spinlock_t dl_list_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: include/linux/dynlocks.h:33:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: lib/dynlocks.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: lib/dynlocks.c:37:
+^Istruct dynlock_member *nhl = NULL; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: lib/dynlocks.c:38:
+^Istruct dynlock_member *hl; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: lib/dynlocks.c:69:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*nhl)...) over kmalloc(sizeof(struct dynlock_member)...)
#190: FILE: lib/dynlocks.c:71:
+	nhl = kmalloc(sizeof(struct dynlock_member), gfp);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nhl"
#191: FILE: lib/dynlocks.c:72:
+	if (nhl == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'functionaly' may be misspelled - perhaps 'functionally'?
#208: FILE: lib/dynlocks.c:89:
+		 * this functionaly is useful for rename operations */
 		        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#208: FILE: lib/dynlocks.c:89:
+		 * this functionaly is useful for rename operations */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: lib/dynlocks.c:91:
+		while ((hl->dl_writers && hl->dl_pid != current->pid) ||
+				hl->dl_readers) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: lib/dynlocks.c:94:
+			wait_event(hl->dl_wait,
+				hl->dl_writers == 0 && hl->dl_readers == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: lib/dynlocks.c:113:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: lib/dynlocks.c:125:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: lib/dynlocks.c:140:
+^Iif (--(hl->dl_refcount) == 0) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hl->dl_refcount'
#259: FILE: lib/dynlocks.c:140:
+	if (--(hl->dl_refcount) == 0) 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#266: FILE: lib/dynlocks.c:147:
+EXPORT_SYMBOL(dynlock_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#267: FILE: lib/dynlocks.c:148:
+EXPORT_SYMBOL(dynlock_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#268: FILE: lib/dynlocks.c:149:
+EXPORT_SYMBOL(dynlock_unlock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: fs/namei.c:116:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#323: FILE: fs/namei.c:125:
+	 * same name in same time -bzzz */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#515: FILE: fs/namei.c:1498:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#515: FILE: fs/namei.c:1498:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#524: FILE: fs/namei.c:1552:
+		unlock_dir(nd.dentry->d_inode, nd.lock);
 		           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#524: FILE: fs/namei.c:1552:
+		unlock_dir(nd.dentry->d_inode, nd.lock);
 		                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#559: FILE: fs/namei.c:1654:
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#559: FILE: fs/namei.c:1654:
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#559: FILE: fs/namei.c:1654:
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#567: FILE: fs/namei.c:1661:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#567: FILE: fs/namei.c:1661:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#602: FILE: fs/namei.c:1724:
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#602: FILE: fs/namei.c:1724:
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#602: FILE: fs/namei.c:1724:
+	nd.lock = lock_dir(nd.dentry->d_inode, &nd.last);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#611: FILE: fs/namei.c:1738:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#611: FILE: fs/namei.c:1738:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#620: FILE: fs/namei.c:1801:
+		unlock_dir(nd.dentry->d_inode, nd.lock);
 		           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#620: FILE: fs/namei.c:1801:
+		unlock_dir(nd.dentry->d_inode, nd.lock);
 		                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#650: FILE: fs/namei.c:1886:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#650: FILE: fs/namei.c:1886:
+	unlock_dir(nd.dentry->d_inode, nd.lock);
 	                               ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#724: FILE: include/linux/namei.h:53:
+extern struct dentry *lock_rename(struct nameidata *, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#724: FILE: include/linux/namei.h:53:
+extern struct dentry *lock_rename(struct nameidata *, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#724: FILE: include/linux/namei.h:53:
+extern struct dentry *lock_rename(struct nameidata *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: include/linux/namei.h:54:
+extern void unlock_rename(struct nameidata *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#725: FILE: include/linux/namei.h:54:
+extern void unlock_rename(struct nameidata *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#725: FILE: include/linux/namei.h:54:
+extern void unlock_rename(struct nameidata *, struct nameidata *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#777: FILE: fs/ext3/namei.c:57:
+	 * have to be serialized -bzzz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#787: FILE: fs/ext3/namei.c:67:
+^I$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#809: FILE: fs/ext3/namei.c:159:
+static inline void dx_lock_bh(struct buffer_head volatile *bh)

ERROR:CODE_INDENT: code indent should use tabs where possible
#811: FILE: fs/ext3/namei.c:161:
+        preempt_disable();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: fs/ext3/namei.c:161:
+        preempt_disable();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: fs/ext3/namei.c:163:
+        while (test_and_set_bit(BH_DXLock, &bh->b_state)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: fs/ext3/namei.c:163:
+        while (test_and_set_bit(BH_DXLock, &bh->b_state)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#814: FILE: fs/ext3/namei.c:164:
+                while (test_bit(BH_DXLock, &bh->b_state))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: fs/ext3/namei.c:164:
+                while (test_bit(BH_DXLock, &bh->b_state))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#815: FILE: fs/ext3/namei.c:165:
+                        cpu_relax();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: fs/ext3/namei.c:165:
+                        cpu_relax();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: fs/ext3/namei.c:166:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: fs/ext3/namei.c:166:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#823: FILE: fs/ext3/namei.c:173:
+        smp_mb__before_clear_bit();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: fs/ext3/namei.c:173:
+        smp_mb__before_clear_bit();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: fs/ext3/namei.c:174:
+        clear_bit(BH_DXLock, &bh->b_state);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: fs/ext3/namei.c:174:
+        clear_bit(BH_DXLock, &bh->b_state);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#826: FILE: fs/ext3/namei.c:176:
+        preempt_enable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: fs/ext3/namei.c:176:
+        preempt_enable();$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#829: FILE: fs/ext3/namei.c:179:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#847: FILE: fs/ext3/namei.c:203:
+static void dx_insert_block (struct inode *, struct dx_frame *, u32, u32, u32);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#874: FILE: fs/ext3/namei.c:365:
+struct dx_entry * dx_find_position(struct dx_entry * entries, u32 hash)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#874: FILE: fs/ext3/namei.c:365:
+struct dx_entry * dx_find_position(struct dx_entry * entries, u32 hash)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#882: FILE: fs/ext3/namei.c:373:
+	while (p <= q)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#884: FILE: fs/ext3/namei.c:375:
+		m = p + (q - p)/2;
 		               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#906: FILE: fs/ext3/namei.c:397:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#926: FILE: fs/ext3/namei.c:417:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: fs/ext3/namei.c:418:
+^Iif (leaf != frame->leaf) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#929: FILE: fs/ext3/namei.c:420:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!frame->bh"
#932: FILE: fs/ext3/namei.c:423:
+	if (frame->bh == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#948: FILE: fs/ext3/namei.c:439:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#969: FILE: fs/ext3/namei.c:459:
+	unsigned indirect;

CHECK:SPACING: No space is necessary after a cast
#1002: FILE: fs/ext3/namei.c:500:
+	entries = (struct dx_entry *) (((char *)&root->info) +

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1006: FILE: fs/ext3/namei.c:504:
+	dxtrace (printk("Look up %x", hash));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1006: FILE: fs/ext3/namei.c:504:
+	dxtrace (printk("Look up %x", hash));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1010: FILE: fs/ext3/namei.c:508:
+	 * will suggest htree is still single-level -bzzz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1026: FILE: fs/ext3/namei.c:518:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1062: FILE: fs/ext3/namei.c:522:
+		dxtrace(printk(" %x->%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: fs/ext3/namei.c:523:
+		dxtrace(printk(" %x->%u\n",
+				at == entries? 0: dx_get_hash(at),

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1063: FILE: fs/ext3/namei.c:523:
+				at == entries? 0: dx_get_hash(at),
 				             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1063: FILE: fs/ext3/namei.c:523:
+				at == entries? 0: dx_get_hash(at),
 				                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: fs/ext3/namei.c:534:
+^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1080: FILE: fs/ext3/namei.c:538:
+		if (!(bh = ext3_bread (NULL,dir, frame->leaf, 0, err)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1080: FILE: fs/ext3/namei.c:538:
+		if (!(bh = ext3_bread (NULL,dir, frame->leaf, 0, err)))
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1080: FILE: fs/ext3/namei.c:538:
+		if (!(bh = ext3_bread (NULL,dir, frame->leaf, 0, err)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: fs/ext3/namei.c:540:
+^I^I$

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1087: FILE: fs/ext3/namei.c:545:
+		 * from begining if path got changed -bzzz */
 		        ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1087: FILE: fs/ext3/namei.c:545:
+		 * from begining if path got changed -bzzz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1094: FILE: fs/ext3/namei.c:552:
+^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "frames[1].bh"
#1109: FILE: fs/ext3/namei.c:571:
+	if (frames[1].bh != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->at'
#1118: FILE: fs/ext3/namei.c:612:
+		if (++(p->at) < p->entries + dx_get_count(p->entries)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1131: FILE: fs/ext3/namei.c:642:
+^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1132: FILE: fs/ext3/namei.c:643:
+		idx = p->leaf = dx_get_block(p->at);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1133: FILE: fs/ext3/namei.c:644:
+		if (!(bh = ext3_bread(NULL, dir, p->leaf,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1159: FILE: fs/ext3/namei.c:811:
+		de = (struct ext3_dir_entry_2 *)((char*)de +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: fs/ext3/namei.c:846:
+static void dx_insert_block(struct inode *dir, struct dx_frame *frame,
+			u32 hash, u32 block, u32 idx)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1178: FILE: fs/ext3/namei.c:858:
+^I$

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1187: FILE: fs/ext3/namei.c:939:
+					struct ext3_dir_entry_2 ** res_dir,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1259: FILE: fs/ext3/namei.c:1081:
+	if (!(frame = dx_probe (&dentry->d_name, dir, &hinfo, frames, err)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1259: FILE: fs/ext3/namei.c:1081:
+	if (!(frame = dx_probe (&dentry->d_name, dir, &hinfo, frames, err)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1261: FILE: fs/ext3/namei.c:1083:
+^I$

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#1263: FILE: fs/ext3/namei.c:1085:
+	/* while locking leaf we just found may get splitted
 	                                            ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1264: FILE: fs/ext3/namei.c:1086:
+	 * so, we need another leaf. check this */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1270: FILE: fs/ext3/namei.c:1092:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1289: FILE: fs/ext3/namei.c:1102:
+			if (ext3_match (namelen, name, de)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1291: FILE: fs/ext3/namei.c:1104:
+				if (!ext3_check_dir_entry("ext3_find_entry",
+						dir, de, bh,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1292: FILE: fs/ext3/namei.c:1105:
+						(block<<EXT3_BLOCK_SIZE_BITS(sb))
 						      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:ExV)
#1293: FILE: fs/ext3/namei.c:1106:
+						+((char *)de - bh->b_data))) {
 						^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1294: FILE: fs/ext3/namei.c:1107:
+					brelse (bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1298: FILE: fs/ext3/namei.c:1111:
+				dx_release (frames);

CHECK:SPACING: No space is necessary after a cast
#1369: FILE: fs/ext3/namei.c:1226:
+			(struct ext3_dir_entry_2 *) (from + map->offs);

CHECK:SPACING: No space is necessary after a cast
#1379: FILE: fs/ext3/namei.c:1241:
+	struct ext3_dir_entry_2 *de = (struct ext3_dir_entry_2 *) base;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1399: FILE: fs/ext3/namei.c:1311:
+		frame->leaf, hash2, split, count-split));
 		                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1400: FILE: fs/ext3/namei.c:1312:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1408: FILE: fs/ext3/namei.c:1318:
+	dxtrace(dx_show_leaf(hinfo,(struct ext3_dir_entry_2*) data1, blocksize, 1));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1408: FILE: fs/ext3/namei.c:1318:
+	dxtrace(dx_show_leaf(hinfo,(struct ext3_dir_entry_2*) data1, blocksize, 1));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1408: FILE: fs/ext3/namei.c:1318:
+	dxtrace(dx_show_leaf(hinfo,(struct ext3_dir_entry_2*) data1, blocksize, 1));
 	                          ^

CHECK:SPACING: No space is necessary after a cast
#1409: FILE: fs/ext3/namei.c:1319:
+	dxtrace(dx_show_leaf(hinfo,(struct ext3_dir_entry_2*) data2, blocksize, 1));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1409: FILE: fs/ext3/namei.c:1319:
+	dxtrace(dx_show_leaf(hinfo,(struct ext3_dir_entry_2*) data2, blocksize, 1));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1409: FILE: fs/ext3/namei.c:1319:
+	dxtrace(dx_show_leaf(hinfo,(struct ext3_dir_entry_2*) data2, blocksize, 1));
 	                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1421: FILE: fs/ext3/namei.c:1329:
+		 * we have to lock it before add_dirent_to_buf */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1425: FILE: fs/ext3/namei.c:1333:
+	dx_insert_block (dir, frame, hash2 + continued, newblock, frame->curidx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1446: FILE: fs/ext3/namei.c:1468:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1476: FILE: fs/ext3/namei.c:1520:
+	de = do_split(handle,dir, &bh, frame, &hinfo, &new_lock, &retval);
 	                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1488: FILE: fs/ext3/namei.c:1530:
+	 * avoid races while htree being created -bzzz */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1518: FILE: fs/ext3/namei.c:1584:
+		 * created htree -bzzz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1522: FILE: fs/ext3/namei.c:1588:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1527: FILE: fs/ext3/namei.c:1592:
+		if(!bh) {

WARNING:TYPO_SPELLING: 'chage' may be misspelled - perhaps 'change'?
#1589: FILE: fs/ext3/namei.c:1646:
+	/* we're going to chage leaf, so lock it first */
 	                  ^^^^^

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#1592: FILE: fs/ext3/namei.c:1649:
+	/* while locking leaf we just found may get splitted
 	                                            ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1593: FILE: fs/ext3/namei.c:1650:
+	 * so we need to check this */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1599: FILE: fs/ext3/namei.c:1656:
+	if (!(bh = ext3_bread(handle,dir, frame->leaf, 0, &err))) {
 	                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1599: FILE: fs/ext3/namei.c:1656:
+	if (!(bh = ext3_bread(handle,dir, frame->leaf, 0, &err))) {

CHECK:SPACING: No space is necessary after a cast
#1600: FILE: fs/ext3/namei.c:1657:
+		printk("can't ext3_bread(%d) = %d\n", (int) frame->leaf, err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1600: FILE: fs/ext3/namei.c:1657:
+		printk("can't ext3_bread(%d) = %d\n", (int) frame->leaf, err);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1611: FILE: fs/ext3/namei.c:1673:
+	 * split it. so lock index for this leaf first */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1619: FILE: fs/ext3/namei.c:1681:
+	frame = dx_probe(&dentry->d_name, dentry->d_parent->d_inode,
+			&hinfo, frames, &err);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1626: FILE: fs/ext3/namei.c:1688:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1629: FILE: fs/ext3/namei.c:1691:
+		 * and repeat */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1648: FILE: fs/ext3/namei.c:1713:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1670: FILE: fs/ext3/namei.c:1740:
+			 * split it too -bzzz */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1674: FILE: fs/ext3/namei.c:1744:
+			 * searching for current position of our 2nd index -bzzz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1678: FILE: fs/ext3/namei.c:1748:
+^I^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1679: FILE: fs/ext3/namei.c:1749:
+			dxtrace(printk("Split index %i/%i\n", icount1, icount2));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1680: FILE: fs/ext3/namei.c:1750:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1687: FILE: fs/ext3/namei.c:1756:
+^I^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1703: FILE: fs/ext3/namei.c:1770:
+				frame->curidx = curidx = newblock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1710: FILE: fs/ext3/namei.c:1776:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1717: FILE: fs/ext3/namei.c:1783:
+			 * level index -bzzz */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1719: FILE: fs/ext3/namei.c:1785:
+			dx_insert_block (dir, frames + 0, hash2, newblock, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1721: FILE: fs/ext3/namei.c:1787:
+^I^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1724: FILE: fs/ext3/namei.c:1790:
+			 * it's OK -bzzz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1725: FILE: fs/ext3/namei.c:1791:
+^I^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1733: FILE: fs/ext3/namei.c:1799:
+			 * dx_lock_bh(frame->bh) -bzzz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1736: FILE: fs/ext3/namei.c:1802:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1751: FILE: fs/ext3/namei.c:1817:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1779: FILE: fs/ext3/namei.c:1845:
+^I^I$

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#1787: FILE: fs/ext3/namei.c:1852:
+	/* index splitted */
 	         ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1789: FILE: fs/ext3/namei.c:1854:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1794: FILE: fs/ext3/namei.c:1859:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1817: FILE: fs/ext3/namei.c:2304:
+	bh = ext3_find_entry (dentry, &de, 1, &lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1833: FILE: fs/ext3/namei.c:2321:
+	if (!empty_dir (inode)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1856: FILE: fs/ext3/namei.c:2370:
+	bh = ext3_find_entry (dentry, &de, 1, &lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1896: FILE: fs/ext3/namei.c:2518:
+	old_bh = ext3_find_entry (old_dentry, &old_de, 1, &lock1 /* FIXME */);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1905: FILE: fs/ext3/namei.c:2531:
+	new_bh = ext3_find_entry (new_dentry, &new_de, 1, &lock2 /* FIXME */);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1942: FILE: fs/ext3/namei.c:2657:
+static inline void *ext3_lock_htree(struct inode *dir,
+					unsigned long value, int rwlock)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1945: FILE: fs/ext3/namei.c:2660:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1949: FILE: fs/ext3/namei.c:2664:
+	lock = dynlock_lock(&EXT3_I(dir)->i_htree_lock,
+				value, rwlock, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1954: FILE: fs/ext3/namei.c:2669:
+static inline void ext3_unlock_htree(struct inode *dir,
+					void *lock)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1979: FILE: fs/ext3/super.c:718:
+		else if (!strcmp (this_char, "pdirops"))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1979: FILE: fs/ext3/super.c:718:
 		}
+		else if (!strcmp (this_char, "pdirops"))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1980: FILE: fs/ext3/super.c:719:
+			set_opt (sbi->s_mount_opt, PDIROPS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1990: FILE: fs/ext3/super.c:900:
+	if (test_opt (sb, PDIROPS))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000356917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 65 errors, 81 warnings, 33 checks, 1781 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000356917.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
