ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: fs/libfs.c:469:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: fs/libfs.c:475:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: fs/libfs.c:480:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: fs/libfs.c:487:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: fs/libfs.c:494:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: fs/libfs.c:499:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: fs/libfs.c:511:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: fs/libfs.c:512:
+	BUG_ON(inode->i_fop->write == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_fop->write"
#101: FILE: fs/libfs.c:512:
+	BUG_ON(inode->i_fop->write == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file->private_data"
#103: FILE: fs/libfs.c:514:
+	if (file->private_data == NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#154: FILE: fs/libfs.c:581:
+EXPORT_SYMBOL(transaction_read);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#155: FILE: fs/libfs.c:582:
+EXPORT_SYMBOL(transaction_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#156: FILE: fs/libfs.c:583:
+EXPORT_SYMBOL(transaction_release);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#179: FILE: fs/nfsd/nfsctl.c:83:
+static ssize_t nfsctl_transaction_write(struct file *file, const char __user *buf, size_t size, loff_t *pos)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(write_op)
#199: FILE: fs/nfsd/nfsctl.c:89:
+	if (ino >= sizeof(write_op)/sizeof(write_op[0]) || !write_op[ino]) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#199: FILE: fs/nfsd/nfsctl.c:89:
+	if (ino >= sizeof(write_op)/sizeof(write_op[0]) || !write_op[ino]) {
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#283: FILE: fs/nfsd/nfsctl.c:305:
+	mesg = buf; len = PAGE_SIZE-sizeof(struct transaction_argresp);
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: include/linux/fs.h:1559:
+ * An argresp is stored in an allocated page and holds the $

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#338: FILE: security/selinux/selinuxfs.c:395:
+static ssize_t selinux_transaction_write(struct file *file, const char __user *buf, size_t size, loff_t *pos)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(write_op)
#359: FILE: security/selinux/selinuxfs.c:401:
+	if (ino >= sizeof(write_op)/sizeof(write_op[0]) || !write_op[ino]) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#359: FILE: security/selinux/selinuxfs.c:401:
+	if (ino >= sizeof(write_op)/sizeof(write_op[0]) || !write_op[ino]) {
 	                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 8 warnings, 5 checks, 377 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000260565.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
