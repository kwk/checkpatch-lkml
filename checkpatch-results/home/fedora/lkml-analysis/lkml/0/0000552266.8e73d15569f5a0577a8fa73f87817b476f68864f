WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
is used after the scheduler has run (or within arbitrary interrupt contexts).

WARNING:TYPO_SPELLING: 'probem' may be misspelled - perhaps 'problem'?
#48: 
the pgds that cause the probem.
                        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: vmalloc.c:203:
+       struct task_struct *    p;$

ERROR:POINTER_LOCATION: "foo *    bar" should be "foo *bar"
#73: FILE: vmalloc.c:203:
+       struct task_struct *    p;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: vmalloc.c:204:
+       unsigned long                   va;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: vmalloc.c:205:
+       int                                             errs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: vmalloc.c:207:
+       for_each_task(p) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#77: FILE: vmalloc.c:207:
+       for_each_task(p) {
+               for (va = addr; va < addr + size; va = (va + PGDIR_SIZE) & PGDIR_MASK) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: vmalloc.c:208:
+               for (va = addr; va < addr + size; va = (va + PGDIR_SIZE) & PGDIR_MASK) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: vmalloc.c:208:
+               for (va = addr; va < addr + size; va = (va + PGDIR_SIZE) & PGDIR_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#78: FILE: vmalloc.c:208:
+               for (va = addr; va < addr + size; va = (va + PGDIR_SIZE) & PGDIR_MASK) {
+                       pgd_t kpgd = *pgd_offset_k(va);

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: vmalloc.c:209:
+                       pgd_t kpgd = *pgd_offset_k(va);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: vmalloc.c:209:
+                       pgd_t kpgd = *pgd_offset_k(va);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: vmalloc.c:210:
+                       if (pgd_val(*pgd_offset(p->mm, va)) != pgd_val(kpgd)) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#80: FILE: vmalloc.c:210:
+                       pgd_t kpgd = *pgd_offset_k(va);
+                       if (pgd_val(*pgd_offset(p->mm, va)) != pgd_val(kpgd)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: vmalloc.c:210:
+                       if (pgd_val(*pgd_offset(p->mm, va)) != pgd_val(kpgd)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#80: FILE: vmalloc.c:210:
+                       if (pgd_val(*pgd_offset(p->mm, va)) != pgd_val(kpgd)) {
+                               printk("vmalloc error: pgd %03lx is %08lx not %08lx in %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: vmalloc.c:211:
+                               printk("vmalloc error: pgd %03lx is %08lx not %08lx in %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: vmalloc.c:211:
+                               printk("vmalloc error: pgd %03lx is %08lx not %08lx in %s\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#81: FILE: vmalloc.c:211:
+                               printk("vmalloc error: pgd %03lx is %08lx not %08lx in %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: vmalloc.c:212:
+                                               va >> PGDIR_SHIFT,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: vmalloc.c:212:
+                               printk("vmalloc error: pgd %03lx is %08lx not %08lx in %s\n",
+                                               va >> PGDIR_SHIFT,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: vmalloc.c:212:
+                                               va >> PGDIR_SHIFT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: vmalloc.c:213:
+                                               pgd_val(*pgd_offset(p->mm, va)),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: vmalloc.c:213:
+                                               pgd_val(*pgd_offset(p->mm, va)),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: vmalloc.c:214:
+                                               pgd_val(kpgd),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: vmalloc.c:214:
+                                               pgd_val(kpgd),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: vmalloc.c:215:
+                                               p->comm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: vmalloc.c:215:
+                                               p->comm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: vmalloc.c:216:
+                               errs++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: vmalloc.c:216:
+                               errs++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: vmalloc.c:217:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: vmalloc.c:217:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: vmalloc.c:218:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: vmalloc.c:218:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: vmalloc.c:219:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: vmalloc.c:221:
+       return errs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: vmalloc.c:227:
+       struct task_struct *    p;$

ERROR:POINTER_LOCATION: "foo *    bar" should be "foo *bar"
#97: FILE: vmalloc.c:227:
+       struct task_struct *    p;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: vmalloc.c:228:
+       unsigned long                   va;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: vmalloc.c:231:
+       p = &init_task;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: vmalloc.c:232:
+       do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#102: FILE: vmalloc.c:232:
+       do {
+               if (pgd_val(*pgd_offset(p->mm, addr))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: vmalloc.c:233:
+               if (pgd_val(*pgd_offset(p->mm, addr))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: vmalloc.c:233:
+               if (pgd_val(*pgd_offset(p->mm, addr))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#103: FILE: vmalloc.c:233:
+               if (pgd_val(*pgd_offset(p->mm, addr))) {
+                       for (va = (addr + PGDIR_SIZE) & PGDIR_MASK; va < addr + size;

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: vmalloc.c:234:
+                       for (va = (addr + PGDIR_SIZE) & PGDIR_MASK; va < addr + size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: vmalloc.c:234:
+                       for (va = (addr + PGDIR_SIZE) & PGDIR_MASK; va < addr + size;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#104: FILE: vmalloc.c:234:
+                       for (va = (addr + PGDIR_SIZE) & PGDIR_MASK; va < addr + size;
[...]
+                               if (pgd_val(*pgd_offset(p->mm, va)) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: vmalloc.c:235:
+                                                       va = (va + PGDIR_SIZE) & PGDIR_MASK) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: vmalloc.c:235:
+                                                       va = (va + PGDIR_SIZE) & PGDIR_MASK) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: vmalloc.c:236:
+                               if (pgd_val(*pgd_offset(p->mm, va)) == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: vmalloc.c:236:
+                               if (pgd_val(*pgd_offset(p->mm, va)) == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 36)
#106: FILE: vmalloc.c:236:
+                               if (pgd_val(*pgd_offset(p->mm, va)) == NULL)
+                                    printk("vfree: pgd %03lx is NULL but %03lx is not (in %s)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pgd_val"
#106: FILE: vmalloc.c:236:
+                               if (pgd_val(*pgd_offset(p->mm, va)) == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: vmalloc.c:237:
+                                    printk("vfree: pgd %03lx is NULL but %03lx is not (in %s)\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: vmalloc.c:237:
+                                    printk("vfree: pgd %03lx is NULL but %03lx is not (in %s)\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#107: FILE: vmalloc.c:237:
+                                    printk("vfree: pgd %03lx is NULL but %03lx is not (in %s)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: vmalloc.c:238:
+                                                       va >> PGDIR_SHIFT,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: vmalloc.c:238:
+                                    printk("vfree: pgd %03lx is NULL but %03lx is not (in %s)\n",
+                                                       va >> PGDIR_SHIFT,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: vmalloc.c:238:
+                                                       va >> PGDIR_SHIFT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: vmalloc.c:239:
+                                                       addr >> PGDIR_SHIFT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: vmalloc.c:239:
+                                                       addr >> PGDIR_SHIFT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: vmalloc.c:240:
+                                                       p->comm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: vmalloc.c:240:
+                                                       p->comm);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: vmalloc.c:241:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: vmalloc.c:241:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: vmalloc.c:242:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: vmalloc.c:242:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: vmalloc.c:243:
+       } while ((p = p->next_task) != &init_task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: vmalloc.c:263:
+       if (duanev_ensure_pgds_same((unsigned long)addr, size))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#126: FILE: vmalloc.c:263:
+       if (duanev_ensure_pgds_same((unsigned long)addr, size))
+               printk("   size = 0x%08lx\n", size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: vmalloc.c:264:
+               printk("   size = 0x%08lx\n", size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: vmalloc.c:264:
+               printk("   size = 0x%08lx\n", size);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#127: FILE: vmalloc.c:264:
+               printk("   size = 0x%08lx\n", size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000552266.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 49 warnings, 3 checks, 64 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000552266.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
