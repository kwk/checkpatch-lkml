WARNING:TYPO_SPELLING: 'stuct' may be misspelled - perhaps 'struct'?
#28: 
stuct char_device * as ID for character devices, we can (in 2.5) get
^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: fs/char_dev.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#76: FILE: fs/char_dev.c:12:
+#define HASH_SIZE	(1UL << HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#77: FILE: fs/char_dev.c:13:
+#define HASH_MASK	(HASH_SIZE-1)
                  	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: fs/char_dev.c:16:
+static kmem_cache_t * cdev_cachep;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#83: FILE: fs/char_dev.c:19:
+	 ((struct char_device *) kmem_cache_alloc(cdev_cachep, SLAB_KERNEL))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: fs/char_dev.c:22:
+static void init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: fs/char_dev.c:22:
+static void init_once(void * foo, kmem_cache_t * cachep, unsigned long flags)

CHECK:SPACING: No space is necessary after a cast
#88: FILE: fs/char_dev.c:24:
+	struct char_device * cdev = (struct char_device *) foo;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: fs/char_dev.c:24:
+	struct char_device * cdev = (struct char_device *) foo;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#90: FILE: fs/char_dev.c:26:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
+	    SLAB_CTOR_CONSTRUCTOR)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#90: FILE: fs/char_dev.c:26:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: fs/char_dev.c:47:
+	cdev_cachep = kmem_cache_create("cdev_cache",
+					 sizeof(struct char_device),

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: fs/char_dev.c:61:
+	unsigned long tmp = dev;
+	tmp = tmp + (tmp >> HASH_BITS) + (tmp >> HASH_BITS*2);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#125: FILE: fs/char_dev.c:61:
+	tmp = tmp + (tmp >> HASH_BITS) + (tmp >> HASH_BITS*2);
 	                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: fs/char_dev.c:69:
+	struct char_device *cdev;
+	for (p=head->next; p!=head; p=p->next) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: fs/char_dev.c:69:
+	for (p=head->next; p!=head; p=p->next) {
 	      ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#133: FILE: fs/char_dev.c:69:
+	for (p=head->next; p!=head; p=p->next) {
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: fs/char_dev.c:69:
+	for (p=head->next; p!=head; p=p->next) {
 	                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#145: FILE: fs/char_dev.c:81:
+	struct list_head * head = cdev_hashtable + hash(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: fs/char_dev.c:83:
+	struct char_device *cdev, *new_cdev;
+	spin_lock(&cdev_lock);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: fs/char_dev.c:91:
+	atomic_set(&new_cdev->count,1);
 	                           ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#186: FILE: fs/dcache.c:1253:
+extern void bdev_cache_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#187: FILE: fs/dcache.c:1254:
+extern void cdev_cache_init(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#207: FILE: fs/devfs/base.c:2259:
+	inode->i_cdev = cdget (kdev_t_to_nr(inode->i_rdev));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/fs.h:995:
+extern struct char_device *cdget(dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#277: FILE: include/linux/fs.h:995:
+extern struct char_device *cdget(dev_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/linux/fs.h:996:
+extern void cdput(struct char_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct char_device *' should also have an identifier name
#278: FILE: include/linux/fs.h:996:
+extern void cdput(struct char_device *);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#310: FILE: kernel/ksyms.c:190:
+EXPORT_SYMBOL(cdput);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533196.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 11 warnings, 9 checks, 234 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000533196.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
