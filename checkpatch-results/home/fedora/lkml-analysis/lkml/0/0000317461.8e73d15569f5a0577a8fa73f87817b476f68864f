CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#90: FILE: kernel/sched.c:172:
+			(MAX_PRIO-1 - (p)->static_prio) / (MAX_USER_PRIO-1)))
 			         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#90: FILE: kernel/sched.c:172:
+			(MAX_PRIO-1 - (p)->static_prio) / (MAX_USER_PRIO-1)))
 			                                                ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#120: FILE: kernel/sched.c:274:
+# define nr_running_inc(rq)	do { (rq)->nr_running++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#121: FILE: kernel/sched.c:275:
+# define nr_running_dec(rq)	do { (rq)->nr_running--; } while (0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#152: FILE: kernel/sched.c:426:
+				if (p->sleep_avg >= INTERACTIVE_SLEEP(p))
[...]
 				else if (p->sleep_avg + sleep_time >=
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#202: FILE: kernel/sched.c:482:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: kernel/sched.c:636:
+					cpu_isset(smp_processor_id(),
+							p->cpus_allowed))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: kernel/sched.c:668:
+^I^I       ^I^I TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: kernel/sched.c:668:
+^I^I       ^I^I TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE, 0);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: kernel/sched.c:853:
+task_t * context_switch(runqueue_t *rq, task_t *prev, task_t *next)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->nr_running >
 					this_rq->prev_cpu_load[this_cpu]'
#299: FILE: kernel/sched.c:1092:
+			if (idle || (this_rq->nr_running >
+					this_rq->prev_cpu_load[this_cpu]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#439: FILE: kernel/sched.c:1832:
+#define	SLEEP_ON_VAR					\
+	unsigned long flags;				\
+	wait_queue_t wait;				\
 	init_waitqueue_entry(&wait, current);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#452: FILE: kernel/sched.c:1842:
+#define	SLEEP_ON_TAIL					\
+	spin_lock_irq(&q->lock);			\
+	__remove_wait_queue(q, &wait);			\
 	spin_unlock_irqrestore(&q->lock, flags);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#452: FILE: kernel/sched.c:1842:
+#define	SLEEP_ON_TAIL					\
+	spin_lock_irq(&q->lock);			\
+	__remove_wait_queue(q, &wait);			\
 	spin_unlock_irqrestore(&q->lock, flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#495: FILE: kernel/sched.c:2532:
+		unsigned long * n = (unsigned long *)(p->thread_info+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#495: FILE: kernel/sched.c:2532:
+		unsigned long * n = (unsigned long *)(p->thread_info+1);
 		                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#499: FILE: kernel/sched.c:2535:
+		free = (unsigned long)n - (unsigned long)(p->thread_info+1);
 		                                                        ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#532: FILE: kernel/sched.c:2807:
+static struct notifier_block migration_notifier
+			= { .notifier_call = &migration_call };

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#539: FILE: kernel/sched.c:2842:
 static int __devinit kstat_cpu_notify(struct notifier_block *self,

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#548: FILE: kernel/sched.c:2856:
 static struct notifier_block __devinitdata kstat_nb = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317461.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 7 warnings, 9 checks, 475 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317461.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
