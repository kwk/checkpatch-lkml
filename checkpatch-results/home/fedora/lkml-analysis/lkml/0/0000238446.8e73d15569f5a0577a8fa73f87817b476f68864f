WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#if 0 or cut the code out.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: drivers/base/deviceparam.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#75: FILE: drivers/base/deviceparam.c:14:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#76: FILE: drivers/base/deviceparam.c:15:
+#define pdebug(fmt, args...) printk("[%-25s] " fmt, __FUNCTION__ , ##args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#76: FILE: drivers/base/deviceparam.c:15:
+#define pdebug(fmt, args...) printk("[%-25s] " fmt, __FUNCTION__ , ##args)
                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#76: FILE: drivers/base/deviceparam.c:15:
+#define pdebug(fmt, args...) printk("[%-25s] " fmt, __FUNCTION__ , ##args)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#83: FILE: drivers/base/deviceparam.c:22:
+static int nr_bootopts = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'which' - possible side-effects?
#93: FILE: drivers/base/deviceparam.c:32:
+#define for_each_setdef(which, setdef, drv) \
+	for ((which) = PARAMSET_WHICH_INIT; \
+	     ((setdef) = get_next_setdef(&(which), (drv))) != NULL; )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#95: FILE: drivers/base/deviceparam.c:34:
+	     ((setdef) = get_next_setdef(&(which), (drv))) != NULL; )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: drivers/base/deviceparam.c:41:
+static struct device_paramset_def * get_setdef(int which,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#105: FILE: drivers/base/deviceparam.c:44:
+	BUG_ON(which < DEV_PARAMSET);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: drivers/base/deviceparam.c:59:
+static struct device_paramset_def * get_next_setdef(int *pwhich,

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: drivers/base/deviceparam.c:65:
+		struct device_paramset_def *setdef;
+		if ((setdef = get_setdef(*pwhich, drv)))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#126: FILE: drivers/base/deviceparam.c:65:
+		if ((setdef = get_setdef(*pwhich, drv)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: drivers/base/deviceparam.c:91:
+static struct vector * get_drv_paramset_vec(int which,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: drivers/base/deviceparam.c:94:
+	BUG_ON(which < DEV_PARAMSET);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#160: FILE: drivers/base/deviceparam.c:99:
+		return &drv->dev_paramset_vec;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#163: FILE: drivers/base/deviceparam.c:102:
+		return &drv->bus_paramset_vec;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#169: FILE: drivers/base/deviceparam.c:108:
+		return &drv->aux_paramset_vecs[which];
+		break;

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#173: FILE: drivers/base/deviceparam.c:112:
+static void ** get_dev_p_paramset(int which, struct device *dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: drivers/base/deviceparam.c:129:
+static inline void * get_dev_paramset(int which, struct device *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: drivers/base/deviceparam.c:132:
+	void **pps;
+	if ((pps = get_dev_p_paramset(which, dev)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#193: FILE: drivers/base/deviceparam.c:132:
+	if ((pps = get_dev_p_paramset(which, dev)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: drivers/base/deviceparam.c:150:
+		if (!(kparam->arg = kmalloc(def->arg_copy_size, GFP_KERNEL)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#218: FILE: drivers/base/deviceparam.c:157:
+		void *p = paramset + fixups[1];
+		if (fixups[0] != -1)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#239: FILE: drivers/base/deviceparam.c:178:
+	if ((ret = prepare_kparam(&kparam, def, paramset)) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!val"
#254: FILE: drivers/base/deviceparam.c:193:
+	is_dfl = val == NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: drivers/base/deviceparam.c:197:
+		size_t size;
+		if (def->dfl == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!def->dfl"
#258: FILE: drivers/base/deviceparam.c:197:
+		if (def->dfl == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#260: FILE: drivers/base/deviceparam.c:199:
+		if (def->copy_dfl) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#262: FILE: drivers/base/deviceparam.c:201:
+			if ((val = kmalloc(size, GFP_KERNEL)) == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#265: FILE: drivers/base/deviceparam.c:204:
+		} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#269: FILE: drivers/base/deviceparam.c:208:
+	if ((ret = prepare_kparam(&kparam, def, paramset)) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#303: FILE: drivers/base/deviceparam.c:242:
+		if (dev == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#305: FILE: drivers/base/deviceparam.c:244:
+			/* We're storing into one of driver paramset
+			   storage vectors. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#305: FILE: drivers/base/deviceparam.c:244:
+			   storage vectors. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ps"
#308: FILE: drivers/base/deviceparam.c:247:
+			if (ps == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#309: FILE: drivers/base/deviceparam.c:248:
+				printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#311: FILE: drivers/base/deviceparam.c:250:
+				       "Device params: Insufficient memory "
+				       "for parameter `%s'\n", full_param);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#326: FILE: drivers/base/deviceparam.c:265:
+			if (dev == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#332: FILE: drivers/base/deviceparam.c:271:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#334: FILE: drivers/base/deviceparam.c:273:
+			       "Device params: `%s' too large for parameter "
+			       "`%s'\n", val ?: "", full_param);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#337: FILE: drivers/base/deviceparam.c:276:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#339: FILE: drivers/base/deviceparam.c:278:
+			       "Device params: `%s' out of range for parameter "
+			       "`%s'\n", val ?: "", full_param);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#342: FILE: drivers/base/deviceparam.c:281:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#344: FILE: drivers/base/deviceparam.c:283:
+			       "Device params: `%s' invalid for parameter "
+			       "`%s'\n", val ?: "", full_param);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: drivers/base/deviceparam.c:291:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#361: FILE: drivers/base/deviceparam.c:300:
+	BUG_ON(setdef->nr_defs != -1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "setdef->defs[nr_defs].kparam.name"
#363: FILE: drivers/base/deviceparam.c:302:
+	for (nr_defs = 0; setdef->defs[nr_defs].kparam.name != NULL; nr_defs++)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#366: FILE: drivers/base/deviceparam.c:305:
+	if ((ps = kmalloc(setdef->size, GFP_KERNEL)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#371: FILE: drivers/base/deviceparam.c:310:
+		if ((ret = call_set(&setdef->defs[i], NULL, ps)) < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#373: FILE: drivers/base/deviceparam.c:312:
+			printk(KERN_ERR "Device params: Failed to initialize "

WARNING:SPLIT_STRING: quoted string split across lines
#374: FILE: drivers/base/deviceparam.c:313:
+			printk(KERN_ERR "Device params: Failed to initialize "
+			       "paramset definition %p, error=%d\n",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#416: FILE: drivers/base/deviceparam.c:355:
+			    VECTOR_ALLOCATE|VECTOR_CLEAR, NULL, NULL, NULL);
 			                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: drivers/base/deviceparam.c:359:
+		struct device_paramset_def *setdef = drv->dev_paramset_def;
+		vector_init(&drv->dev_paramset_vec, setdef->size,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#421: FILE: drivers/base/deviceparam.c:360:
+			    VECTOR_ALLOCATE|VECTOR_CLEAR, NULL, NULL, NULL);
 			                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#422: FILE: drivers/base/deviceparam.c:361:
+		if ((ret = devparam_setdef_init(setdef) < 0))

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#434: FILE: drivers/base/deviceparam.c:373:
+		vecs = kmalloc(i * sizeof(struct vector), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vecs"
#435: FILE: drivers/base/deviceparam.c:374:
+		if (vecs == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#436: FILE: drivers/base/deviceparam.c:375:
+			printk(KERN_ERR "Failed to allocate aux paramset "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#436: FILE: drivers/base/deviceparam.c:375:
+		if (vecs == NULL) {
+			printk(KERN_ERR "Failed to allocate aux paramset "

WARNING:SPLIT_STRING: quoted string split across lines
#437: FILE: drivers/base/deviceparam.c:376:
+			printk(KERN_ERR "Failed to allocate aux paramset "
+			       "vectors for driver `%s'\n", drv->name);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#443: FILE: drivers/base/deviceparam.c:382:
+				    VECTOR_ALLOCATE|VECTOR_CLEAR,
 				                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: drivers/base/deviceparam.c:389:
+	 * parameters */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#493: FILE: drivers/base/deviceparam.c:432:
+		printk(KERN_ERR

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: drivers/base/deviceparam.c:447:
+	int i;
+	for (i = 0; i < nr_bootopts; i++)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#510: FILE: drivers/base/deviceparam.c:449:
+			printk(KERN_ERR "Unknown boot option `%s': ignoring\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!param"
#534: FILE: drivers/base/deviceparam.c:473:
+	if (param == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#535: FILE: drivers/base/deviceparam.c:474:
+		printk(KERN_ERR

WARNING:LINE_SPACING: Missing a blank line after declarations
#553: FILE: drivers/base/deviceparam.c:492:
+		char **param = vector_elem(vec, i, 0);
+		if (param[0])

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#554: FILE: drivers/base/deviceparam.c:493:
+			printk(KERN_ERR

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: drivers/base/deviceparam.c:497:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#599: FILE: drivers/base/deviceparam.c:538:
+	if (!(cursors = kmalloc(size, GFP_KERNEL)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#604: FILE: drivers/base/deviceparam.c:543:
+		BUG_ON(setdef->nr_defs < 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#607: FILE: drivers/base/deviceparam.c:546:
+		if ((cursors[which] = kmalloc(size, GFP_KERNEL)) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!param[0]"
#620: FILE: drivers/base/deviceparam.c:559:
+		if (param[0] == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#625: FILE: drivers/base/deviceparam.c:564:
+		if ((p = strchr(param[0], '.')) != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#625: FILE: drivers/base/deviceparam.c:564:
+		if ((p = strchr(param[0], '.')) != NULL) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#632: FILE: drivers/base/deviceparam.c:571:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: drivers/base/deviceparam.c:573:
+^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!def->dfl"
#658: FILE: drivers/base/deviceparam.c:597:
+			if (def->dfl == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ps"
#665: FILE: drivers/base/deviceparam.c:604:
+				if (ps == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#671: FILE: drivers/base/deviceparam.c:610:
+				if ((ret = call_set(def, NULL, ps)) < 0) {

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#708: FILE: drivers/base/deviceparam.c:647:
+static char ** read_modparam(void *arg, int idx)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drv->owner"
#722: FILE: drivers/base/deviceparam.c:661:
+	if (drv->owner == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#750: FILE: drivers/base/deviceparam.c:689:
+		char *p_used;
+		p_used = vector_elem(&drv->paramset_used_vec,

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#804: FILE: drivers/base/deviceparam.c:743:
+static struct sysfs_ops dp_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#828: FILE: drivers/base/deviceparam.c:767:
+	if ((dp->attrs = kmalloc(size, GFP_KERNEL)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#832: FILE: drivers/base/deviceparam.c:771:
+	if ((ret = kobject_set_name(&dp->kobj, "params")))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#838: FILE: drivers/base/deviceparam.c:777:
+	if ((ret = kobject_register(&dp->kobj)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#844: FILE: drivers/base/deviceparam.c:783:
+		int i;
+		for (i = 0; i < setdef->nr_defs; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#854: FILE: drivers/base/deviceparam.c:793:
+^I^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#855: FILE: drivers/base/deviceparam.c:794:
+			if ((ret = sysfs_create_file(&dp->kobj, attr)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#909: FILE: drivers/base/deviceparam.c:848:
+		if ((ps = kmalloc(setdef->size, GFP_KERNEL)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#942: FILE: drivers/base/deviceparam.c:881:
+	if (!(bitmaps = kmalloc(cnt * sizeof(bitmaps[0]), GFP_KERNEL)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#949: FILE: drivers/base/deviceparam.c:888:
+		BUG_ON(setdef->nr_defs < 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#951: FILE: drivers/base/deviceparam.c:890:
+		if (!(ps = kmalloc(setdef->size, GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#957: FILE: drivers/base/deviceparam.c:896:
+		if (!(bitmaps[which] = kmalloc(ALIGN(setdef->nr_defs, 8) / 8,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#974: FILE: drivers/base/deviceparam.c:913:
+			printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!def->dfl"
#984: FILE: drivers/base/deviceparam.c:923:
+			if (test_bit(i, bitmaps[which]) || def->dfl == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1015: FILE: drivers/base/deviceparam.c:954:
+		size_t size = drv->nr_aux_paramsets * sizeof(void *);
+		if ((dp->aux = kmalloc(size, GFP_KERNEL)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1015: FILE: drivers/base/deviceparam.c:954:
+		if ((dp->aux = kmalloc(size, GFP_KERNEL)) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!args"
#1020: FILE: drivers/base/deviceparam.c:959:
+	if (args == NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1040: FILE: drivers/base/deviceparam.c:979:
+EXPORT_SYMBOL(devparam_setdef_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1041: FILE: drivers/base/deviceparam.c:980:
+EXPORT_SYMBOL(devparam_setdef_release);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1059: FILE: include/linux/device.h:62:
+	struct device_paramset_def * bus_paramset_def;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1067: FILE: include/linux/device.h:111:
+	struct device_paramset_def * dev_paramset_def;

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1068: FILE: include/linux/device.h:112:
+	struct device_paramset_def ** aux_paramset_defs;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1071: FILE: include/linux/device.h:115:
+	/* The following fields are initialized automatically by
+	   devparam_driver_init() when registering the driver */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1071: FILE: include/linux/device.h:115:
+	   devparam_driver_init() when registering the driver */

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#1075: FILE: include/linux/device.h:119:
+	struct vector		* aux_paramset_vecs;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1094: FILE: include/linux/deviceparam.h:1:
+/*

WARNING:TYPO_SPELLING: 'strucure' may be misspelled - perhaps 'structure'?
#1140: FILE: include/linux/deviceparam.h:47:
+   structures to 32-byte boundary even when __alignof__() the strucure
                                                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1140: FILE: include/linux/deviceparam.h:47:
+/* For some reason, gcc aligns structures which contain other
+   structures to 32-byte boundary even when __alignof__() the strucure

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1144: FILE: include/linux/deviceparam.h:51:
+   of different types (kparam_string, kparam_array for now). */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.1") over __attribute__((section(".data.1")))
#1145: FILE: include/linux/deviceparam.h:52:
+#define __devparam_section	__attribute__((section(".data.1")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(__alignof__(struct device_param_def)) over __attribute__((aligned(__alignof__(struct device_param_def))))
#1149: FILE: include/linux/deviceparam.h:56:
+	__attribute__((unused, aligned(__alignof__(struct device_param_def))))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1149: FILE: include/linux/deviceparam.h:56:
+	__attribute__((unused, aligned(__alignof__(struct device_param_def))))

CHECK:CAMELCASE: Avoid CamelCase: <Name>
#1151: FILE: include/linux/deviceparam.h:58:
+#define DEFINE_DEVICE_PARAMSET(Name, Type, Defs)			\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#1151: FILE: include/linux/deviceparam.h:58:
+#define DEFINE_DEVICE_PARAMSET(Name, Type, Defs)			\

CHECK:CAMELCASE: Avoid CamelCase: <Defs>
#1151: FILE: include/linux/deviceparam.h:58:
+#define DEFINE_DEVICE_PARAMSET(Name, Type, Defs)			\

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1156: FILE: include/linux/deviceparam.h:63:
+	typedef Type __devparam_type;					\

CHECK:CAMELCASE: Avoid CamelCase: <Set>
#1163: FILE: include/linux/deviceparam.h:70:
+#define __DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Arg, Argcopysize,	\

CHECK:CAMELCASE: Avoid CamelCase: <Get>
#1163: FILE: include/linux/deviceparam.h:70:
+#define __DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Arg, Argcopysize,	\

CHECK:CAMELCASE: Avoid CamelCase: <Arg>
#1163: FILE: include/linux/deviceparam.h:70:
+#define __DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Arg, Argcopysize,	\

CHECK:CAMELCASE: Avoid CamelCase: <Argcopysize>
#1163: FILE: include/linux/deviceparam.h:70:
+#define __DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Arg, Argcopysize,	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1163: FILE: include/linux/deviceparam.h:70:
+#define __DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Arg, Argcopysize,	\
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\
+	__devparam_decl(__devparam_data(Name)) = {			\
+		.kparam	= {						\
+			.name		= #Name,			\
+			.perm		= Perm,				\
+			.set		= Set,				\
+			.get		= Get,				\
+			.arg		= Arg,				\
+			.min		= Min,				\
+			.max		= Max				\
+		},							\
+		.dfl		= Dfl,					\
+		.copy_dfl	= Copydfl,				\
+		.arg_copy_size	= Argcopysize,				\
+		.arg_fixups	= { Fixups }				\
+	};								\
+	MODULE_DEVPARM_DESC(Name, Desc);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1163: FILE: include/linux/deviceparam.h:70:
+#define __DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Arg, Argcopysize,	\
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\
+	__devparam_decl(__devparam_data(Name)) = {			\
+		.kparam	= {						\
+			.name		= #Name,			\
+			.perm		= Perm,				\
+			.set		= Set,				\
+			.get		= Get,				\
+			.arg		= Arg,				\
+			.min		= Min,				\
+			.max		= Max				\
+		},							\
+		.dfl		= Dfl,					\
+		.copy_dfl	= Copydfl,				\
+		.arg_copy_size	= Argcopysize,				\
+		.arg_fixups	= { Fixups }				\
+	};								\
+	MODULE_DEVPARM_DESC(Name, Desc);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1163: FILE: include/linux/deviceparam.h:70:
+#define __DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Arg, Argcopysize,	\
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\
+	__devparam_decl(__devparam_data(Name)) = {			\
+		.kparam	= {						\
+			.name		= #Name,			\
+			.perm		= Perm,				\
+			.set		= Set,				\
+			.get		= Get,				\
+			.arg		= Arg,				\
+			.min		= Min,				\
+			.max		= Max				\
+		},							\
+		.dfl		= Dfl,					\
+		.copy_dfl	= Copydfl,				\
+		.arg_copy_size	= Argcopysize,				\
+		.arg_fixups	= { Fixups }				\
+	};								\
+	MODULE_DEVPARM_DESC(Name, Desc);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <Min>
#1164: FILE: include/linux/deviceparam.h:71:
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\

CHECK:CAMELCASE: Avoid CamelCase: <Max>
#1164: FILE: include/linux/deviceparam.h:71:
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\

CHECK:CAMELCASE: Avoid CamelCase: <Dfl>
#1164: FILE: include/linux/deviceparam.h:71:
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\

CHECK:CAMELCASE: Avoid CamelCase: <Copydfl>
#1164: FILE: include/linux/deviceparam.h:71:
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\

CHECK:CAMELCASE: Avoid CamelCase: <Perm>
#1164: FILE: include/linux/deviceparam.h:71:
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\

CHECK:CAMELCASE: Avoid CamelCase: <Desc>
#1164: FILE: include/linux/deviceparam.h:71:
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\

CHECK:CAMELCASE: Avoid CamelCase: <Fixups>
#1164: FILE: include/linux/deviceparam.h:71:
+		Min, Max, Dfl, Copydfl, Perm, Desc, Fixups...)		\

CHECK:CAMELCASE: Avoid CamelCase: <Field>
#1182: FILE: include/linux/deviceparam.h:89:
+#define DEVICE_PARAM_CALL_RANGED(Name, Set, Get, Field, Min, Max, Dfl,	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1191: FILE: include/linux/deviceparam.h:98:
+#define DEVICE_PARAM_NAMED_RANGED(Name, Field, Type, Min, Max, Dfl, Perm, Desc)\
+	param_check_##Type(__devparam_data(Name),			\
+			   &(((__devparam_type *)0)->Field));		\
+	DEVICE_PARAM_CALL_RANGED(Name, param_set_##Type, param_get_##Type,\
+				 Field, Min, Max, Dfl, Perm, Desc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1191: FILE: include/linux/deviceparam.h:98:
+#define DEVICE_PARAM_NAMED_RANGED(Name, Field, Type, Min, Max, Dfl, Perm, Desc)\
+	param_check_##Type(__devparam_data(Name),			\
+			   &(((__devparam_type *)0)->Field));		\
+	DEVICE_PARAM_CALL_RANGED(Name, param_set_##Type, param_get_##Type,\
+				 Field, Min, Max, Dfl, Perm, Desc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Field' - possible side-effects?
#1191: FILE: include/linux/deviceparam.h:98:
+#define DEVICE_PARAM_NAMED_RANGED(Name, Field, Type, Min, Max, Dfl, Perm, Desc)\
+	param_check_##Type(__devparam_data(Name),			\
+			   &(((__devparam_type *)0)->Field));		\
+	DEVICE_PARAM_CALL_RANGED(Name, param_set_##Type, param_get_##Type,\
+				 Field, Min, Max, Dfl, Perm, Desc)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'Field' may be better as '(Field)' to avoid precedence issues
#1191: FILE: include/linux/deviceparam.h:98:
+#define DEVICE_PARAM_NAMED_RANGED(Name, Field, Type, Min, Max, Dfl, Perm, Desc)\
+	param_check_##Type(__devparam_data(Name),			\
+			   &(((__devparam_type *)0)->Field));		\
+	DEVICE_PARAM_CALL_RANGED(Name, param_set_##Type, param_get_##Type,\
+				 Field, Min, Max, Dfl, Perm, Desc)

CHECK:CAMELCASE: Avoid CamelCase: <param_check_##Type>
#1192: FILE: include/linux/deviceparam.h:99:
+	param_check_##Type(__devparam_data(Name),			\

CHECK:CAMELCASE: Avoid CamelCase: <param_set_##Type>
#1194: FILE: include/linux/deviceparam.h:101:
+	DEVICE_PARAM_CALL_RANGED(Name, param_set_##Type, param_get_##Type,\

CHECK:CAMELCASE: Avoid CamelCase: <param_get_##Type>
#1194: FILE: include/linux/deviceparam.h:101:
+	DEVICE_PARAM_CALL_RANGED(Name, param_set_##Type, param_get_##Type,\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1197: FILE: include/linux/deviceparam.h:104:
+#define DEVICE_PARAM_RANGED(Name, Type, Min, Max, Dfl, Perm, Desc)	\
+	DEVICE_PARAM_NAMED_RANGED(Name, Name, Type, Min, Max, Dfl, Perm, Desc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1203: FILE: include/linux/deviceparam.h:110:
+#define DEVICE_PARAM(Name, Type, Dfl, Perm, Desc)			\
+	DEVICE_PARAM_NAMED(Name, Name, Type, Dfl, Perm, Desc)

CHECK:CAMELCASE: Avoid CamelCase: <Len>
#1207: FILE: include/linux/deviceparam.h:114:
+#define DEVICE_PARAM_STRING_NAMED(Name, Field, Len, Dfl, Perm, Desc)	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1211: FILE: include/linux/deviceparam.h:118:
+#define DEVICE_PARAM_STRING(Name, Dfl, Perm, Desc)			\
+	DEVICE_PARAM_STRING_NAMED(Name, Name,				\
+				  sizeof(((__devparam_type *)0)->Name), \
+				  Dfl, Perm, Desc)

CHECK:CAMELCASE: Avoid CamelCase: <Flag>
#1217: FILE: include/linux/deviceparam.h:124:
+#define __DEVICE_PARAM_FLAG(Name, Field, Flag, Dfl, Inv, Perm, Desc)	\

CHECK:CAMELCASE: Avoid CamelCase: <Inv>
#1217: FILE: include/linux/deviceparam.h:124:
+#define __DEVICE_PARAM_FLAG(Name, Field, Flag, Dfl, Inv, Perm, Desc)	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1217: FILE: include/linux/deviceparam.h:124:
+#define __DEVICE_PARAM_FLAG(Name, Field, Flag, Dfl, Inv, Perm, Desc)	\
+	param_check_uint(__devparam_data(Name),				\
+			 &(((__devparam_type *)0)->Field));		\
+	static struct kparam_flag __devparam_data(__param_flag_##Name)	\
+	__devparam_extra_section = { 0, Flag, Inv };			\
+	__DEVICE_PARAM_CALL_RANGED(Name, param_set_flag, param_get_flag,\
+		&__devparam_data(__param_flag_##Name),			\
+		sizeof(struct kparam_flag), 1, 0, Dfl, 0, Perm, Desc,	\
+		offsetof(struct kparam_flag, pflags),			\
+		offsetof(__devparam_type, Field), -1, -1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Field' - possible side-effects?
#1217: FILE: include/linux/deviceparam.h:124:
+#define __DEVICE_PARAM_FLAG(Name, Field, Flag, Dfl, Inv, Perm, Desc)	\
+	param_check_uint(__devparam_data(Name),				\
+			 &(((__devparam_type *)0)->Field));		\
+	static struct kparam_flag __devparam_data(__param_flag_##Name)	\
+	__devparam_extra_section = { 0, Flag, Inv };			\
+	__DEVICE_PARAM_CALL_RANGED(Name, param_set_flag, param_get_flag,\
+		&__devparam_data(__param_flag_##Name),			\
+		sizeof(struct kparam_flag), 1, 0, Dfl, 0, Perm, Desc,	\
+		offsetof(struct kparam_flag, pflags),			\
+		offsetof(__devparam_type, Field), -1, -1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'Field' may be better as '(Field)' to avoid precedence issues
#1217: FILE: include/linux/deviceparam.h:124:
+#define __DEVICE_PARAM_FLAG(Name, Field, Flag, Dfl, Inv, Perm, Desc)	\
+	param_check_uint(__devparam_data(Name),				\
+			 &(((__devparam_type *)0)->Field));		\
+	static struct kparam_flag __devparam_data(__param_flag_##Name)	\
+	__devparam_extra_section = { 0, Flag, Inv };			\
+	__DEVICE_PARAM_CALL_RANGED(Name, param_set_flag, param_get_flag,\
+		&__devparam_data(__param_flag_##Name),			\
+		sizeof(struct kparam_flag), 1, 0, Dfl, 0, Perm, Desc,	\
+		offsetof(struct kparam_flag, pflags),			\
+		offsetof(__devparam_type, Field), -1, -1)

CHECK:CAMELCASE: Avoid CamelCase: <__param_flag_##Name>
#1220: FILE: include/linux/deviceparam.h:127:
+	static struct kparam_flag __devparam_data(__param_flag_##Name)	\

CHECK:CAMELCASE: Avoid CamelCase: <ArrField>
#1235: FILE: include/linux/deviceparam.h:142:
+#define __DEVICE_PARAM_ARRAY(Name, ArrField, Type, NumOffset, Min, Max,	\

CHECK:CAMELCASE: Avoid CamelCase: <NumOffset>
#1235: FILE: include/linux/deviceparam.h:142:
+#define __DEVICE_PARAM_ARRAY(Name, ArrField, Type, NumOffset, Min, Max,	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ArrField' - possible side-effects?
#1235: FILE: include/linux/deviceparam.h:142:
+#define __DEVICE_PARAM_ARRAY(Name, ArrField, Type, NumOffset, Min, Max,	\
+			     Dfl, Perm, Desc)				\
+	static struct kparam_array __devparam_data(__param_arr_##Name)	\
+	__devparam_extra_section = {					\
+		ARRAY_SIZE(((__devparam_type *)0)->ArrField), 0,	\
+		param_set_##Type, param_get_##Type,			\
+		sizeof(((__devparam_type *)0)->ArrField[0]), 0		\
+	};								\
+	__DEVICE_PARAM_CALL_RANGED(Name, param_array_set, param_array_get,\
+		&__devparam_data(__param_arr_##Name),			\
+		sizeof(struct kparam_array), Min, Max, Dfl, 1, Perm, Desc,\
+		offsetof(struct kparam_array, elem),			\
+		offsetof(__devparam_type, ArrField),			\
+		offsetof(struct kparam_array, num),			\
+		NumOffset, -1, -1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ArrField' may be better as '(ArrField)' to avoid precedence issues
#1235: FILE: include/linux/deviceparam.h:142:
+#define __DEVICE_PARAM_ARRAY(Name, ArrField, Type, NumOffset, Min, Max,	\
+			     Dfl, Perm, Desc)				\
+	static struct kparam_array __devparam_data(__param_arr_##Name)	\
+	__devparam_extra_section = {					\
+		ARRAY_SIZE(((__devparam_type *)0)->ArrField), 0,	\
+		param_set_##Type, param_get_##Type,			\
+		sizeof(((__devparam_type *)0)->ArrField[0]), 0		\
+	};								\
+	__DEVICE_PARAM_CALL_RANGED(Name, param_array_set, param_array_get,\
+		&__devparam_data(__param_arr_##Name),			\
+		sizeof(struct kparam_array), Min, Max, Dfl, 1, Perm, Desc,\
+		offsetof(struct kparam_array, elem),			\
+		offsetof(__devparam_type, ArrField),			\
+		offsetof(struct kparam_array, num),			\
+		NumOffset, -1, -1)

CHECK:CAMELCASE: Avoid CamelCase: <__param_arr_##Name>
#1237: FILE: include/linux/deviceparam.h:144:
+	static struct kparam_array __devparam_data(__param_arr_##Name)	\

CHECK:CAMELCASE: Avoid CamelCase: <NumField>
#1251: FILE: include/linux/deviceparam.h:158:
+#define DEVICE_PARAM_ARRAY_NAMED_RANGED(Name, ArrField, Type, NumField,	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1257: FILE: include/linux/deviceparam.h:164:
+#define DEVICE_PARAM_ARRAY_RANGED(Name, Type, NumField, Min, Max, Dfl,	\
+				  Perm, Desc)				\
+	DEVICE_PARAM_ARRAY_NAMED_RANGED(Name, Name, Type, NumField,	\
+					Min, Max, Dfl, Perm, Desc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1267: FILE: include/linux/deviceparam.h:174:
+#define DEVICE_PARAM_ARRAY(Name, Type, NumField, Dfl, Perm, Desc)	\
+	DEVICE_PARAM_ARRAY_NAMED(Name, Name, Type, NumField, Dfl, Perm, Desc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1277: FILE: include/linux/deviceparam.h:184:
+#define DEVICE_PARAM_ARR_RANGED(Name, Type, Min, Max, Dfl, Perm, Desc)	\
+	DEVICE_PARAM_ARR_NAMED_RANGED(Name, Name, Type, Min, Max,	\
+				      Dfl, Perm, Desc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Name' - possible side-effects?
#1285: FILE: include/linux/deviceparam.h:192:
+#define DEVICE_PARAM_ARR(Name, Type, Dfl, Perm, Desc)			\
+	DEVICE_PARAM_ARR_NAMED(Name, Name, Type, Dfl, Perm, Desc)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238446.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 59 warnings, 65 checks, 1272 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238446.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
