WARNING:TYPO_SPELLING: 'ohterwise' may be misspelled - perhaps 'otherwise'?
#33: 
Hopefully, this is what you had in mind - ohterwise back to the drawing
                                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#52: FILE: fs/open.c:283:
+long do_utimes(char * filename, struct timeval * times)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#52: FILE: fs/open.c:283:
+long do_utimes(char * filename, struct timeval * times)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: fs/open.c:322:
+asmlinkage long sys_utimes(char * filename, struct timeval * utimes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: fs/open.c:322:
+asmlinkage long sys_utimes(char * filename, struct timeval * utimes)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: fs/open.c:331:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: include/linux/compat.h:1:
+#ifndef _LINUX_COMPAT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'sepcific' may be misspelled - perhaps 'specific'?
#93: FILE: include/linux/compat.h:4:
+ * These are the type definitions for the arhitecure sepcific
                                                      ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/time.h:141:
+extern long do_nanosleep(struct timespec *t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: include/linux/time.h:142:
+extern long do_utimes(char * filename, struct timeval * times);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: include/linux/time.h:142:
+extern long do_utimes(char * filename, struct timeval * times);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/time.h:142:
+extern long do_utimes(char * filename, struct timeval * times);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: kernel/compat.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#147: FILE: kernel/compat.c:2:
+ *  linux/kernel/compat.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'compatibililty' may be misspelled - perhaps 'compatibility'?
#149: FILE: kernel/compat.c:4:
+ *  Kernel compatibililty routines for e.g. 32 bit syscall support
            ^^^^^^^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#164: FILE: kernel/compat.c:19:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: kernel/compat.c:22:
+asmlinkage long compat_sys_nanosleep(struct compat_timespec *rqtp,
+		struct compat_timespec *rmtp)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: kernel/compat.c:60:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: kernel/compat.c:62:
+static inline long get_compat_itimerval(struct itimerval *o,
+		struct compat_itimerval *i)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: kernel/compat.c:72:
+static inline long put_compat_itimerval(struct compat_itimerval *o,
+		struct itimerval *i)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#226: FILE: kernel/compat.c:81:
+extern int do_getitimer(int which, struct itimerval *value);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#239: FILE: kernel/compat.c:94:
+extern int do_setitimer(int which, struct itimerval *, struct itimerval *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct itimerval *' should also have an identifier name
#239: FILE: kernel/compat.c:94:
+extern int do_setitimer(int which, struct itimerval *, struct itimerval *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct itimerval *' should also have an identifier name
#239: FILE: kernel/compat.c:94:
+extern int do_setitimer(int which, struct itimerval *, struct itimerval *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: kernel/compat.c:97:
+asmlinkage long compat_sys_setitimer(int which, struct compat_itimerval *in,
+		struct compat_itimerval *out)

CHECK:BRACES: braces {} should be used on all arms of this statement
#247: FILE: kernel/compat.c:102:
+	if (in) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#250: FILE: kernel/compat.c:105:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->tv_nsec >= 1000000000L'
#277: FILE: kernel/timer.c:1027:
+	if ((t->tv_nsec >= 1000000000L) || (t->tv_nsec < 0) || (t->tv_sec < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->tv_nsec < 0'
#277: FILE: kernel/timer.c:1027:
+	if ((t->tv_nsec >= 1000000000L) || (t->tv_nsec < 0) || (t->tv_sec < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->tv_sec < 0'
#277: FILE: kernel/timer.c:1027:
+	if ((t->tv_nsec >= 1000000000L) || (t->tv_nsec < 0) || (t->tv_sec < 0))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409470.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 11 warnings, 13 checks, 247 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409470.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
