WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: drivers/dma/Kconfig:7:
+config DMA_ENGINE
+	bool "Support for DMA engines"
+	---help---
+	  DMA engines offload copy operations from the CPU to dedicated
+	  hardware, allowing the copies to happen asynchronously.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: drivers/dma/dmaengine.c:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#88: FILE: drivers/dma/dmaengine.c:2:
+/*****************************************************************************
+Copyright(c) 2004 - 2006 Intel Corporation. All rights reserved.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#101: FILE: drivers/dma/dmaengine.c:15:
+this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#154: FILE: drivers/dma/dmaengine.c:68:
+	__ATTR(memcpy_count, S_IRUGO, show_memcpy_count, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#155: FILE: drivers/dma/dmaengine.c:69:
+	__ATTR(bytes_transferred, S_IRUGO, show_bytes_transferred, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#156: FILE: drivers/dma/dmaengine.c:70:
+	__ATTR(in_use, S_IRUGO, show_in_use, NULL),

WARNING:LINE_SPACING: Missing a blank line after declarations
#165: FILE: drivers/dma/dmaengine.c:79:
+	struct dma_chan *chan = container_of(cd, struct dma_chan, class_dev);
+	kref_put(&chan->device->refcount, dma_async_device_cleanup);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#219: FILE: drivers/dma/dmaengine.c:133:
+	struct dma_chan *chan = container_of(kref, struct dma_chan, refcount);
+	chan->device->device_free_chan_resources(chan);

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: drivers/dma/dmaengine.c:143:
+	int i;
+	for_each_cpu(i)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#256: FILE: drivers/dma/dmaengine.c:170:
+	list_for_each_entry(client, &dma_client_list, global_node) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: drivers/dma/dmaengine.c:257:
+void dma_async_client_chan_request(struct dma_client *client,
+			unsigned int number)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#357: FILE: drivers/dma/dmaengine.c:271:
+	struct dma_chan* chan;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan->local"
#369: FILE: drivers/dma/dmaengine.c:283:
+		if (chan->local == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: drivers/dma/dmaengine.c:290:
+^I^I         device->dev_id, chan->chan_id);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#398: FILE: drivers/dma/dmaengine.c:312:
+	struct dma_device *device = container_of(kref, struct dma_device, refcount);
+	complete(&device->done);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#401: FILE: drivers/dma/dmaengine.c:315:
+void dma_async_device_unregister(struct dma_device* device)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#437: FILE: drivers/dma/dmaengine.c:351:
+EXPORT_SYMBOL(dma_async_client_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#438: FILE: drivers/dma/dmaengine.c:352:
+EXPORT_SYMBOL(dma_async_client_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#439: FILE: drivers/dma/dmaengine.c:353:
+EXPORT_SYMBOL(dma_async_client_chan_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#440: FILE: drivers/dma/dmaengine.c:354:
+EXPORT_SYMBOL(dma_async_memcpy_buf_to_buf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#441: FILE: drivers/dma/dmaengine.c:355:
+EXPORT_SYMBOL(dma_async_memcpy_buf_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#442: FILE: drivers/dma/dmaengine.c:356:
+EXPORT_SYMBOL(dma_async_memcpy_pg_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#443: FILE: drivers/dma/dmaengine.c:357:
+EXPORT_SYMBOL(dma_async_memcpy_complete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#444: FILE: drivers/dma/dmaengine.c:358:
+EXPORT_SYMBOL(dma_async_memcpy_issue_pending);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#445: FILE: drivers/dma/dmaengine.c:359:
+EXPORT_SYMBOL(dma_async_device_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#446: FILE: drivers/dma/dmaengine.c:360:
+EXPORT_SYMBOL(dma_async_device_unregister);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#453: FILE: include/linux/dmaengine.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#454: FILE: include/linux/dmaengine.h:2:
+/*****************************************************************************
+Copyright(c) 2004 - 2006 Intel Corporation. All rights reserved.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#467: FILE: include/linux/dmaengine.h:15:
+this program; if not, write to the Free Software Foundation, Inc., 59$

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#484: FILE: include/linux/dmaengine.h:32:
+ * enum dma_event - resource PNP/power managment events
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#557: FILE: include/linux/dmaengine.h:105:
+	if (unlikely(chan->slow_ref))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#559: FILE: include/linux/dmaengine.h:107:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#567: FILE: include/linux/dmaengine.h:115:
+	if (unlikely(chan->slow_ref))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#569: FILE: include/linux/dmaengine.h:117:
+	else {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#595: FILE: include/linux/dmaengine.h:143:
+	spinlock_t		lock;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#609: FILE: include/linux/dmaengine.h:157:
+struct dma_device {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: include/linux/dmaengine.h:170:
+	dma_cookie_t (*device_memcpy_buf_to_buf)(struct dma_chan *chan,
+			void *dest, void *src, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: include/linux/dmaengine.h:172:
+	dma_cookie_t (*device_memcpy_buf_to_pg)(struct dma_chan *chan,
+			struct page *page, unsigned int offset, void *kdata,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: include/linux/dmaengine.h:175:
+	dma_cookie_t (*device_memcpy_pg_to_pg)(struct dma_chan *chan,
+			struct page *dest_pg, unsigned int dest_off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: include/linux/dmaengine.h:178:
+	enum dma_status (*device_memcpy_complete)(struct dma_chan *chan,
+			dma_cookie_t cookie, dma_cookie_t *last,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: include/linux/dmaengine.h:188:
+void dma_async_client_chan_request(struct dma_client *client,
+		unsigned int number);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: include/linux/dmaengine.h:203:
+static inline dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
+	void *dest, void *src, size_t len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#658: FILE: include/linux/dmaengine.h:206:
+	int cpu = get_cpu();
+	per_cpu_ptr(chan->local, cpu)->bytes_transferred += len;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: include/linux/dmaengine.h:227:
+static inline dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
+	struct page *page, unsigned int offset, void *kdata, size_t len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#682: FILE: include/linux/dmaengine.h:230:
+	int cpu = get_cpu();
+	per_cpu_ptr(chan->local, cpu)->bytes_transferred += len;

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: include/linux/dmaengine.h:235:
+^I                                             kdata, len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: include/linux/dmaengine.h:253:
+static inline dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
+	struct page *dest_pg, unsigned int dest_off, struct page *src_pg,

WARNING:LINE_SPACING: Missing a blank line after declarations
#709: FILE: include/linux/dmaengine.h:257:
+	int cpu = get_cpu();
+	per_cpu_ptr(chan->local, cpu)->bytes_transferred += len;

ERROR:CODE_INDENT: code indent should use tabs where possible
#714: FILE: include/linux/dmaengine.h:262:
+^I                                            src_pg, src_off, len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: include/linux/dmaengine.h:289:
+static inline enum dma_status dma_async_memcpy_complete(struct dma_chan *chan,
+	dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#753: FILE: include/linux/dmaengine.h:301:
+ * the test logic is seperated for lightweight testing of multiple cookies
                      ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: include/linux/dmaengine.h:304:
+static inline enum dma_status dma_async_is_complete(dma_cookie_t cookie,
+			dma_cookie_t last_complete, dma_cookie_t last_used)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie <= last_complete'
#759: FILE: include/linux/dmaengine.h:307:
+		if ((cookie <= last_complete) || (cookie > last_used))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie > last_used'
#759: FILE: include/linux/dmaengine.h:307:
+		if ((cookie <= last_complete) || (cookie > last_used))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie <= last_complete'
#762: FILE: include/linux/dmaengine.h:310:
+		if ((cookie <= last_complete) && (cookie > last_used))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cookie > last_used'
#762: FILE: include/linux/dmaengine.h:310:
+		if ((cookie <= last_complete) && (cookie > last_used))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#768: FILE: include/linux/dmaengine.h:316:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095876.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 28 warnings, 24 checks, 707 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095876.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
