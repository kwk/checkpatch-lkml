CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#77: FILE: arch/i386/kernel/ldt.c:48:
+		memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
 		             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#77: FILE: arch/i386/kernel/ldt.c:48:
+		memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#77: FILE: arch/i386/kernel/ldt.c:48:
+		memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
 		                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#77: FILE: arch/i386/kernel/ldt.c:48:
+		memset(newldt+oldsize*LDT_ENTRY_SIZE, 0, (mincount-oldsize)*LDT_ENTRY_SIZE);
 		                                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#107: FILE: arch/i386/kernel/ldt.c:87:
+		memcpy(new->ldt, old->ldt, old->size*LDT_ENTRY_SIZE);
 		                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#125: FILE: arch/i386/kernel/ldt.c:96:
+	if (mm->context.size*LDT_ENTRY_SIZE > PAGE_SIZE)
 	                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: arch/i386/kernel/ldt.c:183:
+		error = alloc_ldt(&current->mm->context, mm->context.size,
+					ldt_info.entry_number+1, 1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#162: FILE: arch/i386/kernel/ldt.c:183:
+					ldt_info.entry_number+1, 1);
 					                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#178: FILE: include/asm-i386/mmu_context.h:15:
+	struct mm_struct * old_mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#184: FILE: include/asm-i386/mmu_context.h:21:
+	if (old_mm && unlikely(old_mm->context.size > 0)) {
+		retval = copy_ldt(&mm->context, &old_mm->context);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/asm-i386/desc.h:192:
+extern void destroy_ldt(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/asm-i386/desc.h:193:
+extern int copy_ldt(mm_context_t *new, mm_context_t *old);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160669.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 1 warnings, 10 checks, 154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160669.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
