WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
The file match.h specifies a sub module interface consisting of the following

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: security/apparmor/match/match.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#109: FILE: security/apparmor/match/match.h:37:
+typedef int (*aamatch_serializecb)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#117: FILE: security/apparmor/match/match.h:45:
+extern void* aamatch_alloc(enum entry_match_type type);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: security/apparmor/match/match.h:45:
+extern void* aamatch_alloc(enum entry_match_type type);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: security/apparmor/match/match.h:51:
+extern void aamatch_free(void *entry_extradata);

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#127: FILE: security/apparmor/match/match.h:55:
+ * Return value: space seperated string (of types supported - use type=value
                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#130: FILE: security/apparmor/match/match.h:58:
+extern const char* aamatch_features(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: security/apparmor/match/match.h:58:
+extern const char* aamatch_features(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: security/apparmor/match/match.h:67:
+extern int aamatch_serialize(void *entry_extradata, struct aa_ext *e,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: security/apparmor/match/match.h:78:
+extern unsigned int aamatch_match(const char *pathname, const char *entry_name,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: security/apparmor/match/match.h:82:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#161: FILE: security/apparmor/match/match.h:89:
+	const char *names[] = {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#168: FILE: security/apparmor/match/match.h:96:
+	if (type >= aa_entry_invalid) {
+		type = aa_entry_invalid;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: security/apparmor/match/match.h:111:
+static inline int aamatch_match_common(const char *path,
+					   const char *entry_name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: security/apparmor/match/match.h:112:
+^I^I^I   ^I^I   enum entry_match_type type)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: security/apparmor/match/match.h:112:
+^I^I^I   ^I^I   enum entry_match_type type)$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#197: FILE: security/apparmor/match/match.h:125:
+			__FUNCTION__, type);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#208: FILE: security/apparmor/match/match_default.c:1:
+/*

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#224: FILE: security/apparmor/match/match_default.c:17:
+static const char *features="literal tailglob";
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#226: FILE: security/apparmor/match/match_default.c:19:
+void* aamatch_alloc(enum entry_match_type type)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#256: FILE: security/apparmor/match/match_default.c:49:
+EXPORT_SYMBOL_GPL(aamatch_alloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#257: FILE: security/apparmor/match/match_default.c:50:
+EXPORT_SYMBOL_GPL(aamatch_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#258: FILE: security/apparmor/match/match_default.c:51:
+EXPORT_SYMBOL_GPL(aamatch_features);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#259: FILE: security/apparmor/match/match_default.c:52:
+EXPORT_SYMBOL_GPL(aamatch_serialize);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#260: FILE: security/apparmor/match/match_default.c:53:
+EXPORT_SYMBOL_GPL(aamatch_match);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084412.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 14 warnings, 7 checks, 194 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000084412.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
