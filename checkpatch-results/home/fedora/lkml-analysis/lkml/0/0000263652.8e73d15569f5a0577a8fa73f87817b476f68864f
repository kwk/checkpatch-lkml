WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#40: 
interface where you pass the seperate elements of the sg_io_hdr as iovec
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#59: FILE: drivers/block/Kconfig:304:
+config BLK_DEV_BSG
+	tristate "Block layer SG support"
+	---help---
+	  Saying Y or M here will enable generic SG (SCSI generic) v3
+	  support for any block device.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#201: FILE: drivers/block/scsi_ioctl.c:56:
+		unsigned end = sizeof(rq->cmd) - hdr->cmd_len;

WARNING:LINE_SPACING: Missing a blank line after declarations
#202: FILE: drivers/block/scsi_ioctl.c:57:
+		unsigned end = sizeof(rq->cmd) - hdr->cmd_len;
+		memset(rq->cmd + hdr->cmd_len, 0, end);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#265: FILE: drivers/block/scsi_ioctl.c:120:
+		int len = min((unsigned int) hdr->mx_sb_len, rq->sense_len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(unsigned int, hdr->mx_sb_len, rq->sense_len)
#265: FILE: drivers/block/scsi_ioctl.c:120:
+		int len = min((unsigned int) hdr->mx_sb_len, rq->sense_len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: drivers/ide/ide-floppy.c:1226:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#435: FILE: drivers/ide/ide-floppy.c:1231:
+	pc->request_transfer = pc->buffer_size = rq->data_len;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#523: FILE: fs/bio.c:647:
+	BUG_ON(!bio_flagged(bio, BIO_USER_MAPPED));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#578: FILE: include/linux/blkdev.h:525:
+extern void __blk_put_request(request_queue_t *, struct request *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#578: FILE: include/linux/blkdev.h:525:
+extern void __blk_put_request(request_queue_t *, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#578: FILE: include/linux/blkdev.h:525:
+extern void __blk_put_request(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#579: FILE: include/linux/blkdev.h:526:
+extern void blk_end_sync_rq(struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: include/linux/blkdev.h:545:
+extern int blk_fill_sghdr_rq(request_queue_t *, struct request *, struct sg_io_hdr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#591: FILE: include/linux/blkdev.h:545:
+extern int blk_fill_sghdr_rq(request_queue_t *, struct request *, struct sg_io_hdr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#591: FILE: include/linux/blkdev.h:545:
+extern int blk_fill_sghdr_rq(request_queue_t *, struct request *, struct sg_io_hdr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_io_hdr *' should also have an identifier name
#591: FILE: include/linux/blkdev.h:545:
+extern int blk_fill_sghdr_rq(request_queue_t *, struct request *, struct sg_io_hdr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#592: FILE: include/linux/blkdev.h:546:
+extern int blk_unmap_sghdr_rq(struct request *, struct sg_io_hdr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#592: FILE: include/linux/blkdev.h:546:
+extern int blk_unmap_sghdr_rq(struct request *, struct sg_io_hdr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_io_hdr *' should also have an identifier name
#592: FILE: include/linux/blkdev.h:546:
+extern int blk_unmap_sghdr_rq(struct request *, struct sg_io_hdr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#593: FILE: include/linux/blkdev.h:547:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#593: FILE: include/linux/blkdev.h:547:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_io_hdr *' should also have an identifier name
#593: FILE: include/linux/blkdev.h:547:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#593: FILE: include/linux/blkdev.h:547:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *, struct bio *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#612: FILE: drivers/block/bsg.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#627: FILE: drivers/block/bsg.c:16:
+ *	  seperated right now.
   	  ^^^^^^^^^

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#647: FILE: drivers/block/bsg.c:36:
+static char bsg_version[] = "block layer sg (bsg) 0.4";

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#654: FILE: drivers/block/bsg.c:43:
+	spinlock_t lock;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#686: FILE: drivers/block/bsg.c:75:
+#define dprintk(fmt, args...) printk(KERN_ERR "%s: " fmt, __FUNCTION__, ##args)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#686: FILE: drivers/block/bsg.c:75:
+#define dprintk(fmt, args...) printk(KERN_ERR "%s: " fmt, __FUNCTION__, ##args)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#758: FILE: drivers/block/bsg.c:147:
+	BUG_ON(*map == ~0UL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#759: FILE: drivers/block/bsg.c:148:
+^I^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#798: FILE: drivers/block/bsg.c:187:
+	BUG_ON(bd->done_cmds > bd->queued_cmds);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'state == TASK_INTERRUPTIBLE'
#821: FILE: drivers/block/bsg.c:210:
+	if ((state == TASK_INTERRUPTIBLE) && signal_pending(current))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#843: FILE: drivers/block/bsg.c:232:
+^I^I^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#876: FILE: drivers/block/bsg.c:265:
+	switch (hdr->dxfer_direction) {
+		case SG_DXFER_TO_FROM_DEV:
+		case SG_DXFER_FROM_DEV:
[...]
+		case SG_DXFER_TO_DEV:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: drivers/block/bsg.c:299:
+	dprintk("map hdr %p/%d/%d\n", hdr->dxferp, hdr->dxfer_len,
+					hdr->iovec_count);

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#920: FILE: drivers/block/bsg.c:309:
+	 * map scatter-gather elements seperately and string them to request
 	                               ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#939: FILE: drivers/block/bsg.c:328:
+		uaddr = (unsigned long) iov.iov_base;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#941: FILE: drivers/block/bsg.c:330:
+		if (!(uaddr & queue_dma_alignment(q))
+		    && !(iov.iov_len & queue_dma_alignment(q)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1028: FILE: drivers/block/bsg.c:417:
+		BUG_ON(bc->cpu != smp_processor_id());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: drivers/block/bsg.c:461:
+	dprintk("%s: finished rq %p bio %p, bc %p offset %d\n", bd->name, rq,
+							bc, bc->bio,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1091: FILE: drivers/block/bsg.c:480:
+	if (done) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1109: FILE: drivers/block/bsg.c:498:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1220: FILE: drivers/block/bsg.c:609:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: drivers/block/bsg.c:609:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1232: FILE: drivers/block/bsg.c:621:
+^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1238: FILE: drivers/block/bsg.c:627:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1253: FILE: drivers/block/bsg.c:642:
+		BUG_ON(IS_ERR(bc));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1269: FILE: drivers/block/bsg.c:658:
+typedef struct bsg_command *(*bsg_command_callback)(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1301: FILE: drivers/block/bsg.c:690:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1302: FILE: drivers/block/bsg.c:691:
+		if (copy_to_user(buf, (char *) &bc->hdr, sizeof(bc->hdr)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ret' - possible side-effects?
#1318: FILE: drivers/block/bsg.c:707:
+#define err_block_err(ret)	\
+	((ret) && (ret) != -ENOSPC && (ret) != -ENODATA && (ret) != -EAGAIN)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1337: FILE: drivers/block/bsg.c:726:
+	ret = __bsg_read(buf, count, bsg_get_done_cmd,
+			bd, NULL, &bytes_read);

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1355: FILE: drivers/block/bsg.c:744:
+	dprintk("iov[0] = {%p, %Zu}, bc->uhdr = {%p, %Zu}\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1362: FILE: drivers/block/bsg.c:751:
+	dprintk("iov[1] = {%p, %Zu}, bc->hdr.dxferp = {%p, %Zu}\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1369: FILE: drivers/block/bsg.c:758:
+	dprintk("iov[2] = {%p, %Zu}, bc->hdr.sbp = {%p, %Zu}\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1381: FILE: drivers/block/bsg.c:770:
+static struct bsg_command *__get_cmd_by_hdr(struct bsg_device *bd,
+		struct iovec *iov)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1426: FILE: drivers/block/bsg.c:815:
+          unsigned long nr_segs, loff_t *ppos)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1426: FILE: drivers/block/bsg.c:815:
+          unsigned long nr_segs, loff_t *ppos)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1440: FILE: drivers/block/bsg.c:829:
+^Idprintk("[{%p,%Zu},{%p,%Zu},{%p,%Zu}]\n", $

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1440: FILE: drivers/block/bsg.c:829:
+	dprintk("[{%p,%Zu},{%p,%Zu},{%p,%Zu}]\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1448: FILE: drivers/block/bsg.c:837:
+	ret = __bsg_read(iov->iov_base, iov->iov_len, __get_cmd_by_hdr,
+			bd, iov, &bytes_read);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1453: FILE: drivers/block/bsg.c:842:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1459: FILE: drivers/block/bsg.c:848:
+__bsg_write(struct bsg_device *bd,
+	const char __user *buf, size_t count,

CHECK:SPACING: No space is necessary after a cast
#1486: FILE: drivers/block/bsg.c:875:
+		bc->uhdr = (void *) buf;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1518: FILE: drivers/block/bsg.c:907:
+^I$

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1555: FILE: drivers/block/bsg.c:944:
+	dprintk("iov[0] = {%p, %Zu}, sizeof(struct sg_io_hdr) = %Zu\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1567: FILE: drivers/block/bsg.c:956:
+	dprintk("iov[1] = {%p, %Zu}, hdr->cmdp = {%p, %Zu}\n",

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1575: FILE: drivers/block/bsg.c:964:
+	dprintk("iov[2] = {%p, %Zu}, hdr->dxferp = {%p, %Zu}\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1588: FILE: drivers/block/bsg.c:977:
+bsg_writev(struct file *file, const struct iovec __user *_iov,
+	    unsigned long nr_segs, loff_t *ppos)

WARNING:PRINTF_Z: %Zu is non-standard C, use %zu
#1602: FILE: drivers/block/bsg.c:991:
+	dprintk("[{%p,%Zu},{%p,%Zu},{%p,%Zu}]\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bd)...) over kmalloc(sizeof(struct bsg_device)...)
#1626: FILE: drivers/block/bsg.c:1015:
+	struct bsg_device *bd = kmalloc(sizeof(struct bsg_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1640: FILE: drivers/block/bsg.c:1029:
+	cmd_bitmap = kmalloc(bits * sizeof(unsigned long), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: No space is necessary after a cast
#1645: FILE: drivers/block/bsg.c:1034:
+	cmd_map = (struct bsg_command *) __get_free_pages(GFP_KERNEL,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1655: FILE: drivers/block/bsg.c:1044:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1702: FILE: drivers/block/bsg.c:1091:
+	free_pages((unsigned long) bd->cmd_map, BSG_CMDS_PAGE_ORDER);

CHECK:SPACING: No space is necessary after a cast
#1812: FILE: drivers/block/bsg.c:1201:
+	int __user *uarg = (int __user *) arg;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1817: FILE: drivers/block/bsg.c:1206:
+	switch (cmd) {
[...]
+		case BSG_IOC_ADD:
[...]
+		case SG_GET_COMMAND_Q:
[...]
+		case SG_GET_VERSION_NUM:
+		case SCSI_IOCTL_GET_IDLUN:
+		case SCSI_IOCTL_GET_BUS_NUMBER:
+		case SG_SET_TIMEOUT:
+		case SG_GET_TIMEOUT:
+		case SG_GET_RESERVED_SIZE:
+		case SG_SET_RESERVED_SIZE:
+		case SG_EMULATED_HOST:
+		case SG_IO:
[...]
+		default:

CHECK:SPACING: No space is necessary after a cast
#1855: FILE: drivers/block/bsg.c:1244:
+			void __user *uarg = (void __user *) arg;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1856: FILE: drivers/block/bsg.c:1245:
+			void __user *uarg = (void __user *) arg;
+			return scsi_cmd_ioctl(bd->bdev->bd_disk, cmd, uarg);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1866: FILE: drivers/block/bsg.c:1255:
+static struct file_operations bsg_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1910: FILE: drivers/block/bsg.c:1299:
+	printk(KERN_INFO "%s loaded\n", bsg_version);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1932: FILE: drivers/block/bsg.h:1:
+#ifndef BSG_H

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 42 warnings, 29 checks, 1811 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
