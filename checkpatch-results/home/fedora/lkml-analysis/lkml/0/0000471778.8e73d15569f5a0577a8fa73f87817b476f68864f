CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#27: 
Le  5 Mar, Pavel Machek a écrit :
                          ^

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#38: 
>> have reenabled your panic ! I believe that if a task isn't stopped
        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'carefull' may be misspelled - perhaps 'careful'?
#63: 
>> > 2) Be carefull using swsusp patch. Real carefull.
           ^^^^^^^^

WARNING:TYPO_SPELLING: 'carefull' may be misspelled - perhaps 'careful'?
#63: 
>> > 2) Be carefull using swsusp patch. Real carefull.
                                             ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#94: 
diff -u linux/arch/i386/kernel/apm.c:1.1.1.3 linux/arch/i386/kernel/apm.c:1.1.1.1.2.1.2.2

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#111: FILE: arch/i386/kernel/apm.c:1235:
+	 * fall back to standard APM method */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#112: FILE: arch/i386/kernel/apm.c:1236:
+	if (!software_suspend_enabled) {
[...]
 	get_time_diff();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#122: FILE: arch/i386/kernel/apm.c:1246:
+		/* XXX Is this safe? What if it's due to a user-suspend?
+		XXX Well it seems to work for me -- jsh */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#122: FILE: arch/i386/kernel/apm.c:1246:
+		XXX Well it seems to work for me -- jsh */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: arch/i386/kernel/apm.c:1249:
+		software_suspend ();

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#136: FILE: arch/i386/kernel/apm.c:1597:
+^Istatic int ^Ioldpercentage  = -1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: arch/i386/kernel/apm.c:1599:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: arch/i386/kernel/apm.c:1599:
+ $

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#146: FILE: arch/i386/kernel/apm.c:1655:
+	/* old_ac_status is the state of a control automata. If the state is the same as the returned

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#147: FILE: arch/i386/kernel/apm.c:1656:
+	/* old_ac_status is the state of a control automata. If the state is the same as the returned
+	   status ac_line_status, we check if the percentage value behaves in a coherent way. If not

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#149: FILE: arch/i386/kernel/apm.c:1658:
+	   percentage value is still coherent. If so, we correct the buggy values that were returned.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#151: FILE: arch/i386/kernel/apm.c:1660:
+	   read percentage value. */

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: arch/i386/kernel/apm.c:1661:
+	if(ac_line_status) {	/* we should be charging */

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: arch/i386/kernel/apm.c:1662:
+^I  ^Iif(old_ac_status && (oldpercentage > percentage)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: arch/i386/kernel/apm.c:1662:
+^I  ^Iif(old_ac_status && (oldpercentage > percentage)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldpercentage > percentage'
#153: FILE: arch/i386/kernel/apm.c:1662:
+	  	if(old_ac_status && (oldpercentage > percentage)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: arch/i386/kernel/apm.c:1662:
+	  	if(old_ac_status && (oldpercentage > percentage)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/i386/kernel/apm.c:1663:
+^I  ^I^Iprintk(KERN_INFO "apm: Buggy BIOS : battery is discharging, assuming AC off line\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: arch/i386/kernel/apm.c:1663:
+^I  ^I^Iprintk(KERN_INFO "apm: Buggy BIOS : battery is discharging, assuming AC off line\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#154: FILE: arch/i386/kernel/apm.c:1663:
+	  		printk(KERN_INFO "apm: Buggy BIOS : battery is discharging, assuming AC off line\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: arch/i386/kernel/apm.c:1664:
+^I^I^Iold_ac_status = 0xf00; /* I want a non zero value because $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#156: FILE: arch/i386/kernel/apm.c:1665:
+			old_ac_status = 0xf00; /* I want a non zero value because 
+						  there is a change in state */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#156: FILE: arch/i386/kernel/apm.c:1665:
+						  there is a change in state */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#158: FILE: arch/i386/kernel/apm.c:1667:
+		if((!(old_ac_status & 0xff)) && (oldpercentage >= percentage)) { /* still discharging */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldpercentage >= percentage'
#158: FILE: arch/i386/kernel/apm.c:1667:
+		if((!(old_ac_status & 0xff)) && (oldpercentage >= percentage)) { /* still discharging */

ERROR:SPACING: space required before the open parenthesis '('
#158: FILE: arch/i386/kernel/apm.c:1667:
+		if((!(old_ac_status & 0xff)) && (oldpercentage >= percentage)) { /* still discharging */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#160: FILE: arch/i386/kernel/apm.c:1669:
+			if(battery_status == 0x03) /* if charging */
+			  battery_status = 0x00; /* assuming high */

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: arch/i386/kernel/apm.c:1669:
+			if(battery_status == 0x03) /* if charging */

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: arch/i386/kernel/apm.c:1674:
+^I  ^Iif((!old_ac_status) && (oldpercentage < percentage)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: arch/i386/kernel/apm.c:1674:
+^I  ^Iif((!old_ac_status) && (oldpercentage < percentage)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!old_ac_status'
#165: FILE: arch/i386/kernel/apm.c:1674:
+	  	if((!old_ac_status) && (oldpercentage < percentage)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldpercentage < percentage'
#165: FILE: arch/i386/kernel/apm.c:1674:
+	  	if((!old_ac_status) && (oldpercentage < percentage)) {

ERROR:SPACING: space required before the open parenthesis '('
#165: FILE: arch/i386/kernel/apm.c:1674:
+	  	if((!old_ac_status) && (oldpercentage < percentage)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: arch/i386/kernel/apm.c:1675:
+^I  ^I^Iprintk(KERN_INFO "apm: Buggy BIOS : battery is charging, assuming AC on line\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: arch/i386/kernel/apm.c:1675:
+^I  ^I^Iprintk(KERN_INFO "apm: Buggy BIOS : battery is charging, assuming AC on line\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#166: FILE: arch/i386/kernel/apm.c:1675:
+	  		printk(KERN_INFO "apm: Buggy BIOS : battery is charging, assuming AC on line\n");

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#167: FILE: arch/i386/kernel/apm.c:1676:
+			old_ac_status = 0xff; /* I want a non 0x01 value because there is a change in state */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldpercentage <= percentage'
#169: FILE: arch/i386/kernel/apm.c:1678:
+		if(old_ac_status && (oldpercentage <= percentage)) { /* still charging */

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: arch/i386/kernel/apm.c:1678:
+		if(old_ac_status && (oldpercentage <= percentage)) { /* still charging */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#174: FILE: arch/i386/kernel/apm.c:1683:
+	if(ac_line_status != old_ac_status) {
+	  queue_event(APM_POWER_STATUS_CHANGE, NULL);

ERROR:SPACING: space required before the open parenthesis '('
#174: FILE: arch/i386/kernel/apm.c:1683:
+	if(ac_line_status != old_ac_status) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#174: FILE: arch/i386/kernel/apm.c:1683:
+	if(ac_line_status != old_ac_status) {
+	  queue_event(APM_POWER_STATUS_CHANGE, NULL);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#179: FILE: arch/i386/kernel/apm.c:1688:
+	/* Some BIOSes send a low battery event below 60% and nothing else at 5% nor before blackout !

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: arch/i386/kernel/apm.c:1689:
+^I   For those BIOSes creating events here may help. But we don't want to send too many events so $

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#180: FILE: arch/i386/kernel/apm.c:1689:
+	   For those BIOSes creating events here may help. But we don't want to send too many events so 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#180: FILE: arch/i386/kernel/apm.c:1689:
+	/* Some BIOSes send a low battery event below 60% and nothing else at 5% nor before blackout !
+	   For those BIOSes creating events here may help. But we don't want to send too many events so 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: arch/i386/kernel/apm.c:1690:
+	   we send them only when percentage changes */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#182: FILE: arch/i386/kernel/apm.c:1691:
+	if((!ac_line_status)
[...]
+	  queue_event(APM_LOW_BATTERY, NULL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ac_line_status'
#182: FILE: arch/i386/kernel/apm.c:1691:
+	if((!ac_line_status)
+	   &&(oldpercentage > percentage)
+	   &&(battery_flag & 0x04)
+	   &&(battery_status == 0x02)) {

ERROR:SPACING: space required before the open parenthesis '('
#182: FILE: arch/i386/kernel/apm.c:1691:
+	if((!ac_line_status)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#183: FILE: arch/i386/kernel/apm.c:1692:
+	if((!ac_line_status)
+	   &&(oldpercentage > percentage)

ERROR:SPACING: spaces required around that '&&' (ctx:ExV)
#183: FILE: arch/i386/kernel/apm.c:1692:
+	   &&(oldpercentage > percentage)
 	   ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#184: FILE: arch/i386/kernel/apm.c:1693:
+	   &&(oldpercentage > percentage)
+	   &&(battery_flag & 0x04)

ERROR:SPACING: spaces required around that '&&' (ctx:ExV)
#184: FILE: arch/i386/kernel/apm.c:1693:
+	   &&(battery_flag & 0x04)
 	   ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#185: FILE: arch/i386/kernel/apm.c:1694:
+	   &&(battery_flag & 0x04)
+	   &&(battery_status == 0x02)) {

ERROR:SPACING: spaces required around that '&&' (ctx:ExV)
#185: FILE: arch/i386/kernel/apm.c:1694:
+	   &&(battery_status == 0x02)) {
 	   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: arch/i386/kernel/apm.c:1699:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: drivers/char/agp/agpgart_be.c:653:
+  ^Iprintk(KERN_WARNING "Suspending agp\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: drivers/char/agp/agpgart_be.c:653:
+  ^Iprintk(KERN_WARNING "Suspending agp\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/char/agp/agpgart_be.c:653:
+  ^Iprintk(KERN_WARNING "Suspending agp\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#211: FILE: drivers/char/agp/agpgart_be.c:653:
+  	printk(KERN_WARNING "Suspending agp\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: drivers/char/agp/agpgart_be.c:659:
+  ^Iprintk(KERN_WARNING "Resuming agp\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: drivers/char/agp/agpgart_be.c:659:
+  ^Iprintk(KERN_WARNING "Resuming agp\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: drivers/char/agp/agpgart_be.c:659:
+  ^Iprintk(KERN_WARNING "Resuming agp\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#217: FILE: drivers/char/agp/agpgart_be.c:659:
+  	printk(KERN_WARNING "Resuming agp\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: drivers/char/agp/agpgart_be.c:4225:
+^I^I    ^Iprintk(KERN_WARNING "Suspending power agp\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: drivers/char/agp/agpgart_be.c:4225:
+^I^I    ^Iprintk(KERN_WARNING "Suspending power agp\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#251: FILE: drivers/char/agp/agpgart_be.c:4225:
+		    	printk(KERN_WARNING "Suspending power agp\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: drivers/char/agp/agpgart_be.c:4228:
+^I^I    ^Iprintk(KERN_WARNING "Resuming power agp\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: drivers/char/agp/agpgart_be.c:4228:
+^I^I    ^Iprintk(KERN_WARNING "Resuming power agp\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#254: FILE: drivers/char/agp/agpgart_be.c:4228:
+		    	printk(KERN_WARNING "Resuming power agp\n");

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#305: FILE: fs/jbd/journal.c:252:
+		if (current->flags & PF_FREEZE) { /* The simpler the better. Flushing journal isn't a

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#306: FILE: fs/jbd/journal.c:253:
+		if (current->flags & PF_FREEZE) { /* The simpler the better. Flushing journal isn't a
+						     good idea, because that depends on threads that

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#307: FILE: fs/jbd/journal.c:254:
+						     may be already stopped. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: fs/jbd/journal.c:257:
+^I^I^Ijbd_debug(1, "Resuming kjournald\n");^I^I^I^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#311: FILE: fs/jbd/journal.c:258:
+		} else		/* we assume on resume that commits are already there,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#312: FILE: fs/jbd/journal.c:259:
+		} else		/* we assume on resume that commits are already there,
+				   so we don't sleep */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#312: FILE: fs/jbd/journal.c:259:
+				   so we don't sleep */

WARNING:SPLIT_STRING: quoted string split across lines
#328: FILE: fs/jbd/transaction.c:1412:
+		jbd_debug(2, "transaction %d too old, requesting commit for "
+					"handle %p\n", tid, handle);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: fs/reiserfs/journal.c:1839:
+  current->flags |= PF_KERNTHREAD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: fs/reiserfs/journal.c:1852:
+    if (current->flags & PF_FREEZE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#356: FILE: fs/reiserfs/journal.c:1852:
+    if (current->flags & PF_FREEZE)
+      refrigerator(PF_IOTHREAD);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: fs/reiserfs/journal.c:1853:
+      refrigerator(PF_IOTHREAD);$

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#372: FILE: include/asm-i386/suspend.h:263:
+		do_magic_suspend_2(); /* We should never return from here except when suspension fails */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#374: FILE: include/asm-i386/suspend.h:265:
+		/*restore_processor_context();
+		return;*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#374: FILE: include/asm-i386/suspend.h:265:
+		return;*/

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#386: FILE: include/linux/sched.h:433:
+#define PF_KERNTHREAD	0x00040000	/* this thread is a kernel thread that cannot be sent signals to */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#407: FILE: include/linux/suspend.h:55:
+extern void refrigerator(unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#407: FILE: include/linux/suspend.h:55:
+extern void refrigerator(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#415: FILE: include/linux/suspend.h:62:
+#define refrigerator(a)			do { BUG(); } while(0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#415: FILE: include/linux/suspend.h:62:
+#define refrigerator(a)			do { BUG(); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#415: FILE: include/linux/suspend.h:62:
+#define refrigerator(a)			do { BUG(); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#440: FILE: kernel/suspend.c:101:
+#define TIMEOUT	(12 * HZ)			/* Timeout for stopping processes (flushing ext3 journal

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#441: FILE: kernel/suspend.c:102:
+#define TIMEOUT	(12 * HZ)			/* Timeout for stopping processes (flushing ext3 journal
+						   may take a while */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#441: FILE: kernel/suspend.c:102:
+						   may take a while */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#449: FILE: kernel/suspend.c:136:
+static int pm_suspend_state = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#478: FILE: kernel/suspend.c:216:
+#define INTERESTING_FORCE(p) \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			/* We want to touch *only* kernel_threads on second pass...*/ \
+			if (!(p->flags & PF_KERNTHREAD)) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#478: FILE: kernel/suspend.c:216:
+#define INTERESTING_FORCE(p) \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			/* We want to touch *only* kernel_threads on second pass...*/ \
+			if (!(p->flags & PF_KERNTHREAD)) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#478: FILE: kernel/suspend.c:216:
+#define INTERESTING_FORCE(p) \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			/* We want to touch *only* kernel_threads on second pass...*/ \
+			if (!(p->flags & PF_KERNTHREAD)) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#478: FILE: kernel/suspend.c:216:
+#define INTERESTING_FORCE(p) \
+			if (p->flags & PF_IOTHREAD) \
+				continue; \
+			/* We want to touch *only* kernel_threads on second pass...*/ \
+			if (!(p->flags & PF_KERNTHREAD)) \
+				continue; \
+			if (p == current) \
+				continue; \
+			if (p->state == TASK_ZOMBIE) \
+				continue;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#504: FILE: kernel/suspend.c:242:
+				/* kernel threads like journal, swap or update
+				   must not be wake up on resume */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: kernel/suspend.c:242:
+				   must not be wake up on resume */

ERROR:SPACING: space required before the open parenthesis '('
#505: FILE: kernel/suspend.c:243:
+	if(flag)

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#506: FILE: kernel/suspend.c:244:
+		flush_signals(current); /* We have signaled a kernel thread, which isn't normal behaviour

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#507: FILE: kernel/suspend.c:245:
+					   and that may lead to 100%CPU sucking because those threads

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#507: FILE: kernel/suspend.c:245:
+		flush_signals(current); /* We have signaled a kernel thread, which isn't normal behaviour
+					   and that may lead to 100%CPU sucking because those threads

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#508: FILE: kernel/suspend.c:246:
+					   just don't manage signals. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#528: FILE: kernel/suspend.c:261:
+	if(force)
+	  PRINTS( "Waiting for kernel threads to stop... " );

ERROR:SPACING: space required before the open parenthesis '('
#528: FILE: kernel/suspend.c:261:
+	if(force)

ERROR:SPACING: space prohibited after that open parenthesis '('
#529: FILE: kernel/suspend.c:262:
+	  PRINTS( "Waiting for kernel threads to stop... " );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#529: FILE: kernel/suspend.c:262:
+	  PRINTS( "Waiting for kernel threads to stop... " );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#530: FILE: kernel/suspend.c:263:
+	else
+	  PRINTS( "Waiting for tasks to stop... " );

ERROR:SPACING: space prohibited after that open parenthesis '('
#531: FILE: kernel/suspend.c:264:
+	  PRINTS( "Waiting for tasks to stop... " );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#531: FILE: kernel/suspend.c:264:
+	  PRINTS( "Waiting for tasks to stop... " );

ERROR:SPACING: space required before the open parenthesis '('
#539: FILE: kernel/suspend.c:271:
+			if(force) { /* we now deal with kernel threads */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#557: FILE: kernel/suspend.c:305:
+	if(force)
+	  PRINTR( "Restarting kernel threads..." );

ERROR:SPACING: space required before the open parenthesis '('
#557: FILE: kernel/suspend.c:305:
+	if(force)

ERROR:SPACING: space prohibited after that open parenthesis '('
#558: FILE: kernel/suspend.c:306:
+	  PRINTR( "Restarting kernel threads..." );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#558: FILE: kernel/suspend.c:306:
+	  PRINTR( "Restarting kernel threads..." );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#559: FILE: kernel/suspend.c:307:
+	else
+	  PRINTR( "Restarting tasks..." );

ERROR:SPACING: space prohibited after that open parenthesis '('
#560: FILE: kernel/suspend.c:308:
+	  PRINTR( "Restarting tasks..." );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#560: FILE: kernel/suspend.c:308:
+	  PRINTR( "Restarting tasks..." );

ERROR:SPACING: space required before the open parenthesis '('
#564: FILE: kernel/suspend.c:311:
+		if(force) { /* we first deal with kernel threads */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#565: FILE: kernel/suspend.c:312:
+^I^I^IINTERESTING_FORCE(p);^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: kernel/suspend.c:315:
+^I^I}^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: kernel/suspend.c:320:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#576: FILE: kernel/suspend.c:322:
+				/* Those are kernel threads like kswapd,
+				   kjournald, kupdated. They are forced into

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#578: FILE: kernel/suspend.c:324:
+				   All special stuff can be done here if necessary. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#579: FILE: kernel/suspend.c:325:
+		if (p->flags & PF_KERNTHREAD) {	/* first the kernell threads */
+		  wake_up_process(p);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#581: FILE: kernel/suspend.c:327:
+		} else if(!force) /* second the other tasks */
+		  wake_up_process(p);

ERROR:SPACING: space required before the open parenthesis '('
#581: FILE: kernel/suspend.c:327:
+		} else if(!force) /* second the other tasks */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#595: FILE: kernel/suspend.c:664:
+#if 0

ERROR:SPACING: space prohibited after that open parenthesis '('
#602: FILE: kernel/suspend.c:671:
+		PRINTS( "Not all kernel threads stopped!\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#602: FILE: kernel/suspend.c:671:
+		PRINTS( "Not all kernel threads stopped!\n" );

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#603: FILE: kernel/suspend.c:672:
+#if 0 && CONFIG_JBD		/* ext3 doesn't like *at all* to be resumed from an unsuspended state */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#603: FILE: kernel/suspend.c:672:
+#if 0 && CONFIG_JBD		/* ext3 doesn't like *at all* to be resumed from an unsuspended state */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#617: FILE: kernel/suspend.c:700:
+			printk( "(%d)", i );

ERROR:SPACING: space prohibited after that open parenthesis '('
#617: FILE: kernel/suspend.c:700:
+			printk( "(%d)", i );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#617: FILE: kernel/suspend.c:700:
+			printk( "(%d)", i );

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#619: FILE: kernel/suspend.c:702:
+			printk( ".", i );

ERROR:SPACING: space prohibited after that open parenthesis '('
#619: FILE: kernel/suspend.c:702:
+			printk( ".", i );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#619: FILE: kernel/suspend.c:702:
+			printk( ".", i );

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#625: FILE: kernel/suspend.c:707:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#639: FILE: kernel/suspend.c:742:
+#if 0

ERROR:SPACING: space required before the open parenthesis '('
#663: FILE: kernel/suspend.c:770:
+	if(!pm_suspend_state) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#663: FILE: kernel/suspend.c:770:
+	if(!pm_suspend_state) {
[...]
+	} else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#664: FILE: kernel/suspend.c:771:
+		if(pm_send_all(PM_SUSPEND,(void *)3)) {
 		                         ^

ERROR:SPACING: space required before the open parenthesis '('
#664: FILE: kernel/suspend.c:771:
+		if(pm_send_all(PM_SUSPEND,(void *)3)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#665: FILE: kernel/suspend.c:772:
+			printk(KERN_WARNING "Problem while sending suspend event\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#666: FILE: kernel/suspend.c:773:
+			return(1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#668: FILE: kernel/suspend.c:775:
+		pm_suspend_state=1;
 		                ^

CHECK:BRACES: Unbalanced braces around else statement
#669: FILE: kernel/suspend.c:776:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#670: FILE: kernel/suspend.c:777:
+		printk(KERN_WARNING "PM suspend state already raised\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: kernel/suspend.c:778:
+^I  $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#672: FILE: kernel/suspend.c:779:
+	return(0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: kernel/suspend.c:788:
+  ^Iif(flags & RESUME_PHASE2) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#681: FILE: kernel/suspend.c:788:
+  ^Iif(flags & RESUME_PHASE2) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: kernel/suspend.c:788:
+  ^Iif(flags & RESUME_PHASE2) {$

ERROR:SPACING: space required before the open parenthesis '('
#681: FILE: kernel/suspend.c:788:
+  	if(flags & RESUME_PHASE2) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: kernel/suspend.c:793:
+  ^Iif(flags & RESUME_PHASE1) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#686: FILE: kernel/suspend.c:793:
+  ^Iif(flags & RESUME_PHASE1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: kernel/suspend.c:793:
+  ^Iif(flags & RESUME_PHASE1) {$

ERROR:SPACING: space required before the open parenthesis '('
#686: FILE: kernel/suspend.c:793:
+  	if(flags & RESUME_PHASE1) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: kernel/suspend.c:798:
+  ^Iif(flags & RESUME_PHASE2) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#691: FILE: kernel/suspend.c:798:
+  ^Iif(flags & RESUME_PHASE2) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: kernel/suspend.c:798:
+  ^Iif(flags & RESUME_PHASE2) {$

ERROR:SPACING: space required before the open parenthesis '('
#691: FILE: kernel/suspend.c:798:
+  	if(flags & RESUME_PHASE2) {

ERROR:SPACING: space required before the open parenthesis '('
#692: FILE: kernel/suspend.c:799:
+		if(pm_suspend_state) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#692: FILE: kernel/suspend.c:799:
+		if(pm_suspend_state) {
[...]
+		} else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#693: FILE: kernel/suspend.c:800:
+			if(pm_send_all(PM_RESUME,(void *)0))
 			                        ^

ERROR:SPACING: space required before the open parenthesis '('
#693: FILE: kernel/suspend.c:800:
+			if(pm_send_all(PM_RESUME,(void *)0))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#694: FILE: kernel/suspend.c:801:
+				printk(KERN_WARNING "Problem while sending resume event\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#695: FILE: kernel/suspend.c:802:
+			pm_suspend_state=0;
 			                ^

CHECK:BRACES: Unbalanced braces around else statement
#696: FILE: kernel/suspend.c:803:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#697: FILE: kernel/suspend.c:804:
+			printk(KERN_WARNING "PM suspend state wasn't raised\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#754: FILE: kernel/suspend.c:975:
+	printk(KERN_WARNING "%sSuspend failed, trying to recover...\n", name_suspend);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: kernel/suspend.c:992:
+^Iprintk(KERN_WARNING "%sLeaving do_magic_suspend_2...\n", name_suspend);^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#776: FILE: kernel/suspend.c:992:
+	printk(KERN_WARNING "%sLeaving do_magic_suspend_2...\n", name_suspend);	

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#790: FILE: kernel/suspend.c:1021:
+			if(drivers_suspend()==0)
+			  do_magic(0);			/* This function returns after machine woken up from resume */

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#790: FILE: kernel/suspend.c:1021:
+			if(drivers_suspend()==0)
 			                    ^

ERROR:SPACING: space required before the open parenthesis '('
#790: FILE: kernel/suspend.c:1021:
+			if(drivers_suspend()==0)

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#791: FILE: kernel/suspend.c:1022:
+			  do_magic(0);			/* This function returns after machine woken up from resume */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#810: FILE: kernel/suspend.c:1389:
 	if(!resume_status)
+	  printk(KERN_WARNING "noresume option has overridden a resume= option\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#812: FILE: kernel/suspend.c:1390:
+	  printk(KERN_WARNING "noresume option has overridden a resume= option\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: mm/page_alloc.c:360:
+#endif^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#838: FILE: mm/page_alloc.c:403:
+	loopcount=0;
 	         ^

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#843: FILE: mm/page_alloc.c:408:
+				   1000 calls to reschedule should be sufficient to recall all of them since

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#843: FILE: mm/page_alloc.c:408:
+	loopcount++;		/* when using memeat, we ask for all pages that are really free.
+				   1000 calls to reschedule should be sufficient to recall all of them since

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#845: FILE: mm/page_alloc.c:410:
+				   Actually I consider this as a bug of alloc_pages, since allocating a

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#847: FILE: mm/page_alloc.c:412:
+				   memory is available (cbd) */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#848: FILE: mm/page_alloc.c:413:
+	if((order == 0)&&(loopcount > 1000))
+	  return NULL;

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#848: FILE: mm/page_alloc.c:413:
+	if((order == 0)&&(loopcount > 1000))
 	               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'order == 0'
#848: FILE: mm/page_alloc.c:413:
+	if((order == 0)&&(loopcount > 1000))

ERROR:SPACING: space required before the open parenthesis '('
#848: FILE: mm/page_alloc.c:413:
+	if((order == 0)&&(loopcount > 1000))

WARNING:TABSTOP: Statements should start on a tabstop
#849: FILE: mm/page_alloc.c:414:
+	  return NULL;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000471778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 73 errors, 107 warnings, 20 checks, 696 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000471778.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
