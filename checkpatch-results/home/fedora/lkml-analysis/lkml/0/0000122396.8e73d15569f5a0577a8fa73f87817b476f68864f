WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#28: 
This patch adds the basic RTC subsytem infrastructure
                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#68: FILE: include/linux/rtc.h:109:
+	int (*open)(struct device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#69: FILE: include/linux/rtc.h:110:
+	void (*release)(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#70: FILE: include/linux/rtc.h:111:
+	int (*ioctl)(struct device *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#70: FILE: include/linux/rtc.h:111:
+	int (*ioctl)(struct device *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#70: FILE: include/linux/rtc.h:111:
+	int (*ioctl)(struct device *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#71: FILE: include/linux/rtc.h:112:
+	int (*read_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_time *' should also have an identifier name
#71: FILE: include/linux/rtc.h:112:
+	int (*read_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#72: FILE: include/linux/rtc.h:113:
+	int (*set_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_time *' should also have an identifier name
#72: FILE: include/linux/rtc.h:113:
+	int (*set_time)(struct device *, struct rtc_time *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#73: FILE: include/linux/rtc.h:114:
+	int (*read_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_wkalrm *' should also have an identifier name
#73: FILE: include/linux/rtc.h:114:
+	int (*read_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#74: FILE: include/linux/rtc.h:115:
+	int (*set_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_wkalrm *' should also have an identifier name
#74: FILE: include/linux/rtc.h:115:
+	int (*set_alarm)(struct device *, struct rtc_wkalrm *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#75: FILE: include/linux/rtc.h:116:
+	int (*proc)(struct device *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#75: FILE: include/linux/rtc.h:116:
+	int (*proc)(struct device *, struct seq_file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#76: FILE: include/linux/rtc.h:117:
+	int (*set_mmss)(struct device *, unsigned long secs);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#80: FILE: include/linux/rtc.h:121:
+struct rtc_device
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#83: FILE: include/linux/rtc.h:124:
+	struct rtc_class_ops *ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#93: FILE: include/linux/rtc.h:134:
+};
+#define to_rtc_device(d) container_of(d, struct rtc_device, class_dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#95: FILE: include/linux/rtc.h:136:
+static inline struct rtc_class_ops *rtc_get_ops(struct class_device *class_dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: include/linux/rtc.h:139:
+	struct rtc_device *rtc = to_rtc_device(class_dev);
+	return rtc->ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/rtc.h:142:
+extern int rtc_interface_register(struct class_interface *intf);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/rtc.h:143:
+extern struct rtc_device *rtc_device_register(struct device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: include/linux/rtc.h:144:
+extern struct rtc_device *rtc_device_register(struct device *dev,
+					struct rtc_class_ops *ops);

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#103: FILE: include/linux/rtc.h:144:
+					struct rtc_class_ops *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/rtc.h:145:
+extern void rtc_device_unregister(struct rtc_device *rdev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#106: FILE: include/linux/rtc.h:147:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/rtc.h:148:
+extern int rtc_month_days(unsigned int month, unsigned int year);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/rtc.h:149:
+extern int rtc_valid_tm(struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/rtc.h:150:
+extern void rtc_tm_to_time(struct rtc_time *tm, unsigned long *time);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/rtc.h:151:
+extern void rtc_time_to_tm(unsigned long time, struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/rtc.h:153:
+extern int rtc_read_time(struct class_device *class_dev, struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/rtc.h:154:
+extern int rtc_set_time(struct class_device *class_dev, struct rtc_time *tm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/rtc.h:155:
+extern int rtc_read_alarm(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: include/linux/rtc.h:156:
+extern int rtc_read_alarm(struct class_device *class_dev,
+				struct rtc_wkalrm *alrm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/rtc.h:157:
+extern int rtc_set_alarm(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/rtc.h:158:
+extern int rtc_set_alarm(struct class_device *class_dev,
+				struct rtc_wkalrm *alrm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/rtc.h:159:
+extern void rtc_update_irq(struct class_device *class_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: include/linux/rtc.h:160:
+extern void rtc_update_irq(struct class_device *class_dev,
+			unsigned long num, unsigned long events);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: drivers/rtc/class.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#157: FILE: drivers/rtc/class.c:12:
+ * the Free Software Foundation; version 2 of the License.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: drivers/rtc/class.c:25:
+	struct rtc_device *rtc = to_rtc_device(class_dev);
+	idr_remove(&rtc_idr, rtc->id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/rtc/class.c:39:
+struct rtc_device *rtc_device_register(struct device *dev,
+					struct rtc_class_ops *ops)

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#184: FILE: drivers/rtc/class.c:39:
+					struct rtc_class_ops *ops)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#195: FILE: drivers/rtc/class.c:50:
+	if ((err = idr_get_new(&rtc_idr, NULL, &id)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#200: FILE: drivers/rtc/class.c:55:
+	if ((rtc = kzalloc(sizeof(struct rtc_device), GFP_KERNEL)) == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rtc)...) over kzalloc(sizeof(struct rtc_device)...)
#200: FILE: drivers/rtc/class.c:55:
+	if ((rtc = kzalloc(sizeof(struct rtc_device), GFP_KERNEL)) == NULL) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#215: FILE: drivers/rtc/class.c:70:
+	if ((err = class_device_register(&rtc->class_dev)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: drivers/rtc/class.c:88:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#256: FILE: drivers/rtc/class.c:111:
+		printk(KERN_ERR "%s: couldn't create class\n", __FILE__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#315: FILE: drivers/rtc/interface.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#326: FILE: drivers/rtc/interface.c:12:
+ * the Free Software Foundation; version 2 of the License.
+*/

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#333: FILE: drivers/rtc/interface.c:19:
+	struct rtc_class_ops *ops = rtc_get_ops(class_dev);

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#346: FILE: drivers/rtc/interface.c:32:
+	struct rtc_class_ops *ops = class_get_devdata(class_dev);

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#358: FILE: drivers/rtc/interface.c:44:
+	struct rtc_class_ops *ops = rtc_get_ops(class_dev);

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#372: FILE: drivers/rtc/interface.c:58:
+	struct rtc_class_ops *ops = rtc_get_ops(class_dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/rtc/interface.c:67:
+void rtc_update_irq(struct class_device *class_dev,
+		unsigned long num, unsigned long events)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#396: FILE: drivers/rtc/utils.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#407: FILE: drivers/rtc/utils.c:12:
+ * the Free Software Foundation; version 2 of the License.
+*/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#415: FILE: drivers/rtc/utils.c:20:
+#define LEAPS_THRU_END_OF(y) ((y)/4 - (y)/100 + (y)/400)
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#415: FILE: drivers/rtc/utils.c:20:
+#define LEAPS_THRU_END_OF(y) ((y)/4 - (y)/100 + (y)/400)
                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#415: FILE: drivers/rtc/utils.c:20:
+#define LEAPS_THRU_END_OF(y) ((y)/4 - (y)/100 + (y)/400)
                                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#415: FILE: drivers/rtc/utils.c:20:
+#define LEAPS_THRU_END_OF(y) ((y)/4 - (y)/100 + (y)/400)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'year' - possible side-effects?
#416: FILE: drivers/rtc/utils.c:21:
+#define LEAP_YEAR(year) ((!(year % 4) && (year % 100)) || !(year % 400))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'year' may be better as '(year)' to avoid precedence issues
#416: FILE: drivers/rtc/utils.c:21:
+#define LEAP_YEAR(year) ((!(year % 4) && (year % 100)) || !(year % 400))

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: drivers/rtc/utils.c:43:
+^I        + LEAPS_THRU_END_OF(year - 1)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: drivers/rtc/utils.c:44:
+^I        - LEAPS_THRU_END_OF(1970 - 1);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000122396.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 34 warnings, 28 checks, 421 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000122396.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
