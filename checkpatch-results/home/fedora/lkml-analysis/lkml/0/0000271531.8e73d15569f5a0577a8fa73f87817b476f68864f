WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff -ruN 2.6.7-bk9.base/arch/ppc64/kernel/vio.c 2.6.7-bk9.base.sysvio.1/arch/ppc64/kernel/vio.c

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: arch/ppc64/kernel/vio.c:154:
+		if ((strncmp(dev->type, ids->type, strlen(ids->type)) == 0) &&
 			device_is_compatible(dev->dev.platform_data, ids->compat))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node_vroot == NULL'
#107: FILE: arch/ppc64/kernel/vio.c:209:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node_vroot->child == NULL'
#107: FILE: arch/ppc64/kernel/vio.c:209:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node_vroot"
#107: FILE: arch/ppc64/kernel/vio.c:209:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node_vroot->child"
#107: FILE: arch/ppc64/kernel/vio.c:209:
+	if ((node_vroot == NULL) || (node_vroot->child == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "of_node"
#117: FILE: arch/ppc64/kernel/vio.c:219:
+	for (of_node = node_vroot->child; of_node != NULL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#119: FILE: arch/ppc64/kernel/vio.c:221:
+		printk(KERN_DEBUG "%s: processing %p\n", __FUNCTION__, of_node);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#119: FILE: arch/ppc64/kernel/vio.c:221:
+		printk(KERN_DEBUG "%s: processing %p\n", __FUNCTION__, of_node);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#179: FILE: arch/ppc64/kernel/vio.c:275:
 static void __devinit vio_dev_release(struct device *dev)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#213: FILE: arch/ppc64/kernel/vio.c:302:
+static struct vio_dev * __devinit vio_register_device_common(

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#213: FILE: arch/ppc64/kernel/vio.c:302:
+static struct vio_dev * __devinit vio_register_device_common(

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#215: FILE: arch/ppc64/kernel/vio.c:304:
+		uint32_t unit_address, struct iommu_table *iommu_table)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#230: FILE: arch/ppc64/kernel/vio.c:319:
+		printk(KERN_ERR "%s: failed to register device %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: arch/ppc64/kernel/vio.c:320:
+		printk(KERN_ERR "%s: failed to register device %s\n",
+				__FUNCTION__, viodev->dev.bus_id);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#231: FILE: arch/ppc64/kernel/vio.c:320:
+				__FUNCTION__, viodev->dev.bus_id);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#251: FILE: arch/ppc64/kernel/vio.c:338:
+struct vio_dev * __devinit vio_register_device_node(struct device_node *of_node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: arch/ppc64/kernel/vio.c:385:
+	if (vio_register_device_common(viodev, of_node->name, of_node->type,
+				*unit_address, vio_build_iommu_table(viodev))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*viodev)...) over kmalloc(sizeof(struct vio_dev)...)
#308: FILE: arch/ppc64/kernel/vio.c:411:
+	viodev = kmalloc(sizeof(struct vio_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#320: FILE: arch/ppc64/kernel/vio.c:423:
 void __devinit vio_unregister_device(struct vio_dev *viodev)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#352: FILE: drivers/pci/hotplug/rpaphp_vio.c:111:
+	if ((slot->dev.vio_dev = vio_register_device_node(slot->dn))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#373: FILE: include/asm-ppc64/vio.h:49:
+struct vio_dev * __devinit vio_register_device_node(

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#373: FILE: include/asm-ppc64/vio.h:49:
+struct vio_dev * __devinit vio_register_device_node(

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#376: FILE: include/asm-ppc64/vio.h:52:
 void __devinit vio_unregister_device(struct vio_dev *dev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271531.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 11 warnings, 12 checks, 317 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271531.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
