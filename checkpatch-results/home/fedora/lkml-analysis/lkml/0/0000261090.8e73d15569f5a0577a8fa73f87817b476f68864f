WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
# This is a BitKeeper generated diff -Nru style patch.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
#   2004/08/11 16:35:44-05:00 pfg@sgi.com 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
#       clean up

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
# arch/ia64/sn/ioif/klconfig/klconflib.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#   2004/08/11 16:35:30-05:00 pfg@sgi.com +106 -439

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#   clean up

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# 

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
diff -Nru a/arch/ia64/sn/ioif/klconfig/klconflib.c b/arch/ia64/sn/ioif/klconfig/klconflib.c

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#37: 
--- a/arch/ia64/sn/ioif/klconfig/klconflib.c	2004-08-11 16:36:58 -05:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#82: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:22:
+extern int numionodes;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:24:
+lboard_t *find_lboard_any(lboard_t * start, unsigned char brd_type)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#98: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:34:
+	return (lboard_t *) NULL;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:37:
+lboard_t *find_lboard_nasid(lboard_t * start, nasid_t nasid,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start->brd_type == brd_type'
#109: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:42:
+		if ((start->brd_type == brd_type) &&
 		    (start->brd_nasid == nasid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start->brd_nasid == nasid'
#109: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:42:
+		if ((start->brd_type == brd_type) &&
 		    (start->brd_nasid == nasid))

CHECK:SPACING: No space is necessary after a cast
#118: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:53:
+	return (lboard_t *) NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:56:
+lboard_t *find_lboard_class_any(lboard_t * start, unsigned char brd_type)

CHECK:SPACING: No space is necessary after a cast
#154: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:66:
+	return (lboard_t *) NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:69:
+klinfo_t *find_component(lboard_t * brd, klinfo_t * kli,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:69:
+klinfo_t *find_component(lboard_t * brd, klinfo_t * kli,

CHECK:SPACING: No space is necessary after a cast
#167: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:74:
+	if (kli == (klinfo_t *) NULL) {

CHECK:SPACING: No space is necessary after a cast
#177: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:83:
+			return (klinfo_t *) NULL;

CHECK:SPACING: No space is necessary after a cast
#314: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:95:
+	return (klinfo_t *) NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#319: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:98:
+void board_to_path(lboard_t * brd, char *path)

CHECK:BRACES: braces {} should be used on all arms of this statement
#364: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:112:
+		if (brd->brd_type == KLTYPE_META_ROUTER) {
[...]
+		} else if (brd->brd_type == KLTYPE_REPEATER_ROUTER) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#370: FILE: arch/ia64/sn/ioif/klconfig/klconflib.c:118:
+		} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 12 warnings, 10 checks, 644 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
