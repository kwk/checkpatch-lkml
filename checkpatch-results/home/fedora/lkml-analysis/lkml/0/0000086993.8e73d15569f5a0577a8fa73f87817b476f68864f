WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
Auto-labeling logic. This is where the (individual&group) SIDs are generated, 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: autolabel.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#72: FILE: autolabel.c:20:
+/*
+  How all this works:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: autolabel.c:22:
+  a SID is generated based on the file (mountpoint+inode), and it is used to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#75: FILE: autolabel.c:22:
label processes.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: autolabel.c:23:
+  A SID of the process always refers to a single file, that of the process's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: autolabel.c:25:
+  In case of inodes (of files of a process), a SID can either be the SID of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: autolabel.c:26:
+  or if multiple processes have access to that file, then it is a "group $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: autolabel.c:27:
+  A "group SID" is a list of all the executables that have access to that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: autolabel.c:30:
+  When another process gains access to that file, and that process has a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: autolabel.c:33:
+  First we'll check if a group SID already exists for these  processes, and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: autolabel.c:35:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: autolabel.c:36:
+  Note: we are not going to label all files, just sockets, but that doesn't $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: autolabel.c:41:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#112: FILE: autolabel.c:52:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#117: FILE: autolabel.c:57:
+static inline const struct context* getcontext_from_sid(const u32 tasksid)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#119: FILE: autolabel.c:59:
+	const struct context* context = sidtab_search(&fireflier_sidtab,tasksid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: autolabel.c:59:
+	const struct context* context = sidtab_search(&fireflier_sidtab,tasksid);
 	                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: autolabel.c:60:
+	const struct context* context = sidtab_search(&fireflier_sidtab,tasksid);
+	if(unlikely(context->groupmembers)) {

ERROR:SPACING: space required before the open parenthesis '('
#120: FILE: autolabel.c:60:
+	if(unlikely(context->groupmembers)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: autolabel.c:61:
+^I^Iprintk(KERN_DEBUG "Fireflier: programming logic error: a task's SID can't $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#121: FILE: autolabel.c:61:
+		printk(KERN_DEBUG "Fireflier: programming logic error: a task's SID can't 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: autolabel.c:69:
+ * don't use NULL for empty device, use this empty string$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: autolabel.c:70:
+ */$

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#132: FILE: autolabel.c:71:
+static char empty_dev[] = "";

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: autolabel.c:74:
+ * internal_get_or_generate_sid - returns a SID that uniqueuly identifies $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: autolabel.c:74:
+ * internal_get_or_generate_sid - returns a SID that uniqueuly identifies $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: autolabel.c:75:
+ * @devname - name of the mountpoint(device) the process's executable is on$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: autolabel.c:76:
+ * @inode - inode of the process's executable$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: autolabel.c:77:
+ * @unsafe - reason this process might be unsafe (ptrace,etc.)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: autolabel.c:78:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: autolabel.c:79:
+static inline u32 internal_get_or_generate_sid(const char* devname,const $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: autolabel.c:97:
+ * get_or_generate_unsafe_sid - generate a new SID because a task became $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: autolabel.c:97:
+ * get_or_generate_unsafe_sid - generate a new SID because a task became $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: autolabel.c:98:
+ * @oldtasksid - the "safe" task's SID$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: autolabel.c:99:
+ * @unsafe - reason it became unsafe$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: autolabel.c:100:
+ * this generates a new SID, referring to the same inode+mountpoint as old $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: autolabel.c:100:
+ * this generates a new SID, referring to the same inode+mountpoint as old $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: autolabel.c:101:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: autolabel.c:105:
+^Ireturn $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: autolabel.c:109:
+ * get_or_generate_sid - return a SID that uniquely identifies this file$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: autolabel.c:110:
+ * @execfile: file member of linux_binprm$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: autolabel.c:111:
+ * @unsafe: reason for this task to be unsafe (ptrace,..)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: autolabel.c:112:
+ * wrapper around internal_get_or_generate_sid$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: autolabel.c:113:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: autolabel.c:116:
+^Ireturn $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: autolabel.c:120:
+ * @dev - the device (mountpoint) name - this will be copied$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: autolabel.c:121:
+ * @inode - the inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: autolabel.c:122:
+ * @ctxid - a pointer to where the SID will be stored$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: autolabel.c:123:
+ * this is intended to be called from the iptables match module$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: autolabel.c:124:
+ */$

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#196: FILE: autolabel.c:129:
+//	   printk(KERN_DEBUG "fireflier_ctx_to_id: %s, %ld\n",dev,inode);
   	                                           ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#196: FILE: autolabel.c:129:
+//	   printk(KERN_DEBUG "fireflier_ctx_to_id: %s, %ld\n",dev,inode);
   	                                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: autolabel.c:137:
+ * add_sid_to_group - returns a group that has tasksid added to it$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: autolabel.c:138:
+ * @oldgroup: the old group$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: autolabel.c:139:
+ * @tasksid: the SID to add to the old group$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: autolabel.c:140:
+ * If a group already exists that contains all sids in oldgroup, and the $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: autolabel.c:140:
+ * If a group already exists that contains all sids in oldgroup, and the $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: autolabel.c:141:
+ * otherwise a new group is created$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: autolabel.c:142:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: autolabel.c:146:
+^Iconst int old_member_count = oldcontext->groupmembers==0 ? 1 : $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: autolabel.c:147:
+^Istruct context* newcontext = $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#216: FILE: autolabel.c:147:
+	struct context* newcontext = 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#216: FILE: autolabel.c:147:
+	struct context* newcontext = 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'GFP_ATOMIC' should also have an identifier name
#216: FILE: autolabel.c:147:
+	struct context* newcontext = 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: autolabel.c:179:
+ * compute_inode_sid - calculates the new SID of this inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: autolabel.c:180:
+ * @oldinodesid: the old SID of this inode (if it had one)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: autolabel.c:181:
+ * @tasksid: the tasks's SID$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: autolabel.c:182:
+ *$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: autolabel.c:183:
+ * This function calculates the new SID of an inode, it _has_ to be called $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: autolabel.c:183:
+ * This function calculates the new SID of an inode, it _has_ to be called $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: autolabel.c:184:
+ * task gains access to the file/socket identified by this inode.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: autolabel.c:185:
+ * If the task's SID already matches (or is included in) the inode's SID, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: autolabel.c:185:
+ * If the task's SID already matches (or is included in) the inode's SID, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: autolabel.c:186:
+ * Otherwise the task is added to a group SID.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: autolabel.c:187:
+ */$

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#262: FILE: autolabel.c:190:
+//	printk(KERN_DEBUG "oldinode:%d, tasksid:%d",oldinodesid,tasksid);
   	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#262: FILE: autolabel.c:190:
+//	printk(KERN_DEBUG "oldinode:%d, tasksid:%d",oldinodesid,tasksid);
   	                                       ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#262: FILE: autolabel.c:190:
+//	printk(KERN_DEBUG "oldinode:%d, tasksid:%d",oldinodesid,tasksid);
   	                                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: autolabel.c:199:
+ * u32_compute_len - counts nr. of digits$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: autolabel.c:200:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: autolabel.c:208:
+^Ireturn digits;^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: autolabel.c:211:
+ * fireflier_sid_to_context - returns string representation of sid$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: autolabel.c:212:
+ * @sid - sid to be converted$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: autolabel.c:213:
+ * @scontext -string representation - the list of mountpoint+inodes; NULL - $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: autolabel.c:213:
+ * @scontext -string representation - the list of mountpoint+inodes; NULL - $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: autolabel.c:214:
+ * @scontextlen - length of the string$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: autolabel.c:215:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: autolabel.c:220:
+^Iif(likely(!context->groupmembers)) {^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: autolabel.c:229:
+^I^Isnprintf(*scontext,len,"%s:%ld",context->mnt_devname,context->inode);^I^I$

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#302: FILE: autolabel.c:229:
+		snprintf(*scontext,len,"%s:%ld",context->mnt_devname,context->inode);		
 		                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#302: FILE: autolabel.c:229:
+		snprintf(*scontext,len,"%s:%ld",context->mnt_devname,context->inode);		
 		                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#302: FILE: autolabel.c:229:
+		snprintf(*scontext,len,"%s:%ld",context->mnt_devname,context->inode);		
 		                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: autolabel.c:231:
+^I^Ireturn 0;^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: autolabel.c:248:
+^I        string = *scontext;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: autolabel.c:257:
+^I^Ireturn 0;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: autolabel.c:258:
+^I^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#340: FILE: autolabel.h:1:
+/*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#358: FILE: autolabel.h:19:
+u32 get_or_generate_sid(const struct file* execfile,const char unsafe);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#358: FILE: autolabel.h:19:
+u32 get_or_generate_sid(const struct file* execfile,const char unsafe);
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: autolabel.h:20:
+u32 get_or_generate_unsafe_sid(const u32 oldtasksid,const char unsafe);
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#360: FILE: autolabel.h:21:
+u32 compute_inode_sid(u32 oldinodesid,u32 tasksid);
                                      ^

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#361: FILE: autolabel.h:22:
+int fireflier_sid_to_context(u32 sid,char** scontext,u32* scontextlen);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#361: FILE: autolabel.h:22:
+int fireflier_sid_to_context(u32 sid,char** scontext,u32* scontextlen);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: autolabel.h:22:
+int fireflier_sid_to_context(u32 sid,char** scontext,u32* scontextlen);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#361: FILE: autolabel.h:22:
+int fireflier_sid_to_context(u32 sid,char** scontext,u32* scontextlen);
                                                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#368: FILE: constants.h:1:
+#ifndef _FF_CONSTANTS_H_

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#379: FILE: context.h:1:
+/*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#404: FILE: context.h:26:
+	const char* mnt_devname;	/* if this is a group SID, then this is NULL */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: context.h:27:
+^Ichar groupmembers;/* nr. of group members, if it is 0 this is not a group, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#407: FILE: context.h:28:
+	char groupmembers;/* nr. of group members, if it is 0 this is not a group, 
+	char unsafe;/* Reason for task being unsafe: ptrace,... */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#412: FILE: context.h:33:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: context.h:39:
+ * it actually has to compare if the inode+mountpoint of the executable is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: context.h:42:
+static inline int context_cmp(const struct context* a,const struct context* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#422: FILE: context.h:42:
+static inline int context_cmp(const struct context* a,const struct context* 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: context.h:42:
+static inline int context_cmp(const struct context* a,const struct context* 
                                                      ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#425: FILE: context.h:44:
+	return (a->inode==b->inode) && !strcmp(a->mnt_devname,b->mnt_devname)
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#425: FILE: context.h:44:
+	return (a->inode==b->inode) && !strcmp(a->mnt_devname,b->mnt_devname)
 	                                                     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#426: FILE: context.h:45:
+	return (a->inode==b->inode) && !strcmp(a->mnt_devname,b->mnt_devname)
+		&& (a->groupmembers==b->groupmembers) &&

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#426: FILE: context.h:45:
+		&& (a->groupmembers==b->groupmembers) &&
 		                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: context.h:46:
+^I^I$

WARNING:SPACING: space prohibited before semicolon
#430: FILE: context.h:47:
+		(a->unsafe == b->unsafe) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: context.h:56:
+static inline void context_cpy(struct context** dest,const struct context* $

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#439: FILE: context.h:56:
+static inline void context_cpy(struct context** dest,const struct context* 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: context.h:56:
+static inline void context_cpy(struct context** dest,const struct context* 
                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#442: FILE: context.h:58:
+	const size_t struct_size = sizeof(*source)+sizeof(u32)*source->groupmembers;
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#442: FILE: context.h:58:
+	const size_t struct_size = sizeof(*source)+sizeof(u32)*source->groupmembers;
 	                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#443: FILE: context.h:59:
+	*dest = kmalloc(struct_size,GFP_ATOMIC);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#444: FILE: context.h:60:
+	memcpy(*dest,source,struct_size);
 	            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#444: FILE: context.h:60:
+	memcpy(*dest,source,struct_size);
 	                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086993.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 57 warnings, 13 checks, 382 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086993.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
