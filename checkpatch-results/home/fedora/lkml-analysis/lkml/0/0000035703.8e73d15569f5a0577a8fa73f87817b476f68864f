WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
It is interesting to do this since the DMA subsystem has the ability to communicate

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: arch/i386/kernel/pci-dma.c:48:
+	ret = page_address(alloc_pages_range(0L,
+		dev ? dev->coherent_dma_mask : 16*1024*1024,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#75: FILE: arch/i386/kernel/pci-dma.c:48:
+		dev ? dev->coherent_dma_mask : 16*1024*1024,
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#75: FILE: arch/i386/kernel/pci-dma.c:48:
+		dev ? dev->coherent_dma_mask : 16*1024*1024,
 		                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/gfp.h:139:
+extern struct page *alloc_pages_range(unsigned long low, unsigned long high,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: include/linux/gfp.h:140:
+extern struct page *alloc_pages_range(unsigned long low, unsigned long high,
+			int node, gfp_t gfp_mask, unsigned int order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: mm/page_alloc.c:1201:
+static struct page *rmqueue_range(unsigned long low, unsigned long high,
+				struct zone *zone, unsigned int order)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: mm/page_alloc.c:1203:
+	struct free_area * area;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#121: FILE: mm/page_alloc.c:1215:
+			if (addr >= low &&
[...]
+					goto found_match;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: mm/page_alloc.c:1216:
+			if (addr >= low &&
+				addr < high - (PAGE_SIZE << order))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: mm/page_alloc.c:1242:
+struct page *alloc_pages_range(unsigned long low, unsigned long high,
+			int node, gfp_t gfp_flags, unsigned int order)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#160: FILE: mm/page_alloc.c:1254:
+	BUG_ON(gfp_flags & __GFP_HIGHMEM);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#175: FILE: mm/page_alloc.c:1269:
+	if ((void *)high >= pfn_to_kaddr(max_pfn) &&
[...]
+			return alloc_pages(gfp_flags, order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: mm/page_alloc.c:1270:
+	if ((void *)high >= pfn_to_kaddr(max_pfn) &&
+		(void *)low <= pfn_to_kaddr(NODE_DATA(0)->node_start_pfn))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#191: FILE: mm/page_alloc.c:1285:
+	if (unlikely(*z == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'order <= 3'
#276: FILE: mm/page_alloc.c:1370:
+		if ((order <= 3) || (gfp_flags & __GFP_REPEAT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#282: FILE: mm/page_alloc.c:1376:
+		blk_congestion_wait(WRITE, HZ/50);
 		                             ^

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#287: FILE: mm/page_alloc.c:1381:
+	if (!(gfp_flags & __GFP_NOWARN) && printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#288: FILE: mm/page_alloc.c:1382:
+		printk(KERN_WARNING "%s: page range (%lx - %lx) allocation failure."

WARNING:SPLIT_STRING: quoted string split across lines
#289: FILE: mm/page_alloc.c:1383:
+		printk(KERN_WARNING "%s: page range (%lx - %lx) allocation failure."
+			" order:%d, mode:0x%x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035703.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 7 warnings, 12 checks, 223 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035703.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
