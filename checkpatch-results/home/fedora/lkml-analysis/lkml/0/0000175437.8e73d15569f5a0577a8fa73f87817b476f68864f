WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 4)
#73: FILE: include/linux/hardirq.h:91:
+do { \
+    if (ipipe_current_domain == ipipe_root_domain) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: include/linux/hardirq.h:92:
+    if (ipipe_current_domain == ipipe_root_domain) \$

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: include/linux/hardirq.h:94:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 4)
#78: FILE: include/linux/hardirq.h:96:
+do { \
+    if (ipipe_current_domain == ipipe_root_domain) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: include/linux/hardirq.h:97:
+    if (ipipe_current_domain == ipipe_root_domain) \$

ERROR:SPACING: space required before the open parenthesis '('
#81: FILE: include/linux/hardirq.h:99:
+} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: include/linux/ipipe.h:1:
+/*   -*- linux-c -*-

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#97: FILE: include/linux/ipipe.h:2:
+ *   include/linux/ipipe.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: include/linux/ipipe.h:8:
+ *   the Free Software Foundation, Inc., 675 Mass Ave, Cambridge MA 02139,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#113: FILE: include/linux/ipipe.h:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: include/linux/ipipe.h:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#114: FILE: include/linux/ipipe.h:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#115: FILE: include/linux/ipipe.h:19:
02111-1307, USA.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/linux/ipipe.h:31:
+#define IPIPE_RELEASE_NUMBER $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#133: FILE: include/linux/ipipe.h:36:
+#define IPIPE_SAME_HANDLER ((void (*)(unsigned))(-1))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: include/linux/ipipe.h:43:
+#define IPIPE_SYNC_FLAG    1^I/* The interrupt syncer is running for the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#142: FILE: include/linux/ipipe.h:44:
+#define IPIPE_SYNC_FLAG    1	/* The interrupt syncer is running for the 
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#154: FILE: include/linux/ipipe.h:56:
+#define IPIPE_HANDLE_MASK    (1 << IPIPE_HANDLE_FLAG)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#155: FILE: include/linux/ipipe.h:57:
+#define IPIPE_PASS_MASK      (1 << IPIPE_PASS_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#156: FILE: include/linux/ipipe.h:58:
+#define IPIPE_ENABLE_MASK    (1 << IPIPE_ENABLE_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#158: FILE: include/linux/ipipe.h:60:
+#define IPIPE_EXCLUSIVE_MASK (1 << IPIPE_EXCLUSIVE_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#159: FILE: include/linux/ipipe.h:61:
+#define IPIPE_STICKY_MASK    (1 << IPIPE_STICKY_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#160: FILE: include/linux/ipipe.h:62:
+#define IPIPE_SYSTEM_MASK    (1 << IPIPE_SYSTEM_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#161: FILE: include/linux/ipipe.h:63:
+#define IPIPE_LOCK_MASK      (1 << IPIPE_LOCK_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#162: FILE: include/linux/ipipe.h:64:
+#define IPIPE_SHARED_MASK    (1 << IPIPE_SHARED_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#163: FILE: include/linux/ipipe.h:65:
+#define IPIPE_SYNC_MASK      (1 << IPIPE_SYNC_FLAG)

CHECK:BIT_MACRO: Prefer using the BIT macro
#164: FILE: include/linux/ipipe.h:66:
+#define IPIPE_CALLASM_MASK   (1 << IPIPE_CALLASM_FLAG)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#166: FILE: include/linux/ipipe.h:68:
+#define IPIPE_DEFAULT_MASK  (IPIPE_HANDLE_MASK|IPIPE_PASS_MASK)
                                               ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#169: FILE: include/linux/ipipe.h:71:
+struct ipipe_domain_attr {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: include/linux/ipipe.h:72:
+	unsigned domid;		/* Domain identifier -- Magic value set by caller */

WARNING:SPACING: Unnecessary space before function pointer arguments
#173: FILE: include/linux/ipipe.h:75:
+	void (*entry) (void);	/* Domain entry point */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#181: FILE: include/linux/ipipe.h:83:
+extern unsigned __ipipe_printk_virq;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: include/linux/ipipe.h:99:
+void __ipipe_sync_console(unsigned irq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#209: FILE: include/linux/ipipe.h:111:
+int fastcall __ipipe_schedule_irq(unsigned irq, struct list_head *head);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: include/linux/ipipe.h:113:
+#define __ipipe_pipeline_head_p(ipd) (&(ipd)->p_link == $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#211: FILE: include/linux/ipipe.h:113:
+#define __ipipe_pipeline_head_p(ipd) (&(ipd)->p_link == 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#221: FILE: include/linux/ipipe.h:122:
+	/* "in" is guaranteed to be closer than "out" from the head of the
+	   pipeline (and obviously different). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#221: FILE: include/linux/ipipe.h:122:
+	   pipeline (and obviously different). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#230: FILE: include/linux/ipipe.h:131:
+		/* Otherwise, something has changed the current domain under
+		   our feet recycling the register set; do not override. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#230: FILE: include/linux/ipipe.h:131:
+		   our feet recycling the register set; do not override. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#244: FILE: include/linux/ipipe.h:145:
+			      unsigned irq,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#245: FILE: include/linux/ipipe.h:146:
+			      void (*handler) (unsigned irq),

WARNING:SPACING: Unnecessary space before function pointer arguments
#245: FILE: include/linux/ipipe.h:146:
+			      void (*handler) (unsigned irq),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#246: FILE: include/linux/ipipe.h:147:
+			      int (*acknowledge) (unsigned irq),

WARNING:SPACING: Unnecessary space before function pointer arguments
#246: FILE: include/linux/ipipe.h:147:
+			      int (*acknowledge) (unsigned irq),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#247: FILE: include/linux/ipipe.h:148:
+			      unsigned modemask);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#249: FILE: include/linux/ipipe.h:150:
+static inline int ipipe_virtualize_irq(unsigned irq,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#250: FILE: include/linux/ipipe.h:151:
+				       void (*handler) (unsigned irq),

WARNING:SPACING: Unnecessary space before function pointer arguments
#250: FILE: include/linux/ipipe.h:151:
+				       void (*handler) (unsigned irq),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#251: FILE: include/linux/ipipe.h:152:
+				       int (*acknowledge) (unsigned irq),

WARNING:SPACING: Unnecessary space before function pointer arguments
#251: FILE: include/linux/ipipe.h:152:
+				       int (*acknowledge) (unsigned irq),

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#252: FILE: include/linux/ipipe.h:153:
+				       unsigned modemask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#258: FILE: include/linux/ipipe.h:159:
+static inline int ipipe_share_irq(unsigned irq,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#259: FILE: include/linux/ipipe.h:160:
+				  int (*acknowledge) (unsigned irq))

WARNING:SPACING: Unnecessary space before function pointer arguments
#259: FILE: include/linux/ipipe.h:160:
+				  int (*acknowledge) (unsigned irq))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#268: FILE: include/linux/ipipe.h:169:
+int ipipe_control_irq(unsigned irq,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#269: FILE: include/linux/ipipe.h:170:
+		      unsigned clrmask,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#270: FILE: include/linux/ipipe.h:171:
+		      unsigned setmask);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#272: FILE: include/linux/ipipe.h:173:
+unsigned ipipe_alloc_virq(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#274: FILE: include/linux/ipipe.h:175:
+int ipipe_free_virq(unsigned virq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#276: FILE: include/linux/ipipe.h:177:
+int fastcall ipipe_trigger_irq(unsigned irq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#278: FILE: include/linux/ipipe.h:179:
+static inline int ipipe_propagate_irq(unsigned irq)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#280: FILE: include/linux/ipipe.h:181:
+{
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#284: FILE: include/linux/ipipe.h:185:
+static inline int ipipe_schedule_irq(unsigned irq)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#286: FILE: include/linux/ipipe.h:187:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: include/linux/ipipe.h:211:
+static inline unsigned long ipipe_test_pipeline_from(struct $

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: include/linux/ipipe.h:214:
+	unsigned long flags, s;
+	ipipe_declare_cpuid;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#325: FILE: include/linux/ipipe.h:225:
+							       *ipd)
 							       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#352: FILE: include/linux/ipipe.h:252:
+								 *ipd)
 								 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: include/linux/ipipe.h:255:
+	unsigned long flags, s;
+	ipipe_declare_cpuid;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#408: FILE: include/linux/ipipe.h:308:
+	/* If cpuid is current, then it must be held on entry
+	   (ipipe_get_cpu/local_irq_save_hw/local_irq_disable_hw). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: include/linux/ipipe.h:308:
+	   (ipipe_get_cpu/local_irq_save_hw/local_irq_disable_hw). */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: include/linux/ipipe.h:336:
+#define local_irq_restore_hw_cond(flags) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: include/linux/ipipe.h:337:
+#define spin_lock_irqsave_hw_cond(lock,flags) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: include/linux/ipipe.h:337:
+#define spin_lock_irqsave_hw_cond(lock,flags) 
                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: include/linux/ipipe.h:338:
+#define spin_unlock_irqrestore_hw_cond(lock,flags) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: include/linux/ipipe.h:338:
+#define spin_unlock_irqrestore_hw_cond(lock,flags) 
                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#445: FILE: include/linux/ipipe.h:342:
+#define ipipe_init()              do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#446: FILE: include/linux/ipipe.h:343:
+#define ipipe_suspend_domain()    do { } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: include/linux/ipipe.h:349:
+#define spin_lock_irqsave_hw(lock,flags)      spin_lock_irqsave(lock, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: include/linux/ipipe.h:349:
+#define spin_lock_irqsave_hw(lock,flags)      spin_lock_irqsave(lock, 
                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#452: FILE: include/linux/ipipe.h:349:
+#define spin_lock_irqsave_hw(lock,flags)      spin_lock_irqsave(lock, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: include/linux/ipipe.h:350:
+#define spin_unlock_irqrestore_hw(lock,flags) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#454: FILE: include/linux/ipipe.h:350:
+#define spin_unlock_irqrestore_hw(lock,flags) 
                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#459: FILE: include/linux/ipipe.h:354:
+#define local_irq_enable_hw_cond()                 do { } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: include/linux/ipipe.h:355:
+#define local_irq_save_hw_cond(flags)              do { flags = 0; /* $

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#460: FILE: include/linux/ipipe.h:355:
+#define local_irq_save_hw_cond(flags)              do { flags = 0; /* 

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#462: FILE: include/linux/ipipe.h:356:
+#define local_irq_save_hw_cond(flags)              do { flags = 0; /* 
+#define local_irq_restore_hw_cond(flags)           do { } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: include/linux/ipipe.h:357:
+#define spin_lock_irqsave_hw_cond(lock,flags)      do { flags = 0; $

ERROR:SPACING: space required before the open parenthesis '('
#472: FILE: include/linux/ipipe.h:365:
+#define ipipe_takeover()  do { } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: init/main.c:467:
+ ^Iipipe_init();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: init/main.c:467:
+ ^Iipipe_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: init/main.c:467:
+ ^Iipipe_init();$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#531: FILE: ipipe/Kconfig:1:
+config IPIPE
+	tristate "Interrupt pipeline"
+	default y
+	---help---
+	  Activate this option if you want the interrupt pipeline to be
+	  compiled in.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: ipipe/Kconfig:12:
+^Idef_bool PREEMPT_NONE || PREEMPT_VOLUNTARY || PREEMPT_DESKTOP || $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#565: FILE: ipipe/generic.c:1:
+/*   -*- linux-c -*-

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#566: FILE: ipipe/generic.c:2:
+ *   linux/ipipe/generic.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#572: FILE: ipipe/generic.c:8:
+ *   the Free Software Foundation, Inc., 675 Mass Ave, Cambridge MA 02139,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#582: FILE: ipipe/generic.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#583: FILE: ipipe/generic.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#583: FILE: ipipe/generic.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#608: FILE: ipipe/generic.c:43:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#651: FILE: ipipe/generic.c:86:
+	printk(KERN_WARNING "I-pipe: Domain %s registered.\n", ipd->name);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#654: FILE: ipipe/generic.c:89:
+	/* Finally, allow the new domain to perform its initialization
+	   chores. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#654: FILE: ipipe/generic.c:89:
+	   chores. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr->entry"
#656: FILE: ipipe/generic.c:91:
+	if (attr->entry != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#685: FILE: ipipe/generic.c:120:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#691: FILE: ipipe/generic.c:126:
+		printk(KERN_WARNING

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#698: FILE: ipipe/generic.c:133:
+		unsigned irq;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#701: FILE: ipipe/generic.c:136:
+		/* In the SMP case, wait for the logged events to drain on other
+		   processors before eventually removing the domain from the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#702: FILE: ipipe/generic.c:137:
+		   pipeline. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#724: FILE: ipipe/generic.c:159:
+	/* Simply remove the domain from the pipeline and we are almost
+	   done. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#724: FILE: ipipe/generic.c:159:
+	   done. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#732: FILE: ipipe/generic.c:167:
+	printk(KERN_WARNING "I-pipe: Domain %s unregistered.\n", ipd->name);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#738: FILE: ipipe/generic.c:173:
+/* ipipe_propagate_irq() -- Force a given IRQ propagation on behalf of
+   a running interrupt handler to the next domain down the pipeline.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#740: FILE: ipipe/generic.c:175:
+   to pend the interrupt for the current domain first. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: ipipe/generic.c:177:
+int fastcall __ipipe_schedule_irq(unsigned irq, struct list_head *head)

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: ipipe/generic.c:181:
+	unsigned long flags;
+	ipipe_declare_cpuid;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#750: FILE: ipipe/generic.c:185:
+	    (ipipe_virtual_irq_p(irq)
+	     && !test_bit(irq - IPIPE_VIRQ_BASE, &__ipipe_virtual_irq_map)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#778: FILE: ipipe/generic.c:213:
+int ipipe_free_virq(unsigned virq)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#823: FILE: ipipe/generic.c:258:
+EXPORT_SYMBOL(ipipe_register_domain);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#824: FILE: ipipe/generic.c:259:
+EXPORT_SYMBOL(ipipe_unregister_domain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#825: FILE: ipipe/generic.c:260:
+EXPORT_SYMBOL(ipipe_virtualize_irq_from);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#826: FILE: ipipe/generic.c:261:
+EXPORT_SYMBOL(ipipe_control_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#827: FILE: ipipe/generic.c:262:
+EXPORT_SYMBOL(ipipe_free_virq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#828: FILE: ipipe/generic.c:263:
+EXPORT_SYMBOL(ipipe_init_attr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#829: FILE: ipipe/generic.c:264:
+EXPORT_SYMBOL(ipipe_get_sysinfo);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#830: FILE: ipipe/generic.c:265:
+EXPORT_SYMBOL(__ipipe_schedule_irq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#852: FILE: kernel/ipipe.c:1:
+/*   -*- linux-c -*-

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#853: FILE: kernel/ipipe.c:2:
+ *   linux/kernel/ipipe.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#859: FILE: kernel/ipipe.c:8:
+ *   the Free Software Foundation, Inc., 675 Mass Ave, Cambridge MA 02139,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#869: FILE: kernel/ipipe.c:18:
+ *   along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: kernel/ipipe.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#870: FILE: kernel/ipipe.c:19:
+ *   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: kernel/ipipe.c:35:
+    {[0 ... IPIPE_NR_CPUS - 1] = &ipipe_root };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#887: FILE: kernel/ipipe.c:35:
+struct ipipe_domain *ipipe_percpu_domain[IPIPE_NR_CPUS] =
+    {[0 ... IPIPE_NR_CPUS - 1] = &ipipe_root };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#895: FILE: kernel/ipipe.c:43:
+unsigned long __ipipe_virtual_irq_map = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#897: FILE: kernel/ipipe.c:45:
+unsigned __ipipe_printk_virq;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#900: FILE: kernel/ipipe.c:48:
+/* ipipe_init() -- Initialization routine of the IPIPE layer. Called
+   by the host kernel early during the boot procedure. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#900: FILE: kernel/ipipe.c:48:
+   by the host kernel early during the boot procedure. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#909: FILE: kernel/ipipe.c:57:
+	/*
+	   A lightweight registration code for the root domain. We are

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#932: FILE: kernel/ipipe.c:80:
+	printk(KERN_INFO "I-pipe %s: Root domain %s registered.\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#943: FILE: kernel/ipipe.c:91:
+		unsigned long flags;
+		ipipe_lock_cpu(flags); /* Care for migration. */

CHECK:BRACES: Unbalanced braces around else statement
#951: FILE: kernel/ipipe.c:99:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#982: FILE: kernel/ipipe.c:130:
+		unsigned long flags;
+		ipipe_lock_cpu(flags); /* Care for migration. */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ipipe_root_domain->cpudata[cpuid].status'
#1009: FILE: kernel/ipipe.c:157:
+				       &ipipe_root_domain->cpudata[cpuid].
+				       status);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:TYPO_SPELLING: 'Unstall' may be misspelled - perhaps 'Install'?
#1032: FILE: kernel/ipipe.c:180:
+/* ipipe_unstall_pipeline_from() -- Unstall the pipeline and
                                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1033: FILE: kernel/ipipe.c:181:
+/* ipipe_unstall_pipeline_from() -- Unstall the pipeline and
+   synchronize pending interrupts for a given domain. See

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1034: FILE: kernel/ipipe.c:182:
+   __ipipe_walk_pipeline() for more information. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1041: FILE: kernel/ipipe.c:189:
+	unsigned long flags;
+	ipipe_declare_cpuid;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1057: FILE: kernel/ipipe.c:205:
+	list_for_each(pos, &__ipipe_pipeline) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1065: FILE: kernel/ipipe.c:213:
+		if (next_domain->cpudata[cpuid].irq_pending_hi != 0) {
[...]
+		} else if (next_domain == this_domain)
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1066: FILE: kernel/ipipe.c:214:
+		if (next_domain->cpudata[cpuid].irq_pending_hi != 0) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1067: FILE: kernel/ipipe.c:215:
+			if (next_domain == this_domain)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1069: FILE: kernel/ipipe.c:217:
+			else {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_domain->cpudata[cpuid].irq_pending_hi'
#1076: FILE: kernel/ipipe.c:224:
+				if (this_domain->cpudata[cpuid].
+				    irq_pending_hi != 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1077: FILE: kernel/ipipe.c:225:
+				    irq_pending_hi != 0
+				    && !test_bit(IPIPE_STALL_FLAG,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_domain->cpudata[cpuid].status'
#1079: FILE: kernel/ipipe.c:227:
+						 &this_domain->cpudata[cpuid].
+						 status)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1080: FILE: kernel/ipipe.c:228:
+						 status)
+				    && !test_bit(IPIPE_SYNC_FLAG,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'this_domain->cpudata[cpuid].status'
#1082: FILE: kernel/ipipe.c:230:
+						 &this_domain->cpudata[cpuid].
+						 status))

WARNING:INDENTED_LABEL: labels should not be indented
#1091: FILE: kernel/ipipe.c:239:
+      release_cpu_and_exit:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1100: FILE: kernel/ipipe.c:248:
+/* ipipe_suspend_domain() -- Suspend the current domain, switching to
+   the next one which has pending work down the pipeline. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1100: FILE: kernel/ipipe.c:248:
+   the next one which has pending work down the pipeline. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1107: FILE: kernel/ipipe.c:255:
+	unsigned long flags;
+	ipipe_declare_cpuid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1111: FILE: kernel/ipipe.c:259:
+	this_domain = next_domain = ipipe_percpu_domain[cpuid];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:INDENTED_LABEL: labels should not be indented
#1135: FILE: kernel/ipipe.c:283:
+	      sync_stage:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1143: FILE: kernel/ipipe.c:291:
+			/* Something has changed the current domain under our feet
+			   recycling the register set; take note. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1143: FILE: kernel/ipipe.c:291:
+			   recycling the register set; take note. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1153: FILE: kernel/ipipe.c:301:
+/* ipipe_alloc_virq() -- Allocate a pipelined virtual/soft interrupt.
+   Virtual interrupts are handled in exactly the same way than their

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1154: FILE: kernel/ipipe.c:302:
+   hw-generated counterparts wrt pipelining. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1156: FILE: kernel/ipipe.c:304:
+unsigned ipipe_alloc_virq(void)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1186: FILE: kernel/ipipe.c:334:
+	unsigned irq, _irq;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1200: FILE: kernel/ipipe.c:348:
+	list_for_each(pos, &__ipipe_pipeline) {
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ipd->irqs[irq].control'
#1211: FILE: kernel/ipipe.c:359:
+			    (ipd->irqs[irq].
+			     control & (IPIPE_HANDLE_MASK | IPIPE_PASS_MASK |

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1216: FILE: kernel/ipipe.c:364:
+				/* There might be a hole between the last external IRQ
+				   and the first virtual one; skip it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1216: FILE: kernel/ipipe.c:364:
+				   and the first virtual one; skip it. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1222: FILE: kernel/ipipe.c:370:
+			if (ipipe_virtual_irq_p(irq)
+			    && !test_bit(irq - IPIPE_VIRQ_BASE,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1230: FILE: kernel/ipipe.c:378:
+			/* Attempt to group consecutive IRQ numbers having the
+			   same virtualization settings in a single line. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1230: FILE: kernel/ipipe.c:378:
+			   same virtualization settings in a single line. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1237: FILE: kernel/ipipe.c:385:
+				    ipipe_virtual_irq_p(irq)
+				    || (ipipe_virtual_irq_p(_irq)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1238: FILE: kernel/ipipe.c:386:
+				    || (ipipe_virtual_irq_p(_irq)
+					&& !test_bit(_irq - IPIPE_VIRQ_BASE,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1240: FILE: kernel/ipipe.c:388:
+						     &__ipipe_virtual_irq_map))
+				    || ctlbits !=

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ipd->irqs[_irq].control'
#1242: FILE: kernel/ipipe.c:390:
+				    (ipd->irqs[_irq].
+				     control & (IPIPE_HANDLE_MASK |

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1254: FILE: kernel/ipipe.c:402:
+			/* Statuses are as follows:
+			   o "accepted" means handled _and_ passed down the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1263: FILE: kernel/ipipe.c:411:
+			   current domain down to the end of the pipeline. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1265: FILE: kernel/ipipe.c:413:
+			if (ctlbits & IPIPE_HANDLE_MASK) {
[...]
+			} else if (ctlbits & IPIPE_PASS_MASK)
[...]
+			else
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1309: FILE: kernel/ipipe.c:457:
+{
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1318: FILE: kernel/ipipe.c:466:
+EXPORT_SYMBOL(ipipe_suspend_domain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1319: FILE: kernel/ipipe.c:467:
+EXPORT_SYMBOL(ipipe_alloc_virq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1320: FILE: kernel/ipipe.c:468:
+EXPORT_SYMBOL(ipipe_unstall_pipeline_from);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1321: FILE: kernel/ipipe.c:469:
+EXPORT_SYMBOL(ipipe_percpu_domain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1322: FILE: kernel/ipipe.c:470:
+EXPORT_SYMBOL(ipipe_root_domain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1323: FILE: kernel/ipipe.c:471:
+EXPORT_SYMBOL(ipipe_running);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1324: FILE: kernel/ipipe.c:472:
+EXPORT_SYMBOL(__ipipe_unstall_root);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1325: FILE: kernel/ipipe.c:473:
+EXPORT_SYMBOL(__ipipe_stall_root);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1326: FILE: kernel/ipipe.c:474:
+EXPORT_SYMBOL(__ipipe_restore_root);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1327: FILE: kernel/ipipe.c:475:
+EXPORT_SYMBOL(__ipipe_test_and_stall_root);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1328: FILE: kernel/ipipe.c:476:
+EXPORT_SYMBOL(__ipipe_test_root);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1329: FILE: kernel/ipipe.c:477:
+EXPORT_SYMBOL(__ipipe_pipeline);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1330: FILE: kernel/ipipe.c:478:
+EXPORT_SYMBOL(__ipipe_pipelock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1331: FILE: kernel/ipipe.c:479:
+EXPORT_SYMBOL(__ipipe_virtual_irq_map);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1343: FILE: kernel/irq/handle.c:86:
+	/* If processing a timer tick, pass the original regs as
+	   collected during preemption and not our phony - always

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1345: FILE: kernel/irq/handle.c:88:
+	   profiling code. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1420: FILE: kernel/printk.c:592:
+	if (ipipe_current_domain != ipipe_root_domain &&
[...]
+ 	    spin_unlock_irqrestore_hw(&logbuf_lock, flags);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1421: FILE: kernel/printk.c:593:
+	    !test_bit(IPIPE_SPRINTK_FLAG,&ipipe_current_domain->flags) &&
 	                                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1421: FILE: kernel/printk.c:593:
+	    !test_bit(IPIPE_SPRINTK_FLAG,&ipipe_current_domain->flags) &&
 	                                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1424: FILE: kernel/printk.c:596:
+	/* When operating in asynchronous printk() mode, ensure the
+	   console drivers and klogd wakeup are only run by Linux,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1430: FILE: kernel/printk.c:602:
+	   mode to synchronous. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1431: FILE: kernel/printk.c:603:
+ ^I    spin_unlock_irqrestore_hw(&logbuf_lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1431: FILE: kernel/printk.c:603:
+ ^I    spin_unlock_irqrestore_hw(&logbuf_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1431: FILE: kernel/printk.c:603:
+ ^I    spin_unlock_irqrestore_hw(&logbuf_lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1433: FILE: kernel/printk.c:605:
+ ^I    if (!test_and_set_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1433: FILE: kernel/printk.c:605:
+ ^I    if (!test_and_set_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1433: FILE: kernel/printk.c:605:
+ ^I    if (!test_and_set_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags))$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1433: FILE: kernel/printk.c:605:
+ 	    if (!test_and_set_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags))
  	                                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1433: FILE: kernel/printk.c:605:
+ 	    if (!test_and_set_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags))
  	                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1434: FILE: kernel/printk.c:606:
+ ^I^Iipipe_trigger_irq(__ipipe_printk_virq);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1434: FILE: kernel/printk.c:606:
+ ^I^Iipipe_trigger_irq(__ipipe_printk_virq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1434: FILE: kernel/printk.c:606:
+ ^I^Iipipe_trigger_irq(__ipipe_printk_virq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1436: FILE: kernel/printk.c:608:
+ ^I    goto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1436: FILE: kernel/printk.c:608:
+ ^I    goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1436: FILE: kernel/printk.c:608:
+ ^I    goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1437: FILE: kernel/printk.c:609:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1437: FILE: kernel/printk.c:609:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1437: FILE: kernel/printk.c:609:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1452: FILE: kernel/printk.c:623:
+ ^Iif (ipipe_current_domain != ipipe_root_domain || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1452: FILE: kernel/printk.c:623:
+ ^Iif (ipipe_current_domain != ipipe_root_domain || $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1452: FILE: kernel/printk.c:623:
+ ^Iif (ipipe_current_domain != ipipe_root_domain || $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1452: FILE: kernel/printk.c:623:
+ ^Iif (ipipe_current_domain != ipipe_root_domain || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1454: FILE: kernel/printk.c:624:
+ 	if (ipipe_current_domain != ipipe_root_domain || 
+#else /* !CONFIG_IPIPE_CORE */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1455: FILE: kernel/printk.c:625:
+ ^Iif (!down_trylock(&console_sem)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1455: FILE: kernel/printk.c:625:
+ ^Iif (!down_trylock(&console_sem)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1455: FILE: kernel/printk.c:625:
+ ^Iif (!down_trylock(&console_sem)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1497: FILE: kernel/printk.c:766:
+	if (ipipe_root_domain != ipipe_current_domain) {
+	    spin_unlock_irqrestore_hw(&logbuf_lock, flags);

WARNING:TABSTOP: Statements should start on a tabstop
#1499: FILE: kernel/printk.c:768:
+	    return;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1514: FILE: kernel/printk.c:782:
+void __ipipe_sync_console (unsigned virq) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1514: FILE: kernel/printk.c:782:
+void __ipipe_sync_console (unsigned virq) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1514: FILE: kernel/printk.c:782:
+void __ipipe_sync_console (unsigned virq) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1515: FILE: kernel/printk.c:783:
+void __ipipe_sync_console (unsigned virq) {
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1518: FILE: kernel/printk.c:786:
+    unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1520: FILE: kernel/printk.c:788:
+    spin_lock_irqsave_hw(&logbuf_lock, flags);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1523: FILE: kernel/printk.c:791:
+    /* Not absolutely atomic wrt to the triggering point, but this is
+       harmless. We only try to reduce the useless triggers by a cheap

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1524: FILE: kernel/printk.c:792:
+       trick here. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1526: FILE: kernel/printk.c:794:
+    clear_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags);$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1526: FILE: kernel/printk.c:794:
+    clear_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags);
                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1526: FILE: kernel/printk.c:794:
+    clear_bit(IPIPE_PPRINTK_FLAG,&ipipe_root_domain->flags);
                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1528: FILE: kernel/printk.c:796:
+    if (cpu_online(smp_processor_id()) && system_state == $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1528: FILE: kernel/printk.c:796:
+    if (cpu_online(smp_processor_id()) && system_state == $

CHECK:BRACES: braces {} should be used on all arms of this statement
#1528: FILE: kernel/printk.c:796:
+    if (cpu_online(smp_processor_id()) && system_state == 
[...]
+    } else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1530: FILE: kernel/printk.c:797:
+        console_locked = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1530: FILE: kernel/printk.c:797:
+        console_locked = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1532: FILE: kernel/printk.c:799:
+        console_may_schedule = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1532: FILE: kernel/printk.c:799:
+        console_may_schedule = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1534: FILE: kernel/printk.c:801:
+    } else$

CHECK:BRACES: Unbalanced braces around else statement
#1534: FILE: kernel/printk.c:801:
+    } else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1604: FILE: lib/kernel_lock.c:24:
+	if (ipipe_current_domain != ipipe_root_domain)
+	    return this_cpu;

WARNING:TABSTOP: Statements should start on a tabstop
#1605: FILE: lib/kernel_lock.c:25:
+	    return this_cpu;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175437.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 58 errors, 161 warnings, 38 checks, 1476 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175437.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
