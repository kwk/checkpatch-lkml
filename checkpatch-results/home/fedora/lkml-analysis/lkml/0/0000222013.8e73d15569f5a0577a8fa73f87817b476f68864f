WARNING:TYPO_SPELLING: 'haev' may be misspelled - perhaps 'have'?
#39: 
> functions to haev a single exit path that releases the lock.
               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
Content-Type: text/plain; name="cdu31a-locking-dd.patch"; charset=iso-8859-1

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#100: FILE: drivers/cdrom/cdu31a.c:229:
+static int cdu31a_irq = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#124: FILE: drivers/cdrom/cdu31a.c:282:
+static int is_double_speed = 0;	/* Does the drive support double speed ? */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#133: FILE: drivers/cdrom/cdu31a.c:284:
+static int door_locked = 0;	/* Door has been locked? */

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#157: FILE: drivers/cdrom/cdu31a.c:346:
+	if (CDSL_CURRENT != slot_nr)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: drivers/cdrom/cdu31a.c:680:
+	printk("CDU31A: Resetting drive on error\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: drivers/cdrom/cdu31a.c:689:
+		printk("CDU31A: Unable to spin up drive: 0x%2.2x\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#311: FILE: drivers/cdrom/cdu31a.c:960:
+			if (!door_locked) {
 				sony_audio_status = CDROM_AUDIO_INVALID;
 			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: drivers/cdrom/cdu31a.c:1173:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#463: FILE: drivers/cdrom/cdu31a.c:1501:
+      respinup_on_gettoc:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#492: FILE: drivers/cdrom/cdu31a.c:1510:
+	/* The drive sometimes returns error 0.  I don't know why, but ignore
+	   it.  It seems to mean the drive has already done the operation. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#492: FILE: drivers/cdrom/cdu31a.c:1510:
+	   it.  It seems to mean the drive has already done the operation. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_size < 2'
#493: FILE: drivers/cdrom/cdu31a.c:1511:
+	if ((res_size < 2)
+	    || ((res_reg[0] != 0) && (res_reg[1] != 0))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_reg[0] != 0'
#493: FILE: drivers/cdrom/cdu31a.c:1511:
+	if ((res_size < 2)
+	    || ((res_reg[0] != 0) && (res_reg[1] != 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_reg[1] != 0'
#493: FILE: drivers/cdrom/cdu31a.c:1511:
+	if ((res_size < 2)
+	    || ((res_reg[0] != 0) && (res_reg[1] != 0))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#494: FILE: drivers/cdrom/cdu31a.c:1512:
+	if ((res_size < 2)
+	    || ((res_reg[0] != 0) && (res_reg[1] != 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_reg[1] == SONY_AUDIO_PLAYING_ERR'
#496: FILE: drivers/cdrom/cdu31a.c:1514:
+		if ((res_reg[1] == SONY_AUDIO_PLAYING_ERR)
+		    || (res_reg[1] == 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_reg[1] == 0'
#496: FILE: drivers/cdrom/cdu31a.c:1514:
+		if ((res_reg[1] == SONY_AUDIO_PLAYING_ERR)
+		    || (res_reg[1] == 0)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#497: FILE: drivers/cdrom/cdu31a.c:1515:
+		if ((res_reg[1] == SONY_AUDIO_PLAYING_ERR)
+		    || (res_reg[1] == 0)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#502: FILE: drivers/cdrom/cdu31a.c:1520:
+		/* If the drive says it is not spun up (even though we just did it!)
+		   then retry the operation at least a few times. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#502: FILE: drivers/cdrom/cdu31a.c:1520:
+		   then retry the operation at least a few times. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_reg[1] == SONY_NOT_SPIN_ERR'
#503: FILE: drivers/cdrom/cdu31a.c:1521:
+		if ((res_reg[1] == SONY_NOT_SPIN_ERR)
+		    && (num_spin_ups < MAX_CDU31A_RETRIES)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num_spin_ups < MAX_CDU31A_RETRIES'
#503: FILE: drivers/cdrom/cdu31a.c:1521:
+		if ((res_reg[1] == SONY_NOT_SPIN_ERR)
+		    && (num_spin_ups < MAX_CDU31A_RETRIES)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#504: FILE: drivers/cdrom/cdu31a.c:1522:
+		if ((res_reg[1] == SONY_NOT_SPIN_ERR)
+		    && (num_spin_ups < MAX_CDU31A_RETRIES)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#510: FILE: drivers/cdrom/cdu31a.c:1527:
+		printk("CDU31A: Error reading TOC: %x %s\n",

WARNING:INDENTED_LABEL: labels should not be indented
#520: FILE: drivers/cdrom/cdu31a.c:1532:
+      gettoc_drive_spinning:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#523: FILE: drivers/cdrom/cdu31a.c:1535:
+	/* The idea here is we keep asking for sessions until the command
+	   fails.  Then we know what the last valid session on the disk is.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: drivers/cdrom/cdu31a.c:1537:
+^I   1; the command returns different information if you give it 0. $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: drivers/cdrom/cdu31a.c:1549:
+		printk("CDU31A: Trying session %d\n", session);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#547: FILE: drivers/cdrom/cdu31a.c:1551:
+		parms[0] = session;
 		^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#549: FILE: drivers/cdrom/cdu31a.c:1553:
+			       parms, 1, res_reg, &res_size);
 			       ^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#553: FILE: drivers/cdrom/cdu31a.c:1556:
+		printk("%2.2x %2.2x\n", res_reg[0], res_reg[1]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_size < 2'
#564: FILE: drivers/cdrom/cdu31a.c:1559:
+		if ((res_size < 2)
+		    || ((res_reg[0] & 0xf0) == 0x20)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#565: FILE: drivers/cdrom/cdu31a.c:1560:
+		if ((res_size < 2)
+		    || ((res_reg[0] & 0xf0) == 0x20)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#574: FILE: drivers/cdrom/cdu31a.c:1568:
+		printk("Reading session %d\n", session);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#608: FILE: drivers/cdrom/cdu31a.c:1571:
+		parms[0] = session;
 		^^^^^

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#610: FILE: drivers/cdrom/cdu31a.c:1573:
+			       parms,
 			       ^^^^^

CHECK:SPACING: No space is necessary after a cast
#612: FILE: drivers/cdrom/cdu31a.c:1575:
+			       (unsigned char *) &single_toc,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res_size < 2'
#614: FILE: drivers/cdrom/cdu31a.c:1577:
+		if ((res_size < 2)
+		    || ((single_toc.exec_status[0] & 0xf0) ==
+			0x20)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#615: FILE: drivers/cdrom/cdu31a.c:1578:
+		if ((res_size < 2)
+		    || ((single_toc.exec_status[0] & 0xf0) ==

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.exec_status[1]'
#721: FILE: drivers/cdrom/cdu31a.c:1584:
+			     translate_error(single_toc.
+					     exec_status[1]));

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#723: FILE: drivers/cdrom/cdu31a.c:1586:
+			/* An error reading the TOC.  Return without sony_toc_read
+			   set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#723: FILE: drivers/cdrom/cdu31a.c:1586:
+			   set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#738: FILE: drivers/cdrom/cdu31a.c:1601:
+		/* For points that do not exist, move the data over them
+		   to the right location. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#738: FILE: drivers/cdrom/cdu31a.c:1601:
+		   to the right location. */

CHECK:SPACING: No space is necessary after a cast
#740: FILE: drivers/cdrom/cdu31a.c:1603:
+			memmove(((char *) &single_toc) + 27,

CHECK:SPACING: No space is necessary after a cast
#741: FILE: drivers/cdrom/cdu31a.c:1604:
+				((char *) &single_toc) + 18,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.max_start_outer_leadout_msf'
#748: FILE: drivers/cdrom/cdu31a.c:1610:
+			    bcd_to_int(single_toc.
+				       max_start_outer_leadout_msf

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.max_start_outer_leadout_msf'
#753: FILE: drivers/cdrom/cdu31a.c:1614:
+			    bcd_to_int(single_toc.
+				       max_start_outer_leadout_msf

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.max_start_outer_leadout_msf'
#758: FILE: drivers/cdrom/cdu31a.c:1618:
+			    bcd_to_int(single_toc.
+				       max_start_outer_leadout_msf

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.lead_out_start_msf'
#782: FILE: drivers/cdrom/cdu31a.c:1622:
+			    msf_to_log(sony_toc.
+				       lead_out_start_msf);

CHECK:SPACING: No space is necessary after a cast
#785: FILE: drivers/cdrom/cdu31a.c:1625:
+			memmove(((char *) &single_toc) + 36,

CHECK:SPACING: No space is necessary after a cast
#786: FILE: drivers/cdrom/cdu31a.c:1626:
+				((char *) &single_toc) + 27,

CHECK:SPACING: No space is necessary after a cast
#791: FILE: drivers/cdrom/cdu31a.c:1631:
+			memmove(((char *) &single_toc) + 45,

CHECK:SPACING: No space is necessary after a cast
#792: FILE: drivers/cdrom/cdu31a.c:1632:
+				((char *) &single_toc) + 36,

CHECK:SPACING: No space is necessary after a cast
#797: FILE: drivers/cdrom/cdu31a.c:1637:
+			memmove(((char *) &single_toc) + 54,

CHECK:SPACING: No space is necessary after a cast
#798: FILE: drivers/cdrom/cdu31a.c:1638:
+				((char *) &single_toc) + 45,

CHECK:SPACING: No space is necessary after a cast
#803: FILE: drivers/cdrom/cdu31a.c:1643:
+			memmove(((char *) &single_toc) + 63,

CHECK:SPACING: No space is necessary after a cast
#804: FILE: drivers/cdrom/cdu31a.c:1644:
+				((char *) &single_toc) + 54,

CHECK:SPACING: No space is necessary after a cast
#809: FILE: drivers/cdrom/cdu31a.c:1649:
+			memmove(((char *) &single_toc) + 72,

CHECK:SPACING: No space is necessary after a cast
#810: FILE: drivers/cdrom/cdu31a.c:1650:
+				((char *) &single_toc) + 63,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#818: FILE: drivers/cdrom/cdu31a.c:1658:
+		    single_toc.last_track_num == 2 /* CD-I */ ) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].track_start_msf[0]'
#823: FILE: drivers/cdrom/cdu31a.c:1663:
+			sony_toc.tracks[totaltracks].
+			    track_start_msf[0] = 0;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].track_start_msf[1]'
#825: FILE: drivers/cdrom/cdu31a.c:1665:
+			sony_toc.tracks[totaltracks].
+			    track_start_msf[1] = 2;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].track_start_msf[2]'
#827: FILE: drivers/cdrom/cdu31a.c:1667:
+			sony_toc.tracks[totaltracks].
+			    track_start_msf[2] = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#828: FILE: drivers/cdrom/cdu31a.c:1668:
+			mint = maxt = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#830: FILE: drivers/cdrom/cdu31a.c:1670:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#834: FILE: drivers/cdrom/cdu31a.c:1674:
+			int i;
+			for (i = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: space preferred before that '-' (ctx:ExE)
#838: FILE: drivers/cdrom/cdu31a.c:1678:
+			     -
 			     ^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.first_track_num'
#840: FILE: drivers/cdrom/cdu31a.c:1680:
+			     bcd_to_int(single_toc.
+					first_track_num);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].address'
#843: FILE: drivers/cdrom/cdu31a.c:1683:
+				sony_toc.tracks[totaltracks].
+				    address =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].control'
#846: FILE: drivers/cdrom/cdu31a.c:1686:
+				sony_toc.tracks[totaltracks].
+				    control =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].track'
#849: FILE: drivers/cdrom/cdu31a.c:1689:
+				sony_toc.tracks[totaltracks].
+				    track =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.tracks[i]'
#953: FILE: drivers/cdrom/cdu31a.c:1695:
+				    bcd_to_int(single_toc.
+					       tracks[i].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tracks[i].track_start_msf[0]'
#954: FILE: drivers/cdrom/cdu31a.c:1696:
+					       tracks[i].
+					       track_start_msf[0]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.tracks[i]'
#959: FILE: drivers/cdrom/cdu31a.c:1700:
+				    bcd_to_int(single_toc.
+					       tracks[i].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tracks[i].track_start_msf[1]'
#960: FILE: drivers/cdrom/cdu31a.c:1701:
+					       tracks[i].
+					       track_start_msf[1]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.tracks[i]'
#1057: FILE: drivers/cdrom/cdu31a.c:1705:
+				    bcd_to_int(single_toc.
+					       tracks[i].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tracks[i].track_start_msf[2]'
#1058: FILE: drivers/cdrom/cdu31a.c:1706:
+					       tracks[i].
+					       track_start_msf[2]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'single_toc.start_track_lba'
#1061: FILE: drivers/cdrom/cdu31a.c:1709:
+					single_toc.
+					    start_track_lba =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks'
#1063: FILE: drivers/cdrom/cdu31a.c:1711:
+					    msf_to_log(sony_toc.
+						       tracks

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].track'
#1068: FILE: drivers/cdrom/cdu31a.c:1716:
+				    sony_toc.tracks[totaltracks].
+				    track)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks]'
#1071: FILE: drivers/cdrom/cdu31a.c:1719:
+					    sony_toc.
+					    tracks[totaltracks].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tracks[totaltracks].track'
#1072: FILE: drivers/cdrom/cdu31a.c:1720:
+					    tracks[totaltracks].
+					    track;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks].track'
#1075: FILE: drivers/cdrom/cdu31a.c:1723:
+				    sony_toc.tracks[totaltracks].
+				    track)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[totaltracks]'
#1078: FILE: drivers/cdrom/cdu31a.c:1726:
+					    sony_toc.
+					    tracks[totaltracks].

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tracks[totaltracks].track'
#1079: FILE: drivers/cdrom/cdu31a.c:1727:
+					    tracks[totaltracks].
+					    track;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1085: FILE: drivers/cdrom/cdu31a.c:1733:
+		/* Disk type of last session wins. For example:
+		   CD-Extra has disk type 0 for the first session, so

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1089: FILE: drivers/cdrom/cdu31a.c:1737:
+		   data track ... */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1126: FILE: drivers/cdrom/cdu31a.c:1755:
+			printk("CDU31A: too many sessions: %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1235: FILE: drivers/cdrom/cdu31a.c:2265:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: drivers/cdrom/cdu31a.c:2279:
+		retval = do_sony_cd_cmd_chk("EJECT", SONY_EJECT_CMD, NULL, 0,
 					  res_reg, &res_size);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1269: FILE: drivers/cdrom/cdu31a.c:2302:
 	switch (cmd) {
+		case CDROMSTART:	/* Spin up the drive */
[...]
+		case CDROMSTOP:	/* Spin down the drive */
[...]
+		case CDROMPAUSE:	/* Pause the drive */
[...]
+		case CDROMRESUME:	/* Start the drive after being paused */
[...]
+		case CDROMPLAYMSF:	/* Play starting at the given MSF address. */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: drivers/cdrom/cdu31a.c:2305:
+			retval = do_sony_cd_cmd_chk("START",
+					SONY_SPIN_UP_CMD, NULL, 0, res_reg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: drivers/cdrom/cdu31a.c:2311:
+			do_sony_cd_cmd(SONY_AUDIO_STOP_CMD, NULL, 0, res_reg,
+					&res_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1316: FILE: drivers/cdrom/cdu31a.c:2319:
+			retval = do_sony_cd_cmd_chk("STOP",
+					SONY_SPIN_DOWN_CMD, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1366: FILE: drivers/cdrom/cdu31a.c:2349:
+			do_sony_cd_cmd(SONY_SPIN_UP_CMD, NULL, 0, res_reg,
+				&res_size);

CHECK:SPACING: No space is necessary after a cast
#1412: FILE: drivers/cdrom/cdu31a.c:2376:
+				    int_to_bcd(((unsigned char *) arg)[i - 1]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[track_idx].track_start_msf[0]'
#1532: FILE: drivers/cdrom/cdu31a.c:2470:
+			params[1] = int_to_bcd(sony_toc.tracks[track_idx].
+					track_start_msf[0]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[track_idx].track_start_msf[1]'
#1534: FILE: drivers/cdrom/cdu31a.c:2472:
+			params[2] = int_to_bcd(sony_toc.tracks[track_idx].
+					track_start_msf[1]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[track_idx].track_start_msf[2]'
#1536: FILE: drivers/cdrom/cdu31a.c:2474:
+			params[3] = int_to_bcd(sony_toc.tracks[track_idx].
+					track_start_msf[2]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[track_idx].track_start_msf[0]'
#1565: FILE: drivers/cdrom/cdu31a.c:2490:
+			params[4] = int_to_bcd(sony_toc.tracks[track_idx].
+					track_start_msf[0]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[track_idx].track_start_msf[1]'
#1567: FILE: drivers/cdrom/cdu31a.c:2492:
+			params[5] = int_to_bcd(sony_toc.tracks[track_idx].
+					track_start_msf[1]);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'sony_toc.tracks[track_idx].track_start_msf[2]'
#1569: FILE: drivers/cdrom/cdu31a.c:2494:
+			params[6] = int_to_bcd(sony_toc.tracks[track_idx].
+					track_start_msf[2]);

CHECK:SPACING: No space is necessary after a cast
#1606: FILE: drivers/cdrom/cdu31a.c:2527:
+				(struct cdrom_volctrl *) arg;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1616: FILE: drivers/cdrom/cdu31a.c:2533:
+			retval = do_sony_cd_cmd_chk("VOLCTRL",
+					 SONY_SET_DRIVE_PARAM_CMD,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1623: FILE: drivers/cdrom/cdu31a.c:2538:
+			retval = sony_get_subchnl_info(

CHECK:SPACING: No space is necessary after a cast
#1624: FILE: drivers/cdrom/cdu31a.c:2539:
+					(struct cdrom_subchnl *) arg);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1645: FILE: drivers/cdrom/cdu31a.c:2557:
 	switch (cmd) {
[...]
+		default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1696: FILE: drivers/cdrom/cdu31a.c:2586:
+			switch(ra.addr_format) {
+				case CDROM_LBA:
[...]
+				case CDROM_MSF:
[...]
+				default:

ERROR:SPACING: space required before the open parenthesis '('
#1696: FILE: drivers/cdrom/cdu31a.c:2586:
+			switch(ra.addr_format) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ra.addr.lba >=
 					     sony_toc.lead_out_start_lba'
#1698: FILE: drivers/cdrom/cdu31a.c:2588:
+					if ((ra.addr.lba >=
+					     sony_toc.lead_out_start_lba)
+					    || (ra.addr.lba + ra.nframes >=
+						sony_toc.lead_out_start_lba)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1700: FILE: drivers/cdrom/cdu31a.c:2590:
+					     sony_toc.lead_out_start_lba)
+					    || (ra.addr.lba + ra.nframes >=

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ra.addr.msf.minute >= 75'
#1707: FILE: drivers/cdrom/cdu31a.c:2597:
+					if ((ra.addr.msf.minute >= 75)
+					    || (ra.addr.msf.second >= 60)
+					    || (ra.addr.msf.frame >= 75)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ra.addr.msf.second >= 60'
#1707: FILE: drivers/cdrom/cdu31a.c:2597:
+					if ((ra.addr.msf.minute >= 75)
+					    || (ra.addr.msf.second >= 60)
+					    || (ra.addr.msf.frame >= 75)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ra.addr.msf.frame >= 75'
#1707: FILE: drivers/cdrom/cdu31a.c:2597:
+					if ((ra.addr.msf.minute >= 75)
+					    || (ra.addr.msf.second >= 60)
+					    || (ra.addr.msf.frame >= 75)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1708: FILE: drivers/cdrom/cdu31a.c:2598:
+					if ((ra.addr.msf.minute >= 75)
+					    || (ra.addr.msf.second >= 60)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1709: FILE: drivers/cdrom/cdu31a.c:2599:
+					    || (ra.addr.msf.second >= 60)
+					    || (ra.addr.msf.frame >= 75)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ra.addr.lba >=
 					     sony_toc.lead_out_start_lba'
#1724: FILE: drivers/cdrom/cdu31a.c:2607:
+					if ((ra.addr.lba >=
+					     sony_toc.lead_out_start_lba)
+					    || (ra.addr.lba + ra.nframes >=
+						sony_toc.lead_out_start_lba)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1726: FILE: drivers/cdrom/cdu31a.c:2609:
+					     sony_toc.lead_out_start_lba)
+					    || (ra.addr.lba + ra.nframes >=

WARNING:INDENTED_LABEL: labels should not be indented
#1757: FILE: drivers/cdrom/cdu31a.c:2630:
+     exit_scd_dev_ioctl:

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1768: FILE: drivers/cdrom/cdu31a.c:2693:
+	printk("CDU31A open, purpose=%d, usage=%d\n", purpose, sony_usage);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1788: FILE: drivers/cdrom/cdu31a.c:2748:
+	printk("CDU31A opened, purpose=%d, usage=%d\n", purpose, sony_usage);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1798: FILE: drivers/cdrom/cdu31a.c:2761:
+	printk("CDU31A closed, sony_usage %d\n", sony_usage);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1807: FILE: drivers/cdrom/cdu31a.c:2802:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222013.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 65 warnings, 50 checks, 1745 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222013.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
