CHECK:CAMELCASE: Avoid CamelCase: <pCifsFile>
#35: FILE: fs/cifs/dir.c:286:
+			if (!pCifsFile)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#73: FILE: fs/cifs/dir.c:290:
+			       sizeof(struct cifsFileInfo));

CHECK:CAMELCASE: Avoid CamelCase: <fileHandle>
#74: FILE: fs/cifs/dir.c:291:
+			pCifsFile->netfid = fileHandle;

CHECK:CAMELCASE: Avoid CamelCase: <pInode>
#76: FILE: fs/cifs/dir.c:293:
+			pCifsFile->pInode = newinode;

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#77: FILE: fs/cifs/dir.c:294:
+			pCifsFile->invalidHandle = FALSE;

CHECK:CAMELCASE: Avoid CamelCase: <closePend>
#78: FILE: fs/cifs/dir.c:295:
+			pCifsFile->closePend = FALSE;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: fs/cifs/dir.c:298:
+^I^I^I/* pCifsFile->pfile = file; */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <GlobalSMBSeslock>
#82: FILE: fs/cifs/dir.c:299:
+			write_lock(&GlobalSMBSeslock);

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#83: FILE: fs/cifs/dir.c:300:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#83: FILE: fs/cifs/dir.c:300:
+			list_add(&pCifsFile->tlist, &pTcon->openFileList);

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#84: FILE: fs/cifs/dir.c:301:
+			pCifsInode = CIFS_I(newinode);

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#89: FILE: fs/cifs/dir.c:306:
+			if (write_only == TRUE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:BRACES: braces {} should be used on all arms of this statement
#96: FILE: fs/cifs/dir.c:313:
+			if ((oplock & 0xF) == OPLOCK_EXCLUSIVE) {
[...]
+			} else if ((oplock & 0xF) == OPLOCK_READ)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#97: FILE: fs/cifs/dir.c:314:
+				pCifsInode->clientCanCacheAll = TRUE;

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#98: FILE: fs/cifs/dir.c:315:
+				pCifsInode->clientCanCacheRead = TRUE;

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#99: FILE: fs/cifs/dir.c:316:
+				cFYI(1, ("Exclusive Oplock granted on inode"

WARNING:SPLIT_STRING: quoted string split across lines
#100: FILE: fs/cifs/dir.c:317:
+				cFYI(1, ("Exclusive Oplock granted on inode"
+					 " %p", newinode));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193532.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 1 warnings, 15 checks, 79 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193532.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
