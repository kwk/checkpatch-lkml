WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
--- 8.1/init/main.c Mon, 15 Apr 2002 13:28:23 +1000 kaos (linux-2.5/w/d/29_main.c 1.16 444)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#52: FILE: init/main.c:275:
+void __init sort_table(void *table, size_t entry_size, size_t entries, size_t key_size, size_t key_offset)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#57: FILE: init/main.c:280:
+	char save[entry_size];
+	a = (char *)table;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#59: FILE: init/main.c:282:
+		printk(KERN_ERR "sort_table key_size %d is incorrect\n", key_size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sort_table', this function's name, in a string
#59: FILE: init/main.c:282:
+		printk(KERN_ERR "sort_table key_size %d is incorrect\n", key_size);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#67: FILE: init/main.c:290:
+				if (*((__u32 *)(b+key_offset-entry_size)) >
 				                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#67: FILE: init/main.c:290:
+				if (*((__u32 *)(b+key_offset-entry_size)) >
 				                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#68: FILE: init/main.c:291:
+				    *((__u32 *)(b+key_offset))) {
 				                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#70: FILE: init/main.c:293:
+					memcpy(b, b-entry_size, entry_size);
 					           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#71: FILE: init/main.c:294:
+					memcpy(b-entry_size, save, entry_size);
 					        ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#75: FILE: init/main.c:298:
+			}
+			else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#75: FILE: init/main.c:298:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#76: FILE: init/main.c:299:
+				if (*((__u64 *)(b+key_offset-entry_size)) >
 				                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#76: FILE: init/main.c:299:
+				if (*((__u64 *)(b+key_offset-entry_size)) >
 				                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#77: FILE: init/main.c:300:
+				    *((__u64 *)(b+key_offset))) {
 				                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#79: FILE: init/main.c:302:
+					memcpy(b, b-entry_size, entry_size);
 					           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#80: FILE: init/main.c:303:
+					memcpy(b-entry_size, save, entry_size);
 					        ^

CHECK:SPACING: No space is necessary after a cast
#107: FILE: arch/i386/mm/extable.c:36:
+	sort_table((void *) __start___ex_table, sizeof(*__start___ex_table),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: arch/i386/mm/extable.c:37:
+	sort_table((void *) __start___ex_table, sizeof(*__start___ex_table),
+			__stop___ex_table - __start___ex_table,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/kernel.h:98:
+extern void sort_arch_tables(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#124: FILE: include/linux/kernel.h:99:
+extern void sort_table(void *table, size_t entry_size, size_t entries, size_t key_size, size_t key_offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/kernel.h:99:
+extern void sort_table(void *table, size_t entry_size, size_t entries, size_t key_size, size_t key_offset);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000463643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 6 warnings, 15 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000463643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
