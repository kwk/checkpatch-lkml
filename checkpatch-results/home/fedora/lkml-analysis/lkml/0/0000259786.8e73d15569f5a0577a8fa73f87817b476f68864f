WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Please find the updated patch below. The patch includes following updates as per 

WARNING:TYPO_SPELLING: 'achived' may be misspelled - perhaps 'achieved'?
#58: 
Network packet tracing is achived using kernel probes allowing you
                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: drivers/net/Kconfig:2601:
+config NETPKTLOG
+	tristate "Network packet Tracer using kernel probes(EXPERIMENTAL)"
+	depends on KPROBES && IP_NF_TARGET_LOG
+	---help---
+	Network packet tracing is achived using kernel probes allowing you
+	to see the network packets while moving up and down the stack. This
+	module uses kprobes mechanism which is highly efficient for dynamic
+	tracing.
+
+	See driver/net/netpktlog.c for details.
+	To compile this driver as a module, choose M.If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'achived' may be misspelled - perhaps 'achieved'?
#100: FILE: drivers/net/Kconfig:2605:
+	Network packet tracing is achived using kernel probes allowing you
 	                          ^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: drivers/net/netpktlog.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#137: FILE: drivers/net/netpktlog.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#138: FILE: drivers/net/netpktlog.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: drivers/net/netpktlog.c:23:
+ * ^I^ISuggested by Andi Kleen.$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#160: FILE: drivers/net/netpktlog.c:39:
+module_param(source_port, ushort, S_IRUSR | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#161: FILE: drivers/net/netpktlog.c:40:
+module_param(target_port, ushort, S_IRUSR | S_IWUSR);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#168: FILE: drivers/net/netpktlog.c:47:
+		printk("TRUNCATED");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#173: FILE: drivers/net/netpktlog.c:52:
+	 * TOS, len, DF/MF, fragment offset, TTL, src, dst, options. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#175: FILE: drivers/net/netpktlog.c:54:
+	printk("SRC=%u.%u.%u.%u DST=%u.%u.%u.%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: drivers/net/netpktlog.c:58:
+	printk("LEN=%u TOS=0x%02X PREC=0x%02X TTL=%u ID=%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: drivers/net/netpktlog.c:64:
+		printk("CE ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#187: FILE: drivers/net/netpktlog.c:66:
+		printk("DF ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: drivers/net/netpktlog.c:68:
+		printk("MF ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: drivers/net/netpktlog.c:72:
+		printk("FRAG:%u ", ntohs(iph.frag_off) & IP_OFFSET);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#196: FILE: drivers/net/netpktlog.c:75:
+	if ((info->logflags & IPT_LOG_IPOPT)
+	    && iph.ihl * 4 > sizeof(struct iphdr)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#202: FILE: drivers/net/netpktlog.c:81:
+			printk("TRUNCATED");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: drivers/net/netpktlog.c:86:
+		printk("OPT (");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#209: FILE: drivers/net/netpktlog.c:88:
+			printk("%02X", opt[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: drivers/net/netpktlog.c:89:
+		printk(") ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#218: FILE: drivers/net/netpktlog.c:97:
+			printk("PROTO=TCP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: drivers/net/netpktlog.c:105:
+				printk("INCOMPLETE [%u bytes] ", iph.ihl * 4);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: drivers/net/netpktlog.c:110:
+			printk("SPT=%u DPT=%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#235: FILE: drivers/net/netpktlog.c:114:
+				printk("SEQ=%u ACK=%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#238: FILE: drivers/net/netpktlog.c:117:
+			printk("WINDOW=%u ", ntohs(tcph.window));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: drivers/net/netpktlog.c:119:
+			printk("RES=0x%02x ",

CHECK:SPACING: No space is necessary after a cast
#241: FILE: drivers/net/netpktlog.c:120:
+			       (u8) (ntohl

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#246: FILE: drivers/net/netpktlog.c:125:
+				printk("CWR ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#248: FILE: drivers/net/netpktlog.c:127:
+				printk("ECE ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: drivers/net/netpktlog.c:129:
+				printk("URG ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#252: FILE: drivers/net/netpktlog.c:131:
+				printk("ACK ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#254: FILE: drivers/net/netpktlog.c:133:
+				printk("PSH ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: drivers/net/netpktlog.c:135:
+				printk("RST ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#258: FILE: drivers/net/netpktlog.c:137:
+				printk("SYN ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#260: FILE: drivers/net/netpktlog.c:139:
+				printk("FIN ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: drivers/net/netpktlog.c:141:
+			printk("URGP=%u ", ntohs(tcph.urg_ptr));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#265: FILE: drivers/net/netpktlog.c:144:
+			if ((info->logflags & IPT_LOG_TCPOPT)
+			    && tcph.doff * 4 > sizeof(struct tcphdr)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: drivers/net/netpktlog.c:152:
+					printk("TRUNCATED");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#278: FILE: drivers/net/netpktlog.c:157:
+				printk("OPT (");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#280: FILE: drivers/net/netpktlog.c:159:
+					printk("%02X", opt[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#281: FILE: drivers/net/netpktlog.c:160:
+				printk(") ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: drivers/net/netpktlog.c:168:
+			printk("PROTO=UDP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: drivers/net/netpktlog.c:176:
+				printk("INCOMPLETE [%u bytes] ", iph.ihl * 4);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: drivers/net/netpktlog.c:181:
+			printk("SPT=%u DPT=%u LEN=%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: drivers/net/netpktlog.c:189:
+			printk("PROTO=ICMP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#318: FILE: drivers/net/netpktlog.c:197:
+				printk("INCOMPLETE [bytes] ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#323: FILE: drivers/net/netpktlog.c:202:
+			printk("TYPE=%u CODE=%u ", icmph.type, icmph.code);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#329: FILE: drivers/net/netpktlog.c:208:
+				printk("ID=%u SEQ=%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#336: FILE: drivers/net/netpktlog.c:215:
+				printk("PARAMETER=%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#341: FILE: drivers/net/netpktlog.c:220:
+				printk("GATEWAY=%u.%u.%u.%u ",

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#343: FILE: drivers/net/netpktlog.c:222:
+				/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#349: FILE: drivers/net/netpktlog.c:228:
+				if (icmph.type == ICMP_DEST_UNREACH
+				    && icmph.code == ICMP_FRAG_NEEDED)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#350: FILE: drivers/net/netpktlog.c:229:
+					printk("MTU=%u ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#363: FILE: drivers/net/netpktlog.c:242:
+			printk("PROTO=AH ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#369: FILE: drivers/net/netpktlog.c:248:
+				printk("INCOMPLETE [bytes] ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#374: FILE: drivers/net/netpktlog.c:253:
+			printk("SPI=0x%x ", ntohl(ah.spi));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: drivers/net/netpktlog.c:260:
+			printk("PROTO=ESP ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#391: FILE: drivers/net/netpktlog.c:270:
+				printk("INCOMPLETE [bytes] ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#396: FILE: drivers/net/netpktlog.c:275:
+			printk("SPI=0x%x ", ntohl(esph.spi));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: drivers/net/netpktlog.c:280:
+		printk("PROTO=%u ", iph.protocol);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#419: FILE: drivers/net/netpktlog.c:298:
+/*
+ * nettrace_port: This is a generic routine that can be used to dump the

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!source_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!target_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!source_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dest == target_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!target_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'source == source_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'source == source_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dest == target_port'
#427: FILE: drivers/net/netpktlog.c:306:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#428: FILE: drivers/net/netpktlog.c:307:
+	if (((!source_port) && (!target_port))
+	    || ((!source_port) && (dest == target_port))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#429: FILE: drivers/net/netpktlog.c:308:
+	    || ((!source_port) && (dest == target_port))
+	    || ((!target_port) && (source == source_port))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#430: FILE: drivers/net/netpktlog.c:309:
+	    || ((!target_port) && (source == source_port))
+	    || ((source == source_port) && (dest == target_port)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#442: FILE: drivers/net/netpktlog.c:321:
+	struct udphdr *udph;
+	iph = (struct iphdr *)skb->data;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#481: FILE: drivers/net/netpktlog.c:360:
+/*
+ * Compile the kernel with options CONFIG_KPROBES, CONFIG_NETPKTLOG,

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: drivers/net/netpktlog.c:376:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#499: FILE: drivers/net/netpktlog.c:378:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#499: FILE: drivers/net/netpktlog.c:378:
+	if ((skb->protocol == htons(ETH_P_IP))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#500: FILE: drivers/net/netpktlog.c:379:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#503: FILE: drivers/net/netpktlog.c:382:
+			printk("netif_rx: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#505: FILE: drivers/net/netpktlog.c:384:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#516: FILE: drivers/net/netpktlog.c:395:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#518: FILE: drivers/net/netpktlog.c:397:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#518: FILE: drivers/net/netpktlog.c:397:
+	if ((skb->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#519: FILE: drivers/net/netpktlog.c:398:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#522: FILE: drivers/net/netpktlog.c:401:
+			printk("__kfree_skb: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#524: FILE: drivers/net/netpktlog.c:403:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#535: FILE: drivers/net/netpktlog.c:414:
+	struct ipt_log_info info;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#537: FILE: drivers/net/netpktlog.c:416:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#537: FILE: drivers/net/netpktlog.c:416:
+	if ((skb->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#538: FILE: drivers/net/netpktlog.c:417:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: drivers/net/netpktlog.c:420:
+			printk("netif_receive_skb: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#543: FILE: drivers/net/netpktlog.c:422:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#556: FILE: drivers/net/netpktlog.c:435:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#558: FILE: drivers/net/netpktlog.c:437:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#558: FILE: drivers/net/netpktlog.c:437:
+	if ((skb->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#559: FILE: drivers/net/netpktlog.c:438:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#562: FILE: drivers/net/netpktlog.c:441:
+			printk("ip_rcv: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#564: FILE: drivers/net/netpktlog.c:443:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#576: FILE: drivers/net/netpktlog.c:455:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#578: FILE: drivers/net/netpktlog.c:457:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#578: FILE: drivers/net/netpktlog.c:457:
+	if ((skb->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#579: FILE: drivers/net/netpktlog.c:458:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->data)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#582: FILE: drivers/net/netpktlog.c:461:
+			printk("ip_local_deliver: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#584: FILE: drivers/net/netpktlog.c:463:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#596: FILE: drivers/net/netpktlog.c:475:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#602: FILE: drivers/net/netpktlog.c:481:
+			printk("ip_output: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#604: FILE: drivers/net/netpktlog.c:483:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#616: FILE: drivers/net/netpktlog.c:495:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#618: FILE: drivers/net/netpktlog.c:497:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#618: FILE: drivers/net/netpktlog.c:497:
+	if ((skb->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#619: FILE: drivers/net/netpktlog.c:498:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#622: FILE: drivers/net/netpktlog.c:501:
+			printk("tcp_v4_rcv: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#624: FILE: drivers/net/netpktlog.c:503:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#636: FILE: drivers/net/netpktlog.c:515:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#638: FILE: drivers/net/netpktlog.c:517:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#638: FILE: drivers/net/netpktlog.c:517:
+	if ((skb->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#639: FILE: drivers/net/netpktlog.c:518:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#642: FILE: drivers/net/netpktlog.c:521:
+			printk("tcp_v4_do_rcv: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#644: FILE: drivers/net/netpktlog.c:523:
+			printk("\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#652: FILE: drivers/net/netpktlog.c:531:
+				struct tcphdr *th, unsigned len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#657: FILE: drivers/net/netpktlog.c:536:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->protocol == htons(ETH_P_IP)'
#659: FILE: drivers/net/netpktlog.c:538:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#659: FILE: drivers/net/netpktlog.c:538:
+	if ((skb->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#660: FILE: drivers/net/netpktlog.c:539:
+	if ((skb->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)skb->nh.iph)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#663: FILE: drivers/net/netpktlog.c:542:
+			printk("tcp_rcv_established: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#665: FILE: drivers/net/netpktlog.c:544:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#678: FILE: drivers/net/netpktlog.c:557:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from->protocol == htons(ETH_P_IP)'
#680: FILE: drivers/net/netpktlog.c:559:
+	if ((from->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)from->nh.iph)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#680: FILE: drivers/net/netpktlog.c:559:
+	if ((from->protocol == htons(ETH_P_IP))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#681: FILE: drivers/net/netpktlog.c:560:
+	if ((from->protocol == htons(ETH_P_IP))
+	    && (iph = (struct iphdr *)from->nh.iph)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#684: FILE: drivers/net/netpktlog.c:563:
+			printk("skb_copy_datagram_iovec: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#686: FILE: drivers/net/netpktlog.c:565:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#698: FILE: drivers/net/netpktlog.c:577:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#704: FILE: drivers/net/netpktlog.c:583:
+			printk("tcp_send_dupack: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#706: FILE: drivers/net/netpktlog.c:585:
+			printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#717: FILE: drivers/net/netpktlog.c:596:
+	unsigned short source, dest;
+	info.logflags = IPT_LOG_IPOPT;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#723: FILE: drivers/net/netpktlog.c:602:
+			printk("ip_forward: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#725: FILE: drivers/net/netpktlog.c:604:
+			printk("\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#738: FILE: drivers/net/netpktlog.c:617:
+	{ .funcname = #func, .jp = { .entry = (kprobe_opcode_t*)j##func }}

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(nettrace_objs)
#754: FILE: drivers/net/netpktlog.c:633:
+#define MAX_NETTRACE_ROUTINE (sizeof(nettrace_objs)/sizeof(nettrace_objs[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#754: FILE: drivers/net/netpktlog.c:633:
+#define MAX_NETTRACE_ROUTINE (sizeof(nettrace_objs)/sizeof(nettrace_objs[0]))
                                                    ^

WARNING:TYPO_SPELLING: 'invokation' may be misspelled - perhaps 'invocation'?
#761: FILE: drivers/net/netpktlog.c:640:
+	/* first time invokation to initialize probe handler */
 	              ^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#768: FILE: drivers/net/netpktlog.c:647:
+			printk("plant jprobe at %s (%p), handler addr %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#772: FILE: drivers/net/netpktlog.c:651:
+			printk("couldn't find %s to plant jprobe\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#777: FILE: drivers/net/netpktlog.c:656:
+	printk("Network packets tracing is enabled...\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#784: FILE: drivers/net/netpktlog.c:663:
+	int i;
+	for (i = 0; i < MAX_NETTRACE_ROUTINE; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#788: FILE: drivers/net/netpktlog.c:667:
+	printk("Network packets tracing is disabled...\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#801: FILE: include/linux/netfilter_ipv4/ipt_LOG.h:14:
 };
+void dump_packet(const struct ipt_log_info *info, const struct sk_buff *skb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: include/linux/netfilter_ipv4/ipt_LOG.h:15:
+void dump_packet(const struct ipt_log_info *info, const struct sk_buff *skb,
+			unsigned int iphoff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: net/ipv4/netfilter/ipt_LOG.c:45:
+void dump_packet(const struct ipt_log_info *info,
 			const struct sk_buff *skb,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#829: FILE: net/ipv4/netfilter/ipt_LOG.c:464:
+EXPORT_SYMBOL_GPL(dump_packet);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259786.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 105 warnings, 37 checks, 718 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259786.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
