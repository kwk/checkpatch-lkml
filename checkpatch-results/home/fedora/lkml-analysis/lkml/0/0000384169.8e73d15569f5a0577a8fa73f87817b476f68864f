WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#119: FILE: include/linux/rmap.h:16:
+void page_move_rmap(struct page *, struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#119: FILE: include/linux/rmap.h:16:
+void page_move_rmap(struct page *, struct vm_area_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: include/linux/rmap.h:17:
+void page_move_rmap(struct page *, struct vm_area_struct *,
+			unsigned long oaddr, unsigned long naddr);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#278: FILE: mm/rmap.c:40:
+};
+static DEFINE_PER_CPU(struct rmap_chain *, rmap_chain) = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#278: FILE: mm/rmap.c:40:
+static DEFINE_PER_CPU(struct rmap_chain *, rmap_chain) = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#280: FILE: mm/rmap.c:42:
+#define page_mapcount(page) (unlikely(PageChained(page))? \
                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#280: FILE: mm/rmap.c:42:
+#define page_mapcount(page) (unlikely(PageChained(page))? \
+	(page)->rmap.chain->slot[0]: (page)->rmap.count)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#281: FILE: mm/rmap.c:43:
+	(page)->rmap.chain->slot[0]: (page)->rmap.count)
 	                           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#326: FILE: mm/rmap.c:113:
+		if (*cache)
[...]
+		else if (chain)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#330: FILE: mm/rmap.c:117:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: mm/rmap.c:138:
+	BUG_ON(!chain);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: mm/rmap.c:177:
+next_rmap_address(struct page *page,
+	struct vm_area_struct *vma, struct addresser *addresser)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#395: FILE: mm/rmap.c:182:
+			PageChained(page)? page->rmap.chain: NULL;
 			                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#395: FILE: mm/rmap.c:182:
+			PageChained(page)? page->rmap.chain: NULL;
 			                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: mm/rmap.c:226:
+		struct rmap_chain *next = chain->next;
+		kfree(chain);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#487: FILE: mm/rmap.c:404:
+			referenced += page_referenced_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#503: FILE: mm/rmap.c:416:
+			referenced += page_referenced_one(

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#572: FILE: mm/rmap.c:483:
+			page_referenced_anon(page, &addresser):
 			                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: mm/rmap.c:600:
+page_move_rmap(struct page *page, struct vm_area_struct *vma,
+	unsigned long old_address, unsigned long new_address)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#645: FILE: mm/rmap.c:642:
+#if 0	/* All its callers have already checked these conditions */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#655: FILE: mm/rmap.c:650:
+		BUG_ON(!page->rmap.chain->slot[0]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#660: FILE: mm/rmap.c:655:
+		BUG_ON(!page->rmap.count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#700: FILE: mm/rmap.c:750:
+	if (unlikely(PageChained(page))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#704: FILE: mm/rmap.c:754:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#728: FILE: mm/rmap.c:781:
+			ret = try_to_unmap_one(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#744: FILE: mm/rmap.c:793:
+			ret = try_to_unmap_one(

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#814: FILE: mm/rmap.c:867:
+		try_to_unmap_anon(page, &addresser):
 		                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#854: FILE: mm/swapfile.c:408:
+static int unuse_pmd(struct vm_area_struct * vma, pmd_t *dir,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: mm/swapfile.c:409:
+static int unuse_pmd(struct vm_area_struct * vma, pmd_t *dir,
 	unsigned long address, unsigned long size, unsigned long offset,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#891: FILE: mm/swapfile.c:441:
+static int unuse_pgd(struct vm_area_struct * vma, pgd_t *dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: mm/swapfile.c:442:
+static int unuse_pgd(struct vm_area_struct * vma, pgd_t *dir,
 	unsigned long address, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: mm/swapfile.c:465:
+		if (unuse_pmd(vma, pmd, address, end - address,
+				offset, entry, page))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#927: FILE: mm/swapfile.c:474:
+static int unuse_vma(struct vm_area_struct * vma, pgd_t *pgdir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: mm/swapfile.c:475:
+static int unuse_vma(struct vm_area_struct * vma, pgd_t *pgdir,
 			swp_entry_t entry, struct page* page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#945: FILE: mm/swapfile.c:490:
+static int unuse_process(struct mm_struct * mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: mm/swapfile.c:491:
+static int unuse_process(struct mm_struct * mm,
 			swp_entry_t entry, struct page* page)

CHECK:BRACES: Unbalanced braces around else statement
#975: FILE: mm/swapfile.c:651:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: mm/swapfile.c:668:
+			while (*swap_map > 1 && !retval &&
 					(p = p->next) != &start_mm->mmlist) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 7 warnings, 20 checks, 894 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000384169.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
