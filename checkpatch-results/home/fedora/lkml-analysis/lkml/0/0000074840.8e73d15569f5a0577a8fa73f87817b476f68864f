WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
A debugfs file named `readahead/events' is created according to advises from

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
## First compile kernel with CONFIG_DEBUG_READAHEAD

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# echo > /var/log/kern.log # you may want to backup it first

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# echo 3 > /debug/readahead/debug_level # show verbose printk traces

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
## do one benchmark/task

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# echo 1 > /debug/readahead/debug_level # revert to normal value

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# bzip2 -c /var/log/kern.log > kern.log-`date +'%F_%R'`.bz2

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#113: FILE: mm/readahead.c:68:
+u32 disable_stateful_method = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#116: FILE: mm/readahead.c:71:
+#  define debug_inc(var)		do { var++; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#116: FILE: mm/readahead.c:71:
+#  define debug_inc(var)		do { var++; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: mm/readahead.c:77:
+#  define debug_level ^I^I^I(0)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#126: FILE: mm/readahead.c:81:
+	do { if (debug_level >= 2) printk(KERN_DEBUG args); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#126: FILE: mm/readahead.c:81:
+	do { if (debug_level >= 2) printk(KERN_DEBUG args); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#128: FILE: mm/readahead.c:83:
+	do { if (debug_level >= 3) printk(KERN_DEBUG args); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#128: FILE: mm/readahead.c:83:
+	do { if (debug_level >= 3) printk(KERN_DEBUG args); } while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: mm/readahead.c:91:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#160: FILE: mm/readahead.c:475:
+	ret = __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: mm/readahead.c:503:
+	dprintk("blockable-readahead(ino=%lu, ra=%lu+%lu) = %d\n",
+			mapping->host->i_ino, offset, nr_to_read, actual);

WARNING:TYPO_SPELLING: 'contexta' may be misspelled - perhaps 'context'?
#199: FILE: mm/readahead.c:700:
+	"contexta",
 	 ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#234: FILE: mm/readahead.c:735:
+	if (e == RA_EVENT_READAHEAD_HIT && pages < 0) {
[...]
+	} else if (ra)
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#299: FILE: mm/readahead.c:800:
+	seq_printf(s, event_fmt, "random_rate");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: mm/readahead.c:803:
+		seq_printf(s, percent_format,
+			(ra_events[c][RA_EVENT_RANDOM_READ][0] * 100) /

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#307: FILE: mm/readahead.c:808:
+	seq_printf(s, event_fmt, "ra_hit_rate");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: mm/readahead.c:811:
+		seq_printf(s, percent_format,
+			(ra_events[c][RA_EVENT_READAHEAD_HIT][1] * 100) /

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#314: FILE: mm/readahead.c:815:
+	seq_printf(s, event_fmt, "la_hit_rate");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: mm/readahead.c:818:
+		seq_printf(s, percent_format,
+			(ra_events[c][RA_EVENT_LOOKAHEAD_HIT][0] * 100) /

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#321: FILE: mm/readahead.c:822:
+	seq_printf(s, event_fmt, "var_ra_size");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: mm/readahead.c:825:
+		seq_printf(s, item_fmt,
+			(ra_events[c][RA_EVENT_READAHEAD_CUBE][1] -

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#331: FILE: mm/readahead.c:832:
+	seq_printf(s, event_fmt, "avg_ra_size");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: mm/readahead.c:835:
+		seq_printf(s, item_fmt,
+			(ra_events[c][RA_EVENT_READAHEAD][1] +

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#339: FILE: mm/readahead.c:840:
+	seq_printf(s, event_fmt, "avg_la_size");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: mm/readahead.c:843:
+		seq_printf(s, item_fmt,
+			(ra_events[c][RA_EVENT_LOOKAHEAD][1] +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: mm/readahead.c:857:
+static ssize_t ra_events_write(struct file *file, const char __user *buf,
+						size_t size, loff_t *offset)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#362: FILE: mm/readahead.c:863:
+struct file_operations ra_events_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#371: FILE: mm/readahead.c:872:
+#define READAHEAD_DEBUGFS_ENTRY_U32(var) \
+	debugfs_create_u32(__stringify(var), 0644, root, &var)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#374: FILE: mm/readahead.c:875:
+#define READAHEAD_DEBUGFS_ENTRY_BOOL(var) \
+	debugfs_create_bool(__stringify(var), 0644, root, &var)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 20 warnings, 13 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000074840.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
