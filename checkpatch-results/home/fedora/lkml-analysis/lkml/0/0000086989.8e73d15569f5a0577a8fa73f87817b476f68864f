WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
domain transition occurs to a different sid. A group SID is created, and both 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: hooks.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#67: FILE: hooks.c:8:
+ *  Based on the SELinux hooks.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: hooks.c:11:
+ *  Its sole purpose is to label processes, and files, so that the sk_filter $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#71: FILE: hooks.c:11:
context match

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#74: FILE: hooks.c:14:
+ *  You shouldn't use SELinux and Fireflier LSM at the same time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: hooks.c:16:
+ *   - Having SELinux compiled in your kernel, and disabled at boot, and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: hooks.c:17:
+ *   - Having SELinux compiled in your kernel, and enabled at boot, and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: hooks.c:18:
+ *^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: hooks.c:19:
+ *  Currently you have to turn off the capability module $

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#107: FILE: hooks.c:44:
+static struct security_operations *original_ops = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#108: FILE: hooks.c:45:
+static struct security_operations *secondary_ops = NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: hooks.c:48:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#113: FILE: hooks.c:50:
+#define XATTR_NAME_FIREFLIER XATTR_SECURITY_PREFIX XATTR_FIREFLIER_SUFFIX

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: hooks.c:52:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: hooks.c:57:
+ * @ops:  the stacked module's security_operations $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: hooks.c:59:
+static int fireflier_register_security (const char *name, struct $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: hooks.c:59:
+static int fireflier_register_security (const char *name, struct 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: hooks.c:61:
+        if (secondary_ops != original_ops)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: hooks.c:61:
+        if (secondary_ops != original_ops)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#125: FILE: hooks.c:61:
+        if (secondary_ops != original_ops)
+        {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: hooks.c:62:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: hooks.c:62:
+        {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: hooks.c:63:
+                printk(KERN_INFO "%s:  There is already a secondary $

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: hooks.c:63:
+                printk(KERN_INFO "%s:  There is already a secondary $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: hooks.c:63:
+                printk(KERN_INFO "%s:  There is already a secondary $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#127: FILE: hooks.c:63:
+                printk(KERN_INFO "%s:  There is already a secondary 

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: hooks.c:64:
+                       "module registered.\n", __FUNCTION__);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: hooks.c:64:
+                       "module registered.\n", __FUNCTION__);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: hooks.c:65:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: hooks.c:65:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: hooks.c:66:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: hooks.c:66:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: hooks.c:67:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: hooks.c:68:
+        secondary_ops = ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: hooks.c:68:
+        secondary_ops = ops;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: hooks.c:69:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: hooks.c:70:
+        printk(KERN_INFO "%s:  Registering secondary module %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: hooks.c:70:
+        printk(KERN_INFO "%s:  Registering secondary module %s\n",$

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#135: FILE: hooks.c:70:
+        printk(KERN_INFO "%s:  Registering secondary module %s\n",
                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#135: FILE: hooks.c:70:
+        printk(KERN_INFO "%s:  Registering secondary module %s\n",
                             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#135: FILE: hooks.c:70:
+        printk(KERN_INFO "%s:  Registering secondary module %s\n",
                                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <Registering>
#135: FILE: hooks.c:70:
+        printk(KERN_INFO "%s:  Registering secondary module %s\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: hooks.c:71:
+               __FUNCTION__,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: hooks.c:71:
+               __FUNCTION__,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: hooks.c:72:
+               name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: hooks.c:72:
+               name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: hooks.c:74:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: hooks.c:74:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: hooks.c:78:
+ * fireflier_unregister_security - unregister a stacked security $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: hooks.c:78:
+ * fireflier_unregister_security - unregister a stacked security $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: hooks.c:79:
+ * @name: the name of the secondary security module to unregister$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: hooks.c:80:
+ * @ops:  the security_operations of the stacked module$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: hooks.c:81:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: hooks.c:82:
+static int fireflier_unregister_security (const char *name, struct $

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: hooks.c:84:
+        if (ops != secondary_ops)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: hooks.c:84:
+        if (ops != secondary_ops)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: hooks.c:85:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: hooks.c:85:
+        {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: hooks.c:86:
+                printk (KERN_INFO "%s:  trying to unregister a security $

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: hooks.c:86:
+                printk (KERN_INFO "%s:  trying to unregister a security $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: hooks.c:86:
+                printk (KERN_INFO "%s:  trying to unregister a security $

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#152: FILE: hooks.c:86:
+                printk (KERN_INFO "%s:  trying to unregister a security 
                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#152: FILE: hooks.c:86:
+                printk (KERN_INFO "%s:  trying to unregister a security 
                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: hooks.c:87:
+                        "that is not registered.\n", __FUNCTION__);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: hooks.c:87:
+                        "that is not registered.\n", __FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#154: FILE: hooks.c:87:
+                        "that is not registered.\n", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: hooks.c:88:
+                return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: hooks.c:88:
+                return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: hooks.c:89:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: hooks.c:89:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: hooks.c:91:
+        secondary_ops = original_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: hooks.c:91:
+        secondary_ops = original_ops;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: hooks.c:93:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: hooks.c:93:
+        return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#163: FILE: hooks.c:96:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: hooks.c:107:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: hooks.c:111:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#181: FILE: hooks.c:114:
+	tsec->osid = tsec->sid = tsec->ptrace_sid = FIREFLIER_SID_UNLABELED;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: hooks.c:116:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: hooks.c:126:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: hooks.c:129:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: hooks.c:135:
+ * fireflier_task_alloc_security - allocate & initialize the security $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: hooks.c:145:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: hooks.c:147:
+	int rc;
+	rc = task_alloc_security(tsk);

ERROR:SPACING: space required before the open parenthesis '('
#219: FILE: hooks.c:151:
+	if(tsec_current) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#225: FILE: hooks.c:157:
+		/* Retain ptracer SID across fork, if any.
+		   This will be reset by the ptrace hook upon any

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#226: FILE: hooks.c:158:
+		   subsequent ptrace_attach operations. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: hooks.c:165:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: hooks.c:167:
+ * fireflier_bprm_alloc_security - allocate & initialize a linux_bprm $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: hooks.c:169:
+ * Returns -ENOMEM on allocation failure, otherwise calls stacked security $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: hooks.c:186:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: hooks.c:194:
+ * this function is responsible for computing the SID of the process that is $

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: hooks.c:203:
+	if(unlikely(!bsec)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#275: FILE: hooks.c:204:
+		printk(KERN_DEBUG "Fireflier: bprm->security not set\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: hooks.c:207:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: hooks.c:211:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: hooks.c:212:
+	bsec->sid = get_or_generate_sid(bprm->file,0);
 	                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: hooks.c:213:
+        printk(KERN_DEBUG "sid:%d\n",bsec->sid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: hooks.c:213:
+        printk(KERN_DEBUG "sid:%d\n",bsec->sid);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#284: FILE: hooks.c:213:
+        printk(KERN_DEBUG "sid:%d\n",bsec->sid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: hooks.c:213:
+        printk(KERN_DEBUG "sid:%d\n",bsec->sid);
                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: hooks.c:224:
+	BUG_ON(!bprm->security);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: hooks.c:231:
+ * fireflier_bprm_apply_creds - compute the sid of the current task based on $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: hooks.c:242:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#319: FILE: hooks.c:247:
+	if(unlikely(!bsec)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#320: FILE: hooks.c:248:
+		printk(KERN_DEBUG "No bprm security structure allocated\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#326: FILE: hooks.c:254:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#328: FILE: hooks.c:256:
+	if(unlikely(!tsec)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#329: FILE: hooks.c:257:
+		printk(KERN_DEBUG "No security structure allocated\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: hooks.c:263:
+^I^Iif(unsafe & (LSM_UNSAFE_SHARE | LSM_UNSAFE_PTRACE|LSM_UNSAFE_PTRACE_CAP)) $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#335: FILE: hooks.c:263:
+		if(unsafe & (LSM_UNSAFE_SHARE | LSM_UNSAFE_PTRACE|LSM_UNSAFE_PTRACE_CAP)) 
+		{	   

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#335: FILE: hooks.c:263:
+		if(unsafe & (LSM_UNSAFE_SHARE | LSM_UNSAFE_PTRACE|LSM_UNSAFE_PTRACE_CAP)) 
 		                                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#335: FILE: hooks.c:263:
+		if(unsafe & (LSM_UNSAFE_SHARE | LSM_UNSAFE_PTRACE|LSM_UNSAFE_PTRACE_CAP)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: hooks.c:264:
+^I^I{^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: hooks.c:265:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#337: FILE: hooks.c:265:
+		{	   
+		

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#338: FILE: hooks.c:266:
+			printk(KERN_DEBUG "marking SID as unsafe\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#339: FILE: hooks.c:267:
+			bsec->unsafe=unsafe;
 			            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: hooks.c:269:
+^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: hooks.c:271:
+^I}^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: hooks.c:274:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: hooks.c:279:
+ * A task has accessed this file, add the task's SID to the group SID of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: hooks.c:281:
+ * based on inode_has_perm $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: hooks.c:283:
+static void inode_update_perm(struct task_struct *tsk,struct inode *inode)
                                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: hooks.c:288:
+     ^Itsec = tsk->security;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: hooks.c:288:
+     ^Itsec = tsk->security;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: hooks.c:288:
+     ^Itsec = tsk->security;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: hooks.c:289:
+   ^Iisec = inode->i_security;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#362: FILE: hooks.c:289:
+   ^Iisec = inode->i_security;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: hooks.c:289:
+   ^Iisec = inode->i_security;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: hooks.c:290:
+   ^Iif(!isec) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: hooks.c:290:
+   ^Iif(!isec) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: hooks.c:290:
+   ^Iif(!isec) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: hooks.c:290:
+   ^Iif(!isec) $

ERROR:SPACING: space required before the open parenthesis '('
#363: FILE: hooks.c:290:
+   	if(!isec) 

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: hooks.c:291:
+     ^I^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#364: FILE: hooks.c:291:
+     ^I^Ireturn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: hooks.c:291:
+     ^I^Ireturn;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: hooks.c:292:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: hooks.c:292:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: hooks.c:293:
+     ^Iif(unlikely(!tsec))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#366: FILE: hooks.c:293:
+     ^Iif(unlikely(!tsec))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: hooks.c:293:
+     ^Iif(unlikely(!tsec))$

ERROR:SPACING: space required before the open parenthesis '('
#366: FILE: hooks.c:293:
+     	if(unlikely(!tsec))

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: hooks.c:294:
+       ^I^Iisec->sid = compute_inode_sid(isec->sid,FIREFLIER_SID_UNLABELED);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#367: FILE: hooks.c:294:
+       ^I^Iisec->sid = compute_inode_sid(isec->sid,FIREFLIER_SID_UNLABELED);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: hooks.c:294:
+       ^I^Iisec->sid = compute_inode_sid(isec->sid,FIREFLIER_SID_UNLABELED);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#367: FILE: hooks.c:294:
+       		isec->sid = compute_inode_sid(isec->sid,FIREFLIER_SID_UNLABELED);
        		                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: hooks.c:295:
+   ^Ielse$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#368: FILE: hooks.c:295:
+   ^Ielse$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: hooks.c:295:
+   ^Ielse$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: hooks.c:296:
+     ^I^Iisec->sid = compute_inode_sid(isec->sid,tsec->sid);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#369: FILE: hooks.c:296:
+     ^I^Iisec->sid = compute_inode_sid(isec->sid,tsec->sid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: hooks.c:296:
+     ^I^Iisec->sid = compute_inode_sid(isec->sid,tsec->sid);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: hooks.c:296:
+     		isec->sid = compute_inode_sid(isec->sid,tsec->sid);
      		                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: hooks.c:297:
+   ^Iprintk(KERN_DEBUG "computed inode $

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: hooks.c:297:
+   ^Iprintk(KERN_DEBUG "computed inode $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: hooks.c:297:
+   ^Iprintk(KERN_DEBUG "computed inode $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: hooks.c:297:
+   ^Iprintk(KERN_DEBUG "computed inode $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#370: FILE: hooks.c:297:
+   	printk(KERN_DEBUG "computed inode 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#374: FILE: hooks.c:300:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: hooks.c:302:
+/** $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: hooks.c:303:
+ * file_update_perm - update the group SID of this file$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: hooks.c:304:
+ * @tsk - the task that has accessed the file$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: hooks.c:305:
+ * @file - the file that has been accessed$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: hooks.c:306:
+ * A task has accessed this file, add the task's SID to the group SID of $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: hooks.c:306:
+ * A task has accessed this file, add the task's SID to the group SID of $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: hooks.c:307:
+ * accessing the file$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: hooks.c:308:
+ * Based on file_has_perm $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: hooks.c:308:
+ * Based on file_has_perm $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: hooks.c:309:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: hooks.c:310:
+static  inline void file_update_perm(struct task_struct *tsk, struct file $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: hooks.c:312:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: hooks.c:312:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: hooks.c:317:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: hooks.c:317:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: hooks.c:319:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: hooks.c:319:
+   $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#404: FILE: hooks.c:328:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: hooks.c:329:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: hooks.c:329:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: hooks.c:330:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: hooks.c:330:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: hooks.c:331:
+/** $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: hooks.c:332:
+ * update_files_auth - update the group SID of the files$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: hooks.c:333:
+ * @files - a files_struct containing all files of the forked process$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: hooks.c:334:
+ * Derived from fs/exec.c:flush_old_files. $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: hooks.c:334:
+ * Derived from fs/exec.c:flush_old_files. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: hooks.c:335:
+ *  Should deal only with sockets $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: hooks.c:335:
+ *  Should deal only with sockets $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: hooks.c:336:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: hooks.c:337:
+static inline void update_files_auth(struct files_struct * files)  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: hooks.c:339:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: hooks.c:339:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: hooks.c:340:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: hooks.c:340:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: hooks.c:344:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: hooks.c:344:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: hooks.c:347:
+^Ifor (;;) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: hooks.c:350:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: hooks.c:360:
+^I^Ifor ( ; set ; i++,set >>= 1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: hooks.c:362:
+^I^I^Iif (set & 1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: hooks.c:376:
+^I $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: hooks.c:378:
+ * fireflier_bprm_post_apply_creds - updates files' SID$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: hooks.c:379:
+ * @bprm - a linux_bprm structure$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: hooks.c:380:
+ * update the security field of bprm$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: hooks.c:381:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: hooks.c:387:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: hooks.c:388:
+^Iif(bsec->unsafe) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: hooks.c:390:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: hooks.c:393:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: hooks.c:395:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: hooks.c:395:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: hooks.c:399:
+   ^I//SID changed, so update the files's SIDs, i.e. turn them into group SIDs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#475: FILE: hooks.c:399:
+   ^I//SID changed, so update the files's SIDs, i.e. turn them into group SIDs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: hooks.c:399:
+   ^I//SID changed, so update the files's SIDs, i.e. turn them into group SIDs$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: hooks.c:404:
+ * fireflier_inode_alloc_security - allocate the security structure of an $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: hooks.c:404:
+ * fireflier_inode_alloc_security - allocate the security structure of an $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: hooks.c:405:
+ * @inode - inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: hooks.c:406:
+ * allocate the security field of inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: hooks.c:407:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: hooks.c:412:
+^I     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#493: FILE: hooks.c:416:
+^I     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: hooks.c:428:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: hooks.c:430:
+ * fireflier_inode_free_security - free the security structure of the inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: hooks.c:431:
+ * @inode - inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: hooks.c:432:
+ * free the security field of inode$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: hooks.c:433:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: hooks.c:437:
+//^Istruct fireflier_superblock_security_struct *sbsec = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: hooks.c:438:
+^I     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: hooks.c:442:
+^I     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: hooks.c:447:
+^I     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: hooks.c:452:
+static int fireflier_socket_accept(struct socket *sock, struct socket $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: hooks.c:454:
+^Istruct fireflier_inode_security_struct *isec = SOCK_INODE(sock)->i_security;        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: hooks.c:455:
+        struct inode* newinode = SOCK_INODE(newsock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: hooks.c:455:
+        struct inode* newinode = SOCK_INODE(newsock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: hooks.c:457:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: hooks.c:457:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: hooks.c:458:
+        inode_alloc_security(newinode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: hooks.c:458:
+        inode_alloc_security(newinode);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: hooks.c:459:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: hooks.c:459:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: hooks.c:460:
+        newisec = newinode->i_security;    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: hooks.c:460:
+        newisec = newinode->i_security;    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: hooks.c:460:
+        newisec = newinode->i_security;    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: hooks.c:461:
+        newisec->sid = isec->sid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: hooks.c:461:
+        newisec->sid = isec->sid;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: hooks.c:462:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: hooks.c:462:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: hooks.c:465:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: hooks.c:467:
+ * update group SID of file$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: hooks.c:468:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: hooks.c:477:
+ * Copy the in-core inode security context value to the user.  If the$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: hooks.c:478:
+ * getxattr() prior to this succeeded, check to see if we need to$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: hooks.c:479:
+ * canonicalize the value to be finally returned to the user.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: hooks.c:480:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: hooks.c:481:
+ * Permission check is handled by selinux_inode_getxattr hook.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: hooks.c:482:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: hooks.c:483:
+static int fireflier_inode_getsecurity(struct inode *inode, const char *name, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: hooks.c:494:
+     $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: hooks.c:494:
+     $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: hooks.c:520:
+ out_free:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: hooks.c:522:
+ out:$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: hooks.c:526:
+static int fireflier_inode_listsecurity(struct inode *inode, char *buffer, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: hooks.c:528:
+^Iif(inode->i_security) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: hooks.c:530:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: hooks.c:537:
+^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: hooks.c:539:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: hooks.c:539:
+   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#629: FILE: hooks.c:548:
+        struct inode* inode=SOCK_INODE(sock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: hooks.c:548:
+        struct inode* inode=SOCK_INODE(sock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: hooks.c:549:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: hooks.c:549:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: hooks.c:551:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#633: FILE: hooks.c:552:
+        inode_alloc_security(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: hooks.c:552:
+        inode_alloc_security(inode);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: hooks.c:554:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: hooks.c:554:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#637: FILE: hooks.c:556:
+^I^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: hooks.c:561:
+ * fireflier_ops - our security_operations hooks$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: hooks.c:562:
+ * Unused security hooks will be automatically redirected to the dummy $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: hooks.c:562:
+ * Unused security hooks will be automatically redirected to the dummy $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: hooks.c:563:
+ * Does the dummy module call the secondary module? Maybe we should implement $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: hooks.c:563:
+ * Does the dummy module call the secondary module? Maybe we should implement $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: hooks.c:564:
+ * the secondary module$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: hooks.c:565:
+ */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#651: FILE: hooks.c:568:
+^I.bprm_alloc_security  ^I= fireflier_bprm_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#652: FILE: hooks.c:569:
+^I.bprm_free_security  ^I= fireflier_bprm_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#653: FILE: hooks.c:570:
+^I.bprm_apply_creds  ^I= fireflier_bprm_apply_creds,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#655: FILE: hooks.c:572:
+^I.bprm_set_security ^I= fireflier_bprm_set_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: hooks.c:573:
+^I.inode_free_security ^I= fireflier_inode_free_security,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: hooks.c:574:
+    ^I.inode_getsecurity ^I= fireflier_inode_getsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#657: FILE: hooks.c:574:
+    ^I.inode_getsecurity ^I= fireflier_inode_getsecurity,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: hooks.c:574:
+    ^I.inode_getsecurity ^I= fireflier_inode_getsecurity,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: hooks.c:575:
+   ^I.inode_listsecurity ^I= fireflier_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#658: FILE: hooks.c:575:
+   ^I.inode_listsecurity ^I= fireflier_inode_listsecurity,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: hooks.c:575:
+   ^I.inode_listsecurity ^I= fireflier_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: hooks.c:576:
+^I.file_receive ^I^I= fireflier_file_receive,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#660: FILE: hooks.c:577:
+^I.task_alloc_security ^I= fireflier_task_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#661: FILE: hooks.c:578:
+^I.task_free_security ^I= task_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#662: FILE: hooks.c:579:
+^I.socket_post_create ^I= fireflier_socket_post_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#663: FILE: hooks.c:580:
+^I.socket_accept ^I^I= fireflier_socket_accept,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#664: FILE: hooks.c:581:
+^I.register_security ^I= fireflier_register_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#665: FILE: hooks.c:582:
+^I.unregister_security ^I= fireflier_unregister_security,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: hooks.c:586:
+ * stacked - is a secondary module registered$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: hooks.c:587:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: hooks.c:591:
+ * label_all_processes - labels already running processes$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: hooks.c:592:
+ * Can this be done at all? Or do we need to have fireflier loaded during $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: hooks.c:592:
+ * Can this be done at all? Or do we need to have fireflier loaded during $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: hooks.c:593:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: hooks.c:596:
+^I/* Labeling running processes without using the task_lock seems not possible $

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: hooks.c:597:
+        /* TODO: label processes that are already running */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: hooks.c:597:
+        /* TODO: label processes that are already running */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#683: FILE: hooks.c:598:
+        /* TODO: prevent processes from being spawned while we label the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#683: FILE: hooks.c:598:
+        /* TODO: prevent processes from being spawned while we label the $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: hooks.c:598:
+        /* TODO: prevent processes from being spawned while we label the $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: hooks.c:603:
+ * fireflier_cleanup - Cleans up fireflier module$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: hooks.c:604:
+ * Unregisters security module$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: hooks.c:605:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#696: FILE: hooks.c:610:
+			printk(KERN_ERR "Fireflier: Error unregistering stacked security module.
 			                          ^

CHECK:CAMELCASE: Avoid CamelCase: <Fireflier>
#696: FILE: hooks.c:610:
+			printk(KERN_ERR "Fireflier: Error unregistering stacked security module.

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#696: FILE: hooks.c:610:
+			printk(KERN_ERR "Fireflier: Error unregistering stacked security module.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#699: FILE: hooks.c:612:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#700: FILE: hooks.c:613:
+		if(unregister_security(&fireflier_ops))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#701: FILE: hooks.c:614:
+			printk(KERN_ERR "Fireflier: Error unregistering security module.\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#705: FILE: hooks.c:618:
+module_param(ff_debug,int,0);
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#705: FILE: hooks.c:618:
+module_param(ff_debug,int,0);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#706: FILE: hooks.c:619:
+MODULE_PARM_DESC(ff_debug,"Enable debug info dumping in debugfs");
                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: hooks.c:626:
+        /*Register security_ops with kernel*/$

ERROR:CODE_INDENT: code indent should use tabs where possible
#714: FILE: hooks.c:627:
+        int err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: hooks.c:627:
+        int err;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: hooks.c:629:
+        original_ops = security_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: hooks.c:629:
+        original_ops = security_ops;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: hooks.c:630:
+        /* initialize dummy_security_ops to dummy ops */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#718: FILE: hooks.c:631:
+        register_security(&dummy_security_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: hooks.c:631:
+        register_security(&dummy_security_ops);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: hooks.c:632:
+        unregister_security(&dummy_security_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: hooks.c:632:
+        unregister_security(&dummy_security_ops);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: hooks.c:633:
+        secondary_ops = &dummy_security_ops;//avoid recursion with capability $

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: hooks.c:633:
+        secondary_ops = &dummy_security_ops;//avoid recursion with capability $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: hooks.c:633:
+        secondary_ops = &dummy_security_ops;//avoid recursion with capability $

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: hooks.c:634:
+        if (!secondary_ops) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: hooks.c:634:
+        if (!secondary_ops) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: hooks.c:635:
+                printk (KERN_ERR "Fireflier: No initial security $

ERROR:CODE_INDENT: code indent should use tabs where possible
#723: FILE: hooks.c:635:
+                printk (KERN_ERR "Fireflier: No initial security $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: hooks.c:635:
+                printk (KERN_ERR "Fireflier: No initial security $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#723: FILE: hooks.c:635:
+                printk (KERN_ERR "Fireflier: No initial security 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#723: FILE: hooks.c:635:
+                printk (KERN_ERR "Fireflier: No initial security 

ERROR:CODE_INDENT: code indent should use tabs where possible
#725: FILE: hooks.c:636:
+                return -EAGAIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: hooks.c:636:
+                return -EAGAIN;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#726: FILE: hooks.c:637:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: hooks.c:637:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: hooks.c:638:
+        if ((err=register_security (&fireflier_ops))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: hooks.c:638:
+        if ((err=register_security (&fireflier_ops))) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#728: FILE: hooks.c:639:
+                printk(KERN_INFO "Fireflier: Unable to register as primary $

ERROR:CODE_INDENT: code indent should use tabs where possible
#728: FILE: hooks.c:639:
+                printk(KERN_INFO "Fireflier: Unable to register as primary $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: hooks.c:639:
+                printk(KERN_INFO "Fireflier: Unable to register as primary $

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#728: FILE: hooks.c:639:
+                printk(KERN_INFO "Fireflier: Unable to register as primary 
                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <Unable>
#728: FILE: hooks.c:639:
+                printk(KERN_INFO "Fireflier: Unable to register as primary 

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: hooks.c:640:
+                stacked=1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: hooks.c:640:
+                stacked=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#730: FILE: hooks.c:640:
+                stacked=1;
                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#731: FILE: hooks.c:641:
+                if((err=mod_reg_security("fireflier",&fireflier_ops))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: hooks.c:641:
+                if((err=mod_reg_security("fireflier",&fireflier_ops))) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#731: FILE: hooks.c:641:
+                if((err=mod_reg_security("fireflier",&fireflier_ops))) {
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#731: FILE: hooks.c:641:
+                if((err=mod_reg_security("fireflier",&fireflier_ops))) {
                                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#731: FILE: hooks.c:641:
+                if((err=mod_reg_security("fireflier",&fireflier_ops))) {
                                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#731: FILE: hooks.c:641:
+                if((err=mod_reg_security("fireflier",&fireflier_ops))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#731: FILE: hooks.c:641:
+                if((err=mod_reg_security("fireflier",&fireflier_ops))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#732: FILE: hooks.c:642:
+                        printk(KERN_ERR "Fireflier: Unable to register with $

ERROR:CODE_INDENT: code indent should use tabs where possible
#732: FILE: hooks.c:642:
+                        printk(KERN_ERR "Fireflier: Unable to register with $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: hooks.c:642:
+                        printk(KERN_ERR "Fireflier: Unable to register with $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#732: FILE: hooks.c:642:
+                        printk(KERN_ERR "Fireflier: Unable to register with 

ERROR:CODE_INDENT: code indent should use tabs where possible
#734: FILE: hooks.c:643:
+                        return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: hooks.c:643:
+                        return err;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#735: FILE: hooks.c:644:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: hooks.c:644:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#736: FILE: hooks.c:645:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: hooks.c:645:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#737: FILE: hooks.c:646:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: hooks.c:646:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#738: FILE: hooks.c:647:
+                stacked=0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: hooks.c:647:
+                stacked=0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#739: FILE: hooks.c:648:
+        /* Do initialization */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: hooks.c:648:
+        /* Do initialization */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#741: FILE: hooks.c:650:
+		printk(KERN_ERR "Fireflier: autolabeling initialization failed (OOM?)\n");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#741: FILE: hooks.c:650:
+		printk(KERN_ERR "Fireflier: autolabeling initialization failed (OOM?)\n");
 		                          ^

ERROR:SPACING: spaces required around that '?' (ctx:VxB)
#741: FILE: hooks.c:650:
+		printk(KERN_ERR "Fireflier: autolabeling initialization failed (OOM?)\n");
 		                                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#745: FILE: hooks.c:654:
+        label_all_processes();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: hooks.c:654:
+        label_all_processes();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#746: FILE: hooks.c:655:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#749: FILE: hooks.c:658:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#750: FILE: hooks.c:659:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: hooks.c:659:
+        return 0;$

CHECK:CAMELCASE: Avoid CamelCase: <Edwin>
#757: FILE: hooks.c:666:
+MODULE_AUTHOR("Török Edwin <edwin@gurde.com>");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#765: FILE: structures.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: structures.h:21:
+/* Structures copied from SELinux, and prefixed with fireflier_ to avoid $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: structures.h:23:
+ */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: structures.h:24:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: structures.h:24:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: structures.h:25:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#790: FILE: structures.h:25:
+ 
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: structures.h:25:
+ $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#829: FILE: structures.h:64:
+};
+/**

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: structures.h:68:
+static inline u32 getsid_safe(const struct fireflier_task_security_struct* $

ERROR:SPACING: space required before the open parenthesis '('
#836: FILE: structures.h:70:
+	if(likely(tsec))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086989.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 205 errors, 178 warnings, 24 checks, 779 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086989.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
