WARNING:MISPLACED_INIT: __initdata should be placed after memory_end
#52: FILE: arch/s390/kernel/setup.c:64:
+static unsigned long __initdata memory_end;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:SPACING: No space is necessary after a cast
#60: FILE: arch/s390/kernel/setup.c:83:
+	.start = (unsigned long) &_text,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#61: FILE: arch/s390/kernel/setup.c:84:
+	.end = (unsigned long) &_etext - 1,

CHECK:SPACING: No space is necessary after a cast
#67: FILE: arch/s390/kernel/setup.c:90:
+	.start = (unsigned long) &_etext,

CHECK:SPACING: No space is necessary after a cast
#68: FILE: arch/s390/kernel/setup.c:91:
+	.end = (unsigned long) &_edata - 1,

CHECK:BRACES: Unbalanced braces around else statement
#103: FILE: arch/s390/kernel/setup.c:328:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#179: FILE: arch/s390/kernel/setup.c:342:
+	saved_command_line[COMMAND_LINE_SIZE-1] = '\0';
 	                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: arch/s390/kernel/setup.c:349:
+			memory_end = simple_strtoul(from+4, &from, 0);
 			                                ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#186: FILE: arch/s390/kernel/setup.c:349:
+			memory_end = simple_strtoul(from+4, &from, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space prohibited after that open parenthesis '('
#187: FILE: arch/s390/kernel/setup.c:350:
+			if ( *from == 'K' || *from == 'k' ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#187: FILE: arch/s390/kernel/setup.c:350:
+			if ( *from == 'K' || *from == 'k' ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#190: FILE: arch/s390/kernel/setup.c:353:
+			} else if ( *from == 'M' || *from == 'm' ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#190: FILE: arch/s390/kernel/setup.c:353:
+			} else if ( *from == 'M' || *from == 'm' ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#199: FILE: arch/s390/kernel/setup.c:362:
+			delay = simple_strtoul(from+9, &from, 0);
 			                           ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#199: FILE: arch/s390/kernel/setup.c:362:
+			delay = simple_strtoul(from+9, &from, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#238: FILE: arch/s390/kernel/setup.c:387:
+	if (c == ' ' && to > command_line) to--;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#258: FILE: arch/s390/kernel/setup.c:407:
+		PSW_ADDR_AMODE | (unsigned long) restart_int_handler;

CHECK:SPACING: No space is necessary after a cast
#261: FILE: arch/s390/kernel/setup.c:410:
+		PSW_ADDR_AMODE | (unsigned long) ext_int_handler;

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/s390/kernel/setup.c:412:
+	lc->svc_new_psw.addr = PSW_ADDR_AMODE | (unsigned long) system_call;

CHECK:SPACING: No space is necessary after a cast
#269: FILE: arch/s390/kernel/setup.c:418:
+		PSW_ADDR_AMODE | (unsigned long) mcck_int_handler;

CHECK:SPACING: No space is necessary after a cast
#271: FILE: arch/s390/kernel/setup.c:420:
+	lc->io_new_psw.addr = PSW_ADDR_AMODE | (unsigned long) io_int_handler;

CHECK:SPACING: No space is necessary after a cast
#274: FILE: arch/s390/kernel/setup.c:423:
+	lc->kernel_stack = ((unsigned long) &init_thread_union) + THREAD_SIZE;

CHECK:SPACING: No space is necessary after a cast
#281: FILE: arch/s390/kernel/setup.c:430:
+	lc->current_task = (unsigned long) init_thread_union.thread_info.task;

CHECK:SPACING: No space is necessary after a cast
#282: FILE: arch/s390/kernel/setup.c:431:
+	lc->thread_info = (unsigned long) &init_thread_union;

CHECK:SPACING: No space is necessary after a cast
#289: FILE: arch/s390/kernel/setup.c:438:
+	set_prefix((u32)(unsigned long) lc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: arch/s390/kernel/setup.c:472:
+        unsigned long bootmap_size;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: arch/s390/kernel/setup.c:472:
+        unsigned long bootmap_size;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#383: FILE: arch/s390/kernel/setup.c:534:
+			printk("initrd extends beyond end of memory "

WARNING:SPLIT_STRING: quoted string split across lines
#384: FILE: arch/s390/kernel/setup.c:535:
+			printk("initrd extends beyond end of memory "
+			       "(0x%08lx > 0x%08lx)\ndisabling initrd\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#386: FILE: arch/s390/kernel/setup.c:537:
+			initrd_start = initrd_end = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: arch/s390/kernel/setup.c:552:
+         * print what head.S has found out about the machine$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#431: FILE: arch/s390/kernel/setup.c:555:
+	printk((MACHINE_IS_VM) ?

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: arch/s390/kernel/setup.c:558:
+	printk((MACHINE_HAS_IEEE) ?

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: arch/s390/kernel/setup.c:562:
+	printk((MACHINE_IS_VM) ?

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: arch/s390/kernel/setup.c:567:
+        ROOT_DEV = Root_RAM0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: arch/s390/kernel/setup.c:567:
+        ROOT_DEV = Root_RAM0;$

CHECK:CAMELCASE: Avoid CamelCase: <Root_RAM0>
#477: FILE: arch/s390/kernel/setup.c:567:
+        ROOT_DEV = Root_RAM0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: arch/s390/kernel/setup.c:570:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: arch/s390/kernel/setup.c:571:
+         * We need some free virtual space to be able to do vmalloc.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: arch/s390/kernel/setup.c:572:
+         * On a machine with 2GB memory we make sure that we have at$

ERROR:CODE_INDENT: code indent should use tabs where possible
#483: FILE: arch/s390/kernel/setup.c:573:
+         * least 128 MB free space for vmalloc.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: arch/s390/kernel/setup.c:574:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: arch/s390/kernel/setup.c:575:
+        if (memory_end > 1920*1024*1024)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: arch/s390/kernel/setup.c:575:
+        if (memory_end > 1920*1024*1024)$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#485: FILE: arch/s390/kernel/setup.c:575:
+        if (memory_end > 1920*1024*1024)
                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#485: FILE: arch/s390/kernel/setup.c:575:
+        if (memory_end > 1920*1024*1024)
                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: arch/s390/kernel/setup.c:576:
+                memory_end = 1920*1024*1024;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: arch/s390/kernel/setup.c:576:
+                memory_end = 1920*1024*1024;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#486: FILE: arch/s390/kernel/setup.c:576:
+                memory_end = 1920*1024*1024;
                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#486: FILE: arch/s390/kernel/setup.c:576:
+                memory_end = 1920*1024*1024;
                                       ^

CHECK:SPACING: No space is necessary after a cast
#493: FILE: arch/s390/kernel/setup.c:582:
+	init_mm.end_code = (unsigned long) &_etext;

CHECK:SPACING: No space is necessary after a cast
#494: FILE: arch/s390/kernel/setup.c:583:
+	init_mm.end_data = (unsigned long) &_edata;

CHECK:SPACING: No space is necessary after a cast
#495: FILE: arch/s390/kernel/setup.c:584:
+	init_mm.brk = (unsigned long) &_end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#513: FILE: arch/s390/mm/init.c:104:
+extern unsigned long __initdata zholes_size[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188536.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 13 warnings, 26 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188536.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
