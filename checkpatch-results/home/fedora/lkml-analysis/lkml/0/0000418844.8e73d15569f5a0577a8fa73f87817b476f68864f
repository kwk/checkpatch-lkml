WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#43: FILE: fs/proc/proc_misc.c:298:
+extern struct seq_operations swaps_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#43: FILE: fs/proc/proc_misc.c:298:
+extern struct seq_operations swaps_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#48: FILE: fs/proc/proc_misc.c:303:
+}
+static struct file_operations proc_swaps_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#48: FILE: fs/proc/proc_misc.c:303:
+static struct file_operations proc_swaps_operations = {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#112: FILE: mm/swapfile.c:1052:
+	char * page = (char *) __get_free_page(GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: mm/swapfile.c:1052:
+	char * page = (char *) __get_free_page(GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#157: FILE: mm/swapfile.c:1073:
+	void *endptr = (void *) swap_info + nr_swapfiles * sizeof(struct swap_info_struct);

CHECK:SPACING: No space is necessary after a cast
#159: FILE: mm/swapfile.c:1075:
+	for (++ptr; ptr < (struct swap_info_struct *) endptr; ptr++) {

CHECK:SPACING: No space is necessary after a cast
#174: FILE: mm/swapfile.c:1088:
+	free_page((unsigned long) swap->private);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#192: FILE: mm/swapfile.c:1106:
+		switch (ptr->swap_map[j]) {
+			case SWAP_MAP_BAD:
+			case 0:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: mm/swapfile.c:1114:
+	seq_printf(swap, "%-39s %s\t%d\t%d\t%d\n",
+		       path,

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#209: FILE: mm/swapfile.c:1123:
+struct seq_operations swaps_op = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418844.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 6 warnings, 6 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418844.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
