WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#103: FILE: fs/Kconfig:591:
+config POSIX_MQUEUE
+	tristate "POSIX Message Queues"
+	---help---
+	  POSIX variant of message queues is a part of IPC. In POSIX message
+	  queues every message has a priority which decides about succession
+	  of receiving it by a process. If you want to compile and run
+	  programs written e.g. for Solaris with use of its POSIX message
+	  queues (functions mq_*) say Y here. To use this feature you will
+	  also need mqueue library, available from
+	  <http://www.mat.uni.torun.pl/~wrona/posix_ipc/>
+
+	  POSIX message queues are visible as a filesystem called 'mqueue'
+	  and should be mounted in /dev/mqueue in order to work with standard
+	  library.
+
+	  If you want to compile this as a module ( = code which can be
+	  inserted in and removed from the running kernel whenever you want),
+	  say M here and read <file:Documentation/modules.txt>.  The module
+	  will be called mqueue.o.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: include/linux/mqueue.h:1:
+#ifndef _LINUX_MQUEUE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: include/linux/mqueue.h:7:
+#define MQ_MAXMSG ^I40^I/* max number of messages in each queue */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: include/linux/mqueue.h:8:
+#define MQ_MSGSIZE ^I16384^I/* max message size */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#141: FILE: include/linux/mqueue.h:10:
+#define MQ_PRIO_MAX ^I32768^I/* max priority */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#143: FILE: include/linux/mqueue.h:12:
+typedef int mqd_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#152: FILE: include/linux/mqueue.h:21:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#154: FILE: include/linux/mqueue.h:23:
+/*
+*	struct for passing data via ioctls calls

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: include/linux/mqueue.h:26:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: include/linux/mqueue.h:35:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#173: FILE: include/linux/mqueue.h:42:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#189: FILE: ipc/mqueue.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: ipc/mqueue.c:4:
+ * Copyright (C) 2002 ^IKrzysztof Benedyczak ^I(golbi@mat.uni.torun.pl)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#198: FILE: ipc/mqueue.c:10:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#211: FILE: ipc/mqueue.c:23:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: ipc/mqueue.c:25:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#218: FILE: ipc/mqueue.c:30:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: ipc/mqueue.c:42:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: ipc/mqueue.c:64:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#265: FILE: ipc/mqueue.c:77:
+static int mqueue_ioctl_file(struct inode *inode, struct file *filp,
                                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#282: FILE: ipc/mqueue.c:94:
+static struct inode_operations mqueue_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#288: FILE: ipc/mqueue.c:100:
+static struct file_operations mqueue_file_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: ipc/mqueue.c:122:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#312: FILE: ipc/mqueue.c:124:
+/*
+*		GENERAL FUNCTIONS FOR FS CREATION

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#316: FILE: ipc/mqueue.c:128:
+* ^Iauxiliary function - produce a new inode$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#316: FILE: ipc/mqueue.c:128:
+/*
+* 	auxiliary function - produce a new inode

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#331: FILE: ipc/mqueue.c:143:
+		inode->i_atime = inode->i_mtime = inode->i_ctime =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->mq_sem
#338: FILE: ipc/mqueue.c:150:
+			init_MUTEX(&(ino_extra->mq_sem));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[0]
#339: FILE: ipc/mqueue.c:151:
+			init_waitqueue_head((&(ino_extra->wait_q[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q[1]
#340: FILE: ipc/mqueue.c:152:
+			init_waitqueue_head((&(ino_extra->wait_q[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[0]
#341: FILE: ipc/mqueue.c:153:
+			init_waitqueue_head((&(ino_extra->wait_q2[0])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->wait_q2[1]
#342: FILE: ipc/mqueue.c:154:
+			init_waitqueue_head((&(ino_extra->wait_q2[1])));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[0].list
#343: FILE: ipc/mqueue.c:155:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[0].list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ino_extra->e_wait_q[1].list
#344: FILE: ipc/mqueue.c:156:
+			INIT_LIST_HEAD(&(ino_extra->e_wait_q[1].list));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#352: FILE: ipc/mqueue.c:164:
+			 * (mq_open will set it up via next ioctl call) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: ipc/mqueue.c:178:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#367: FILE: ipc/mqueue.c:179:
+static int mqueue_parse_options(char *options, int *mode, uid_t * uid,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: ipc/mqueue.c:180:
+				gid_t * gid, int silent)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#375: FILE: ipc/mqueue.c:187:
+		if ((value = strchr(this_char, '=')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#379: FILE: ipc/mqueue.c:191:
+				printk(KERN_ERR

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#388: FILE: ipc/mqueue.c:200:
+			*mode = simple_strtoul(value, &rest, 8);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#394: FILE: ipc/mqueue.c:206:
+			*uid = simple_strtoul(value, &rest, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#400: FILE: ipc/mqueue.c:212:
+			*gid = simple_strtoul(value, &rest, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#405: FILE: ipc/mqueue.c:217:
+				printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#415: FILE: ipc/mqueue.c:227:
+		printk(KERN_ERR

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#420: FILE: ipc/mqueue.c:232:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: ipc/mqueue.c:234:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#430: FILE: ipc/mqueue.c:242:
+	int mode = S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#449: FILE: ipc/mqueue.c:261:
+		iput(inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#463: FILE: ipc/mqueue.c:275:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: ipc/mqueue.c:279:
+	struct mqueue_inode_info *ei;
+	ei = (struct mqueue_inode_info *)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#479: FILE: ipc/mqueue.c:291:
+static void init_once(void *foo, kmem_cache_t * cachep,

CHECK:SPACING: No space is necessary after a cast
#482: FILE: ipc/mqueue.c:294:
+	struct mqueue_inode_info *p = (struct mqueue_inode_info *) foo;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#490: FILE: ipc/mqueue.c:302:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mqueue_inode_cachep"
#498: FILE: ipc/mqueue.c:310:
+	if (mqueue_inode_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#506: FILE: ipc/mqueue.c:318:
+		printk(KERN_INFO

CHECK:LINE_SPACING: Please don't use multiple blank lines
#510: FILE: ipc/mqueue.c:322:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#512: FILE: ipc/mqueue.c:324:
+/*
+*	init function

WARNING:LINE_SPACING: Missing a blank line after declarations
#517: FILE: ipc/mqueue.c:329:
+	int error;
+	error = init_inode_cache();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#520: FILE: ipc/mqueue.c:332:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#527: FILE: ipc/mqueue.c:339:
+		printk(KERN_ERR "Could not register mqueue filesystem\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#591: FILE: ipc/mqueue.c:403:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#612: FILE: ipc/mqueue.c:424:
+	dir->i_ctime = dir->i_mtime = CURRENT_TIME;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#623: FILE: ipc/mqueue.c:435:
+/*
+*	This is routine for system read from queue file.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#626: FILE: ipc/mqueue.c:438:
+* ^Inotification info (the only values that are interesting from user$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#630: FILE: ipc/mqueue.c:442:
+				loff_t * off)

CHECK:SPACING: No space is necessary after a cast
#646: FILE: ipc/mqueue.c:458:
+		retval = (ssize_t) - EFAULT;

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#646: FILE: ipc/mqueue.c:458:
+		retval = (ssize_t) - EFAULT;
 		                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#654: FILE: ipc/mqueue.c:466:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#669: FILE: ipc/mqueue.c:481:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#690: FILE: ipc/mqueue.c:502:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#692: FILE: ipc/mqueue.c:504:
+/*
+*			CORE MQUEUE FUNCTIONS

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#696: FILE: ipc/mqueue.c:508:
+/*
+*  This cut&paste version of wait_event() without event checking & with

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#699: FILE: ipc/mqueue.c:511:
+void inline wait_exclusive(wait_queue_head_t * wq,

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#699: FILE: ipc/mqueue.c:511:
+void inline wait_exclusive(wait_queue_head_t * wq,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINE_SPACING: Missing a blank line after declarations
#703: FILE: ipc/mqueue.c:515:
+	wait_queue_t wait;
+	init_waitqueue_entry(&wait, current);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#721: FILE: ipc/mqueue.c:533:
+	if (!list_empty(&(info->e_wait_q[sr].list)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->e_wait_q[sr].list
#722: FILE: ipc/mqueue.c:534:
+		list_for_each_entry(ptr, &(info->e_wait_q[sr].list), list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ptr->list
#724: FILE: ipc/mqueue.c:536:
+				list_del(&(ptr->list));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tmp)...) over kmalloc(sizeof(struct ext_wait_queue)...)
#736: FILE: ipc/mqueue.c:548:
+	tmp = kmalloc(sizeof(struct ext_wait_queue), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#737: FILE: ipc/mqueue.c:549:
+	if (tmp == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#741: FILE: ipc/mqueue.c:553:
+	if (list_empty(&info->e_wait_q[sr].list))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#743: FILE: ipc/mqueue.c:555:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: ipc/mqueue.c:560:
+				__list_add(&tmp->list, ptr->list.prev,
+					&ptr->list);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#759: FILE: ipc/mqueue.c:571:
+ * before-first (last) (meaning first in order as our 'queue' is inversed) */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tmp->list
#765: FILE: ipc/mqueue.c:577:
+	list_del(&(tmp->list));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#771: FILE: ipc/mqueue.c:583:
+ * Returns: 0=ok -1=signal -2=memory allocation error -3=timeout passed*/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#782: FILE: ipc/mqueue.c:594:
+	add_wait_queue(&(info->wait_q[sr]), &__wait);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#786: FILE: ipc/mqueue.c:598:
+		if ((current->pid ==
[...]
+			 break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#789: FILE: ipc/mqueue.c:601:
+				 struct ext_wait_queue, list))->task->pid)
+		    && ((info->attr.mq_curmsgs > 0 && sr == 1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#790: FILE: ipc/mqueue.c:602:
+		    && ((info->attr.mq_curmsgs > 0 && sr == 1)
+			|| (info->attr.mq_curmsgs <

WARNING:TABSTOP: Statements should start on a tabstop
#792: FILE: ipc/mqueue.c:604:
+			 break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!error'
#797: FILE: ipc/mqueue.c:609:
+			if ((!error) && (!signal_pending(current))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#798: FILE: ipc/mqueue.c:610:
+				remove_wait_queue(&(info->wait_q[sr]),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#806: FILE: ipc/mqueue.c:618:
+			remove_wait_queue(&(info->wait_q[sr]), &__wait);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q[sr]
#812: FILE: ipc/mqueue.c:624:
+	remove_wait_queue(&(info->wait_q[sr]), &__wait);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#829: FILE: ipc/mqueue.c:641:
+		if ((info->attr.mq_curmsgs < info->attr.mq_maxmsg - 1)
+		    && (!list_empty(&info->e_wait_q[sr].list))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#830: FILE: ipc/mqueue.c:642:
+			wait_exclusive(&(info->wait_q2[sr]), info);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->attr.mq_curmsgs > 1'
#834: FILE: ipc/mqueue.c:646:
+		if ((info->attr.mq_curmsgs > 1)
+		    && (!list_empty(&info->e_wait_q[sr].list))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#835: FILE: ipc/mqueue.c:647:
+		if ((info->attr.mq_curmsgs > 1)
+		    && (!list_empty(&info->e_wait_q[sr].list))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[sr]
#836: FILE: ipc/mqueue.c:648:
+			wait_exclusive(&(info->wait_q2[sr]), info);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#840: FILE: ipc/mqueue.c:652:
+	 * queue is empty. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#862: FILE: ipc/mqueue.c:674:
+	if (u_attr != NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#869: FILE: ipc/mqueue.c:681:
+		if (attr.mq_maxmsg == 0
+		    || attr.mq_msgsize == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#870: FILE: ipc/mqueue.c:682:
+		    || attr.mq_msgsize == 0
+		    || attr.mq_maxmsg > MQ_MAXMSG

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#871: FILE: ipc/mqueue.c:683:
+		    || attr.mq_maxmsg > MQ_MAXMSG
+		    || attr.mq_msgsize > MQ_MSGSIZE) {

CHECK:SPACING: No space is necessary after a cast
#901: FILE: ipc/mqueue.c:713:
+	if (arg->msg_prio >= (unsigned long) MQ_PRIO_MAX)

CHECK:BRACES: braces {} should be used on all arms of this statement
#907: FILE: ipc/mqueue.c:719:
+	if (arg->timeout) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#909: FILE: ipc/mqueue.c:721:
+		    (&ts, (struct timespec *) (long) arg->timeout,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#913: FILE: ipc/mqueue.c:725:
+		if (ts.tv_nsec < 0 || ts.tv_sec < 0
+		    || ts.tv_nsec >= 1000000000L)

WARNING:TYPO_SPELLING: 'schould' may be misspelled - perhaps 'should'?
#915: FILE: ipc/mqueue.c:727:
+		/* it schould be enough */
 		      ^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#917: FILE: ipc/mqueue.c:729:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#929: FILE: ipc/mqueue.c:741:
+	 * empty to not empty*/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#931: FILE: ipc/mqueue.c:743:
+	if (info->notify_pid != 0 && list_empty(&info->e_wait_q[1].list)
+	    && info->attr.mq_curmsgs == 1) {

CHECK:SPACING: No space is necessary after a cast
#965: FILE: ipc/mqueue.c:777:
+	if (copy_from_user(&arg, (void *) u_arg, sizeof(arg))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#966: FILE: ipc/mqueue.c:778:
+		printk(KERN_ERR

WARNING:TYPO_SPELLING: 'mesages' may be misspelled - perhaps 'messages'?
#994: FILE: ipc/mqueue.c:806:
+	/* check if this message will exceed overall limit for mesages */
 	                                                       ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1001: FILE: ipc/mqueue.c:813:
+	 * existing queues */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tmp_ptr1)...) over kmalloc(sizeof(struct msg)...)
#1002: FILE: ipc/mqueue.c:814:
+	tmp_ptr1 = kmalloc(sizeof(struct msg), GFP_KERNEL);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1016: FILE: ipc/mqueue.c:828:
+	while (i >= 0
+	       && info->messages[i]->msg_prio <

CHECK:SPACING: No space is necessary after a cast
#1017: FILE: ipc/mqueue.c:829:
+	       (unsigned int) arg.msg_prio) {

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: ipc/mqueue.c:837:
+	info->messages[i]->msg_prio = (unsigned int) arg.msg_prio;

CHECK:SPACING: No space is necessary after a cast
#1028: FILE: ipc/mqueue.c:840:
+	    (info->messages[i]->mtext, (char *) (long) arg.msg_ptr,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1031: FILE: ipc/mqueue.c:843:
+		printk(KERN_ERR " coping data from user failed\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[0]
#1044: FILE: ipc/mqueue.c:856:
+	wake_up(&(info->wait_q2[0]));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1060: FILE: ipc/mqueue.c:872:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1061: FILE: ipc/mqueue.c:873:
+ssize_t mq_receive_ioctl(struct inode * ino, long oflag,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1062: FILE: ipc/mqueue.c:874:
+			 struct ioctl_mq_sndrcv * u_arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1075: FILE: ipc/mqueue.c:887:
+		printk(KERN_ERR

CHECK:BRACES: braces {} should be used on all arms of this statement
#1088: FILE: ipc/mqueue.c:900:
+	if (arg.timeout) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1090: FILE: ipc/mqueue.c:902:
+		    (&ts, (struct timespec *) (long) arg.timeout,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1096: FILE: ipc/mqueue.c:908:
+		if (ts.tv_nsec < 0 || ts.tv_sec < 0
+		    || ts.tv_nsec >= 1000000000L) {

WARNING:TYPO_SPELLING: 'schould' may be misspelled - perhaps 'should'?
#1100: FILE: ipc/mqueue.c:912:
+		/* it schould be enough */
 		      ^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1102: FILE: ipc/mqueue.c:914:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1106: FILE: ipc/mqueue.c:918:
+	 * we must wait */

CHECK:SPACING: No space is necessary after a cast
#1132: FILE: ipc/mqueue.c:944:
+		     (long *) (long) arg.msg_prio)) {

CHECK:SPACING: No space is necessary after a cast
#1137: FILE: ipc/mqueue.c:949:
+	    ((char *) (long) arg.msg_ptr, info->messages[0]->mtext,

CHECK:SPACING: No space is necessary after a cast
#1146: FILE: ipc/mqueue.c:958:
+		info->messages[i - 1] = (struct msg *) (info->messages[i]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->wait_q2[1]
#1156: FILE: ipc/mqueue.c:968:
+	wake_up(&(info->wait_q2[1]));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1164: FILE: ipc/mqueue.c:976:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#1172: FILE: ipc/mqueue.c:984:
+	if (u_notification != NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1180: FILE: ipc/mqueue.c:992:
+	if (info->notify_pid == current->pid
+	    && (u_notification == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_notification"
#1180: FILE: ipc/mqueue.c:992:
+	    && (u_notification == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#1188: FILE: ipc/mqueue.c:1000:
+	} else if (u_notification != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_mqstat"
#1212: FILE: ipc/mqueue.c:1024:
+	if (u_mqstat == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_mqstat"
#1217: FILE: ipc/mqueue.c:1029:
+	if (u_mqstat != NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1227: FILE: ipc/mqueue.c:1039:
+/*
+*	IOCTL FUNCTION - demultiplexer for various mqueues operations

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1230: FILE: ipc/mqueue.c:1042:
+static int mqueue_ioctl_file(struct inode *inode, struct file *filp,
                                                                ^^^^

CHECK:SPACING: No space is necessary after a cast
#1239: FILE: ipc/mqueue.c:1051:
+		ret = mq_create_ioctl(inode, (struct kern_mq_attr *) arg);

CHECK:SPACING: No space is necessary after a cast
#1244: FILE: ipc/mqueue.c:1056:
+				  (struct ioctl_mq_sndrcv *) arg);

CHECK:SPACING: No space is necessary after a cast
#1249: FILE: ipc/mqueue.c:1061:
+				     (struct ioctl_mq_sndrcv *) arg);

CHECK:SPACING: No space is necessary after a cast
#1252: FILE: ipc/mqueue.c:1064:
+		ret = mq_notify_ioctl(inode, (struct sigevent *) arg);

CHECK:SPACING: No space is necessary after a cast
#1256: FILE: ipc/mqueue.c:1068:
+				       (struct kern_mq_attr *) arg);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407162.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 52 warnings, 91 checks, 1186 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000407162.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
