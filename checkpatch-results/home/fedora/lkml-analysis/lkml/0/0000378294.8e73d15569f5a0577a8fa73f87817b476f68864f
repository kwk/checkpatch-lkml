WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
Add the remaining parts of the generic RTC driver. The core driver genrtc.c is

ERROR:TRAILING_WHITESPACE: trailing whitespace
#41: FILE: Documentation/Configure.help:19139:
+  It reports status information via the file /proc/driver/rtc and its $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#56: FILE: Documentation/Configure.help:19154:
+  Provides an emulation for RTC_UIE which is required by some programs $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: arch/m68k/config.in:522:
+      tristate 'Generic /dev/rtc emulation' CONFIG_GEN_RTC      $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#93: FILE: arch/m68k/kernel/m68k_ksyms.c:53:
+EXPORT_SYMBOL(mach_get_ss);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#94: FILE: arch/m68k/kernel/m68k_ksyms.c:54:
+EXPORT_SYMBOL(mach_get_rtc_pll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#95: FILE: arch/m68k/kernel/m68k_ksyms.c:55:
+EXPORT_SYMBOL(mach_set_rtc_pll);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: arch/m68k/q40/config.c:61:
+extern unsigned int q40_get_ss (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#117: FILE: arch/m68k/q40/config.c:61:
+extern unsigned int q40_get_ss (void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/m68k/q40/config.c:202:
+    mach_get_ss          = q40_get_ss; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: arch/m68k/q40/config.c:202:
+    mach_get_ss          = q40_get_ss; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/m68k/q40/config.c:203:
+    mach_get_rtc_pll     = q40_get_rtc_pll; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: arch/m68k/q40/config.c:203:
+    mach_get_rtc_pll     = q40_get_rtc_pll; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: arch/m68k/q40/config.c:204:
+    mach_set_rtc_pll     = q40_set_rtc_pll; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: arch/m68k/q40/config.c:204:
+    mach_set_rtc_pll     = q40_set_rtc_pll; $

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - unsigned int q40_get_ss() should probably be unsigned int q40_get_ss(void)
#138: FILE: arch/m68k/q40/config.c:340:
+unsigned int q40_get_ss()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: arch/m68k/q40/config.c:376:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#152: FILE: arch/m68k/q40/config.c:378:
+#define Q40_RTC_PLL_MASK ((1<<5)-1)
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#152: FILE: arch/m68k/q40/config.c:378:
+#define Q40_RTC_PLL_MASK ((1<<5)-1)
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#153: FILE: arch/m68k/q40/config.c:379:
+#define Q40_RTC_PLL_SIGN (1<<5)
                            ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#153: FILE: arch/m68k/q40/config.c:379:
+#define Q40_RTC_PLL_SIGN (1<<5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: arch/m68k/q40/config.c:383:
+      int tmp=Q40_RTC_CTRL;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#157: FILE: arch/m68k/q40/config.c:383:
+      int tmp=Q40_RTC_CTRL;
              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: arch/m68k/q40/config.c:384:
+      int tmp=Q40_RTC_CTRL;
+      pll->pll_value = tmp & Q40_RTC_PLL_MASK;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: arch/m68k/q40/config.c:384:
+      pll->pll_value = tmp & Q40_RTC_PLL_MASK;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: arch/m68k/q40/config.c:385:
+      if (tmp & Q40_RTC_PLL_SIGN) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/m68k/q40/config.c:385:
+      if (tmp & Q40_RTC_PLL_SIGN) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#159: FILE: arch/m68k/q40/config.c:385:
+      if (tmp & Q40_RTC_PLL_SIGN) 
+	  pll->pll_value = -pll->pll_value;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: arch/m68k/q40/config.c:387:
+      pll->pll_max=31;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#161: FILE: arch/m68k/q40/config.c:387:
+      pll->pll_max=31;
                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: arch/m68k/q40/config.c:388:
+      pll->pll_min=-31;$

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#162: FILE: arch/m68k/q40/config.c:388:
+      pll->pll_min=-31;
                   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#162: FILE: arch/m68k/q40/config.c:388:
+      pll->pll_min=-31;
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/m68k/q40/config.c:389:
+      pll->pll_posmult=512;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#163: FILE: arch/m68k/q40/config.c:389:
+      pll->pll_posmult=512;
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/m68k/q40/config.c:390:
+      pll->pll_negmult=256;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#164: FILE: arch/m68k/q40/config.c:390:
+      pll->pll_negmult=256;
                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/m68k/q40/config.c:391:
+      pll->pll_clock=125829120;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#165: FILE: arch/m68k/q40/config.c:391:
+      pll->pll_clock=125829120;
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: arch/m68k/q40/config.c:392:
+      return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/m68k/q40/config.c:393:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: arch/m68k/q40/config.c:397:
+  if (!pll->pll_ctrl){$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#171: FILE: arch/m68k/q40/config.c:397:
+  if (!pll->pll_ctrl){
[...]
+      int tmp=(pll->pll_value & 31) | (pll->pll_value<0 ? 32 : 0) | Q40_RTC_WRITE;

ERROR:SPACING: space required before the open brace '{'
#171: FILE: arch/m68k/q40/config.c:397:
+  if (!pll->pll_ctrl){

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: arch/m68k/q40/config.c:397:
+  if (!pll->pll_ctrl){
[...]
+  } else return -EINVAL;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: arch/m68k/q40/config.c:399:
+      int tmp=(pll->pll_value & 31) | (pll->pll_value<0 ? 32 : 0) | Q40_RTC_WRITE;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#173: FILE: arch/m68k/q40/config.c:399:
+      int tmp=(pll->pll_value & 31) | (pll->pll_value<0 ? 32 : 0) | Q40_RTC_WRITE;
              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#173: FILE: arch/m68k/q40/config.c:399:
+      int tmp=(pll->pll_value & 31) | (pll->pll_value<0 ? 32 : 0) | Q40_RTC_WRITE;
                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: arch/m68k/q40/config.c:400:
+      int tmp=(pll->pll_value & 31) | (pll->pll_value<0 ? 32 : 0) | Q40_RTC_WRITE;
+      Q40_RTC_CTRL |= Q40_RTC_WRITE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: arch/m68k/q40/config.c:400:
+      Q40_RTC_CTRL |= Q40_RTC_WRITE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: arch/m68k/q40/config.c:401:
+      Q40_RTC_CTRL = tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/m68k/q40/config.c:402:
+      Q40_RTC_CTRL &= ~(Q40_RTC_WRITE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: arch/m68k/q40/config.c:403:
+      return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: arch/m68k/q40/config.c:404:
+  } else return -EINVAL;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#178: FILE: arch/m68k/q40/config.c:404:
+  } else return -EINVAL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: include/asm-m68k/machdep.h:33:
+extern unsigned int (*mach_get_ss)(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_pll_info *' should also have an identifier name
#224: FILE: include/asm-m68k/machdep.h:34:
+extern int (*mach_get_rtc_pll)(struct rtc_pll_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rtc_pll_info *' should also have an identifier name
#225: FILE: include/asm-m68k/machdep.h:35:
+extern int (*mach_set_rtc_pll)(struct rtc_pll_info *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#273: FILE: include/asm-m68k/rtc.h:50:
+	if (mach_get_ss)
[...]
+	else{
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#275: FILE: include/asm-m68k/rtc.h:52:
+		return mach_get_ss();
+	else{

ERROR:SPACING: space required before the open brace '{'
#275: FILE: include/asm-m68k/rtc.h:52:
+	else{

CHECK:BRACES: Unbalanced braces around else statement
#275: FILE: include/asm-m68k/rtc.h:52:
+	else{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: include/asm-m68k/rtc.h:54:
+^I^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#290: FILE: include/asm-m68k/rtc.h:67:
+}
+static inline int set_rtc_pll(struct rtc_pll_info *pll)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: include/asm-ppc/rtc.h:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#303: FILE: include/asm-ppc/rtc.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'inclue' may be misspelled - perhaps 'include'?
#304: FILE: include/asm-ppc/rtc.h:2:
+ * inclue/asm-ppc/rtc.h
    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Dyas' may be misspelled - perhaps 'Dryas'?
#321: FILE: include/asm-ppc/rtc.h:19:
+ * Copyright (C) 1996 Thomas K. Dyas (tdyas@eden.rutgers.edu)
                                 ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: include/asm-ppc/rtc.h:38:
+extern void gen_rtc_interrupt(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#340: FILE: include/asm-ppc/rtc.h:38:
+extern void gen_rtc_interrupt(unsigned long);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (ppc_md.get_rtc_time)
#354: FILE: include/asm-ppc/rtc.h:52:
+		nowtime = (ppc_md.get_rtc_time)();

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#368: FILE: include/asm-ppc/rtc.h:66:
+	if (ppc_md.get_rtc_time) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#371: FILE: include/asm-ppc/rtc.h:69:
+		nowtime = mktime(time->tm_year+1900, time->tm_mon+1,
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#371: FILE: include/asm-ppc/rtc.h:69:
+		nowtime = mktime(time->tm_year+1900, time->tm_mon+1,
 		                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: include/asm-ppc/rtc.h:70:
+		nowtime = mktime(time->tm_year+1900, time->tm_mon+1,
+				time->tm_mday, time->tm_hour, time->tm_min,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (ppc_md.set_rtc_time)
#375: FILE: include/asm-ppc/rtc.h:73:
+		(ppc_md.set_rtc_time)(nowtime);

CHECK:BRACES: Unbalanced braces around else statement
#378: FILE: include/asm-ppc/rtc.h:76:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#394: FILE: include/asm-ppc/rtc.h:92:
+}
+static inline int set_rtc_pll(struct rtc_pll_info *pll)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: include/linux/rtc.h:53:
+ */ $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378294.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 37 warnings, 19 checks, 381 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000378294.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
