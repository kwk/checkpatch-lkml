WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
This also fixes the module owner issue with the dev files that happened when

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cls)...) over kmalloc(sizeof(struct class)...)
#78: FILE: drivers/base/class.c:181:
+	cls = kmalloc(sizeof(struct class), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cls == NULL'
#103: FILE: drivers/base/class.c:206:
+	if ((cls == NULL) || (IS_ERR(cls)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cls"
#103: FILE: drivers/base/class.c:206:
+	if ((cls == NULL) || (IS_ERR(cls)))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#127: FILE: drivers/base/class.c:463:
+		struct class_device_attribute *attr;
+		attr = kmalloc(sizeof(*attr), GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#135: FILE: drivers/base/class.c:471:
+		attr->attr.mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cls"
#181: FILE: drivers/base/class.c:515:
+	if (cls == NULL || IS_ERR(cls))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*class_dev)...) over kmalloc(sizeof(struct class_device)...)
#184: FILE: drivers/base/class.c:518:
+	class_dev = kmalloc(sizeof(struct class_device), GFP_KERNEL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#254: FILE: drivers/base/class.c:699:
+EXPORT_SYMBOL_GPL(class_destroy);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#263: FILE: drivers/base/class.c:709:
+EXPORT_SYMBOL_GPL(class_device_destroy);

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#274: FILE: include/linux/device.h:146:
+	struct module		* owner;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/linux/device.h:250:
+extern struct class *class_create(struct module *owner, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: include/linux/device.h:251:
+extern void class_destroy(struct class *cls);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/device.h:252:
+extern struct class_device *class_device_create(struct class *cls, dev_t devt,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: include/linux/device.h:254:
+					__attribute__((format(printf,4,5)));
 					                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: include/linux/device.h:254:
+					__attribute__((format(printf,4,5)));
 					                              ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(4,5) over __attribute__((format(printf,4,5)))
#294: FILE: include/linux/device.h:254:
+					__attribute__((format(printf,4,5)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: include/linux/device.h:255:
+extern void class_device_destroy(struct class *cls, dev_t devt);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174802.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 6 warnings, 9 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174802.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
