WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: fs/gfs2/locking/dlm/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#67: FILE: fs/gfs2/locking/dlm/main.c:15:
+extern int gdlm_drop_period;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#69: FILE: fs/gfs2/locking/dlm/main.c:17:
+extern struct lm_lockops gdlm_ops;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#77: FILE: fs/gfs2/locking/dlm/main.c:25:
+		printk(KERN_WARNING "lock_dlm:  can't register protocol: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#98: FILE: fs/gfs2/locking/dlm/main.c:46:
+	printk(KERN_INFO

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#99: FILE: fs/gfs2/locking/dlm/main.c:47:
+	       "Lock_DLM (built %s %s) installed\n", __DATE__, __TIME__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#99: FILE: fs/gfs2/locking/dlm/main.c:47:
+	       "Lock_DLM (built %s %s) installed\n", __DATE__, __TIME__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: fs/gfs2/locking/dlm/lock.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#156: FILE: fs/gfs2/locking/dlm/lock.c:37:
+		printk(KERN_INFO "lock_dlm: bast mode zero %x,%llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: fs/gfs2/locking/dlm/lock.c:38:
+		printk(KERN_INFO "lock_dlm: bast mode zero %x,%llx\n",
+			lp->lockname.ln_type,

CHECK:BRACES: braces {} should be used on all arms of this statement
#163: FILE: fs/gfs2/locking/dlm/lock.c:44:
+	if (!lp->bast_mode) {
[...]
+	} else if (lp->bast_mode < mode)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#219: FILE: fs/gfs2/locking/dlm/lock.c:100:
+/* verify agreement with GFS on the current lock state, NB: DLM_LOCK_NL and
+   DLM_LOCK_IV are both considered LM_ST_UNLOCKED by GFS. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: fs/gfs2/locking/dlm/lock.c:100:
+   DLM_LOCK_IV are both considered LM_ST_UNLOCKED by GFS. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#223: FILE: fs/gfs2/locking/dlm/lock.c:104:
+	int16_t cur = make_mode(cur_state);

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: fs/gfs2/locking/dlm/lock.c:105:
+	int16_t cur = make_mode(cur_state);
+	if (lp->cur != DLM_LOCK_IV)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#230: FILE: fs/gfs2/locking/dlm/lock.c:111:
+				      int16_t cur, int16_t req)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*lp)...) over kzalloc(sizeof(struct gdlm_lock)...)
#286: FILE: fs/gfs2/locking/dlm/lock.c:167:
+	lp = kzalloc(sizeof(struct gdlm_lock), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#335: FILE: fs/gfs2/locking/dlm/lock.c:216:
+	error = gdlm_create_lp((struct gdlm_ls *) lockspace, name, &lp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#337: FILE: fs/gfs2/locking/dlm/lock.c:218:
+	*lockp = (lm_lock_t *) lp;

CHECK:SPACING: No space is necessary after a cast
#343: FILE: fs/gfs2/locking/dlm/lock.c:224:
+	gdlm_delete_lp((struct gdlm_lock *) lock);

WARNING:SPLIT_STRING: quoted string split across lines
#391: FILE: fs/gfs2/locking/dlm/lock.c:272:
+		log_debug("%s: gdlm_lock %x,%llx err=%d cur=%d req=%d lkf=%x "
+			  "flags=%lx", ls->fsname, lp->lockname.ln_type,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#419: FILE: fs/gfs2/locking/dlm/lock.c:300:
+		log_debug("%s: gdlm_unlock %x,%llx err=%d cur=%d req=%d lkf=%x "
+			  "flags=%lx", ls->fsname, lp->lockname.ln_type,

CHECK:SPACING: No space is necessary after a cast
#430: FILE: fs/gfs2/locking/dlm/lock.c:311:
+	struct gdlm_lock *lp = (struct gdlm_lock *) lock;

CHECK:SPACING: No space is necessary after a cast
#445: FILE: fs/gfs2/locking/dlm/lock.c:326:
+	struct gdlm_lock *lp = (struct gdlm_lock *) lock;

CHECK:SPACING: No space is necessary after a cast
#455: FILE: fs/gfs2/locking/dlm/lock.c:336:
+	struct gdlm_lock *lp = (struct gdlm_lock *) lock;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_cancel', this function's name, in a string
#462: FILE: fs/gfs2/locking/dlm/lock.c:343:
+	log_info("gdlm_cancel %x,%llx flags %lx", lp->lockname.ln_type,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_cancel', this function's name, in a string
#481: FILE: fs/gfs2/locking/dlm/lock.c:362:
+		log_info("gdlm_cancel skip %x,%llx flags %lx",

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: fs/gfs2/locking/dlm/lock.c:363:
+^I^I ^I lp->lockname.ln_type,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#482: FILE: fs/gfs2/locking/dlm/lock.c:363:
+^I^I ^I lp->lockname.ln_type,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: fs/gfs2/locking/dlm/lock.c:363:
+		log_info("gdlm_cancel skip %x,%llx flags %lx",
+		 	 lp->lockname.ln_type,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_cancel', this function's name, in a string
#495: FILE: fs/gfs2/locking/dlm/lock.c:376:
+	log_info("gdlm_cancel rv %d %x,%llx flags %lx", error,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#524: FILE: fs/gfs2/locking/dlm/lock.c:405:
+/* This can do a synchronous dlm request (requiring a lock_dlm thread to get
+   the completion) because gfs won't call hold_lvb() during a callback (from

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#525: FILE: fs/gfs2/locking/dlm/lock.c:406:
+   the context of a lock_dlm thread). */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#533: FILE: fs/gfs2/locking/dlm/lock.c:414:
+		printk(KERN_INFO "lock_dlm: lvb already held\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#554: FILE: fs/gfs2/locking/dlm/lock.c:435:
+		printk(KERN_INFO "lock_dlm: hold_null_lock dlm error %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hold_null_lock', this function's name, in a string
#554: FILE: fs/gfs2/locking/dlm/lock.c:435:
+		printk(KERN_INFO "lock_dlm: hold_null_lock dlm error %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#565: FILE: fs/gfs2/locking/dlm/lock.c:446:
+/* This cannot do a synchronous dlm request (requiring a lock_dlm thread to get
+   the completion) because gfs may call unhold_lvb() during a callback (from

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#567: FILE: fs/gfs2/locking/dlm/lock.c:448:
+   other lock_dlm thread could be engaged in recovery. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#583: FILE: fs/gfs2/locking/dlm/lock.c:464:
+/* Acquire a NL lock because gfs requires the value block to remain
+   intact on the resource while the lvb is "held" even if it's holding no locks

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#584: FILE: fs/gfs2/locking/dlm/lock.c:465:
+   on the resource. */

CHECK:SPACING: No space is necessary after a cast
#588: FILE: fs/gfs2/locking/dlm/lock.c:469:
+	struct gdlm_lock *lp = (struct gdlm_lock *) lock;

CHECK:SPACING: No space is necessary after a cast
#606: FILE: fs/gfs2/locking/dlm/lock.c:487:
+	struct gdlm_lock *lp = (struct gdlm_lock *) lock;

CHECK:SPACING: No space is necessary after a cast
#614: FILE: fs/gfs2/locking/dlm/lock.c:495:
+	struct gdlm_lock *lp = (struct gdlm_lock *) lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#664: FILE: fs/gfs2/locking/dlm/mount.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#679: FILE: fs/gfs2/locking/dlm/mount.c:16:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ls)...) over kzalloc(sizeof(struct gdlm_ls)...)
#686: FILE: fs/gfs2/locking/dlm/mount.c:23:
+	ls = kzalloc(sizeof(struct gdlm_ls), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'unkonwn' may be misspelled - perhaps 'unknown'?
#776: FILE: fs/gfs2/locking/dlm/mount.c:113:
+			log_error("unkonwn option: %s", x);
 			           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: fs/gfs2/locking/dlm/mount.c:123:
+static int gdlm_mount(char *table_name, char *host_data,
+			lm_callback_t cb, lm_fsdata_t *fsdata,

CHECK:SPACING: No space is necessary after a cast
#842: FILE: fs/gfs2/locking/dlm/mount.c:179:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#848: FILE: fs/gfs2/locking/dlm/mount.c:185:
+	/* FIXME: serialize unmount and withdraw in case they
+	   happen at once.  Also, if unmount follows withdraw,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#849: FILE: fs/gfs2/locking/dlm/mount.c:186:
+	   wait for withdraw to finish. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_unmount', this function's name, in a string
#859: FILE: fs/gfs2/locking/dlm/mount.c:196:
+		log_info("gdlm_unmount: %d stray locks freed", rv);

ERROR:CODE_INDENT: code indent should use tabs where possible
#865: FILE: fs/gfs2/locking/dlm/mount.c:202:
+                               unsigned int message)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: fs/gfs2/locking/dlm/mount.c:202:
+                               unsigned int message)$

CHECK:SPACING: No space is necessary after a cast
#867: FILE: fs/gfs2/locking/dlm/mount.c:204:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;

WARNING:LINE_SPACING: Missing a blank line after declarations
#868: FILE: fs/gfs2/locking/dlm/mount.c:205:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;
+	ls->recover_jid_done = jid;

CHECK:SPACING: No space is necessary after a cast
#875: FILE: fs/gfs2/locking/dlm/mount.c:212:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;

WARNING:LINE_SPACING: Missing a blank line after declarations
#876: FILE: fs/gfs2/locking/dlm/mount.c:213:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;
+	ls->first_done = 1;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#881: FILE: fs/gfs2/locking/dlm/mount.c:218:
+/* Userspace gets the offline uevent, blocks new gfs locks on
+   other mounters, and lets us know (sets WITHDRAW flag).  Then,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#882: FILE: fs/gfs2/locking/dlm/mount.c:219:
+   userspace leaves the mount group while we leave the lockspace. */

CHECK:SPACING: No space is necessary after a cast
#886: FILE: fs/gfs2/locking/dlm/mount.c:223:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#923: FILE: fs/gfs2/locking/dlm/plock.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#936: FILE: fs/gfs2/locking/dlm/plock.c:14:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'GDLM_PLOCK_VERSION_MAJOR != info->version[0]'
#958: FILE: fs/gfs2/locking/dlm/plock.c:36:
+	if ((GDLM_PLOCK_VERSION_MAJOR != info->version[0]) ||
+	    (GDLM_PLOCK_VERSION_MINOR < info->version[1])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'GDLM_PLOCK_VERSION_MINOR < info->version[1]'
#958: FILE: fs/gfs2/locking/dlm/plock.c:36:
+	if ((GDLM_PLOCK_VERSION_MAJOR != info->version[0]) ||
+	    (GDLM_PLOCK_VERSION_MINOR < info->version[1])) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#958: FILE: fs/gfs2/locking/dlm/plock.c:36:
+	if ((GDLM_PLOCK_VERSION_MAJOR != info->version[0]) ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#959: FILE: fs/gfs2/locking/dlm/plock.c:37:
+	    (GDLM_PLOCK_VERSION_MINOR < info->version[1])) {

WARNING:SPLIT_STRING: quoted string split across lines
#961: FILE: fs/gfs2/locking/dlm/plock.c:39:
+		log_error("plock device version mismatch: "
+			  "kernel (%u.%u.%u), user (%u.%u.%u)",

CHECK:SPACING: No space is necessary after a cast
#986: FILE: fs/gfs2/locking/dlm/plock.c:64:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;

CHECK:SPACING: No space is necessary after a cast
#1002: FILE: fs/gfs2/locking/dlm/plock.c:80:
+	op->info.owner		= (__u64)(long) fl->fl_owner;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1009: FILE: fs/gfs2/locking/dlm/plock.c:87:
+		printk(KERN_INFO "plock op on list\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_plock', this function's name, in a string
#1018: FILE: fs/gfs2/locking/dlm/plock.c:96:
+			log_error("gdlm_plock: vfs lock error %x,%llx",

CHECK:SPACING: No space is necessary after a cast
#1030: FILE: fs/gfs2/locking/dlm/plock.c:108:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_punlock', this function's name, in a string
#1039: FILE: fs/gfs2/locking/dlm/plock.c:117:
+		log_error("gdlm_punlock: vfs unlock error %x,%llx",

CHECK:SPACING: No space is necessary after a cast
#1048: FILE: fs/gfs2/locking/dlm/plock.c:126:
+	op->info.owner		= (__u64)(long) fl->fl_owner;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1055: FILE: fs/gfs2/locking/dlm/plock.c:133:
+		printk(KERN_INFO "punlock op on list\n");

CHECK:SPACING: No space is necessary after a cast
#1069: FILE: fs/gfs2/locking/dlm/plock.c:147:
+	struct gdlm_ls *ls = (struct gdlm_ls *) lockspace;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1090: FILE: fs/gfs2/locking/dlm/plock.c:168:
+		printk(KERN_INFO "plock_get op on list\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1097: FILE: fs/gfs2/locking/dlm/plock.c:175:
+	if (rv == 0)
[...]
+	else if (rv > 0) {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1137: FILE: fs/gfs2/locking/dlm/plock.c:215:
+/* a write copies in one plock result that should match a plock_op
+   on the recv list */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1137: FILE: fs/gfs2/locking/dlm/plock.c:215:
+   on the recv list */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1171: FILE: fs/gfs2/locking/dlm/plock.c:249:
+		printk(KERN_INFO "gdlm dev_write no op %x %llx\n", info.fsid,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_write', this function's name, in a string
#1171: FILE: fs/gfs2/locking/dlm/plock.c:249:
+		printk(KERN_INFO "gdlm dev_write no op %x %llx\n", info.fsid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: fs/gfs2/locking/dlm/plock.c:250:
+		printk(KERN_INFO "gdlm dev_write no op %x %llx\n", info.fsid,
+			(unsigned long long)info.number);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1189: FILE: fs/gfs2/locking/dlm/plock.c:267:
+static struct file_operations dev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1214: FILE: fs/gfs2/locking/dlm/plock.c:292:
+		printk(KERN_INFO "gdlm_plock_init: misc_register failed %d",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_plock_init', this function's name, in a string
#1214: FILE: fs/gfs2/locking/dlm/plock.c:292:
+		printk(KERN_INFO "gdlm_plock_init: misc_register failed %d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1222: FILE: fs/gfs2/locking/dlm/plock.c:300:
+		printk(KERN_INFO "gdlm_plock_exit: misc_deregister failed");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdlm_plock_exit', this function's name, in a string
#1222: FILE: fs/gfs2/locking/dlm/plock.c:300:
+		printk(KERN_INFO "gdlm_plock_exit: misc_deregister failed");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1228: FILE: fs/gfs2/locking/dlm/sysfs.c:1:
+/*

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1265: FILE: fs/gfs2/locking/dlm/sysfs.c:38:
+	val = simple_strtol(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#1267: FILE: fs/gfs2/locking/dlm/sysfs.c:40:
+	if (val == 1)
[...]
+	else if (val == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1272: FILE: fs/gfs2/locking/dlm/sysfs.c:45:
+	} else

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1293: FILE: fs/gfs2/locking/dlm/sysfs.c:66:
+	val = simple_strtol(buf, NULL, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1330: FILE: fs/gfs2/locking/dlm/sysfs.c:103:
+	ls->recover_jid = simple_strtol(buf, NULL, 0);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1347: FILE: fs/gfs2/locking/dlm/sysfs.c:120:
+	ssize_t (*show)(struct gdlm_ls *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1347: FILE: fs/gfs2/locking/dlm/sysfs.c:120:
+	ssize_t (*show)(struct gdlm_ls *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1348: FILE: fs/gfs2/locking/dlm/sysfs.c:121:
+	ssize_t (*store)(struct gdlm_ls *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1348: FILE: fs/gfs2/locking/dlm/sysfs.c:121:
+	ssize_t (*store)(struct gdlm_ls *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1348: FILE: fs/gfs2/locking/dlm/sysfs.c:121:
+	ssize_t (*store)(struct gdlm_ls *, const char *, size_t);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1351: FILE: fs/gfs2/locking/dlm/sysfs.c:124:
+#define GDLM_ATTR(_name,_mode,_show,_store) \
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1351: FILE: fs/gfs2/locking/dlm/sysfs.c:124:
+#define GDLM_ATTR(_name,_mode,_show,_store) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1351: FILE: fs/gfs2/locking/dlm/sysfs.c:124:
+#define GDLM_ATTR(_name,_mode,_show,_store) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1352: FILE: fs/gfs2/locking/dlm/sysfs.c:125:
+static struct gdlm_attr gdlm_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1352: FILE: fs/gfs2/locking/dlm/sysfs.c:125:
+static struct gdlm_attr gdlm_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1352: FILE: fs/gfs2/locking/dlm/sysfs.c:125:
+static struct gdlm_attr gdlm_attr_##_name = __ATTR(_name,_mode,_show,_store)
                                                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1384: FILE: fs/gfs2/locking/dlm/sysfs.c:157:
+	struct gdlm_attr *a = container_of(attr, struct gdlm_attr, attr);
+	return a->show ? a->show(ls, buf) : 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1392: FILE: fs/gfs2/locking/dlm/sysfs.c:165:
+	struct gdlm_attr *a = container_of(attr, struct gdlm_attr, attr);
+	return a->store ? a->store(ls, buf, len) : len;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#1395: FILE: fs/gfs2/locking/dlm/sysfs.c:168:
+static struct sysfs_ops gdlm_attr_ops = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1443: FILE: fs/gfs2/locking/dlm/sysfs.c:216:
+		printk("lock_dlm: cannot register kset %d\n", error);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1456: FILE: fs/gfs2/locking/dlm/thread.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1468: FILE: fs/gfs2/locking/dlm/thread.c:13:
+/* A lock placed on this queue is re-submitted to DLM as soon as the lock_dlm
+   thread gets to it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1468: FILE: fs/gfs2/locking/dlm/thread.c:13:
+   thread gets to it. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#1506: FILE: fs/gfs2/locking/dlm/thread.c:51:
+	int16_t prev_mode = lp->cur;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1512: FILE: fs/gfs2/locking/dlm/thread.c:57:
+^I^I ^I lp->lockname.ln_type, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1512: FILE: fs/gfs2/locking/dlm/thread.c:57:
+^I^I ^I lp->lockname.ln_type, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1512: FILE: fs/gfs2/locking/dlm/thread.c:57:
+^I^I ^I lp->lockname.ln_type, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: fs/gfs2/locking/dlm/thread.c:57:
+		log_info("complete dlm cancel %x,%llx flags %lx",
+		 	 lp->lockname.ln_type, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1560: FILE: fs/gfs2/locking/dlm/thread.c:105:
+^I^I ^I lp->lockname.ln_type, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1560: FILE: fs/gfs2/locking/dlm/thread.c:105:
+^I^I ^I lp->lockname.ln_type, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1560: FILE: fs/gfs2/locking/dlm/thread.c:105:
+^I^I ^I lp->lockname.ln_type, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1560: FILE: fs/gfs2/locking/dlm/thread.c:105:
+		log_info("complete internal cancel %x,%llx",
+		 	 lp->lockname.ln_type, 

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1568: FILE: fs/gfs2/locking/dlm/thread.c:113:
+	 * An error occured.
 	            ^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1639: FILE: fs/gfs2/locking/dlm/thread.c:184:
+	    lp->req != DLM_LOCK_NL) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lp->cur > DLM_LOCK_NL'
#1686: FILE: fs/gfs2/locking/dlm/thread.c:231:
+	if (!test_and_clear_bit(LFL_NOCACHE, &lp->flags) &&
+	    (lp->cur > DLM_LOCK_NL) && (prev_mode > DLM_LOCK_NL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev_mode > DLM_LOCK_NL'
#1686: FILE: fs/gfs2/locking/dlm/thread.c:231:
+	if (!test_and_clear_bit(LFL_NOCACHE, &lp->flags) &&
+	    (lp->cur > DLM_LOCK_NL) && (prev_mode > DLM_LOCK_NL))

CHECK:SPACING: No space is necessary after a cast
#1721: FILE: fs/gfs2/locking/dlm/thread.c:266:
+	struct gdlm_ls *ls = (struct gdlm_ls *) data;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1724: FILE: fs/gfs2/locking/dlm/thread.c:269:
+	uint8_t complete, blocking, submit, drop;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1728: FILE: fs/gfs2/locking/dlm/thread.c:273:
+	/* Only thread1 is allowed to do blocking callbacks since gfs
+	   may wait for a completion callback within a blocking cb. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1728: FILE: fs/gfs2/locking/dlm/thread.c:273:
+	   may wait for a completion callback within a blocking cb. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1741: FILE: fs/gfs2/locking/dlm/thread.c:286:
+		complete = blocking = submit = drop = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1818: FILE: fs/gfs2/locking/dlm/lock_dlm.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1861: FILE: fs/gfs2/locking/dlm/lock_dlm.h:44:
+/* GFS uses 12 bytes to identify a resource (32 bit type + 64 bit number).
+   We sprintf these numbers into a 24 byte string of hex values to make them

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1862: FILE: fs/gfs2/locking/dlm/lock_dlm.h:45:
+   human-readable (to make debugging simpler.) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1876: FILE: fs/gfs2/locking/dlm/lock_dlm.h:59:
+	uint32_t		id;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1891: FILE: fs/gfs2/locking/dlm/lock_dlm.h:74:
+	spinlock_t		async_lock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1897: FILE: fs/gfs2/locking/dlm/lock_dlm.h:80:
+	uint32_t		all_locks_count;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#1929: FILE: fs/gfs2/locking/dlm/lock_dlm.h:112:
+	int16_t			cur;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#1930: FILE: fs/gfs2/locking/dlm/lock_dlm.h:113:
+	int16_t			req;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#1931: FILE: fs/gfs2/locking/dlm/lock_dlm.h:114:
+	int16_t			prev_req;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1932: FILE: fs/gfs2/locking/dlm/lock_dlm.h:115:
+	uint32_t		lkf;		/* dlm flags DLM_LKF_ */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1948: FILE: fs/gfs2/locking/dlm/lock_dlm.h:131:
+		printk(KERN_EMERG "lock_dlm: fatal assertion failed \"%s\"\n" \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1951: FILE: fs/gfs2/locking/dlm/lock_dlm.h:134:
+		BUG();                                                        \

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1955: FILE: fs/gfs2/locking/dlm/lock_dlm.h:138:
+#define log_print(lev, fmt, arg...) printk(lev "lock_dlm: " fmt "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1955: FILE: fs/gfs2/locking/dlm/lock_dlm.h:138:
+#define log_print(lev, fmt, arg...) printk(lev "lock_dlm: " fmt "\n" , ## arg)
                                                                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1956: FILE: fs/gfs2/locking/dlm/lock_dlm.h:139:
+#define log_info(fmt, arg...)  log_print(KERN_INFO , fmt , ## arg)
                                                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1956: FILE: fs/gfs2/locking/dlm/lock_dlm.h:139:
+#define log_info(fmt, arg...)  log_print(KERN_INFO , fmt , ## arg)
                                                          ^

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#1956: FILE: fs/gfs2/locking/dlm/lock_dlm.h:139:
+#define log_info(fmt, arg...)  log_print(KERN_INFO , fmt , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1957: FILE: fs/gfs2/locking/dlm/lock_dlm.h:140:
+#define log_error(fmt, arg...) log_print(KERN_ERR , fmt , ## arg)
                                                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1957: FILE: fs/gfs2/locking/dlm/lock_dlm.h:140:
+#define log_error(fmt, arg...) log_print(KERN_ERR , fmt , ## arg)
                                                         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1959: FILE: fs/gfs2/locking/dlm/lock_dlm.h:142:
+#define log_debug(fmt, arg...) log_print(KERN_DEBUG , fmt , ## arg)
                                                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1959: FILE: fs/gfs2/locking/dlm/lock_dlm.h:142:
+#define log_debug(fmt, arg...) log_print(KERN_DEBUG , fmt , ## arg)
                                                           ^

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#1959: FILE: fs/gfs2/locking/dlm/lock_dlm.h:142:
+#define log_debug(fmt, arg...) log_print(KERN_DEBUG , fmt , ## arg)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1968: FILE: fs/gfs2/locking/dlm/lock_dlm.h:151:
+int gdlm_kobject_setup(struct gdlm_ls *, struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#1968: FILE: fs/gfs2/locking/dlm/lock_dlm.h:151:
+int gdlm_kobject_setup(struct gdlm_ls *, struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1969: FILE: fs/gfs2/locking/dlm/lock_dlm.h:152:
+void gdlm_kobject_release(struct gdlm_ls *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1973: FILE: fs/gfs2/locking/dlm/lock_dlm.h:156:
+int gdlm_init_threads(struct gdlm_ls *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1974: FILE: fs/gfs2/locking/dlm/lock_dlm.h:157:
+void gdlm_release_threads(struct gdlm_ls *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int16_t' should also have an identifier name
#1978: FILE: fs/gfs2/locking/dlm/lock_dlm.h:161:
+int16_t gdlm_make_lmstate(int16_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_lock *' should also have an identifier name
#1979: FILE: fs/gfs2/locking/dlm/lock_dlm.h:162:
+void gdlm_queue_delayed(struct gdlm_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1980: FILE: fs/gfs2/locking/dlm/lock_dlm.h:163:
+void gdlm_submit_delayed(struct gdlm_ls *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_ls *' should also have an identifier name
#1981: FILE: fs/gfs2/locking/dlm/lock_dlm.h:164:
+int gdlm_release_all_locks(struct gdlm_ls *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_lock *' should also have an identifier name
#1982: FILE: fs/gfs2/locking/dlm/lock_dlm.h:165:
+void gdlm_delete_lp(struct gdlm_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gdlm_lock *' should also have an identifier name
#1983: FILE: fs/gfs2/locking/dlm/lock_dlm.h:166:
+unsigned int gdlm_do_lock(struct gdlm_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lockspace_t *' should also have an identifier name
#1985: FILE: fs/gfs2/locking/dlm/lock_dlm.h:168:
+int gdlm_get_lock(lm_lockspace_t *, struct lm_lockname *, lm_lock_t **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lm_lockname *' should also have an identifier name
#1985: FILE: fs/gfs2/locking/dlm/lock_dlm.h:168:
+int gdlm_get_lock(lm_lockspace_t *, struct lm_lockname *, lm_lock_t **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t **' should also have an identifier name
#1985: FILE: fs/gfs2/locking/dlm/lock_dlm.h:168:
+int gdlm_get_lock(lm_lockspace_t *, struct lm_lockname *, lm_lock_t **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t *' should also have an identifier name
#1986: FILE: fs/gfs2/locking/dlm/lock_dlm.h:169:
+void gdlm_put_lock(lm_lock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t *' should also have an identifier name
#1987: FILE: fs/gfs2/locking/dlm/lock_dlm.h:170:
+unsigned int gdlm_lock(lm_lock_t *, unsigned int, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1987: FILE: fs/gfs2/locking/dlm/lock_dlm.h:170:
+unsigned int gdlm_lock(lm_lock_t *, unsigned int, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1987: FILE: fs/gfs2/locking/dlm/lock_dlm.h:170:
+unsigned int gdlm_lock(lm_lock_t *, unsigned int, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1987: FILE: fs/gfs2/locking/dlm/lock_dlm.h:170:
+unsigned int gdlm_lock(lm_lock_t *, unsigned int, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t *' should also have an identifier name
#1988: FILE: fs/gfs2/locking/dlm/lock_dlm.h:171:
+unsigned int gdlm_unlock(lm_lock_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1988: FILE: fs/gfs2/locking/dlm/lock_dlm.h:171:
+unsigned int gdlm_unlock(lm_lock_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t *' should also have an identifier name
#1989: FILE: fs/gfs2/locking/dlm/lock_dlm.h:172:
+void gdlm_cancel(lm_lock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t *' should also have an identifier name
#1990: FILE: fs/gfs2/locking/dlm/lock_dlm.h:173:
+int gdlm_hold_lvb(lm_lock_t *, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#1990: FILE: fs/gfs2/locking/dlm/lock_dlm.h:173:
+int gdlm_hold_lvb(lm_lock_t *, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t *' should also have an identifier name
#1991: FILE: fs/gfs2/locking/dlm/lock_dlm.h:174:
+void gdlm_unhold_lvb(lm_lock_t *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1991: FILE: fs/gfs2/locking/dlm/lock_dlm.h:174:
+void gdlm_unhold_lvb(lm_lock_t *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lock_t *' should also have an identifier name
#1992: FILE: fs/gfs2/locking/dlm/lock_dlm.h:175:
+void gdlm_sync_lvb(lm_lock_t *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1992: FILE: fs/gfs2/locking/dlm/lock_dlm.h:175:
+void gdlm_sync_lvb(lm_lock_t *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lockspace_t *' should also have an identifier name
#1998: FILE: fs/gfs2/locking/dlm/lock_dlm.h:181:
+int gdlm_plock(lm_lockspace_t *, struct lm_lockname *, struct file *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lm_lockname *' should also have an identifier name
#1998: FILE: fs/gfs2/locking/dlm/lock_dlm.h:181:
+int gdlm_plock(lm_lockspace_t *, struct lm_lockname *, struct file *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1998: FILE: fs/gfs2/locking/dlm/lock_dlm.h:181:
+int gdlm_plock(lm_lockspace_t *, struct lm_lockname *, struct file *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1998: FILE: fs/gfs2/locking/dlm/lock_dlm.h:181:
+int gdlm_plock(lm_lockspace_t *, struct lm_lockname *, struct file *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#1998: FILE: fs/gfs2/locking/dlm/lock_dlm.h:181:
+int gdlm_plock(lm_lockspace_t *, struct lm_lockname *, struct file *, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1999: FILE: fs/gfs2/locking/dlm/lock_dlm.h:182:
+int gdlm_plock(lm_lockspace_t *, struct lm_lockname *, struct file *, int,
+		struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lockspace_t *' should also have an identifier name
#2000: FILE: fs/gfs2/locking/dlm/lock_dlm.h:183:
+int gdlm_plock_get(lm_lockspace_t *, struct lm_lockname *, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lm_lockname *' should also have an identifier name
#2000: FILE: fs/gfs2/locking/dlm/lock_dlm.h:183:
+int gdlm_plock_get(lm_lockspace_t *, struct lm_lockname *, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2000: FILE: fs/gfs2/locking/dlm/lock_dlm.h:183:
+int gdlm_plock_get(lm_lockspace_t *, struct lm_lockname *, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#2000: FILE: fs/gfs2/locking/dlm/lock_dlm.h:183:
+int gdlm_plock_get(lm_lockspace_t *, struct lm_lockname *, struct file *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2001: FILE: fs/gfs2/locking/dlm/lock_dlm.h:184:
+int gdlm_plock_get(lm_lockspace_t *, struct lm_lockname *, struct file *,
+		struct file_lock *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'lm_lockspace_t *' should also have an identifier name
#2002: FILE: fs/gfs2/locking/dlm/lock_dlm.h:185:
+int gdlm_punlock(lm_lockspace_t *, struct lm_lockname *, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lm_lockname *' should also have an identifier name
#2002: FILE: fs/gfs2/locking/dlm/lock_dlm.h:185:
+int gdlm_punlock(lm_lockspace_t *, struct lm_lockname *, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2002: FILE: fs/gfs2/locking/dlm/lock_dlm.h:185:
+int gdlm_punlock(lm_lockspace_t *, struct lm_lockname *, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_lock *' should also have an identifier name
#2002: FILE: fs/gfs2/locking/dlm/lock_dlm.h:185:
+int gdlm_punlock(lm_lockspace_t *, struct lm_lockname *, struct file *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2003: FILE: fs/gfs2/locking/dlm/lock_dlm.h:186:
+int gdlm_punlock(lm_lockspace_t *, struct lm_lockname *, struct file *,
+		struct file_lock *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2015: FILE: include/linux/lock_dlm_plock.h:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042277.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 124 warnings, 53 checks, 1979 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042277.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
