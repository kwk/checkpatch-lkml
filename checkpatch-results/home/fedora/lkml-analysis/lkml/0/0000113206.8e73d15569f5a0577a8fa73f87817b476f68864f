WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
diff -urN --exclude-from=/tmp/excl28370 linux-2.6.16-rc1.orig/perfmon/perfmon_dfl_smpl.c linux-2.6.16-rc1/perfmon/perfmon_dfl_smpl.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: perfmon/perfmon_dfl_smpl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#90: FILE: perfmon/perfmon_dfl_smpl.c:34:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: perfmon/perfmon_dfl_smpl.c:44:
+^I             + (sizeof(pfm_dfl_smpl_entry_t)+(npmds*sizeof(u64)));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#100: FILE: perfmon/perfmon_dfl_smpl.c:44:
+	             + (sizeof(pfm_dfl_smpl_entry_t)+(npmds*sizeof(u64)));
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#100: FILE: perfmon/perfmon_dfl_smpl.c:44:
+	             + (sizeof(pfm_dfl_smpl_entry_t)+(npmds*sizeof(u64)));
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: perfmon/perfmon_dfl_smpl.c:86:
+	hdr->hdr_min_buf_space = sizeof(pfm_dfl_smpl_entry_t)+(npmds*sizeof(u64));
 	                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#142: FILE: perfmon/perfmon_dfl_smpl.c:86:
+	hdr->hdr_min_buf_space = sizeof(pfm_dfl_smpl_entry_t)+(npmds*sizeof(u64));
 	                                                            ^

WARNING:SPLIT_STRING: quoted string split across lines
#145: FILE: perfmon/perfmon_dfl_smpl.c:89:
+	DPRINT(("buffer=%p buf_size=%zu hdr_size=%zu hdr_version=%u.%u "
+		"min_space=%zu npmds=%u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#168: FILE: perfmon/perfmon_dfl_smpl.c:112:
+	cur = buf+hdr->hdr_cur_offs;
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#169: FILE: perfmon/perfmon_dfl_smpl.c:113:
+	last = buf+hdr->hdr_buf_size;
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: perfmon/perfmon_dfl_smpl.c:132:
+	e = (u64 *)(ent+1);
 	               ^

WARNING:SPLIT_STRING: quoted string split across lines
#193: FILE: perfmon/perfmon_dfl_smpl.c:137:
+	DPRINT_ovfl(("count=%zu cur=%p last=%p free_bytes=%zu ovfl_pmd=%d "
+		     "npmds=%u\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#196: FILE: perfmon/perfmon_dfl_smpl.c:140:
+		     (last-cur),
 		          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: perfmon/perfmon_dfl_smpl.c:148:
+^I * ^I- this is usually the task being monitored.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: perfmon/perfmon_dfl_smpl.c:149:
+^I * ^I  Under certain conditions, it might be a different task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#208: FILE: perfmon/perfmon_dfl_smpl.c:152:
+^I * ^I- this is not necessarily the task controlling the session$

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: perfmon/perfmon_dfl_smpl.c:173:
+		u64 *val = arg->smpl_pmds_values;
+		for(i=0; i < npmds; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#229: FILE: perfmon/perfmon_dfl_smpl.c:173:
+		for(i=0; i < npmds; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#229: FILE: perfmon/perfmon_dfl_smpl.c:173:
+		for(i=0; i < npmds; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#229: FILE: perfmon/perfmon_dfl_smpl.c:173:
+		for(i=0; i < npmds; i++) {
+			*e++ = *val++;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: perfmon/perfmon_dfl_smpl.c:196:
+	DPRINT_ovfl(("sampling buffer full free=%zu, count=%zu\n",
+			last-cur,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#252: FILE: perfmon/perfmon_dfl_smpl.c:196:
+			last-cur,
 			    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#266: FILE: perfmon/perfmon_dfl_smpl.c:210:
+	arg->ovfl_ctrl = PFM_OVFL_CTRL_NOTIFY| PFM_OVFL_CTRL_MASK;
 	                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#290: FILE: perfmon/perfmon_dfl_smpl.c:234:
+static struct pfm_smpl_fmt dfl_fmt={
                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: perfmon/perfmon_dfl_smpl.c:235:
+ ^I.fmt_name = "default_format2",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: perfmon/perfmon_dfl_smpl.c:235:
+ ^I.fmt_name = "default_format2",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: perfmon/perfmon_dfl_smpl.c:235:
+ ^I.fmt_name = "default_format2",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: perfmon/perfmon_dfl_smpl.c:236:
+ ^I.fmt_uuid = PFM_DFL_SMPL_UUID,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: perfmon/perfmon_dfl_smpl.c:236:
+ ^I.fmt_uuid = PFM_DFL_SMPL_UUID,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: perfmon/perfmon_dfl_smpl.c:236:
+ ^I.fmt_uuid = PFM_DFL_SMPL_UUID,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: perfmon/perfmon_dfl_smpl.c:237:
+ ^I.fmt_arg_size = sizeof(pfm_dfl_smpl_arg_t),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: perfmon/perfmon_dfl_smpl.c:237:
+ ^I.fmt_arg_size = sizeof(pfm_dfl_smpl_arg_t),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: perfmon/perfmon_dfl_smpl.c:237:
+ ^I.fmt_arg_size = sizeof(pfm_dfl_smpl_arg_t),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: perfmon/perfmon_dfl_smpl.c:238:
+ ^I.fmt_validate = pfm_dfl_fmt_validate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: perfmon/perfmon_dfl_smpl.c:238:
+ ^I.fmt_validate = pfm_dfl_fmt_validate,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: perfmon/perfmon_dfl_smpl.c:238:
+ ^I.fmt_validate = pfm_dfl_fmt_validate,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: perfmon/perfmon_dfl_smpl.c:239:
+ ^I.fmt_getsize = pfm_dfl_fmt_get_size,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: perfmon/perfmon_dfl_smpl.c:239:
+ ^I.fmt_getsize = pfm_dfl_fmt_get_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: perfmon/perfmon_dfl_smpl.c:239:
+ ^I.fmt_getsize = pfm_dfl_fmt_get_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: perfmon/perfmon_dfl_smpl.c:240:
+ ^I.fmt_init = pfm_dfl_fmt_init,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: perfmon/perfmon_dfl_smpl.c:240:
+ ^I.fmt_init = pfm_dfl_fmt_init,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: perfmon/perfmon_dfl_smpl.c:240:
+ ^I.fmt_init = pfm_dfl_fmt_init,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: perfmon/perfmon_dfl_smpl.c:241:
+ ^I.fmt_handler = pfm_dfl_fmt_handler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#297: FILE: perfmon/perfmon_dfl_smpl.c:241:
+ ^I.fmt_handler = pfm_dfl_fmt_handler,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: perfmon/perfmon_dfl_smpl.c:241:
+ ^I.fmt_handler = pfm_dfl_fmt_handler,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: perfmon/perfmon_dfl_smpl.c:242:
+ ^I.fmt_restart = pfm_dfl_fmt_restart,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: perfmon/perfmon_dfl_smpl.c:242:
+ ^I.fmt_restart = pfm_dfl_fmt_restart,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: perfmon/perfmon_dfl_smpl.c:242:
+ ^I.fmt_restart = pfm_dfl_fmt_restart,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: perfmon/perfmon_dfl_smpl.c:243:
+ ^I.fmt_exit = pfm_dfl_fmt_exit,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: perfmon/perfmon_dfl_smpl.c:243:
+ ^I.fmt_exit = pfm_dfl_fmt_exit,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: perfmon/perfmon_dfl_smpl.c:243:
+ ^I.fmt_exit = pfm_dfl_fmt_exit,$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#306: FILE: perfmon/perfmon_dfl_smpl.c:250:
+	printk("fmt_flags=0x%x\n", dfl_fmt.fmt_flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#321: FILE: perfmon/perfmon_file.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#342: FILE: perfmon/perfmon_file.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#355: FILE: perfmon/perfmon_file.c:35:
+static struct file_operations pfm_file_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#362: FILE: perfmon/perfmon_file.c:42:
+static struct dentry_operations pfmfs_dentry_operations = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#366: FILE: perfmon/perfmon_file.c:46:
+int pfm_is_fd(struct file *filp)
                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#386: FILE: perfmon/perfmon_file.c:66:
+	msg = ctx->ctx_msgq+ctx->ctx_msgq_head;
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#391: FILE: perfmon/perfmon_file.c:71:
+	ctx->ctx_msgq_head = (ctx->ctx_msgq_head+1) % PFM_MAX_MSGS;
 	                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#411: FILE: perfmon/perfmon_file.c:91:
+	if (ctx == NULL) {

CHECK:SPACING: No space is necessary after a cast
#417: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#417: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < (unsigned long) vma->vm_start'
#417: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + size)) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: perfmon/perfmon_file.c:98:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + size)) )

CHECK:SPACING: No space is necessary after a cast
#418: FILE: perfmon/perfmon_file.c:98:
+	     (address > (unsigned long) (vma->vm_start + size)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#418: FILE: perfmon/perfmon_file.c:98:
+	     (address > (unsigned long) (vma->vm_start + size)) )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kaddr"
#443: FILE: perfmon/perfmon_file.c:123:
+	if (kaddr == NULL) {

CHECK:SPACING: No space is necessary after a cast
#448: FILE: perfmon/perfmon_file.c:128:
+	if ( (address < (unsigned long) vma->vm_start) ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#448: FILE: perfmon/perfmon_file.c:128:
+	if ( (address < (unsigned long) vma->vm_start) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < (unsigned long) vma->vm_start'
#448: FILE: perfmon/perfmon_file.c:128:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: perfmon/perfmon_file.c:129:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:SPACING: No space is necessary after a cast
#449: FILE: perfmon/perfmon_file.c:129:
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#449: FILE: perfmon/perfmon_file.c:129:
+	     (address > (unsigned long) (vma->vm_start + PAGE_SIZE)) )

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#467: FILE: perfmon/perfmon_file.c:147:
+struct vm_operations_struct pfm_buf_map_vm_ops = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#471: FILE: perfmon/perfmon_file.c:151:
+struct vm_operations_struct pfm_view_map_vm_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#475: FILE: perfmon/perfmon_file.c:155:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#485: FILE: perfmon/perfmon_file.c:165:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#489: FILE: perfmon/perfmon_file.c:169:
+	if (ctx == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#507: FILE: perfmon/perfmon_file.c:187:
+	if (vma->vm_pgoff == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx->ctx_smpl_addr"
#508: FILE: perfmon/perfmon_file.c:188:
+		if (ctx->ctx_smpl_addr == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#530: FILE: perfmon/perfmon_file.c:210:
+		if (vma->vm_pgoff < PFM_SET_REMAP_OFFS
+		    || vma->vm_pgoff >= PFM_SET_REMAP_OFFS_MAX) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#542: FILE: perfmon/perfmon_file.c:222:
+		if (set == NULL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#559: FILE: perfmon/perfmon_file.c:239:
+		vma->vm_end-vma->vm_start));
 		           ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#566: FILE: perfmon/perfmon_file.c:246:
+static ssize_t pfm_read(struct file *filp, char __user *buf, size_t size,
                                      ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#566: FILE: perfmon/perfmon_file.c:246:
+}
+static ssize_t pfm_read(struct file *filp, char __user *buf, size_t size,

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: perfmon/perfmon_file.c:253:
+  ^IDECLARE_WAITQUEUE(wait, current);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#573: FILE: perfmon/perfmon_file.c:253:
+  ^IDECLARE_WAITQUEUE(wait, current);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: perfmon/perfmon_file.c:253:
+  ^IDECLARE_WAITQUEUE(wait, current);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#576: FILE: perfmon/perfmon_file.c:256:
+	if (ctx == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: perfmon/perfmon_file.c:257:
+		printk(KERN_ERR "perfmon: no ctx for pfm_read\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_read', this function's name, in a string
#577: FILE: perfmon/perfmon_file.c:257:
+		printk(KERN_ERR "perfmon: no ctx for pfm_read\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#603: FILE: perfmon/perfmon_file.c:283:
+	if(PFM_CTXQ_EMPTY(ctx) == 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: perfmon/perfmon_file.c:285:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: perfmon/perfmon_file.c:294:
+      ^Iret = -EAGAIN;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#614: FILE: perfmon/perfmon_file.c:294:
+      ^Iret = -EAGAIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: perfmon/perfmon_file.c:294:
+      ^Iret = -EAGAIN;$

ERROR:SPACING: space required before the open parenthesis '('
#615: FILE: perfmon/perfmon_file.c:295:
+	if(filp->f_flags & O_NONBLOCK)

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: perfmon/perfmon_file.c:298:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#618: FILE: perfmon/perfmon_file.c:298:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: perfmon/perfmon_file.c:298:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: perfmon/perfmon_file.c:301:
+  ^Iadd_wait_queue(&ctx->ctx_msgq_wait, &wait);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#621: FILE: perfmon/perfmon_file.c:301:
+  ^Iadd_wait_queue(&ctx->ctx_msgq_wait, &wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: perfmon/perfmon_file.c:301:
+  ^Iadd_wait_queue(&ctx->ctx_msgq_wait, &wait);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: perfmon/perfmon_file.c:303:
+  ^Ifor (;;) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#623: FILE: perfmon/perfmon_file.c:303:
+  ^Ifor (;;) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: perfmon/perfmon_file.c:303:
+  ^Ifor (;;) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: perfmon/perfmon_file.c:307:
+  ^I^Iset_current_state(TASK_INTERRUPTIBLE);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#627: FILE: perfmon/perfmon_file.c:307:
+  ^I^Iset_current_state(TASK_INTERRUPTIBLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: perfmon/perfmon_file.c:307:
+  ^I^Iset_current_state(TASK_INTERRUPTIBLE);$

ERROR:SPACING: space required before the open parenthesis '('
#639: FILE: perfmon/perfmon_file.c:319:
+		if(signal_pending(current))

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: perfmon/perfmon_file.c:322:
+      ^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#642: FILE: perfmon/perfmon_file.c:322:
+      ^I^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: perfmon/perfmon_file.c:322:
+      ^I^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: perfmon/perfmon_file.c:325:
+      ^I^Ischedule();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#645: FILE: perfmon/perfmon_file.c:325:
+      ^I^Ischedule();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: perfmon/perfmon_file.c:325:
+      ^I^Ischedule();$

ERROR:SPACING: space required before the open parenthesis '('
#650: FILE: perfmon/perfmon_file.c:330:
+		if(PFM_CTXQ_EMPTY(ctx) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: perfmon/perfmon_file.c:334:
+  ^Iset_current_state(TASK_RUNNING);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#654: FILE: perfmon/perfmon_file.c:334:
+  ^Iset_current_state(TASK_RUNNING);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: perfmon/perfmon_file.c:334:
+  ^Iset_current_state(TASK_RUNNING);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#672: FILE: perfmon/perfmon_file.c:352:
+	if (unlikely(msg == NULL))

ERROR:CODE_INDENT: code indent should use tabs where possible
#694: FILE: perfmon/perfmon_file.c:374:
+  ^Iif(copy_to_user(buf, &msg_buf, size))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#694: FILE: perfmon/perfmon_file.c:374:
+  ^Iif(copy_to_user(buf, &msg_buf, size))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: perfmon/perfmon_file.c:374:
+  ^Iif(copy_to_user(buf, &msg_buf, size))$

ERROR:SPACING: space required before the open parenthesis '('
#694: FILE: perfmon/perfmon_file.c:374:
+  	if(copy_to_user(buf, &msg_buf, size))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: perfmon/perfmon_file.c:381:
+static ssize_t pfm_write(struct file *file, const char __user *ubuf,
+			  size_t size, loff_t *ppos)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_write', this function's name, in a string
#703: FILE: perfmon/perfmon_file.c:383:
+	DPRINT(("pfm_write called\n"));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#707: FILE: perfmon/perfmon_file.c:387:
+static unsigned int pfm_poll(struct file *filp, poll_table * wait)
                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#707: FILE: perfmon/perfmon_file.c:387:
+static unsigned int pfm_poll(struct file *filp, poll_table * wait)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#714: FILE: perfmon/perfmon_file.c:394:
+		printk(KERN_ERR "perfmon: pfm_poll bad magic\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_poll', this function's name, in a string
#714: FILE: perfmon/perfmon_file.c:394:
+		printk(KERN_ERR "perfmon: pfm_poll bad magic\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#719: FILE: perfmon/perfmon_file.c:399:
+	if (ctx == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#720: FILE: perfmon/perfmon_file.c:400:
+		printk(KERN_ERR "perfmon: pfm_poll no ctx\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_poll', this function's name, in a string
#720: FILE: perfmon/perfmon_file.c:400:
+		printk(KERN_ERR "perfmon: pfm_poll no ctx\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#724: FILE: perfmon/perfmon_file.c:404:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#727: FILE: perfmon/perfmon_file.c:407:
+	poll_wait(filp, &ctx->ctx_msgq_wait, wait);
 	          ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#742: FILE: perfmon/perfmon_file.c:422:
+^I  ^I     unsigned long arg)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#742: FILE: perfmon/perfmon_file.c:422:
+^I  ^I     unsigned long arg)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: perfmon/perfmon_file.c:422:
+static int pfm_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+	  	     unsigned long arg)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_ioctl', this function's name, in a string
#744: FILE: perfmon/perfmon_file.c:424:
+	DPRINT(("pfm_ioctl called\n"));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#751: FILE: perfmon/perfmon_file.c:431:
+static inline int __pfm_fasync(int fd, struct file *filp,
                                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#756: FILE: perfmon/perfmon_file.c:436:
+	ret = fasync_helper (fd, filp, on, &ctx->ctx_async_queue);
 	                         ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#756: FILE: perfmon/perfmon_file.c:436:
+	ret = fasync_helper (fd, filp, on, &ctx->ctx_async_queue);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#766: FILE: perfmon/perfmon_file.c:446:
+static int pfm_fasync(int fd, struct file *filp, int on)
                                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#772: FILE: perfmon/perfmon_file.c:452:
+	if (ctx == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#773: FILE: perfmon/perfmon_file.c:453:
+		printk(KERN_ERR "perfmon: pfm_fasync no ctx\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_fasync', this function's name, in a string
#773: FILE: perfmon/perfmon_file.c:453:
+		printk(KERN_ERR "perfmon: pfm_fasync no ctx\n");

WARNING:TYPO_SPELLING: 'avalaible' may be misspelled - perhaps 'available'?
#779: FILE: perfmon/perfmon_file.c:459:
+	 * may go to sleep if memory is not readily avalaible.
 	                                            ^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'may'
#779: FILE: perfmon/perfmon_file.c:459:
+	 * we cannot mask interrupts during this call because this may
+	 * may go to sleep if memory is not readily avalaible.

WARNING:TYPO_SPELLING: 'conetxt' may be misspelled - perhaps 'context'?
#781: FILE: perfmon/perfmon_file.c:461:
+	 * We are protected from the conetxt disappearing by the
 	                             ^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#785: FILE: perfmon/perfmon_file.c:465:
+	ret = __pfm_fasync(fd, filp, ctx, on);
 	                       ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_fasync', this function's name, in a string
#787: FILE: perfmon/perfmon_file.c:467:
+	DPRINT(("pfm_fasync called on fd=%d on=%d async_queue=%p ret=%d\n",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#810: FILE: perfmon/perfmon_file.c:490:
+static int pfm_close(struct inode *inode, struct file *filp)
                                                        ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_close', this function's name, in a string
#818: FILE: perfmon/perfmon_file.c:498:
+	DPRINT(("pfm_close called private=%p\n", filp->private_data));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#821: FILE: perfmon/perfmon_file.c:501:
+	if (ctx == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#822: FILE: perfmon/perfmon_file.c:502:
+		printk(KERN_ERR "perfmon: pfm_close no ctx\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_close', this function's name, in a string
#822: FILE: perfmon/perfmon_file.c:502:
+		printk(KERN_ERR "perfmon: pfm_close no ctx\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#838: FILE: perfmon/perfmon_file.c:518:
+	if (task == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#856: FILE: perfmon/perfmon_file.c:536:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#860: FILE: perfmon/perfmon_file.c:540:
+^I ^I * We need to release the resource on the ORIGINAL cpu.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: perfmon/perfmon_file.c:540:
+^I ^I * We need to release the resource on the ORIGINAL cpu.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#861: FILE: perfmon/perfmon_file.c:541:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#861: FILE: perfmon/perfmon_file.c:541:
+^I ^I */$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#863: FILE: perfmon/perfmon_file.c:543:
+		if (ctx->ctx_cpu != smp_processor_id()) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#890: FILE: perfmon/perfmon_file.c:570:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#893: FILE: perfmon/perfmon_file.c:573:
+^I^I ^I* force task to wake up from MASKED state$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#893: FILE: perfmon/perfmon_file.c:573:
+^I^I ^I* force task to wake up from MASKED state$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#893: FILE: perfmon/perfmon_file.c:573:
+			/*
+		 	* force task to wake up from MASKED state

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: perfmon/perfmon_file.c:574:
+^I^I ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#894: FILE: perfmon/perfmon_file.c:574:
+^I^I ^I*/$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#903: FILE: perfmon/perfmon_file.c:583:
+		free_possible = can_unload = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#906: FILE: perfmon/perfmon_file.c:586:
+	if (can_unload)	__pfm_unload_context(ctx);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#916: FILE: perfmon/perfmon_file.c:596:
+	if (state == PFM_CTX_ZOMBIE) {
+		pfm_release_session(ctx, ctx->ctx_cpu);
+	}

WARNING:TYPO_SPELLING: 'unreacheable' may be misspelled - perhaps 'unreachable'?
#927: FILE: perfmon/perfmon_file.c:607:
+	 * if we free on the spot, the context is now completely unreacheable
 	                                                         ^^^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#956: FILE: perfmon/perfmon_file.c:636:
+ * ^I- remove virtual mapping for sampling buffer$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#957: FILE: perfmon/perfmon_file.c:637:
+ * ^I- remove from fasync queue$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#959: FILE: perfmon/perfmon_file.c:639:
+static int pfm_flush(struct file *filp)
                                   ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#964: FILE: perfmon/perfmon_file.c:644:
+	if (ctx == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#965: FILE: perfmon/perfmon_file.c:645:
+		printk(KERN_ERR "perfmon: pfm_flush no ctx\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_flush', this function's name, in a string
#965: FILE: perfmon/perfmon_file.c:645:
+		printk(KERN_ERR "perfmon: pfm_flush no ctx\n");

WARNING:TYPO_SPELLING: 'unreacheable' may be misspelled - perhaps 'unreachable'?
#972: FILE: perfmon/perfmon_file.c:652:
+	 * here when the context has become unreacheable by other tasks.
 	                                    ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#984: FILE: perfmon/perfmon_file.c:664:
+		__pfm_fasync (-1, filp, ctx, 0);
 		                  ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#984: FILE: perfmon/perfmon_file.c:664:
+		__pfm_fasync (-1, filp, ctx, 0);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#989: FILE: perfmon/perfmon_file.c:669:
+static struct file_operations pfm_file_ops = {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#998: FILE: perfmon/perfmon_file.c:678:
+	.flush= pfm_flush,
 	      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1002: FILE: perfmon/perfmon_file.c:682:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1017: FILE: perfmon/perfmon_file.c:697:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1029: FILE: perfmon/perfmon_file.c:709:
+	int err = register_filesystem(&pfm_fs_type);
+	if (!err) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1050: FILE: perfmon/perfmon_file.c:730:
+	struct inode * inode;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1074: FILE: perfmon/perfmon_file.c:754:
+	inode->i_mode = S_IFCHR|S_IRUGO;
 	                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1074: FILE: perfmon/perfmon_file.c:754:
+	inode->i_mode = S_IFCHR|S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1116: FILE: perfmon/perfmon_fmt.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1137: FILE: perfmon/perfmon_fmt.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1156: FILE: perfmon/perfmon_fmt.c:41:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1164: FILE: perfmon/perfmon_fmt.c:49:
+	struct list_head * pos;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1165: FILE: perfmon/perfmon_fmt.c:50:
+	struct pfm_smpl_fmt * entry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1180: FILE: perfmon/perfmon_fmt.c:65:
+	struct pfm_smpl_fmt * fmt;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt"
#1199: FILE: perfmon/perfmon_fmt.c:84:
+	if (fmt == NULL || fmt_is_mod(fmt) == 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1201: FILE: perfmon/perfmon_fmt.c:86:
+	BUG_ON(fmt->owner == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->owner"
#1201: FILE: perfmon/perfmon_fmt.c:86:
+	BUG_ON(fmt->owner == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt"
#1213: FILE: perfmon/perfmon_fmt.c:98:
+	if (fmt == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1214: FILE: perfmon/perfmon_fmt.c:99:
+		printk(KERN_INFO"perfmon: NULL format for register\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1214: FILE: perfmon/perfmon_fmt.c:99:
+		printk(KERN_INFO"perfmon: NULL format for register\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->fmt_name"
#1218: FILE: perfmon/perfmon_fmt.c:103:
+	if (fmt->fmt_name == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1219: FILE: perfmon/perfmon_fmt.c:104:
+		printk(KERN_INFO"perfmon: format has no name\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1219: FILE: perfmon/perfmon_fmt.c:104:
+		printk(KERN_INFO"perfmon: format has no name\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1223: FILE: perfmon/perfmon_fmt.c:108:
+		printk(KERN_INFO"perfmon: format %s has null uuid\n", fmt->fmt_name);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1223: FILE: perfmon/perfmon_fmt.c:108:
+		printk(KERN_INFO"perfmon: format %s has null uuid\n", fmt->fmt_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1228: FILE: perfmon/perfmon_fmt.c:113:
+		printk(KERN_INFO"perfmon: format %s requires %u msg queue depth (max %d)\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1228: FILE: perfmon/perfmon_fmt.c:113:
+		printk(KERN_INFO"perfmon: format %s requires %u msg queue depth (max %d)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->owner"
#1239: FILE: perfmon/perfmon_fmt.c:124:
+	if (fmt->owner == NULL && fmt_is_mod(fmt)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1240: FILE: perfmon/perfmon_fmt.c:125:
+		printk(KERN_INFO"perfmon: format %s has no module owner\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1240: FILE: perfmon/perfmon_fmt.c:125:
+		printk(KERN_INFO"perfmon: format %s has no module owner\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->fmt_handler"
#1247: FILE: perfmon/perfmon_fmt.c:132:
+	if (fmt->fmt_handler == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1248: FILE: perfmon/perfmon_fmt.c:133:
+		printk(KERN_INFO"perfmon: format %s has no handler\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1248: FILE: perfmon/perfmon_fmt.c:133:
+		printk(KERN_INFO"perfmon: format %s has no handler\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1257: FILE: perfmon/perfmon_fmt.c:142:
+		printk(KERN_INFO"perfmon: format %s arguments too big\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1257: FILE: perfmon/perfmon_fmt.c:142:
+		printk(KERN_INFO"perfmon: format %s arguments too big\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1265: FILE: perfmon/perfmon_fmt.c:150:
+		printk(KERN_INFO"perfmon: duplicate sampling format %s\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1265: FILE: perfmon/perfmon_fmt.c:150:
+		printk(KERN_INFO"perfmon: duplicate sampling format %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1272: FILE: perfmon/perfmon_fmt.c:157:
+	printk(KERN_INFO "perfmon: added sampling format %s\n", fmt->fmt_name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1276: FILE: perfmon/perfmon_fmt.c:161:
+ ^Ireturn ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1276: FILE: perfmon/perfmon_fmt.c:161:
+ ^Ireturn ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: perfmon/perfmon_fmt.c:161:
+ ^Ireturn ret;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1289: FILE: perfmon/perfmon_fmt.c:174:
+		printk(KERN_INFO"perfmon: unregister failed, unknown format\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1289: FILE: perfmon/perfmon_fmt.c:174:
+		printk(KERN_INFO"perfmon: unregister failed, unknown format\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1295: FILE: perfmon/perfmon_fmt.c:180:
+	printk(KERN_INFO"perfmon: removed sampling format: %s\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1295: FILE: perfmon/perfmon_fmt.c:180:
+	printk(KERN_INFO"perfmon: removed sampling format: %s\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1302: FILE: perfmon/perfmon_fmt.c:187:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1307: FILE: perfmon/perfmon_fmt.c:192:
+	struct list_head * pos;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1308: FILE: perfmon/perfmon_fmt.c:193:
+	struct pfm_smpl_fmt * entry;

WARNING:SPLIT_STRING: quoted string split across lines
#1315: FILE: perfmon/perfmon_fmt.c:200:
+		seq_printf(m, "format                     : "
+			   "%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x"

WARNING:SPLIT_STRING: quoted string split across lines
#1316: FILE: perfmon/perfmon_fmt.c:201:
+			   "%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x"
+			   "-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x %s\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1342: FILE: perfmon/perfmon_intr.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1363: FILE: perfmon/perfmon_intr.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1418: FILE: perfmon/perfmon_intr.c:77:
+	num_ovfl = num_ovfl_orig = set->set_npend_ovfls;

WARNING:SPLIT_STRING: quoted string split across lines
#1425: FILE: perfmon/perfmon_intr.c:84:
+	DPRINT_ovfl(("ovfl_pmds=0x%lx ip=%p, blocking=%d "
+		     "u_pmds=0x%lx use_fmt=%u\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hdr"
#1430: FILE: perfmon/perfmon_intr.c:89:
+			hdr != NULL));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1473: FILE: perfmon/perfmon_intr.c:132:
+		old_val = new_val = pmds[i];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1487: FILE: perfmon/perfmon_intr.c:146:
+		if (likely(old_val > new_val)) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#1508: FILE: perfmon/perfmon_intr.c:167:
+		DPRINT_ovfl(("pmd%u=0x%llx old_val=0x%llx "
+			     "hw_pmd=0x%llx o_pmds=0x%lx "

WARNING:SPLIT_STRING: quoted string split across lines
#1509: FILE: perfmon/perfmon_intr.c:168:
+			     "hw_pmd=0x%llx o_pmds=0x%lx "
+			     "must_switch=%u o_thres=%llu o_thres_ref=%llu\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1573: FILE: perfmon/perfmon_intr.c:232:
+		for (i = first_cnt_pmd; num_ovfl && ret == 0; i++) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1586: FILE: perfmon/perfmon_intr.c:245:
+^I^I ^I * copy values of pmds of interest.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1586: FILE: perfmon/perfmon_intr.c:245:
+^I^I ^I * copy values of pmds of interest.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1589: FILE: perfmon/perfmon_intr.c:248:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1589: FILE: perfmon/perfmon_intr.c:248:
+^I^I ^I */$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1593: FILE: perfmon/perfmon_intr.c:252:
+			if (bitmap_empty(smpl_pmds, max_pmd) == 0) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1595: FILE: perfmon/perfmon_intr.c:254:
+				for (j = 0; j < max_pmd; j++) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1620: FILE: perfmon/perfmon_intr.c:279:
+^I^I ^I * call custom buffer format record (handler) routine$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1620: FILE: perfmon/perfmon_intr.c:279:
+^I^I ^I * call custom buffer format record (handler) routine$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1621: FILE: perfmon/perfmon_intr.c:280:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1621: FILE: perfmon/perfmon_intr.c:280:
+^I^I ^I */$

WARNING:REPEATED_WORD: Possible repeated word: 'may'
#1639: FILE: perfmon/perfmon_intr.c:298:
+			 * status. It may may deferred until pfm_restart().

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1642: FILE: perfmon/perfmon_intr.c:301:
+				   & (PFM_OVFL_CTRL_NOTIFY|PFM_OVFL_CTRL_MASK);
 				                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1651: FILE: perfmon/perfmon_intr.c:310:
+		if (ret) {
+			DPRINT_ovfl(("handler aborted at PMD%u ret=%d\n", i, ret));
+		}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1658: FILE: perfmon/perfmon_intr.c:317:
+^I^I * ^I- mask monitoring$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1659: FILE: perfmon/perfmon_intr.c:318:
+^I^I * ^I- notify user if requested$

WARNING:SPLIT_STRING: quoted string split across lines
#1674: FILE: perfmon/perfmon_intr.c:333:
+	DPRINT_ovfl(("o_notify=0x%lx o_pmds=0x%lx "
+		     "r_pmds=0x%lx "

WARNING:SPLIT_STRING: quoted string split across lines
#1675: FILE: perfmon/perfmon_intr.c:334:
+		     "r_pmds=0x%lx "
+		     "masking=%d notify=%d\n",

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#1680: FILE: perfmon/perfmon_intr.c:339:
+		(ovfl_ctrl & PFM_OVFL_CTRL_NOTIFY)!= 0));
 		                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1689: FILE: perfmon/perfmon_intr.c:348:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1689: FILE: perfmon/perfmon_intr.c:348:
+^I ^I */$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1690: FILE: perfmon/perfmon_intr.c:349:
+		if (must_switch) {
[...]
+		} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1698: FILE: perfmon/perfmon_intr.c:357:
+^I^I ^I * update our view of the active set$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1698: FILE: perfmon/perfmon_intr.c:357:
+^I^I ^I * update our view of the active set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1699: FILE: perfmon/perfmon_intr.c:358:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1699: FILE: perfmon/perfmon_intr.c:358:
+^I^I ^I */$

CHECK:BRACES: Unbalanced braces around else statement
#1703: FILE: perfmon/perfmon_intr.c:362:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#1763: FILE: perfmon/perfmon_intr.c:422:
+	if (unlikely(ctx == NULL))

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1792: FILE: perfmon/perfmon_intr.c:451:
+		DPRINT_ovfl(("task is [%d]\n", task ? task->pid: -1));
 		                                               ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1830: FILE: perfmon/perfmon_intr.c:489:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1884: FILE: perfmon/perfmon_intr.c:543:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1889: FILE: perfmon/perfmon_pmu.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1910: FILE: perfmon/perfmon_pmu.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg"
#1937: FILE: perfmon/perfmon_pmu.c:49:
+	if (cfg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmu_name"
#1940: FILE: perfmon/perfmon_pmu.c:52:
+	if (cfg->pmu_name == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1941: FILE: perfmon/perfmon_pmu.c:53:
+		printk(KERN_INFO "pmu configuration has no name\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1946: FILE: perfmon/perfmon_pmu.c:58:
+		printk(KERN_INFO "perfmon: pmu config %s, zero width cntrs\n",

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1961: FILE: perfmon/perfmon_pmu.c:73:
+	bitmap_zero(cfg->cnt_pmds , PFM_MAX_PMDS);
 	                          ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1964: FILE: perfmon/perfmon_pmu.c:76:
+	max1 = max2 = -1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1966: FILE: perfmon/perfmon_pmu.c:78:
+	for (i = 0; PMC_IS_LAST(cfg, i) == 0;  i++) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1976: FILE: perfmon/perfmon_pmu.c:88:
+		printk(KERN_ERR"%s PMU description has no PMC registers\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1976: FILE: perfmon/perfmon_pmu.c:88:
+		printk(KERN_ERR"%s PMU description has no PMC registers\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1977: FILE: perfmon/perfmon_pmu.c:89:
+		printk(KERN_ERR"%s PMU description has no PMC registers\n",
+			cfg->pmu_name);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1984: FILE: perfmon/perfmon_pmu.c:96:
+	n = n_counters = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1985: FILE: perfmon/perfmon_pmu.c:97:
+	max1 = max2 = max3 = first_cnt = first_i = -1;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1987: FILE: perfmon/perfmon_pmu.c:99:
+	for (i = 0; PMD_IS_LAST(cfg, i) == 0;  i++) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2022: FILE: perfmon/perfmon_pmu.c:134:
+		printk(KERN_ERR"%s PMU description has no PMD registers\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2022: FILE: perfmon/perfmon_pmu.c:134:
+		printk(KERN_ERR"%s PMU description has no PMD registers\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2023: FILE: perfmon/perfmon_pmu.c:135:
+		printk(KERN_ERR"%s PMU description has no PMD registers\n",
+			cfg->pmu_name);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2032: FILE: perfmon/perfmon_pmu.c:144:
+	cfg->ovfl_mask = (PFM_ONE_64 << cfg->counter_width) -1;
 	                                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2037: FILE: perfmon/perfmon_pmu.c:149:
+		printk(KERN_ERR "perfmon: not enough pmc/pmd, disabling\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2044: FILE: perfmon/perfmon_pmu.c:156:
+	printk("perfmon: %s PMU detected, %u PMCs, %u PMDs, "

WARNING:SPLIT_STRING: quoted string split across lines
#2045: FILE: perfmon/perfmon_pmu.c:157:
+	printk("perfmon: %s PMU detected, %u PMCs, %u PMDs, "
+	       "%u counters (%u bits)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg"
#2061: FILE: perfmon/perfmon_pmu.c:173:
+	if (cfg == NULL || cfg->pmu_name == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmu_name"
#2061: FILE: perfmon/perfmon_pmu.c:173:
+	if (cfg == NULL || cfg->pmu_name == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2062: FILE: perfmon/perfmon_pmu.c:174:
+		printk(KERN_ERR "perfmon: PMU config descriptor is invalid\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->owner"
#2066: FILE: perfmon/perfmon_pmu.c:178:
+	if ((cfg->flags & PFM_PMUFL_IS_BUILTIN) == 0 && cfg->owner == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2067: FILE: perfmon/perfmon_pmu.c:179:
+		printk(KERN_ERR"perfmon: PMU config %s is missing owner\n", cfg->pmu_name);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2067: FILE: perfmon/perfmon_pmu.c:179:
+		printk(KERN_ERR"perfmon: PMU config %s is missing owner\n", cfg->pmu_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->probe_pmu"
#2072: FILE: perfmon/perfmon_pmu.c:184:
+	if (cfg->probe_pmu == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2073: FILE: perfmon/perfmon_pmu.c:185:
+		printk(KERN_ERR "perfmon: PMU config has no probe routine\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2082: FILE: perfmon/perfmon_pmu.c:194:
+			printk(KERN_ERR"perfmon: PFM_REG_V is not supported on PMCs (PMC%d)\n", i);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2082: FILE: perfmon/perfmon_pmu.c:194:
+			printk(KERN_ERR"perfmon: PFM_REG_V is not supported on PMCs (PMC%d)\n", i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2086: FILE: perfmon/perfmon_pmu.c:198:
+			printk(KERN_ERR"perfmon: PFM_REG_RO meaningless on PMCs (PMC%d)\n", i);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2086: FILE: perfmon/perfmon_pmu.c:198:
+			printk(KERN_ERR"perfmon: PFM_REG_RO meaningless on PMCs (PMC%d)\n", i);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmd_sread"
#2101: FILE: perfmon/perfmon_pmu.c:213:
+	if (nspec && (cfg->pmd_sread == NULL || cfg->pmd_swrite == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->pmd_swrite"
#2101: FILE: perfmon/perfmon_pmu.c:213:
+	if (nspec && (cfg->pmd_sread == NULL || cfg->pmd_swrite == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2102: FILE: perfmon/perfmon_pmu.c:214:
+		printk(KERN_ERR"perfmon: PMU config is missing pmd_sread()/pmd_swrite() for special PMDs\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2102: FILE: perfmon/perfmon_pmu.c:214:
+		printk(KERN_ERR"perfmon: PMU config is missing pmd_sread()/pmd_swrite() for special PMDs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2110: FILE: perfmon/perfmon_pmu.c:222:
+		printk(KERN_INFO "%s PMU detection failed\n", cfg->pmu_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg->version"
#2114: FILE: perfmon/perfmon_pmu.c:226:
+	if (cfg->version == NULL)

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2119: FILE: perfmon/perfmon_pmu.c:231:
+	if (pfm_pmu_conf && (pmu_is_module(pfm_pmu_conf) == 0 || module_refcount(pfm_pmu_conf->owner))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#2129: FILE: perfmon/perfmon_pmu.c:241:
+	if (ret)
[...]
+	else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2130: FILE: perfmon/perfmon_pmu.c:242:
+		printk(KERN_INFO "register %s PMU error %d\n", cfg->pmu_name, ret);

CHECK:BRACES: Unbalanced braces around else statement
#2131: FILE: perfmon/perfmon_pmu.c:243:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2133: FILE: perfmon/perfmon_pmu.c:245:
+		printk(KERN_INFO "%s PMU installed\n", cfg->pmu_name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2135: FILE: perfmon/perfmon_pmu.c:247:
+ ^Ireturn ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2135: FILE: perfmon/perfmon_pmu.c:247:
+ ^Ireturn ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2135: FILE: perfmon/perfmon_pmu.c:247:
+ ^Ireturn ret;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cfg"
#2151: FILE: perfmon/perfmon_pmu.c:263:
+	if (cfg == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2156: FILE: perfmon/perfmon_pmu.c:268:
+	BUG_ON(module_refcount(pfm_pmu_conf->owner));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2171: FILE: perfmon/perfmon_pmu.c:283:
+^Iif (pfm_pmu_conf == NULL $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#2171: FILE: perfmon/perfmon_pmu.c:283:
+	if (pfm_pmu_conf == NULL 

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2172: FILE: perfmon/perfmon_pmu.c:284:
+	if (pfm_pmu_conf == NULL 
+	    || (pmu_is_module(pfm_pmu_conf) && !try_module_get(pfm_pmu_conf->owner)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#2182: FILE: perfmon/perfmon_pmu.c:294:
+	if (pfm_pmu_conf == NULL || pmu_is_module(pfm_pmu_conf) == 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2195: FILE: perfmon/perfmon_pmu.c:307:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_pmu_conf"
#2202: FILE: perfmon/perfmon_pmu.c:314:
+	if (pfm_pmu_conf == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2208: FILE: perfmon/perfmon_pmu.c:320:
+	for (i = 0; PMC_IS_LAST(pfm_pmu_conf, i) == 0;  i++) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#2210: FILE: perfmon/perfmon_pmu.c:322:
+   ^I^I^Iseq_printf(m, "PMC%u:0x%llx:0x%llx:%s\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2210: FILE: perfmon/perfmon_pmu.c:322:
+   ^I^I^Iseq_printf(m, "PMC%u:0x%llx:0x%llx:%s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2210: FILE: perfmon/perfmon_pmu.c:322:
+   ^I^I^Iseq_printf(m, "PMC%u:0x%llx:0x%llx:%s\n",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2211: FILE: perfmon/perfmon_pmu.c:323:
+   			seq_printf(m, "PMC%u:0x%llx:0x%llx:%s\n",
+			   i,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2215: FILE: perfmon/perfmon_pmu.c:327:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2215: FILE: perfmon/perfmon_pmu.c:327:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2215: FILE: perfmon/perfmon_pmu.c:327:
+  ^I}$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2219: FILE: perfmon/perfmon_pmu.c:331:
+	for (i = 0; PMD_IS_LAST(pfm_pmu_conf, i) == 0;  i++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2222: FILE: perfmon/perfmon_pmu.c:334:
+			seq_printf(m, "PMD%u:0x%llx:0x%llx:%s\n",
+			   i,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2227: FILE: perfmon/perfmon_pmu.c:339:
+
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2235: FILE: perfmon/perfmon_proc.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2256: FILE: perfmon/perfmon_proc.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#2268: FILE: perfmon/perfmon_proc.c:34:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#2270: FILE: perfmon/perfmon_proc.c:36:
+#include <asm/processor.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2272: FILE: perfmon/perfmon_proc.c:38:
+static struct proc_dir_entry ^I*perfmon_proc, *perfmon_map_proc;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2276: FILE: perfmon/perfmon_proc.c:42:
+static int pfm_reset_stats(ctl_table *table, int write, struct file *filp,
                                                                      ^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2279: FILE: perfmon/perfmon_proc.c:45:
+static ctl_table pfm_ctl_table[]={
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2344: FILE: perfmon/perfmon_proc.c:110:
+ ^I{0,},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2344: FILE: perfmon/perfmon_proc.c:110:
+ ^I{0,},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2344: FILE: perfmon/perfmon_proc.c:110:
+ ^I{0,},$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2349: FILE: perfmon/perfmon_proc.c:115:
+ ^I{0,},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2349: FILE: perfmon/perfmon_proc.c:115:
+ ^I{0,},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2349: FILE: perfmon/perfmon_proc.c:115:
+ ^I{0,},$

WARNING:SPACING: missing space after struct definition
#2354: FILE: perfmon/perfmon_proc.c:120:
+struct pfm_sysctl pfm_sysctl={

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2354: FILE: perfmon/perfmon_proc.c:120:
+struct pfm_sysctl pfm_sysctl={
                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2370: FILE: perfmon/perfmon_proc.c:136:
+#define PFM_PROC_SHOW_HEADER	((void *)(NR_CPUS+1))
                             	                 ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2376: FILE: perfmon/perfmon_proc.c:142:
+	if (*pos == 0) {
+		return PFM_PROC_SHOW_HEADER;
+	}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2380: FILE: perfmon/perfmon_proc.c:146:
+	while (p < NR_CPUS) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2408: FILE: perfmon/perfmon_proc.c:174:
+#define PFM_CPU_STATS(field) ((unsigned long long)(per_cpu(pfm_stats,cpu).field))
                                                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2418: FILE: perfmon/perfmon_proc.c:184:
+	seq_printf(m,
+		"CPU%-3d total ovfl intrs    : %llu\n"

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2437: FILE: perfmon/perfmon_proc.c:203:
+		cpu, PFM_CPU_STATS(pfm_all_intr_count)-PFM_CPU_STATS(pfm_real_intr_count),
 		                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2451: FILE: perfmon/perfmon_proc.c:217:
+		cpu, per_cpu(pmu_owner, cpu) ? per_cpu(pmu_owner, cpu)->pid: -1,
 		                                                           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2459: FILE: perfmon/perfmon_proc.c:225:
+	if (num_online_cpus() == 1 && pfm_sysctl.debug > 0) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2461: FILE: perfmon/perfmon_proc.c:227:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2464: FILE: perfmon/perfmon_proc.c:230:
+   ^I^I^I^Iseq_printf(m, "CPU%-3u pmc%-3u              : 0x%llx\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2464: FILE: perfmon/perfmon_proc.c:230:
+   ^I^I^I^Iseq_printf(m, "CPU%-3u pmc%-3u              : 0x%llx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2464: FILE: perfmon/perfmon_proc.c:230:
+   ^I^I^I^Iseq_printf(m, "CPU%-3u pmc%-3u              : 0x%llx\n",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2465: FILE: perfmon/perfmon_proc.c:231:
+   				seq_printf(m, "CPU%-3u pmc%-3u              : 0x%llx\n",
+					cpu, i,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2467: FILE: perfmon/perfmon_proc.c:233:
+  ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2467: FILE: perfmon/perfmon_proc.c:233:
+  ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2467: FILE: perfmon/perfmon_proc.c:233:
+  ^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2472: FILE: perfmon/perfmon_proc.c:238:
+   ^I^I^I^Iseq_printf(m, "CPU%-3u pmd%-3u              : 0x%llx\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2472: FILE: perfmon/perfmon_proc.c:238:
+   ^I^I^I^Iseq_printf(m, "CPU%-3u pmd%-3u              : 0x%llx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2472: FILE: perfmon/perfmon_proc.c:238:
+   ^I^I^I^Iseq_printf(m, "CPU%-3u pmd%-3u              : 0x%llx\n",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2473: FILE: perfmon/perfmon_proc.c:239:
+   				seq_printf(m, "CPU%-3u pmd%-3u              : 0x%llx\n",
+					cpu, i,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2474: FILE: perfmon/perfmon_proc.c:240:
+^I^I^I^I  ^I(unsigned long long)pfm_read_pmd(NULL, i));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2474: FILE: perfmon/perfmon_proc.c:240:
+^I^I^I^I  ^I(unsigned long long)pfm_read_pmd(NULL, i));$

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#2480: FILE: perfmon/perfmon_proc.c:246:
+struct seq_operations pfm_proc_seq_ops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2482: FILE: perfmon/perfmon_proc.c:248:
+ ^I.next =^Ipfm_proc_next,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2482: FILE: perfmon/perfmon_proc.c:248:
+ ^I.next =^Ipfm_proc_next,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2482: FILE: perfmon/perfmon_proc.c:248:
+ ^I.next =^Ipfm_proc_next,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2483: FILE: perfmon/perfmon_proc.c:249:
+ ^I.stop =^Ipfm_proc_stop,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2483: FILE: perfmon/perfmon_proc.c:249:
+ ^I.stop =^Ipfm_proc_stop,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2483: FILE: perfmon/perfmon_proc.c:249:
+ ^I.stop =^Ipfm_proc_stop,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2484: FILE: perfmon/perfmon_proc.c:250:
+ ^I.show =^Ipfm_proc_show$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2484: FILE: perfmon/perfmon_proc.c:250:
+ ^I.show =^Ipfm_proc_show$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2484: FILE: perfmon/perfmon_proc.c:250:
+ ^I.show =^Ipfm_proc_show$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2503: FILE: perfmon/perfmon_proc.c:269:
+static struct file_operations pfm_map_proc_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2510: FILE: perfmon/perfmon_proc.c:276:
+static struct file_operations pfm_proc_fops = {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2519: FILE: perfmon/perfmon_proc.c:285:
+{
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#2523: FILE: perfmon/perfmon_proc.c:289:
+ ^Iperfmon_proc = create_proc_entry("perfmon", S_IRUGO, NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2523: FILE: perfmon/perfmon_proc.c:289:
+ ^Iperfmon_proc = create_proc_entry("perfmon", S_IRUGO, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2523: FILE: perfmon/perfmon_proc.c:289:
+ ^Iperfmon_proc = create_proc_entry("perfmon", S_IRUGO, NULL);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2523: FILE: perfmon/perfmon_proc.c:289:
+ 	perfmon_proc = create_proc_entry("perfmon", S_IRUGO, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!perfmon_proc"
#2524: FILE: perfmon/perfmon_proc.c:290:
+	if (perfmon_proc == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2525: FILE: perfmon/perfmon_proc.c:291:
+		printk(KERN_ERR "perfmon: cannot create /proc entry, "

WARNING:SPLIT_STRING: quoted string split across lines
#2526: FILE: perfmon/perfmon_proc.c:292:
+		printk(KERN_ERR "perfmon: cannot create /proc entry, "
+		       "perfmon disabled\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#2532: FILE: perfmon/perfmon_proc.c:298:
+ ^Iperfmon_map_proc = create_proc_entry("perfmon_map", S_IRUGO, NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2532: FILE: perfmon/perfmon_proc.c:298:
+ ^Iperfmon_map_proc = create_proc_entry("perfmon_map", S_IRUGO, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2532: FILE: perfmon/perfmon_proc.c:298:
+ ^Iperfmon_map_proc = create_proc_entry("perfmon_map", S_IRUGO, NULL);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2532: FILE: perfmon/perfmon_proc.c:298:
+ 	perfmon_map_proc = create_proc_entry("perfmon_map", S_IRUGO, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!perfmon_map_proc"
#2533: FILE: perfmon/perfmon_proc.c:299:
+	if (perfmon_map_proc == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2535: FILE: perfmon/perfmon_proc.c:301:
+		printk(KERN_ERR "perfmon: cannot create /proc entry for "

WARNING:SPLIT_STRING: quoted string split across lines
#2536: FILE: perfmon/perfmon_proc.c:302:
+		printk(KERN_ERR "perfmon: cannot create /proc entry for "
+		       "mappings, perfmon disabled\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#2539: FILE: perfmon/perfmon_proc.c:305:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2539: FILE: perfmon/perfmon_proc.c:305:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2539: FILE: perfmon/perfmon_proc.c:305:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2540: FILE: perfmon/perfmon_proc.c:306:
+ ^I * install customized file operations for /proc/perfmon entry$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2540: FILE: perfmon/perfmon_proc.c:306:
+ ^I * install customized file operations for /proc/perfmon entry$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2541: FILE: perfmon/perfmon_proc.c:307:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2541: FILE: perfmon/perfmon_proc.c:307:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2542: FILE: perfmon/perfmon_proc.c:308:
+ ^Iperfmon_proc->proc_fops = &pfm_proc_fops;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2542: FILE: perfmon/perfmon_proc.c:308:
+ ^Iperfmon_proc->proc_fops = &pfm_proc_fops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2542: FILE: perfmon/perfmon_proc.c:308:
+ ^Iperfmon_proc->proc_fops = &pfm_proc_fops;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2543: FILE: perfmon/perfmon_proc.c:309:
+ ^Iperfmon_map_proc->proc_fops = &pfm_map_proc_fops;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2543: FILE: perfmon/perfmon_proc.c:309:
+ ^Iperfmon_map_proc->proc_fops = &pfm_map_proc_fops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2543: FILE: perfmon/perfmon_proc.c:309:
+ ^Iperfmon_map_proc->proc_fops = &pfm_map_proc_fops;$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2560: FILE: perfmon/perfmon_proc.c:326:
+	for (m = 0; m < NR_CPUS; m++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2561: FILE: perfmon/perfmon_proc.c:327:
+		memset(&per_cpu(pfm_stats,m), 0, sizeof(struct pfm_stats));
 		                         ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2566: FILE: perfmon/perfmon_proc.c:332:
+static int pfm_reset_stats(ctl_table *table, int write, struct file *filp,
                                                                      ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2573: FILE: perfmon/perfmon_proc.c:339:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2578: FILE: perfmon/perfmon_res.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2599: FILE: perfmon/perfmon_res.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2660: FILE: perfmon/perfmon_res.c:83:
+	if (locked > current->signal->rlim[RLIMIT_MEMLOCK].rlim_cur) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2711: FILE: perfmon/perfmon_res.c:134:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#2739: FILE: perfmon/perfmon_res.c:162:
+			DPRINT(("system wide imppossible, %u conflicting"
+				"task_sessions\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2739: FILE: perfmon/perfmon_res.c:162:
+			DPRINT(("system wide imppossible, %u conflicting"
+				"task_sessions\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2740: FILE: perfmon/perfmon_res.c:163:
+^I^I^I  ^Ipfm_sessions.pfs_task_sessions));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2740: FILE: perfmon/perfmon_res.c:163:
+^I^I^I  ^Ipfm_sessions.pfs_task_sessions));$

WARNING:SPLIT_STRING: quoted string split across lines
#2750: FILE: perfmon/perfmon_res.c:173:
+		DPRINT(("reserving syswide session on CPU%u currently"
+			"on CPU%u\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2750: FILE: perfmon/perfmon_res.c:173:
+		DPRINT(("reserving syswide session on CPU%u currently"
+			"on CPU%u\n",

WARNING:SPACING: space prohibited before semicolon
#2756: FILE: perfmon/perfmon_res.c:179:
+		pfm_sessions.pfs_sys_sessions++ ;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2823: FILE: perfmon/perfmon_res.c:246:
+ ^Iseq_printf(m, "perfmon version            : %u.%u\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2823: FILE: perfmon/perfmon_res.c:246:
+ ^Iseq_printf(m, "perfmon version            : %u.%u\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2823: FILE: perfmon/perfmon_res.c:246:
+ ^Iseq_printf(m, "perfmon version            : %u.%u\n",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2824: FILE: perfmon/perfmon_res.c:247:
+ 	seq_printf(m, "perfmon version            : %u.%u\n",
+		PFM_VERSION_MAJ, PFM_VERSION_MIN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2830: FILE: perfmon/perfmon_res.c:253:
+		seq_printf(m,
+			"PMU model                  : %s\n"

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2834: FILE: perfmon/perfmon_res.c:257:
+			pfm_pmu_conf->version ? pfm_pmu_conf->version: "Unknown",
 			                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2838: FILE: perfmon/perfmon_res.c:261:
+		seq_printf(m,
+			"PMU model                  : No PMU detected\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#2843: FILE: perfmon/perfmon_res.c:266:
+ ^Iseq_printf(m,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2843: FILE: perfmon/perfmon_res.c:266:
+ ^Iseq_printf(m,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2843: FILE: perfmon/perfmon_res.c:266:
+ ^Iseq_printf(m,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2844: FILE: perfmon/perfmon_res.c:267:
+ ^I^I"loaded per-thread sessions : %u\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2844: FILE: perfmon/perfmon_res.c:267:
+ ^I^I"loaded per-thread sessions : %u\n"$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2844: FILE: perfmon/perfmon_res.c:267:
+ 	seq_printf(m,
+ 		"loaded per-thread sessions : %u\n"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2844: FILE: perfmon/perfmon_res.c:267:
+ ^I^I"loaded per-thread sessions : %u\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2845: FILE: perfmon/perfmon_res.c:268:
+ ^I^I"loaded sys-wide   sessions : %u\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2845: FILE: perfmon/perfmon_res.c:268:
+ ^I^I"loaded sys-wide   sessions : %u\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2845: FILE: perfmon/perfmon_res.c:268:
+ ^I^I"loaded sys-wide   sessions : %u\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2846: FILE: perfmon/perfmon_res.c:269:
+ ^I^I"current smpl buffer memory : %zu\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2846: FILE: perfmon/perfmon_res.c:269:
+ ^I^I"current smpl buffer memory : %zu\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2846: FILE: perfmon/perfmon_res.c:269:
+ ^I^I"current smpl buffer memory : %zu\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2847: FILE: perfmon/perfmon_res.c:270:
+ ^I^Ipfm_sessions.pfs_task_sessions,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2847: FILE: perfmon/perfmon_res.c:270:
+ ^I^Ipfm_sessions.pfs_task_sessions,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2847: FILE: perfmon/perfmon_res.c:270:
+ ^I^Ipfm_sessions.pfs_task_sessions,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2848: FILE: perfmon/perfmon_res.c:271:
+ ^I^Ipfm_sessions.pfs_sys_sessions,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2848: FILE: perfmon/perfmon_res.c:271:
+ ^I^Ipfm_sessions.pfs_sys_sessions,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2848: FILE: perfmon/perfmon_res.c:271:
+ ^I^Ipfm_sessions.pfs_sys_sessions,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2849: FILE: perfmon/perfmon_res.c:272:
+ ^I^Ipfm_sessions.pfs_cur_smpl_buf_mem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2849: FILE: perfmon/perfmon_res.c:272:
+ ^I^Ipfm_sessions.pfs_cur_smpl_buf_mem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2849: FILE: perfmon/perfmon_res.c:272:
+ ^I^Ipfm_sessions.pfs_cur_smpl_buf_mem);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2860: FILE: perfmon/perfmon_syscalls.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2881: FILE: perfmon/perfmon_syscalls.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2885: FILE: perfmon/perfmon_syscalls.c:26:
+#include <asm/uaccess.h>

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#2899: FILE: perfmon/perfmon_syscalls.c:40:
+	if (unlikely(addr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#2927: FILE: perfmon/perfmon_syscalls.c:68:
+	if (f == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2943: FILE: perfmon/perfmon_syscalls.c:84:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#2946: FILE: perfmon/perfmon_syscalls.c:87:
+	if (addr == NULL)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2959: FILE: perfmon/perfmon_syscalls.c:100:
+	if (addr)
+		kfree(addr);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2964: FILE: perfmon/perfmon_syscalls.c:105:
+asmlinkage long sys_pfm_create_context(pfarg_ctx_t __user *ureq, void __user *uarg, size_t smpl_size)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2976: FILE: perfmon/perfmon_syscalls.c:117:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2989: FILE: perfmon/perfmon_syscalls.c:130:
+	if (smpl_arg)
+		kfree(smpl_arg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3003: FILE: perfmon/perfmon_syscalls.c:144:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3016: FILE: perfmon/perfmon_syscalls.c:157:
+	if (unlikely(ctx == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3019: FILE: perfmon/perfmon_syscalls.c:160:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3020: FILE: perfmon/perfmon_syscalls.c:161:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3043: FILE: perfmon/perfmon_syscalls.c:184:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3056: FILE: perfmon/perfmon_syscalls.c:197:
+	if (unlikely(ctx == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3059: FILE: perfmon/perfmon_syscalls.c:200:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3060: FILE: perfmon/perfmon_syscalls.c:201:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3095: FILE: perfmon/perfmon_syscalls.c:236:
+	if (unlikely(ctx == NULL))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3098: FILE: perfmon/perfmon_syscalls.c:239:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3121: FILE: perfmon/perfmon_syscalls.c:262:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3129: FILE: perfmon/perfmon_syscalls.c:270:
+	if (unlikely(ctx == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3145: FILE: perfmon/perfmon_syscalls.c:286:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3153: FILE: perfmon/perfmon_syscalls.c:294:
+	if (unlikely(ctx == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3177: FILE: perfmon/perfmon_syscalls.c:318:
+	if (ctx == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3199: FILE: perfmon/perfmon_syscalls.c:340:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3209: FILE: perfmon/perfmon_syscalls.c:350:
+	if (ctx == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3228: FILE: perfmon/perfmon_syscalls.c:369:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3236: FILE: perfmon/perfmon_syscalls.c:377:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3241: FILE: perfmon/perfmon_syscalls.c:382:
+	ret = pfm_check_task_state(ctx, PFM_CMD_STOPPED|PFM_CMD_UNLOAD, &flags);
 	                                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3264: FILE: perfmon/perfmon_syscalls.c:405:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3267: FILE: perfmon/perfmon_syscalls.c:408:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3304: FILE: perfmon/perfmon_syscalls.c:445:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3307: FILE: perfmon/perfmon_syscalls.c:448:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#3344: FILE: perfmon/perfmon_syscalls.c:485:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3347: FILE: perfmon/perfmon_syscalls.c:488:
+	sz = count*sizeof(*ureq);
 	          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 97 errors, 243 warnings, 159 checks, 3285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
