WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#17: 
Subject: New feature: Removal of the exceptions wich belongs to the init
                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
regarding to any architeture. Thought it would be interesting to the exceptions.

WARNING:TYPO_SPELLING: 'architeture' may be misspelled - perhaps 'architecture'?
#46: 
regarding to any architeture. Thought it would be interesting to the exceptions.
                 ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'architeture' may be misspelled - perhaps 'architecture'?
#48: 
But there was a necessity to implement inside each architeture its own function
                                                   ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'architetures' may be misspelled - perhaps 'architectures'?
#51: 
chance to test it in other architetures than i386, and we thought it would fail
                           ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#56: 
the declaration to extern extable_cmp() wich must be implemented inside each
                                        ^^^^

WARNING:TYPO_SPELLING: 'architeture' may be misspelled - perhaps 'architecture'?
#57: 
architeture.
^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: arch/alpha/mm/extable.c:31:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#80: FILE: arch/alpha/mm/extable.c:32:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+   Results:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#85: FILE: arch/alpha/mm/extable.c:37:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: arch/alpha/mm/extable.c:38:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#86: FILE: arch/alpha/mm/extable.c:38:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#91: FILE: arch/alpha/mm/extable.c:43:
+	return(0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: arch/arm/mm/extable.c:39:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#102: FILE: arch/arm/mm/extable.c:40:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: arch/arm/mm/extable.c:44:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#108: FILE: arch/arm/mm/extable.c:46:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: arch/arm/mm/extable.c:47:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#109: FILE: arch/arm/mm/extable.c:47:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#114: FILE: arch/arm/mm/extable.c:52:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: arch/arm26/mm/extable.c:41:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#124: FILE: arch/arm26/mm/extable.c:42:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/arm26/mm/extable.c:46:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#130: FILE: arch/arm26/mm/extable.c:48:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/arm26/mm/extable.c:49:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#131: FILE: arch/arm26/mm/extable.c:49:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#136: FILE: arch/arm26/mm/extable.c:54:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: arch/cris/mm/extable.c:50:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#147: FILE: arch/cris/mm/extable.c:51:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: arch/cris/mm/extable.c:55:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#153: FILE: arch/cris/mm/extable.c:57:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: arch/cris/mm/extable.c:58:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#154: FILE: arch/cris/mm/extable.c:58:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#159: FILE: arch/cris/mm/extable.c:63:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: arch/h8300/mm/extable.c:32:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#170: FILE: arch/h8300/mm/extable.c:33:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: arch/h8300/mm/extable.c:37:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#176: FILE: arch/h8300/mm/extable.c:39:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: arch/h8300/mm/extable.c:40:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#177: FILE: arch/h8300/mm/extable.c:40:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: arch/h8300/mm/extable.c:45:
+   ^Ireturn(0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: arch/h8300/mm/extable.c:45:
+   ^Ireturn(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/h8300/mm/extable.c:45:
+   ^Ireturn(0);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#182: FILE: arch/h8300/mm/extable.c:45:
+   	return(0);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#191: FILE: arch/i386/kernel/module.c:24:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: arch/i386/kernel/module.c:42:
+static inline int within_mod_init_section(unsigned long addr, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: arch/i386/kernel/module.c:43:
+                                          void *start, unsigned long size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: arch/i386/kernel/module.c:43:
+                                          void *start, unsigned long size)$

WARNING:TABSTOP: Statements should start on a tabstop
#205: FILE: arch/i386/kernel/module.c:45:
+	    return ((void *)addr >= start && (void *)addr < start + size);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#211: FILE: arch/i386/kernel/module.c:51:
+void remove_init_exceptions(struct module *mod) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#212: FILE: arch/i386/kernel/module.c:52:
+void remove_init_exceptions(struct module *mod) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#217: FILE: arch/i386/kernel/module.c:57:
+	int num_init_ex=0;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: arch/i386/kernel/module.c:59:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#224: FILE: arch/i386/kernel/module.c:64:
+		if (within_mod_init_section((unsigned long) local->insn, mod->module_init, mod->init_size)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#224: FILE: arch/i386/kernel/module.c:64:
+		if (within_mod_init_section((unsigned long) local->insn, mod->module_init, mod->init_size)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#224: FILE: arch/i386/kernel/module.c:64:
+		if (within_mod_init_section((unsigned long) local->insn, mod->module_init, mod->init_size)) {
[...]
+		else break;
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: arch/i386/kernel/module.c:65:
+^I^I^Inum_init_ex++;^I^I^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#227: FILE: arch/i386/kernel/module.c:67:
+		else break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#227: FILE: arch/i386/kernel/module.c:67:
+		}
+		else break;

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: arch/i386/kernel/module.c:68:
+		local = local+1;
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#241: FILE: arch/i386/kernel/module.c:81:
+	for(i=0; i < num_init_ex; ++i)
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#241: FILE: arch/i386/kernel/module.c:81:
+	for(i=0; i < num_init_ex; ++i)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#242: FILE: arch/i386/kernel/module.c:82:
+		kfree(local+i);
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/i386/kernel/module.c:88:
+{^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#251: FILE: arch/i386/kernel/module.c:90:
+	if (module_region == mod->module_init) {
+		remove_init_exceptions(mod);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: arch/i386/kernel/module.c:93:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: arch/i386/mm/extable.c:61:
+        Results:$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#270: FILE: arch/i386/mm/extable.c:61:
+/* Exception_table_entry Comparison. Only the field insn is considered.
+        Results:

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: arch/i386/mm/extable.c:62:
+                equal: 0$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/i386/mm/extable.c:63:
+                ex1 less than ex2: -1$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/i386/mm/extable.c:64:
+                ex1 major than ex2: 1$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: arch/i386/mm/extable.c:67:
+int extable_cmp(const struct exception_table_entry ex1, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: arch/i386/mm/extable.c:68:
+^I^Iconst struct exception_table_entry ex2) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: arch/i386/mm/extable.c:74:
+     ^Ireturn(0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#283: FILE: arch/i386/mm/extable.c:74:
+     ^Ireturn(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: arch/i386/mm/extable.c:74:
+     ^Ireturn(0);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#283: FILE: arch/i386/mm/extable.c:74:
+     	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: arch/i386/mm/extable.c:75:
+}^I     ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#284: FILE: arch/i386/mm/extable.c:75:
+}^I     ^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#286: FILE: arch/i386/mm/extable.c:77:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: arch/ia64/mm/extable.c:48:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#296: FILE: arch/ia64/mm/extable.c:49:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: arch/ia64/mm/extable.c:53:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#302: FILE: arch/ia64/mm/extable.c:55:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: arch/ia64/mm/extable.c:56:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#303: FILE: arch/ia64/mm/extable.c:56:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#308: FILE: arch/ia64/mm/extable.c:61:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: arch/m68k/mm/extable.c:34:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#318: FILE: arch/m68k/mm/extable.c:35:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: arch/m68k/mm/extable.c:39:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#324: FILE: arch/m68k/mm/extable.c:41:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: arch/m68k/mm/extable.c:42:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#325: FILE: arch/m68k/mm/extable.c:42:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#330: FILE: arch/m68k/mm/extable.c:47:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: arch/m68knommu/mm/extable.c:32:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#342: FILE: arch/m68knommu/mm/extable.c:33:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: arch/m68knommu/mm/extable.c:37:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#348: FILE: arch/m68knommu/mm/extable.c:39:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: arch/m68knommu/mm/extable.c:40:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#349: FILE: arch/m68knommu/mm/extable.c:40:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#354: FILE: arch/m68knommu/mm/extable.c:45:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: arch/mips/mm/extable.c:32:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#365: FILE: arch/mips/mm/extable.c:33:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: arch/mips/mm/extable.c:37:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#371: FILE: arch/mips/mm/extable.c:39:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: arch/mips/mm/extable.c:40:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#372: FILE: arch/mips/mm/extable.c:40:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#377: FILE: arch/mips/mm/extable.c:45:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: arch/parisc/mm/extable.c:38:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#387: FILE: arch/parisc/mm/extable.c:39:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: arch/parisc/mm/extable.c:43:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#393: FILE: arch/parisc/mm/extable.c:45:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: arch/parisc/mm/extable.c:46:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#394: FILE: arch/parisc/mm/extable.c:46:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#399: FILE: arch/parisc/mm/extable.c:51:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: arch/ppc/mm/extable.c:43:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#446: FILE: arch/ppc/mm/extable.c:44:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: arch/ppc/mm/extable.c:48:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#452: FILE: arch/ppc/mm/extable.c:50:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: arch/ppc/mm/extable.c:51:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#453: FILE: arch/ppc/mm/extable.c:51:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#458: FILE: arch/ppc/mm/extable.c:56:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: arch/ppc64/mm/extable.c:76:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#469: FILE: arch/ppc64/mm/extable.c:77:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: arch/ppc64/mm/extable.c:81:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#475: FILE: arch/ppc64/mm/extable.c:83:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: arch/ppc64/mm/extable.c:84:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#476: FILE: arch/ppc64/mm/extable.c:84:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#481: FILE: arch/ppc64/mm/extable.c:89:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: arch/s390/mm/extable.c:36:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#493: FILE: arch/s390/mm/extable.c:37:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: arch/s390/mm/extable.c:41:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#499: FILE: arch/s390/mm/extable.c:43:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: arch/s390/mm/extable.c:44:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#500: FILE: arch/s390/mm/extable.c:44:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#505: FILE: arch/s390/mm/extable.c:49:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: arch/sh/mm/extable.c:48:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#516: FILE: arch/sh/mm/extable.c:49:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: arch/sh/mm/extable.c:53:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#522: FILE: arch/sh/mm/extable.c:55:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: arch/sh/mm/extable.c:56:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#523: FILE: arch/sh/mm/extable.c:56:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#528: FILE: arch/sh/mm/extable.c:61:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: arch/sparc/mm/extable.c:74:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#539: FILE: arch/sparc/mm/extable.c:75:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: arch/sparc/mm/extable.c:79:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#545: FILE: arch/sparc/mm/extable.c:81:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: arch/sparc/mm/extable.c:82:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#546: FILE: arch/sparc/mm/extable.c:82:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#551: FILE: arch/sparc/mm/extable.c:87:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: arch/sparc64/mm/extable.c:77:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#562: FILE: arch/sparc64/mm/extable.c:78:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: arch/sparc64/mm/extable.c:82:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#568: FILE: arch/sparc64/mm/extable.c:84:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: arch/sparc64/mm/extable.c:85:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#569: FILE: arch/sparc64/mm/extable.c:85:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#574: FILE: arch/sparc64/mm/extable.c:90:
+	return(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: arch/x86_64/mm/extable.c:59:
+/* Exception_table_entry Comparison. Only the field insn is considered. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#586: FILE: arch/x86_64/mm/extable.c:60:
+/* Exception_table_entry Comparison. Only the field insn is considered. 
+	Results:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: arch/x86_64/mm/extable.c:64:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#592: FILE: arch/x86_64/mm/extable.c:66:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: arch/x86_64/mm/extable.c:67:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#593: FILE: arch/x86_64/mm/extable.c:67:
+int extable_cmp(const struct exception_table_entry ex1, const struct exception_table_entry ex2) {
+	

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#598: FILE: arch/x86_64/mm/extable.c:72:
+	return(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#604: FILE: include/linux/extable.h:1:
+#ifndef _EXTABLE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: include/linux/extable.h:8:
+ *^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: include/linux/extable.h:11:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#616: FILE: include/linux/extable.h:13:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: include/linux/extable.h:16:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: include/linux/extable.h:16:
+ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#625: FILE: include/linux/extable.h:22:
+ *                                                         */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#626: FILE: include/linux/extable.h:23:
+extern int extable_cmp(struct exception_table_entry ex1,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: include/linux/extable.h:24:
+                       struct exception_table_entry ex2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: include/linux/extable.h:24:
+                       struct exception_table_entry ex2);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: include/linux/extable.h:26:
+/* This code sorts an exception table. It is very used with modules code $

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#633: FILE: include/linux/extable.h:30:
+void __init_or_module sort_ex_table(struct exception_table_entry *start, struct exception_table_entry *finish)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#671: FILE: kernel/module.c:1384:
 
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#679: FILE: kernel/module.c:1621:
+        /* Classifying the exception table */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: kernel/module.c:1622:
+        sort_ex_table((struct exception_table_entry *)mod->extable,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: kernel/module.c:1622:
+        sort_ex_table((struct exception_table_entry *)mod->extable,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#681: FILE: kernel/module.c:1623:
+                      (struct exception_table_entry *)mod->extable +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: kernel/module.c:1623:
+                      (struct exception_table_entry *)mod->extable +$

ERROR:CODE_INDENT: code indent should use tabs where possible
#682: FILE: kernel/module.c:1624:
+                                mod->num_exentries);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#682: FILE: kernel/module.c:1624:
+                                mod->num_exentries);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322266.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 113 errors, 44 warnings, 27 checks, 528 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322266.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
