WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: include/linux/ckrm_tsk.h:1:
+/* ckrm_tsk.h - No. of tasks resource controller for CKRM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#44: FILE: include/linux/ckrm_tsk.h:4:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#48: FILE: include/linux/ckrm_tsk.h:8:
+ * $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/ckrm_tsk.h:31:
+extern int numtasks_get_ref(void *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#71: FILE: include/linux/ckrm_tsk.h:31:
+extern int numtasks_get_ref(void *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#71: FILE: include/linux/ckrm_tsk.h:31:
+extern int numtasks_get_ref(void *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/ckrm_tsk.h:32:
+extern void numtasks_put_ref(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#72: FILE: include/linux/ckrm_tsk.h:32:
+extern void numtasks_put_ref(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/ckrm_tsk.h:33:
+extern void ckrm_numtasks_register(get_ref_t, put_ref_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_ref_t' should also have an identifier name
#73: FILE: include/linux/ckrm_tsk.h:33:
+extern void ckrm_numtasks_register(get_ref_t, put_ref_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'put_ref_t' should also have an identifier name
#73: FILE: include/linux/ckrm_tsk.h:33:
+extern void ckrm_numtasks_register(get_ref_t, put_ref_t);

ERROR:SPACING: space required before the open parenthesis '('
#78: FILE: include/linux/ckrm_tsk.h:38:
+#define numtasks_put_ref(a)	do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#90: FILE: init/Kconfig:186:
+config CKRM_RES_NUMTASKS
+	tristate "Number of Tasks Resource Manager"
+	depends on CKRM_TYPE_TASKCLASS
+	default m
+	help
+	  Provides a Resource Controller for CKRM that allows limiting no of
+	  tasks a task class can have.
+	
+	  Say N if unsure, Y to use the feature.

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: init/Kconfig:193:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: kernel/ckrm/ckrm_numtasks.c:1:
+/* ckrm_numtasks.c - "Number of tasks" resource controller for CKRM

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: kernel/ckrm/ckrm_numtasks.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: kernel/ckrm/ckrm_numtasks.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: kernel/ckrm/ckrm_numtasks.c:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: kernel/ckrm/ckrm_numtasks.c:17:
+ * $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#145: FILE: kernel/ckrm/ckrm_numtasks.c:39:
+typedef struct ckrm_numtasks {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: kernel/ckrm/ckrm_numtasks.c:50:
+^Iint over_guarantee;^I// turn on/off when cur_alloc goes $

WARNING:TYPO_SPELLING: 'statictics' may be misspelled - perhaps 'statistics'?
#159: FILE: kernel/ckrm/ckrm_numtasks.c:53:
+	// internally maintained statictics to compare with max numbers
 	                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'statictics' may be misspelled - perhaps 'statistics'?
#164: FILE: kernel/ckrm/ckrm_numtasks.c:58:
+	// Maximum the specific statictics has reached.
 	                        ^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: kernel/ckrm/ckrm_numtasks.c:76:
+static void numtasks_res_initcls_one(ckrm_numtasks_t * res)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#212: FILE: kernel/ckrm/ckrm_numtasks.c:106:
+	return;
+}

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#214: FILE: kernel/ckrm/ckrm_numtasks.c:108:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: kernel/ckrm/ckrm_numtasks.c:113:
+^I/* Write a version which propagates values all the way down $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#220: FILE: kernel/ckrm/ckrm_numtasks.c:114:
+	/* Write a version which propagates values all the way down 
+	   and replace rcbs callback with that version */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#220: FILE: kernel/ckrm/ckrm_numtasks.c:114:
+	   and replace rcbs callback with that version */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#222: FILE: kernel/ckrm/ckrm_numtasks.c:116:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'resid < 0'
#231: FILE: kernel/ckrm/ckrm_numtasks.c:125:
+	if ((resid < 0) || (core == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'core == NULL'
#231: FILE: kernel/ckrm/ckrm_numtasks.c:125:
+	if ((resid < 0) || (core == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!core"
#231: FILE: kernel/ckrm/ckrm_numtasks.c:125:
+	if ((resid < 0) || (core == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#235: FILE: kernel/ckrm/ckrm_numtasks.c:129:
+	if (res == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->parent'
#241: FILE: kernel/ckrm/ckrm_numtasks.c:135:
+	if (((res->parent) && (res->cnt_unused == CKRM_SHARE_DONTCARE)) ||
+	    (atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->cnt_unused == CKRM_SHARE_DONTCARE'
#241: FILE: kernel/ckrm/ckrm_numtasks.c:135:
+	if (((res->parent) && (res->cnt_unused == CKRM_SHARE_DONTCARE)) ||
+	    (atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#243: FILE: kernel/ckrm/ckrm_numtasks.c:137:
+	    (atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->cnt_limit != CKRM_SHARE_DONTCARE'
#245: FILE: kernel/ckrm/ckrm_numtasks.c:139:
+		if (!force && (res->cnt_limit != CKRM_SHARE_DONTCARE) &&
+		    (atomic_read(&res->cnt_cur_alloc) > res->cnt_limit)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "res->parent"
#249: FILE: kernel/ckrm/ckrm_numtasks.c:143:
+		} else if (res->parent != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#250: FILE: kernel/ckrm/ckrm_numtasks.c:144:
+			if ((rc =

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#266: FILE: kernel/ckrm/ckrm_numtasks.c:160:
+		if (res->max_limit_failures < res->limit_failures) {
+			res->max_limit_failures = res->limit_failures;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#269: FILE: kernel/ckrm/ckrm_numtasks.c:163:
+		if (res->max_borrow_sucesses < res->borrow_sucesses) {
+			res->max_borrow_sucesses = res->borrow_sucesses;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#272: FILE: kernel/ckrm/ckrm_numtasks.c:166:
+		if (res->max_borrow_failures < res->borrow_failures) {
+			res->max_borrow_failures = res->borrow_failures;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#280: FILE: kernel/ckrm/ckrm_numtasks.c:174:
+	if (!rc) {
+		atomic_dec(&res->cnt_cur_alloc);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'core == NULL'
#292: FILE: kernel/ckrm/ckrm_numtasks.c:186:
+	if ((resid == -1) || (core == NULL)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#292: FILE: kernel/ckrm/ckrm_numtasks.c:186:
+	if ((resid == -1) || (core == NULL)) {
+		return;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!core"
#292: FILE: kernel/ckrm/ckrm_numtasks.c:186:
+	if ((resid == -1) || (core == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#297: FILE: kernel/ckrm/ckrm_numtasks.c:191:
+	if (res == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#300: FILE: kernel/ckrm/ckrm_numtasks.c:194:
+		printk(KERN_WARNING "numtasks_put_ref: Trying to decrement "

WARNING:SPLIT_STRING: quoted string split across lines
#301: FILE: kernel/ckrm/ckrm_numtasks.c:195:
+		printk(KERN_WARNING "numtasks_put_ref: Trying to decrement "
+					"counter below 0\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:RETURN_VOID: void function return statements are not generally useful
#310: FILE: kernel/ckrm/ckrm_numtasks.c:204:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#325: FILE: kernel/ckrm/ckrm_numtasks.c:219:
+		if (parent == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: kernel/ckrm/ckrm_numtasks.c:220:
+^I^I^I// I am part of root class. So set the max tasks $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#334: FILE: kernel/ckrm/ckrm_numtasks.c:228:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numtasks_res_alloc', this function's name, in a string
#335: FILE: kernel/ckrm/ckrm_numtasks.c:229:
+		       "numtasks_res_alloc: failed GFP_ATOMIC alloc\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#346: FILE: kernel/ckrm/ckrm_numtasks.c:240:
+	ckrm_numtasks_t *res = my_res, *parres, *childres;
 	                                         ^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#357: FILE: kernel/ckrm/ckrm_numtasks.c:251:
+	if (unlikely(atomic_read(&res->cnt_cur_alloc) < 0)) {
+		printk(KERN_WARNING "numtasks_res: counter below 0\n");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#358: FILE: kernel/ckrm/ckrm_numtasks.c:252:
+		printk(KERN_WARNING "numtasks_res: counter below 0\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: kernel/ckrm/ckrm_numtasks.c:255:
+	if (unlikely(atomic_read(&res->cnt_cur_alloc) > 0 ||
+				atomic_read(&res->cnt_borrowed) > 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#362: FILE: kernel/ckrm/ckrm_numtasks.c:256:
+		printk(KERN_WARNING "numtasks_res_free: resource still "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numtasks_res_free', this function's name, in a string
#362: FILE: kernel/ckrm/ckrm_numtasks.c:256:
+		printk(KERN_WARNING "numtasks_res_free: resource still "

WARNING:SPLIT_STRING: quoted string split across lines
#363: FILE: kernel/ckrm/ckrm_numtasks.c:257:
+		printk(KERN_WARNING "numtasks_res_free: resource still "
+		       "alloc'd %p\n", res);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#364: FILE: kernel/ckrm/ckrm_numtasks.c:258:
+		if ((borrowed = atomic_read(&res->cnt_borrowed)) > 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#365: FILE: kernel/ckrm/ckrm_numtasks.c:259:
+			for (i = 0; i < borrowed; i++) {
+				numtasks_put_ref_local(parres->core);
+			}

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#378: FILE: kernel/ckrm/ckrm_numtasks.c:272:
+		childres = ckrm_get_res_class(child, resid, ckrm_numtasks_t);
 		^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#379: FILE: kernel/ckrm/ckrm_numtasks.c:273:
+		if (maxlimit < childres->shares.my_limit) {
+			maxlimit = childres->shares.my_limit;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#384: FILE: kernel/ckrm/ckrm_numtasks.c:278:
+	if (parres->shares.cur_max_limit < maxlimit) {
+		parres->shares.cur_max_limit = maxlimit;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#392: FILE: kernel/ckrm/ckrm_numtasks.c:286:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: kernel/ckrm/ckrm_numtasks.c:294:
+recalc_and_propagate(ckrm_numtasks_t * res, ckrm_numtasks_t * parres)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: kernel/ckrm/ckrm_numtasks.c:294:
+recalc_and_propagate(ckrm_numtasks_t * res, ckrm_numtasks_t * parres)

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#403: FILE: kernel/ckrm/ckrm_numtasks.c:297:
+	ckrm_numtasks_t *childres;
 	                 ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#415: FILE: kernel/ckrm/ckrm_numtasks.c:309:
+			u64 temp = (u64) self->my_guarantee * parres->cnt_guarantee;

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: kernel/ckrm/ckrm_numtasks.c:310:
+			u64 temp = (u64) self->my_guarantee * parres->cnt_guarantee;
+			do_div(temp, par->total_guarantee);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#417: FILE: kernel/ckrm/ckrm_numtasks.c:311:
+			res->cnt_guarantee = (int) temp;

CHECK:SPACING: No space is necessary after a cast
#425: FILE: kernel/ckrm/ckrm_numtasks.c:319:
+			u64 temp = (u64) self->my_limit * parres->cnt_limit;

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: kernel/ckrm/ckrm_numtasks.c:320:
+			u64 temp = (u64) self->my_limit * parres->cnt_limit;
+			do_div(temp, par->max_limit);

CHECK:SPACING: No space is necessary after a cast
#427: FILE: kernel/ckrm/ckrm_numtasks.c:321:
+			res->cnt_limit = (int) temp;

CHECK:SPACING: No space is necessary after a cast
#436: FILE: kernel/ckrm/ckrm_numtasks.c:330:
+			u64 temp = (u64) self->unused_guarantee * res->cnt_guarantee;

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: kernel/ckrm/ckrm_numtasks.c:331:
+			u64 temp = (u64) self->unused_guarantee * res->cnt_guarantee;
+			do_div(temp, self->total_guarantee);

CHECK:SPACING: No space is necessary after a cast
#438: FILE: kernel/ckrm/ckrm_numtasks.c:332:
+			res->cnt_unused = (int) temp;

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#446: FILE: kernel/ckrm/ckrm_numtasks.c:340:
+		childres = ckrm_get_res_class(child, resid, ckrm_numtasks_t);
 		^^^^^^^^

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#449: FILE: kernel/ckrm/ckrm_numtasks.c:343:
+		recalc_and_propagate(childres, res);
 		                     ^^^^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#454: FILE: kernel/ckrm/ckrm_numtasks.c:348:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == 0'
#479: FILE: kernel/ckrm/ckrm_numtasks.c:373:
+	if ((rc == 0) && parres) {

CHECK:SPACING: No space is necessary after a cast
#484: FILE: kernel/ckrm/ckrm_numtasks.c:378:
+			u64 temp = (u64) par->unused_guarantee * parres->cnt_guarantee;

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: kernel/ckrm/ckrm_numtasks.c:379:
+			u64 temp = (u64) par->unused_guarantee * parres->cnt_guarantee;
+			do_div(temp, par->total_guarantee);

CHECK:SPACING: No space is necessary after a cast
#486: FILE: kernel/ckrm/ckrm_numtasks.c:380:
+			parres->cnt_unused = (int) temp;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#493: FILE: kernel/ckrm/ckrm_numtasks.c:387:
+	if (res->parent) {
+		spin_unlock(&parres->cnt_lock);
+	}

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#516: FILE: kernel/ckrm/ckrm_numtasks.c:410:
+	seq_printf(sfile, "Number of tasks resource:\n");

WARNING:TYPO_SPELLING: 'sucesses' may be misspelled - perhaps 'successes'?
#519: FILE: kernel/ckrm/ckrm_numtasks.c:413:
+	seq_printf(sfile, "Total Over guarantee sucesses: %d\n",
 	                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'sucesses' may be misspelled - perhaps 'successes'?
#526: FILE: kernel/ckrm/ckrm_numtasks.c:420:
+	seq_printf(sfile, "Maximum Over guarantee sucesses: %d\n",
 	                                          ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#533: FILE: kernel/ckrm/ckrm_numtasks.c:427:
+		   "cur_alloc %d; borrowed %d; cnt_guar %d; cnt_limit %d "
+		   "cnt_unused %d, unused_guarantee %d, cur_max_limit %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#561: FILE: kernel/ckrm/ckrm_numtasks.c:455:
+	printk("numtasks config='%s'\n", cfgstr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#572: FILE: kernel/ckrm/ckrm_numtasks.c:466:
+		struct task_struct *tsk = task;
+		if (!oldres) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->parent->taskclass->core
#574: FILE: kernel/ckrm/ckrm_numtasks.c:468:
+			    &(tsk->parent->taskclass->core);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#581: FILE: kernel/ckrm/ckrm_numtasks.c:475:
+	if (newres) {
+		(void)numtasks_get_ref_local(newres->core, 1);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clstype"
#606: FILE: kernel/ckrm/ckrm_numtasks.c:500:
+	if (clstype == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#607: FILE: kernel/ckrm/ckrm_numtasks.c:501:
+		printk(KERN_INFO " Unknown ckrm classtype<taskclass>");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#613: FILE: kernel/ckrm/ckrm_numtasks.c:507:
+		printk("........init_ckrm_numtasks_res -> %d\n", resid);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_ckrm_numtasks_res', this function's name, in a string
#613: FILE: kernel/ckrm/ckrm_numtasks.c:507:
+		printk("........init_ckrm_numtasks_res -> %d\n", resid);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#625: FILE: kernel/ckrm/ckrm_numtasks.c:519:
+	if (numtasks_rcbs.resid != -1) {
+		ckrm_numtasks_register(NULL, NULL);
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: kernel/ckrm/ckrm_numtasks.c:527:
+    module_exit(exit_ckrm_numtasks_res)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: kernel/ckrm/ckrm_numtasks.c:529:
+    MODULE_LICENSE("GPL");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#641: FILE: kernel/ckrm/ckrm_numtasks_stub.c:1:
+/* ckrm_tasks_stub.c - Stub file for ckrm_tasks modules

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: kernel/ckrm/ckrm_numtasks_stub.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#646: FILE: kernel/ckrm/ckrm_numtasks_stub.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: kernel/ckrm/ckrm_numtasks_stub.c:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: kernel/ckrm/ckrm_numtasks_stub.c:17:
+ * $

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#666: FILE: kernel/ckrm/ckrm_numtasks_stub.c:26:
+static get_ref_t real_get_ref = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#667: FILE: kernel/ckrm/ckrm_numtasks_stub.c:27:
+static put_ref_t real_put_ref = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: kernel/ckrm/ckrm_numtasks_stub.c:40:
+	int ret = 1;
+	spin_lock(&stub_lock);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#681: FILE: kernel/ckrm/ckrm_numtasks_stub.c:41:
+	if (real_get_ref) {
+		ret = (*real_get_ref) (arg, force);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#691: FILE: kernel/ckrm/ckrm_numtasks_stub.c:51:
+	if (real_put_ref) {
+		(*real_put_ref) (arg);
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#697: FILE: kernel/ckrm/ckrm_numtasks_stub.c:57:
+EXPORT_SYMBOL(ckrm_numtasks_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#698: FILE: kernel/ckrm/ckrm_numtasks_stub.c:58:
+EXPORT_SYMBOL(numtasks_get_ref);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#699: FILE: kernel/ckrm/ckrm_numtasks_stub.c:59:
+EXPORT_SYMBOL(numtasks_put_ref);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#728: FILE: kernel/fork.c:1136:
+	if (numtasks_get_ref(current->taskclass, 0) == 0) {
+		return -ENOMEM;
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 70 warnings, 29 checks, 674 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000226799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
