WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#78: 
	need for seperate function.
	         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'returing' may be misspelled - perhaps 'returning'?
#91: 
	the destructor, constructor or before returing the object
	                                      ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: mm/slab.c:12:
+ * ^I(c) 2002 Manfred Spraul$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: mm/slab.c:49:
+ * The c_cpuarray may not be read with enabled local interrupts - $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: mm/slab.c:202:
+	void * entries[BOOT_CPUCACHE_ENTRIES];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: mm/slab.c:211:
+ * ^Iuse the alternate cpudata cache if wrong$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#254: FILE: mm/slab.c:229:
+#define LIST3_INIT(parent) \
+	{ \
+		.slabs_full	= LIST_HEAD_INIT(parent.slabs_full), \
+		.slabs_partial	= LIST_HEAD_INIT(parent.slabs_partial), \
+		.slabs_free	= LIST_HEAD_INIT(parent.slabs_free) \
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: mm/slab.c:247:
+^I$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#385: FILE: mm/slab.c:500:
+static int __devinit cpuup_callback(struct notifier_block *nfb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: mm/slab.c:501:
+static int __devinit cpuup_callback(struct notifier_block *nfb,
+				  unsigned long action,

WARNING:LINE_SPACING: Missing a blank line after declarations
#390: FILE: mm/slab.c:505:
+	int cpu = (int)hcpu;
+	if (action == CPU_ONLINE) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#400: FILE: mm/slab.c:515:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: mm/slab.c:516:
+			kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#401: FILE: mm/slab.c:516:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#401: FILE: mm/slab.c:516:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#401: FILE: mm/slab.c:516:
+			memsize = sizeof(void*)*cachep->limit+sizeof(cpucache_t);
 			                                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#454: FILE: mm/slab.c:611:
+		void * ptr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: mm/slab.c:612:
+^I^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#456: FILE: mm/slab.c:613:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: mm/slab.c:615:
+		BUG_ON(cc_data(&cache_cache) != &cpuarray_cache.cache);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: mm/slab.c:619:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct cpucache_int)...)
#463: FILE: mm/slab.c:620:
+		ptr = kmalloc(sizeof(struct cpucache_int), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: mm/slab.c:622:
+		BUG_ON(cc_data(cache_sizes[0].cs_cachep) != &cpuarray_generic.cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: mm/slab.c:624:
+		memcpy(ptr, cc_data(cache_sizes[0].cs_cachep),
+				sizeof(struct cpucache_int));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#477: FILE: mm/slab.c:632:
+	struct list_head* p;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#484: FILE: mm/slab.c:639:
+		kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: mm/slab.c:640:
+		kmem_cache_t* cachep = list_entry(p, kmem_cache_t, next);
+		enable_cpucache(cachep);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: mm/slab.c:643:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: mm/slab.c:727:
+	int i;
+	for (i = 0; i < cachep->num; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#505: FILE: mm/slab.c:728:
+		void* objp = slabp->s_mem+cachep->objsize*i;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#505: FILE: mm/slab.c:728:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#505: FILE: mm/slab.c:728:
+		void* objp = slabp->s_mem+cachep->objsize*i;
 		                                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: mm/slab.c:729:
+		void* objp = slabp->s_mem+cachep->objsize*i;
+		if (cachep->flags & SLAB_POISON)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#510: FILE: mm/slab.c:733:
+			if (*((unsigned long*)(objp)) != RED_MAGIC1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: mm/slab.c:734:
+				BUG();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#512: FILE: mm/slab.c:735:
+			if (*((unsigned long*)(objp + cachep->objsize -

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#514: FILE: mm/slab.c:737:
+				BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#518: FILE: mm/slab.c:741:
+			(cachep->dtor)(objp, cachep, 0);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (cachep->dtor)
#545: FILE: mm/slab.c:748:
+			(cachep->dtor)(objp, cachep, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: mm/slab.c:752:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#624: FILE: mm/slab.c:971:
+			cc_data(cachep) = kmalloc(sizeof(struct cpucache_int),GFP_KERNEL);
 			                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#626: FILE: mm/slab.c:973:
+		BUG_ON(!cc_data(cachep));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: mm/slab.c:979:
+^I} $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#663: FILE: mm/slab.c:1021:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#671: FILE: mm/slab.c:1028:
+	BUG_ON(irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#681: FILE: mm/slab.c:1036:
+	BUG_ON(spin_trylock(&cachep->spinlock));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#720: FILE: mm/slab.c:1071:
 
+

ERROR:SPACING: space required before the open parenthesis '('
#734: FILE: mm/slab.c:1083:
+	for(;;) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#842: FILE: mm/slab.c:1244:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#845: FILE: mm/slab.c:1247:
+			BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#969: FILE: mm/slab.c:1355:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#970: FILE: mm/slab.c:1356:
+^I^I^I(unsigned long)objp);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: mm/slab.c:1356:
+		printk(KERN_ERR "kfree_debugcheck: out of range ptr %lxh.\n",
+			(unsigned long)objp);	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#971: FILE: mm/slab.c:1357:
+^I^IBUG();^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#971: FILE: mm/slab.c:1357:
+		BUG();	

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#975: FILE: mm/slab.c:1361:
+		printk(KERN_ERR "kfree_debugcheck: bad ptr %lxh.\n", (unsigned long)objp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#984: FILE: mm/slab.c:1364:
+#endif $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#989: FILE: mm/slab.c:1367:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#989: FILE: mm/slab.c:1367:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#989: FILE: mm/slab.c:1367:
+static inline void *cache_free_debugcheck (kmem_cache_t * cachep, void * objp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1001: FILE: mm/slab.c:1377:
+	BUG_ON(GET_PAGE_CACHE(page) != cachep);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1011: FILE: mm/slab.c:1385:
+		if (xchg((unsigned long *)(objp+cachep->objsize -
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1017: FILE: mm/slab.c:1391:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1017: FILE: mm/slab.c:1391:
+	objnr = (objp-slabp->s_mem)/cachep->objsize;
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1019: FILE: mm/slab.c:1393:
+	BUG_ON(objnr >= cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1020: FILE: mm/slab.c:1394:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1020: FILE: mm/slab.c:1394:
+	BUG_ON(objp != slabp->s_mem + objnr*cachep->objsize);
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1028: FILE: mm/slab.c:1402:
+			cachep->ctor(objp+BYTES_PER_WORD,
 			                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1029: FILE: mm/slab.c:1403:
+					cachep, SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_VERIFY);
 					                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1031: FILE: mm/slab.c:1405:
+			cachep->ctor(objp, cachep, SLAB_CTOR_CONSTRUCTOR|SLAB_CTOR_VERIFY);
 			                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1039: FILE: mm/slab.c:1413:
+			cachep->dtor(objp+BYTES_PER_WORD, cachep, 0);
 			                 ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1043: FILE: mm/slab.c:1417:
+	if (cachep->flags & SLAB_POISON) {
+		poison_obj(cachep, objp);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1055: FILE: mm/slab.c:1429:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1060: FILE: mm/slab.c:1434:
+		BUG_ON(entries > cachep->num);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1062: FILE: mm/slab.c:1436:
+	BUG_ON(entries != cachep->num - slabp->inuse);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1089: FILE: mm/slab.c:1462:
+	if (slabp->free == BUFCTL_END) {
[...]
+	} else {
[...]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1096: FILE: mm/slab.c:1469:
+static void* cache_alloc_refill(kmem_cache_t* cachep, int flags)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1096: FILE: mm/slab.c:1469:
+static void* cache_alloc_refill(kmem_cache_t* cachep, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1108: FILE: mm/slab.c:1481:
+	BUG_ON(cc->avail > 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1135: FILE: mm/slab.c:1508:
+		int x;
+		x = cache_grow(cachep, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1136: FILE: mm/slab.c:1509:
+^I^I$

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1137: FILE: mm/slab.c:1510:
+		// cache_grow can reenable interrupts, then cc could change.
 		                  ^^^^^^^^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1155: FILE: mm/slab.c:1528:
+static inline void *cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1155: FILE: mm/slab.c:1528:
+static inline void *cache_alloc_debugcheck_after (kmem_cache_t *cachep, unsigned long flags, void *objp)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: mm/slab.c:1531:
+^Iif (!objp)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1174: FILE: mm/slab.c:1553:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1298: FILE: mm/slab.c:1581:
+/* $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1328: FILE: mm/slab.c:1586:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1328: FILE: mm/slab.c:1586:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1328: FILE: mm/slab.c:1586:
+static inline void __free_block (kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1352: FILE: mm/slab.c:1593:
+		slab_t* slabp;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1375: FILE: mm/slab.c:1599:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1375: FILE: mm/slab.c:1599:
+			unsigned int objnr = (objp-slabp->s_mem)/cachep->objsize;
 			                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1405: FILE: mm/slab.c:1612:
+				list_add(&slabp->list,
+						&list3_data_ptr(cachep, objp)->slabs_free);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1420: FILE: mm/slab.c:1625:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1420: FILE: mm/slab.c:1625:
+static void free_block(kmem_cache_t* cachep, void** objpp, int len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1428: FILE: mm/slab.c:1630:
+static void cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1428: FILE: mm/slab.c:1630:
+static void cache_flusharray (kmem_cache_t* cachep, cpucache_t *cc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1437: FILE: mm/slab.c:1636:
+	BUG_ON(!batchcount || batchcount > cc->avail);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1444: FILE: mm/slab.c:1643:
+	memmove(&cc_entry(cc)[0], &cc_entry(cc)[batchcount],
+			sizeof(void*)*cc->avail);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1444: FILE: mm/slab.c:1643:
+			sizeof(void*)*cc->avail);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1444: FILE: mm/slab.c:1643:
+			sizeof(void*)*cc->avail);
 			             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1496: FILE: mm/slab.c:1717:
+		BUG_ON(csizep->cs_cachep == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csizep->cs_cachep"
#1496: FILE: mm/slab.c:1717:
+		BUG_ON(csizep->cs_cachep == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1553: FILE: mm/slab.c:1800:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1558: FILE: mm/slab.c:1805:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1559: FILE: mm/slab.c:1806:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1559: FILE: mm/slab.c:1806:
+static int do_tune_cpucache (kmem_cache_t* cachep, int limit, int batchcount)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1578: FILE: mm/slab.c:1812:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1579: FILE: mm/slab.c:1813:
+		cpucache_t* ccnew;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1581: FILE: mm/slab.c:1815:
+		ccnew = kmalloc(sizeof(void*)*limit+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1581: FILE: mm/slab.c:1815:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                             ^

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#1581: FILE: mm/slab.c:1815:
+		ccnew = kmalloc(sizeof(void*)*limit+
 		                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1584: FILE: mm/slab.c:1818:
+			for (i--; i >= 0; i--) kfree(new.new[i]);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1595: FILE: mm/slab.c:1829:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1615: FILE: mm/slab.c:1848:
 
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1638: FILE: mm/slab.c:1863:
+	err = do_tune_cpucache(cachep, limit, limit/2);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1717: FILE: mm/slab.c:2051:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1717: FILE: mm/slab.c:2051:
+	list_for_each(q,&cachep->lists.slabs_full) {
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1725: FILE: mm/slab.c:2058:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1725: FILE: mm/slab.c:2058:
+	list_for_each(q,&cachep->lists.slabs_partial) {
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1732: FILE: mm/slab.c:2064:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1732: FILE: mm/slab.c:2064:
+	list_for_each(q,&cachep->lists.slabs_free) {
 	                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426695.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 49 errors, 42 warnings, 32 checks, 1567 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426695.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
