CHECK:CAMELCASE: Avoid CamelCase: <curIV>
#111: FILE: crypto/cipher.c:46:
+	u8 *curIV;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <nextIV>
#112: FILE: crypto/cipher.c:47:
+	u8 *nextIV;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: crypto/cipher.c:50:
+static void cbc_process_gw(void *_priv, int nsg, void **buf) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: crypto/cipher.c:68:
+		memcpy(priv->nextIV,src,bsize);
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: crypto/cipher.c:68:
+		memcpy(priv->nextIV,src,bsize);
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: crypto/cipher.c:81:
+static void ecb_process_gw(void *_priv, int nsg, void **buf) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: crypto/cipher.c:84:
+	struct ecb_process_priv *priv = (struct ecb_process_priv *)_priv;
+	priv->crfn(crypto_tfm_ctx(priv->tfm), buf[0], buf[1]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: crypto/cipher.c:105:
+^Istruct walk_info ecb_info[2] = { $

ERROR:SPACING: space required before the open brace '{'
#181: FILE: crypto/cipher.c:109:
+		[0].buf = (char[bsize]){},

ERROR:SPACING: space required before the open brace '{'
#185: FILE: crypto/cipher.c:113:
+		[1].buf = (char[bsize]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: crypto/cipher.c:115:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: crypto/cipher.c:116:
+^Istruct ecb_process_priv priv = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: crypto/cipher.c:120:
+      $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: crypto/cipher.c:120:
+      $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#193: FILE: crypto/cipher.c:121:
+	return scatterwalk_walker_generic(ecb_process_gw, &priv, nbytes/bsize, 2, ecb_info);
 	                                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: crypto/cipher.c:131:
+^Istruct walk_info ecb_info[2] = { $

ERROR:SPACING: space required before the open brace '{'
#210: FILE: crypto/cipher.c:135:
+		[0].buf = (char[bsize]){},

ERROR:SPACING: space required before the open brace '{'
#214: FILE: crypto/cipher.c:139:
+		[1].buf = (char[bsize]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: crypto/cipher.c:141:
+^Istruct ecb_process_priv priv = { $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#221: FILE: crypto/cipher.c:146:
+	return scatterwalk_walker_generic(ecb_process_gw, &priv, nbytes/bsize, 2, ecb_info);
 	                                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: crypto/cipher.c:150:
+                          struct scatterlist *dst,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: crypto/cipher.c:150:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: crypto/cipher.c:151:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: crypto/cipher.c:151:
+                          struct scatterlist *src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: crypto/cipher.c:152:
+                          unsigned int nbytes, u8 *iv)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: crypto/cipher.c:152:
+                          unsigned int nbytes, u8 *iv)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: crypto/cipher.c:155:
+^Istruct walk_info cbc_walk_info[2] = { $

ERROR:SPACING: space required before the open brace '{'
#241: FILE: crypto/cipher.c:159:
+		[0].buf = (char[bsize]){},

ERROR:SPACING: space required before the open brace '{'
#245: FILE: crypto/cipher.c:163:
+		[1].buf = (char[bsize]){},

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#253: FILE: crypto/cipher.c:171:
+	return scatterwalk_walker_generic(cbc_process_gw, &priv, nbytes/bsize, 2, cbc_walk_info);
 	                                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: crypto/cipher.c:180:
+^Istruct walk_info cbc_walk_info[2] = { $

ERROR:SPACING: space required before the open brace '{'
#270: FILE: crypto/cipher.c:184:
+		[0].buf = (char[bsize]){},

ERROR:SPACING: space required before the open brace '{'
#274: FILE: crypto/cipher.c:188:
+		[1].buf = (char[bsize]){},

ERROR:SPACING: space required before the open brace '{'
#281: FILE: crypto/cipher.c:195:
+		.nextIV = (char[bsize]){},

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#284: FILE: crypto/cipher.c:198:
+	r = scatterwalk_walker_generic(cbc_process_gw, &priv, nbytes/bsize, 2, cbc_walk_info);
 	                                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: crypto/cipher.c:199:
+^Iif(priv.curIV != iv) $

ERROR:SPACING: space required before the open parenthesis '('
#285: FILE: crypto/cipher.c:199:
+	if(priv.curIV != iv) 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: crypto/cipher.c:200:
+		memcpy(iv,priv.curIV,bsize);
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: crypto/cipher.c:200:
+		memcpy(iv,priv.curIV,bsize);
 		                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: crypto/cipher.c:213:
+                       struct scatterlist *dst,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: crypto/cipher.c:213:
+                       struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: crypto/cipher.c:214:
+                       struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: crypto/cipher.c:214:
+                       struct scatterlist *src,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#324: FILE: crypto/api.c:134:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: crypto/scatterwalk.h:37:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: crypto/scatterwalk.h:40:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#353: FILE: crypto/scatterwalk.h:41:
+#define scatterwalk_needscratch(walk, nbytes) ^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'walk' - possible side-effects?
#353: FILE: crypto/scatterwalk.h:41:
+#define scatterwalk_needscratch(walk, nbytes) 						\
+	((nbytes) <= (walk)->len_this_page &&						\
+	    (((unsigned long)(walk)->data) & (PAGE_CACHE_SIZE - 1)) + (nbytes) <=	\
+	    PAGE_CACHE_SIZE)								\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nbytes' - possible side-effects?
#353: FILE: crypto/scatterwalk.h:41:
+#define scatterwalk_needscratch(walk, nbytes) 						\
+	((nbytes) <= (walk)->len_this_page &&						\
+	    (((unsigned long)(walk)->data) & (PAGE_CACHE_SIZE - 1)) + (nbytes) <=	\
+	    PAGE_CACHE_SIZE)								\
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: crypto/scatterwalk.h:46:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: crypto/scatterwalk.h:47:
+#define scatterwalk_whichbuf(walk,nbytes,scratch) \
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: crypto/scatterwalk.h:47:
+#define scatterwalk_whichbuf(walk,nbytes,scratch) \
                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'walk' - possible side-effects?
#359: FILE: crypto/scatterwalk.h:47:
+#define scatterwalk_whichbuf(walk,nbytes,scratch) \
+	    (scatterwalk_needscratch(walk,nbytes)?(walk)->data:(scratch))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#360: FILE: crypto/scatterwalk.h:48:
+	    (scatterwalk_needscratch(walk,nbytes)?(walk)->data:(scratch))
 	                                 ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#360: FILE: crypto/scatterwalk.h:48:
+	    (scatterwalk_needscratch(walk,nbytes)?(walk)->data:(scratch))
 	                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#360: FILE: crypto/scatterwalk.h:48:
+	    (scatterwalk_needscratch(walk,nbytes)?(walk)->data:(scratch))
 	                                                      ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#376: FILE: crypto/scatterwalk.h:68:
+int scatterwalk_walker_generic(sw_proc_func_t function, void *priv, int steps, int nsl, struct walk_info *walk_info_l);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#425: FILE: crypto/scatterwalk.c:54:
+#define scatterwalk_map(walk,out) \
                             ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#425: FILE: crypto/scatterwalk.c:54:
+#define scatterwalk_map(walk,out) \
+	(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'walk' - possible side-effects?
#425: FILE: crypto/scatterwalk.c:54:
+#define scatterwalk_map(walk,out) \
+	(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; 

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#425: FILE: crypto/scatterwalk.c:54:
+#define scatterwalk_map(walk,out) \
+	(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; 

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: crypto/scatterwalk.c:55:
+^I(walk)->data = crypto_kmap((walk)->page, (out)) + (walk)->offset; $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'walk' - possible side-effects?
#444: FILE: crypto/scatterwalk.c:81:
+#define scatterwalk_copychunks(xbuf, walk, xnbytes, out) do {			\
+	int nbytes = (xnbytes);							\
+	char *buf = (xbuf);							\
+	if (buf != (walk)->data) {						\
+		while (nbytes > (walk)->len_this_page) {			\
+			memcpy_dir(buf, (walk)->data, (walk)->len_this_page, (out));	\
+			buf += (walk)->len_this_page;				\
+			nbytes -= (walk)->len_this_page;			\
+										\
+			crypto_kunmap((walk)->data, (out));			\
+			scatterwalk_pagedone((walk), (out), 1);			\
+			scatterwalk_map((walk), (out));				\
+		}								\
+		memcpy_dir(buf, (walk)->data, nbytes, (out));			\
+	}									\
+										\
+	(walk)->offset += nbytes;						\
+	(walk)->len_this_page -= nbytes;					\
+	(walk)->len_this_segment -= nbytes;					\
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'out' - possible side-effects?
#444: FILE: crypto/scatterwalk.c:81:
+#define scatterwalk_copychunks(xbuf, walk, xnbytes, out) do {			\
+	int nbytes = (xnbytes);							\
+	char *buf = (xbuf);							\
+	if (buf != (walk)->data) {						\
+		while (nbytes > (walk)->len_this_page) {			\
+			memcpy_dir(buf, (walk)->data, (walk)->len_this_page, (out));	\
+			buf += (walk)->len_this_page;				\
+			nbytes -= (walk)->len_this_page;			\
+										\
+			crypto_kunmap((walk)->data, (out));			\
+			scatterwalk_pagedone((walk), (out), 1);			\
+			scatterwalk_map((walk), (out));				\
+		}								\
+		memcpy_dir(buf, (walk)->data, nbytes, (out));			\
+	}									\
+										\
+	(walk)->offset += nbytes;						\
+	(walk)->len_this_page -= nbytes;					\
+	(walk)->len_this_segment -= nbytes;					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#444: FILE: crypto/scatterwalk.c:81:
+#define scatterwalk_copychunks(xbuf, walk, xnbytes, out) do {			\
+	int nbytes = (xnbytes);							\
+	char *buf = (xbuf);							\
+	if (buf != (walk)->data) {						\
+		while (nbytes > (walk)->len_this_page) {			\
+			memcpy_dir(buf, (walk)->data, (walk)->len_this_page, (out));	\
+			buf += (walk)->len_this_page;				\
+			nbytes -= (walk)->len_this_page;			\
+										\
+			crypto_kunmap((walk)->data, (out));			\
+			scatterwalk_pagedone((walk), (out), 1);			\
+			scatterwalk_map((walk), (out));				\
+		}								\
+		memcpy_dir(buf, (walk)->data, nbytes, (out));			\
+	}									\
+										\
+	(walk)->offset += nbytes;						\
+	(walk)->len_this_page -= nbytes;					\
+	(walk)->len_this_segment -= nbytes;					\
+} while(0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:SPACING: space required before the open parenthesis '('
#463: FILE: crypto/scatterwalk.c:100:
+} while(0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: crypto/scatterwalk.c:102:
+/*  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: crypto/scatterwalk.c:106:
+ * $

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#476: FILE: crypto/scatterwalk.c:113:
+ * All this informations and the underlaying scatterlist is handed to
             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'underlaying' may be misspelled - perhaps 'underlying'?
#476: FILE: crypto/scatterwalk.c:113:
+ * All this informations and the underlaying scatterlist is handed to
                                  ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: crypto/scatterwalk.c:133:
+^I^I^I       int nsl, struct walk_info *walk_infos) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: crypto/scatterwalk.c:136:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: crypto/scatterwalk.c:144:
+        for(csg = walk_infos, i = nsl; i; csg++, i--) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: crypto/scatterwalk.c:144:
+        for(csg = walk_infos, i = nsl; i; csg++, i--) {$

ERROR:SPACING: space required before the open parenthesis '('
#520: FILE: crypto/scatterwalk.c:144:
+        for(csg = walk_infos, i = nsl; i; csg++, i--) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: crypto/scatterwalk.c:145:
+		scatterwalk_start(&csg->sw,csg->sg);
 		                          ^

ERROR:SPACING: space required before the open parenthesis '('
#529: FILE: crypto/scatterwalk.c:149:
+	while(steps--) {

ERROR:SPACING: space required before the open parenthesis '('
#530: FILE: crypto/scatterwalk.c:150:
+		for(csg = walk_infos, cbuf = dispatch_list, i = nsl; i; i--, csg++, cbuf++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: crypto/scatterwalk.c:152:
+			*cbuf =	scatterwalk_needscratch(&csg->sw,csg->stepsize)?
 			       	                                ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#532: FILE: crypto/scatterwalk.c:152:
+			*cbuf =	scatterwalk_needscratch(&csg->sw,csg->stepsize)?
 			       	                                               ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#533: FILE: crypto/scatterwalk.c:153:
+				csg->sw.data:(

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#533: FILE: crypto/scatterwalk.c:153:
+				csg->sw.data:(
 				            ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#534: FILE: crypto/scatterwalk.c:154:
+				csg->buf == NULL?
 				                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csg->buf"
#534: FILE: crypto/scatterwalk.c:154:
+				csg->buf == NULL?

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#536: FILE: crypto/scatterwalk.c:156:
+					csg->buf = kmalloc(csg->stepsize,GFP_KERNEL);
 					                                ^

ERROR:SPACING: space required before the open parenthesis '('
#537: FILE: crypto/scatterwalk.c:157:
+					if(csg->buf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csg->buf"
#537: FILE: crypto/scatterwalk.c:157:
+					if(csg->buf == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: crypto/scatterwalk.c:162:
+^I^I^I^I^Icsg->buf; $

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#543: FILE: crypto/scatterwalk.c:163:
+				}):csg->buf);
 				  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: crypto/scatterwalk.c:165:
+^I^I^Iif(csg->ioflag == 0) $

ERROR:SPACING: space required before the open parenthesis '('
#545: FILE: crypto/scatterwalk.c:165:
+			if(csg->ioflag == 0) 

ERROR:SPACING: space required after that ',' (ctx:VxO)
#546: FILE: crypto/scatterwalk.c:166:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#546: FILE: crypto/scatterwalk.c:166:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: crypto/scatterwalk.c:166:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#546: FILE: crypto/scatterwalk.c:166:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,0);
 				                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: crypto/scatterwalk.c:168:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: crypto/scatterwalk.c:170:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: crypto/scatterwalk.c:171:
+^I^Ifor(csg = walk_infos, cbuf = dispatch_list, i = nsl; i; i--, csg++, cbuf++) {^I$

ERROR:SPACING: space required before the open parenthesis '('
#551: FILE: crypto/scatterwalk.c:171:
+		for(csg = walk_infos, cbuf = dispatch_list, i = nsl; i; i--, csg++, cbuf++) {	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: crypto/scatterwalk.c:172:
+^I^I^Iif(csg->ioflag == 1) $

ERROR:SPACING: space required before the open parenthesis '('
#552: FILE: crypto/scatterwalk.c:172:
+			if(csg->ioflag == 1) 

ERROR:SPACING: space required after that ',' (ctx:VxO)
#553: FILE: crypto/scatterwalk.c:173:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#553: FILE: crypto/scatterwalk.c:173:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#553: FILE: crypto/scatterwalk.c:173:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#553: FILE: crypto/scatterwalk.c:173:
+				scatterwalk_copychunks(*cbuf,&csg->sw,csg->stepsize,1);
 				                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#559: FILE: crypto/scatterwalk.c:179:
+				scatterwalk_map(&csg->sw,csg->ioflag);
 				                        ^

ERROR:SPACING: space required before the open parenthesis '('
#568: FILE: crypto/scatterwalk.c:188:
+	for(csg = walk_infos, i = nsl; i; i--, csg++) {

ERROR:SPACING: space required before the open parenthesis '('
#571: FILE: crypto/scatterwalk.c:191:
+		if(csg->freebuf)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212745.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 73 errors, 14 warnings, 21 checks, 514 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212745.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
