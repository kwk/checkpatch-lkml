CHECK:LINE_SPACING: Please don't use multiple blank lines
#41: FILE: fs/pnode.c:29:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#50: FILE: fs/pnode.c:38:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vfspnode_lock' should also have an identifier name
#50: FILE: fs/pnode.c:38:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#59: FILE: fs/pnode.c:62:
+void inline pnode_free(struct vfspnode *pnode)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#84: FILE: fs/pnode.c:192:
+ * ^I^Ito the pnode.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: fs/pnode.c:195:
+static int pnode_traverse(struct vfspnode *pnode,
+		void *in_data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/pnode.c:198:
+		int (*pnode_pre_func)(struct vfspnode *,
+			void *, void **, va_list),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: fs/pnode.c:200:
+		int (*pnode_post_func)(struct vfspnode *,
+			void *, va_list),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: fs/pnode.c:202:
+		int (*vfs_func)(struct vfsmount *,
+			enum pnode_vfs_type, void *,  va_list),

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: fs/pnode.c:208:
+     ^Istruct vfspnode *master_pnode;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: fs/pnode.c:208:
+     ^Istruct vfspnode *master_pnode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: fs/pnode.c:208:
+     ^Istruct vfspnode *master_pnode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: fs/pnode.c:209:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: fs/pnode.c:209:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: fs/pnode.c:209:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#117: FILE: fs/pnode.c:225:
+			data_from_master = p_array[level-1];
 			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#126: FILE: fs/pnode.c:234:
+			if((ret = pnode_pre_func(pnode,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#126: FILE: fs/pnode.c:234:
+			if((ret = pnode_pre_func(pnode,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: fs/pnode.c:235:
+			if((ret = pnode_pre_func(pnode,
+				data_from_master, &my_data, args)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/pnode.c:243:
+		list_for_each_entry_safe(member_mnt,
+			t_m, &pnode->pnode_vfs, mnt_pnode_mntlist) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#136: FILE: fs/pnode.c:244:
+			t_m, &pnode->pnode_vfs, mnt_pnode_mntlist) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#139: FILE: fs/pnode.c:247:
+			if ((ret = vfs_func(member_mnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: fs/pnode.c:248:
+			if ((ret = vfs_func(member_mnt,
+				PNODE_MEMBER_VFS, my_data, args)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: fs/pnode.c:254:
+		list_for_each_entry_safe(slave_mnt, t_m,
+			&pnode->pnode_slavevfs, mnt_pnode_mntlist) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#147: FILE: fs/pnode.c:255:
+			&pnode->pnode_slavevfs, mnt_pnode_mntlist) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#150: FILE: fs/pnode.c:258:
+			if ((ret = vfs_func(slave_mnt, PNODE_SLAVE_VFS,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: fs/pnode.c:259:
+			if ((ret = vfs_func(slave_mnt, PNODE_SLAVE_VFS,
+				my_data, args)))

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: fs/pnode.c:268:
+			if((ret = pnode_post_func(pnode,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#160: FILE: fs/pnode.c:268:
+			if((ret = pnode_post_func(pnode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/pnode.c:269:
+			if((ret = pnode_post_func(pnode,
+				my_data, args)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: fs/pnode.c:287:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#187: FILE: fs/pnode.c:327:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: fs/pnode.c:337:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: fs/pnode.c:384:
+static int vfs_busy(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: fs/pnode.c:417:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/pnode.c:419:
+int vfs_umount(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#279: FILE: fs/pnode.c:424:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: fs/pnode.c:434:
+		if (IS_MNT_SHARED(child_mnt) ||
+				IS_MNT_SLAVE(child_mnt)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: fs/pnode.c:435:
+			BUG_ON(!child_mnt->mnt_pnode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: fs/pnode.c:450:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: fs/pnode.c:452:
+int pnode_mount_func(struct vfspnode *pnode, void *indata,
+		void **outdata, va_list args)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#343: FILE: fs/pnode.c:461:
+	else if (!(pnode_slave = pnode_alloc()))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: fs/pnode.c:472:
+int vfs_make_mounted_func(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#357: FILE: fs/pnode.c:475:
+	int ret=0;
 	       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#362: FILE: fs/pnode.c:480:
+	if (!(child_mount = do_make_mounted(mnt, target_dentry))) {

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#368: FILE: fs/pnode.c:486:
+	case PNODE_SLAVE_VFS :
 	                     ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#371: FILE: fs/pnode.c:489:
+	case PNODE_MEMBER_VFS :
 	                      ^

ERROR:SPACING: space required before the open parenthesis '('
#442: FILE: fs/pnode.c:512:
+	if(pnode_traverse(pnode, NULL, (void *)NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: fs/pnode.c:513:
+	if(pnode_traverse(pnode, NULL, (void *)NULL,
+			pnode_mount_func, NULL, vfs_make_mounted_func,

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: fs/pnode.c:515:
+  ^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#445: FILE: fs/pnode.c:515:
+  ^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: fs/pnode.c:515:
+  ^I^Ireturn NULL;$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#519: FILE: fs/pnode.c:554:
+	source_mnt = va_arg(args, struct vfsmount * );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: fs/pnode.c:599:
+int pnode_real_mount_post_func(struct vfspnode *pnode, void *indata,
+		va_list args)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#603: FILE: fs/pnode.c:603:
+		BUG_ON(!list_empty(&pnode->pnode_vfs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#604: FILE: fs/pnode.c:604:
+		BUG_ON(!list_empty(&pnode->pnode_slavevfs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#605: FILE: fs/pnode.c:605:
+		BUG_ON(!list_empty(&pnode->pnode_slavepnode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: fs/pnode.c:614:
+int vfs_real_mount_func(struct vfsmount *mnt, enum pnode_vfs_type flag,
+		void *indata, va_list args)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 13 warnings, 28 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166937.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
