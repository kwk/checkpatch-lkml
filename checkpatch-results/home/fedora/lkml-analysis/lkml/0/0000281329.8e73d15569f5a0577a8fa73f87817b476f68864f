WARNING:TYPO_SPELLING: 'vaild' may be misspelled - perhaps 'valid'?
#34: 
    s_dentry field to check if the file dentry is vaild instead of doing a 
                                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
    lookup. A new routine sysfs_drop_dentry() is introduced for this purpose.

WARNING:TYPO_SPELLING: 'Cahnges' may be misspelled - perhaps 'Changes'?
#38: 
  o Cahnges to accomodate latest sysfs changes basically using
    ^^^^^^^

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#38: 
  o Cahnges to accomodate latest sysfs changes basically using
               ^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/sysfs/file.c:72:
+	struct sysfs_dirent * attr_sd = file->f_dentry->d_fsdata;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: fs/sysfs/file.c:73:
+	struct attribute * attr = attr_sd->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: fs/sysfs/file.c:74:
+	struct sysfs_dirent * kobj_sd = file->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: fs/sysfs/file.c:75:
+	struct kobject * kobj = kobj_sd->s_element;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: fs/sysfs/file.c:131:
+ *^IIt is safe to use ->d_parent->d_fsdata as both dentry and the kobject $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: fs/sysfs/file.c:133:
+ *^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: fs/sysfs/file.c:198:
+	struct sysfs_dirent * attr_sd = file->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: fs/sysfs/file.c:199:
+	struct attribute * attr = attr_sd->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: fs/sysfs/file.c:200:
+	struct sysfs_dirent * kobj_sd = file->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#117: FILE: fs/sysfs/file.c:201:
+	struct kobject * kobj = kobj_sd->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: fs/sysfs/file.c:241:
+	struct sysfs_dirent * attr_sd = file->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/sysfs/file.c:242:
+	struct attribute * attr = attr_sd->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: fs/sysfs/file.c:323:
+	struct sysfs_dirent * attr_sd = filp->f_dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: fs/sysfs/file.c:324:
+	struct attribute * attr = attr_sd->s_element;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: fs/sysfs/file.c:325:
+	struct sysfs_dirent * kobj_sd = filp->f_dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: fs/sysfs/file.c:326:
+	struct kobject * kobj = kobj_sd->s_element;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#149: FILE: fs/sysfs/file.c:341:
+struct file_operations sysfs_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: fs/sysfs/file.c:350:
+int sysfs_add_file(struct dentry * parent, const struct attribute * attr, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: fs/sysfs/file.c:350:
+int sysfs_add_file(struct dentry * parent, const struct attribute * attr, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: fs/sysfs/file.c:352:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: fs/sysfs/file.c:353:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: fs/sysfs/file.c:356:
+^Idown(&parent->d_inode->i_sem);^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#179: FILE: fs/sysfs/file.c:357:
+	sd = sysfs_new_dirent(parent_sd, (void *) attr, t);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#183: FILE: fs/sysfs/file.c:361:
+		sd->s_mode =  (attr->mode & S_IALLUGO) | S_IFREG ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: fs/sysfs/file.c:362:
+^Iup(&parent->d_inode->i_sem);^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: fs/sysfs/file.c:363:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: fs/sysfs/inode.c:66:
+^I^Iif (S_ISDIR(mode)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: fs/sysfs/inode.c:89:
+static struct sysfs_dirent * sysfs_find_dirent(struct sysfs_dirent * parent_sd, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: fs/sysfs/inode.c:89:
+static struct sysfs_dirent * sysfs_find_dirent(struct sysfs_dirent * parent_sd, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: fs/sysfs/inode.c:89:
+static struct sysfs_dirent * sysfs_find_dirent(struct sysfs_dirent * parent_sd, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: fs/sysfs/inode.c:90:
+static struct sysfs_dirent * sysfs_find_dirent(struct sysfs_dirent * parent_sd, 
+					  const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: fs/sysfs/inode.c:90:
+					  const char * name)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#231: FILE: fs/sysfs/inode.c:94:
+	list_for_each_entry(sd, &parent_sd->s_children, s_sibling) {
+			if (sd->s_element) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: fs/sysfs/inode.c:96:
+^I^I^I^Iif (!strcmp(sysfs_get_name(sd), name)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: fs/sysfs/inode.c:99:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: fs/sysfs/inode.c:103:
+/* Unhashes the dentry corresponding to given sysfs_dirent $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: fs/sysfs/inode.c:106:
+void sysfs_drop_dentry(struct sysfs_dirent * sd, struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: fs/sysfs/inode.c:106:
+void sysfs_drop_dentry(struct sysfs_dirent * sd, struct dentry * parent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: fs/sysfs/inode.c:108:
+	struct dentry * dentry = sd->s_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: fs/sysfs/inode.c:126:
+	struct sysfs_dirent * sd;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 7 warnings, 2 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000281329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
