WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#142: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#147: FILE: fs/splice.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct pipe_buf_operations should normally be const
#211: FILE: fs/splice.c:65:
+static struct pipe_buf_operations page_cache_pipe_buf_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#359: FILE: fs/splice.c:213:
+			if (PageUptodate(page))
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#361: FILE: fs/splice.c:215:
+			else {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#458: FILE: fs/splice.c:312:
+ *	  are no users of it. Make sure it's uptodate, then drop it. Fall
   	                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#496: FILE: fs/splice.c:350:
+	 * If the page is uptodate, it is also locked. If it isn't
 	                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#497: FILE: fs/splice.c:351:
+	 * uptodate, we can mark it uptodate if we are filling the
 	   ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#497: FILE: fs/splice.c:351:
+	 * uptodate, we can mark it uptodate if we are filling the
 	                            ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page->mapping"
#512: FILE: fs/splice.c:366:
+				if (page->mapping == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct pipe_buf_operations should normally be const
#577: FILE: fs/splice.c:431:
+			struct pipe_buf_operations *ops = buf->ops;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#626: FILE: fs/splice.c:480:
+			kill_fasync(PIPE_FASYNC_WRITERS(*inode),SIGIO,POLL_OUT);
 			                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#626: FILE: fs/splice.c:480:
+			kill_fasync(PIPE_FASYNC_WRITERS(*inode),SIGIO,POLL_OUT);
 			                                             ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#645: FILE: fs/splice.c:499:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: fs/splice.c:553:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#822: FILE: include/linux/fs.h:1035:
+	ssize_t (*splice_write)(struct inode *, struct file *, size_t, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#822: FILE: include/linux/fs.h:1035:
+	ssize_t (*splice_write)(struct inode *, struct file *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#822: FILE: include/linux/fs.h:1035:
+	ssize_t (*splice_write)(struct inode *, struct file *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#822: FILE: include/linux/fs.h:1035:
+	ssize_t (*splice_write)(struct inode *, struct file *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#823: FILE: include/linux/fs.h:1036:
+	ssize_t (*splice_read)(struct file *, struct inode *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#823: FILE: include/linux/fs.h:1036:
+	ssize_t (*splice_read)(struct file *, struct inode *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#823: FILE: include/linux/fs.h:1036:
+	ssize_t (*splice_read)(struct file *, struct inode *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#823: FILE: include/linux/fs.h:1036:
+	ssize_t (*splice_read)(struct file *, struct inode *, size_t, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#831: FILE: include/linux/fs.h:1614:
+extern ssize_t generic_file_splice_read(struct file *, struct inode *, size_t, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#831: FILE: include/linux/fs.h:1614:
+extern ssize_t generic_file_splice_read(struct file *, struct inode *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#831: FILE: include/linux/fs.h:1614:
+extern ssize_t generic_file_splice_read(struct file *, struct inode *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#831: FILE: include/linux/fs.h:1614:
+extern ssize_t generic_file_splice_read(struct file *, struct inode *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#831: FILE: include/linux/fs.h:1614:
+extern ssize_t generic_file_splice_read(struct file *, struct inode *, size_t, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#832: FILE: include/linux/fs.h:1615:
+extern ssize_t generic_file_splice_write(struct inode *, struct file *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#832: FILE: include/linux/fs.h:1615:
+extern ssize_t generic_file_splice_write(struct inode *, struct file *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#832: FILE: include/linux/fs.h:1615:
+extern ssize_t generic_file_splice_write(struct inode *, struct file *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#832: FILE: include/linux/fs.h:1615:
+extern ssize_t generic_file_splice_write(struct inode *, struct file *, size_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#832: FILE: include/linux/fs.h:1615:
+extern ssize_t generic_file_splice_write(struct inode *, struct file *, size_t, unsigned int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: include/linux/syscalls.h:573:
+asmlinkage long sys_splice(int fdin, int fdout, size_t len,
+				unsigned int flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#856: FILE: net/socket.c:122:
+extern ssize_t generic_splice_sendpage(struct inode *inode, struct file *out,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: net/socket.c:123:
+extern ssize_t generic_splice_sendpage(struct inode *inode, struct file *out,
+				size_t len, unsigned int flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#859: FILE: net/socket.c:125:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 25 warnings, 9 checks, 761 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
