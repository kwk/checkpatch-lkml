WARNING:TYPO_SPELLING: 'seqences' may be misspelled - perhaps 'sequences'?
#33: 
Programs can use vt100 control seqences - smacs, rmacs and acsc  characters
                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seqences' may be misspelled - perhaps 'sequences'?
#35: 
valid - current behaviour make these seqences not working in UTF-8 mode.
                                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'seqences' may be misspelled - perhaps 'sequences'?
#37: 
Added reporting malformed UTF-8 seqences as replacement glyphs.
                                ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
It's the second version with original codes used in case when there is no replacement

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#73: FILE: char/vt.c:2001:
+		} else if (vc->vc_utf && !vc->vc_disp_ctrl) {
[...]
 		    if(c > 0x7f) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 31)
#85: FILE: char/vt.c:2006:
+			if (vc->vc_utf_count) {
+			       if ((c & 0xc0) == 0x80) {

WARNING:TABSTOP: Statements should start on a tabstop
#86: FILE: char/vt.c:2007:
+			       if ((c & 0xc0) == 0x80) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#86: FILE: char/vt.c:2007:
+			       if ((c & 0xc0) == 0x80) {
+				       vc->vc_utf_char = (vc->vc_utf_char << 6) | (c & 0x3f);

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: char/vt.c:2009:
+       ^I^I^I^I       if (--vc->vc_utf_count) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#88: FILE: char/vt.c:2009:
+       ^I^I^I^I       if (--vc->vc_utf_count) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: char/vt.c:2009:
+       ^I^I^I^I       if (--vc->vc_utf_count) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (39, 47)
#88: FILE: char/vt.c:2009:
+       				       if (--vc->vc_utf_count) {
+					       vc->vc_par[vc->vc_utf_count] = c;

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: char/vt.c:2012:
+^I^I^I^I   ^I       continue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: char/vt.c:2012:
+^I^I^I^I   ^I       continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: char/vt.c:2013:
+       ^I^I^I^I       }$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#92: FILE: char/vt.c:2013:
+       ^I^I^I^I       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: char/vt.c:2013:
+       ^I^I^I^I       }$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#93: FILE: char/vt.c:2014:
+				       tc = c = vc->vc_utf_char;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TABSTOP: Statements should start on a tabstop
#94: FILE: char/vt.c:2015:
+			       } else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#94: FILE: char/vt.c:2015:
+			       } else {
+				       c = vc->vc_par[vc->vc_utf_count + vc->vc_npar];

WARNING:TABSTOP: Statements should start on a tabstop
#96: FILE: char/vt.c:2017:
+				       goto insert_replacement_glyph;

WARNING:TABSTOP: Statements should start on a tabstop
#97: FILE: char/vt.c:2018:
+			       }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 36)
#106: FILE: char/vt.c:2036:
 				} else
+	    			    goto insert_replacement_glyph;

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: char/vt.c:2037:
+^I    ^I^I^I    goto insert_replacement_glyph;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#108: FILE: char/vt.c:2037:
+^I    ^I^I^I    goto insert_replacement_glyph;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (20, 22)
#112: FILE: char/vt.c:2041:
 		    } else {
+		      if (vc->vc_utf_count) {

WARNING:TABSTOP: Statements should start on a tabstop
#113: FILE: char/vt.c:2042:
+		      if (vc->vc_utf_count) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (22, 30)
#113: FILE: char/vt.c:2042:
+		      if (vc->vc_utf_count) {
+			      c = vc->vc_par[vc->vc_utf_count + vc->vc_npar];

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: char/vt.c:2044:
+^I  ^I^I      goto insert_replacement_glyph;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#115: FILE: char/vt.c:2044:
+^I  ^I^I      goto insert_replacement_glyph;$

WARNING:TABSTOP: Statements should start on a tabstop
#116: FILE: char/vt.c:2045:
+		      }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102990.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 26 warnings, 1 checks, 106 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102990.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
