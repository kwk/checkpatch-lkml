CHECK:BRACES: braces {} should be used on all arms of this statement
#50: FILE: fs/fuse/dir.c:537:
+	if (!(fc->flags & FUSE_ALLOW_OTHER) && current->fsuid != fc->uid &&
[...]
-	else
[...]
+		return err;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#56: FILE: fs/fuse/dir.c:542:
+		int err;
+		err = generic_permission(inode, mask, NULL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#59: FILE: fs/fuse/dir.c:545:
+		/* If permission is denied, try to refresh file
+		   attributes.  This is also needed, because the root

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#60: FILE: fs/fuse/dir.c:546:
+		   node will at first have no permissions */

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: fs/fuse/dir.c:549:
+^I^I ^Ierr = fuse_do_getattr(inode);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#63: FILE: fs/fuse/dir.c:549:
+^I^I ^Ierr = fuse_do_getattr(inode);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#69: FILE: fs/fuse/dir.c:555:
+		/* FIXME: Need some mechanism to revoke permissions:
+		   currently if the filesystem suddenly changes the

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: fs/fuse/dir.c:558:
+^I^I   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#75: FILE: fs/fuse/dir.c:561:
+		   keeping it open... */

CHECK:BRACES: Unbalanced braces around else statement
#78: FILE: fs/fuse/dir.c:564:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: fs/fuse/fuse_i.h:20:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: fs/fuse/fuse_i.h:22:
+/** If the FUSE_DEFAULT_PERMISSIONS flag is given, the filesystem
+module will check permissions based on the file mode.  Otherwise no

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#104: FILE: fs/fuse/fuse_i.h:23:
+permission checking is done in the kernel */

CHECK:BIT_MACRO: Prefer using the BIT macro
#105: FILE: fs/fuse/fuse_i.h:24:
+#define FUSE_DEFAULT_PERMISSIONS (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#108: FILE: fs/fuse/fuse_i.h:27:
+/** If the FUSE_ALLOW_OTHER flag is given, then not only the user
+    doing the mount will be allowed to access the filesystem */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#108: FILE: fs/fuse/fuse_i.h:27:
+    doing the mount will be allowed to access the filesystem */

CHECK:BIT_MACRO: Prefer using the BIT macro
#109: FILE: fs/fuse/fuse_i.h:28:
+#define FUSE_ALLOW_OTHER         (1 << 1)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#112: FILE: fs/fuse/fuse_i.h:31:
+/** If the FUSE_KERNEL_CACHE flag is given, then files will be cached
+    until the INVALIDATE operation is invoked */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#112: FILE: fs/fuse/fuse_i.h:31:
+    until the INVALIDATE operation is invoked */

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: fs/fuse/fuse_i.h:32:
+#define FUSE_KERNEL_CACHE        (1 << 2)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#116: FILE: fs/fuse/fuse_i.h:35:
+/** Allow root and setuid-root programs to access fuse-mounted
+    filesystems */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#116: FILE: fs/fuse/fuse_i.h:35:
+    filesystems */

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: fs/fuse/fuse_i.h:36:
+#define FUSE_ALLOW_ROOT		 (1 << 4)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: fs/fuse/inode.c:149:
+^IOPT_DEFAULT_PERMISSIONS, $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 14 warnings, 7 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000229128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
